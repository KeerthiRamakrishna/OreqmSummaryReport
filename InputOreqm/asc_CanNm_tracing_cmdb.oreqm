<?xml version="1.0" encoding="UTF-8"?>
<tracingresults>
  <environment>
    <toolname>ReqM2</toolname>
    <toolversion>1.30.0 (stable)</toolversion>
    <toolcopyright>Copyright 2010 - 2018 Elektrobit Automotive GmbH</toolcopyright>
    <libxmlversion>2.0207</libxmlversion>
    <libxml2compileversion>2.9.10</libxml2compileversion>
    <libxml2runtimeversion>20912</libxml2runtimeversion>
    <perlversion>v5.32.1</perlversion>
    <perlptrsize>64</perlptrsize>
    <commandline>-t -q -o asc_CanNm_tracing_cmdb.oreqm -O /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements -c /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules_RMP4_0.xml -s approved,rejected --wfatal WDUPLICATEID,WDUPLICATEIDANDVER /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/build/reqm/ReqM2_Native/asc_CanNm_requirements_AUTOSAR_SWS_CANNetworkManagement_4.0.3.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/build/reqm/ReqM2_Native/asc_CanNm_requirements_AUTOSAR_SWS_CANNetworkManagement_R20-11.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/build/reqm/ReqM2_Native/asc_CanNm_requirements_AUTOSAR_SWS_CANNetworkManagement_R21-11.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/build/reqm/ReqM2_Native/asc_CanNm_requirements_EB_Refinements.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/build/reqm/ReqM2_Native/asc_CanNm_requirements_EB_Requirements.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/build/reqm/common_req/CanNm_DbgInst_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/build/reqm/common_req/CanNm_PbcfgM_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/build/reqm/common_req/CanNm_PduLengthType_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/build/reqm/common_req/CanNm_VerifyStub_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/build/reqm/ReqM2_GenericImporter/reqm_DEV.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/build/reqm/ReqM2_GenericImporter/reqm_IMPL.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/build/reqm/ReqM2_GenericImporter/reqm_IMPLXML.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/build/reqm/ReqM2_DocBookImporter/reqm_SWDD.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/build/reqm/ReqM2_OldCImporter/reqm_SWUTS_LEGACY.reqm</commandline>
    <timestamp>Mon Jun 17 21:36:49 2024</timestamp>
  </environment>
  <cmdline>
    <cmdparam>
      <name>I</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>O</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>c</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules_RMP4_0.xml</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>o</name>
      <values>
        <value>asc_CanNm_tracing_cmdb.oreqm</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>q</name>
    </cmdparam>
    <cmdparam>
      <name>s</name>
      <values>
        <value>approved</value>
        <value>rejected</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>t</name>
    </cmdparam>
    <cmdparam>
      <name>wfatal</name>
      <values>
        <value>WDUPLICATEID</value>
        <value>WDUPLICATEIDANDVER</value>
      </values>
    </cmdparam>
  </cmdline>
  <inputfiles>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/build/reqm/ReqM2_Native/asc_CanNm_requirements_AUTOSAR_SWS_CANNetworkManagement_4.0.3.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/build/reqm/ReqM2_Native/asc_CanNm_requirements_AUTOSAR_SWS_CANNetworkManagement_R20-11.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/build/reqm/ReqM2_Native/asc_CanNm_requirements_AUTOSAR_SWS_CANNetworkManagement_R21-11.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/build/reqm/ReqM2_Native/asc_CanNm_requirements_EB_Refinements.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/build/reqm/ReqM2_Native/asc_CanNm_requirements_EB_Requirements.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/build/reqm/common_req/CanNm_DbgInst_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/build/reqm/common_req/CanNm_PbcfgM_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/build/reqm/common_req/CanNm_PduLengthType_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/build/reqm/common_req/CanNm_VerifyStub_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/build/reqm/ReqM2_GenericImporter/reqm_DEV.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/build/reqm/ReqM2_GenericImporter/reqm_IMPL.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/build/reqm/ReqM2_GenericImporter/reqm_IMPLXML.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/build/reqm/ReqM2_DocBookImporter/reqm_SWDD.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/build/reqm/ReqM2_OldCImporter/reqm_SWUTS_LEGACY.reqm</inputfile>
  </inputfiles>
  <configuration>
    <doctypes>
    <regexs>
      <!-- external level -->
      <regex>creq</regex>       <!-- since 10/1018: introduced for updated tracing model-->

      <!-- product line level -->
      <regex>fea</regex>
      <regex>swpad</regex>      <!-- since 10/1018: introduced for updated tracing model-->
      <regex>swts</regex>

      <!-- bundle level -->
      <regex>swrs</regex>
      <regex>swad</regex>
      <regex>swintts</regex>

      <!-- module level -->
      <regex>swdd</regex>
      <regex>swurs</regex>      <!-- since 10/1018: introduced for updated tracing model-->
      <regex>swmts</regex>      <!-- since 01/1010: introduced for updated tracing model RMP4.0-->
      <regex>swuts</regex>
      <regex>impl</regex>

      <!-- legacy items -->
      <regex>dev</regex>
      <regex>man</regex>
      <regex>lim</regex>
    </regexs>
  </doctypes>
    <rules>
    <!-- The Ruleset for RMP4.0 is currently identical to the previous rule set. This rule is
        intoduce to show that the right file is uses. It will be removed when the RMP4.0 rule set is
    reworked -->
    <rule>
      <name>INFO.Rule set RMP4.0</name>
      <description>This rules indicates that RMP4.0 rule set is used.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status!='approved') and (./status!='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>WRN.general.doctypes</name>
      <description>The used doctype is not part of the tracing model</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobjects/@doctype</applyto>
          <condition>((. != 'creq') or (. != 'fea') or (. != 'swpad') or (. != 'swts') or (. != 'swrs') or (. !='swad') or (. != 'swintts') or (.!= 'swdd') or (. != 'swurs') or (. != 'swmts') or (. != 'swuts') or (. != 'impl') or (. != 'dev') or (. != 'man') or (. != 'lim'))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.status</name>
      <description>All specification objects must be either in status=approved or in status=rejected. Other
        statuses are not allowed. How to fix: Set status to rejected or approved.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status!='approved') and (./status!='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.rejected</name>
      <description>Status status=rejected is only allowed for requirements. How to fix: set to approved for specification object that are not requirements.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype!='swrs')  and (../@doctype!='swmrs') and (../@doctype!='swurs') and (./status='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.comment</name>
      <description>Specification objects with status=rejected shall have a comment or rationale that
        starts with on of the following texts: "This requirement is informational only", "This requirement is not applicable".
        How to fix: Add some text starting with "This requirement is informational only"
        or "This requirement is not applicable" to either the comment or to the rationale.
        Comment: Implementation of check checks for contains instead of starts-with since there is
        no trim function in the used XPATH engine.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>contains(./comment,"This requirement is informational only") or contains(./rationale,"This requirement is informational only") or contains(./comment,"This requirement is not applicable") or contains(./rationale,"This requirement is not applicable")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.rejected.coverage</name>
      <description>Specification objects with status=rejected shall not need coverage. How to fix: remove need for coverage.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>count(./needscoverage)=0</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swurs.needscoverage.count</name>
      <description>Unit requirements with status=approved need to be covered, exceptions from
      this rule: configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") and requirements with
      a comment starting with "The adherence to this requirement is ensured by the following
      release check (URL to the checklist template plus ID of the check):".
      How to fix: Provide a needsobj element for those specobjects or comment according to the rule.
      </description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swurs') and (./status='approved') and count(./needscoverage/needsobj)=0 and count(./fulfilledby/ffbObj)=0]</applyto>
          <!--This condition is false if the id of a specification object does not end with '_Conf' or '_CONF' or does not start with ECUC_ -->
          <condition>substring-after(./id,"ECUC_")!="" or substring-before(./id,"_Conf")!="" or substring-before(./id,"_CONF")!="" or contains(./comment,"The adherence to this requirement is ensured by the following release check (URL to the checklist template plus ID of the check):")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swurs.needscoverage.rationale</name>
      <description>Requirements with status=approved and without coverage needs that are
        configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") shall have a comment or rationale
        with the following text: "This is a configuration parameter requirement without functional
        specification.". How to fix: Add some text starting with "This is a configuration parameter
        requirements without functional specification" to either the comment or to the rationale.</description>
      <regexchecks>
        <regexcheck>
          <applyto>//specobject[(../@doctype='swurs') and (./status='approved') and count(./needscoverage/needsobj)=0 and (substring-after(./id,"ECUC_")!="" or substring-before(./id,"_CONF")!="" or substring-before(./id,"_Conf")!="")]</applyto>
          <regex>This is a configuration parameter requirement without functional specification.</regex>
        </regexcheck>
      </regexchecks>
    </rule>

    <rule>
      <name>ERR.swrs.needscoverage.rationale</name>
      <description>Requirements with status=approved and without coverage needs that are
        configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") shall have a comment or rationale
        with the following text: "This is a configuration parameter requirement without functional
        specification.". How to fix: Add some text starting with "This is a configuration parameter
        requirements without functional specification" to either the comment or to the rationale.</description>
      <regexchecks>
        <regexcheck>
          <applyto>//specobject[(../@doctype='swrs') and (./status='approved') and count(./needscoverage/needsobj)=0 and (substring-after(./id,"ECUC_")!="" or substring-before(./id,"_CONF")!="" or substring-before(./id,"_Conf")!="")]</applyto>
          <regex>This is a configuration parameter requirement without functional specification.</regex>
        </regexcheck>
      </regexchecks>
    </rule>

    <rule>
      <name>ERR.swurs.releases</name>
      <description>Requirements which originates from AUTOSAR (source tag contains term 'AUTOSAR_SWS', 'AUTOSAR_TPS',
        'AUTOSAR_ASWS' or 'AUTOSAR_TR') shall have their release tag set to 'AUTOSAR {major}.{minor}.{patch}' (e.g. 'AUTOSAR 4.3.0').
        Other requirements (including refinements of AUTOSAR requirements) must not contain any of the listed prefixes as
        part of the source tag.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swurs') and (contains(./source,'AUTOSAR_SWS') or contains(./source,'AUTOSAR_TPS') or contains(./source,'AUTOSAR_ASWS') or contains(./source,'AUTOSAR_TR'))]</applyto>
          <condition>contains(./releases/release,'AUTOSAR')</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swrs.releases</name>
      <description>Requirements which originates from AUTOSAR (source tag contains term 'AUTOSAR_SWS', 'AUTOSAR_TPS',
        'AUTOSAR_ASWS' or 'AUTOSAR_TR') shall have their release tag set to 'AUTOSAR {major}.{minor}.{patch}' (e.g. 'AUTOSAR 4.3.0').
        Other requirements (including refinements of AUTOSAR requirements) must not contain any of the listed prefixes as
        part of the source tag.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swrs') and (contains(./source,'AUTOSAR_SWS') or contains(./source,'AUTOSAR_TPS') or contains(./source,'AUTOSAR_ASWS') or contains(./source,'AUTOSAR_TR'))]</applyto>
          <condition>contains(./releases/release,'AUTOSAR')</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swdd.needscoverage.count</name>
      <description>Design elements with status=approved need to be covered.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swdd') and (./status='approved') and count(./needscoverage/needsobj)=0]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swurs.needscoverage.doctypes</name>
      <description>Requirements can be covered only by swurs, swad, dev, lim, swdd, impl, swuts, swmts, or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swurs')]</applyto>
          <condition>(./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="swad" or ./needscoverage/needsobj="dev" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swmts" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swrs.needscoverage.doctypes</name>
      <description>Requirements of type swrs can be covered only by swrs, swurs, swad, swintts or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swrs')]</applyto>
          <condition>(./needscoverage/needsobj="swrs" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="swad" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swintts" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swdd.needscoverage.doctypes</name>
      <description>Design elements of type swdd can only be covered by swdd, swurs, impl, swuts, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swdd')]</applyto>
          <condition>(./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swmts" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dev.needscoverage.count</name>
      <description>Deviations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dev')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swuts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swuts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swmts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swmts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swintts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swintts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.needscoverage.count</name>
      <description>Manual test cases shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.impl.needscoverage.count</name>
      <description>Source code shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='impl')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.lim.needscoverage.count</name>
      <description>Limitations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='lim')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.fea.needscoverage.test</name>
      <description>Features shall be tested by software test ('swts') or manuel test ('man'). If no test is planned a justification shall be given.
                   A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>(
               ./needscoverage/needsobj="swts" or ./needscoverage/needsobj="man" or ./fulfilledby/ffbObj/ffbType="swts" or ./fulfilledby/ffbObj/ffbType="man" or contains(./furtherinfo,"fea.needscoverage.test") or contains(./furtherinfo,"fea.needscoverage.doctypes"))</condition>
        </conditioncheck>
      </conditionchecks>
          </rule>

    <rule>
      <name>WRN.fea.needscoverage.impl</name>
      <description>Features shall be covered by implementation fea, swrs, swad, swpad, swurs, man and swts. For lagacy features a justification is acceppted. A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>( ./needscoverage/needsobj="swrs" or ./fulfilledby/ffbObj/ffbType="swrs" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swpad" or ./fulfilledby/ffbObj/ffbType="swpad" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="fea" or ./fulfilledby/ffbObj/ffbType="fea" or contains(./furtherinfo,"fea.needscoverage.impl"))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>


    <rule>
      <name>ERR.swad.fulfilledby.doctypes</name>
      <description>Architectural design objects of type swad can only be covered by swurs, swad, swdd, swintts, man, otherwise they should be refined with swrs</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swad')]</applyto>
          <condition>(./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="req" or ./needscoverage/needsobj="req" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swad" or ./fulfilledby/ffbObj/ffbType="swdd" or ./fulfilledby/ffbObj/ffbType="swintts" or ./needscoverage/needsobj="swintts" or ./fulfilledby/ffbObj/ffbType="man" or ./needscoverage/needsobj="man") </condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swmts.providescoverage.doctypes</name>
      <description>Test case specifications (tcs) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='tcs')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.providescoverage.doctypes</name>
      <description>Manual test case specification (man) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swuts.providescoverage.doctypes</name>
      <description>Software unit test case specification (swuts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swuts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swintts.providescoverage.doctypes</name>
      <description>Software integration test case specification (swintts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swintts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swts.providescoverage.doctypes</name>
      <description>Software test case specification (swts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

  </rules>
    <oreqmRules>

        <rule>
            <name>WRN.swts.needscoverage.count</name>
            <description>Violated if there are more than 10 swts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
        <rule>
            <name>WRN.man.needscoverage.count</name>
            <description>Violated if there are more than 10 man specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='man']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='man']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>man.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
        <rule>
            <name>WRN.swintts.needscoverage.count</name>
            <description>Violated if there are more than 10 swintts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swintts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swintts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swintts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
        <rule>
            <name>WRN.swmts.needscoverage.count</name>
            <description>Violated if there are more than 10 swmts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swmts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swmts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swmts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swuts.needscoverage.count</name>
            <description>Violated if there are more than 10 swuts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swuts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swuts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swuts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swpad.needscoverage.count</name>
            <description>Violated if there are more than 10 swpad specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swpad']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swpad']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swpad.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swrs.needscoverage.count</name>
            <description>Violated if there are more than 10 swrs specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swrs']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swrs']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swrs.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swad.needscoverage.count</name>
            <description>Violated if there are more than 10 swad specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swad']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swad']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swad.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swurs.needscoverage.count</name>
            <description>Violated if there are more than 10 swurs specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swurs']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swurs']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swurs.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swdd.needscoverage.count</name>
            <description>Violated if there are more than 10 swdd specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swdd']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swdd']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swdd.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.impl.needscoverage.count</name>
            <description>Violated if there are more than 10 impl specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='impl']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='impl']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>impl.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swrs.fulfilledby.count</name>
            <description>Violated if there are more than 10 swrs specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swrs'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swrs'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swrs.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swad.fulfilledby.count</name>
            <description>Violated if there are more than 10 swad specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swad'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swad'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swad.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swurs.fulfilledby.count</name>
            <description>Violated if there are more than 10 swurs specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swurs'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swurs'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swurs.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swdd.fulfilledby.count</name>
            <description>Violated if there are more than 10 swdd specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swdd'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swdd'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swdd.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
  </oreqmRules>
  </configuration>
  <specdocument>
    <specobjects doctype="swurs">
    <specobject>
      <id>CanNm.ASR403.CANNM014_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        Name: CanNmNumberOfChannels
        Parameter Type: Integer
        Parent Containers: CanNmGlobalConfig,
        Description: Number of Can NM channels allowed within one ECU.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Origin: AUTOSAR_ECUC
        Symbolic-Name-Value: false
        Max-Value: 255 (Type:
        Min-Value: 1 (Type:
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_244</srcid><srcstatus/><internalId>736</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>0</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM017_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        Name: CanNmChannelConfig
        Container Type: Sub-Container
        Parent Containers: CanNmGlobalConfig,
        Sub-Containers: CanNmRxPdu CanNmTxPdu CanNmUserDataTxPdu
        Description: This container contains the channel specific configuration parameter of the CanNm.
        Lower Multiplicity: 1
        infinite
      </description>
      <comment>
        Parameter check will happens individually.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1209</srcid><srcstatus/><internalId>1276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM021_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        Name: CanNmWaitBusSleepTime
        Parameter Type: FloatValue
        Parent Containers: CanNmChannelConfig,
        Description: Timeout for bus calm down phase.
        Introduction: It denotes the time in seconds how long the NM shall stay in the Prepare Bus-
        Sleep Mode before transition into Bus-Sleep Mode shall take place.
        It shall be equal for all nodes in the cluster.
        It shall be long enough to make all Tx-buffer empty.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Origin: AUTOSAR_ECUC
        Symbolic-Name-Value: false
        Max-Value: 65.535 (Type:
        Min-Value: 0.001 (Type:
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32022</srcid><srcstatus/><internalId>1588</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2530</srcid><srcstatus/><internalId>1353</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>2</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM030_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        Name: CanNmMsgTimeoutTime
        Parameter Type: FloatValue
        Parent Containers: CanNmChannelConfig,
        Description: Transmission Timeout of NM-message. If there is no transmission confirmation by
        the CAN Interface within this timeout, the CANNM module shall give an error notification.
        Introduction: This parameter is only valid if CANNM_PASSIVE_MODE_ENABLED is disabled.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Origin: AUTOSAR_ECUC
        Symbolic-Name-Value: false
        Max-Value: 65.535 (Type:
        Min-Value: 0.001 (Type:
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_NmMessageTxTimeout</srcid><srcstatus/><internalId>1549</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_TxTimeoutCanIfTransmitFails</srcid><srcstatus/><internalId>1550</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_PncEnabledNmTimoutTime</srcid><srcstatus/><internalId>1604</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_PncDisabledNmTimoutTime</srcid><srcstatus/><internalId>1606</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2147</srcid><srcstatus/><internalId>1334</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>3</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM032_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        Name: CanNmMainFunctionPeriod
        Parameter Type: FloatValue
        Parent Containers: CanNmGlobalConfig,
        Description: Call cycle in seconds of CanNm_MainFunction.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Origin: AUTOSAR_ECUC
        Symbolic-Name-Value: false
        Max-Value: 0.255 (Type:
        Min-Value: 0.001 (Type:
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_708</srcid><srcstatus/><internalId>1250</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>4</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM073_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        Name: CanNmPnHandleMultipleNetworkRequests
        Parameter Type: Boolean
        Parent Containers: CanNmChannelConfig,
        Description: false: CanNm_NetworkRequest is ignored in NO.
        Introduction: true: CanNm_NetworkRequest triggers a change from NO to RM.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Origin: AUTOSAR_ECUC
        Symbolic-Name-Value: false
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_PN_SpontaneousTr_ReEnterRMS</srcid><srcstatus/><internalId>1525</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32030</srcid><srcstatus/><internalId>1580</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_CanIf_Transmit_Check_5</srcid><srcstatus/><internalId>1659</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_CanIf_Transmit_Check_6</srcid><srcstatus/><internalId>1660</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1743</srcid><srcstatus/><internalId>1315</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>5</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM074_Conf</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        Name: CanNmCarWakeUpRxEnabled
        Parameter Type: Boolean
        Parent Containers: CanNmChannelConfig,
        Description: Enables or disables support of CarWakeUp bit evaluation in received NM messages.
        Introduction: FALSE - CarWakeUp not supported
        TRUE - CarWakeUp supported
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Origin: AUTOSAR_ECUC
        Symbolic-Name-Value: false
      </description>
      <comment>
        This requirement is not applicable.
        New requirement added in AUTOSAR_SWS_CANNetworkManagement_4.3.0.xml file
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>6</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM014</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        If the node detection functionality is enabled and if CANNM_REPEAT_MSG_IND_ENABLED is enabled,
        the CanNm module shall call the callback function Nm_RepeatMessageIndication upon each
        reception of the RepeatMessageRequest bit.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_Nm_RepeatMsgIndication_1</srcid><srcstatus/><internalId>1761</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Nm_RepeatMsgIndication_2</srcid><srcstatus/><internalId>1789</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2183</srcid><srcstatus/><internalId>1010</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>7</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM019</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        Detected development errors shall be reported to the Det_ReportError service of the Development
        Error Tracer (DET) if the pre-processor switch CANNM_DEV_ERROR_DETECT is set
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32007</srcid><srcstatus/><internalId>1501</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32008</srcid><srcstatus/><internalId>1503</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32009</srcid><srcstatus/><internalId>1504</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_DETchecks_ConfirmPnAvailability</srcid><srcstatus/><internalId>1509</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_DET</srcid><srcstatus/><internalId>1666</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/CanNm_Int.h.m4_55</srcid><srcstatus/><internalId>794</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>8</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM020</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        Production errors shall be reported to the Diagnostic Event Manager.
      </description>
      <comment>
        This requirement is not applicable because CanNm doesn't define any
        production error.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>9</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM021</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        BSW00402 in the General Requirements on Basic Software Modules [2] shall be
        published within the header file of this module and need to be provided in the BSW
        Module Description. The according module abbreviation can be found in the List of
        Basic Software Modules [19]
        Additional module-specific published parameters are listed below if applicable.
      </description>
      <comment>
        Refer SWS(pdf) to see common published information
        CANNM_VENDOR_API_INFIX is not required since the requirement is invalid.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/CanNm_Api.h_21</srcid><srcstatus/><internalId>787</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>10</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM039</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        If CanNm is not initialized a call of any CanNm function (except CanNm_Init) shall be rejected
        and E_NOT_OK shall be returned if the API has a return value. If development error detection is
        enabled it shall report CANNM_E_NO_INIT to the Development Error Tracer.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32007</srcid><srcstatus/><internalId>1501</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_DETchecks_ConfirmPnAvailability</srcid><srcstatus/><internalId>1509</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_DET</srcid><srcstatus/><internalId>1666</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_439</srcid><srcstatus/><internalId>837</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_533</srcid><srcstatus/><internalId>847</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_605</srcid><srcstatus/><internalId>855</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_675</srcid><srcstatus/><internalId>863</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_749</srcid><srcstatus/><internalId>871</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_838</srcid><srcstatus/><internalId>880</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_935</srcid><srcstatus/><internalId>890</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1022</srcid><srcstatus/><internalId>899</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1124</srcid><srcstatus/><internalId>909</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1211</srcid><srcstatus/><internalId>919</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1303</srcid><srcstatus/><internalId>930</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1388</srcid><srcstatus/><internalId>939</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1479</srcid><srcstatus/><internalId>948</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1608</srcid><srcstatus/><internalId>963</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1702</srcid><srcstatus/><internalId>971</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1788</srcid><srcstatus/><internalId>979</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1878</srcid><srcstatus/><internalId>985</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1987</srcid><srcstatus/><internalId>994</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2244</srcid><srcstatus/><internalId>1014</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2415</srcid><srcstatus/><internalId>1030</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2477</srcid><srcstatus/><internalId>1037</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations><ruleid>WRN.impl.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>11</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM061</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        After initialization the CanNm module shall stop the NM Message Tx Timeout Timer.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_NmMessageTxTimeout</srcid><srcstatus/><internalId>1549</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_351</srcid><srcstatus/><internalId>830</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1411</srcid><srcstatus/><internalId>1171</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>12</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM064</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>2</version>
      <description>
        The NM Message Tx Timeout Timer shall be started with CANNM_MSG_TIMEOUT_TIME when the
        transmission of a NM message is requested.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB_Ref.CANNM064</srcid><srcstatus/><internalId>467</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>13</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM075</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        The location of the control Bit vector shall be configurable by means of CANNM_PDU_CBV_POSITION
        to Byte 0, Byte 1, or off (default: Byte 1)
      </description>
      <comment>
        Info - Configuration check.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2244</srcid><srcstatus/><internalId>1340</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>14</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM077</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        The CanNm_MainFunction function shall be scheduled by the BSW scheduler
      </description>
      <comment>
        This requirement is not applicable. It is a requirement for the system
        designer/integrator.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>15</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM088</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        If bus communication in a CanNm cluster is released and there are no Network Management PDUs on
        the bus for a configurable amount of time determined by CANNM_TIMEOUT_TIME +
        CANNM_WAIT_BUS_SLEEP_TIME (both configuration parameters) transition intoÿthe Bus-Sleep Mode
        shall be performed.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32022</srcid><srcstatus/><internalId>1588</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1312</srcid><srcstatus/><internalId>1161</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.UNI_TIMEOUT_PREPARE_BUS_SLEEP_MODE</srcid><srcstatus/><internalId>1446</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>16</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM100</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        When the Repeat Message State is entered from Bus-Sleep Mode, Prepare-Bus-Sleep Mode, Normal
        Operation State or Ready Sleep State, the CanNm module shall start transmission of Network
        Management PDUs unless passive mode is enabled and/or communication is disabled.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB_Ref.CANNM100.1</srcid><srcstatus/><internalId>421</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.CANNM100.2</srcid><srcstatus/><internalId>422</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.CANNM100.3</srcid><srcstatus/><internalId>423</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.CANNM100.4</srcid><srcstatus/><internalId>424</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>17</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM115</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        The CanNm module shall stay in the Prepare Bus-Sleep Mode for a configurable amount of time
        determined by the CANNM_WAIT_BUS_SLEEP_TIME (configuration parameter); after that time the
        Prepare Bus-Sleep Mode shall be left and the Bus-Sleep Mode shall be entered.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32022</srcid><srcstatus/><internalId>1588</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_State_Transitions_Multicore_1</srcid><srcstatus/><internalId>1664</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1312</srcid><srcstatus/><internalId>1161</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.UNI_TIMEOUT_PREPARE_BUS_SLEEP_MODE</srcid><srcstatus/><internalId>1446</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>18</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM128</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        If CanNm_PassiveStartUp is called in the Bus-Sleep Mode, the CanNm module shall enter the
        Network Mode; by default the CanNm module shall enter the Repeat Message State (refer to
        CANNM314 CANNM095 and CANNM104)
      </description>
      <comment>
        This requirement is not applicable (new requirement is added SWS_CanNm_00128)
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>19</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM135</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        Support of Repeat Message Request Bit and Repeat Message State Request shall be statically
        configurable with use of the CANNM_NODE_DETECTION_ENABLED switch (configuration parameter)
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB_Ref.CANNM135.1</srcid><srcstatus/><internalId>470</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.CANNM135.2</srcid><srcstatus/><internalId>471</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>20</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM162</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        Passive Mode shall be statically configured for all instances.
      </description>
      <comment>
        This requirement is informational only.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>21</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM163</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        If Passive Mode is used (configuration parameter CANNM_PASSIVE_MODE_ENABLED) the following
        configurations options shall be disabled:
        Bus Synchronization(configuration parameter CANNM_BUS_SYNCHRONIZATION_ENABLED)
        Bus Load Reduction(configuration parameter CANNM_BUS_LOAD_REDUCTION_ENABLED)
        Remote Sleep Indication (configuration parameter CANNM_REMOTE_SLEEP_IND_ENABLED)
        Node Detection (configuration parameter CANNM_NODE_DETECTION_ENABLED)
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB_Ref.CANNM163.1</srcid><srcstatus/><internalId>445</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.CANNM163.2</srcid><srcstatus/><internalId>446</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.CANNM163.3</srcid><srcstatus/><internalId>447</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.CANNM163.4</srcid><srcstatus/><internalId>448</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>22</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM168</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        Communication Control shall be statically configurable with use of the
        CANNM_COM_CONTROL_ENABLED switch (configuration parameter)
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_131</srcid><srcstatus/><internalId>721</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>23</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM178</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        When the Network Management PDU transmission ability is enabled, the CanNm module shall start
        the CanNm Message Cycle Timer with CANNM_MSG_CYCLE_OFFSET in order to start transmission of
        Network Management PDUs.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0114</srcid><srcstatus/><internalId>1736</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1691</srcid><srcstatus/><internalId>1193</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.Internal_Transition_NETWORK_MODE_0</srcid><srcstatus/><internalId>1442</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.Internal_Transition_NETWORK_MODE_1</srcid><srcstatus/><internalId>1443</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>24</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM188</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        The detection of development errors is configurable (ON / OFF) at pre-compile time. The switch
        CANNM_DEV_ERROR_DETECT  shall activate or deactivate the detection of all development errors.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_237</srcid><srcstatus/><internalId>735</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>25</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM191</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        Each CanNm function that is not executed due to missing initialization of CanNm shall return
        E_NOT_OK to the calling function if development error detection is enabled (
        CANNM_DEV_ERROR_DETECT is set to TRUE)
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32007</srcid><srcstatus/><internalId>1501</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_439</srcid><srcstatus/><internalId>837</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_533</srcid><srcstatus/><internalId>847</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_605</srcid><srcstatus/><internalId>855</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_675</srcid><srcstatus/><internalId>863</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_749</srcid><srcstatus/><internalId>871</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_838</srcid><srcstatus/><internalId>880</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_935</srcid><srcstatus/><internalId>890</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1022</srcid><srcstatus/><internalId>899</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1124</srcid><srcstatus/><internalId>909</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1211</srcid><srcstatus/><internalId>919</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1303</srcid><srcstatus/><internalId>930</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1388</srcid><srcstatus/><internalId>939</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1479</srcid><srcstatus/><internalId>948</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1608</srcid><srcstatus/><internalId>963</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1702</srcid><srcstatus/><internalId>971</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2244</srcid><srcstatus/><internalId>1014</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations><ruleid>WRN.impl.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>26</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM196</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        If detection of development errors is enabled by CANNM_DEV_ERROR_DETECT (configuration
        parameter), then for all CanNm API services validity check of input parameters shall be made.
        Exception: The NULL Pointer check of input parameters shall not be done for CanNm_Init.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32009</srcid><srcstatus/><internalId>1504</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2253</srcid><srcstatus/><internalId>1016</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2262</srcid><srcstatus/><internalId>1018</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2271</srcid><srcstatus/><internalId>1020</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>27</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM197</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        Parameter type checking shall be made at compile time; ifÿtypes do not fit the compilation
        process shall be stopped and respective compilation warnings or errors shall be returned as far
        as supported by the compiler.
      </description>
      <comment>
        This requirement is informational only.
        Info - Parameter type check should be done during compile time.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>28</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM198</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        Parameter value check (for parameters of the constant value) shall be made at configuration
        time; if the value is invalid, the configuration process shall be stopped and respective
        configuration error shall be reported.
      </description>
      <comment>
        This requirement is informational only.
        Info - configuration parameter check should be done during
        configuration time.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>29</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM199</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        Parameter value check (for parameters of the variable value) shall be made at execution time;
        if the value is invalid, execution of a service shall be rejected andÿrespective development
        error shall be reported.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32008</srcid><srcstatus/><internalId>1503</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32009</srcid><srcstatus/><internalId>1504</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_DETchecks_ConfirmPnAvailability</srcid><srcstatus/><internalId>1509</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2258</srcid><srcstatus/><internalId>1017</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2267</srcid><srcstatus/><internalId>1019</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>30</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM200</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        The CanNm module shall perform Inter Module Checks to avoid integration of incompatible files.
        The imported included files shall be checked by preprocessing directives.
      </description>
      <comment>
        This requirement is not applicable because it is a global deviation and
        documented in wiki(BSWM_CHK_401).
        Info - version numbers for C- and H files should be identical.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>31</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM210</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        If the function CanNm_Init has to indicate an error to the DET, it shall use the value 0x00 as
        the instance id.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32007</srcid><srcstatus/><internalId>1501</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/CanNm_Api.h_41</srcid><srcstatus/><internalId>788</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>32</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM212</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        If the current state is not equal to Bus-Sleep Mode, then the function CanNm_PassiveStartUp
        shall have no effect except that E_NOT_OK is returned.
      </description>
      <comment>
        This requirement is not applicable (see SWS_CanNm_00128).
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>33</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM217</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        Service name:      CanNm_SetUserData
        Syntax:            Std_ReturnType        CanNm_SetUserData(
        const   NetworkHandleType       nmChannelHandle,
        const   uint8*      const  nmUserDataPtr
        Service ID[hex]:   0x04
        Sync/Async:        Synchronous
        Reentrancy:        Non Reentrant
        nmChannelHandleIdentification of the NM-channel
        Parameters (in):   nmUserDataPtr         Pointer where the user data for the next transmitted
        NM
        message shall be copied from
        Parameters         None
        inout)
        Parameters (out):  None
        Return value:      Std_ReturnType        E_OK: No error
        E_NOT_OK: Setting of user data has failed
        Description:       Set user data for NM messages transmitted next on the bus.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_1</srcid><srcstatus/><internalId>1459</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80002</srcid><srcstatus/><internalId>1478</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SetUserData</srcid><srcstatus/><internalId>1566</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0103</srcid><srcstatus/><internalId>1754</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_917</srcid><srcstatus/><internalId>887</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>34</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM225</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        The function CanNm_GetVersionInfo shall return the version information of this module. The
        version information includes:
        Module Id
        Vendor Id
        Vendor specific version numbers (BSW00407)
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0135</srcid><srcstatus/><internalId>1658</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1580</srcid><srcstatus/><internalId>959</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>35</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM229</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        The callback function CanNm_TxConfirmation shall inform the DET, if development error detection
        is enabled (CANNM_DEV_ERROR_DETECT is set to TRUE) and if function call has failed because of
        the following reasons:
        Invalid PDU ID (CANNM_E_INVALID_PDUID)
        CanNm was not initialized (CANNM_E_NO_INIT)
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB_Ref.CANNM229.1</srcid><srcstatus/><internalId>456</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.CANNM229.2</srcid><srcstatus/><internalId>457</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>36</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM230</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        If an error has to be indicated to the DET, the callback function CanNm_TxConfirmation shall
        use the value of CanNm channel handle to determine the instance id.
      </description>
      <comment>
        This requirement is not applicable. It is a general requirement.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>37</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM232</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        The callback function CanNm_RxIndication shall inform the DET, if development error detection
        is enabled (CANNM_DEV_ERROR_DETECT is set to TRUE) and if function call has failed because of
        the following reasons:
        Invalid PDU ID (CANNM_E_INVALID_PDUID)
        CanNm was not initialized (CANNM_E_NO_INIT)
        PduInfoPtr or SduDataPtr equals NULL_PTR (CANNM_E_NULL_POINTER)
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB_Ref.CANNM232.1</srcid><srcstatus/><internalId>458</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.CANNM232.2</srcid><srcstatus/><internalId>459</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.CANNM232.3</srcid><srcstatus/><internalId>460</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>38</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM233</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        If an error has to be indicated to the DET, the callback function CanNm_RxIndication shall use
        the value of CanNm channel handle as the instance id.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32007</srcid><srcstatus/><internalId>1501</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32008</srcid><srcstatus/><internalId>1503</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32009</srcid><srcstatus/><internalId>1504</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2008</srcid><srcstatus/><internalId>997</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>39</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM241</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        If the CANNM_DEV_ERROR_DETECT switch is enabled API parameter checking is enabled. The detailed
        description of the detected errors can be found in chapter 7.14 and chapter 7.19.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32008</srcid><srcstatus/><internalId>1503</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32009</srcid><srcstatus/><internalId>1504</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_DETchecks_ConfirmPnAvailability</srcid><srcstatus/><internalId>1509</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_292</srcid><srcstatus/><internalId>824</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_437</srcid><srcstatus/><internalId>836</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_531</srcid><srcstatus/><internalId>846</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_603</srcid><srcstatus/><internalId>854</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_673</srcid><srcstatus/><internalId>862</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_747</srcid><srcstatus/><internalId>870</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_836</srcid><srcstatus/><internalId>879</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_933</srcid><srcstatus/><internalId>889</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_976</srcid><srcstatus/><internalId>895</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1020</srcid><srcstatus/><internalId>898</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1062</srcid><srcstatus/><internalId>904</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1122</srcid><srcstatus/><internalId>908</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1209</srcid><srcstatus/><internalId>918</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1301</srcid><srcstatus/><internalId>929</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1386</srcid><srcstatus/><internalId>938</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1477</srcid><srcstatus/><internalId>947</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1569</srcid><srcstatus/><internalId>957</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1606</srcid><srcstatus/><internalId>962</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1700</srcid><srcstatus/><internalId>970</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1876</srcid><srcstatus/><internalId>984</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1903</srcid><srcstatus/><internalId>987</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1985</srcid><srcstatus/><internalId>993</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2242</srcid><srcstatus/><internalId>1013</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2413</srcid><srcstatus/><internalId>1029</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2475</srcid><srcstatus/><internalId>1036</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations><ruleid>WRN.impl.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>40</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM243</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        The CanNm module shall provide parameter value check only in "development mode"
      </description>
      <comment>
        This is not a testable requirement because verifying this in a test case
        would require CanNmDevErrorDetect turned off and APIs called with invalid
        parameters - which would result in unpredictable runtime behavior.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_437</srcid><srcstatus/><internalId>836</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_531</srcid><srcstatus/><internalId>846</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_603</srcid><srcstatus/><internalId>854</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_673</srcid><srcstatus/><internalId>862</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_747</srcid><srcstatus/><internalId>870</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_836</srcid><srcstatus/><internalId>879</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_933</srcid><srcstatus/><internalId>889</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_976</srcid><srcstatus/><internalId>895</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1020</srcid><srcstatus/><internalId>898</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1062</srcid><srcstatus/><internalId>904</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1122</srcid><srcstatus/><internalId>908</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1209</srcid><srcstatus/><internalId>918</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1301</srcid><srcstatus/><internalId>929</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1386</srcid><srcstatus/><internalId>938</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1477</srcid><srcstatus/><internalId>947</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1569</srcid><srcstatus/><internalId>957</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1606</srcid><srcstatus/><internalId>962</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1700</srcid><srcstatus/><internalId>970</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1876</srcid><srcstatus/><internalId>984</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1903</srcid><srcstatus/><internalId>987</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1985</srcid><srcstatus/><internalId>993</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2242</srcid><srcstatus/><internalId>1013</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2413</srcid><srcstatus/><internalId>1029</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2475</srcid><srcstatus/><internalId>1036</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations><ruleid>WRN.impl.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>41</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM250</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        Only parameters with "Pre-compile time"configuration are allowed in this variant.
      </description>
      <comment>
        This requirement is informational only.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>42</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM251</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        Only parameters with "Pre-compile time" and"Link time" are allowed in this variant.
      </description>
      <comment>
        This requirement is informational only.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>43</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM252</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        Parameters with "Pre-compile time","Link time" and "Post-build time" are allowed in this
        variant.
      </description>
      <comment>
        This requirement is informational only.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>44</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM258</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        The function CanNm_NetworkRelease shall change the Network state to 'released'
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32029</srcid><srcstatus/><internalId>1583</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_711</srcid><srcstatus/><internalId>867</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>45</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM270</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        Configuration of CanNm_GetNodeIdentifier: Optional (Only available if CANNM_PDU_NID_POSITION is
        not set to off)
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_DiffrentChFeatures</srcid><srcstatus/><internalId>1572</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_DiffrentChFeatures_DET</srcid><srcstatus/><internalId>1575</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_PB_GetNodeIdentifier</srcid><srcstatus/><internalId>1608</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1096</srcid><srcstatus/><internalId>907</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1158</srcid><srcstatus/><internalId>915</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>46</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM272</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        Configuration of CanNm_GetLocalNodeIdentifier: Optional (Only available if
        CANNM_PDU_NID_POSITION is not set to off.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_DiffrentChFeatures</srcid><srcstatus/><internalId>1572</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_DiffrentChFeatures_DET</srcid><srcstatus/><internalId>1575</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1184</srcid><srcstatus/><internalId>917</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1254</srcid><srcstatus/><internalId>926</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations><ruleid>WRN.swuts.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>47</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM274</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        Configuration of CanNm_RepeatMessageRequest: Optional (Only available if
        CANNM_NODE_DETECTION_ENABLED is set to TRUE)
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_DiffrentChFeatures_Rpt</srcid><srcstatus/><internalId>1573</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1278</srcid><srcstatus/><internalId>928</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>48</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM276</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        Configuration of CanNm_GetPduData: Optional (Only available if CANNM_NODE_DETECTION_ENABLED or
        CANNM_USER_DATA_ENABLED is set to TRUE or CANNM_PDU_NID_POSITION is not set to off)
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB_Ref.CANNM276.1</srcid><srcstatus/><internalId>472</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.CANNM276.2</srcid><srcstatus/><internalId>473</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.CANNM276.3</srcid><srcstatus/><internalId>474</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>49</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM278</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        Configuration of CanNm_GetVersionInfo: Optional (only available if CANNM_VERSION_INFO_API is
        set to TRUE)
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0135</srcid><srcstatus/><internalId>1658</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1560</srcid><srcstatus/><internalId>956</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>50</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM292</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        When the NULL Pointer is passed as an argument to a CanNm service, the called function shall
        not be executed, but instead of that it shall report CANNM_E_NULL_POINTER to the Development
        Error Tracer and if possible, it shall return E_NOT_OK to the calling function if development
        error detection is enabled (CANNM_DEV_ERROR_DETECT is set to TRUE)
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32009</srcid><srcstatus/><internalId>1504</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_299</srcid><srcstatus/><internalId>825</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_952</srcid><srcstatus/><internalId>893</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1039</srcid><srcstatus/><internalId>902</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1142</srcid><srcstatus/><internalId>912</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1232</srcid><srcstatus/><internalId>922</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1405</srcid><srcstatus/><internalId>942</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1496</srcid><srcstatus/><internalId>951</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1502</srcid><srcstatus/><internalId>952</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1573</srcid><srcstatus/><internalId>958</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1721</srcid><srcstatus/><internalId>974</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2008</srcid><srcstatus/><internalId>997</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2262</srcid><srcstatus/><internalId>1018</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations><ruleid>WRN.impl.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>51</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM299</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        CanNm_Cfg.c shall contain pre-compile time configuration parameters implemented as "const"
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/src/CanNm_Cfg.c_50</srcid><srcstatus/><internalId>754</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>52</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM300</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        CanNm_Lcfg.c shall contain link time configurable parameters.
      </description>
      <comment>
        No support for link time configuration.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.NoLinkTimeSupport</srcid><srcstatus/><internalId>673</internalId></linkedfrom><linkedfrom><srcid>dev.CanNm.CanNmMsgCycleOffset</srcid><srcstatus/><internalId>678</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>53</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM301</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        CanNm_PBcfg.c shall contain post build time configurable parameters.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_var/xgen/CanNm.xgen_134</srcid><srcstatus/><internalId>1417</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>54</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM302</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        CanNm.h shall contain the declaration of provided interface functions.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/CanNm_Api.h_474</srcid><srcstatus/><internalId>789</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>55</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM303</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        CanNm_Cbk.h shall contain the declaration of provided call-back functions.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/CanNm_Cbk.h_38</srcid><srcstatus/><internalId>791</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>56</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM304</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        CanNm_Cfg.h shall contain pre-compile time configurable parameters.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_3</srcid><srcstatus/><internalId>716</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>57</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM306</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        CanNm.h shall be included for declaration of provided interface functions.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_44</srcid><srcstatus/><internalId>812</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>58</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM307</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        Nm_Cbk.h shall be included for CanNm specific callbacks of Generic Network Management Interface.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_53</srcid><srcstatus/><internalId>813</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_42</srcid><srcstatus/><internalId>1073</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>59</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM310</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        SchM_CanNm.h shall be included for services of the Basic Software Scheduler.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_55</srcid><srcstatus/><internalId>814</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>60</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM311</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        MemMap.h shall be included for Memory Mapping.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/CanNm_Int.h.m4_912</srcid><srcstatus/><internalId>811</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_136</srcid><srcstatus/><internalId>818</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>61</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM330</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        If CanNmComUserDataSupport is enabled the CanNm implementation shall provide an API
        CanNm_Transmit.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_TRANSMIT_PASSIVE</srcid><srcstatus/><internalId>1723</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Transmit</srcid><srcstatus/><internalId>1772</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2213</srcid><srcstatus/><internalId>1012</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>62</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM336</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        When the CanNm module successfully receives a Network Management PDU (call of
        CanNm_RxIndication) in the Bus-Sleep Mode, the CanNm module shall report the error
        CANNM_E_NET_START_IND if development error tracing is enabled (CANNM_DEV_ERROR_DETECT is set to
        TRUE)
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_NetStartInd_DetError</srcid><srcstatus/><internalId>1506</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_340</srcid><srcstatus/><internalId>1085</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>63</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM403</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        The CanNm modules initialization and entering the Bus-Sleep Mode shall cause the PN message
        filtering to be disabled on the respective channel. As a result all received (PN) NM messages
        shall be processed in the following as being normal NM messages (i.e. NM-Timeout Timer shall be
        restarted)
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_PnFiler_During_Init</srcid><srcstatus/><internalId>1522</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2139</srcid><srcstatus/><internalId>1006</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>64</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM418</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        The filter algorithm shall map (bitwise AND) each PN filter mask byte to the corresponding byte
        in the PN info range of the NM message.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2582</srcid><srcstatus/><internalId>1043</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>65</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM422</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        If CanNmPnEiraCalcEnabled is FALSE the CanNm module shall skip the aggregation of external and
        internal PN requests information.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_PnEiraCalcEnabled_PnEraCalcEnabled_FALSE</srcid><srcstatus/><internalId>1548</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1825</srcid><srcstatus/><internalId>980</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>66</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM423</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        If CanNmPnEiraCalcEnabled is TRUE the CanNm module shall calculate the aggregation of external
        PN requests.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_EIRA_ERA_Calc_FilterAlgo</srcid><srcstatus/><internalId>1510</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_TX_EIRA_VERIFICATION</srcid><srcstatus/><internalId>1520</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1825</srcid><srcstatus/><internalId>980</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>67</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM425</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        The CanNm shall only consider the PN request bits that are relevant for the ECU (defined by PN
        filter mask). All other PN request bits are ignored. Thus the EIRA only contains those PN
        requests, which are relevant for the ECU.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_EIRA_ERA_Calc_FilterAlgo</srcid><srcstatus/><internalId>1510</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Rx_EIRA_ERA_Reset_Timer_Chk</srcid><srcstatus/><internalId>1514</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_TX_EIRA_VERIFICATION</srcid><srcstatus/><internalId>1520</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Tx_EIRA_Reset_Timer_Chk</srcid><srcstatus/><internalId>1521</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2761</srcid><srcstatus/><internalId>1049</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>68</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM430</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        If a NM-PDU is send by the CanNm, the CanNm module shall restart the EIRA reset timer for every
        PN request bit that has been requested in the NM message with CanNmPnResetTime.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_Tx_EIRA_Reset_Timer_Chk</srcid><srcstatus/><internalId>1521</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2766</srcid><srcstatus/><internalId>1050</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>69</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM433</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        If CanNmPnEraCalcEnabled is FALSE the CanNm module shall skip the aggregation of external PN
        requests.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1842</srcid><srcstatus/><internalId>981</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2055</srcid><srcstatus/><internalId>1002</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2071</srcid><srcstatus/><internalId>1003</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_PnEiraCalcEnabled_PnEraCalcEnabled_FALSE</srcid><srcstatus/><internalId>1548</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>70</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM434</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        If CanNmPnEraCalcEnabled is TRUE the CanNm module shall calculate the aggregation of external
        PN requests.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1842</srcid><srcstatus/><internalId>981</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2055</srcid><srcstatus/><internalId>1002</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2071</srcid><srcstatus/><internalId>1003</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_EIRA_ERA_Calc_FilterAlgo</srcid><srcstatus/><internalId>1510</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_Schm_Call_Channel_Multicore_41</srcid><srcstatus/><internalId>1706</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>71</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM436</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        The CanNm shall only consider the PN request bits in the NM-PDU that are relevant for the ECU (
        defined by PN filter mask). All other PN request bits are ignored. Thus the ERA only contains
        those PN requests, which are relevant for the ECU.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2798</srcid><srcstatus/><internalId>1052</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_EIRA_ERA_Calc_FilterAlgo</srcid><srcstatus/><internalId>1510</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Rx_EIRA_ERA_Reset_Timer_Chk</srcid><srcstatus/><internalId>1514</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_Schm_Call_Channel_Multicore_41</srcid><srcstatus/><internalId>1706</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>72</internalId></specobject>
    <specobject>
      <id>CanNm.ASR403.CANNM446</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_ CanNm_4_0_3.xml</source>
      <version>1</version>
      <description>
        If CanNmPnEnabled is set to TRUE the function CanSM_TxTimeoutException shall be called once
        when the NM Message Tx Timeout Timer expires.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_NmMessageTxTimeout</srcid><srcstatus/><internalId>1549</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_TxTimeoutCanIfTransmitFails</srcid><srcstatus/><internalId>1550</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_806</srcid><srcstatus/><internalId>1119</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.Internal_Transition_SENDING_SUB_MODE_1</srcid><srcstatus/><internalId>1448</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>73</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>CanNm.ECUC_CanNm_00001</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Container Name | CanNmGlobalConfig
        Parent Container | CanNm
        Description | This container contains the global configuration parameter of the CanNm. The
        parameters and the parameters of the sub containers shall be mapped to the C data type
        CanNm_ConfigType (for parameters where it is possible) which is passed to the CanNm_Init
        function.
        Configuration Parameters
        Included parameters: "CanNm_x_Container_x_CanNmGlobalConfig_x_Included_Parameters"
        Included Parameters
        Parameter Name | SWS Item ID
        CanNmBusLoadReductionEnabled | ECUC_CanNm_00040
        CanNmBusSynchronizationEnabled | ECUC_CanNm_00006
        CanNmComControlEnabled | ECUC_CanNm_00013
        CanNmComUserDataSupport | ECUC_CanNm_00044
        CanNmCoordinatorSyncSupport | ECUC_CanNm_00080
        CanNmDevErrorDetect | ECUC_CanNm_00002
        CanNmDynamicPncToChannelMappingSupport | ECUC_CanNm_00094
        CanNmGlobalPnSupport | ECUC_CanNm_00086
        CanNmImmediateRestartEnabled | ECUC_CanNm_00009
        CanNmImmediateTxconfEnabled | ECUC_CanNm_00041
        CanNmMainFunctionPeriod | ECUC_CanNm_00032
        CanNmPassiveModeEnabled | ECUC_CanNm_00010
        CanNmPduRxIndicationEnabled | ECUC_CanNm_00011
        CanNmPnEiraCalcEnabled | ECUC_CanNm_00070
        CanNmPnResetTime | ECUC_CanNm_00059
        CanNmPnSyncShutdownErrorReactionEnabled | ECUC_CanNm_00096
        CanNmRemoteSleepIndEnabled | ECUC_CanNm_00055
        CanNmStateChangeIndEnabled | ECUC_CanNm_00012
        CanNmUserDataEnabled | ECUC_CanNm_00004
        CanNmVersionInfoApi | ECUC_CanNm_00003
        CanNmPnEiraRxNSduRef | ECUC_CanNm_00072
        Included containers: "CanNm_x_Container_x_CanNmGlobalConfig_x_Included_Containers"
        Included Containers
        Container Name | Multiplicity | Scope / Dependency
        CanNmChannelConfig | 1..* | This container contains the channel specific configuration
        parameter of the CanNm.
        CanNmPnInfo | 0..1 | PN information configuration
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_246</srcid><srcstatus/><internalId>1224</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.CanNmGlobalConfig_Parameters</srcid><srcstatus/><internalId>700</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>74</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00002</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmDevErrorDetect
        Parent Container | CanNmGlobalConfig
        Description | Switches the development error detection and notification on or off.
        true: detection and notification is enabled.
        false: detection and notification is disabled.
        Multiplicity | 1
        Type | EcucBooleanParamDef
        Default value | false
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | All Variants
        Link time
        Post-build time
        Scope / Dependency | scope: local
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Postbuild infomrmation added.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_237</srcid><srcstatus/><internalId>735</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_545</srcid><srcstatus/><internalId>1240</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>75</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00003</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmVersionInfoApi
        Parent Container | CanNmGlobalConfig
        Description | Pre-processor switch for enabling version info API support.
        Multiplicity | 1
        Type | EcucBooleanParamDef
        Default value | false
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | All Variants
        Link time
        Post-build time
        Scope / Dependency | scope: ECU
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Scope and post build information added.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_124</srcid><srcstatus/><internalId>720</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1064</srcid><srcstatus/><internalId>1268</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>76</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00004</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmUserDataEnabled
        Parent Container | CanNmGlobalConfig
        Description | Pre-processor switch for enabling user data support.
        Multiplicity | 1
        Type | EcucBooleanParamDef
        Default value
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | All Variants
        Link time
        Post-build time
        Scope / Dependency | scope: ECU dependency: calculationFormula = Equal(NmUserDataEnabled)
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Scope and post build information added.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_173</srcid><srcstatus/><internalId>727</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1014</srcid><srcstatus/><internalId>1266</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>77</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00006</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmBusSynchronizationEnabled
        Parent Container | CanNmGlobalConfig
        Description | Pre-processor switch for enabling bus synchronization support. This feature is
        required for gateway nodes only.
        Multiplicity | 1
        Type | EcucBooleanParamDef
        Default value
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | All Variants
        Link time
        Post-build time
        Scope / Dependency | scope: ECU dependency: calculationFormula = If (CanNmPassiveModeEnabled
        False) then Equal(NmBusSynchronizationEnabled) else Equal(False)
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Scope and post build information added.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_216</srcid><srcstatus/><internalId>733</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_313</srcid><srcstatus/><internalId>1229</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>78</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00009</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmImmediateRestartEnabled
        Parent Container | CanNmGlobalConfig
        Description | Pre-processor switch for enabling the immediate transmission of a NM PDU upon bus-
        communication request in Prepare-Bus-Sleep mode.
        Multiplicity | 1
        Type | EcucBooleanParamDef
        Default value
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | All Variants
        Link time
        Post-build time
        Scope / Dependency | scope: local dependency: Must not be defined if CanNmPassiveModeEnabled==
        true
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Scope and post build information added.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_CanIf_Transmit_Check_1</srcid><srcstatus/><internalId>1639</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_159</srcid><srcstatus/><internalId>725</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_637</srcid><srcstatus/><internalId>1246</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations><ruleid>WRN.swuts.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>79</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00010</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmPassiveModeEnabled
        Parent Container | CanNmGlobalConfig
        Description | Pre-processor switch for enabling support of the Passive Mode.
        Multiplicity | 1
        Type | EcucBooleanParamDef
        Default value
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | All Variants
        Link time
        Post-build time
        Scope / Dependency | scope: ECU
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Scope and post build information added.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_145</srcid><srcstatus/><internalId>723</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_763</srcid><srcstatus/><internalId>1253</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>80</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00011</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmPduRxIndicationEnabled
        Parent Container | CanNmGlobalConfig
        Description | Pre-processor switch for enabling the PDU Rx Indication.
        Multiplicity | 1
        Type | EcucBooleanParamDef
        Default value
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | All Variants
        Link time
        Post-build time
        Scope / Dependency | scope: ECU dependency: calculationFormula = Equal(NmPduRxIndicationEnabled)
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Scope and post build information added.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_152</srcid><srcstatus/><internalId>724</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_802</srcid><srcstatus/><internalId>1255</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>81</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00012</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmStateChangeIndEnabled
        Parent Container | CanNmGlobalConfig
        Description | Pre-processor switch for enabling the CAN NM state change notification.
        Multiplicity | 1
        Type | EcucBooleanParamDef
        Default value
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | All Variants
        Link time
        Post-build time
        Scope / Dependency | scope: ECU dependency: calculationFormula = Equal(NmStateChangeIdEnabled)
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Scope and post build information added.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_138</srcid><srcstatus/><internalId>722</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_980</srcid><srcstatus/><internalId>1264</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>82</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00013</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmComControlEnabled
        Parent Container | CanNmGlobalConfig
        Description | Pre-processor switch for enabling the Communication Control support.
        Multiplicity | 1
        Type | EcucBooleanParamDef
        Default value
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | All Variants
        Link time
        Post-build time
        Scope / Dependency | scope: ECU dependency: If (CanNmPassiveModeEnabled == False) then Equal(
        NmComControlEnabled) else Equal(False)
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Scope and post build information added.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_131</srcid><srcstatus/><internalId>721</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_368</srcid><srcstatus/><internalId>1232</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>83</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00017</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Container Name | CanNmChannelConfig
        Parent Container | CanNmGlobalConfig
        Description | This container contains the channel specific configuration parameter of the CanNm.
        Post-Build Variant Multiplicity | true
        Multiplicity Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE, VARIANT-LINK-
        TIME, VARIANT-POST-BUILD
        Link time
        Post-build time
        Configuration Parameters
        Included parameters: "CanNm_x_Container_x_CanNmChannelConfig_x_Included_Parameters"
        Included Parameters
        Parameter Name | SWS Item ID
        CanNmActiveWakeupBitEnabled | ECUC_CanNm_00084
        CanNmAllNmMessagesKeepAwake | ECUC_CanNm_00068
        CanNmBusLoadReductionActive | ECUC_CanNm_00042
        CanNmCarWakeUpBitPosition | ECUC_CanNm_00075
        CanNmCarWakeUpBytePosition | ECUC_CanNm_00076
        CanNmCarWakeUpFilterEnabled | ECUC_CanNm_00077
        CanNmCarWakeUpFilterNodeId | ECUC_CanNm_00078
        CanNmCarWakeUpRxEnabled | ECUC_CanNm_00074
        CanNmDynamicPncToChannelMappingEnabled | ECUC_CanNm_00093
        CanNmImmediateNmCycleTime | ECUC_CanNm_00057
        CanNmImmediateNmTransmissions | ECUC_CanNm_00056
        CanNmMsgCycleOffset | ECUC_CanNm_00029
        CanNmMsgCycleTime | ECUC_CanNm_00028
        CanNmMsgReducedTime | ECUC_CanNm_00043
        CanNmMsgTimeoutTime | ECUC_CanNm_00030
        CanNmNodeDetectionEnabled | ECUC_CanNm_00088
        CanNmNodeId | ECUC_CanNm_00031
        CanNmNodeIdEnabled | ECUC_CanNm_00090
        CanNmPduCbvPosition | ECUC_CanNm_00026
        CanNmPduNidPosition | ECUC_CanNm_00025
        CanNmPnEnabled | ECUC_CanNm_00066
        CanNmPnEraCalcEnabled | ECUC_CanNm_00067
        CanNmPnHandleMultipleNetworkRequests | ECUC_CanNm_00073
        CanNmRemoteSleepIndTime | ECUC_CanNm_00023
        CanNmRepeatMessageTime | ECUC_CanNm_00022
        CanNmRepeatMsgIndEnabled | ECUC_CanNm_00089
        CanNmStayInPbsEnabled | ECUC_CanNm_00092
        CanNmSynchronizedPncShutdownEnabled | ECUC_CanNm_00097
        CanNmTimeoutTime | ECUC_CanNm_00020
        CanNmWaitBusSleepTime | ECUC_CanNm_00021
        CanNmComMNetworkHandleRef | ECUC_CanNm_00018
        CanNmPnEraRxNSduRef | ECUC_CanNm_00079
        Included containers: "CanNm_x_Container_x_CanNmChannelConfig_x_Included_Containers"
        Included Containers
        Container Name | Multiplicity | Scope / Dependency
        CanNmRxPdu | 1..* | This container is used to configure the Rx PDU properties that are used for
        the CanNm Channel.
        CanNmTxPdu | 0..1 | This container contains the CanNmTxConfirmationPduId and the CanNmTxPduRef.
        CanNmUserDataTxPdu | 0..1 | This optional container is used to configure the UserNm PDU. This
        container is only available if CanNmComUserDataSupport is enabled.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PostBuildMultiplicity</srcid><srcstatus/><internalId>680</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>84</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00018</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmComMNetworkHandleRef
        Parent Container | CanNmChannelConfig
        Description | This reference points to the unique channel defined by the ComMChannel and
        provides access to the unique channel index value in ComMChannelId.
        Multiplicity | 1
        Type | Symbolic name reference to [ ComMChannel
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: local
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Scope and post build information added.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2585</srcid><srcstatus/><internalId>1355</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PreCompile</srcid><srcstatus/><internalId>676</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>85</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00020</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmTimeoutTime
        Parent Container | CanNmChannelConfig
        Description | Network Timeout for NM PDUs. It denotes the time in seconds how long the NM shall
        stay in the Ready Sleep State before transition into the Prepare Bus-Sleep Mode is initiated.
        Multiplicity | 1
        Type | EcucFloatParamDef
        Range | [0.002.. 65.535]
        Default value
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: local dependency: CanNmTimeoutTime &gt; CanNmMsgCycleTime It shall be
        equal for all nodes in the cluster. It shall be greater than CanNmMsgCycleTime.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32012</srcid><srcstatus/><internalId>1505</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32037</srcid><srcstatus/><internalId>1698</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2474</srcid><srcstatus/><internalId>1351</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PreCompile</srcid><srcstatus/><internalId>676</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>86</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00021</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmWaitBusSleepTime
        Parent Container | CanNmChannelConfig
        Description | Timeout for bus calm down phase.It denotes the time in seconds how long the NM
        shall stay in the Prepare Bus-Sleep Mode before transition into Bus-Sleep Mode shall take place.
        Multiplicity | 0..1
        Type | EcucFloatParamDef
        Range | [0.001.. 65.535]
        Default value
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: local dependency: It shall be equal for all nodes in the cluster.
        It shall be long enough to make all Tx-buffer empty. In case CanNmStayInPbsEnabled is disabled
        this parameter shall be mandatory.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PreCompile</srcid><srcstatus/><internalId>676</internalId></linkedfrom><linkedfrom><srcid>dev.CanNm.CanNmWaitBusSleepTimeMultiplicity</srcid><srcstatus/><internalId>681</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>87</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00022</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmRepeatMessageTime
        Parent Container | CanNmChannelConfig
        Description | Timeout for Repeat Message State. It defines the time in seconds how long the NM
        shall stay in the Repeat Message State.
        Multiplicity | 1
        Type | EcucFloatParamDef
        Range | [0.. 65.535]
        Default value
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: local dependency: CanNmRepeatMessageTime = n * CanNmMsgCycleTime;
        CanNmRepeatMessageTime &gt; CanNmImmediateNmTransmissions * CanNmImmediateNmCycleTime Typically it
        should be equal to: n * CanNmMsgCycleTime, where n denotes the number of NM PDUs that are
        normally sent in the Repeat Message State. The value of n decremented by one determines the
        amount of lost NM PDUs that can be tolerated by the node detection procedure. The value 0
        denotes that no Repeat Message State is configured. It means that Repeat Message State is
        transient what implicates that it is left immediately after entrance and in result no start-up
        stability is guaranteed and no node detection procedure is possible.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32053</srcid><srcstatus/><internalId>1579</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2411</srcid><srcstatus/><internalId>1349</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PreCompile</srcid><srcstatus/><internalId>676</internalId></linkedfrom><linkedfrom><srcid>dev.CanNm.CanNmRepeatMessageTime</srcid><srcstatus/><internalId>713</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>88</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00023</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmRemoteSleepIndTime
        Parent Container | CanNmChannelConfig
        Description | Timeout for Remote Sleep Indication. It defines the time in seconds how long it
        shall take to recognize that all other nodes are ready to sleep.
        Multiplicity | 0..1
        Type | EcucFloatParamDef
        Range | [0.001.. 65.535]
        Default value
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: local dependency: CanNmRemoteSleepIndTime &gt;= CanNmMsgCycleTime
        CanNmRemoteSleepIndTime is only required if CanNmRemoteSleepIndEnabled = true
      </description>
      <comment>
        AUTOSAR R20-11 comment: Requirement was changed without functional impact. Scope and post build information added.
        Multiplicity of the parameter has changed. In the current implementation the parameter is ponly editable if CanNmRemoteSleepIndEnabled is enabled
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0100</srcid><srcstatus/><internalId>1741</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0128</srcid><srcstatus/><internalId>1765</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2366</srcid><srcstatus/><internalId>1347</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PreCompile</srcid><srcstatus/><internalId>676</internalId></linkedfrom><linkedfrom><srcid>dev.CanNm.CanNmRemoteSleepIndTimeDependencyMultiplicity</srcid><srcstatus/><internalId>706</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>89</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00025</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmPduNidPosition
        Parent Container | CanNmChannelConfig
        Description | Defines the position of the source node identifier within the NM PDU. The value
        of the parameter represents the location of the source node identifier in the NM PDU (
        CANNM_PDU_BYTE_0 means byte 0, CANNM_PDU_BYTE_1 means byte 1, CANNM_PDU_OFF means source node
        identifier is not part of the NM PDU) ImplementationType: CanNm_PduPositionType
        Multiplicity | 1
        Type | EcucEnumerationParamDef
        Range | CANNM_PDU_BYTE_0CanNmChannelConfig.CanNmPduNidPosition.CANNM_PDU_BYTE_0 | Byte 0 is
        used
        CANNM_PDU_BYTE_1CanNmChannelConfig.CanNmPduNidPosition.CANNM_PDU_BYTE_1 | Byte 1 is used
        CANNM_PDU_OFFCanNmChannelConfig.CanNmPduNidPosition.CANNM_PDU_OFF | Node Identification is not
        used
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: ECU dependency: CanNmPduCbvPosition; If CanNmNodeIdEnabled == true
        then CanNmPduNidPosition != CANNM_PDU_OFF if(CanNmPduNidPosition != CANNM_PDU_OFF &amp;&amp;
        CanNmPduCbvPosition != CANNM_PDU_OFF) then CanNmPduNidPosition != CanNmPduCbvPosition if(
        CanNmPduNidPosition != CANNM_PDU_OFF &amp;&amp; CanNmPduCbvPosition == CANNM_PDU_OFF) then
        CanNmPduNidPosition = CANNM_PDU_BYTE0
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Scope and post build information added.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_Set_PduNid</srcid><srcstatus/><internalId>1555</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_33023</srcid><srcstatus/><internalId>1646</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0096</srcid><srcstatus/><internalId>1750</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2301</srcid><srcstatus/><internalId>1343</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PreCompile</srcid><srcstatus/><internalId>676</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>90</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00026</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmPduCbvPosition
        Parent Container | CanNmChannelConfig
        Description | Defines the position of the control bit vector within the NM PDU. The value of
        the parameter represents the location of the Control Bit Vector in the NM PDU (CanNmPduByte0
        means byte 0, CanNmPduByte1 means byte 1, CanNmPduOff means source node identifier is not part
        of the NM PDU) ImplementationType: CanNm_PduPositionType
        Multiplicity | 1
        Type | EcucEnumerationParamDef
        Range | CANNM_PDU_BYTE_0CanNmChannelConfig.CanNmPduCbvPosition.CANNM_PDU_BYTE_0 | Byte 0 is
        used
        CANNM_PDU_BYTE_1CanNmChannelConfig.CanNmPduCbvPosition.CANNM_PDU_BYTE_1 | Byte 1 is used
        CANNM_PDU_OFFCanNmChannelConfig.CanNmPduCbvPosition.CANNM_PDU_OFF | Control Bit Vector is not
        used
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: ECU dependency: CanNmPduNidPosition; If CanNmNodeDetectionEnabled
        true then CanNmPduCbvPosition != CANNM_PDU_OFF if(CanNmPduCbvPosition != CANNM_PDU_OFF &amp;&amp;
        CanNmPduNidPosition != CANNM_PDU_OFF) then CanNmPduCbvPosition != CanNmPduNidPosition if(
        CanNmPduCbvPosition != CANNM_PDU_OFF &amp;&amp; CanNmPduNidPosition == CANNM_PDU_OFF) then
        CanNmPduCbvPosition = CANNM_PDU_BYTE0
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Scope and post build information added.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0139</srcid><srcstatus/><internalId>1757</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2243</srcid><srcstatus/><internalId>1339</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PreCompile</srcid><srcstatus/><internalId>676</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>91</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00028</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmMsgCycleTime
        Parent Container | CanNmChannelConfig
        Description | Period of a NM PDU in seconds. It determines the periodic rate in the "periodic
        transmission mode with bus load reduction" and is the basis for transmit scheduling in the "
        periodic transmission mode without bus load reduction"
        Multiplicity | 1
        Type | EcucFloatParamDef
        Range | [0.001.. 65.535]
        Default value
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: ECU dependency: This parameter is only valid if
        CanNmPassiveModeEnabled is False.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Scope and post build information added.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0111</srcid><srcstatus/><internalId>1592</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_PncEnabledMsgCycleTime</srcid><srcstatus/><internalId>1603</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_PncDisabledMsgCycleTime</srcid><srcstatus/><internalId>1605</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_ImmediateNmTrans_1</srcid><srcstatus/><internalId>1787</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2042</srcid><srcstatus/><internalId>1330</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PreCompile</srcid><srcstatus/><internalId>676</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>92</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00029</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmMsgCycleOffset
        Parent Container | CanNmChannelConfig
        Description | Time offset in the periodic transmission node. It determines the start delay of
        the transmission. Specified in seconds.
        Multiplicity | 1
        Type | EcucFloatParamDef
        Range | [0.. 65.535]
        Default value
        Post-Build Variant Value | true
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: local dependency: Parameter value &lt; CanNmMsgCycleTime This
        parameter is only valid if CanNmPassiveModeEnabled is False.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Scope and post build information added.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.CanNmMsgCycleOffset</srcid><srcstatus/><internalId>678</internalId></linkedfrom><linkedfrom><srcid>dev.CanNm.PartlyImplementedFunctionalities</srcid><srcstatus/><internalId>707</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.ECUC_CanNm_00029</srcid><srcstatus/><internalId>594</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>93</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00030</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmMsgTimeoutTime
        Parent Container | CanNmChannelConfig
        Description | When using Partial Network and this timeout is defined then CanNm monitors that a
        NM-PDU is transmitted successfully within this Transmission Timeout Time and provides an error
        notification otherwise.
        Multiplicity | 0..1
        Type | EcucFloatParamDef
        Range | [0.001.. 65.535]
        Default value
        Post-Build Variant Multiplicity | true
        Post-Build Variant Value | true
        Multiplicity Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: local dependency: CanNmMsgTimeoutTime &lt; CanNmMsgCycleTime This
        parameter is only valid if CanNmPassiveModeEnabled and CanNmImmediateTxConfEnabled are set to
        FALSE and CanNmPnEnabled is set to TRUE.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PreCompile</srcid><srcstatus/><internalId>676</internalId></linkedfrom><linkedfrom><srcid>dev.CanNm.PostBuildMultiplicity</srcid><srcstatus/><internalId>680</internalId></linkedfrom><linkedfrom><srcid>dev.CanNm.CanNmMsgTimeoutTimeDependencyMultiplicity</srcid><srcstatus/><internalId>705</internalId></linkedfrom><linkedfrom><srcid>dev.CanNm.CanNmMsgTimeoutTime</srcid><srcstatus/><internalId>712</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>94</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00031</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmNodeId
        Parent Container | CanNmChannelConfig
        Description | Node identifier of local node.
        Multiplicity | 1
        Type | EcucIntegerParamDef
        Range | 0.. 255
        Default value
        Post-Build Variant Value | true
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME
        Post-build time | X | VARIANT-POST-BUILD
        Scope / Dependency | scope: local dependency: This parameter is only valid if
        CanNmNodeIdEnabled == True
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1269</srcid><srcstatus/><internalId>1281</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2201</srcid><srcstatus/><internalId>1336</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>95</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00032</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmMainFunctionPeriod
        Parent Container | CanNmGlobalConfig
        Description | Call cycle in seconds of CanNm_MainFunction.
        Multiplicity | 1
        Type | EcucFloatParamDef
        Range | ]0.. INF[
        Default value
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: local
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PreCompile</srcid><srcstatus/><internalId>676</internalId></linkedfrom><linkedfrom><srcid>dev.CanNm.CanNmMainFunctionPeriodRange</srcid><srcstatus/><internalId>697</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>96</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00036</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Container Name | CanNmTxPdu
        Parent Container | CanNmChannelConfig
        Description | This container contains the CanNmTxConfirmationPduId and the CanNmTxPduRef.
        Configuration Parameters
        Included parameters: "CanNm_x_Container_x_CanNmTxPdu_x_Included_Parameters"
        Included Parameters
        Parameter Name | SWS Item ID
        CanNmTxConfirmationPduId | ECUC_CanNm_00048
        CanNmTxPduRef | ECUC_CanNm_00037
        Included containers: "CanNm_x_Container_x_CanNmTxPdu_x_Included_Containers"
        No Included Containers
      </description>
      <comment>
        Parameter check will happens individually.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2734</srcid><srcstatus/><internalId>1366</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>97</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00037</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmTxPduRef
        Parent Container | CanNmTxPdu
        Description | The reference to the common PDU structure.
        Multiplicity | 1
        Type | Reference to [ Pdu
        Post-Build Variant Value | true
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME
        Post-build time | X | VARIANT-POST-BUILD
        Scope / Dependency | scope: local
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2796</srcid><srcstatus/><internalId>1370</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>98</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00038</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Container Name | CanNmRxPdu
        Parent Container | CanNmChannelConfig
        Description | This container is used to configure the Rx PDU properties that are used for the
        CanNm Channel.
        Configuration Parameters
        Included parameters: "CanNm_x_Container_x_CanNmRxPdu_x_Included_Parameters"
        Included Parameters
        Parameter Name | SWS Item ID
        CanNmRxPduId | ECUC_CanNm_00054
        CanNmRxPduRef | ECUC_CanNm_00039
        Included containers: "CanNm_x_Container_x_CanNmRxPdu_x_Included_Containers"
        No Included Containers
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2622</srcid><srcstatus/><internalId>1357</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_80001</srcid><srcstatus/><internalId>1477</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>99</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00039</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmRxPduRef
        Parent Container | CanNmRxPdu
        Description | Reference to the global PDU that is used by this CanNm channel.
        Multiplicity | 1
        Type | Reference to [ Pdu
        Post-Build Variant Value | true
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME
        Post-build time | X | VARIANT-POST-BUILD
        Scope / Dependency | scope: local
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Scope and post build information added.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2691</srcid><srcstatus/><internalId>1362</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>100</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00040</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmBusLoadReductionEnabled
        Parent Container | CanNmGlobalConfig
        Description | Pre-processor switch for enabling busload reduction support.
        Multiplicity | 1
        Type | EcucBooleanParamDef
        Default value
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | All Variants
        Link time
        Post-build time
        Scope / Dependency | scope: local dependency: CanNmBusLoadReductionEnabled = false if
        CanNmPassiveModeEnabled == true or CanNmGlobalPnSupport == true
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Scope and post build information added.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_223</srcid><srcstatus/><internalId>734</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_268</srcid><srcstatus/><internalId>1225</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>101</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00041</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmImmediateTxconfEnabled
        Parent Container | CanNmGlobalConfig
        Description | Enable/disable the immediate tx confirmation.
        Multiplicity | 1
        Type | EcucBooleanParamDef
        Default value
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | All Variants
        Link time
        Post-build time
        Scope / Dependency | scope: ECU dependency: CanNmImmediateTxconfEnabled shall not be enabled if
        CanNmPasiveModeEnabled is enabled.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Scope and post build information added.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_166</srcid><srcstatus/><internalId>726</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_670</srcid><srcstatus/><internalId>1248</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>102</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00042</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmBusLoadReductionActive
        Parent Container | CanNmChannelConfig
        Description | This parameter defines if bus load reduction for the respective NM channel is
        active or not.
        Multiplicity | 1
        Type | EcucBooleanParamDef
        Default value
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: local dependency: CanNmBusLoadReductionActive = false if
        CanNmBusLoadReductionEnabled == false
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Scope and post build information added.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/src/CanNm_Cfg.c_120</srcid><srcstatus/><internalId>760</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1862</srcid><srcstatus/><internalId>1323</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PreCompile</srcid><srcstatus/><internalId>676</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>103</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00043</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmMsgReducedTime
        Parent Container | CanNmChannelConfig
        Description | Node specific bus cycle time in the periodic transmission mode with bus load
        reduction. Specified in seconds.
        Multiplicity | 1
        Type | EcucFloatParamDef
        Range | [0.001.. 65.535]
        Default value
        Post-Build Variant Value | true
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: local dependency: 0,5 * CanNmMsgCycleTime &lt;= CanNmMsgReducedTime &lt;
        CanNmMsgCycleTime This parameter is only valid if CanNmBusLoadReductionEnabled == True and
        CanNmBusLoadReductionActive == True and CanNmPassiveModeEnabled == False Otherwise this
        parameter is notused.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Scope and post build information added.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0126</srcid><srcstatus/><internalId>1764</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2089</srcid><srcstatus/><internalId>1332</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PreCompile</srcid><srcstatus/><internalId>676</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>104</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00044</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmComUserDataSupport
        Parent Container | CanNmGlobalConfig
        Description | Preprocessor switch for enabling the Tx path of Com User Data. Use case: Setting
        of NMUserData via SWC.
        Multiplicity | 1
        Type | EcucBooleanParamDef
        Default value
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | All Variants
        Link time
        Post-build time
        Scope / Dependency | scope: ECU dependency: If CanNmPassiveModeEnabled == True then
        CanNmComUserDataSupport = False
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Scope and post build information added.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_180</srcid><srcstatus/><internalId>728</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_487</srcid><srcstatus/><internalId>1237</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>105</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00045</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Container Name | CanNmUserDataTxPdu
        Parent Container | CanNmChannelConfig
        Description | This optional container is used to configure the UserNm PDU. This container is
        only available if CanNmComUserDataSupport is enabled.
        Configuration Parameters
        Included parameters: "CanNm_x_Container_x_CanNmUserDataTxPdu_x_Included_Parameters"
        Included Parameters
        Parameter Name | SWS Item ID
        CanNmTxUserDataPduId | ECUC_CanNm_00047
        CanNmTxUserDataPduRef | ECUC_CanNm_00046
        Included containers: "CanNm_x_Container_x_CanNmUserDataTxPdu_x_Included_Containers"
        No Included Containers
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2835</srcid><srcstatus/><internalId>1373</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>106</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00046</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmTxUserDataPduRef
        Parent Container | CanNmUserDataTxPdu
        Description | Reference to the NM User Data I-PDU in the global PDU collection.
        Multiplicity | 1
        Type | Reference to [ Pdu
        Post-Build Variant Value | true
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME
        Post-build time | X | VARIANT-POST-BUILD
        Scope / Dependency | scope: local
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Scope and post build information added.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2899</srcid><srcstatus/><internalId>1379</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>107</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00047</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmTxUserDataPduId
        Parent Container | CanNmUserDataTxPdu
        Description | This parameter defines the Handle ID of the NM User Data I-PDU.
        Multiplicity | 1
        Type | EcucIntegerParamDef (Symbolic Name generated for this parameter)
        Range | 0.. 65535
        Default value
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | All Variants
        Link time
        Post-build time
        Scope / Dependency | scope: ECU
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Scope and post build information added.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2864</srcid><srcstatus/><internalId>1377</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>108</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00048</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmTxConfirmationPduId
        Parent Container | CanNmTxPdu
        Description | Handle Id to be used by the Lower Layer to confirm the transmission of the
        CanNmTxPdu to the LowerLayer.
        Multiplicity | 1
        Type | EcucIntegerParamDef (Symbolic Name generated for this parameter)
        Range | 0.. 65535
        Default value
        Post-Build Variant Value | true
        Value Configuration Class | Pre-compile time | X | All Variants
        Link time
        Post-build time
        Scope / Dependency | scope: ECU
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Scope and post build information added.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2760</srcid><srcstatus/><internalId>1368</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>109</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00054</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmRxPduId
        Parent Container | CanNmRxPdu
        Description | This parameter defines the Rx PDU ID of the CanIf L-PDU range that is associated
        with this CanNm channel.
        Multiplicity | 1
        Type | EcucIntegerParamDef (Symbolic Name generated for this parameter)
        Range | 0.. 65535
        Default value
        Post-Build Variant Value | true
        Value Configuration Class | Pre-compile time | X | All Variants
        Link time
        Post-build time
        Scope / Dependency | scope: ECU
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Scope and post build information added.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2648</srcid><srcstatus/><internalId>1359</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>110</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00055</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmRemoteSleepIndEnabled
        Parent Container | CanNmGlobalConfig
        Description | Pre-processor switch for enabling remote sleep indication support. This feature
        is required for gateway nodes only.
        Multiplicity | 1
        Type | EcucBooleanParamDef
        Default value
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | All Variants
        Link time
        Post-build time
        Scope / Dependency | scope: local dependency: calculationFormula = If (CanNmPassiveModeEnabled
        False) then Equal(NmRemoteSleepIndEnabled) else Equal(False)
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Scope and post build information added.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_187</srcid><srcstatus/><internalId>729</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_923</srcid><srcstatus/><internalId>1261</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>111</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00056</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmImmediateNmTransmissions
        Parent Container | CanNmChannelConfig
        Description | Defines the number of immediate NM PDUs which shall be transmitted. If the value
        is zero no immediate NM PDUs are transmitted. The cycle time of immeditate NM PDUs is defined
        by CanNmImmediateNmCycleTime.
        Multiplicity | 1
        Type | EcucIntegerParamDef
        Range | 0.. 255
        Default value
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: local dependency: If CanNmImmediateRestartEnabled = true then
        CanNmImmediateNmTransmissions = 0 If CanNmPnHandleMultipleNetworkRequests == True" then "
        CanNmImmediateNmTransmissions &gt; 0
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Scope and post build information added.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_ImmediateNmTrans_MsgCycOffZero</srcid><srcstatus/><internalId>1553</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_ImmediateNmTrans_MsgCycOffZero_DisableEnableComm</srcid><srcstatus/><internalId>1554</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_CanIf_Transmit_Check_5</srcid><srcstatus/><internalId>1659</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_CanIf_Transmit_Check_6</srcid><srcstatus/><internalId>1660</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_ImmediateNmTrans_3</srcid><srcstatus/><internalId>1777</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/src/CanNm_Cfg.c_105</srcid><srcstatus/><internalId>759</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1941</srcid><srcstatus/><internalId>1326</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PreCompile</srcid><srcstatus/><internalId>676</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>112</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00057</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmImmediateNmCycleTime
        Parent Container | CanNmChannelConfig
        Description | Defines the immediate NM PDU cycle time in seconds which is used for
        CanNmImmediateNmTransmissions NM PDU transmissions.
        Multiplicity | 0..1
        Type | EcucFloatParamDef
        Range | [0.001.. 65.535]
        Default value
        Post-Build Variant Multiplicity | false
        Post-Build Variant Value | false
        Multiplicity Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: local dependency: This parameter is only valid if
        CanNmImmediateNmTransmissions is greater one.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Scope and post build information added.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PreCompile</srcid><srcstatus/><internalId>676</internalId></linkedfrom><linkedfrom><srcid>dev.CanNm.CanNmImmediateNmCycleTime</srcid><srcstatus/><internalId>677</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>113</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00059</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmPnResetTime
        Parent Container | CanNmGlobalConfig
        Description | Specifies the runtime of the reset timer in seconds. This reset time is valid for
        the reset of PN requests in the EIRA and in the ERA. The value shall be the same for every
        channel. Thus it is a global config parameter.
        Multiplicity | 0..1
        Type | EcucFloatParamDef
        Range | [0.001.. 65.535]
        Default value
        Post-Build Variant Multiplicity | false
        Post-Build Variant Value | false
        Multiplicity Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: local dependency: only valid if CanNmGlobalPnSupport == true.
        CanNmPnResetTime &gt; CanNmMsgCycleTime CanNmPnResetTime &lt; CanNmTimeoutTime
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.4.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB_Ref.ECUC_CanNm_00059.1</srcid><srcstatus/><internalId>479</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.ECUC_CanNm_00059.2</srcid><srcstatus/><internalId>480</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_Rx_EIRA_ERA_Reset_Timer_Chk</srcid><srcstatus/><internalId>1514</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Tx_EIRA_Reset_Timer_Chk</srcid><srcstatus/><internalId>1521</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_885</srcid><srcstatus/><internalId>1259</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PreCompile</srcid><srcstatus/><internalId>676</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>114</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00060</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmPnInfoOffset
        Parent Container | CanNmPnInfo
        Description | Specifies the offset of the PN request information in the NM PDU.
        Multiplicity | 1
        Type | EcucIntegerParamDef
        Range | 1.. 63
        Default value | 1
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: local dependency: only valid if CanNmGlobalPnSupport == true
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_316</srcid><srcstatus/><internalId>741</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_3046</srcid><srcstatus/><internalId>1391</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CANNM_GEN_InvalidRange_CanNmPnInfoOffset</srcid><srcstatus/><internalId>1485</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_PN_RequestInfo_Chk</srcid><srcstatus/><internalId>1515</internalId></linkedfrom><linkedfrom><srcid>TS_CANNM_CanNmPnInfo_504PNCs</srcid><srcstatus/><internalId>1725</internalId></linkedfrom><linkedfrom><srcid>TS_CANNM_CanNmPnResetTime_504PNCs</srcid><srcstatus/><internalId>1726</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PreCompile</srcid><srcstatus/><internalId>676</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>115</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00061</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmPnInfoLength
        Parent Container | CanNmPnInfo
        Description | Specifies the length of the PN request information in the NM PDU.
        Multiplicity | 1
        Type | EcucIntegerParamDef
        Range | 1.. 63
        Default value | 1
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: local dependency: only valid if CanNmGlobalPnSupport == true
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_290</srcid><srcstatus/><internalId>740</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_3018</srcid><srcstatus/><internalId>1389</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_GEN_10003</srcid><srcstatus/><internalId>1486</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_PN_RequestInfo_Chk</srcid><srcstatus/><internalId>1515</internalId></linkedfrom><linkedfrom><srcid>TS_CANNM_CanNmPnInfo_504PNCs</srcid><srcstatus/><internalId>1725</internalId></linkedfrom><linkedfrom><srcid>TS_CANNM_CanNmPnResetTime_504PNCs</srcid><srcstatus/><internalId>1726</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PreCompile</srcid><srcstatus/><internalId>676</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>116</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00063</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmPnFilterMaskByteIndex
        Parent Container | CanNmPnFilterMaskByte
        Description | Index of the filter mask byte. Specifies the position within the filter mask byte
        array.
        Multiplicity | 1
        Type | EcucIntegerParamDef
        Range | 0.. 63
        Default value
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: local dependency: only valid if CanNmGlobalPnSupport == true;
        CanNmPnFilterMaskByteIndex &lt; CanNmPnInfoLength
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_3099</srcid><srcstatus/><internalId>1395</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_PN_RequestInfo_Chk</srcid><srcstatus/><internalId>1515</internalId></linkedfrom><linkedfrom><srcid>TS_CANNM_CanNmPnInfo_504PNCs</srcid><srcstatus/><internalId>1725</internalId></linkedfrom><linkedfrom><srcid>TS_CANNM_CanNmPnResetTime_504PNCs</srcid><srcstatus/><internalId>1726</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PreCompile</srcid><srcstatus/><internalId>676</internalId></linkedfrom><linkedfrom><srcid>dev.CanNm.CanNmPnFilterMaskByteIndex</srcid><srcstatus/><internalId>679</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>117</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00064</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmPnFilterMaskByteValue
        Parent Container | CanNmPnFilterMaskByte
        Description | Parameter to configure the filter mask byte.
        Multiplicity | 1
        Type | EcucIntegerParamDef
        Range | 0.. 255
        Default value | 0
        Post-Build Variant Value | true
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME
        Post-build time | X | VARIANT-POST-BUILD
        Scope / Dependency | scope: local dependency: only valid if CanNmGlobalPnSupport == true
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Scope and post build information was added.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_PN_RequestInfo_Chk</srcid><srcstatus/><internalId>1515</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_3138</srcid><srcstatus/><internalId>1397</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>118</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00066</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmPnEnabled
        Parent Container | CanNmChannelConfig
        Description | Enables or disables support of partial networking. false: Partial networking
        Range not supportedtrue: Partial networking supported
        Multiplicity | 0..1
        Type | EcucBooleanParamDef
        Default value | false
        Post-Build Variant Multiplicity | true
        Post-Build Variant Value | true
        Multiplicity Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME
        Post-build time | X | VARIANT-POST-BUILD
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME
        Post-build time | X | VARIANT-POST-BUILD
        Scope / Dependency | scope: ECU dependency: only valid if CanNmGlobalPnSupport == true
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Scope and post build information was added.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1649</srcid><srcstatus/><internalId>1307</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>119</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00067</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmPnEraCalcEnabled
        Parent Container | CanNmChannelConfig
        Description | Specifies if CanNm calculates the PN request information for external requests. (
        ERA) false: PN request are not calculatedtrue: PN request are calculated
        Multiplicity | 0..1
        Type | EcucBooleanParamDef
        Default value | false
        Post-Build Variant Multiplicity | false
        Post-Build Variant Value | false
        Multiplicity Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: local dependency: only valid if CanNmGlobalPnSupport == true
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Scope and post build information was added.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_332</srcid><srcstatus/><internalId>743</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1707</srcid><srcstatus/><internalId>1313</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PreCompile</srcid><srcstatus/><internalId>676</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>120</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00068</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmAllNmMessagesKeepAwake
        Parent Container | CanNmChannelConfig
        Description | Specifies if CanNm drops irrelevant NM PDUs. false: Only NM PDUs with a PNI bit
        true and containing a PN request for this ECU triggers the standard RX indication handlingtrue:
        Every NM PDU triggers the standard RX indication handling
        Multiplicity | 0..1
        Type | EcucBooleanParamDef
        Default value | false
        Post-Build Variant Multiplicity | false
        Post-Build Variant Value | false
        Multiplicity Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: local dependency: only valid if CanNmPnEiraCalcEnabled == true or
        CanNmPnEraCalcEnabled == true
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Scope and post build information was added.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_AllMessageKeepAwake_True</srcid><srcstatus/><internalId>1511</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_AllMessageKeepAwake_False</srcid><srcstatus/><internalId>1513</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/src/CanNm_Cfg.c_172</srcid><srcstatus/><internalId>762</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1417</srcid><srcstatus/><internalId>1293</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PreCompile</srcid><srcstatus/><internalId>676</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>121</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00069</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Container Name | CanNmPnFilterMaskByte
        Parent Container | CanNmPnInfo
        Description | PN information configuration
        Configuration Parameters
        Included parameters: "CanNm_x_Container_x_CanNmPnFilterMaskByte_x_Included_Parameters"
        Included Parameters
        Parameter Name | SWS Item ID
        CanNmPnFilterMaskByteIndex | ECUC_CanNm_00063
        CanNmPnFilterMaskByteValue | ECUC_CanNm_00064
        Included containers: "CanNm_x_Container_x_CanNmPnFilterMaskByte_x_Included_Containers"
        No Included Containers
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_3074</srcid><srcstatus/><internalId>1393</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_3083</srcid><srcstatus/><internalId>1394</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>122</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00070</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmPnEiraCalcEnabled
        Parent Container | CanNmGlobalConfig
        Description | Specifies if CanNm calculates the PN request information for internal an external
        requests. (EIRA)true: PN request are calculatedfalse: PN request are not calculated
        Multiplicity | 0..1
        Type | EcucBooleanParamDef
        Default value | false
        Post-Build Variant Multiplicity | false
        Post-Build Variant Value | false
        Multiplicity Configuration Class | Pre-compile time | X | All Variants
        Link time
        Post-build time
        Value Configuration Class | Pre-compile time | X | All Variants
        Link time
        Post-build time
        Scope / Dependency | scope: local dependency: only valid if CanNmGlobalPnSupport == true
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Scope and post build information was added.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_324</srcid><srcstatus/><internalId>742</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_843</srcid><srcstatus/><internalId>1257</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>123</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00071</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Container Name | CanNmPnInfo
        Parent Container | CanNmGlobalConfig
        Description | PN information configuration
        Configuration Parameters
        Included parameters: "CanNm_x_Container_x_CanNmPnInfo_x_Included_Parameters"
        Included Parameters
        Parameter Name | SWS Item ID
        CanNmPnInfoLength | ECUC_CanNm_00061
        CanNmPnInfoOffset | ECUC_CanNm_00060
        Included containers: "CanNm_x_Container_x_CanNmPnInfo_x_Included_Containers"
        Included Containers
        Container Name | Multiplicity | Scope / Dependency
        CanNmPnFilterMaskByte | 1..63 | PN information configuration
      </description>
      <comment>
        This is a container, elements are tested.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2993</srcid><srcstatus/><internalId>1387</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>124</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00072</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmPnEiraRxNSduRef
        Parent Container | CanNmGlobalConfig
        Description | Reference to a Pdu in the COM-Stack.Only one SduRef is required for CanNm because
        the EIRA is the aggregation over all Can Channels.
        Multiplicity | 0..1
        Type | Reference to [ Pdu
        Post-Build Variant Multiplicity | false
        Post-Build Variant Value | false
        Multiplicity Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: local dependency: only valid if CanNmPnEiraCalcEnabled == true
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Scope and post build information was added.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_Rx_EIRA_ERA_Reset_Timer_Chk</srcid><srcstatus/><internalId>1514</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1089</srcid><srcstatus/><internalId>1270</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PreCompile</srcid><srcstatus/><internalId>676</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>125</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00073</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmPnHandleMultipleNetworkRequests
        Parent Container | CanNmChannelConfig
        Description | Specifies if CanNm performs an additional transition from Network Mode to Repeat
        Message State (true) or not (false)
        Multiplicity | 0..1
        Type | EcucBooleanParamDef
        Default value | false
        Post-Build Variant Multiplicity | false
        Post-Build Variant Value | false
        Multiplicity Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: local dependency: only valid if CanNmGlobalPnSupport == true
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.CanNmPnHandleMultipleNetworkRequestsDependency</srcid><srcstatus/><internalId>698</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>126</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00074</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmCarWakeUpRxEnabled
        Parent Container | CanNmChannelConfig
        Description | Enables or disables support of CarWakeUp bit evaluation in received NM PDUs.FALSE
        CarWakeUp not supportedTRUE - CarWakeUp supported
        Multiplicity | 1
        Type | EcucBooleanParamDef
        Default value | false
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: ECU
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_CWU_Rx_Enabled_false</srcid><srcstatus/><internalId>1599</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_CWU_Rx_Enabled_Filtering_Disabled</srcid><srcstatus/><internalId>1600</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_CWU_Rx_Enabled_Filtering_Enabled</srcid><srcstatus/><internalId>1601</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1590</srcid><srcstatus/><internalId>1303</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PreCompile</srcid><srcstatus/><internalId>676</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>127</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00075</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmCarWakeUpBitPosition
        Parent Container | CanNmChannelConfig
        Description | Specifies the Bit position of the CWU within the NM PDU.
        Multiplicity | 0..1
        Type | EcucIntegerParamDef
        Range | 0.. 7
        Default value
        Post-Build Variant Multiplicity | false
        Post-Build Variant Value | false
        Multiplicity Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: local dependency: only available if CanNmCarWakeUpRxEnabled == TRUE
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_CWU_Rx_Enabled_Filtering_Disabled</srcid><srcstatus/><internalId>1600</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_CWU_Rx_Enabled_Filtering_Enabled</srcid><srcstatus/><internalId>1601</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1453</srcid><srcstatus/><internalId>1295</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PreCompile</srcid><srcstatus/><internalId>676</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>128</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00076</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmCarWakeUpBytePosition
        Parent Container | CanNmChannelConfig
        Description | Specifies the Byte position of the CWU within the NM PDU.
        Multiplicity | 0..1
        Type | EcucIntegerParamDef
        Range | 0.. 7
        Default value
        Post-Build Variant Multiplicity | false
        Post-Build Variant Value | false
        Multiplicity Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: local dependency: only available if CanNmCarWakeUpRxEnabled == TRUE
        CanNmCarWakeupBytePosition &gt;= number of enabled system bytes (CBV, NID)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_CWU_Rx_Enabled_Filtering_Disabled</srcid><srcstatus/><internalId>1600</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_CWU_Rx_Enabled_Filtering_Enabled</srcid><srcstatus/><internalId>1601</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1481</srcid><srcstatus/><internalId>1297</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PreCompile</srcid><srcstatus/><internalId>676</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>129</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00077</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmCarWakeUpFilterEnabled
        Parent Container | CanNmChannelConfig
        Description | If CWU filtering is supported, only the CWU bit within the NM PDU with source
        node identifier CanNmCarWakeUpFilterNodeId is considered as CWU request.FALSE - CWU filtering
        is not supportedTRUE - CWU filtering is supported
        Multiplicity | 0..1
        Type | EcucBooleanParamDef
        Default value | false
        Post-Build Variant Multiplicity | false
        Post-Build Variant Value | false
        Multiplicity Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: local dependency: only available if CanNmCarWakeUpRxEnabled == TRUE
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_CWU_Rx_Enabled_Filtering_Disabled</srcid><srcstatus/><internalId>1600</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_CWU_Rx_Enabled_Filtering_Enabled</srcid><srcstatus/><internalId>1601</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1523</srcid><srcstatus/><internalId>1299</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PreCompile</srcid><srcstatus/><internalId>676</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>130</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00078</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmCarWakeUpFilterNodeId
        Parent Container | CanNmChannelConfig
        Description | Source node identifier for CWU filtering. If CWU filtering is supported, only the
        CWU bit within the NM PDU with source node identifier CanNmCarWakeUpFilterNodeId is considered
        as CWU request.
        Multiplicity | 0..1
        Type | EcucIntegerParamDef
        Range | 0.. 255
        Default value
        Post-Build Variant Multiplicity | false
        Post-Build Variant Value | false
        Multiplicity Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: local dependency: only available if CanNmCarWakeUpFilterEnabled ==
        TRUE
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_CWU_Rx_Enabled_Filtering_Enabled</srcid><srcstatus/><internalId>1601</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1557</srcid><srcstatus/><internalId>1301</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PreCompile</srcid><srcstatus/><internalId>676</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>131</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00079</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmPnEraRxNSduRef
        Parent Container | CanNmChannelConfig
        Description | Reference to a Pdu in the COM-Stack. The SduRef is required for every CanNm
        Channel, because ERA is reported per channel.
        Multiplicity | 0..1
        Type | Reference to [ Pdu
        Post-Build Variant Multiplicity | false
        Post-Build Variant Value | false
        Multiplicity Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: local dependency: only valid if CanNmPnEraCalcEnabled == true
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Scope and post build information was added.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/src/CanNm_Cfg.c_146</srcid><srcstatus/><internalId>761</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1826</srcid><srcstatus/><internalId>1321</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_GEN_10001</srcid><srcstatus/><internalId>1484</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PreCompile</srcid><srcstatus/><internalId>676</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>132</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00080</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmCoordinatorSyncSupport
        Parent Container | CanNmGlobalConfig
        Description | Enables/disables the coordinator synchronization support.
        Multiplicity | 1
        Type | EcucBooleanParamDef
        Default value
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | All Variants
        Link time
        Post-build time
        Scope / Dependency | scope: ECU dependency: CanNmCoordinatorSyncSupport has to be set to FALSE
        if CanNmPassiveModeEnabled is set to TRUE.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.CoordinatorSyncSupport</srcid><srcstatus/><internalId>682</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>133</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00005</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the Repeat Message State is not entered via CanNm_NetworkRequest OR
        CanNmImmediateNmTransmissions is zero the transmission of NM PDU shall be delayed by
        CanNmMsgCycleOffset after entering the repeat message state.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_Immediates_OFF</srcid><srcstatus/><internalId>1571</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_CanIf_Transmit_ImmediateNmTransmissions</srcid><srcstatus/><internalId>1637</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0117</srcid><srcstatus/><internalId>1756</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_MsgCycleOffset_RMS</srcid><srcstatus/><internalId>1770</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_ImmediateNmTrans_1</srcid><srcstatus/><internalId>1787</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_ImmediateNmTrans_2</srcid><srcstatus/><internalId>1788</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1150</srcid><srcstatus/><internalId>1145</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1199</srcid><srcstatus/><internalId>1153</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1208</srcid><srcstatus/><internalId>1155</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>134</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00013</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The CanNm module shall set the source node identifier with the configuration parameter
        CanNmNodeId unless CanNmPduNidPosition is set to off.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_Set_PduNid</srcid><srcstatus/><internalId>1555</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0096</srcid><srcstatus/><internalId>1750</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1449</srcid><srcstatus/><internalId>1175</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>135</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00014</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmRepeatMsgIndEnabled is set to TRUE and the Repeat Message Request bit is received CanNm
        module shall call the callout function Nm_RepeatMessageIndication only the first time until
        Repeat Message State has been left again. In case the Partial Network Learning Bit is also
        received with value 1 and CanNmDynamicPncToChannelMappingEnabled is set to TRUE the parameter
        pnLearningBitSet shall be set to TRUE in this function call, otherwise to FALSE.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PartianlNetworkLearning</srcid><srcstatus/><internalId>683</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>136</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00023</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        During initialization the CanNm module shall deactivate the bus load reduction.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0082</srcid><srcstatus/><internalId>1727</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1199</srcid><srcstatus/><internalId>1153</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1208</srcid><srcstatus/><internalId>1155</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>137</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00025</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        During initialization the CanNm module shall set each byte of the user data to 0xFF.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0108</srcid><srcstatus/><internalId>1590</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1421</srcid><srcstatus/><internalId>1172</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>138</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00033</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        After initialization the CanNm module shall stop the transmission of Network Management PDUs by
        stopping the Message Cycle Timer.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0107</srcid><srcstatus/><internalId>1589</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_348</srcid><srcstatus/><internalId>829</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>139</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00035</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        On the call of the callback function CanNm_RxIndication, the CanNm module shall copy the data
        of the Network Management PDU referenced in the function parameter to an internal buffer.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0099</srcid><srcstatus/><internalId>1753</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2030</srcid><srcstatus/><internalId>999</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>140</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00037</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        On the call of the callback function CanNm_RxIndication, the CanNm module shall call the Nm
        callback function Nm_PduRxIndication, if and only if CanNmPduRxIndicationEnabled (configuration
        parameter) is set to TRUE.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0081</srcid><srcstatus/><internalId>1748</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_324</srcid><srcstatus/><internalId>1083</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1380</srcid><srcstatus/><internalId>1168</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1579</srcid><srcstatus/><internalId>1182</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>141</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00040</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the CanNm Message Cycle Timer expires the CanNm module shall restart with CanNmMsgCycleTime.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0111</srcid><srcstatus/><internalId>1592</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1827</srcid><srcstatus/><internalId>1209</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>142</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00051</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If transmission of Network Management PDUs has been stopped the CanNm module shall cancel the
        Message Cycle Timer.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0114</srcid><srcstatus/><internalId>1736</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_754</srcid><srcstatus/><internalId>1115</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1705</srcid><srcstatus/><internalId>1196</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>143</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00052</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The bus load reduction mechanism shall be statically configurable by means of the
        CanNmBusLoadReductionEnabled parameter
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_223</srcid><srcstatus/><internalId>734</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>144</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00060</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The function CanNm_Init shall select the active configuration set by means of a configuration
        pointer parameter being passed
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_259</srcid><srcstatus/><internalId>821</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>145</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00061</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmGlobalPnSupport is set to TRUE and CanNm is initialized (call of CanNm_Init) then CanNm
        shall stop the NM Message Tx Timeout Timer.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.MessageTxTimeoutTimerStopDependency</srcid><srcstatus/><internalId>704</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>146</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00064</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmGlobalPnSupport is set to TRUE and CanNmMsgTimeoutTime is defined and CanNm requests
        the transmission of a NM PDU (call of CanIf_Transmit) then CanNm shall start the NM Message Tx
        Timeout Timer with CanNmMsgTimeoutTime.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.DependencyNmTxTimeoutOnPnSupport</srcid><srcstatus/><internalId>684</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>147</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00065</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmGlobalPnSupport is set to TRUE and CanNmMsgTimeoutTime is defined and
        CanNm_TxConfirmation is called then CanNm shall stop the NM Message Tx Timeout Timer.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00065</srcid><srcstatus/><internalId>492</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.MessageTxTimeoutTimerStopDependency</srcid><srcstatus/><internalId>704</internalId></linkedfrom><linkedfrom><srcid>dev.CanNm.CanNmTxConfirmationTxTimeout</srcid><srcstatus/><internalId>714</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>148</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00066</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNm_TxConfirmation is called with result E_NOT_OK or if CanNmGlobalPnSupport is set to
        TRUE and NM Message Tx Timeout Timer has expired then CanNm shall call the function
        Nm_TxTimeoutException.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00066.1</srcid><srcstatus/><internalId>490</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00066.2</srcid><srcstatus/><internalId>491</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.DependencyNmTxTimeoutOnPnSupport</srcid><srcstatus/><internalId>684</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>149</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00069</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the bus load reduction mechanism is globally enabled (CanNmBusLoadReductionEnabled is TRUE)
        for a particular network activated, PDU transmission ability is enabled and the function
        CanNm_RxIndication is called for this network, the CanNm module shall restart the CanNm Message
        Cycle Timer with the node specific time CanNmMsgReducedTime.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00069</srcid><srcstatus/><internalId>464</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>150</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00071</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The immediate transmission confirmation mechanism shall be configurable by means of the
        CanNmImmediateTxConfEnabled
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_166</srcid><srcstatus/><internalId>726</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1632</srcid><srcstatus/><internalId>1187</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>151</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00072</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Network Management PDUs transmission capability shall be configurable by means of
        CanNmPassiveModeEnabled
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1593</srcid><srcstatus/><internalId>960</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1722</srcid><srcstatus/><internalId>1199</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>152</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00073</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmPassiveModeEnabled is set to TRUE  or CanNmImmediateTxConfEnabled is set to TRUE CanNm
        shall not perform transmission error handling and omit the requirements SWS_CanNm_00061,
        SWS_CanNm_00064, SWS_CanNm_00065, SWS_CanNm_00066 and SWS_CanNm_00446.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00073.1</srcid><srcstatus/><internalId>452</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00073.2</srcid><srcstatus/><internalId>453</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>153</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00074</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The location of the source node identifier shall be configurable by means of
        CanNmPduNidPosition to Byte 0, Byte 1, or off.
      </description>
      <comment>
        Refer SWS(pdf) to see the NM PDU message structure
        Info - Configuration check.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2302</srcid><srcstatus/><internalId>1344</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>154</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00075</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The location of the Control Bit Vector shall be configurable by means of CanNmPduCbvPosition to
        Byte 0, Byte 1, or off.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.CBVByteLocation</srcid><srcstatus/><internalId>692</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>155</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00085</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        During initialization the CanNm module shall set the Control Bit Vector to 0x00.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0109</srcid><srcstatus/><internalId>1591</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1434</srcid><srcstatus/><internalId>1173</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>156</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00086</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmUserDataEnabled is enabled but no user data bytes are available, the CanNm module shall
        raise an error during configuration or compilation time.
      </description>
      <comment>
        This requirement is rejected. There are multiple CanNm channels possible and some of
        them may have user data and some may not. Such mixed configuration is not possible if we accept this requirement.
        In such scenario, the channels which doesn't have user data are indicated by configuring UserDataLength as 0.
        The EB requirement CanNm.ComUserDataSupport.PduRefNoUserData is derived as result of this rejection.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.COMUserDataZeroLength</srcid><srcstatus/><internalId>672</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>157</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00087</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Every network node in a CanNm cluster shall transmit periodic Network Management PDUs as long
        as it requires bus-communication; otherwise it shall transmit no Network Management PDUs.
      </description>
      <comment>
        This requirement is informational only.
        Info - Transmission of NM PDUs by node should happen only if it requires bus communication.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>158</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00088</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmStayInPbsEnabled is disabled and bus communication in a CanNm cluster is released and
        there are no Network Management PDUs on the bus for a configurable amount of time determined by
        CanNmTimeoutTime + CanNmWaitBusSleepTime (both configuration parameters) transition into the
        Bus-Sleep Mode shall be performed.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.CanNmStayInPbsEnabled</srcid><srcstatus/><internalId>685</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>159</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00089</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The AUTOSAR CanNm state machine shall contain states, transitions and triggers required for the
        AUTOSAR CanNm algorithm seen from point of view of one single node in the network management
        cluster.
      </description>
      <comment>
        This requirement is informational only. It is a generic requirement
        for HSM design.
        Info - Each node should have individual state machine.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>160</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00092</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The AUTOSAR CanNm shall contain three operational modes visible at the module's interface:
        Network Mode
        Prepare Bus-Sleep Mode
        Bus-Sleep Mode
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1527</srcid><srcstatus/><internalId>954</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>161</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00093</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Changes of the AUTOSAR CanNm operational modes shall be notified to the upper layer by means of
        callback functions.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32052</srcid><srcstatus/><internalId>1645</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_285</srcid><srcstatus/><internalId>1079</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_387</srcid><srcstatus/><internalId>1091</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1324</srcid><srcstatus/><internalId>1163</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>162</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00094</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Network Mode shall consist of three internal states:
        Repeat Message State
        Normal Operation State
        Ready Sleep State
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1530</srcid><srcstatus/><internalId>955</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>163</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00096</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the Network Mode is entered, the CanNm module shall start the NM-Timeout Timer.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_NmTimeOut_Restart_1</srcid><srcstatus/><internalId>1767</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_NmTimeOut_Start</srcid><srcstatus/><internalId>1790</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_380</srcid><srcstatus/><internalId>1089</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>164</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00097</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the Network Mode is entered, CanNm shall notify the upper layer of the new current
        operational mode by calling the callback function Nm_NetworkMode.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32019</srcid><srcstatus/><internalId>1577</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32020</srcid><srcstatus/><internalId>1578</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32037</srcid><srcstatus/><internalId>1698</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_387</srcid><srcstatus/><internalId>1091</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>165</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00098</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        At successful reception of a Network Management PDU (call of CanNm_RxIndication) in the Network
        Mode, the CanNm module shall restart the NM-Timeout Timer if PDU transmission ability is
        enabled.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Current implementation already covers the transmission ability enabled. Refer to CANNM098_Refine. Traceability to be double checked as the refinement is redundant now
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00098</srcid><srcstatus/><internalId>463</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>166</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00099</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        At successful transmission of a Network Management PDU (call of CanNm_TxConfirmation with E_OK)
        in the Network Mode, the CanNm module shall restart the NM-Timeout Timer.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00099.1</srcid><srcstatus/><internalId>465</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00099.2</srcid><srcstatus/><internalId>466</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>167</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00100</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the Repeat Message State is entered the CanNm module shall (re-)start transmission of
        Network Management PDUs unless passive mode is enabled and/or communication is disabled.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.ReTransmissionOnRepeatMessageEnter</srcid><srcstatus/><internalId>699</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>168</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00101</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the NM-Timeout Timer expires in the Repeat Message State, the CanNm module shall (re-)
        start the NM-Timeout Timer.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_NmTimeOut_Restart_1</srcid><srcstatus/><internalId>1767</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_856</srcid><srcstatus/><internalId>1125</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.Internal_Transition_SENDING_SUB_MODE_3</srcid><srcstatus/><internalId>1450</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>169</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00102</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The network management state machine shall stay in the Repeat Message State for a configurable
        amount of time determined by the CanNmRepeatMessageTime (configuration parameter); after that
        time the CanNm module shall leave the Repeat Message State.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_RepeatMessageTimeZeroPasiveStartup</srcid><srcstatus/><internalId>1561</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_RepeatMessageTimeZeroActiveStartup</srcid><srcstatus/><internalId>1562</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32053</srcid><srcstatus/><internalId>1579</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_RepeatMsgTest</srcid><srcstatus/><internalId>1596</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_State_Transitions_Multicore_1</srcid><srcstatus/><internalId>1664</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1123</srcid><srcstatus/><internalId>1142</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.RMS_TIMEOUT_REPEAT_MESSAGE_STATE</srcid><srcstatus/><internalId>1424</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.RMS_TIMEOUT_READY_SLEEP_STATE</srcid><srcstatus/><internalId>1431</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>170</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00103</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When Repeat Message State is left and if the network has been requested , the CanNm module
        shall enter the Normal Operation State.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32053</srcid><srcstatus/><internalId>1579</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32038</srcid><srcstatus/><internalId>1699</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1278</srcid><srcstatus/><internalId>1160</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.RMS_TIMEOUT_REPEAT_MESSAGE_STATE</srcid><srcstatus/><internalId>1424</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>171</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00104</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The function call CanNm_NetworkRequest shall request the network. I.e. the CanNm module shall
        change network state to 'requested'
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32053</srcid><srcstatus/><internalId>1579</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32030</srcid><srcstatus/><internalId>1580</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_33027</srcid><srcstatus/><internalId>1650</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_569</srcid><srcstatus/><internalId>851</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.NET_REQ_STATUS_CHANGED_READY_SLEEP_STATE</srcid><srcstatus/><internalId>1436</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>172</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00105</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The function call CanNm_NetworkRelease shall release the network. I.e. the CanNm module shall
        change network state to 'released'
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32029</srcid><srcstatus/><internalId>1583</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_33027</srcid><srcstatus/><internalId>1650</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_State_Transitions_Multicore_1</srcid><srcstatus/><internalId>1664</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_711</srcid><srcstatus/><internalId>867</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.NET_REQ_STATUS_CHANGED_NORMAL_OPERATION_STATE</srcid><srcstatus/><internalId>1435</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>173</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00106</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When Repeat Message State is left and if the network has been released , the CanNm module shall
        enter the Ready Sleep State.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32037</srcid><srcstatus/><internalId>1698</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_PassiveStartup_RMSTimeExpire</srcid><srcstatus/><internalId>1724</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1262</srcid><srcstatus/><internalId>1159</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.RMS_TIMEOUT_READY_SLEEP_STATE</srcid><srcstatus/><internalId>1431</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>174</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00107</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmNodeDetectionEnabled is set to TRUE CanNm shall clear the Repeat Message Bit when
        leaving the Repeat Message State.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0132</srcid><srcstatus/><internalId>1766</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1241</srcid><srcstatus/><internalId>1158</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>175</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00108</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the Ready Sleep State is entered from Repeat Message State or Normal Operation State, the
        CanNm module shall stop transmission of Network Management PDUs.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00108.1</srcid><srcstatus/><internalId>428</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00108.2</srcid><srcstatus/><internalId>429</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>176</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00109</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the NM-Timeout Timer expires in the Ready Sleep State, the CanNm module shall enter the
        Prepare Bus-Sleep Mode.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_EventQueue</srcid><srcstatus/><internalId>1507</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32042</srcid><srcstatus/><internalId>1582</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_State_Transitions_Multicore_1</srcid><srcstatus/><internalId>1664</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32037</srcid><srcstatus/><internalId>1698</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_NmTimeOut_Start</srcid><srcstatus/><internalId>1790</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_535</srcid><srcstatus/><internalId>1104</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.NM_TIMEOUT_READY_SLEEP_STATE</srcid><srcstatus/><internalId>1438</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>177</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00110</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the network is requested and the current state is the Ready Sleep State, the CanNm module
        shall enter Normal Operation State (refer to SWS_CanNm_00104)
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_PN_SpontaneousTr_ReEnterRMS2</srcid><srcstatus/><internalId>1526</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32030</srcid><srcstatus/><internalId>1580</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_ConcurrencyAccess</srcid><srcstatus/><internalId>1597</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_570</srcid><srcstatus/><internalId>1106</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.NET_REQ_STATUS_CHANGED_READY_SLEEP_STATE</srcid><srcstatus/><internalId>1436</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>178</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00111</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmNodeDetectionEnabled is set to TRUE and Repeat Message Request Bit is received in the
        Ready Sleep State, the CanNm module shall enter the Repeat Message State.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0125</srcid><srcstatus/><internalId>1763</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_668</srcid><srcstatus/><internalId>1108</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.REPEAT_MESSAGE_REASON_READY_SLEEP_STATE_2</srcid><srcstatus/><internalId>1434</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>179</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00112</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmNodeDetectionEnabled is set to TRUE and function CanNm_RepeatMessageRequest is called
        in the Ready Sleep State, the CanNm module shall enter the Repeat Message State.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. In the current implementation the API CanNm_RepeatMessageRequest is only available if CanNmNodeDetectionEnabled is set to TRUE for at least one channel and it is verified that CanNmNodeDetectionEnabled is enabled for the channel for which it is requested.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32055</srcid><srcstatus/><internalId>1581</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0139</srcid><srcstatus/><internalId>1757</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_668</srcid><srcstatus/><internalId>1108</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.REPEAT_MESSAGE_REASON_READY_SLEEP_STATE_1</srcid><srcstatus/><internalId>1433</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>180</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00113</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmNodeDetectionEnabled is set to TRUE and function CanNm_RepeatMessageRequest is called
        in Ready Sleep State the CanNm module shall set the Repeat Message Bit.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. In the current implementation the API CanNm_RepeatMessageRequest is only available if CanNmNodeDetectionEnabled is set to TRUE for at least one channel and it is verified that CanNmNodeDetectionEnabled is enabled for the channel for which it is requested.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32055</srcid><srcstatus/><internalId>1581</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0139</srcid><srcstatus/><internalId>1757</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1340</srcid><srcstatus/><internalId>934</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>181</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00114</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When Prepare Bus-Sleep Mode is entered, the CanNm module shall notify the upper layer by
        calling Nm_PrepareBusSleepMode.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32042</srcid><srcstatus/><internalId>1582</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32037</srcid><srcstatus/><internalId>1698</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1324</srcid><srcstatus/><internalId>1163</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>182</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00115</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmStayInPbsEnabled is disabled CanNm shall stay in the Prepare Bus-Sleep Mode for a
        configurable amount of time determined by the CanNmWaitBusSleepTime (configuration parameter);
        after that time the Prepare Bus-Sleep Mode shall be left and the Bus-Sleep Mode shall be
        entered.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.CanNmStayInPbsEnabled</srcid><srcstatus/><internalId>685</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>183</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00116</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the Normal Operation State is entered from Ready Sleep State, the CanNm module shall start
        transmission of Network Management PDUs.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0105</srcid><srcstatus/><internalId>1730</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1145</srcid><srcstatus/><internalId>1144</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.NET_REQ_STATUS_CHANGED_READY_SLEEP_STATE</srcid><srcstatus/><internalId>1436</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>184</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00117</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the NM-Timeout Timer expires in the Normal Operation State, the CanNm module shall (re-)
        start the NM-Timeout Timer.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_NmTimeOut_Restart_1</srcid><srcstatus/><internalId>1767</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_856</srcid><srcstatus/><internalId>1125</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.Internal_Transition_SENDING_SUB_MODE_3</srcid><srcstatus/><internalId>1450</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>185</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00118</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the network is released and the current state is Normal Operation State, the CanNm module
        shall enter the Ready Sleep state (refer to SWS_CanNm_00105)
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32029</srcid><srcstatus/><internalId>1583</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_ConcurrencyAccess</srcid><srcstatus/><internalId>1597</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_936</srcid><srcstatus/><internalId>1129</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.NET_REQ_STATUS_CHANGED_NORMAL_OPERATION_STATE</srcid><srcstatus/><internalId>1435</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>186</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00119</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmNodeDetectionEnabled is set to TRUE and Repeat Message Request Bit is received in the
        Normal Operation State, the CanNm module shall enter the Repeat Message State.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0118_EB</srcid><srcstatus/><internalId>1758</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1046</srcid><srcstatus/><internalId>1134</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.REPEAT_MESSAGE_REASON_NORMAL_OPERATION_REMOTE_ACTIVITY_2</srcid><srcstatus/><internalId>1430</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>187</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00120</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmNodeDetectionEnabled is set to TRUE and function CanNm_RepeatMessageRequest is called
        in the Normal Operation State, the CanNm module shall enter the Repeat Message State.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. In the current implementation the API CanNm_RepeatMessageRequest is only available if CanNmNodeDetectionEnabled is set to TRUE for at least one channel and it is verified that CanNmNodeDetectionEnabled is enabled for the channel for which it is requested.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32054</srcid><srcstatus/><internalId>1585</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0132</srcid><srcstatus/><internalId>1766</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_RepeatMsgReqCommDisable</srcid><srcstatus/><internalId>1769</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1046</srcid><srcstatus/><internalId>1134</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.REPEAT_MESSAGE_REASON_NORMAL_OPERATION_REMOTE_ACTIVITY_1</srcid><srcstatus/><internalId>1429</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>188</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00121</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmNodeDetectionEnabled is set to TRUE and function CanNm_RepeatMessageRequest is called
        in the Normal Operation State the CanNm module shall set the Repeat Message Bit.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. In the current implementation the API CanNm_RepeatMessageRequest is only available if CanNmNodeDetectionEnabled is set to TRUE for at least one channel and it is verified that CanNmNodeDetectionEnabled is enabled for the channel for which it is requested.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0132</srcid><srcstatus/><internalId>1766</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_RepeatMsgReqCommDisable</srcid><srcstatus/><internalId>1769</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1340</srcid><srcstatus/><internalId>934</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>189</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00122</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the network has been requested  in the Prepare Bus-Sleep Mode and the CanNm module has
        entered Network Mode and if CanNmImmediateRestartEnabled (configuration parameter) is set to
        TRUE, the CanNm module shall transmit a Network Management PDU.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_14001</srcid><srcstatus/><internalId>1556</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_14002</srcid><srcstatus/><internalId>1557</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_ImmediateRestart</srcid><srcstatus/><internalId>1638</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0084</srcid><srcstatus/><internalId>1729</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1159</srcid><srcstatus/><internalId>1148</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.NET_REQ_STATUS_CHANGED_PREPARE_BUS_SLEEP_MODE</srcid><srcstatus/><internalId>1439</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>190</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00123</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the network is requested in the Prepare Bus-Sleep Mode, the CanNm module shall enter the
        Network Mode; by default the CanNm Module shall enter the Repeat Message State (refer to
        SWS_CanNm_00315)
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32044</srcid><srcstatus/><internalId>1587</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32037</srcid><srcstatus/><internalId>1698</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1366</srcid><srcstatus/><internalId>1166</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.NET_REQ_STATUS_CHANGED_PREPARE_BUS_SLEEP_MODE</srcid><srcstatus/><internalId>1439</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>191</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00124</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        At successful reception of a Network Management PDU in the Prepare Bus-Sleep Mode, the CanNm
        Module shall enter the Network Mode; by default the CanNm Module shall enter the Repeat Message
        State (refer to SWS_CanNm_00315)
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32043</srcid><srcstatus/><internalId>1586</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_CanNm_PrepareBusSleep_To_RepeatMessage_Coverage</srcid><srcstatus/><internalId>1722</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1378</srcid><srcstatus/><internalId>1167</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.RX_INDICATION_PREPARE_BUS_SLEEP_MODE</srcid><srcstatus/><internalId>1440</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>192</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00126</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When Bus-Sleep Mode is entered, except by default at initialization, the CanNm module shall
        notify the upper layer by calling the callback function Nm_BusSleepMode.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32022</srcid><srcstatus/><internalId>1588</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0112</srcid><srcstatus/><internalId>1593</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_285</srcid><srcstatus/><internalId>1079</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>193</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00127</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the CanNm module successfully receives a Network Management PDU (call of
        CanNm_RxIndication) in the Bus-Sleep Mode, the CanNm module shall notify the upper layer by
        calling the callback function Nm_NetworkStartIndication.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0092</srcid><srcstatus/><internalId>1749</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_308</srcid><srcstatus/><internalId>1081</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.Internal_Transition_BUS_SLEEP_MODE</srcid><srcstatus/><internalId>1421</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>194</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00128</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNm_PassiveStartUp is called in the Bus-Sleep Mode or Prepare Bus-Sleep Mode, the CanNm
        module shall enter the Network Mode; by default the CanNm module shall enter the Repeat Message
        State (refer to SWS_CanNm_00314 and SWS_CanNm_00315)
      </description>
      <comment>
        In the Prepare Bus-Sleep Mode and Bus-Sleep Mode is assumed that the network is
        released, unless bus communication is explicitly requested.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00128.1</srcid><srcstatus/><internalId>477</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00128.2</srcid><srcstatus/><internalId>478</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>195</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00129</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the network is requested in Bus-Sleep Mode, the CanNm module shall enter the Network Mode;
        by default the CanNm module shall enter the Repeat Message State (refer to SWS_CanNm_00314 and
        SWS_CanNm_00104)
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32027</srcid><srcstatus/><internalId>1576</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_State_Transitions_Multicore_1</srcid><srcstatus/><internalId>1664</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_354</srcid><srcstatus/><internalId>1086</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.NET_REQSTATUS_CHANGED_BUS_SLEEP_MODE_NetworkRequest</srcid><srcstatus/><internalId>1422</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.NET_REQSTATUS_CHANGED_BUS_SLEEP_MODE_NetworkGwEraRequest</srcid><srcstatus/><internalId>1423</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>196</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00130</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The service call CanNm_RequestBusSynchronization shall trigger transmission of a single Network
        Management PDU if CanNmPassiveModeEnabled (configuration parameter) is not defined.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0077</srcid><srcstatus/><internalId>1594</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_RequestBusSync</srcid><srcstatus/><internalId>1647</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1664</srcid><srcstatus/><internalId>968</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>197</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00132</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The service call CanNm_GetNodeIdentifier shall provide the node identifier out of the most
        recently received Network Management PDU if CanNmNodeIdEnabled is set to TRUE.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. In the current implementation CanNm_GetNodeIdentifier is provided if CanNmNodeIdEnabled is set to TRUE for at least one channel and it is verified in CanNm_GetNodeIdentifier that CanNmNodeIdEnabled is set to TRUE for the channel for which it is called.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_33023</srcid><srcstatus/><internalId>1646</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0097</srcid><srcstatus/><internalId>1751</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1157</srcid><srcstatus/><internalId>914</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>198</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00133</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The service call CanNm_GetLocalNodeIdentifier shall provide the node identifier configured for
        the local host node if CanNmNodeIdEnabled is set to TRUE.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. In the current implementation CanNm_GetLocalNodeIdentifier is provided if CanNmNodeIdEnabled is set to TRUE for at least one channel and it is verified in CanNm_GetLocalNodeIdentifier that CanNmNodeIdEnabled is set to TRUE for the channel for which it is called
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_33023</srcid><srcstatus/><internalId>1646</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0098</srcid><srcstatus/><internalId>1752</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1248</srcid><srcstatus/><internalId>924</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>199</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00137</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the service CanNm_RepeatMessageRequest is called in Repeat Message State, Prepare Bus-Sleep
        Mode or Bus-Sleep Mode, the CanNm module shall not execute the service and return E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00137.1</srcid><srcstatus/><internalId>425</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00137.2</srcid><srcstatus/><internalId>426</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00137.3</srcid><srcstatus/><internalId>427</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>200</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00138</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The service call CanNm_GetPduData shall provide whole PDU data (Node ID, Control Bit Vector and
        User Data) of the most recently received Network Management PDU if CanNmNodeDetectionEnabled or
        CannNmUserDataEnabled or CanNmNodeIdEnabled is set to TRUE.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. CanNm_GetPduData is provided only if CanNmNodeDetectionEnabled oe CanNmNodeIdEnabled is set to TRUE for at least one channel and it is verified that CanNmNodeDetectionEnabled oe CanNmNodeIdEnabled is set to TRUE for the channel for which it is called
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0099</srcid><srcstatus/><internalId>1753</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1364</srcid><srcstatus/><internalId>937</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>201</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00141</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the initialization of the CanNm module (CanNm_Init) is successful, the CanNm module shall
        set the Network Management State to Bus-Sleep Mode.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_DET_OFF_ValidCfg</srcid><srcstatus/><internalId>1569</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0112</srcid><srcstatus/><internalId>1593</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32050</srcid><srcstatus/><internalId>1643</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_339</srcid><srcstatus/><internalId>828</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>202</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00143</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When initialized, by default, the CanNm module shall set the network state to 'released'
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0087</srcid><srcstatus/><internalId>1651</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_355</srcid><srcstatus/><internalId>831</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1406</srcid><srcstatus/><internalId>1170</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>203</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00144</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When initialized, by default, the CanNm module shall enter the Bus-Sleep Mode.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_DET_OFF_ValidCfg</srcid><srcstatus/><internalId>1569</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0112</srcid><srcstatus/><internalId>1593</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32050</srcid><srcstatus/><internalId>1643</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_411</srcid><srcstatus/><internalId>833</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>204</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00146</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The AUTOSAR CanNm algorithm shall be processor independent, which means; it shall not rely on
        any processor specific hardware support and thus shall be realizable on any processor
        architecture that is in the scope of AUTOSAR.
      </description>
      <comment>
        This requirement is informational only. It is a general requirement.
        Info - Coordination Algorithm should not depend on type of processor.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>205</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00147</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNm_PassiveStartUp is called in the Network Mode, the CanNm module shall not execute this
        service and shall return E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_33025</srcid><srcstatus/><internalId>1648</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0087</srcid><srcstatus/><internalId>1651</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_501</srcid><srcstatus/><internalId>844</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>206</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00149</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Detection of remote sleep indication shall be statically configurable with use of the
        CanNmRemoteSleepIndEnabled switch (configuration parameter)
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_187</srcid><srcstatus/><internalId>729</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>207</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00150</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the CanNm module receives no Network Management PDUs in the Normal Operation State for a
        configurable amount of time determined by CanNmRemoteSleepIndTime (configuration parameter),
        the CanNm module shall call the callback function Nm_RemoteSleepIndication.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_RSI</srcid><srcstatus/><internalId>1519</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32057</srcid><srcstatus/><internalId>1598</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32051</srcid><srcstatus/><internalId>1644</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_33030</srcid><srcstatus/><internalId>1657</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0100</srcid><srcstatus/><internalId>1741</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_962</srcid><srcstatus/><internalId>1131</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.UNI_TIMEOUT_NORMAL_OPERATION_REMOTE_ACTIVITY</srcid><srcstatus/><internalId>1426</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>208</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00151</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If Remote Sleep Indication has been previously detected and if a Network Management PDU is
        received in the Normal Operation State or Ready Sleep State again, the module CanNm shall call
        the callback function Nm_RemoteSleepCancellation.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00151.1</srcid><srcstatus/><internalId>438</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00151.2</srcid><srcstatus/><internalId>439</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>209</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00152</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If Remote Sleep Indication has been previously detected and if Repeat Message State is entered
        from Normal Operation State or Ready Sleep State, the module CanNm shall call the callback
        function Nm_RemoteSleepCancellation.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00152.1</srcid><srcstatus/><internalId>440</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00152.2</srcid><srcstatus/><internalId>441</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>210</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00153</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service call CanNm_CheckRemoteSleepIndication shall provide the information about current
        status of Remote Sleep Indication (i.e. already detected or not)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32051</srcid><srcstatus/><internalId>1644</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_33030</srcid><srcstatus/><internalId>1657</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0100</srcid><srcstatus/><internalId>1741</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1684</srcid><srcstatus/><internalId>969</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>211</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00154</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the service CanNm_CheckRemoteSleepIndication is called and the state is Bus-Sleep Mode,
        Prepare Bus-Sleep Mode or Repeat Message State the CanNm module shall not execute the service
        and shall return E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00154.1</srcid><srcstatus/><internalId>442</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00154.2</srcid><srcstatus/><internalId>443</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00154.3</srcid><srcstatus/><internalId>444</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>212</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00156</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the Repeat Message State is entered from Bus-Sleep Mode, Prepare Bus-Sleep Mode, Normal
        Operation or Ready Sleep State the CanNm module shall deactivate the busload reduction.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00156.1</srcid><srcstatus/><internalId>432</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00156.2</srcid><srcstatus/><internalId>433</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00156.3</srcid><srcstatus/><internalId>434</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00156.4</srcid><srcstatus/><internalId>435</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>213</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00157</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the Normal Operation State is entered from Repeat Message State or Ready Sleep State and
        CanNmBusLoadReductionEnabled is TRUE the CanNm module shall activate the busload reduction.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00157.1</srcid><srcstatus/><internalId>436</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00157.2</srcid><srcstatus/><internalId>437</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>214</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00158</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Support of NM user data shall be statically configurable with use of the CanNmUserDataEnabled
        switch (configuration parameter)
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_173</srcid><srcstatus/><internalId>727</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>215</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00159</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When CanNm_SetUserData is called the CanNm module shall set the Network Management user data
        for the Network Management PDUs transmitted next on the bus.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_SetUserData</srcid><srcstatus/><internalId>1566</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0103</srcid><srcstatus/><internalId>1754</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_917</srcid><srcstatus/><internalId>887</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>216</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00160</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When CanNm_GetUserData is called CanNm module shall return the Network Management user data of
        the most recently received Network Management PDU.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0103</srcid><srcstatus/><internalId>1754</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1007</srcid><srcstatus/><internalId>897</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>217</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00161</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Passive Mode shall be statically configurable with use of the CanNmPassiveModeEnabled switch (
        configuration parameter)
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_145</srcid><srcstatus/><internalId>723</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>218</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00166</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        All changes of the AUTOSAR CanNm states shall be notified to the upper layer by calling
        Nm_StateChangeNotification if the callback Nm_StateChangeNotification is enabled (configuration
        parameter CanNmStateChangeIndEnabled is TRUE)
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_ReEnterNetworkMode</srcid><srcstatus/><internalId>1533</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0144</srcid><srcstatus/><internalId>1733</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0145</srcid><srcstatus/><internalId>1734</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0146</srcid><srcstatus/><internalId>1735</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1862</srcid><srcstatus/><internalId>1210</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations><ruleid>WRN.swuts.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>219</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00170</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the service CanNm_DisableCommunication is called the CanNm module shall disable the Network
        Management PDU transmission ability.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_33028</srcid><srcstatus/><internalId>1655</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_33029</srcid><srcstatus/><internalId>1656</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0116</srcid><srcstatus/><internalId>1738</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_ImmediateNmTrans_5</srcid><srcstatus/><internalId>1779</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_736</srcid><srcstatus/><internalId>869</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>220</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00172</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The service CanNm_DisableCommunication shall return E_NOT_OK, if the current mode is not
        Network Mode.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0115</srcid><srcstatus/><internalId>1737</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_808</srcid><srcstatus/><internalId>876</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>221</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00173</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the Network Management PDU transmission ability is disabled, the CanNm module shall stop
        the CanNm Message Cycle Timer in order to stop the transmission of Network Management PDUs.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0114</srcid><srcstatus/><internalId>1736</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0116</srcid><srcstatus/><internalId>1738</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_220</srcid><srcstatus/><internalId>1077</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_754</srcid><srcstatus/><internalId>1115</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1705</srcid><srcstatus/><internalId>1196</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>222</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00174</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the Network Management PDU transmission ability is disabled, the CanNm module shall stop
        the NM-Timeout Timer.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_NMTimeOutTimerCOMControl</srcid><srcstatus/><internalId>1739</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_215</srcid><srcstatus/><internalId>1075</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1707</srcid><srcstatus/><internalId>1197</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>223</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00175</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the Network Management PDU transmission ability is disabled, the CanNm module shall stop
        the Remote Sleep Indication Detection.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0147</srcid><srcstatus/><internalId>1745</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_217</srcid><srcstatus/><internalId>1076</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1709</srcid><srcstatus/><internalId>1198</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>224</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00176</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The service CanNm_EnableCommunication shall enable the Network Management PDU transmission
        ability if the Network Management PDU transmission ability is disabled.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0114</srcid><srcstatus/><internalId>1736</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_884</srcid><srcstatus/><internalId>884</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>225</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00177</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The service CanNm_EnableCommunication shall return E_NOT_OK if the Network Management PDU
        transmission ability is enabled.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0114</srcid><srcstatus/><internalId>1736</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_893</srcid><srcstatus/><internalId>885</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>226</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00178</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the Network Management PDU transmission ability is enabled, the transmission of NM PDUs
        shall be started latest within the next NM main function.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.EnableCommunicationFirstNmMessage</srcid><srcstatus/><internalId>686</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>227</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00179</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the Network Management PDU transmission ability is enabled, the CanNm module shall restart
        the NM-Timeout Timer.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_NMTimeOutTimerCOMControl</srcid><srcstatus/><internalId>1739</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1695</srcid><srcstatus/><internalId>1194</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.Internal_Transition_NETWORK_MODE_0</srcid><srcstatus/><internalId>1442</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.Internal_Transition_NETWORK_MODE_1</srcid><srcstatus/><internalId>1443</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>228</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00180</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmRemoteSleepIndEnabled is TRUE and the Network Management PDU transmission ability is
        enabled, the CanNm module shall re-start the Remote Sleep Indication Detection.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Please reffer to CANNM180_Refine. Traceability to be updated since the refinment is now redundant.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00180</srcid><srcstatus/><internalId>462</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>229</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00181</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The service CanNm_RequestBusSynchronization shall return E_NOT_OK if the Network Management PDU
        transmission ability is disabled.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_RequestBusSync</srcid><srcstatus/><internalId>1647</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1639</srcid><srcstatus/><internalId>966</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>230</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00185</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Support of bus synchronization on demand shall be statically configurable with use of the
        CanNmBusSynchronizationEnabled switch (configuration parameter)
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_216</srcid><srcstatus/><internalId>733</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>231</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00187</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNm_RequestBusSynchronization is called in Bus-Sleep Mode and Prepare Bus-Sleep Mode the
        CanNm module shall not execute the service and shall return E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00187.1</srcid><srcstatus/><internalId>475</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00187.2</srcid><srcstatus/><internalId>476</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>232</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00189</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The CanNm module shall not return development errors by API functions; in case of a development
        error, the execution of the respective API function shall be aborted and E_NOT_OK shall be
        returned, if applicable.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32007</srcid><srcstatus/><internalId>1501</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32008</srcid><srcstatus/><internalId>1503</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32009</srcid><srcstatus/><internalId>1504</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_501</srcid><srcstatus/><internalId>844</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_582</srcid><srcstatus/><internalId>852</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_652</srcid><srcstatus/><internalId>860</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_723</srcid><srcstatus/><internalId>868</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_927</srcid><srcstatus/><internalId>888</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1082</srcid><srcstatus/><internalId>906</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1162</srcid><srcstatus/><internalId>916</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1258</srcid><srcstatus/><internalId>927</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1350</srcid><srcstatus/><internalId>936</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1442</srcid><srcstatus/><internalId>944</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1471</srcid><srcstatus/><internalId>946</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1601</srcid><srcstatus/><internalId>961</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1765</srcid><srcstatus/><internalId>977</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2345</srcid><srcstatus/><internalId>1023</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations><ruleid>WRN.impl.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>233</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00190</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The CanNm module shall not return production errors by API functions; in case of a production
        error, the execution of the respective API function shall be aborted and E_NOT_OK shall be
        returned, if applicable.
      </description>
      <comment>
        This requirement is not applicable because CanNm doesn't define any
        production error.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>234</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00192</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When a CanNm service with an invalid network handle is called, the called function shall not be
        executed and it shall return E_NOT_OK to the calling function if applicable. If development
        error detection is enabled (CanNmDevErrorDetect is set to TRUE) the corresponding error
        CANNM_E_INVALID_CHANNEL shall be reported to DET.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00192</srcid><srcstatus/><internalId>461</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>235</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00193</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the NM-Timeout Timer expires in the Repeat Message State the CanNm module shall report
        CANNM_E_NETWORK_TIMEOUT to the DET.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32012</srcid><srcstatus/><internalId>1505</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0123</srcid><srcstatus/><internalId>1762</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_851</srcid><srcstatus/><internalId>1124</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>236</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00194</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the NM-Timeout Timer expires in the Normal Operation State the CanNm module shall report
        CANNM_E_NETWORK_TIMEOUT to the DET.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32036</srcid><srcstatus/><internalId>1584</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_851</srcid><srcstatus/><internalId>1124</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>237</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00202</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The container CanNmChannelConfig specifies configuration parameter that shall be located in a
        data structure of type CanNm_ConfigType.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_var/xgen/CanNm.xgen_89</srcid><srcstatus/><internalId>1416</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>238</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00203</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Runtime configurable parameters listed below shall be configurable for each network management
        cluster separately.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1209</srcid><srcstatus/><internalId>1276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>239</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00206</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The CAN NM module shall reset the NM-Timeout Timer every time it is started or restarted.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_NmTimeOut_Restart_1</srcid><srcstatus/><internalId>1767</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_383</srcid><srcstatus/><internalId>1090</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_856</srcid><srcstatus/><internalId>1125</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1574</srcid><srcstatus/><internalId>1181</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1645</srcid><srcstatus/><internalId>1189</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1695</srcid><srcstatus/><internalId>1194</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.Internal_Transition_NETWORK_MODE_2</srcid><srcstatus/><internalId>1444</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>240</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00208</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | CanNm_Init
        Syntax
        void CanNm_Init (const CanNm_ConfigType* cannmConfigPtr)
        Service ID [hex] | 0x00
        Sync/Async | Synchronous
        Reentrancy | Non Reentrant
        Parameters (in) | cannmConfigPtr | Pointer to a selected configuration structure
        Parameters (inout) | None
        Parameters (out) | None
        Return value | None
        Description | Initialize the CanNm module.
        Available via | CanNm.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_1</srcid><srcstatus/><internalId>1459</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80002</srcid><srcstatus/><internalId>1478</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_DET_OFF_NotValidCfg</srcid><srcstatus/><internalId>1568</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_DET_OFF_ValidCfg</srcid><srcstatus/><internalId>1569</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32050</srcid><srcstatus/><internalId>1643</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_240</srcid><srcstatus/><internalId>820</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>241</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00211</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | CanNm_PassiveStartUp
        Syntax
        Std_ReturnType CanNm_PassiveStartUp (NetworkHandleType nmChannelHandle)
        Service ID [hex] | 0x01
        Sync/Async | Asynchronous
        Reentrancy | Reentrant (but not for the same NM-Channel)
        Parameters (in) | nmChannelHandle | Identification of the NM-channel
        Parameters (inout) | None
        Parameters (out) | None
        Return value | Std_ReturnType | E_OK: No errorE_NOT_OK: Passive startup of network management
        has failed
        Description | Passive startup of the AUTOSAR CAN NM. It triggers the transition from Bus-Sleep
        Mode or Prepare Bus Sleep Mode to the Network Mode in Repeat Message State. Caveats: CanNm is
        initialized correctly.
        Available via | CanNm.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_1</srcid><srcstatus/><internalId>1459</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80002</srcid><srcstatus/><internalId>1478</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0087</srcid><srcstatus/><internalId>1651</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_427</srcid><srcstatus/><internalId>835</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>242</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00213</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | CanNm_NetworkRequest
        Syntax
        Std_ReturnType CanNm_NetworkRequest (NetworkHandleType nmChannelHandle)
        Service ID [hex] | 0x02
        Sync/Async | Asynchronous
        Reentrancy | Reentrant (but not for the same NM-channel)
        Parameters (in) | nmChannelHandle | Identification of the NM-channel
        Parameters (inout) | None
        Parameters (out) | None
        Return value | Std_ReturnType | E_OK: No errorE_NOT_OK: Requesting of network has failed
        Description | Request the network, since ECU needs to communicate on the bus.
        Available via | CanNm.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_1</srcid><srcstatus/><internalId>1459</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80002</srcid><srcstatus/><internalId>1478</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0077</srcid><srcstatus/><internalId>1594</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_520</srcid><srcstatus/><internalId>845</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>243</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00214</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | CanNm_NetworkRelease
        Syntax
        Std_ReturnType CanNm_NetworkRelease (NetworkHandleType nmChannelHandle)
        Service ID [hex] | 0x03
        Sync/Async | Asynchronous
        Reentrancy | Reentrant (but not for the same NM-Channel)
        Parameters (in) | nmChannelHandle | Identification of the NM-channel
        Parameters (inout) | None
        Parameters (out) | None
        Return value | Std_ReturnType | E_OK: No errorE_NOT_OK: Releasing of network has failed
        Description | Release the network, since ECU doesn't have to communicate on the bus.
        Available via | CanNm.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_1</srcid><srcstatus/><internalId>1459</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80002</srcid><srcstatus/><internalId>1478</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32029</srcid><srcstatus/><internalId>1583</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_663</srcid><srcstatus/><internalId>861</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>244</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00215</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | CanNm_DisableCommunication
        Syntax
        Std_ReturnType CanNm_DisableCommunication (NetworkHandleType nmChannelHandle)
        Service ID [hex] | 0x0c
        Sync/Async | Asynchronous
        Reentrancy | Reentrant (but not for the same NM-channel)
        Parameters (in) | nmChannelHandle | Identification of the NM-channel
        Parameters (inout) | None
        Parameters (out) | None
        Return value | Std_ReturnType | E_OK: No errorE_NOT_OK: Disabling of NM PDU transmission
        ability has failed
        Description | Disable the NM PDU transmission ability due to a ISO14229 Communication Control (
        28hex) service
        Available via | CanNm.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_1</srcid><srcstatus/><internalId>1459</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80002</srcid><srcstatus/><internalId>1478</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0116</srcid><srcstatus/><internalId>1738</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_736</srcid><srcstatus/><internalId>869</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>245</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00216</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | CanNm_EnableCommunication
        Syntax
        Std_ReturnType CanNm_EnableCommunication (NetworkHandleType nmChannelHandle)
        Service ID [hex] | 0x0d
        Sync/Async | Asynchronous
        Reentrancy | Reentrant (but not for the same NM-channel)
        Parameters (in) | nmChannelHandle | Identification of the NM-channel
        Parameters (inout) | None
        Parameters (out) | None
        Return value | Std_ReturnType | E_OK: No errorE_NOT_OK: Enabling of NM PDU transmission ability
        has failed
        Description | Enable the NM PDU transmission ability due to a ISO14229 Communication Control (
        28hex) service
        Available via | CanNm.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_1</srcid><srcstatus/><internalId>1459</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80002</srcid><srcstatus/><internalId>1478</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0114</srcid><srcstatus/><internalId>1736</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_826</srcid><srcstatus/><internalId>878</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>246</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00217</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | CanNm_SetUserData
        Syntax
        Std_ReturnType CanNm_SetUserData (NetworkHandleType nmChannelHandle, const uint8* nmUserDataPtr)
        Service ID [hex] | 0x04
        Sync/Async | Synchronous
        Reentrancy | Reentrant (but not for the same NM-channel)
        Parameters (in) | nmChannelHandle | Identification of the NM-channel
        nmUserDataPtr | Pointer where the user data for the next transmitted NM PDU shall be copied
        from
        Parameters (inout) | None
        Parameters (out) | None
        Return value | Std_ReturnType | E_OK: No errorE_NOT_OK: Setting of user data has failed
        Description | Set user data for NM PDUs transmitted next on the bus.
        Available via | CanNm.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.APIReentrancy</srcid><srcstatus/><internalId>687</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>247</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00218</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | CanNm_GetUserData
        Syntax
        Std_ReturnType CanNm_GetUserData (NetworkHandleType nmChannelHandle, uint8* nmUserDataPtr)
        Service ID [hex] | 0x05
        Sync/Async | Synchronous
        Reentrancy | Reentrant
        Parameters (in) | nmChannelHandle | Identification of the NM-channel
        Parameters (inout) | None
        Parameters (out) | nmUserDataPtr | Pointer where user data out of the most recently received NM
        PDU shall be copied to
        Return value | Std_ReturnType | E_OK: No errorE_NOT_OK: Getting of user data has failed
        Description | Get user data out of the most recently received NM PDU.
        Available via | CanNm.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_1</srcid><srcstatus/><internalId>1459</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80002</srcid><srcstatus/><internalId>1478</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0103</srcid><srcstatus/><internalId>1754</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1007</srcid><srcstatus/><internalId>897</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>248</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00219</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | CanNm_GetNodeIdentifier
        Syntax
        Std_ReturnType CanNm_GetNodeIdentifier (NetworkHandleType nmChannelHandle, uint8* nmNodeIdPtr)
        Service ID [hex] | 0x06
        Sync/Async | Synchronous
        Reentrancy | Reentrant
        Parameters (in) | nmChannelHandle | Identification of the NM-channel
        Parameters (inout) | None
        Parameters (out) | nmNodeIdPtr | Pointer where node identifier out of the most recently
        received NM PDU shall be copied to
        Return value | Std_ReturnType | E_OK: No errorE_NOT_OK: Getting of the node identifier out of
        the most recently received NM PDU has failed or is not configured for this network handle.
        Description | Get node identifier out of the most recently received NM PDU.
        Available via | CanNm.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_1</srcid><srcstatus/><internalId>1459</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80002</srcid><srcstatus/><internalId>1478</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_CanNm_GetNodeIdentifier_E_NOT_OK</srcid><srcstatus/><internalId>1702</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0097</srcid><srcstatus/><internalId>1751</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1096</srcid><srcstatus/><internalId>907</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>249</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00220</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | CanNm_GetLocalNodeIdentifier
        Syntax
        Std_ReturnType CanNm_GetLocalNodeIdentifier (NetworkHandleType nmChannelHandle, uint8*
        nmNodeIdPtr)
        Service ID [hex] | 0x07
        Sync/Async | Synchronous
        Reentrancy | Reentrant
        Parameters (in) | nmChannelHandle | Identification of the NM-channel
        Parameters (inout) | None
        Parameters (out) | nmNodeIdPtr | Pointer where node identifier of the local node shall be
        copied to
        Return value | Std_ReturnType | E_OK: No errorE_NOT_OK: Getting of the node identifier of the
        local node has failed or is not configured for this network handle.
        Description | Get node identifier configured for the local node.
        Available via | CanNm.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_1</srcid><srcstatus/><internalId>1459</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80002</srcid><srcstatus/><internalId>1478</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_CanNm_GetLocalNodeIdentifier_E_NOT_OK</srcid><srcstatus/><internalId>1703</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_CanNm_GetLocalNodeIdentifier_ParameterUnused</srcid><srcstatus/><internalId>1721</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0098</srcid><srcstatus/><internalId>1752</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1184</srcid><srcstatus/><internalId>917</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>250</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00221</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | CanNm_RepeatMessageRequest
        Syntax
        Std_ReturnType CanNm_RepeatMessageRequest (NetworkHandleType nmChannelHandle)
        Service ID [hex] | 0x08
        Sync/Async | Asynchronous
        Reentrancy | Reentrant (but not for the same NM-channel)
        Parameters (in) | nmChannelHandle | Identification of the NM-channel
        Parameters (inout) | None
        Parameters (out) | None
        Return value | Std_ReturnType | E_OK: No errorE_NOT_OK: Setting of Repeat Message Request Bit
        has failed or is not configured for this network handle.
        Description | Set Repeat Message Request Bit for NM PDUs transmitted next on the bus.
        Available via | CanNm.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_1</srcid><srcstatus/><internalId>1459</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80002</srcid><srcstatus/><internalId>1478</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_CanNm_RepeatMessageRequest_E_NOT_OK</srcid><srcstatus/><internalId>1704</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0132</srcid><srcstatus/><internalId>1766</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_RepeatMsgReqCommDisable</srcid><srcstatus/><internalId>1769</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1278</srcid><srcstatus/><internalId>928</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>251</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00222</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | CanNm_GetPduData
        Syntax
        Std_ReturnType CanNm_GetPduData (NetworkHandleType nmChannelHandle, uint8* nmPduDataPtr)
        Service ID [hex] | 0x0a
        Sync/Async | Synchronous
        Reentrancy | Reentrant
        Parameters (in) | nmChannelHandle | Identification of the NM-channel
        Parameters (inout) | None
        Parameters (out) | nmPduDataPtr | Pointer where NM PDU shall be copied to
        Return value | Std_ReturnType | E_OK: No errorE_NOT_OK: Getting of NM PDU Data has failed or is
        not configured for this network handle.
        Description | Get the whole PDU data out of the most recently received NM PDU.
        Available via | CanNm.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_1</srcid><srcstatus/><internalId>1459</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80002</srcid><srcstatus/><internalId>1478</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_CanNm_GetPduData_E_NOT_OK</srcid><srcstatus/><internalId>1705</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0099</srcid><srcstatus/><internalId>1753</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1364</srcid><srcstatus/><internalId>937</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>252</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00223</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | CanNm_GetState
        Syntax
        Std_ReturnType CanNm_GetState (NetworkHandleType nmChannelHandle, Nm_StateType* nmStatePtr,
        Nm_ModeType* nmModePtr)
        Service ID [hex] | 0x0b
        Sync/Async | Synchronous
        Reentrancy | Reentrant
        Parameters (in) | nmChannelHandle | Identification of the NM-channel
        Parameters (inout) | None
        Parameters (out) | nmStatePtr | Pointer where state of the network management shall be copied
        to
        nmModePtr | Pointer where the mode of the network management shall be copied to
        Return value | Std_ReturnType | E_OK: No errorE_NOT_OK: Getting of NM state has failed
        Description | Returns the state and the mode of the network management.
        Available via | CanNm.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_1</srcid><srcstatus/><internalId>1459</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80002</srcid><srcstatus/><internalId>1478</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_DET_OFF_NotValidCfg</srcid><srcstatus/><internalId>1568</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_DET_OFF_ValidCfg</srcid><srcstatus/><internalId>1569</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32050</srcid><srcstatus/><internalId>1643</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1462</srcid><srcstatus/><internalId>945</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>253</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00224</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | CanNm_GetVersionInfo
        Syntax
        void CanNm_GetVersionInfo (Std_VersionInfoType* versioninfo)
        Service ID [hex] | 0xf1
        Sync/Async | Synchronous
        Reentrancy | Reentrant
        Parameters (in) | None
        Parameters (inout) | None
        Parameters (out) | versioninfo | Pointer to where to store the version information of this
        module
        Return value | None
        Description | This service returns the version information of this module.
        Available via | CanNm.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_1</srcid><srcstatus/><internalId>1459</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80002</srcid><srcstatus/><internalId>1478</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0135</srcid><srcstatus/><internalId>1658</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1560</srcid><srcstatus/><internalId>956</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>254</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00226</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | CanNm_RequestBusSynchronization
        Syntax
        Std_ReturnType CanNm_RequestBusSynchronization (NetworkHandleType nmChannelHandle)
        Service ID [hex] | 0xc0
        Sync/Async | Synchronous
        Reentrancy | Non Reentrant
        Parameters (in) | nmChannelHandle | Identification of the NM-channel
        Parameters (inout) | None
        Parameters (out) | None
        Return value | Std_ReturnType | E_OK: No errorE_NOT_OK: Requesting of bus synchronization has
        failed
        Description | Request bus synchronization.
        Available via | CanNm.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_1</srcid><srcstatus/><internalId>1459</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80002</srcid><srcstatus/><internalId>1478</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0077</srcid><srcstatus/><internalId>1594</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0078</srcid><srcstatus/><internalId>1746</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1593</srcid><srcstatus/><internalId>960</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>255</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00227</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | CanNm_CheckRemoteSleepIndication
        Syntax
        Std_ReturnType CanNm_CheckRemoteSleepIndication (NetworkHandleType nmChannelHandle, boolean*
        nmRemoteSleepIndPtr)
        Service ID [hex] | 0xd0
        Sync/Async | Synchronous
        Reentrancy | Reentrant
        Parameters (in) | nmChannelHandle | Identification of the NM-channel
        Parameters (inout) | None
        Parameters (out) | nmRemoteSleepIndPtr | Pointer where check result of remote sleep indication
        shall be copied to
        Return value | Std_ReturnType | E_OK: No errorE_NOT_OK: Checking of remote sleep indication
        bits has failed
        Description | Check if remote sleep indication takes place or not.
        Available via | CanNm.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_1</srcid><srcstatus/><internalId>1459</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80002</srcid><srcstatus/><internalId>1478</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32051</srcid><srcstatus/><internalId>1644</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0100</srcid><srcstatus/><internalId>1741</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1684</srcid><srcstatus/><internalId>969</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>256</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00228</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | CanNm_TxConfirmation
        Syntax
        void CanNm_TxConfirmation (PduIdType TxPduId, Std_ReturnType result)
        Service ID [hex] | 0x40
        Sync/Async | Synchronous
        Reentrancy | Reentrant for different PduIds. Non reentrant for the same PduId.
        Parameters (in) | TxPduId | ID of the PDU that has been transmitted.
        result | E_OK: The PDU was transmitted. E_NOT_OK: Transmission of the PDU failed.
        Parameters (inout) | None
        Parameters (out) | None
        Return value | None
        Description | The lower layer communication interface module confirms the transmission of a PDU,
        or the failure to transmit a PDU.
        Available via | CanNm.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1867</srcid><srcstatus/><internalId>983</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_1</srcid><srcstatus/><internalId>1459</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80002</srcid><srcstatus/><internalId>1478</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32036</srcid><srcstatus/><internalId>1584</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.RxIndicationTxConfirmationHeaderFile</srcid><srcstatus/><internalId>715</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>257</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00231</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | CanNm_RxIndication
        Syntax
        void CanNm_RxIndication (PduIdType RxPduId, const PduInfoType* PduInfoPtr)
        Service ID [hex] | 0x42
        Sync/Async | Synchronous
        Reentrancy | Reentrant for different PduIds. Non reentrant for the same PduId.
        Parameters (in) | RxPduId | ID of the received PDU.
        PduInfoPtr | Contains the length (SduLength) of the received PDU, a pointer to a buffer (
        SduDataPtr) containing the PDU, and the MetaData related to this PDU.
        Parameters (inout) | None
        Parameters (out) | None
        Return value | None
        Description | Indication of a received PDU from a lower layer communication interface module.
        Available via | CanNm.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_1</srcid><srcstatus/><internalId>1459</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80002</srcid><srcstatus/><internalId>1478</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_PB_CanNmRxIndication</srcid><srcstatus/><internalId>1609</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_RxIndication</srcid><srcstatus/><internalId>1775</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1966</srcid><srcstatus/><internalId>992</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.RxIndicationTxConfirmationHeaderFile</srcid><srcstatus/><internalId>715</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>258</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00234</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | CanNm_MainFunction
        Syntax
        void CanNm_MainFunction (void)
        Service ID [hex] | 0x13
        Description | Main function of the CanNm which processes the algorithm describes in that
        document.
        Available via | SchM_CanNm.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0137</srcid><srcstatus/><internalId>1732</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1780</srcid><srcstatus/><internalId>978</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>259</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00237</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The CanNm module shall provide the periodic transmission mode. In this transmission mode the
        CanNm module shall send Network Management PDUs periodically.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0111</srcid><srcstatus/><internalId>1592</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1722</srcid><srcstatus/><internalId>1199</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>260</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00238</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The CanNm module shall optionally provide the periodic transmission mode with bus load
        reduction. In this transmission mode the CanNm module shall transmit Network Management PDUs
        due to a specific algorithm.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0126</srcid><srcstatus/><internalId>1764</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1618</srcid><srcstatus/><internalId>1185</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>261</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00244</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The CanNm module shall reject the execution of a service called with an invalid parameter and
        shall inform the DET.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32008</srcid><srcstatus/><internalId>1503</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32009</srcid><srcstatus/><internalId>1504</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_DETchecks_ConfirmPnAvailability</srcid><srcstatus/><internalId>1509</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_299</srcid><srcstatus/><internalId>825</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_450</srcid><srcstatus/><internalId>839</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_545</srcid><srcstatus/><internalId>849</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_617</srcid><srcstatus/><internalId>857</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_686</srcid><srcstatus/><internalId>865</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_760</srcid><srcstatus/><internalId>873</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_849</srcid><srcstatus/><internalId>882</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_946</srcid><srcstatus/><internalId>892</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_952</srcid><srcstatus/><internalId>893</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_980</srcid><srcstatus/><internalId>896</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1033</srcid><srcstatus/><internalId>901</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1039</srcid><srcstatus/><internalId>902</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1066</srcid><srcstatus/><internalId>905</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1136</srcid><srcstatus/><internalId>911</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1142</srcid><srcstatus/><internalId>912</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1224</srcid><srcstatus/><internalId>921</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1232</srcid><srcstatus/><internalId>922</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1314</srcid><srcstatus/><internalId>932</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1399</srcid><srcstatus/><internalId>941</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1405</srcid><srcstatus/><internalId>942</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1490</srcid><srcstatus/><internalId>950</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1496</srcid><srcstatus/><internalId>951</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1502</srcid><srcstatus/><internalId>952</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1573</srcid><srcstatus/><internalId>958</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1620</srcid><srcstatus/><internalId>965</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1714</srcid><srcstatus/><internalId>973</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1721</srcid><srcstatus/><internalId>974</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1907</srcid><srcstatus/><internalId>988</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1996</srcid><srcstatus/><internalId>996</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2008</srcid><srcstatus/><internalId>997</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2253</srcid><srcstatus/><internalId>1016</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2262</srcid><srcstatus/><internalId>1018</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2271</srcid><srcstatus/><internalId>1020</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2426</srcid><srcstatus/><internalId>1032</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2488</srcid><srcstatus/><internalId>1039</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations><ruleid>WRN.impl.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>262</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00245</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Module | Header File | Imported Type
        ComStack_Types | ComStack_Types.h | NetworkHandleType
        ComStack_Types.h | PNCHandleType
        ComStack_Types.h | PduIdType
        ComStack_Types.h | PduInfoType
        ComStack_Types.h | PduLengthType
        Nm | NmStack_types.h | Nm_ModeType
        NmStack_types.h | Nm_StateType
        Std | Std_Types.h | Std_ReturnType
        Std_Types.h | Std_VersionInfoType
      </description>
      <comment>
        This requirement is informational only.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>263</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00246</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The configuration parameter CanNmTimeoutTime shall determine the AUTOSAR CanNm timing parameter
        NM-Timeout Time.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/src/CanNm_Cfg.c_92</srcid><srcstatus/><internalId>755</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>264</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00247</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The configuration parameter CanNmRepeatMessageTime shall determine the AUTOSAR CanNm timing
        parameter Repeat Message Time.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/src/CanNm_Cfg.c_94</srcid><srcstatus/><internalId>756</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>265</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00248</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The configuration parameter CanNmWaitBusSleepTime shall determine the AUTOSAR CanNm timing
        parameter Wait Bus-Sleep Time.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/src/CanNm_Cfg.c_96</srcid><srcstatus/><internalId>757</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>266</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00249</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The configuration parameter CanNmRemoteSleepIndTime shall determine the AUTOSAR CanNm timing
        parameter Remote Sleep Indication Time.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/src/CanNm_Cfg.c_98</srcid><srcstatus/><internalId>758</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>267</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00253</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Caveats of CanNm_Init: The function CanNm_Init has to be called after initialization of the
        CanIf.
      </description>
      <comment>
        This requirement is not applicable. It is a requirement for the system
        designer/integrator.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>268</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00254</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Caveats of CanNm_PassiveStartUp: The CanNm module is initialized correctly.
      </description>
      <comment>
        This requirement is not applicable. It is a requirement for the other
        modules.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>269</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00255</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The function CanNm_NetworkRequest shall change the Network state to 'requested'
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32053</srcid><srcstatus/><internalId>1579</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32030</srcid><srcstatus/><internalId>1580</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_569</srcid><srcstatus/><internalId>851</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>270</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00256</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Caveats of CanNm_NetworkRequest: The CanNm module is initialized correctly.
      </description>
      <comment>
        This requirement is not applicable. It is a requirement for the other
        modules.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>271</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00257</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Configuration of CanNm_NetworkRequest: Optional (Only available if CanNmPassiveModeEnabled is
        not defined)
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_520</srcid><srcstatus/><internalId>845</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>272</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00259</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Caveats of CanNm_NetworkRelease: The CanNm module is initialized correctly.
      </description>
      <comment>
        This requirement is not applicable. It is a requirement for the other
        modules.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>273</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00260</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Configuration of CanNm_NetworkRelease: Optional (Only available if CanNmPassiveModeEnabled is
        not defined)
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_663</srcid><srcstatus/><internalId>861</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>274</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00261</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Caveats of CanNm_DisableCommunication: The CanNm module is initialized correctly.
      </description>
      <comment>
        This requirement is not applicable. It is a requirement for the other
        modules.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>275</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00262</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Configuration of CanNm_DisableCommunication: Optional (Only available if CanNmComControlEnabled
        is set to TRUE)
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_736</srcid><srcstatus/><internalId>869</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>276</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00263</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Caveats of CanNm_EnableCommunication: The CanNm module is initialized correctly.
      </description>
      <comment>
        This requirement is not applicable. It is a requirement for the other
        modules.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>277</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00264</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Configuration of CanNm_EnableCommunication: Optional (Only available if CanNmComControlEnabled
        is set to TRUE)
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_825</srcid><srcstatus/><internalId>877</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>278</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00265</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Caveats of CanNm_SetUserData: The CanNm module is initialized correctly.
      </description>
      <comment>
        This requirement is not applicable. It is a requirement for the other
        modules.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>279</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00266</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Configuration of CanNm_SetUserData: Optional (Only available if CanNmUserDataEnabled is set to
        TRUE and CanNmPassiveModeEnabled is not defined)
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_917</srcid><srcstatus/><internalId>887</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>280</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00267</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Caveats of CanNm_GetUserData: The CanNm module is initialized correctly.
      </description>
      <comment>
        This requirement is not applicable. It is a requirement for the other
        modules.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>281</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00268</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Configuration of CanNm_GetUserData: Optional (Only available if CanNmUserDataEnabled is set to
        TRUE)
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1007</srcid><srcstatus/><internalId>897</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>282</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00269</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Caveats of CanNm_GetNodeIdentifier: The CanNm module is initialized correctly.
      </description>
      <comment>
        This requirement is not applicable. It is a requirement for the other
        modules.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>283</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00271</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Caveats of CanNm_GetLocalNodeIdentifier: The CanNm module is initialized correctly.
      </description>
      <comment>
        This requirement is not applicable. It is a requirement for the other
        modules.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>284</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00273</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Caveats of CanNm_RepeatMessageRequest: The CanNm module is initialized correctly.
      </description>
      <comment>
        This requirement is not applicable. It is a requirement for the other
        modules.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>285</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00275</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Caveats of CanNm_GetPduData: The CanNm module is initialized correctly.
      </description>
      <comment>
        This requirement is not applicable. It is a requirement for the other
        modules.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>286</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00277</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Caveats of CanNm_GetState: The CanNm module is initialized correctly.
      </description>
      <comment>
        This requirement is not applicable. It is a requirement for the other
        modules.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>287</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00279</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Caveats of CanNm_RequestBusSynchronization: The CanNm module is initialized correctly.
      </description>
      <comment>
        This requirement is not applicable. It is a requirement for the other
        modules.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>288</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00280</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Configuration of CanNm_RequestBusSynchronization: Optional (Only available if
        CanNmBusSynchronizationEnabled is set to TRUE) and CanNmPassiveModeEnabled is not defined.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1593</srcid><srcstatus/><internalId>960</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>289</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00281</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Caveats of CanNm_CheckRemoteSleepIndication: The CanNm module is initialized correctly.
      </description>
      <comment>
        This requirement is not applicable. It is a requirement for the other
        modules.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>290</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00282</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Configuration of CanNm_CheckRemoteSleepIndication: Optional (Only available if
        CanNmRemoteSleepIndEnabled is set to TRUE)
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1684</srcid><srcstatus/><internalId>969</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>291</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00283</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Caveats of CanNm_TxConfirmation:
        The call context is either on interrupt level (interrupt mode) or on task level (polling mode)
        This callback service is re-entrant for multiple CAN controller usage.
        The CanNm module is initialized correctly.
      </description>
      <comment>
        This requirement is not applicable. It is a requirement for the other
        modules.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>292</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00284</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Configuration of CanNm_TxConfirmation: Optional (Only available if CanNmPassiveModeEnabled and
        CanNmImmediateTxConfEnabled are set to FALSE)
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact. Passive mode is already considered by the current implementation
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1863</srcid><srcstatus/><internalId>982</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>293</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00285</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Caveats of CanNm_RxIndication:
        Until this service returns the CAN Interface will not access canSduPtr. The canSduPtr is only
        valid and can be used by upper layers until the indication returns. CAN Interface guarantees
        that the number of configured bytes for this canNmRxPduId is valid. The call context is either
        on interrupt level (interrupt mode) or on task level (polling mode). This callback service is
        re-entrant for multiple CAN controller usage.
        The CanNm module is initialized correctly.
      </description>
      <comment>
        This requirement is not applicable. It is a requirement for the other
        modules.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>294</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00295</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The service CanNm_EnableCommunication shall return E_NOT_OK, if the current mode is not Network
        Mode.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0115</srcid><srcstatus/><internalId>1737</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_899</srcid><srcstatus/><internalId>886</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>295</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00305</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        ComStack_Types.h shall be included. Note: The following header files are indirectly included by
        ComStack_Types.h
        Std_Types.h (for AUTOSAR standard types)
        Platform_Types.h (for platform specific types)
        Compiler.h (for compiler specific language extensions)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/CanNm_Cbk.h_7</srcid><srcstatus/><internalId>790</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/CanNm_Int.h.m4_27</srcid><srcstatus/><internalId>793</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>296</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00307</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Nm.h shall be included for CanNm callbacks to the Generic Network Management Interface.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.HeaderFileNameChanged</srcid><srcstatus/><internalId>693</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>297</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00308</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Det.h shall be included for interfacing the Default Error Tracer.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_67</srcid><srcstatus/><internalId>817</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_Hsm.c_78</srcid><srcstatus/><internalId>1070</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_47</srcid><srcstatus/><internalId>1074</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>298</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00309</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        NmStack_Types.h shall be included for common network management types.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/CanNm_Api.h_19</srcid><srcstatus/><internalId>786</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/CanNm_Int.h.m4_21</srcid><srcstatus/><internalId>792</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>299</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00312</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        CanIf.h shall be included for interfacing the CanIf.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_57</srcid><srcstatus/><internalId>815</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_40</srcid><srcstatus/><internalId>1072</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>300</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00314</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the Network Mode is entered from Bus-Sleep, by default, the CanNm module shall enter the
        Repeat Message State.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32027</srcid><srcstatus/><internalId>1576</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32019</srcid><srcstatus/><internalId>1577</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_State_Transitions_Multicore_1</srcid><srcstatus/><internalId>1664</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1112</srcid><srcstatus/><internalId>1141</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>301</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00315</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the Network Mode is entered from Prepare Bus-Sleep Mode, by default, the CanNm module
        shall enter the Repeat Message State.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32020</srcid><srcstatus/><internalId>1578</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32043</srcid><srcstatus/><internalId>1586</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1366</srcid><srcstatus/><internalId>1166</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1378</srcid><srcstatus/><internalId>1167</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.NET_REQ_STATUS_CHANGED_PREPARE_BUS_SLEEP_MODE</srcid><srcstatus/><internalId>1439</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.RX_INDICATION_PREPARE_BUS_SLEEP_MODE</srcid><srcstatus/><internalId>1440</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>302</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00324</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        API Function | Header File | Description
        Det_ReportRuntimeError | Det.h | Service to report runtime errors. If a callout has been
        configured then this callout shall be called.
        Nm_BusSleepMode | Nm.h | Notification that the network management has entered Bus-Sleep Mode.
        Nm_NetworkMode | Nm.h | Notification that the network management has entered Network Mode.
        Nm_NetworkStartIndication | Nm.h | Notification that a NM-message has been received in the Bus-
        Sleep Mode, what indicates that some nodes in the network have already entered the Network Mode.
        Nm_PrepareBusSleepMode | Nm.h | Notification that the network management has entered Prepare
        Bus-Sleep Mode.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32022</srcid><srcstatus/><internalId>1588</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_5</srcid><srcstatus/><internalId>1671</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0092</srcid><srcstatus/><internalId>1749</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2121</srcid><srcstatus/><internalId>1004</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2911</srcid><srcstatus/><internalId>1056</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_3046</srcid><srcstatus/><internalId>1058</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_285</srcid><srcstatus/><internalId>1079</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>303</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00325</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        API Function | Header File | Description
        CanIf_Transmit | CanIf.h | Requests transmission of a PDU.
        CanSM_TxTimeoutException | CanSM_CanIf.h | This function shall notify the CanSM module, that
        the CanNm has detected for the affected partial CAN network a tx timeout exception, which shall
        be recovered within the respective network state machine of the CanSM module.
        Det_ReportError | Det.h | Service to report development errors.
        Nm_CarWakeUpIndication | Nm.h | This function is called by a &lt;Bus&gt;Nm to indicate reception of a
        CWU request.
        Nm_CoordReadyToSleepCancellation | Nm.h | Cancels an indication, when the NM Coordinator Sleep
        Ready bit in the Control Bit Vector is set back to 0.
        Nm_CoordReadyToSleepIndication | Nm.h | Sets an indication, when the NM Coordinator Sleep Ready
        bit in the Control Bit Vector is set
        Nm_ForwardSynchronizedPncShutdown | Nm.h | Notification that the network management has
        received a PN shutdown message on a particular NM-channel. This is used to grant a nearly
        synchronized PNC shutdown across the entire PN topology. Tags:atp.Status=draft
        Nm_PduRxIndication | Nm.h | Notification that a NM message has been received.
        Nm_RemoteSleepCancellation | Nm.h | Notification that the network management has detected that
        not all other nodes on the network are longer ready to enter Bus-Sleep Mode.
        Nm_RemoteSleepIndication | Nm.h | Notification that the network management has detected that
        all other nodes on the network are ready to enter Bus-Sleep Mode.
        Nm_RepeatMessageIndication | Nm.h | Service to indicate that an NM message with set Repeat
        Message Re- quest Bit has been received. This is needed for node detection and the Dynamic PNC-
        to-channel-mapping feature.
        Nm_StateChangeNotification | Nm.h | Notification that the state of the lower layer &lt;BusNm&gt; has
        changed.
        Nm_TxTimeoutException | Nm.h | Service to indicate that an attempt to send an NM message failed.
        PduR_CanNmRxIndication | PduR_CanNm.h | Indication of a received PDU from a lower layer
        communication interface module.
        PduR_CanNmTriggerTransmit | PduR_CanNm.h | Within this API, the upper layer module (called
        module) shall check whether the available data fits into the buffer size reported by PduInfoPtr-
        SduLength. If it fits, it shall copy its data into the buffer provided by PduInfoPtr-&gt;
        SduDataPtr and update the length of the actual copied data in PduInfoPtr-&gt;SduLength. If not, it
        returns E_NOT_OK without changing PduInfoPtr.
        PduR_CanNmTxConfirmation | PduR_CanNm.h | The lower layer communication interface module
        confirms the transmission of a PDU, or the failure to transmit a PDU.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_EIRA_ERA_Calc_FilterAlgo</srcid><srcstatus/><internalId>1510</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_PnEnabled_PNIBit_1</srcid><srcstatus/><internalId>1512</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_NmMessageTxTimeout</srcid><srcstatus/><internalId>1549</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_TxTimeoutCanIfTransmitFails</srcid><srcstatus/><internalId>1550</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0109</srcid><srcstatus/><internalId>1591</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_13</srcid><srcstatus/><internalId>1677</internalId></linkedfrom><linkedfrom><srcid>TS_CANNM_CanNmPnResetTime_504PNCs</srcid><srcstatus/><internalId>1726</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0137</srcid><srcstatus/><internalId>1732</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0144</srcid><srcstatus/><internalId>1733</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0145</srcid><srcstatus/><internalId>1734</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0100</srcid><srcstatus/><internalId>1741</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0127</srcid><srcstatus/><internalId>1744</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Nm_RepeatMsgIndication_1</srcid><srcstatus/><internalId>1761</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0126</srcid><srcstatus/><internalId>1764</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0128</srcid><srcstatus/><internalId>1765</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_BusSynchronization</srcid><srcstatus/><internalId>1773</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.APIMissingNm_CoordReadyToSleepCancellation</srcid><srcstatus/><internalId>694</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations><ruleid>WRN.swuts.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>304</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00326</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        PduR_CanNm.h shall be included if COM user data support is enabled.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_61</srcid><srcstatus/><internalId>816</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>305</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00327</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmComUserDataSupport is enabled the API CanNm_SetUserData shall not be available.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_917</srcid><srcstatus/><internalId>887</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>306</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00328</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmComUserDataSupport is enabled and NM-PDU is not configured for triggered transmission
        in CanIf (CanIfTxPduTriggerTransmit set to FALSE) CanNm shall collect the NM User Data from the
        referenced NM I-PDU by calling PduR_CanNmTriggerTransmit and combine the user data with the
        further NM bytes each time before it requests the transmission of the corresponding NM PDU.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_BusSynchronization</srcid><srcstatus/><internalId>1773</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_TriggerTransmit</srcid><srcstatus/><internalId>1774</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2376</srcid><srcstatus/><internalId>1025</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>307</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00329</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmComUserDataSupport is enabled and CanNm_TxConfirmation is called CanNm shall forward
        the transmission confirmation result to PduR by calling PduR_CanNmTxConfirmation.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_ReliableTxConfirmation_001</srcid><srcstatus/><internalId>1707</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_ReliableTxConfirmation_003</srcid><srcstatus/><internalId>1709</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_TriggerTransmit</srcid><srcstatus/><internalId>1774</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1925</srcid><srcstatus/><internalId>990</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>308</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00330</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmComUserDataSupport or CanNmGlobalPnSupport is enabled the CanNm implementation shall
        provide an API CanNm_Transmit.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.CanNm_TransmitAvailability</srcid><srcstatus/><internalId>709</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>309</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00331</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | CanNm_Transmit
        Syntax
        Std_ReturnType CanNm_Transmit (PduIdType TxPduId, const PduInfoType* PduInfoPtr)
        Service ID [hex] | 0x49
        Sync/Async | Synchronous
        Reentrancy | Reentrant for different PduIds. Non reentrant for the same PduId.
        Parameters (in) | TxPduId | Identifier of the PDU to be transmitted
        PduInfoPtr | Length of and pointer to the PDU data and pointer to MetaData.
        Parameters (inout) | None
        Parameters (out) | None
        Return value | Std_ReturnType | E_OK: Transmit request has been accepted.E_NOT_OK: Transmit
        request has not been accepted.
        Description | Requests transmission of a PDU.
        Available via | CanNm.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_1</srcid><srcstatus/><internalId>1459</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80002</srcid><srcstatus/><internalId>1478</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Transmit</srcid><srcstatus/><internalId>1772</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2213</srcid><srcstatus/><internalId>1012</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>310</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00332</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmComUserDataSupport is enabled and the number of available user data bytes does not
        match to the length of the referenced I-PDU an error shall be reported at generation time.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.UserDataLength</srcid><srcstatus/><internalId>710</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>311</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00333</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmComUserDataSupport is enabled and if CanNm is in RepeatMessage state or NormalOperation
        state and if CanNm_Transmit() is called CanNm shall request an additional transmission of the
        NM PDU with the current user data.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00333.1</srcid><srcstatus/><internalId>419</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00333.2</srcid><srcstatus/><internalId>420</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>312</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00334</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When entering the Repeat Message State from Bus Sleep Mode or Prepare Bus Sleep Mode because of
        CanNm_NetworkRequest() (active wakeup) and if CanNmImmediateNmTransmissions is greater zero,
        the NM PDUs shall be transmitted using CanNmImmediateNmCycleTime as cycle time. The
        transmission of the first NM PDU shall be triggered as soon as possible. After the transmission
        the Message Cycle Timer shall be reloaded with CanNmImmediateNmCycleTime. The
        CanNmMsgCycleOffset shall not be applied in this case.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00334.1</srcid><srcstatus/><internalId>430</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00334.2</srcid><srcstatus/><internalId>431</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>313</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00335</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If NM PDUs shall be transmitted with CanNmImmediate-NmCycleTime  CanNm shall retry the
        transmission request in the next main function. Afterwards CanNm shall continue transmitting NM
        PDUs using the CanNmMsgCycleTime.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_ImmediateNmTrans_MsgCycOffZero</srcid><srcstatus/><internalId>1553</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_ImmediateNmTrans_3</srcid><srcstatus/><internalId>1777</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_ImmediateNmTrans_1</srcid><srcstatus/><internalId>1787</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1795</srcid><srcstatus/><internalId>1208</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>314</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00336</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When the CanNm module successfully receives a Network Management PDU (call of
        CanNm_RxIndication) in the Bus-Sleep Mode, the CanNm module shall report the error
        CANNM_E_NET_START_IND to the DET.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.NmPduReceiveInBussSleepDet</srcid><srcstatus/><internalId>695</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>315</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00338</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | CanNm_SetSleepReadyBit
        Syntax
        Std_ReturnType CanNm_SetSleepReadyBit (NetworkHandleType nmChannelHandle, boolean
        nmSleepReadyBit)
        Service ID [hex] | 0x17
        Sync/Async | Synchronous
        Reentrancy | Reentrant (but not for the same NM-channel)
        Parameters (in) | nmChannelHandle | Identification of the NM-channel
        nmSleepReadyBit | Value written to ReadySleep Bit in CBV
        Parameters (inout) | None
        Parameters (out) | None
        Return value | Std_ReturnType | E_OK: No errorE_NOT_OK: Writing of remote sleep indication bit
        has failed
        Description | Set the NM Coordinator Sleep Ready bit in the Control Bit Vector
        Available via | CanNm.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.CoordinatorSyncSupport</srcid><srcstatus/><internalId>682</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>316</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00339</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Caveats of CanNm_SetSleepReadyBit: The CanNm module is initialized correctly.
      </description>
      <comment>
        This requirement is not applicable. It is a requirement for the other
        modules.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>317</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00340</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Configuration of CanNm_SetSleepReadyBit: Optional (Only available if
        CanNmCoordinatorSyncSupport is set to TRUE)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.CoordinatorSyncSupport</srcid><srcstatus/><internalId>682</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>318</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00341</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmCoordinatorSyncSupport is set to TRUE and CanNm has entered Network Mode or called
        Nm_CoordReadyToSleepCancellation before it shall notify the Nm by calling
        Nm_CoordReadyToSleepIndication on the first reception of a NM PDU with the
        NmCoordinatorSleepReady bit  set to 1.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.CoordinatorSyncSupport</srcid><srcstatus/><internalId>682</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>319</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00342</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmCoordinatorSyncSupport is set to TRUE and the API CanNm_SetSleepReadyBit is called
        CanNm shall set the "NM Coordinator Sleep ready Bit" to the passed value and trigger a single
        Network Management PDU.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.CoordinatorSyncSupport</srcid><srcstatus/><internalId>682</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>320</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00344</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | CanNm_ConfirmPnAvailability
        Syntax
        void CanNm_ConfirmPnAvailability (NetworkHandleType nmChannelHandle)
        Service ID [hex] | 0x16
        Sync/Async | Synchronous
        Reentrancy | Reentrant (but not for the same NM-channel)
        Parameters (in) | nmChannelHandle | Identification of the NM-channel
        Parameters (inout) | None
        Parameters (out) | None
        Return value | None
        Description | Enables the PN filter functionality on the indicated NM channel. Availability:
        The API is only available if CanNmGlobalPnSupport is TRUE.
        Available via | CanNm.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_EIRA_ERA_Calc_FilterAlgo</srcid><srcstatus/><internalId>1510</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_PnFilter_MASK</srcid><srcstatus/><internalId>1523</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2404</srcid><srcstatus/><internalId>1028</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>321</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00345</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Caveats of CanNm_ConfirmPnAvailability: The CanNm module is initialized correctly.
      </description>
      <comment>
        This requirement is not applicable. It is a requirement for the other
        modules.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>322</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00346</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Configuration of CanNm_ConfirmPnAvailability: Optional (Only available if CanNmGlobalPnSupport
        is set to TRUE)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2404</srcid><srcstatus/><internalId>1028</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>323</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00401</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the CanNm performs a state change from Bus Sleep Mode or Prepare Bus Sleep Mode to Network
        Mode due to a call to CanNm_NetworkRequest (i.e. due to an active wakeup) and
        CanNmActiveWakeupBitEnabled is TRUE, the CanNm shall set the ActiveWakeupBit in the CBV.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00401.1</srcid><srcstatus/><internalId>454</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00401.2</srcid><srcstatus/><internalId>455</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>324</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00402</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the CanNm module leaves the Network Mode and CanNmActiveWakeupBitEnabled is TRUE, the CanNm
        module shall clear the ActiveWakeupBit in the CBV.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_ActiveWakeupBit_1</srcid><srcstatus/><internalId>1653</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1352</srcid><srcstatus/><internalId>1165</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>325</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00403</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        During initialization CanNm shall disable the NM-PDU filter algorithm on all networks where
        CanNmPnEnabled is TRUE.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PnMessageFilteringEnteringBussSleep</srcid><srcstatus/><internalId>696</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>326</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00404</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the CanSm calls CanNm_ConfirmPnAvailability the NM-PDU filter algorithm shall be enabled on
        the indicated channel.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_ConfirmPnAvailability_Not_Called</srcid><srcstatus/><internalId>1516</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2451</srcid><srcstatus/><internalId>1034</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>327</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00405</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The position of the Car Wakeup bit in the NM-PDU is defined by the configuration parameters
        CanNmCarWakeUpBytePosition and CanNmCarWakeUpBitPosition.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_CWU_Rx_Enabled_Filtering_Disabled</srcid><srcstatus/><internalId>1600</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_CWU_Rx_Enabled_Filtering_Enabled</srcid><srcstatus/><internalId>1601</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1453</srcid><srcstatus/><internalId>1295</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1481</srcid><srcstatus/><internalId>1297</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>328</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00406</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the Car Wakeup bit within any received NM-PDU is 1, CanNmCarWakeUpRxEnabled is TRUE, and
        CanNmCarWakeUpFilterEnabled is FALSE CanNm shall call Nm_CarWakeUpIndication and perform the
        standard Rx indication handling.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_CWU_Rx_Enabled_false</srcid><srcstatus/><internalId>1599</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_CWU_Rx_Enabled_Filtering_Disabled</srcid><srcstatus/><internalId>1600</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2649</srcid><srcstatus/><internalId>1044</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>329</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00407</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNm_GetPduData is called in the context of Nm_CarWakeUpIndication and if
        CannNmNodeDetectionEnabled or CanNmUserDataEnabled or CanNmNodeIdEnabled is set to TRUE CanNm
        shall return the PDU data of the PDU that causes the call of Nm_CarWakeUpIndication.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_CWU_Rx_Enabled_Filtering_Disabled</srcid><srcstatus/><internalId>1600</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_CWU_Rx_Enabled_Filtering_Enabled</srcid><srcstatus/><internalId>1601</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2135</srcid><srcstatus/><internalId>1005</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>330</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00408</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmCarWakeUpFilterEnabled is TRUE, the Car Wakeup bit within any received NM-PDU is 1,
        CanNmCarWakeUpRxEnabled is TRUE and the Node ID in the received NM-PDU is equal to
        CanNmCarWakeUpFilterNodeId the CanNm module shall call Nm_CarWakeUpIndication and perform the
        standard Rx Indication handling.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_CWU_Rx_Enabled_Filtering_Enabled</srcid><srcstatus/><internalId>1601</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2655</srcid><srcstatus/><internalId>1045</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>331</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00409</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the CanNmPnEnabled is FALSE, the CanNm shall not drop NM PDUs from further Rx Indication
        handling and the partial networking extensions shall be disabled.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_CanNmPnEnabled_False</srcid><srcstatus/><internalId>1524</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2139</srcid><srcstatus/><internalId>1006</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>332</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00410</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmPnEnabled is TRUE, the PNI bit in the received NM-PDU is 0 and
        CanNmAllNmMessagesKeepAwake is TRUE, the CanNm module shall not drop NM PDUs from further Rx
        Indication handling omitting the extensions for partial networking.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_AllMessageKeepAwake_True</srcid><srcstatus/><internalId>1511</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2139</srcid><srcstatus/><internalId>1006</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>333</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00411</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmPnEnabled is TRUE, the PNI bit in the received NM-PDU is 0 and
        CanNmAllNmMessagesKeepAwake is FALSE, the CanNm module shall ignore the received NM-PDU.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_AllMessageKeepAwake_False</srcid><srcstatus/><internalId>1513</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2139</srcid><srcstatus/><internalId>1006</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>334</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00412</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmPnEnabled is TRUE and the PNI bit in the received NM-PDU is 1, CanNm module shall
        process the Partial Networking Information of the NM-PDU as described in chapter [REF] NM PDU
        Filter Algorithm.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_EIRA_ERA_Calc_FilterAlgo</srcid><srcstatus/><internalId>1510</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_Schm_Call_Channel_Multicore_41</srcid><srcstatus/><internalId>1706</internalId></linkedfrom><linkedfrom><srcid>TS_CANNM_CanNmPnResetTime_504PNCs</srcid><srcstatus/><internalId>1726</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2033</srcid><srcstatus/><internalId>1000</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>335</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00413</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmPnEnabled is TRUE the CanNm module shall set the value of the transmitted PNI bit to 1.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_PnEnabled_PNIBit_1</srcid><srcstatus/><internalId>1512</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1458</srcid><srcstatus/><internalId>1177</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>336</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00414</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmPnEnabled is FALSE the CanNm module shall set the value of the transmitted PNI bit
        always to 0.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_PnDisable_PNIBit_0</srcid><srcstatus/><internalId>1652</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1455</srcid><srcstatus/><internalId>1176</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>337</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00415</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The NM-PDU filter algorithm shall evaluate the bytes of the received NM-PDU defined by
        CanNmPnInfoOffset (in bytes) starting from byte 0 and CanNmPnInfoLength (in bytes). This range
        is called PN Info Range.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_PN_RequestInfo_Chk</srcid><srcstatus/><internalId>1515</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_289</srcid><srcstatus/><internalId>739</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>338</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00416</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Every bit of the PN Info Range represents one Partial Network. If the bit is set to 1 the
        Partial Network is requested. If the bit is set to 0 there is no request for this PN.
      </description>
      <comment>
        This requirement is informational only. It is a general requirement,
        shall be tested by other requirements.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>339</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00417</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The filter algorithm shall compare (bitwise AND) the received PN information with the PN filter
        mask to detect if a relevant PN is requested or not. Each bit of the PN filter mask shall have
        the following meaning: 0 The PN request is irrelevant for the ECU. The communication stack of
        the ECU is not kept awake if this bit is set in a received NM-PDU. 1 The PN request is relevant
        for the ECU. The communication stack of the ECU is kept awake if this bit is set in a received
        NM-PDU.
      </description>
      <comment>
        This requirement is informational only. It is a general requirement,
        shall be tested by other requirements.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>340</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00419</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If at least one relevant PN is requested in the received NM-PDU the PDU shall not be dropped
        from further Rx Indication handling.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_PN_RequestInfo_Chk</srcid><srcstatus/><internalId>1515</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2582</srcid><srcstatus/><internalId>1043</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>341</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00420</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If no relevant PN is requested in the received NM-PDU and CanNmAllNmMessagesKeepAwake is FALSE
        the PDU shall be dropped from further processing.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_AllMessageKeepAwake_False</srcid><srcstatus/><internalId>1513</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2139</srcid><srcstatus/><internalId>1006</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>342</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00421</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If no relevant PN is requested in the received NM-PDU and CanNmAllNmMessagesKeepAwake is TRUE
        the PDU shall not be dropped from further Rx Indication handling.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_AllMessageKeepAwake_True</srcid><srcstatus/><internalId>1511</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2139</srcid><srcstatus/><internalId>1006</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>343</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00424</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmPnEiraCalcEnabled is TRUE CanNm shall provide the possibility to store external and
        internal requested PNs combined over all relevant channels (all CanNm channels where
        CanNmPnEnabled is TRUE). At initialization the values of all PNs shall be set to 0 (not
        requested)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_414</srcid><srcstatus/><internalId>834</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>344</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00426</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If
        CanNmPnEiraCalcEnabled is TRUE
        and a NM-PDU is received
        and PNs are requested within this message (bits set to 1)
        and the requested PNs are set to 1 within the configured PN filter mask
        then CanNm shall store the request information (value 1) for these PNs.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_EIRA_ERA_Calc_FilterAlgo</srcid><srcstatus/><internalId>1510</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2761</srcid><srcstatus/><internalId>1049</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>345</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00427</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If
        CanNmPnEiraCalcEnabled is TRUE
        and NM-PDU is beeing requested to send by CanNm
        and PNs are requested within this message (bits set to 1)
        and the requested PNs are set to 1 within the configured PN filter mask
        then CanNm shall store the request information (value 1) for these PNs.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_TX_EIRA_VERIFICATION</srcid><srcstatus/><internalId>1520</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2761</srcid><srcstatus/><internalId>1049</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>346</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00428</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmPnEiraCalcEnabled is TRUE CanNm shall provide a possibility to monitor for each PN if
        this PN is still externally or internally requested on at least one of the relevant channels.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_Rx_EIRA_ERA_Reset_Timer_Chk</srcid><srcstatus/><internalId>1514</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Tx_EIRA_Reset_Timer_Chk</srcid><srcstatus/><internalId>1521</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/CanNm_Int.h.m4_799</srcid><srcstatus/><internalId>810</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>347</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00429</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmPnEiraCalcEnabled is TRUE and a PN is requested by message reception or sending  the
        monitoring for this PN shall be restarted with respect to the CanNmPnResetTime.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_Rx_EIRA_ERA_Reset_Timer_Chk</srcid><srcstatus/><internalId>1514</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2766</srcid><srcstatus/><internalId>1050</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>348</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00431</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmPnEiraCalcEnabled is TRUE and a PN is not requested again within CanNmPnResetTime the
        corresponding stored value for this PN shall be set to not requested (value 0)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_EIRA_ERA_Calc_FilterAlgo</srcid><srcstatus/><internalId>1510</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2719</srcid><srcstatus/><internalId>1047</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>349</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00432</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmPnEiraCalcEnabled is TRUE and the stored value for a PN is set to requested or back to
        not requested  CanNm shall inform the upper layers by calling PduR_CanNmRxIndication() for the
        configured EIRA PDU (i.e. changed EIRA information shall be passed to COM)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00432.1</srcid><srcstatus/><internalId>449</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00432.2</srcid><srcstatus/><internalId>450</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00432.3</srcid><srcstatus/><internalId>451</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>350</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00435</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmPnEraCalcEnabled is TRUE CanNm shall provide the possibility to store external
        requested PNs on each relevant channel. At initialization the values of all PNs shall be set to
        0 (not requested)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_362</srcid><srcstatus/><internalId>832</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1473</srcid><srcstatus/><internalId>1178</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>351</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00437</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If
        CanNmPnEraCalcEnabled is TRUE
        and a NM-PDU is received
        and PNSR bit is 0
        and PNs are requested within this message (bits set to 1)
        and the requested PNs are set to 1 within the configured PN filter mask
        then CanNm shall store the request information (value 1) for these PNs.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2761</srcid><srcstatus/><internalId>1049</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_EIRA_ERA_Calc_FilterAlgo</srcid><srcstatus/><internalId>1510</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_Schm_Call_Channel_Multicore_41</srcid><srcstatus/><internalId>1706</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>352</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00438</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmPnEraCalcEnabled is TRUE CanNm shall provide a possibility to monitor on each relevant
        channel and for each PN if this PN is still externally requested.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/CanNm_Int.h.m4_799</srcid><srcstatus/><internalId>810</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_Rx_EIRA_ERA_Reset_Timer_Chk</srcid><srcstatus/><internalId>1514</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>353</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00439</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmPnEraCalcEnabled is TRUE and a PN is requested by message reception  the monitoring for
        this PN shall be restarted with respect to the CanNmPnResetTime.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2766</srcid><srcstatus/><internalId>1050</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_Rx_EIRA_ERA_Reset_Timer_Chk</srcid><srcstatus/><internalId>1514</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>354</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00442</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmPnEraCalcEnabled is TRUE and a PN is not requested again within CanNmPnResetTime the
        corresponding stored value for this PN shall be set to not requested (value 0)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2719</srcid><srcstatus/><internalId>1047</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_EIRA_ERA_Calc_FilterAlgo</srcid><srcstatus/><internalId>1510</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_Schm_Call_Channel_Multicore_41</srcid><srcstatus/><internalId>1706</internalId></linkedfrom><linkedfrom><srcid>TS_CANNM_CanNmPnResetTime_504PNCs</srcid><srcstatus/><internalId>1726</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>355</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00443</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmPnEraCalcEnabled is TRUE and the stored value for a PN changes to requested or back to
        not requested  CanNm shall inform the upper layers by calling PduR_CanNmRxIndication() for the
        configured ERA PDU (i.e. changed ERA information shall be passed to COM)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00443.1</srcid><srcstatus/><internalId>468</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00443.2</srcid><srcstatus/><internalId>469</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>356</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00444</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNm_NetworkRequest is called, CanNmPnHandleMultipleNetworkRequests is TRUE and CanNm is in
        Ready Sleep State, Normal Operation State or Repeat Message State, CanNm shall change to or
        restart the Repeat Message State.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.SWS_CanNm_00454</srcid><srcstatus/><internalId>365</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>357</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00445</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmPnEiraCalcEnabled is TRUE and CanNmPnEraCalcEnabled is TRUE, the PN status information
        has to be stored separately for both, the EIRA and ERA information (compare SWS_CanNm_00435 and
        SWS_CanNm_00424)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1782</srcid><srcstatus/><internalId>1318</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>358</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00446</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmGlobalPnSupport is set to TRUE and NM Message Tx Timeout Timer has expired then CanNm
        shall call the function CanSM_TxTimeoutException.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.MessageTxTimeoutTimerDependency</srcid><srcstatus/><internalId>711</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>359</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00084</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmActiveWakeupBitEnabled
        Parent Container | CanNmChannelConfig
        Description | Enables/Disables the handling of the Active Wakeup Bit in the CanNm module.
        Multiplicity | 0..1
        Type | EcucBooleanParamDef
        Default value | false
        Post-Build Variant Multiplicity | false
        Post-Build Variant Value | false
        Multiplicity Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: local dependency: This parameter is only valid if
        CanNmPassiveModeEnabled is False.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_ReEnterNetworkModeActiveWakeupBit</srcid><srcstatus/><internalId>1534</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_259</srcid><srcstatus/><internalId>737</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PreCompile</srcid><srcstatus/><internalId>676</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>360</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00006</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If Normal Operation State is entered from Ready Sleep State the transmission of NM PDUs shall
        be started immediately.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.MsgCycleOffsetRStoNO</srcid><srcstatus/><internalId>688</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>361</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00348</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmCoordinatorSyncSupport is set to TRUE and CanNm called Nm_CoordReadyToSleepIndication
        and is still in Network Mode it shall notify the Nm by calling Nm_CoordReadyToSleepCancellation
        on the first reception of a NM PDU with the NmCoordinatorSleepReady bit  set to 0.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.CoordinatorSyncSupport</srcid><srcstatus/><internalId>682</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>362</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00447</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNm_ConfigType
        Kind | Structure
        Elements | implementation specific
        Type
        Comment
        Description | This type shall contain at least all parameters that are post-build able
        according to chapter 10.
        Available via | CanNm.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_var/xgen/CanNm.xgen_80</srcid><srcstatus/><internalId>1414</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>363</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00450</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmComUserDataSupport is enabled and PduR_CanNmTriggerTransmit returns E_NOT_OK, the NM
        shall use the last transmitted value for NmUserData.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.ReturnValuePduR_CanNmTriggerTransmit</srcid><srcstatus/><internalId>689</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>364</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00454</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmPnHandleMultipleNetworkRequests is set to TRUE CanNm_NetworkRequest shall trigger a
        state transition from Network Mode to Repeat Message state. If PDU transmission ability is
        enabled the NM PDUs shall be transmitted using CanNmImmediateNmCycleTime as cycle time. The
        transmission of the first NM PDU shall be triggered as soon as possible. After the transmission
        the Message Cycle Timer shall be reloaded with CanNmImmediateNmCycleTime. The
        CanNmMsgCycleOffset shall not be applied in this case.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_PN_SpontaneousTr_ReEnterRMS</srcid><srcstatus/><internalId>1525</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_PN_SpontaneousTr_ReEnterRMS2</srcid><srcstatus/><internalId>1526</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Timers_Com_Disable0</srcid><srcstatus/><internalId>1527</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32030</srcid><srcstatus/><internalId>1580</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_485</srcid><srcstatus/><internalId>1102</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.NET_REQ_STATUS_CHANGED_NETWORK_MODE</srcid><srcstatus/><internalId>1441</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00444</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>357</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>365</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00195</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When a CanNm service with an invalid PDU ID is called, the called function shall not be
        executed and it shall return E_NOT_OK to the calling function if applicable. If development
        error detection is enabled (CanNmDevErrorDetect is set to TRUE) the corresponding error
        CANNM_E_INVALID_PDUID shall be reported to DET.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00316.3</srcid><srcstatus/><internalId>483</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>366</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00316</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Type of error | Related error code | Error value
        API service used without module initialization | CANNM_E_UNINIT | 0x01
        API service called with wrong channel handle | CANNM_E_INVALID_CHANNELCanNm.
        CANNM_E_INVALID_CHANNEL | 0x02
        API service called with wrong PDU-ID | CANNM_E_INVALID_PDUID | 0x03
        CanNm initialization has failed, e.g. selected configuration set doesn't exist. |
        CANNM_E_INIT_FAILED | 0x05
        Null pointer has been passed as an argument | CANNM_E_PARAM_POINTER
        0x12
        DeInit API service called when not all CAN networks are in Bus Sleep mode |
        CANNM_E_NOT_IN_BUS_SLEEP | 0x13
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00316.1</srcid><srcstatus/><internalId>481</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00316.2</srcid><srcstatus/><internalId>482</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00316.3</srcid><srcstatus/><internalId>483</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00316.4</srcid><srcstatus/><internalId>484</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00316.5</srcid><srcstatus/><internalId>485</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.UninitErrorName</srcid><srcstatus/><internalId>701</internalId></linkedfrom><linkedfrom><srcid>dev.CanNm.PointerParameterErrorName</srcid><srcstatus/><internalId>702</internalId></linkedfrom><linkedfrom><srcid>dev.CanNm.NotInBusSleepErrorName</srcid><srcstatus/><internalId>703</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>367</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00086</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmGlobalPnSupport
        Parent Container | CanNmGlobalConfig
        Description | Pre-processor switch for enabling partial networking support globally.
        Multiplicity | 1
        Type | EcucBooleanParamDef
        Default value | false
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | All Variants
        Link time
        Post-build time
        Scope / Dependency | scope: local
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_604</srcid><srcstatus/><internalId>1244</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>368</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00350</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmComUserDataSupport is enabled CanNm shall collect the NM User Data from the referenced
        NM I-PDU by calling PduR_CanNmTriggerTransmit and combine the user data with the further NM
        bytes within the call of CanNm_TriggerTransmit.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.UnsupportedFunctionalities</srcid><srcstatus/><internalId>708</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>369</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00351</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        The function CanNm_TriggerTransmit shall copy the NM PDU data of the according NM PDU requested
        by TxPduId
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.UnsupportedFunctionalities</srcid><srcstatus/><internalId>708</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>370</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00352</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection for the CanNm module is enabled: The function CanNm_DeInit shall
        raise the error CANNM_E_NOT_IN_BUS_SLEEP if not all CAN networks are in Bus Sleep mode.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.UnsupportedFunctionalities</srcid><srcstatus/><internalId>708</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>371</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_91001</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | CanNm_TriggerTransmit
        Syntax
        Std_ReturnType CanNm_TriggerTransmit (PduIdType TxPduId, PduInfoType* PduInfoPtr)
        Service ID [hex] | 0x41
        Sync/Async | Synchronous
        Reentrancy | Reentrant for different PduIds. Non reentrant for the same PduId.
        Parameters (in) | TxPduId | ID of the SDU that is requested to be transmitted.
        Parameters (inout) | PduInfoPtr | Contains a pointer to a buffer (SduDataPtr) to where the SDU
        data shall be copied, and the available buffer size in SduLengh. On return, the service will
        indicate the length of the copied SDU data in SduLength.
        Parameters (out) | None
        Return value | Std_ReturnType | E_OK: SDU has been copied and SduLength indicates the number of
        copied bytes.E_NOT_OK: No SDU data has been copied. PduInfoPtr must not be used since it may
        contain a NULL pointer or point to invalid data.
        Description | Within this API, the upper layer module (called module) shall check whether the
        available data fits into the buffer size reported by PduInfoPtr-&gt;SduLength. If it fits, it
        shall copy its data into the buffer provided by PduInfoPtr-&gt;SduDataPtr and update the length of
        the actual copied data in PduInfoPtr-&gt;SduLength. If not, it returns E_NOT_OK without changing
        PduInfoPtr.
        Available via | CanNm.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.UnsupportedFunctionalities</srcid><srcstatus/><internalId>708</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>372</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_91002</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | CanNm_DeInit
        Syntax
        void CanNm_DeInit (void)
        Service ID [hex] | 0x10
        Sync/Async | Synchronous
        Reentrancy | Non Reentrant
        Parameters (in) | None
        Parameters (inout) | None
        Parameters (out) | None
        Return value | None
        Description | De-initializes the CanNm module.
        Available via | CanNm.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.UnsupportedFunctionalities</srcid><srcstatus/><internalId>708</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>373</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_NA_0</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        This specification item references requirements that are not applicable, because CanNm has no
        interdepencies to SW Components.
      </description>
      <comment>
        This requirement is informational only.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>374</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_NA_1</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        This specification item references requirements that are not applicable, because CanNm does not
        implement any interrupts, is not a driver or MCAL abstraction layer or has any direct access to
        OS.
      </description>
      <comment>
        This requirement is informational only.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>375</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_NA_2</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        This specification item references requirements that are not applicable, because CanNm does not
        influence sequence of module initialization.
      </description>
      <comment>
        This requirement is informational only.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>376</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_NA_3</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        This specification item references requirements that are not applicable, because BSW module
        description template is not part of the CanNm SWS.
      </description>
      <comment>
        This requirement is informational only.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>377</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_NA_4</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        This specification item references requirements that are not applicable, because CanNm does not
        share any data with other BSW.
      </description>
      <comment>
        This requirement is informational only.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>378</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_NA_5</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        This specification item references requirements that are not applicable, because CanNm does not
        propagate data through different layers.
      </description>
      <comment>
        This requirement is informational only.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>379</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_NA_6</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        This specification item references requirements that are not applicable, because CanNm does not
        have any shutdown functionality.
      </description>
      <comment>
        This requirement is informational only.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>380</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_NA_7</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        This specification item references requirements that are not applicable, because CanNm does not
        report any DEM errors
      </description>
      <comment>
        This requirement is informational only.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>381</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_NA_8</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        This specification item references requirements that are not applicable, because it is no
        requirement against CanNm SWS or only against ECUC elements.
      </description>
      <comment>
        This requirement is informational only.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>382</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00088</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmNodeDetectionEnabled
        Parent Container | CanNmChannelConfig
        Description | Precompile time switch to enable the node detection feature.
        Multiplicity | 1
        Type | EcucBooleanParamDef
        Default value
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: ECU dependency: Only valid if CanNmNodeIdEnabled is set to TRUE If
        CanNmPassiveModeEnabled == True then CanNmNodeDetection = False
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_209</srcid><srcstatus/><internalId>732</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1379</srcid><srcstatus/><internalId>1289</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PreCompile</srcid><srcstatus/><internalId>676</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>383</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00089</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmRepeatMsgIndEnabled
        Parent Container | CanNmChannelConfig
        Description | Enable/disable the notification that a RepeatMessageRequest bit has been received.
        Multiplicity | 1
        Type | EcucBooleanParamDef
        Default value
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: ECU dependency: CanNmRepeatMsgIndEnabled = FALSE if
        CanNmPassiveModeEnabled == TRUE or (CanNmNodeDetectionEnabled == FALSE &amp;&amp;
        CanNmDynamicPncToChannelMappingEnabled == FALSE). CanNmRepeatMsgIndEnabled = TRUE if
        CanNmDynamicPncToChannelMappingEnabled == TRUE.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_202</srcid><srcstatus/><internalId>731</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1308</srcid><srcstatus/><internalId>1285</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PreCompile</srcid><srcstatus/><internalId>676</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>384</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00090</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmNodeIdEnabled
        Parent Container | CanNmChannelConfig
        Description | Pre-processor switch for enabling the source node identifier.
        Multiplicity | 1
        Type | EcucBooleanParamDef
        Default value
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: ECU dependency: calculationFormula = Equal(NmNodeIdEnabled)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1270</srcid><srcstatus/><internalId>1282</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PreCompile</srcid><srcstatus/><internalId>676</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>385</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00091</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        When CanNm_GetState is called CanNm shall return the current NM state and mode.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1527</srcid><srcstatus/><internalId>954</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_DET_OFF_NotValidCfg</srcid><srcstatus/><internalId>1568</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_DET_OFF_ValidCfg</srcid><srcstatus/><internalId>1569</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32050</srcid><srcstatus/><internalId>1643</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>386</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00317</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Type of error | Related error code | Error value
        Reception of NM PDUs in Bus-Sleep Mode. | CANNM_E_NET_START_IND |
        0x04
        NM-Timeout Timer has abnormally expired outside of the Ready Sleep State; it may happen: (1)
        because of Bus-Off state,(2)if some ECU requests bus communication or node detection shortly
        before the NM-Timeout Timer expires so that a Network Management PDU can not be transmitted in
        time; this race condition applies to event-triggered systems | CANNM_E_NETWORK_TIMEOUTCanNm.
        CANNM_E_NETWORK_TIMEOUT | 0x11
        A NM message with PN Shutdown Request Bit was received on a channel that is actively
        coordinated by the ComM PNC Gateway. Tags:atp.Status=draft |
        CANNM_E_INVALID_PN_SYNC_SHUTDOWN_REQUEST | 0x20
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00317.1</srcid><srcstatus/><internalId>486</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00317.2</srcid><srcstatus/><internalId>487</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00317.3</srcid><srcstatus/><internalId>488</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>387</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00087</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Module Name | CanNm
        Module Description | Configuration Parameters for the Can Nm module.
        Post-Build Variant Support | true
        Supported Config Variants | VARIANT-LINK-TIME, VARIANT-POST-BUILD, VARIANT-PRE-COMPILE
        Included containers: "CanNm_x_Included_Containers"
        Included Containers
        Container Name | Multiplicity | Scope / Dependency
        CanNmGlobalConfig | 1 | This container contains the global configuration parameter of the CanNm.
        The parameters and the parameters of the sub containers shall be mapped to the C data type
        CanNm_ConfigType (for parameters where it is possible) which is passed to the CanNm_Init
        function.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_21</srcid><srcstatus/><internalId>1212</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>388</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00092</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmStayInPbsEnabled
        Parent Container | CanNmChannelConfig
        Description | If this parameter is disabled Prepare Bus-Sleep Mode is left after
        CanNmWaitBusSleepTime. If this parameter is enabled Prepare Bus-Sleep Mode can only be left if
        ECU is powered off or any restart reason applies.
        Multiplicity | 1
        Type | EcucBooleanParamDef
        Default value | false
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: local
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.CanNmStayInPbsEnabled</srcid><srcstatus/><internalId>685</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1347</srcid><srcstatus/><internalId>1287</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>389</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00093</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmDynamicPncToChannelMappingEnabled
        Parent Container | CanNmChannelConfig
        Description | Channel-specific parameter to enable the dynamic PNC-to-channel-mapping feature.
        False: Dynamic PNC-to-channel-mapping is disabledTrue: Dynamic PNC-to-channel-mapping is
        enabled Tags: atp.Status=draft
        Multiplicity | 0..1
        Type | EcucBooleanParamDef
        Default value | false
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time
        Scope / Dependency | scope: ECU dependency: Shall only be TRUE if
        CanNmDynamicPncToChannelMappingSupport is TRUE
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1617</srcid><srcstatus/><internalId>1305</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PartianlNetworkLearning</srcid><srcstatus/><internalId>683</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>390</internalId></specobject>
    <specobject>
      <id>CanNm.ECUC_CanNm_00094</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | CanNmDynamicPncToChannelMappingSupport
        Parent Container | CanNmGlobalConfig
        Description | Precompile time switch to enable the dynamic PNC-to-channel-mapping handling.
        False: Dynamic PNC-to-channel-mapping is disabledTrue: Dynamic PNC-to-channel-mapping is
        enabled Tags: atp.Status=draft
        Multiplicity | 1
        Type | EcucBooleanParamDef
        Default value
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | All Variants
        Link time
        Post-build time
        Scope / Dependency | scope: ECU
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_573</srcid><srcstatus/><internalId>1242</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PartianlNetworkLearning</srcid><srcstatus/><internalId>683</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>391</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00380</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If function CanNm_PnLearningRequest is called on a channel where
        CanNmDynamicPncToChannelMappingEnabled is set to TRUE and CanNm is in the Network Mode the
        CanNm module shall set the Repeat Message Bit and the Partial Network Learning Bit in the CBV
        to 1 on this channel and change to or restart the Repeat Message State.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PartianlNetworkLearning</srcid><srcstatus/><internalId>683</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>392</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00381</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the bits Partial Network Learning and Repeat Message Request both are received with value 1
        on a channel where CanNmDynamicPncToChannelMappingEnabled is set to TRUE and CanNm is in the
        Network Mode, then CanNm shall set the Partial Network Learning Bit in the CBV to 1 on this
        channel and change to or restart the Repeat Message State.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PartianlNetworkLearning</srcid><srcstatus/><internalId>683</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>393</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00382</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmDynamicPncToChannelMappingSupport is set to TRUE CanNm shall clear the Partial Network
        Learning Bit when leaving the Repeat Message State.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PartianlNetworkLearning</srcid><srcstatus/><internalId>683</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>394</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00384</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the function CanNm_PnLearningRequest is called in Prepare Bus-Sleep Mode or Bus Sleep Mode
        no functionality shall be executed and E_NOT_OK shall be returned.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PartianlNetworkLearning</srcid><srcstatus/><internalId>683</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>395</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00463</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmSynchronizedPncShutdownEnabled is set to TRUE, requests for synchronized PNC shutdown
        are pending and no transmission confirmation (indicated via CanNm_TxConfirmation) of a previous
        call is pending, then the CanNm module shall request in the next main function call a
        transmission of a NM message by calling CanIf_Transmit. In case the NM-PDU is not configured
        for triggered transmission in CanIf (CanIfTxPduTriggerTransmit set to FALSE), CanNm shall set
        for this message additionally the following data beneath the normal data:
        Set the PNSR bit in the CBV to 1
        Overwrite the PN information in the user data (after NM User Data has been fetched, if
        CanNmComUserDataSupport is enabled) by setting bits that corresponds to PNC IDs stored as
        pending request for a synchronized PNC shutdown to 1 and all other bits to 0.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.ObsoleteSynchronizedPNCShutdownReq</srcid><srcstatus/><internalId>691</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>396</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00466</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmSynchronizedPncShutdownEnabled is TRUE and the PNSR bit is set to 1 of the received NM
        PDU, the CanNm module shall set the bits in the ERA PDU to 0 of the corresponding bits which
        are set to 1 in the received PN info range, stop the according monitoring for these externally
        requested PNs  and inform the upper layers in the given order:
        call PduR_CanNmRxIndication() for the configured ERA PDU
        call Nm_ForwardSynchronizedPncShutdown() with the configured NetworkHandle (
        CanNmComMNetworkHandleRef)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.ObsoleteSynchronizedPNCShutdownReq</srcid><srcstatus/><internalId>691</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>397</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_00469</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        If CanNmSynchronizedPncShutdownEnabled is set to TRUE and requests for synchronized PNC
        shutdown are pending, then the CanNm module shall set for this message additionally the
        following data beneath the normal data within the call of CanNm_TriggerTransmit:
        Set the PNSR bit in the CBV to 1
        Overwrite the PN information in the user data (after NM User Data has been fetched, if
        CanNmComUserDataSupport is enabled) by setting bits that correspond to PNC IDs stored as
        pending request for a synchronized PNC shutdown to 1 and all other bits to 0.
      </description>
      <comment>
        This requirement is not applicable, CanNm_TriggerTransmit is not supported in current
        implementation.
        Implementation for synchronized pnc shutdown was done according to specifications in
        AUTOSAR R21-11, where this requirement is obsolete, replaced by SWS_CanNm_00509.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>398</internalId></specobject>
    <specobject>
      <id>CanNm.SWS_CanNm_91004</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CanNm_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | CanNm_PnLearningRequest (draft)
        Syntax
        Std_ReturnType CanNm_PnLearningRequest (NetworkHandleType nmChannelHandle)
        Service ID [hex] | 0xf2
        Sync/Async | Asynchronous
        Reentrancy | Reentrant (but not for the same NM-channel)
        Parameters (in) | nmChannelHandle | Identification of the NM-channel
        Parameters (inout) | None
        Parameters (out) | None
        Return value | Std_ReturnType | E_OK: No errorE_NOT_OK: PN Learning Requesthas failed or is not
        configured for this network handle.
        Description | Set Repeat Message Request Bit and Partial Network Learning Bit for NM messages
        transmitted next on the bus. This will force all nodes to enter the PNC Learning Phase. This is
        needed for the optional Dynamic PNC-to-channel-mapping feature. Tags:atp.Status=draft
        Available via | CanNm.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PartianlNetworkLearning</srcid><srcstatus/><internalId>683</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>399</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>CanNm.ASRR2111.SWS_CanNm_00045</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANNetworkManagement.pdf, R21-11</source>
      <version>2</version>
      <description>
        The Control Bit Vector shall consist of
        Bit 0: Repeat Message Request Bit
          0: Repeat Message State not requested
          1: Repeat Message State requested
        Bit 1: PN Shutdown Request Bit (PNSR)
          0: NM message does not contain synchronized Partial Network shutdown request
          1: NM message does contain synchronized Partial Network shutdown request for at least one
             PNC
        Bit 3: NM Coordinator Sleep Bit
          0: Start of synchronized shutdown is not requested by main coordinator
          1: Start of synchronized shutdown is requested by main coordinator
        Bit 4 Active Wakeup Bit
          0: Node has not woken up the network (passive wakeup)
          1: Node has woken up the network (active Wakeup)
        Bit 5 Partial Network Learning Bit (PNL)
          0: PNC Learning is not requested
          1: PNC Learning is requested
        Bit 6 Partial Network Information Bit (PNI)
          0: NM PDU contains no Partial Network request information
          1: NM PDU contains Partial Network request information
        Bit 2 and 7 are reserved for future extensions
          0: Disabled / Reserved for future usage
        Note: The CBV is initialized with 0x00 during initialization (also refer to
              SWS_CanNm_00085).
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_1</srcid><srcstatus/><internalId>1667</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_2</srcid><srcstatus/><internalId>1668</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_3</srcid><srcstatus/><internalId>1669</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_9</srcid><srcstatus/><internalId>1675</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_12</srcid><srcstatus/><internalId>1676</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_17</srcid><srcstatus/><internalId>1678</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_18</srcid><srcstatus/><internalId>1679</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_20</srcid><srcstatus/><internalId>1681</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_21</srcid><srcstatus/><internalId>1682</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_24</srcid><srcstatus/><internalId>1685</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_MulticoreChannel_1</srcid><srcstatus/><internalId>1688</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_31</srcid><srcstatus/><internalId>1690</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_32</srcid><srcstatus/><internalId>1691</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_36</srcid><srcstatus/><internalId>1695</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/CanNm_Int.h.m4_102</srcid><srcstatus/><internalId>795</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/CanNm_Int.h.m4_109</srcid><srcstatus/><internalId>796</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/CanNm_Int.h.m4_200</srcid><srcstatus/><internalId>797</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2880</srcid><srcstatus/><internalId>1054</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PartianlNetworkLearning</srcid><srcstatus/><internalId>683</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations><ruleid>WRN.swuts.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>400</internalId></specobject>

    <specobject>
      <id>CanNm.ASRR2111.SWS_CanNm_00032</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANNetworkManagement.pdf, R21-11</source>
      <version>1</version>
      <description>
        If transmission of Network Management PDUs has been started, the CanNm Message Cycle Timer
        expires and when CanNmSynchronizedPncShutdownEnabled is set to either FALSE or if set to
        TRUE and additionally no request for a synchronized PNC shutdown is pending, then the CanNm
        module shall transmit a Network Management PDU by calling CanIf_Transmit.
        Note: If the function call of CanIf_Transmit fails the Transmission Error handling
        described in chapter 7.12 informs the CanNm module.
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0111</srcid><srcstatus/><internalId>1592</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_17</srcid><srcstatus/><internalId>1678</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_824</srcid><srcstatus/><internalId>1121</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1742</srcid><srcstatus/><internalId>1200</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.Internal_Transition_SENDING_SUB_MODE_2</srcid><srcstatus/><internalId>1449</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>401</internalId></specobject>

    <specobject>
      <id>CanNm.ASRR2111.SWS_CanNm_00460</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANNetworkManagement.pdf, R21-11</source>
      <version>1</version>
      <description>
        If transmission of NM PDUs has been started, the CanNm Message Cycle Timer expires and when
        CanNmSynchronizedPncShutdownEnabled is set to TRUE and requests for synchronized PNC
        shutdown are pending, the transmission of the NM PDU shall be postponed to the next
        CanNm_Mainfunction call.

        Note:
        - The synchronized PNC shutdown has to be sent immediately and therefore processing of
        cylic NM messages transmitted with CanNmMsgCycleTime has to be delayed. In rare cases this
        could lead to a delay of more than one main function cycle time.
        - The NM timing has to consider that an NM message transmitted with CanNmMsgCycleTime may
        be delayed for more than one main function cycle time. Therefore, the following condition
        has to be fulfilled to tolerate multiple delays of those NM Messages:
        (CanNmPnResetTime – CanNmMsgCycleTime) &gt; n * CanNmMainFunctionPeriod, where n denotes the
        number of tolerated delays before the PnResetTime expires, if no NM message is received.
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_1</srcid><srcstatus/><internalId>1667</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_2</srcid><srcstatus/><internalId>1668</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_20</srcid><srcstatus/><internalId>1681</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_31</srcid><srcstatus/><internalId>1690</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_32</srcid><srcstatus/><internalId>1691</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2862</srcid><srcstatus/><internalId>1053</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1541</srcid><srcstatus/><internalId>1179</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>402</internalId></specobject>

    <specobject>
      <id>CanNm.ASRR2111.SWS_CanNm_00461</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANNetworkManagement.pdf, R21-11</source>
      <version>1</version>
      <description>
        If CanNmSynchronizedPncShutdownEnabled is set to TRUE, when a NM PDU is received where PNI
        bit and PNSR bit are 1 and the corresponding ComMChannel configured via
        CanNmComMNetworkHandleRef is actively coordinated (ComMPncGatewayType set to
        COMM_GATEWAY_TYPE_ACTIVE), CanNm module shall ignore the received NM-PDU. Additionally,
        CanNm shall
          - report the runtime error CANNM_E_INVALID_PN_SYNC_SHUTDOWN_REQUEST to DET
          - request transmission of a NM PDU (with current PN information) latest in the the next
          main function call, if CanNmPnSyncShutdownErrorReactionEnabled is set to TRUE.
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_5</srcid><srcstatus/><internalId>1671</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_6</srcid><srcstatus/><internalId>1672</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_7</srcid><srcstatus/><internalId>1673</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_8</srcid><srcstatus/><internalId>1674</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_33</srcid><srcstatus/><internalId>1692</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_34</srcid><srcstatus/><internalId>1693</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_35</srcid><srcstatus/><internalId>1694</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2121</srcid><srcstatus/><internalId>1004</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_3094</srcid><srcstatus/><internalId>1061</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>403</internalId></specobject>

    <specobject>
      <id>CanNm.ASRR2111.SWS_CanNm_00504</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANNetworkManagement.pdf, R21-11</source>
      <version>1</version>
      <description>
        If CanNmSynchronizedPncShutdownEnabled is TRUE, the PNI bit in the received NM-PDU is set
        to 1 and the PNSR bit is set to 1, CanNm module shall extract the PNC bit vector from the
        received NM-PDU according to the partial network configuration (NmPncBitVectorOffset and
        NmPncBitVectorLength of the corresponding NM-channel) and forward the PNC bit vector by
        calling Nm_ForwardSynchronizedPncShutdown.

        Note: PNSR Bit set to 1 is only possible if a synchronized PNC shutdown is requested.
        A synchronized PNC shutdown should be handled across the PN topology. Therefore, it is
        assumed that either all coordinators have the synchronized PNC shutdown enabled or all
        coordinators have the synchronized PNC shutdown disabled. A mixture of both would lead to
        an unsynchronized PNC shutdown, which has to be avoided.
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_13</srcid><srcstatus/><internalId>1677</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_51</srcid><srcstatus/><internalId>1697</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_3183</srcid><srcstatus/><internalId>1063</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>404</internalId></specobject>

    <specobject>
      <id>CanNm.ASRR2111.SWS_CanNm_00462</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANNetworkManagement.pdf, R21-11</source>
      <version>1</version>
      <description>
        If CanNmSynchronizedPncShutdownEnabled is set to TRUE and the service
        CanNm_RequestSynchronizedPncShutdown is called the CanNm module shall store the given
        PNC (pncId) per given NM-Channel (nmChannelHandle) as a pending request for a synchronized
        PNC shutdown.

        Note: The aggregation of all PNCs which are requested for a synchronized PNC shutdown and
        the transmission as PN shutdown message (set the PNSR bit in the CBV to 1) is done
        asynchronously in the context of CanNm_Mainfunction.
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_12</srcid><srcstatus/><internalId>1676</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2517</srcid><srcstatus/><internalId>1042</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>405</internalId></specobject>

    <specobject>
      <id>CanNm.ASRR2111.SWS_CanNm_00506</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANNetworkManagement.pdf, R21-11</source>
      <version>1</version>
      <description>
        If CanNmSynchronizedPncShutdownEnabled is set to TRUE, requests for synchronized PNC
        shutdown are pending and no transmission confirmation (indicated via CanNm_TxConfirmation)
        of a previous call is pending, then the CanNm module shall request in the next main
        function call a transmission of a NM-PDU as PN shutdown message by calling CanIf_Transmit.
        In case the NM-PDU is not configured for triggered transmission in CanIf
        (CanIfTxPduTriggerTransmit set to FALSE), CanNm shall set for this message additionally the
        following data beneath the normal data:
          - Set the PNSR bit in the CBV to 1
          - If user data is enabled, fetch the available data (either from Com if
            CanNmComUserDataSupport is enabled or from internal storage) and copy the data in the
            user data range of the NM-PDU
          - Write the PNC bit vector with respect to NmPncBitVectorOffset and NmPncBitVectorLength
            of the corresponding NM-channel by setting bits that corresponds to PNC IDs stored as
            pending request for a synchronized PNC shutdown to 1 and all other bits to 0

        Note: The CanNm modul has to aggregate all PNCs which were indicated for a synchronized PNC
        shutdown and transfer the pncId’s to a byte array (PN Info range). Each bit (PN bit) of the
        PN Info range represent a particular PNC. The byteIndex and bitindex within the PN Info
        range of PN bit can be determined as follows:
          - byteIndex = (PncId div 8)
          - bitIndex = (PncId mod 8)
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_1</srcid><srcstatus/><internalId>1667</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_2</srcid><srcstatus/><internalId>1668</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_3</srcid><srcstatus/><internalId>1669</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_9</srcid><srcstatus/><internalId>1675</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_12</srcid><srcstatus/><internalId>1676</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_17</srcid><srcstatus/><internalId>1678</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_18</srcid><srcstatus/><internalId>1679</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_20</srcid><srcstatus/><internalId>1681</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_21</srcid><srcstatus/><internalId>1682</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_24</srcid><srcstatus/><internalId>1685</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_MulticoreChannel_1</srcid><srcstatus/><internalId>1688</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_31</srcid><srcstatus/><internalId>1690</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_32</srcid><srcstatus/><internalId>1691</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_36</srcid><srcstatus/><internalId>1695</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_ReliableTxConfirmation_ResultEOK_SyncPncShutdown</srcid><srcstatus/><internalId>1713</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2880</srcid><srcstatus/><internalId>1054</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2886</srcid><srcstatus/><internalId>1055</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations><ruleid>WRN.swuts.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>406</internalId></specobject>

    <specobject>
      <id>CanNm.ASRR2111.SWS_CanNm_00464</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANNetworkManagement.pdf, R21-11</source>
      <version>1</version>
      <description>
        If CanNmSynchronizedPncShutdownEnabled is set to TRUE, the CanNm module has requested a
        transmission due to synchronized PNC shutdown (see [SWS_CanNm_00463]) and
        CanNm_TxConfirmation is called with result E_OK, the CanNm shall consider those PNC IDs
        stored as pending request for a synchronized PNC shutdown of the corresponding NM-channel
        as completed and remove them from storage. Additionally, if
        CanNmPnShutdownMessageRetransmissionDuration is configured, then CanNm shall cancel the
        retransmission timer for PN shutdown messages of the affected NM-channel.

        Note: CanNm has to ensure that new request for a synchronized PNC shutdown (indicated via
        CanNm_RequestSynchronizedPncShutdown) are not lost, during an ongoing transmission of a PN
        shutdown NM frame.
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1945</srcid><srcstatus/><internalId>991</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_3066</srcid><srcstatus/><internalId>1060</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_1</srcid><srcstatus/><internalId>1667</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_2</srcid><srcstatus/><internalId>1668</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_9</srcid><srcstatus/><internalId>1675</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_17</srcid><srcstatus/><internalId>1678</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_18</srcid><srcstatus/><internalId>1679</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_20</srcid><srcstatus/><internalId>1681</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_31</srcid><srcstatus/><internalId>1690</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_32</srcid><srcstatus/><internalId>1691</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_36</srcid><srcstatus/><internalId>1695</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_ReliableTxConfirmation_ResultEOK_SyncPncShutdown</srcid><srcstatus/><internalId>1713</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>407</internalId></specobject>

    <specobject>
      <id>CanNm.ASRR2111.SWS_CanNm_00465</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANNetworkManagement.pdf, R21-11</source>
      <version>1</version>
      <description>
        If CanNmSynchronizedPncShutdownEnabled is set to TRUE,
        CanNmPnShutdownMessageRetransmissionDuration is configured, the CanNm module has requested
        a transmission due to synchronized PNC shutdown (see [SWS_CanNm_00463]),
        CanNm_TxConfirmation is called with result E_NOT_OK or the transmission request for this PN
        shutdown message was not accepted (CanIf_Transmit returned E_NOT_OK), then the CanNm shall
        keep those PNC IDs stored as pending request for a synchronized PNC shutdown and perform a
        retransmission in the next main function.

        Note:
          - CanNm has to perform a retry transmission handling for PN shutdown messages in the
            context of the main function calls, if transmission of the PN shutdown message was not
            accepted or not confirmed by the lower layer. The retry transmission requests should
            cover error cases, where the lower layer cannot transmit the Nm messages. In the worst
            case this collides with a post poned NM message transmitted with CanNmMsgCycleTime
            (see [SWS_CanNm_00460]). But in any case, if the capability to transmitted NM messages
            is not re-covered within the PN reset time (EIRA), the PNCs will shutdown not
            synchronized, which migth lead to timeout errors on application level.
          - The dependency to a pending transmission confirmation indicated by the lower layer,
            should support reliable communication, e.g., ensure PN shutdown message was transmitted
            on the bus or avoid transmissions of outdated PN shutdown messages, if for example
            queueing in the lower layer is configured.
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.PnSyncShutdown.CanNm_TxConfirmation.Timeout</srcid><srcstatus/><internalId>599</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.SynchronizedPncShutdownDependencyToTxConfirmationENotOk</srcid><srcstatus/><internalId>690</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>408</internalId></specobject>

    <specobject>
      <id>CanNm.ASRR2111.SWS_CanNm_00470</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CANNetworkManagement.pdf, R21-11</source>
      <version>1</version>
      <description>
        If CanNmSynchronizedPncShutdownEnabled is set to TRUE and the CanNm module has stored PNC
        IDs as pending request for a synchronized PNC shutdown, then the CanNm shall remove those
        PNC IDs from storage which are either externally or internally requested again:
          - CanNm shall check on reception of an NM-message, if externally requested PNCs are
            received
          - CanNm shall check up front to each transmission of an PN shutdown message if internal
            PNC requests are available by deriving the internal PNC requests from the corresponding
            ComPdu (see ECUC_CanNm_00046)
      </description>
      <comment>
        This requirement is not applicable.
      </comment>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>409</internalId></specobject>

    <specobject>
      <id>CanNm.ASRR2111.SWS_CanNm_00471</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANNetworkManagement.pdf, R21-11</source>
      <version>1</version>
      <description>
        If CanNmSynchronizedPncShutdownEnabled is set to TRUE,
        CanNmPnShutdownMessageRetransmissionDuration is not configured, the CanNm module has
        requested a transmission due to synchronized PNC shutdown (see [SWS_CanNm_00463]),
        CanNm_TxConfirmation is called with result E_NOT_OK or the transmissions request for this
        PN shutdown message was not accepted (CanIf_Transmit returned E_NOT_OK), then the CanNm
        shall remove the PNC IDs stored as pending request for a synchronized PNC shutdown of the
        corresponding NM-channel and report the runtime error
        CANNM_E_TRANSMISSION_OF_PN_SHUTDOWN_MESSAGE_FAILED to DET.
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_37</srcid><srcstatus/><internalId>1696</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2911</srcid><srcstatus/><internalId>1056</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>410</internalId></specobject>

    <specobject>
      <id>CanNm.ASRR2111.SWS_CanNm_00472</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANNetworkManagement.pdf, R21-11</source>
      <version>1</version>
      <description>
        If CanNmSynchronizedPncShutdownEnabled is set to TRUE and a retransmission timer for a PN
        shutdown message (see ECUC_CanNm_00098 : ) expires, then CanNm shall remove the pending
        request for a synchronized PNC shutdown of the corresponding NM-channel from the storage
        and report the runtime error CANNM_E_TRANSMISSION_OF_PN_SHUTDOWN_MESSAGE_FAILED to DET.
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_22</srcid><srcstatus/><internalId>1683</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_ReliableTxConfirmation_ResultENOTOK_SyncPncShutdown</srcid><srcstatus/><internalId>1714</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_3046</srcid><srcstatus/><internalId>1058</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>411</internalId></specobject>

    <specobject>
      <id>CanNm.ASRR2111.SWS_CanNm_91003</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANNetworkManagement.pdf, R21-11</source>
      <version>1</version>
      <description>
        Service Name        : CanNm_RequestSynchronizedPncShutdown
        Syntax              : Std_ReturnType CanNm_RequestSynchronizedPncShutdown (
                                  NetworkHandleType nmChannelHandle, PNCHandleType pncId
                              )
        Service ID [hex]    : 0xf3
        Sync/Async          : Synchronous
        Reentrancy          : Reentrant for different nmChannelHandle. Non reentrant for the same
                              nmChannelHandle.
        Parameters (in)     : nmChannelHandle   Identifier of the NM-Channel where the given PNC
                                                (pncId) is assigned to.
                              pncId             Identifier of the PNC which is requested for a
                                                synchronized shutdown across the PN topology
        Parameters (inout)  : None
        Parameters (out)    : None
        Return value        : Std_Return-Type
                                E_OK : Request has been accepted.
                                E_NOT_OK : Request has not been accepted.
        Description         : Requests transmission of a NM-PDU with PNSR bit set to 1 (PN shutdown
                              message)
        Available via       : CanNm.h
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_SynchronizedPncShutdown_Compile_1</srcid><srcstatus/><internalId>1467</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_Channel_PNSyncShutdown_check_EIRAMulticore</srcid><srcstatus/><internalId>1469</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_Channel_PNSyncShutdown_check_EIRA</srcid><srcstatus/><internalId>1470</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32007</srcid><srcstatus/><internalId>1501</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_1</srcid><srcstatus/><internalId>1667</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_2</srcid><srcstatus/><internalId>1668</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_3</srcid><srcstatus/><internalId>1669</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_4</srcid><srcstatus/><internalId>1670</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_9</srcid><srcstatus/><internalId>1675</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_12</srcid><srcstatus/><internalId>1676</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_17</srcid><srcstatus/><internalId>1678</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_18</srcid><srcstatus/><internalId>1679</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_19</srcid><srcstatus/><internalId>1680</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_20</srcid><srcstatus/><internalId>1681</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_21</srcid><srcstatus/><internalId>1682</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_24</srcid><srcstatus/><internalId>1685</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_MulticoreChannel_1</srcid><srcstatus/><internalId>1688</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_31</srcid><srcstatus/><internalId>1690</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_32</srcid><srcstatus/><internalId>1691</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_36</srcid><srcstatus/><internalId>1695</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2463</srcid><srcstatus/><internalId>1035</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations><ruleid>WRN.swuts.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>412</internalId></specobject>

    <specobject>
      <id>CanNm.ASRR2111.SWS_CanNm_00467</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANNetworkManagement.pdf, R21-11</source>
      <version>1</version>
      <description>
        If CanNmSynchronizedPncShutdownEnabled is set to TRUE the CanNm implementation shall
        provide the API CanNm_RequestSynchronizedPncShutdown.
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_SynchronizedPncShutdown_Compile_1</srcid><srcstatus/><internalId>1467</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_1</srcid><srcstatus/><internalId>1667</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_31</srcid><srcstatus/><internalId>1690</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2463</srcid><srcstatus/><internalId>1035</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>413</internalId></specobject>

    <specobject>
      <id>CanNm.ASRR2111.SWS_CanNm_00509</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CANNetworkManagement.pdf, R21-11</source>
      <version>1</version>
      <description>
        If CanNmSynchronizedPncShutdownEnabled is set to TRUE and requests for synchronized PNC
        shutdown are pending, then the CanNm module shall set for this message additionally the
        following data beneath the normal data within the call of CanNm_TriggerTransmit:
          - Set the PNSR bit in the CBV to 1
          - If user data is enabled, fetch the available data (either from Com if
            CanNmComUserDataSupport is enabled or from internal storage) and copy the data in the
            user data range of the NM-PDU
          - Write the PNC bit vector with respect to NmPncBitVectorOffset and NmPncBitVectorLength
            of the corresponding NM-channel by setting bits that corresponds to PNC IDs stored as
            pending request for a synchronized PNC shutdown to 1 and all other bits to 0

        Note: The CanNm modul has to aggregate all PNCs which were indicated for a synchronized PNC
        shutdown and transfer the pncId’s to a byte array (PN Info range). Each bit (PN bit) of the
        PN Info range represent a particular PNC. The byteIndex and bitindex within the PN Info
        range of PN bit shall be determined as follows:
          - byteIndex = (PncId div 8)
          - bitIndex = (PncId mod 8)
      </description>
      <comment>
        This requirement is not applicable
      </comment>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>414</internalId></specobject>

    <specobject>
      <id>CanNm.ASRR2111.ECUC_CanNm_00098</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANNetworkManagement.pdf, R21-11</source>
      <version>1</version>
      <description>
        Name              : CanNmPnShutdownMessageRetransmissionDuration
        Parent Container  : CanNmGlobalConfig
        Description       : Specifies the duration in seconds of the retransmission phase of a PN
                            shutdown message. A retransmission shall be performed per affected NM
                            channel, as long as the PN shutdown message could not be successfully
                            sent and the retransmission timer is running. The value shall be a
                            multiple integral of CanNmMainFunctionPeriod.
        Multiplicity      : 0..1
        Type              : EcucFloatParamDef
        Range             : [0.001 .. 65.535]
        Default value     : --
        Post-Build Variant Multiplicity   : false
        Post-Build Variant Value          : false
        Multiplicity Configuration Class  :
            Pre-compile time    X   VARIANT-PRE-COMPILE
            Link time           X   VARIANT-LINK-TIME, VARIANT-POST-BUILD
            Post-build time     --
        Value Configuration Class         :
            Pre-compile time    X   VARIANT-PRE-COMPILE
            Link time           X   VARIANT-LINK-TIME, VARIANT-POST-BUILD
            Post-build time     --
        Scope / Dependency  :
            scope         : local
            dependency    : Only valid if
                            - CanNmSynchronizedPncShutdownEnabled == TRUE
                            - CanNmPnShutdownMessageRetransmissionDuration &lt;= CanNmPnResetTime
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_SynchronizedPncShutdown_Compile_2</srcid><srcstatus/><internalId>1468</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_3</srcid><srcstatus/><internalId>1669</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_4</srcid><srcstatus/><internalId>1670</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_12</srcid><srcstatus/><internalId>1676</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1128</srcid><srcstatus/><internalId>1272</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PreCompile</srcid><srcstatus/><internalId>676</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>415</internalId></specobject>

    <specobject>
      <id>CanNm.ASRR2111.ECUC_CanNm_00096</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANNetworkManagement.pdf, R21-11</source>
      <version>1</version>
      <description>
        Name              : CanNmPnSyncShutdownErrorReactionEnabled
        Parent Container  : CanNmGlobalConfig
        Description       : Pre-processor switch for enabling reaction, if a top-level PNC
                            coordinator received a PN shutdown message on a NM-channel which refer
                            to a ComM channel that is actively coordinated by a PNC gateway.
        Multiplicity      : 1
        Type              : EcucBooleanParamDef
        Default value     : --
        Post-Build Variant Value  : false
        Value Configuration Class :
            Pre-compile time    X   All Variants
            Link time           --
            Post-build time     --
        Scope / Dependency  :
            scope         : local
            dependency    : This parameter shall only be set to TRUE if
                            CanNmSynchronizedPncShutdownEnabled is set to TRUE on at least
                            one channel.
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_SynchronizedPncShutdown_Compile_2</srcid><srcstatus/><internalId>1468</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_5</srcid><srcstatus/><internalId>1671</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_6</srcid><srcstatus/><internalId>1672</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_7</srcid><srcstatus/><internalId>1673</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_8</srcid><srcstatus/><internalId>1674</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_33</srcid><srcstatus/><internalId>1692</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_34</srcid><srcstatus/><internalId>1693</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_35</srcid><srcstatus/><internalId>1694</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1170</srcid><srcstatus/><internalId>1274</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>416</internalId></specobject>

    <specobject>
      <id>CanNm.ASRR2111.ECUC_CanNm_00097</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANNetworkManagement.pdf, R21-11</source>
      <version>1</version>
      <description>
        Name              : CanNmSynchronizedPncShutdownEnabled
        Parent Container  : CanNmChannelConfig
        Description       : Specifies if CanNm handle PN shutdown messages to support a
                            synchronized PNC shutdown across a PN topology. This is only used for
                            ECUs in the role of a top-level PNC coordinator or intermediate PNC
                            coordinator. Thus, the PNC gateway functionality is enabled and
                            therefore ERA calculation is used.

                            FALSE : synchronized PNC shutdown is disabled
                            TRUE  : synchronized PNC shutdown is enabled
        Multiplicity      : 0..1
        Type              : EcucBooleanParamDef
        Default value     : false
        Post-Build Variant Multiplicity   : false
        Post-Build Variant Value          : false
        Multiplicity Configuration Class  :
            Pre-compile time    X   VARIANT-PRE-COMPILE
            Link time           X   VARIANT-LINK-TIME
            Post-build time     --
        Value Configuration Class         :
            Pre-compile time    X   VARIANT-PRE-COMPILE
            Link time           X   VARIANT-LINK-TIME
            Post-build time     --
        Scope / Dependency
            scope         : local
            dependency    : Only available if CanNmPnEnabled == TRUE and NmPnEraCalcEnabled == TRUE.
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_SynchronizedPncShutdown_Compile_2</srcid><srcstatus/><internalId>1468</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_GEN_10008</srcid><srcstatus/><internalId>1491</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_GEN_10009</srcid><srcstatus/><internalId>1492</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_GEN_10010</srcid><srcstatus/><internalId>1493</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_GEN_10011</srcid><srcstatus/><internalId>1494</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_358</srcid><srcstatus/><internalId>744</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1789</srcid><srcstatus/><internalId>1319</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.PreCompile</srcid><srcstatus/><internalId>676</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>417</internalId></specobject>

    <specobject>
      <id>CanNm.ASRR2111.SWS_CanNm_00317</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANNetworkManagement.pdf, R21-11</source>
      <version>1</version>
      <description>
        Type of error                                       Related error code            Error value

        Reception of NM PDUs in Bus-Sleep Mode.             CANNM_E_NET_START_IND         0x04
        NM-Timeout Timer has abnormally expired outside
        of the Ready Sleep State; it may happen:
        (1) because of Bus-Off state,
        (2)if some ECU requests bus communication or
        node detection shortly before the NM-Timeout
        Timer expires so that a Network Management PDU
        can not be transmitted in time; this race
        condition applies to event-triggered systems        CANNM_E_NETWORK_TIMEOUT       0x11

        A NM message with PN Shutdown Request Bit was
        received on a channel that is actively
        coordinated by the ComM PNC Gateway.                CANNM_E_INVALID_
                                                            PN_SYNC_SHUTDOWN_REQUEST      0x20

        Retransmission timer for a PN shutdown message
        has expired, because a PN shutdown message could
        not be Transmitted on the network within the
        configured duration of re-transmission.             CANNM_E_TRANSMISSION_OF_
                                                            PN_SHUTDOWN_MESSAGE_FAILED    0x21
      </description>
      <comment>
        This requirement is informational only.
      </comment>
      <releases>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00317.1</srcid><srcstatus/><internalId>486</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00317.2</srcid><srcstatus/><internalId>487</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00317.3</srcid><srcstatus/><internalId>488</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB_Ref.SWS_CanNm_00317.4</srcid><srcstatus/><internalId>489</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>418</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00333.1</id>
      <status>approved</status>
      <source>AUTOSAR</source>
      <version>2</version>
      <description>If CanNmComUserDataSupport is enabled and if CanNm is in
        RepeatMessage state and if CanNm_Transmit()
        is called CanNm shall request an additional transmission of the
        NM PDU with the current user data.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_Transmit</srcid><srcstatus/><internalId>1772</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2213</srcid><srcstatus/><internalId>1012</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00333</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>312</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>419</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00333.2</id>
      <status>approved</status>
      <source>AUTOSAR</source>
      <version>2</version>
      <description>If CanNmComUserDataSupport is enabled and if CanNm is in
        NormalOperation state and if CanNm_Transmit()
        is called CanNm shall request an additional transmission of the
        NM PDU with the current user data.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_Transmit</srcid><srcstatus/><internalId>1772</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2213</srcid><srcstatus/><internalId>1012</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00333</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>312</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>420</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.CANNM100.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>When the Repeat Message State is entered from Bus-Sleep Mode, the CanNm
        module shall start transmission of Network Management PDUs unless passive
        mode is enabled and/or communication is disabled.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0136</srcid><srcstatus/><internalId>1731</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_824</srcid><srcstatus/><internalId>1121</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM100</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>421</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.CANNM100.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>When the Repeat Message State is entered from Prepare-Bus-Sleep Mode, the
        CanNm module shall start transmission of Network Management PDUs unless
        passive mode is enabled and/or communication is disabled.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0137</srcid><srcstatus/><internalId>1732</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_824</srcid><srcstatus/><internalId>1121</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM100</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>422</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.CANNM100.3</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>When the Repeat Message State is entered from Normal Operation State, the
        CanNm module shall start transmission of Network Management PDUs unless
        passive mode is enabled and/or communication is disabled.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0142</srcid><srcstatus/><internalId>1759</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_RepeatMsgReqCommDisable</srcid><srcstatus/><internalId>1769</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_825</srcid><srcstatus/><internalId>1122</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM100</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>423</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.CANNM100.4</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>When the Repeat Message State is entered from Ready Sleep State, the
        CanNm module shall start transmission of Network Management PDUs unless
        passive mode is enabled and/or communication is disabled.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_RepeatMsgTest</srcid><srcstatus/><internalId>1596</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0139</srcid><srcstatus/><internalId>1757</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_825</srcid><srcstatus/><internalId>1122</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM100</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>424</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00137.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>If the service CanNm_RepeatMessageRequest is called in Repeat Message
        State, the CanNm module shall not execute the service and return E_NOT_OK.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_33026</srcid><srcstatus/><internalId>1649</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1349</srcid><srcstatus/><internalId>935</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00137</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>425</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00137.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>If the service CanNm_RepeatMessageRequest is called in Prepare Bus-Sleep
        Mode, the CanNm module shall not execute the service and return E_NOT_OK.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_33026</srcid><srcstatus/><internalId>1649</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0090</srcid><srcstatus/><internalId>1755</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1349</srcid><srcstatus/><internalId>935</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00137</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>426</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00137.3</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>If the service CanNm_RepeatMessageRequest is called in Bus-Sleep Mode,
        the CanNm module shall not execute the service and return E_NOT_OK.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_33026</srcid><srcstatus/><internalId>1649</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1349</srcid><srcstatus/><internalId>935</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00137</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>427</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00108.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>When the Ready Sleep State is entered from Repeat Message State, the
        CanNm module shall stop transmission of Network Management PDUs.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0119</srcid><srcstatus/><internalId>1760</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_754</srcid><srcstatus/><internalId>1115</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>428</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00108.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>When the Ready Sleep State is entered from Normal Operation State,
        the CanNm module shall stop transmission of Network Management PDUs.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0105</srcid><srcstatus/><internalId>1730</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_754</srcid><srcstatus/><internalId>1115</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>429</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00334.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>When entering the RepeatMessage state from BusSleep state because of
        CanNm_NetworkRequest (active wakeup) and if CanNmImmediateNmTransmissions
        is greater zero, the NM PDUs shall be transmitted using
        CanNmImmediateNmCycleTime as cycle time. The transmission of the first
        NM PDU shall be triggered as soon as possible.  After the transmission
        the Message Cycle Timer shall be reloaded with CanNmImmediateNmCycleTime.
        The CanNmMsgCycleOffset shall not be applied in this case.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_Immediates_ON</srcid><srcstatus/><internalId>1570</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_ImmediateNmTrans_4</srcid><srcstatus/><internalId>1778</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_ImmediateNmTrans_5</srcid><srcstatus/><internalId>1779</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_ImmediateNmTrans_1</srcid><srcstatus/><internalId>1787</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_ImmediateNmTrans_2</srcid><srcstatus/><internalId>1788</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1795</srcid><srcstatus/><internalId>1208</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00334</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>313</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>430</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00334.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>When entering the RepeatMessage state from PrepareBusSleep
        state because of CanNm_NetworkRequest (active wakeup) and if
        CanNmImmediateNmTransmissions is greater zero, the NM PDUs shall be
        transmitted using CanNmImmediateNmCycleTime as cycle time. The
        transmission of the first NM PDU shall be triggered as soon as possible.
        After the transmission the Message Cycle Timer shall be reloaded with
        CanNmImmediateNmCycleTime. The CanNmMsgCycleOffset shall not be applied
        in this case.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_ImmediateNmTrans_3</srcid><srcstatus/><internalId>1777</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_ImmediateNmTrans_4</srcid><srcstatus/><internalId>1778</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1795</srcid><srcstatus/><internalId>1208</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00334</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>313</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>431</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00156.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>When the Repeat Message State is entered from Bus-Sleep Mode the CanNm
        module shall deactivate the busload reduction.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0082</srcid><srcstatus/><internalId>1727</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1200</srcid><srcstatus/><internalId>1154</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1209</srcid><srcstatus/><internalId>1156</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00156</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>432</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00156.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>When the Repeat Message State is entered from Prepare Bus-Sleep
        Mode the CanNm module shall deactivate the busload reduction.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0083</srcid><srcstatus/><internalId>1728</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1200</srcid><srcstatus/><internalId>1154</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1209</srcid><srcstatus/><internalId>1156</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00156</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>433</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00156.3</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>When the Repeat Message State is entered from Normal Operation State the
        CanNm module shall deactivate the busload reduction.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0118_EB</srcid><srcstatus/><internalId>1758</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1200</srcid><srcstatus/><internalId>1154</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1209</srcid><srcstatus/><internalId>1156</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00156</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>434</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00156.4</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>When the Repeat Message State is entered from Ready Sleep State the
        CanNm module shall deactivate the busload reduction.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0117</srcid><srcstatus/><internalId>1756</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1200</srcid><srcstatus/><internalId>1154</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1209</srcid><srcstatus/><internalId>1156</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00156</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>435</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00157.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>When the Normal Operation State is entered from Ready Sleep State and
        CANNM_BUS_LOAD_REDUCTION_ENABLED is TRUE the CanNm module shall activate
        the busload reduction.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0126</srcid><srcstatus/><internalId>1764</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1618</srcid><srcstatus/><internalId>1185</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00157</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>214</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>436</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00157.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>When the Normal Operation State is entered from Repeat Message State and
        CANNM_BUS_LOAD_REDUCTION_ENABLED is TRUE the CanNm module shall activate
        the busload reduction.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0126</srcid><srcstatus/><internalId>1764</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1619</srcid><srcstatus/><internalId>1186</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00157</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>214</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>437</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00151.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>If Remote Sleep Indication has been previously detected and if a Network
        Management PDU is received in the Normal Operation State again, the CanNm
        module shall call the callback function Nm_RemoteSleepCancellation.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32052</srcid><srcstatus/><internalId>1645</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_33030</srcid><srcstatus/><internalId>1657</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0100</srcid><srcstatus/><internalId>1741</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1086</srcid><srcstatus/><internalId>1139</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.RX_INDICATION_NORMAL_OPERATION_REMOTE_SLEEP</srcid><srcstatus/><internalId>1428</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00151</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>438</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00151.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>If Remote Sleep Indication has been previously detected and if a Network
        Management PDU is received in the Ready Sleep State again, the CanNm
        module shall call the callback function Nm_RemoteSleepCancellation.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_33030</srcid><srcstatus/><internalId>1657</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0127</srcid><srcstatus/><internalId>1744</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_707</srcid><srcstatus/><internalId>1113</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.RX_INDICATION_READY_SLEEP_STATE</srcid><srcstatus/><internalId>1437</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00151</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>439</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00152.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>If Remote Sleep Indication has been previously detected and if Repeat
        Message State is entered from Normal Operation State, the CanNm module
        shall call the callback function Nm_RemoteSleepCancellation.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32052</srcid><srcstatus/><internalId>1645</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1046</srcid><srcstatus/><internalId>1134</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.REPEAT_MESSAGE_REASON_NORMAL_OPERATION_REMOTE_SLEEP</srcid><srcstatus/><internalId>1427</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00152</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>210</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>440</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00152.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>If Remote Sleep Indication has been previously detected and if Repeat
        Message State is entered from Ready Sleep State, the CanNm module shall
        call the callback function Nm_RemoteSleepCancellation.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0128</srcid><srcstatus/><internalId>1765</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_668</srcid><srcstatus/><internalId>1108</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.REPEAT_MESSAGE_REASON_READY_SLEEP_STATE</srcid><srcstatus/><internalId>1432</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00152</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>210</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>441</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00154.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>When the service CanNm_CheckRemoteSleepIndication is called and the state
        is Bus-Sleep Mode, the CanNm module shall not execute the service and
        shall return E_NOT_OK.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_33030</srcid><srcstatus/><internalId>1657</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0101</srcid><srcstatus/><internalId>1742</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1764</srcid><srcstatus/><internalId>976</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00154</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>212</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>442</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00154.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>When the service CanNm_CheckRemoteSleepIndication is called and the state
        is Prepare Bus-Sleep Mode, the CanNm module shall not execute the service
        and shall return E_NOT_OK.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_33030</srcid><srcstatus/><internalId>1657</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0085</srcid><srcstatus/><internalId>1740</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1764</srcid><srcstatus/><internalId>976</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00154</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>212</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>443</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00154.3</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>When the service CanNm_CheckRemoteSleepIndication is called and the state
        is Repeat Message State, the CanNm module shall not execute the service
        and shall return E_NOT_OK.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32051</srcid><srcstatus/><internalId>1644</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_33030</srcid><srcstatus/><internalId>1657</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0102</srcid><srcstatus/><internalId>1743</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1764</srcid><srcstatus/><internalId>976</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00154</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>212</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>444</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.CANNM163.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>If Passive Mode is used (configuration parameter
        CANNM_PASSIVE_MODE_ENABLED) then Bus Synchronization (configuration
        parameter CANNM_BUS_SYNCHRONIZATION_ENABLED) option shall be disabled.</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_356</srcid><srcstatus/><internalId>1231</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM163</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>445</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.CANNM163.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>If Passive Mode is used (configuration parameter
        CANNM_PASSIVE_MODE_ENABLED) then Bus Load Reduction (configuration
        parameter CANNM_BUS_LOAD_REDUCTION_ENABLED) option shall be disabled.</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_303</srcid><srcstatus/><internalId>1227</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM163</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>446</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.CANNM163.3</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>If Passive Mode is used (configuration parameter
        CANNM_PASSIVE_MODE_ENABLED) then Remote Sleep Indication (configuration
        parameter CANNM_REMOTE_SLEEP_IND_ENABLED) option shall be disabled.</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_969</srcid><srcstatus/><internalId>1263</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM163</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>447</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.CANNM163.4</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>If Passive Mode is used (configuration parameter
        CANNM_PASSIVE_MODE_ENABLED) then Node Detection (configuration
        parameter CANNM_NODE_DETECTION_ENABLED) option shall be disabled.</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1406</srcid><srcstatus/><internalId>1291</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM163</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>448</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00432.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>If content of EIRA changes (any bit changes from 0 to 1)
        because of a received NM-PDU, the CanNm shall inform the upper layers by
        calling PduR_CanNmRxIndication. By means of the Rx Indication function the
        EIRA data shall be provided to the COM module.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_EIRA_ERA_Calc_FilterAlgo</srcid><srcstatus/><internalId>1510</internalId></linkedfrom><linkedfrom><srcid>TS_CANNM_CanNmPnResetTime_504PNCs</srcid><srcstatus/><internalId>1726</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2781</srcid><srcstatus/><internalId>1051</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00432</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>350</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>449</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00432.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>If content of EIRA changes (any bit changes from 0 to 1)
        because of a transmitted NM-PDU, the CanNm shall inform the upper layers
        by calling PduR_CanNmRxIndication. By means of the Rx Indication function
        the EIRA data shall be provided to the COM module.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_TX_EIRA_VERIFICATION</srcid><srcstatus/><internalId>1520</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2781</srcid><srcstatus/><internalId>1051</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00432</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>350</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>450</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00432.3</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>If content of EIRA changes (any bit changes from 1 to 0)
        because of the EIRA reset timer expiration, the CanNm shall inform the
        upper layers by calling PduR_CanNmRxIndication. By means of the Rx
        Indication function the EIRA data shall be provided to the COM module.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_EIRA_ERA_Calc_FilterAlgo</srcid><srcstatus/><internalId>1510</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_MAX_EIRA_SIZE</srcid><srcstatus/><internalId>1532</internalId></linkedfrom><linkedfrom><srcid>TS_CANNM_CanNmPnResetTime_504PNCs</srcid><srcstatus/><internalId>1726</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2733</srcid><srcstatus/><internalId>1048</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00432</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>350</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>451</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00073.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>If CANNM_PASSIVE_MODE_ENABLED is TRUE (see CANNM072), the CanNm module
        shall not perform transmission error handling and omit the requirements SWS_CanNm_00061,
        SWS_CanNm_00064, SWS_CanNm_00065, SWS_CanNm_00066 and SWS_CanNm_00446.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1863</srcid><srcstatus/><internalId>982</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00073</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>153</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>452</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00073.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>If CANNM_IMMEDIATE_TXCONF_ENABLED is TRUE, the CanNm module shall
        shall not perform transmission error handling and omit the requirements SWS_CanNm_00061,
        SWS_CanNm_00064, SWS_CanNm_00065, SWS_CanNm_00066 and SWS_CanNm_00446.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1863</srcid><srcstatus/><internalId>982</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00073</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>153</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>453</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00401.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>If the CanNm performs a state change from BusSleep state to NetworkMode
        due to a call to CanNm_NetworkRequest (i.e. due to an active wakeup) and
        CanNmActiveWakeupBitEnabled is TRUE, the CanNm shall set the
        ActiveWakeupBit in the CBV.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_ReEnterNetworkModeActiveWakeupBit</srcid><srcstatus/><internalId>1534</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_ActiveWakeupBit_Sequence_1</srcid><srcstatus/><internalId>1540</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_ActiveWakeupBit_Sequence_2</srcid><srcstatus/><internalId>1541</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_ActiveWakeupBit_Sequence_3</srcid><srcstatus/><internalId>1542</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_ActiveWakeupBit_Sequence_4</srcid><srcstatus/><internalId>1543</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_ActiveWakeupBit_Sequence_5</srcid><srcstatus/><internalId>1544</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_ActiveWakeupBit_Sequence_6</srcid><srcstatus/><internalId>1545</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_ActiveWakeupBit_Sequence_7</srcid><srcstatus/><internalId>1546</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SetUserData</srcid><srcstatus/><internalId>1566</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_ActiveWakeupBit_1</srcid><srcstatus/><internalId>1653</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_ActiveWakeupBit_2</srcid><srcstatus/><internalId>1654</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_ActiveWakeupBit_False</srcid><srcstatus/><internalId>1701</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_413</srcid><srcstatus/><internalId>1097</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00401</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>324</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations><ruleid>WRN.swuts.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>454</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00401.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>If the CanNm performs a state change from PrepareBusSleep state to
        NetworkMode due to a call to CanNm_NetworkRequest (i.e. due to  an active
        wakeup) and CanNmActiveWakeupBitEnabled is TRUE, the CanNm shall set the
        ActiveWakeupBit in the CBV.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_ReEnterNetworkModeActiveWakeupBit</srcid><srcstatus/><internalId>1534</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_ActiveWakeupBit_1</srcid><srcstatus/><internalId>1653</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_413</srcid><srcstatus/><internalId>1097</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00401</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>324</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>455</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.CANNM229.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>The callback function CanNm_TxConfirmation shall inform the DET, if
        development error detection is enabled (CANNM_DEV_ERROR_DETECT is set to
        TRUE) and if function call has failed because of an Invalid PDU ID
        (CANNM_E_INVALID_PDUID).</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32008</srcid><srcstatus/><internalId>1503</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1907</srcid><srcstatus/><internalId>988</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM229</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>456</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.CANNM229.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>The callback function CanNm_TxConfirmation shall inform the DET, if
        development error detection is enabled (CANNM_DEV_ERROR_DETECT is set to
        TRUE) and if function call has failed because CanNm was not initialized
        (CANNM_E_NO_INIT).</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32007</srcid><srcstatus/><internalId>1501</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1881</srcid><srcstatus/><internalId>986</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM229</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>457</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.CANNM232.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>The callback function CanNm_RxIndication shall inform the DET, if
        development error detection is enabled (CANNM_DEV_ERROR_DETECT is set
        to TRUE) and if function call has failed because of an Invalid PDU ID
        (CANNM_E_INVALID_PDUID)</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32008</srcid><srcstatus/><internalId>1503</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1996</srcid><srcstatus/><internalId>996</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM232</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>458</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.CANNM232.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>The callback function CanNm_RxIndication shall inform the DET, if
        development error detection is enabled (CANNM_DEV_ERROR_DETECT is set
        to TRUE) and if function call has failed because of CanNm was not
        initialized (CANNM_E_NO_INIT)</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32007</srcid><srcstatus/><internalId>1501</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1990</srcid><srcstatus/><internalId>995</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM232</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>459</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.CANNM232.3</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>The callback function CanNm_RxIndication shall inform the DET, if
        development error detection is enabled (CANNM_DEV_ERROR_DETECT is set
        to TRUE) and if function call has failed because of PduInfoPtr or
        SduDataPtr equals NULL_PTR (CANNM_E_NULL_POINTER)</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32009</srcid><srcstatus/><internalId>1504</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2008</srcid><srcstatus/><internalId>997</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM232</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>460</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00192</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>If development error detection is enabled (CANNM_DEV_ERROR_DETECT is set
        to TRUE) and a CanNm service with an invalid network handle is called,
        the called function shall not be executed and it shall return E_NOT_OK to
        the calling function.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32008</srcid><srcstatus/><internalId>1503</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_450</srcid><srcstatus/><internalId>839</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_545</srcid><srcstatus/><internalId>849</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_617</srcid><srcstatus/><internalId>857</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_686</srcid><srcstatus/><internalId>865</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_760</srcid><srcstatus/><internalId>873</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_849</srcid><srcstatus/><internalId>882</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_946</srcid><srcstatus/><internalId>892</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1033</srcid><srcstatus/><internalId>901</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1136</srcid><srcstatus/><internalId>911</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1224</srcid><srcstatus/><internalId>921</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1314</srcid><srcstatus/><internalId>932</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1399</srcid><srcstatus/><internalId>941</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1490</srcid><srcstatus/><internalId>950</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1620</srcid><srcstatus/><internalId>965</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1714</srcid><srcstatus/><internalId>973</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2426</srcid><srcstatus/><internalId>1032</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2488</srcid><srcstatus/><internalId>1039</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00192</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>235</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations><ruleid>WRN.impl.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>461</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00180</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>If CANNM_REMOTE_SLEEP_IND_ENABLED is TRUE and the Network Management PDU transmission ability
        is enabled, the CanNm module shall re-start the Remote Sleep Indication Detection.</description>
      <rationale>This refinement has been introduced due to bugzilla ticket #68608.</rationale>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_906</srcid><srcstatus/><internalId>1127</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1603</srcid><srcstatus/><internalId>1184</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1698</srcid><srcstatus/><internalId>1195</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32051</srcid><srcstatus/><internalId>1644</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0147</srcid><srcstatus/><internalId>1745</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.Internal_Transition_NORMAL_OPERATION_STATE</srcid><srcstatus/><internalId>1425</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.Internal_Transition_NETWORK_MODE_0</srcid><srcstatus/><internalId>1442</internalId></linkedfrom><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.Internal_Transition_NETWORK_MODE_1</srcid><srcstatus/><internalId>1443</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00180</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>462</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00098</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>At successful reception of a Network Management PDU (call of CanNm_RxIndication) in the
        Network Mode, the CanNm module shall restart the NM-Timeout Timer if PDU tranmission ability is enabled.</description>
      <rationale>This refinement has been introduced due to bugzilla ticket #68608.</rationale>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1567</srcid><srcstatus/><internalId>1180</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_NmTimeOut_Restart_2</srcid><srcstatus/><internalId>1768</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.Internal_Transition_NETWORK_MODE_2</srcid><srcstatus/><internalId>1444</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00098</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>166</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>463</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00069</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>If the bus load reduction mechanism is globally enabled (CANNM_BUS_LOAD_REDUCTION_ENABLED
        is TRUE), for a particular network activated, PDU transmission ability is enabled and the
        function CanNm_RxIndication is called for this network, the CanNm module shall restart the
        CanNm Message Cycle Timer with the node specific time CANNM_MSG_REDUCED_TIME.</description>
      <rationale>This refinement has been introduced due to bugzilla ticket #68608.</rationale>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1618</srcid><srcstatus/><internalId>1185</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_Timers_Com_Disable2</srcid><srcstatus/><internalId>1529</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Timers_Com_Disable4</srcid><srcstatus/><internalId>1558</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_BUSLOAD_REDACTIVE_FALSE</srcid><srcstatus/><internalId>1700</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00069</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>464</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00099.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>At successful transmission of a Network Management PDU (call of
        CanNm_TxConfirmation) in the Network Mode, the CanNm module shall restart
        the NM-Timeout Timer if PDU tranmission ability is enabled.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_Timers_Com_Disable3</srcid><srcstatus/><internalId>1530</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_ReliableTxConfirmation_005</srcid><srcstatus/><internalId>1711</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_ReliableTxConfirmation_006</srcid><srcstatus/><internalId>1712</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_NmTimeOut_Restart_2</srcid><srcstatus/><internalId>1768</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1642</srcid><srcstatus/><internalId>1188</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.Internal_Transition_NETWORK_MODE_3</srcid><srcstatus/><internalId>1445</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00099</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>465</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00099.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>If CANNM_IMMEDIATE_TXCONF_ENABLED is enabled it is assumed that each
       Network Management PDU transmission request results in a successful Network
       Management PDU transmission and shall start NM-Timeout Timer.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_ImmediateTxConfirmationEnabled</srcid><srcstatus/><internalId>1567</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1754</srcid><srcstatus/><internalId>1202</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00099</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>466</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.CANNM064</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>The NM Message Tx Timeout Timer shall be started with CanNmMsgTimeoutTime
        when the transmission of a NM PDU has been successfully requested from CanIf.</description>
      <rationale>This refinement has been introduced due to bugzilla ticket #74118.</rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_NmMessageTxTimeout</srcid><srcstatus/><internalId>1549</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_TxTimeoutCanIfTransmitFails</srcid><srcstatus/><internalId>1550</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_14001</srcid><srcstatus/><internalId>1556</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1749</srcid><srcstatus/><internalId>1201</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM064</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>467</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00443.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>If the any bit in the ERA changes from 0 to 1 because of a received
        NM-PDU the CanNm module shall inform the upper layers by calling
        PduR_CanNmRxIndication()</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_EIRA_ERA_Calc_FilterAlgo</srcid><srcstatus/><internalId>1510</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_Schm_Call_Channel_Multicore_41</srcid><srcstatus/><internalId>1706</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2781</srcid><srcstatus/><internalId>1051</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00443</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>356</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>468</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00443.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>If the any bit in the ERA changes from 1 to 0 because of
        the ERA reset timer expiration
        the CanNm module shall inform the upper layers by calling
        PduR_CanNmRxIndication()</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_EIRA_ERA_Calc_FilterAlgo</srcid><srcstatus/><internalId>1510</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_Schm_Call_Channel_Multicore_41</srcid><srcstatus/><internalId>1706</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2733</srcid><srcstatus/><internalId>1048</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00443</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>356</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>469</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.CANNM135.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>Support of Repeat Message Request Bit shall be
        statically configurable with use of the CANNM_NODE_DETECTION_ENABLED
        switch (configuration parameter).</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0118_EB</srcid><srcstatus/><internalId>1758</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2163</srcid><srcstatus/><internalId>1009</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM135</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>470</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.CANNM135.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>Support of Repeat Message State Request shall be
        statically configurable with use of the CANNM_NODE_DETECTION_ENABLED
        switch (configuration parameter).</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1278</srcid><srcstatus/><internalId>928</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM135</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>471</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.CANNM276.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>Configuration of CanNm_GetPduData: Optional (Only available if
        CANNM_NODE_DETECTION_ENABLED is set to TRUE).</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_DiffrentChFeatures_CanNm_GetPduData</srcid><srcstatus/><internalId>1574</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1364</srcid><srcstatus/><internalId>937</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM276</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations><ruleid>WRN.swuts.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>472</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.CANNM276.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>Configuration of CanNm_GetPduData: Optional (Only available if
        CANNM_USER_DATA_ENABLED is set to TRUE).</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_DiffrentChFeatures_CanNm_GetPduData</srcid><srcstatus/><internalId>1574</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1364</srcid><srcstatus/><internalId>937</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM276</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations><ruleid>WRN.swuts.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>473</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.CANNM276.3</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>Configuration of CanNm_GetPduData: Optional (Only available if
        CanNmNodeIdEnabled is set to TRUE).</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30010</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_PnEnabled_FALSE_COMPILE_2</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30006</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30007</srcid><srcstatus/><internalId>1472</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30008</srcid><srcstatus/><internalId>1473</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30009</srcid><srcstatus/><internalId>1474</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80003</srcid><srcstatus/><internalId>1479</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_DiffrentChFeatures_CanNm_GetPduData</srcid><srcstatus/><internalId>1574</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1364</srcid><srcstatus/><internalId>937</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM276</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations><ruleid>WRN.swuts.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>474</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00187.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>If CanNm_RequestBusSynchronization is called in Bus-Sleep Mode
        the CanNm module shall not execute the service and shall
        return E_NOT_OK.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_RequestBusSync</srcid><srcstatus/><internalId>1647</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0078</srcid><srcstatus/><internalId>1746</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1650</srcid><srcstatus/><internalId>967</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00187</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>232</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>475</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00187.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>If CanNm_RequestBusSynchronization is called in Prepare Bus-Sleep Mode
        the CanNm module shall not execute the service and shall
        return E_NOT_OK.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_RequestBusSync</srcid><srcstatus/><internalId>1647</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0080</srcid><srcstatus/><internalId>1747</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1650</srcid><srcstatus/><internalId>967</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00187</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>232</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>476</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00128.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>If CanNm_PassiveStartUp is called in the Bus-Sleep Mode, the CanNm module shall
           enter the Network Mode; by default the CanNm module shall enter the Repeat Message
           State (refer to SWS_CanNm_00314).</description>
      <comment>In the Bus-Sleep Mode is assumed that the network is released, unless bus
           communication is explicitly requested.</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32019</srcid><srcstatus/><internalId>1577</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_33025</srcid><srcstatus/><internalId>1648</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0087</srcid><srcstatus/><internalId>1651</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_State_Transitions_PassiveMode_Multicore_1</srcid><srcstatus/><internalId>1665</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_474</srcid><srcstatus/><internalId>841</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.PASSIVE_START_BUS_SLEEP_MODE</srcid><srcstatus/><internalId>1420</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00128</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>477</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00128.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>If CanNm_PassiveStartUp is called in the Prepare Bus-Sleep Mode, the CanNm module
           shall enter the Network Mode; by default the CanNm module shall enter the Repeat
           Message State (refer to SWS_CanNm_00315).</description>
      <comment>In the Prepare Bus-Sleep Mode is assumed that the network is released, unless bus
           communication is explicitly requested.</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32020</srcid><srcstatus/><internalId>1578</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_33025</srcid><srcstatus/><internalId>1648</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0087</srcid><srcstatus/><internalId>1651</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_474</srcid><srcstatus/><internalId>841</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.PASSIVE_START_PREPARE_BUS_SLEEP_MODE</srcid><srcstatus/><internalId>1447</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00128</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>478</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.ECUC_CanNm_00059.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>CanNmPnResetTime shall be greater than CanNmMsgCycleTime
           if CanNmPnEnabled (channel configuration) is set to true.</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1695</srcid><srcstatus/><internalId>1311</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_PncEnabledMsgCycleTime</srcid><srcstatus/><internalId>1603</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_PncDisabledMsgCycleTime</srcid><srcstatus/><internalId>1605</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00059</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>479</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.ECUC_CanNm_00059.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>CanNmPnResetTime shall be less than CanNmTimeoutTime
           if CanNmPnEnabled (channel configuration) is set to true.</description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1698</srcid><srcstatus/><internalId>1312</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_PncEnabledNmTimoutTime</srcid><srcstatus/><internalId>1604</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_PncDisabledNmTimoutTime</srcid><srcstatus/><internalId>1606</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00059</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>480</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00316.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
          Type or error       : API service used without module initialization
          Relevance           : Development
          Related error code  : CANNM_E_NO_INIT
          Error Value         : 0x01
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_442</srcid><srcstatus/><internalId>838</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_536</srcid><srcstatus/><internalId>848</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_608</srcid><srcstatus/><internalId>856</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_678</srcid><srcstatus/><internalId>864</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_752</srcid><srcstatus/><internalId>872</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_841</srcid><srcstatus/><internalId>881</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_938</srcid><srcstatus/><internalId>891</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1025</srcid><srcstatus/><internalId>900</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1127</srcid><srcstatus/><internalId>910</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1214</srcid><srcstatus/><internalId>920</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1306</srcid><srcstatus/><internalId>931</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1391</srcid><srcstatus/><internalId>940</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1482</srcid><srcstatus/><internalId>949</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1611</srcid><srcstatus/><internalId>964</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1705</srcid><srcstatus/><internalId>972</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1881</srcid><srcstatus/><internalId>986</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1990</srcid><srcstatus/><internalId>995</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2247</srcid><srcstatus/><internalId>1015</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2418</srcid><srcstatus/><internalId>1031</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2480</srcid><srcstatus/><internalId>1038</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32007</srcid><srcstatus/><internalId>1501</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_DETchecks_ConfirmPnAvailability</srcid><srcstatus/><internalId>1509</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_DET</srcid><srcstatus/><internalId>1666</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00316</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>367</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations><ruleid>WRN.impl.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>481</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00316.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
          Type or error       : API service called with wrong channel handle
          Relevance           : Development
          Related error code  : CANNM_E_INVALID_CHANNEL
          Error Value         : 0x02
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_450</srcid><srcstatus/><internalId>839</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_545</srcid><srcstatus/><internalId>849</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_617</srcid><srcstatus/><internalId>857</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_686</srcid><srcstatus/><internalId>865</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_760</srcid><srcstatus/><internalId>873</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_849</srcid><srcstatus/><internalId>882</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_946</srcid><srcstatus/><internalId>892</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1033</srcid><srcstatus/><internalId>901</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1136</srcid><srcstatus/><internalId>911</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1224</srcid><srcstatus/><internalId>921</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1314</srcid><srcstatus/><internalId>932</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1399</srcid><srcstatus/><internalId>941</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1490</srcid><srcstatus/><internalId>950</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1620</srcid><srcstatus/><internalId>965</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1714</srcid><srcstatus/><internalId>973</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2426</srcid><srcstatus/><internalId>1032</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2488</srcid><srcstatus/><internalId>1039</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32008</srcid><srcstatus/><internalId>1503</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_DETchecks_ConfirmPnAvailability</srcid><srcstatus/><internalId>1509</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_DET</srcid><srcstatus/><internalId>1666</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00316</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>367</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations><ruleid>WRN.impl.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>482</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00316.3</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
          Type or error       : API service called with wrong PDU-ID
          Relevance           : Development
          Related error code  : CANNM_E_INVALID_PDUID
          Error Value         : 0x03
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1907</srcid><srcstatus/><internalId>988</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1996</srcid><srcstatus/><internalId>996</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2253</srcid><srcstatus/><internalId>1016</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32008</srcid><srcstatus/><internalId>1503</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00316</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>367</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00195</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>366</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>483</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00316.4</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
          Type or error       : CanNm initialization has failed, e.g. selected configuration set doesn't exist.
          Relevance           : Development
          Related error code  : CANNM_E_INIT_FAILED
          Error Value         : 0x05
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_309</srcid><srcstatus/><internalId>826</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32007</srcid><srcstatus/><internalId>1501</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00316</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>367</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>484</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00316.5</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
          Type or error       : Null pointer has been passed as an argument
          Relevance           : Development
          Related error code  : CANNM_E_NULL_POINTER
          Error Value         : 0x12
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_299</srcid><srcstatus/><internalId>825</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_952</srcid><srcstatus/><internalId>893</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1039</srcid><srcstatus/><internalId>902</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1142</srcid><srcstatus/><internalId>912</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1232</srcid><srcstatus/><internalId>922</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1405</srcid><srcstatus/><internalId>942</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1496</srcid><srcstatus/><internalId>951</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1502</srcid><srcstatus/><internalId>952</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1573</srcid><srcstatus/><internalId>958</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1721</srcid><srcstatus/><internalId>974</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2008</srcid><srcstatus/><internalId>997</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2262</srcid><srcstatus/><internalId>1018</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32009</srcid><srcstatus/><internalId>1504</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00316</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>367</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations><ruleid>WRN.impl.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>485</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00317.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
          Type or error       : Reception of NM PDUs in Bus-Sleep Mode.
          Relevance           : Development
          Related error code  : CANNM_E_NET_START_IND
          Error Value         : 0x04
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_340</srcid><srcstatus/><internalId>1085</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_NetStartInd_DetError</srcid><srcstatus/><internalId>1506</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_5</srcid><srcstatus/><internalId>1671</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_7</srcid><srcstatus/><internalId>1673</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_8</srcid><srcstatus/><internalId>1674</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00317</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>418</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00317</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>387</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>486</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00317.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
          Type or error       : NM-Timeout Timer has abnormally expired outside of the Ready Sleep
                                State; it may happen: (1) because of Bus-Off state,(2)if some ECU requests
                                bus communication or node detection shortly before the NM-Timeout Timer
                                expires so that a Network Management PDU can not be transmitted in time;
                                this race condition applies to event-triggered systems
          Relevance           : Development
          Related error code  : CANNM_E_NETWORK_TIMEOUT
          Error Value         : 0x11
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_851</srcid><srcstatus/><internalId>1124</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32012</srcid><srcstatus/><internalId>1505</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00317</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>418</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00317</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>387</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>487</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00317.3</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
          Type or error       : A NM message with PN Shutdown Request Bit was received on a channel
                                that is actively coordinated by the ComM PNC Gateway.
          Relevance           : Development
          Related error code  : CANNM_E_INVALID_PN_SYNC_SHUTDOWN_REQUEST
          Error Value         : 0x20
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2121</srcid><srcstatus/><internalId>1004</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_6</srcid><srcstatus/><internalId>1672</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_33</srcid><srcstatus/><internalId>1692</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_34</srcid><srcstatus/><internalId>1693</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_35</srcid><srcstatus/><internalId>1694</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00317</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>418</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00317</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>387</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>488</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00317.4</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
          Type or error       : Retransmission timer for a PN shutdown message has expired, because
                                a PN shutdown message could not be Transmitted on the network within
                                the configured duration of re-transmission.
          Relevance           : Development
          Related error code  : CANNM_E_TRANSMISSION_OF_PN_SHUTDOWN_MESSAGE_FAILED
          Error Value         : 0x21
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2911</srcid><srcstatus/><internalId>1056</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_3046</srcid><srcstatus/><internalId>1058</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_22</srcid><srcstatus/><internalId>1683</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_37</srcid><srcstatus/><internalId>1696</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00317</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>418</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>489</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00066.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If CanNmGlobalPnSupport is set to TRUE and NM Message Tx Timeout Timer
        has expired then CanNm shall call the function Nm_TxTimeoutException.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_NmMessageTxTimeout</srcid><srcstatus/><internalId>1549</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_TxTimeoutCanIfTransmitFails</srcid><srcstatus/><internalId>1550</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_14001</srcid><srcstatus/><internalId>1556</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_ReliableTxConfirmation_001</srcid><srcstatus/><internalId>1707</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_ReliableTxConfirmation_004</srcid><srcstatus/><internalId>1710</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_788</srcid><srcstatus/><internalId>1117</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.Internal_Transition_SENDING_SUB_MODE_1</srcid><srcstatus/><internalId>1448</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00066</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>149</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>490</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00066.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If CanNm_TxConfirmation is called with result E_NOT_OK then CanNm shall
        call the function Nm_TxTimeoutException.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_ReliableTxConfirmation_003</srcid><srcstatus/><internalId>1709</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1664</srcid><srcstatus/><internalId>1191</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.StateDynamics.Internal_Transition_SENDING_SUB_MODE_1</srcid><srcstatus/><internalId>1448</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00066</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>149</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>491</internalId></specobject>

    <specobject>
      <id>CanNm.EB_Ref.SWS_CanNm_00065</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If CanNmMsgTimeoutTime is defined and CanNm_TxConfirmation is called
        then CanNm shall stop the NM Message Tx Timeout Timer.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_NmMessageTxTimeout</srcid><srcstatus/><internalId>1549</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_ReliableTxConfirmation_001</srcid><srcstatus/><internalId>1707</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_ReliableTxConfirmation_002</srcid><srcstatus/><internalId>1708</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1650</srcid><srcstatus/><internalId>1190</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00065</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>492</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>CanNm.EB.MainFunction.InitCheck</id>
      <status>approved</status>
      <source>EB: ASCCCB-1403</source>
      <version>1</version>
      <description>
        If a Main function of a un-initialized module is called from the
        BSW Scheduler, then it shall return immediately without
        performing any functionality and without raising any errors.
      </description>
      <rationale>
        Main Function processing of an un-initialized Module may result
        in undesired and non defined behaviour.

        Rationale for the deviation list: The SchM module may schedule
        the modules main function before the module is initialized.
        This would result in lots of Det errors during start up.
        Therefore the modules main function does not throw a Det error
        if the module is not yet initialized and simply returns in this
        case.
      </rationale>
      <comment>
        EB requirement is in line with the AUTOSAR 4.0 General SRS
        requirement BSW00450.

        https://issue.ebgroup.elektrobit.com/browse/ASCCCB-1403
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32010</srcid><srcstatus/><internalId>1502</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1788</srcid><srcstatus/><internalId>979</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>493</internalId></specobject>

    <specobject>
      <id>CanNm.EB.ComUserDataSupport.CanNmUserDataRxPdu</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Container Name CanNmUserDataRxPdu
        Description
        This container shall be optional and shall be used to configure the user Nm data PDU,
        if desired by user.
        This container shall only be available if CanNmComUserDataSupport
        is enabled.
        If this container is enabled and CanNmComUserDataSupport is disabled, then configuration
        error shall occur.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2932</srcid><srcstatus/><internalId>1382</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>494</internalId></specobject>

    <specobject>
      <id>CanNm.EB.ComUserDataSupport.CanNmRxUserDataPduRef</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Name  CanNmRxUserDataPduRef
        Description   Reference to the NM User Data I-PDU in the global PDU collection.
        Multiplicity 1
        Type Reference to [ Pdu ]
        ConfigurationClass
        Pre-compile time  X VARIANT-PRE-COMPILE
        Link time  X VARIANT-LINK-TIME, VARIANT-POST-BUILD
        Post-build time  --
        Scope / Dependency   --
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2956</srcid><srcstatus/><internalId>1384</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>495</internalId></specobject>

    <specobject>
      <id>CanNm.EB.ComUserDataSupport.CanNmUserDataRxIndication</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If Container CanNmUserDataRxPdu is enabled by user AND if CanNmComUserDataSupport
        is true, then CanNm shall call PduR_CanNmRxIndication() in the
        CanNm_RxIndication() context and the CanNm User Data shall be forwarded to the
        PduR (i.e., the CanNm Header shall be stripped).
      </description>
      <comment>
        If CanNmUserDataRxPdu is not enabled PduR_CanNmRxIndication() shall not be called
        and if required, user shall retreive CanNm User Data using CanNm_GetuserData()
        function.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_RxIndication</srcid><srcstatus/><internalId>1775</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2158</srcid><srcstatus/><internalId>1008</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>496</internalId></specobject>

    <specobject>
      <id>CanNm.EB.ComUserDataSupport.PduR_CanNmUserDataRxId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If CanNmUserDataRxPdu is enabled, Pdu reference configured in CanNmRxUserDataPduRef
        shall be searched in PduR module's Routing tables for matching PduRSrcPduRef
        and respective PduRSourcePduHandleId shall be used for PduR_CanNmRxIndication()
        call from CanNm. If no matching PduRSrcPduRef is found, configuration error shall occur.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_macros/CanNm_Checks.m_51</srcid><srcstatus/><internalId>773</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>497</internalId></specobject>

    <specobject>
      <id>CanNm.EB.ComUserDataSupport.PduRefNoUserData.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If UserDataLength is 0 for a CanNm channel, then CanNmUserDataTxPdu for
        plugin configuration shall be disabled for the respective channel.
      </description>
      <comment>
        This requirement is contradictory to original Austosar Requirement CANNM086.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2860</srcid><srcstatus/><internalId>1376</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>498</internalId></specobject>

    <specobject>
      <id>CanNm.EB.ComUserDataSupport.SetGetUserDataNoUserData</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If UserDataLength is 0 for a CanNm channel, then CanNm_SetUserData() and CanNm_GetUserData() functions
        shall return E_NOT_OK for the respective channel and if DET is enabled, DET error
        CANNM_E_INVALID_FUNCTION_ARG shall be reported.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_SetUserDataDet</srcid><srcstatus/><internalId>1595</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_GetUserdataDet</srcid><srcstatus/><internalId>1776</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_980</srcid><srcstatus/><internalId>896</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1066</srcid><srcstatus/><internalId>905</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>499</internalId></specobject>

    <specobject>
      <id>CanNm.EB.ComUserDataSupport.PduRCallsNoUserData.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If UserDataLength is 0 for a CanNm channel, then CanNm shall not call
        PduR_CanNmTriggerTransmit() for the respective channel.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_BusSynchronization</srcid><srcstatus/><internalId>1773</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_TriggerTransmit</srcid><srcstatus/><internalId>1774</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2367</srcid><srcstatus/><internalId>1024</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>500</internalId></specobject>

    <specobject>
      <id>CanNm.EB.ComUserDataSupport.PduRCallsNoUserData.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If UserDataLength is 0 for a CanNm channel, then CanNm shall not call
        PduR_CanNmRxIndication() for the respective channel.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_UserDataLength0</srcid><srcstatus/><internalId>1602</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_RxIndication</srcid><srcstatus/><internalId>1775</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2151</srcid><srcstatus/><internalId>1007</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>501</internalId></specobject>

    <specobject>
      <id>CanNm.EB.ComUserDataSupport.PduRCallsNoUserData.3</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If UserDataLength is 0 for a CanNm channel, then CanNm shall not call
        PduR_CanNmTxConfirmation() for the respective channel.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_TriggerTransmit</srcid><srcstatus/><internalId>1774</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1925</srcid><srcstatus/><internalId>990</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>502</internalId></specobject>

    <specobject>
      <id>CanNm.EB.SWS_CanNm_00178_ImmediateNmTransmissions</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        When the Network Management PDU transmission ability is enabled, the CanNm module shall start the CanNm Message
        Cycle Timer with CANNM_MSG_CYCLE_OFFSET irrespective of the case whether the PDU transmission ability was disabled
        when the NM PDUs were transmitted using CanNmImmediateNmCycleTime as cycle time. Thereafter, CanNm Message Cycle
        Timer shall use CANNM_MSG_CYCLE_TIME as the cycle time.
      </description>
      <rationale>
        CanNmImmediateTransmissions is intend to avoid the remote nodes entering BusSleepState when the current
        node re-enters network mode from BusSleepState or PrepareBusSleep state. Disabling transmission and then
        enabling transmission during immediate tranmissions leaves this feature having no effect as the remote nodes would
        enter into BusSleepState during the time transmission is stopped. Therefore, immediate tranmission is aborted
        when the PDU transmission ability is disabled and not resumed once the PDU transmission ability is enabled.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_ImmediateNmTrans_5</srcid><srcstatus/><internalId>1779</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1199</srcid><srcstatus/><internalId>1153</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1208</srcid><srcstatus/><internalId>1155</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>503</internalId></specobject>

    <specobject>
      <id>CanNm.EB.SWS_CanNm_00177_Implicit</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The service CanNm_DisableCommunication shall return E_NOT_OK if the
        Network Management PDU transmission ability is already disabled.
      </description>
      <rationale>
        According to CANNM177, if Network Management PDU transmission ability
        is enabled, CanNm_EnableCommunication shall return E_NOT_OK.
        Similarly this feature is required for CanNm_DisableCommunication.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0114</srcid><srcstatus/><internalId>1736</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_802</srcid><srcstatus/><internalId>875</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>504</internalId></specobject>

    <specobject>
      <id>CanNm.EB.BSWMDGeneration.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The CanNm module's generator shall generate a basic software
        module description (BSWMD) based on the CanNm module's
        configuration containing information on the exclusive areas
        required by the CanNm module's implementation.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/CanNm_Bswmd.arxml.m4_1069</srcid><srcstatus/><internalId>1408</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>505</internalId></specobject>

    <specobject>
      <id>CanNm.EB.BSWMDGeneration.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The CanNm module's generator shall generate a basic software
        module description (BSWMD) based on the CanNm module's
        configuration containing information on the scheduled
        MainFunctions together with the scheduling period.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/CanNm_Bswmd.arxml.m4_1386</srcid><srcstatus/><internalId>1409</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>506</internalId></specobject>

    <specobject>
      <id>CanNm.EB.BSWMDGeneration.3</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The CanNm module's BSWMD shall be generated using a generator
        mode named "generate_swcd".
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/CanNm_Bswmd.arxml.m4_10</srcid><srcstatus/><internalId>1400</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>507</internalId></specobject>

    <specobject>
      <id>CanNm.EB.UserDataRef.PnEiraRxSduRef</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Reference of CanNmPnEiraRxNSduRef and CanNmRxUserDataPduRef
        must be different.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2979</srcid><srcstatus/><internalId>1386</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>508</internalId></specobject>

    <specobject>
      <id>CanNm.EB.SymbolicName.ecuc_sws_2108_1</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If the attribute SHORT-NAME is specified for a container, the symbolic
        name shall be generated as specified in the requirement [ecuc_sws_2108]
        (from AR-4.0.3 EcuC specification) for the parameter
        CanNmTxConfirmationPduId .

        For CanNmTxConfirmationPduId, the
        symbolic name shall be generated as
          #define CanNmConf_CanNmTxPdu_&amp;lt;SHORT-NAME of CanNmTxPdu&amp;gt;.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_492</srcid><srcstatus/><internalId>749</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>509</internalId></specobject>

    <specobject>
      <id>CanNm.EB.SymbolicName.ecuc_sws_2108_2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the attribute SHORT-NAME is specified for a container, the symbolic
        name shall be generated as specified in the requirement [ecuc_sws_2108]
        (from AR-4.0.3 EcuC specification) for the parameter
        CanNmTxUserDataPduId.

        For CanNmTxUserDataPduId, the
        symbolic name shall be generated as
          #define CanNmConf_CanNmUserDataTxPdu_&amp;lt;SHORT-NAME of CanNmUserDataTxPdu&amp;gt;.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_534</srcid><srcstatus/><internalId>750</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>510</internalId></specobject>

    <specobject>
      <id>CanNm.EB.SymbolicName.ecuc_sws_2108_3</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the attribute SHORT-NAME is specified for a container, the symbolic
        name for the parameter CanNmRxPduId is generated as
        #define CanNmConf_CanNmChannelConfig_&amp;lt;CHANNELNAME&amp;gt;_&amp;lt;SHORT-NAME&amp;gt;
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30002</srcid><srcstatus/><internalId>1475</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_80001</srcid><srcstatus/><internalId>1477</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_451</srcid><srcstatus/><internalId>748</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>511</internalId></specobject>

    <specobject>
      <id>CanNm.EB.SymbolicName.CanNmRxPduId.NoShortName</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the attribute SHORT-NAME is not specified for the container
        CanNmRxPdu, the symbolic name macros for CanNmRxPduId
        shall be generated adhering to the following naming pattern:
          #define CanNmConf_CanNmChannelConfig_&amp;lt;CHANNELNAME&amp;gt;_CanNmRxPdu

        where "&amp;lt;CHANNELNAME&amp;gt;" is name of the channel in which the container
        CanNmRxPdu exists.
      </description>
      <rationale>
        If no short-name is specifed, EB tresos Studio assumes the name
        of the corresponding schema node as a default. Thus, the symbolic name
        macros generated according to requirement [ecuc_sws_2108] will not
        be unique.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_451</srcid><srcstatus/><internalId>748</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>512</internalId></specobject>

    <specobject>
      <id>CanNm.EB.SymbolicName.CanNmTxConfirmationPduId.NoShortName</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the attribute SHORT-NAME is not specified for the container
        CanNmTxPdu, the symbolic name macros for CanNmTxConfirmationPduId
        shall be generated adhering to the following naming pattern:
          #define CanNmConf_CanNmChannelConfig_&amp;lt;CHANNELNAME&amp;gt;_CanNmTxPdu

        where "&amp;lt;CHANNELNAME&amp;gt;" is name of the channel in which
        the container CanNmTxPdu exists.
      </description>
      <rationale>
        If no short-name is specifed, EB tresos Studio assumes the name
        of the corresponding schema node as a default. Thus, the symbolic name
        macros generated according to requirement [ecuc_sws_2108] will not
        be unique.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_492</srcid><srcstatus/><internalId>749</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>513</internalId></specobject>

    <specobject>
      <id>CanNm.EB.SymbolicName.CanNmTxUserDataPduId.NoShortName</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the attribute SHORT-NAME is not specified for the container
        CanNmUserDataTxPdu, the symbolic name macros for CanNmTxUserDataPduId
        shall be generated adhering to the following naming pattern:
          #define CanNmConf_CanNmChannelConfig_&amp;lt;CHANNELNAME&amp;gt;_CanNmUserDataTxPdu

        where &amp;lt;CHANNELNAME&amp;gt;" is name of the channel in which the container
        CanNmUserDataTxPdu exists.
      </description>
      <rationale>
        If no short-name is specifed, EB tresos Studio assumes the name
        of the corresponding schema node as a default. Thus, the symbolic name
        macros generated according to requirement [ecuc_sws_2108] will not
        be unique.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_300011</srcid><srcstatus/><internalId>1476</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_535</srcid><srcstatus/><internalId>751</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>514</internalId></specobject>

    <specobject>
      <id>CanNm.EB.PduRAPIs.TxPduId_1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The 'TxPduId' parameter passed to the function 'PduR_CanNmTxConfirmation'
        for a network channel shall be the value
        of the parameter 'PduRDestPduHandleId' inside the 'PduRDestPdu' container
        in PduR module for which the Pdu reference in 'PduRDestPduRef' matches
        the Pdu reference configured in 'CanNmTxUserDataPduRef' for the channel.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_TriggerTransmit</srcid><srcstatus/><internalId>1774</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1925</srcid><srcstatus/><internalId>990</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>515</internalId></specobject>

    <specobject>
      <id>CanNm.EB.PduRAPIs.TxPduId_2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The 'TxPduId' parameter passed to the functions 'PduR_CanNmTriggerTransmit'
        for a network channel shall be the value
        of the parameter 'PduRDestPduHandleId' inside the 'PduRDestPdu' container
        in PduR module for which the Pdu reference in 'PduRDestPduRef' matches
        the Pdu reference configured in 'CanNmTxUserDataPduRef' for the channel.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_TriggerTransmit</srcid><srcstatus/><internalId>1774</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2376</srcid><srcstatus/><internalId>1025</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>516</internalId></specobject>

    <specobject>
      <id>CanNm.EB.EventQueue</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        An event shall not be added to the event queue if an entry of
        this event is already present in the queue. Therefore, the size of
        the event queue shall be equal to the total number of defined events.
      </description>
      <rationale>
        Not queuing duplicate events avoids an overflow of the queue.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_EventQueue</srcid><srcstatus/><internalId>1507</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_Hsm.c_404</srcid><srcstatus/><internalId>1071</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>517</internalId></specobject>

    <specobject>
      <id>CanNm.EB.ActiveWakeUpBitCBV.dependencyCheck</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the configuration parameter 'CanNmActiveWakeupBitEnabled' is set to
        'true', then "Control Bit Vector" in the NM-PDU shall be enabled.
        I.e. The parameter 'CanNmPduCbvPosition' must be set to a value
        other than "CANNM_PDU_OFF".
      </description>
      <rationale>
        Setting or clearing of ActiveWakeUpBit in the "Control Bit Vector" makes
        sense only if "Control Bit Vector" shall be present in the CBV.
      </rationale>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2290</srcid><srcstatus/><internalId>1342</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>518</internalId></specobject>

    <specobject>
      <id>CanNm.EB.DependencyCheck.CanNmPnEnabled.ComUserDataSupport</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the configuration parameter 'CanNmPnEnabled' is set to 'true',
        the CanNm schema shall ensure that "Com UserData Support" is enabled,
        i.e., the parameter 'CanNmComUserDataSupport' is set to 'true'.
      </description>
      <rationale>
        Without ComUserDataSupport, aggregation of EIRA / ERA does not make
        sense.
      </rationale>
      <comment>
        See http://www.autosar.org/bugzilla/show_bug.cgi?id=53631.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1684</srcid><srcstatus/><internalId>1310</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>519</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmRetryFirstMessageRequest</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If the first transmit request
        after transition into NetworkMode is not accepted by CanIf,
        the message request shall be repeated in the next main function until one
        transmit request is accepted by CanIf.
      </description>
      <rationale>
        This feature can be used in case of partial network wakeup filter to avoid a blocking of
        all messages in case of passive start-up and first message request is not accepted
        by CanIf due to CanSM could not enable transmission path fast enough
        (e.g. in case of asynchronous transceiver handling).
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_CanIf_Not_Ok_10_1</srcid><srcstatus/><internalId>1517</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_CanIf_Not_Ok_10_2</srcid><srcstatus/><internalId>1518</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_CanIf_Not_Ok_8_6</srcid><srcstatus/><internalId>1563</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_CanIf_Not_Ok_8_7</srcid><srcstatus/><internalId>1564</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_CanIf_Not_Ok_8_8</srcid><srcstatus/><internalId>1565</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_CanIf_Not_Ok_8_1</srcid><srcstatus/><internalId>1780</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_CanIf_Not_Ok_8_2</srcid><srcstatus/><internalId>1781</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_CanIf_Not_Ok_8_3</srcid><srcstatus/><internalId>1782</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_CanIf_Not_Ok_8_5</srcid><srcstatus/><internalId>1783</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1762</srcid><srcstatus/><internalId>1203</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>520</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmRetryFirstMessageRequestRepeatMessageState</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If Repeat Message Time is greater than zero
        and NetworkMode is entered (current state Repeat Message State) and the first transmit request
        is not accepted by CanIf the message request shall be repeated in the next main function until one
        transmit request is accepted by CanIf.
        If CanIf fails the RMS timer shall be restarted.
        The Retry and reload of RMS shall be done until CanNmTimer Expires or CanIf accepts request.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_CanIf_Not_Ok_10_1</srcid><srcstatus/><internalId>1517</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_CanIf_Not_Ok_10_2</srcid><srcstatus/><internalId>1518</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_CanIf_Not_Ok_8_1</srcid><srcstatus/><internalId>1780</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_CanIf_Not_Ok_8_2</srcid><srcstatus/><internalId>1781</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_CanIf_Not_Ok_8_3</srcid><srcstatus/><internalId>1782</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_CanIf_Not_Ok_8_5</srcid><srcstatus/><internalId>1783</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1769</srcid><srcstatus/><internalId>1207</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>521</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmRetryFirstMessageRequestNormalOperationState</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If Repeat Message Time is zero
        and the first transmit request after entering Network Mode
        is not accepted by CanIf the message request shall be repeated in the next main function until one
        transmit request is accepted by CanIf.
        The Retry shall be done until CanNmTimer Expires or CanIf accepts request.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_CanIf_Not_Ok_8_6</srcid><srcstatus/><internalId>1563</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1764</srcid><srcstatus/><internalId>1205</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>522</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmRetryFirstMessageRequestReadySleepState_1</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If Repeat Message Time is zero
        and Normal Operation State is entered from Ready Sleep State and the previous
        state change was from Normal Operation State and in the current Network Mode entry
        CanNm Timer has not expired or CanIf_Transmit has not accepted the first request
        the first message shall be sent after MessageCycleOffset.
        If CanIf_Transmit returns E_NOT_OK the retry shall be performed.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_CanIf_Not_Ok_8_7</srcid><srcstatus/><internalId>1564</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1763</srcid><srcstatus/><internalId>1204</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>523</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmRetryFirstMessageRequestReadySleepState_2</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If Repeat Message Time is zero
        and Normal Operation State is entered from Ready Sleep State and in the current
        entry into Network Mode, CanNm Timer has not expired and CanIf_Transmit
        has not accepted the first request the retry shall continue.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_CanIf_Not_Ok_8_8</srcid><srcstatus/><internalId>1565</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1765</srcid><srcstatus/><internalId>1206</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>524</internalId></specobject>

    <specobject>
      <id>CanNm.EB.Config.IMPLEMENTATION_CONFIG_VARIANT</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The IMPLEMENTATION_CONFIG_VARIANT of the module SHALL be set to VariantPostBuild.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_47</srcid><srcstatus/><internalId>1213</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1227</srcid><srcstatus/><internalId>1278</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2644</srcid><srcstatus/><internalId>1358</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2751</srcid><srcstatus/><internalId>1367</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2853</srcid><srcstatus/><internalId>1374</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2949</srcid><srcstatus/><internalId>1383</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>525</internalId></specobject>

    <specobject>
      <id>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The CONFIG-VARIANT (XDM: icc:v) element of the IMPLEMENTATIONCONFIGCLASS
        of each configuration element SHALL be set to VariantPostBuild.
        The CONFIG-CLASS (XDM: class attribute of the icc:v) element SHALL be set
        in a way that the implemented configuration class of the respective parameter
        is reflected (e.g., to PreCompile if it's a pre-compile time parameter
        and to PostBuild if it's a post-build time parameter).
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_48</srcid><srcstatus/><internalId>1214</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_144</srcid><srcstatus/><internalId>1218</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_184</srcid><srcstatus/><internalId>1220</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_211</srcid><srcstatus/><internalId>1223</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_294</srcid><srcstatus/><internalId>1226</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_348</srcid><srcstatus/><internalId>1230</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_394</srcid><srcstatus/><internalId>1233</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_433</srcid><srcstatus/><internalId>1235</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_468</srcid><srcstatus/><internalId>1236</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_501</srcid><srcstatus/><internalId>1238</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_532</srcid><srcstatus/><internalId>1239</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_563</srcid><srcstatus/><internalId>1241</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_592</srcid><srcstatus/><internalId>1243</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_618</srcid><srcstatus/><internalId>1245</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_655</srcid><srcstatus/><internalId>1247</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_693</srcid><srcstatus/><internalId>1249</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_722</srcid><srcstatus/><internalId>1251</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_753</srcid><srcstatus/><internalId>1252</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_784</srcid><srcstatus/><internalId>1254</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_827</srcid><srcstatus/><internalId>1256</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_866</srcid><srcstatus/><internalId>1258</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_907</srcid><srcstatus/><internalId>1260</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_960</srcid><srcstatus/><internalId>1262</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_989</srcid><srcstatus/><internalId>1265</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1048</srcid><srcstatus/><internalId>1267</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1078</srcid><srcstatus/><internalId>1269</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1110</srcid><srcstatus/><internalId>1271</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1146</srcid><srcstatus/><internalId>1273</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1188</srcid><srcstatus/><internalId>1275</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1254</srcid><srcstatus/><internalId>1279</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1297</srcid><srcstatus/><internalId>1283</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1331</srcid><srcstatus/><internalId>1286</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1366</srcid><srcstatus/><internalId>1288</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1398</srcid><srcstatus/><internalId>1290</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1435</srcid><srcstatus/><internalId>1294</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1466</srcid><srcstatus/><internalId>1296</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1494</srcid><srcstatus/><internalId>1298</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1545</srcid><srcstatus/><internalId>1300</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1575</srcid><srcstatus/><internalId>1302</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1607</srcid><srcstatus/><internalId>1304</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1636</srcid><srcstatus/><internalId>1306</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1674</srcid><srcstatus/><internalId>1309</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1724</srcid><srcstatus/><internalId>1314</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1770</srcid><srcstatus/><internalId>1317</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1807</srcid><srcstatus/><internalId>1320</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1844</srcid><srcstatus/><internalId>1322</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1882</srcid><srcstatus/><internalId>1324</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1920</srcid><srcstatus/><internalId>1325</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1967</srcid><srcstatus/><internalId>1327</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2017</srcid><srcstatus/><internalId>1329</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2067</srcid><srcstatus/><internalId>1331</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2121</srcid><srcstatus/><internalId>1333</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2178</srcid><srcstatus/><internalId>1335</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2223</srcid><srcstatus/><internalId>1337</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2272</srcid><srcstatus/><internalId>1341</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2337</srcid><srcstatus/><internalId>1345</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2387</srcid><srcstatus/><internalId>1348</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2444</srcid><srcstatus/><internalId>1350</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2509</srcid><srcstatus/><internalId>1352</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2566</srcid><srcstatus/><internalId>1354</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2602</srcid><srcstatus/><internalId>1356</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2665</srcid><srcstatus/><internalId>1360</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2706</srcid><srcstatus/><internalId>1364</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2775</srcid><srcstatus/><internalId>1369</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2812</srcid><srcstatus/><internalId>1372</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2878</srcid><srcstatus/><internalId>1378</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2913</srcid><srcstatus/><internalId>1381</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2969</srcid><srcstatus/><internalId>1385</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_3031</srcid><srcstatus/><internalId>1390</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_3059</srcid><srcstatus/><internalId>1392</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_3113</srcid><srcstatus/><internalId>1396</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_3153</srcid><srcstatus/><internalId>1399</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations><ruleid>WRN.impl.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>526</internalId></specobject>

    <specobject>
      <id>CanNm.EB.Config.AUTOSAR_4.0.3</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The configuration classes of each configuration parameter shall be selected
        in conformance to AUTOSAR 4.0.3 if not specified different by other requirements
        (the AUTOSAR specification or following requirements define the minimal requirement
        on the configuration classes of the different configuration parameters (i.e., if
        according to the worksheet a specific parameter has a config class of link-time,
        it is permissible that this parameter has a config class of post-build in the real
        implementation. - A config class of pre-compile time however is not permissible)).
      </description>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.ConfigClassLinkTime</srcid><srcstatus/><internalId>675</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>527</internalId></specobject>

    <specobject>
      <id>CanNm.EB.Config.REQPROD_270433_1.AUTOSAR403PB.CanNmTxPduRef</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The CONFIG-CLASS of CanNmTxPduRef SHALL be set to POST-BUILD.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2811</srcid><srcstatus/><internalId>1371</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>528</internalId></specobject>

    <specobject>
      <id>CanNm.EB.Config.REQPROD_270433_1.RFC_54397.CanNmRxPduRef</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The CONFIG-CLASS of CanNmRxPduRef SHALL be set to POST-BUILD.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2705</srcid><srcstatus/><internalId>1363</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>529</internalId></specobject>

    <specobject>
      <id>CanNm.EB.Config.CanNmPnHandleMultipleNetworkRequests</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The CONFIG-CLASS of CanNmPnHandleMultipleNetworkRequests SHALL be set to POST-BUILD.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1769</srcid><srcstatus/><internalId>1316</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>530</internalId></specobject>

    <specobject>
      <id>CanNm.EB.Config.CanNmNodeId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The CONFIG-CLASS of CanNmNodeId SHALL be set to POST-BUILD.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1298</srcid><srcstatus/><internalId>1284</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2224</srcid><srcstatus/><internalId>1338</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>531</internalId></specobject>

    <specobject>
      <id>CanNm.EB.Config.REQPROD_270433_1.AUTOSAR403PB.CanNmPnEnabled</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The CONFIG-CLASS of CanNmPnEnabled SHALL be set to POST-BUILD.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1673</srcid><srcstatus/><internalId>1308</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>532</internalId></specobject>

    <specobject>
      <id>CanNm.EB.Config.REQPROD_270433_1.RFC_54397.CanNmTxUserDataPduRef</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The CONFIG-CLASS of CanNmTxUserDataPduRef SHALL be set to POST-BUILD.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2912</srcid><srcstatus/><internalId>1380</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>533</internalId></specobject>

    <specobject>
      <id>CanNm.EB.Config.REQPROD_270433_1.RFC_58899.CanNmPnFilterMaskByteValue</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The CONFIG-CLASS of CanNmPnFilterMaskByteValue SHALL be set to POST-BUILD.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_3152</srcid><srcstatus/><internalId>1398</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>534</internalId></specobject>

    <specobject>
      <id>CanNm.EB.Config.REQPROD_270433_1.RFC_54397.CanNmChannelConfig</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The POST-BUILD-CHANGEABLE element of CanNmChannelConfig SHALL be set to false.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1222</srcid><srcstatus/><internalId>1277</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>535</internalId></specobject>

    <specobject>
      <id>CanNm.EB.Config.REQPROD_270433_1.RFC_54397.CanNmMsgReducedTime</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The CONFIG-CLASS of CanNmMsgReducedTime SHALL be set to LINK-TIME.
      </description>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.CanNm.CanNmMsgReducedTime.ConfigClass</srcid><srcstatus/><internalId>674</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>536</internalId></specobject>

    <specobject>
      <id>CanNm.EB.Impl.IsValid</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The module SHALL implement the function CanNm_IsValidConfig()
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_203</srcid><srcstatus/><internalId>819</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>537</internalId></specobject>

    <specobject>
      <id>CanNm.EB.Impl.Hash</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The module post-build configuration struct SHALL be extended by a hash value
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_var/xgen/CanNm.xgen_84</srcid><srcstatus/><internalId>1415</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>538</internalId></specobject>

    <specobject>
      <id>CanNm.EB.Impl.Init</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The Init() function SHALL be extended so that the configuration can be obtained from the PbcfgM if a NULL_PTR is passed to the function.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_279</srcid><srcstatus/><internalId>823</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>539</internalId></specobject>

    <specobject>
      <id>CanNm.EB.Format.VCC-62</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The post-build configuration of the module SHALL be provided in Motorola S-Record format as
        defined in the "Motorola M68000 Family Programmer's Reference Manual", Appendix C.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_var/xgen/CanNm.xgen_5</srcid><srcstatus/><internalId>1410</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>540</internalId></specobject>

    <specobject>
      <id>CanNm.EB.Format.C</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The post-build configuration of the module SHALL be provided as _PbCfg.c and _PbCfg.h
        files as well.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_var/xgen/CanNm.xgen_134</srcid><srcstatus/><internalId>1417</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>541</internalId></specobject>

    <specobject>
      <id>CanNm.EB.RelocatablePBCfg</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The boolean configuration parameter CanNmRelocatablePbcfgEnable with
        CONFIG-CLASS PRE-COMPILE with default value of true SHALL be placed
        into the container CanNmGeneral beneath the module definition.
        The parameter SHALL only be available (enabled) if the PbCfgM module
        configuration references the CanNm module.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_166</srcid><srcstatus/><internalId>1219</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm_Test_PBcfgM_Off</srcid><srcstatus/><internalId>1454</internalId></linkedfrom><linkedfrom><srcid>CanNm_Test_PBcfgM_On</srcid><srcstatus/><internalId>1455</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>542</internalId></specobject>

    <specobject>
      <id>CanNm.EB.Config.CanNmMaxPn</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The integer configuration parameter CanNmMaxPn with
        CONFIG-CLASS PRE-COMPILE with default value of 0 SHALL be placed
        into the container CanNmGeneral beneath the module definition.
        The maximum number of Partial Networking Clusters that can be configured.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_198</srcid><srcstatus/><internalId>1222</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>543</internalId></specobject>

    <specobject>
      <id>CanNm.EB.Impl.PbCfgM</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The PbcfgM support in the module SHALL be enabled only when the PbcfgM
        references the module.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_106</srcid><srcstatus/><internalId>718</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>544</internalId></specobject>

    <specobject>
      <id>CanNm.EB.Impl.Relocatable</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The post-build configuration SHALL only be relocatable if
        CanNmRelocatablePbcfgEnable is set to true and if PbcfgM
        enabled relocatable configurations.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_114</srcid><srcstatus/><internalId>719</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate_var/xgen/CanNm.xgen_64</srcid><srcstatus/><internalId>1413</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>545</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmNodeIdCallbackName</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Name: CanNmNodeIdCallback
        Description: Name of the callback function to be called if
                     CanNmNodeIdCallback is enabled.
        Multiplicity: 0..1
        ConfigurationClass: Pre-compile time
        Scope / Dependency: --
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_267</srcid><srcstatus/><internalId>738</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_416</srcid><srcstatus/><internalId>1234</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm_Test_CanNmNodeIdCallback_Off</srcid><srcstatus/><internalId>1482</internalId></linkedfrom><linkedfrom><srcid>CanNm_Test_CanNmNodeIdCallback_On</srcid><srcstatus/><internalId>1483</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>546</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmNodeIdCallbackHeaderName</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Name: CanNmNodeIdCallbackHeader
        Description: The name a header file that will be included to obtain the
                     external declaration of the callback function.
        Multiplicity: 1
        ConfigurationClass: Pre-compile time
        Scope / Dependency: Only available if CanNmNodeIdCallback is enabled.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_77</srcid><srcstatus/><internalId>717</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>547</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmNodeIdCallback.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the parameter 'CanNmNodeIdCallback' is enabled then, API
        'CanNm_GetLocalNodeIdentifier()' shall invoke the callback and return
        the value provided by the callback.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1250</srcid><srcstatus/><internalId>925</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_NODEID_CALLBACK_1</srcid><srcstatus/><internalId>1551</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>548</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmNodeIdCallback.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        When a PDU is transmitted by CanNm, the callback shall be invoked and
        the value provided by the callback shall be set in the position of
        Node Id in the Tx Pdu, if the parameter 'CanNmNodeIdCallback' is enabled.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1444</srcid><srcstatus/><internalId>1174</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_NODEID_CALLBACK_2</srcid><srcstatus/><internalId>1552</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>549</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmNodeIdEnabled</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Name: CanNmNodeIdEnabled
        Description: Pre-processor switch for enabling the source node identifier.
        Multiplicity: 1
        Default value: false
        ConfigurationClass: Pre-compile time
        Scope: ECU
        Dependency: calculationFormula = Equal(NmNodeIdEnabled).
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_195</srcid><srcstatus/><internalId>730</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1268</srcid><srcstatus/><internalId>1280</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>550</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmNodeDetectionEnabled</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Parameter CanNmNodeDetectionEnabled can be set to true only if
        CanNmNodeIdEnabled is set to true.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1409</srcid><srcstatus/><internalId>1292</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>551</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmPduNidPosition</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If CanNmNodeIdEnabled is set to true then
        parameter CanNmPduNidPosition must differ from CANNM_PDU_OFF.
        If CanNmNodeIdEnabled is set to false then
        parameter CanNmPduNidPosition must equal CANNM_PDU_OFF.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2353</srcid><srcstatus/><internalId>1346</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>552</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmRxPduId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The parameter CanNmRxPduId has to be the same for all the items inside a channel.
        eg. ch0 RxPduId0 = 0
                RxPduId1 = 0
                RxPduId2 = 0
            ch1 RxPduId0 = 1
                RxPduId1 = 1
                RxPduId2 = 1
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2682</srcid><srcstatus/><internalId>1361</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>553</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmRxPduRef</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The parameter PduLength referenced by "CanNmRxPduRef"s should be equal inside a channel.
        eg. ch0 RxPduRef0/PduLength = 6
                RxPduRef1/PduLength = 6
                RxPduRef2/PduLength = 6
            ch1 RxPduRef3/PduLength = 8
                RxPduRef4/PduLength = 8
                RxPduRef5/PduLength = 8
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2720</srcid><srcstatus/><internalId>1365</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>554</internalId></specobject>

    <specobject>
      <id>CanNm.EB.BLR_PNC</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The configuration parameter CanNmBusLoadReductionEnabled cannot be true
        if CanNmPnEnabled == true for at least one CanNm Channel.
      </description>
      <comment>
        This requirement originate form the Autosar Bugzilla ticket no. 51683.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_306</srcid><srcstatus/><internalId>1228</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>555</internalId></specobject>

    <specobject>
      <id>CanNm.EB.NmTimer</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The NM-Timeout timer shall not be (re-)started if the communication was disabled via
        the CanNm_DisableCommunication() API.
      </description>
      <comment>
        This requirement originate form the Autosar Bugzilla ticket no. 68608.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_380</srcid><srcstatus/><internalId>1089</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1642</srcid><srcstatus/><internalId>1188</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_Timers_Com_Disable0</srcid><srcstatus/><internalId>1527</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Timers_Com_Disable1</srcid><srcstatus/><internalId>1528</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Timers_Com_Disable2</srcid><srcstatus/><internalId>1529</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Timers_Com_Disable3</srcid><srcstatus/><internalId>1530</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>556</internalId></specobject>

    <specobject>
      <id>CanNm.EB.ImplicitUninitState</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Before the initialization, CanNm module shall set the Network Management State
        to NM_STATE_UNINIT.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_265</srcid><srcstatus/><internalId>822</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_DET_OFF_NotValidCfg</srcid><srcstatus/><internalId>1568</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_DET_OFF_ValidCfg</srcid><srcstatus/><internalId>1569</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>557</internalId></specobject>

    <specobject>
      <id>CanNm.EB.NotSuccessfulInitialization</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the initialization of the CanNm module (CanNm_Init) is not successful, the CanNm
        module shall remain in the Network Management State: NM_STATE_UNINIT.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_265</srcid><srcstatus/><internalId>822</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_DET_OFF_NotValidCfg</srcid><srcstatus/><internalId>1568</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>558</internalId></specobject>

    <specobject>
      <id>CanNm.EB.PostBuildRamSize.1</id>
      <status>approved</status>
      <version>1</version>
      <description>
        In case parameter CanNmPostBuildRamSize is disabled the module shall calculate
        internally the size needed for internal TX and RX buffers.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Lcfg.h.m4_11</srcid><srcstatus/><internalId>752</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>559</internalId></specobject>

    <specobject>
      <id>CanNm.EB.PostBuildRamSize.2</id>
      <status>approved</status>
      <version>1</version>
      <description>
        In case parameter CanNmPostBuildRamSize is enabled and it's value is less
        than the internal size needed for TX and RX buffers, the module shall generate
        error at generation time.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_macros/CanNm_Checks.m_131</srcid><srcstatus/><internalId>774</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>560</internalId></specobject>

    <specobject>
      <id>CanNm.EB.PostBuildRamSize.3</id>
      <status>approved</status>
      <version>1</version>
      <description>
        At postbuild time if the computed size needed by internal TX and RX buffers
        is greater than the precompile time value allocated for TX and RX buffers,
        CanNm shalle generate a DET error CANNM_E_INIT_FAILED at initialization.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_319</srcid><srcstatus/><internalId>827</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_WrongPostBuildRamSize</srcid><srcstatus/><internalId>1508</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>561</internalId></specobject>

    <specobject>
      <id>CanNm.EB.PnEnabled_FALSE.1</id>
      <status>approved</status>
      <version>1</version>
      <description>
        In case CanNm_RxIndication is called and PnEnabled for a channel is set to false,
        CanNm shall not perform aggregation of the Partial Network Information.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2035</srcid><srcstatus/><internalId>1001</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_CanNmPnEnabled_False_1</srcid><srcstatus/><internalId>1607</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>562</internalId></specobject>

    <specobject>
      <id>CanNm.EB.PnEnabled_FALSE.2</id>
      <status>approved</status>
      <version>1</version>
      <description>
        In case transmision is done and PnEnabled for a channel is set to false,
        CanNm shall not perform EIRA aggregation of the Partial Network Information.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2381</srcid><srcstatus/><internalId>1026</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_CanNmPnEnabled_False_1</srcid><srcstatus/><internalId>1607</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>563</internalId></specobject>

    <specobject>
      <id>CanNm.EB.PBSelectable.FileName</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If postBuildVariant returns a non-empty string, the module's post-build-time
        configuration file names shall be changed in the following way:
        CanNm_PBcfg.* to CanNm_&lt;postBuildVariant&gt;_PBcfg.*
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_var/xgen/CanNm.xgen_36</srcid><srcstatus/><internalId>1411</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_PB_GetNodeIdentifier</srcid><srcstatus/><internalId>1608</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_PB_CanNmRxIndication</srcid><srcstatus/><internalId>1609</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>564</internalId></specobject>

    <specobject>
      <id>CanNm.EB.PBSelectable.TypeName</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If postBuildVariant returns a non-empty string, the module's post-build-time
        configuration type/variable names shall be changed in the following way:
        - CanNm_[Const]ConfigLayoutType to CanNm_&lt;postBuildVariant&gt;_[Const]ConfigLayoutType
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_var/xgen/CanNm.xgen_42</srcid><srcstatus/><internalId>1412</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_PB_GetNodeIdentifier</srcid><srcstatus/><internalId>1608</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_PB_CanNmRxIndication</srcid><srcstatus/><internalId>1609</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>565</internalId></specobject>

    <specobject>
      <id>CanNm.EB.PBSelectable.Master</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If postBuildVariant returns a non-empty string, the module shall generate a post-build-time
        configuration file CanNm_PBcfg.h/c which includes all the variants specific post-build-time
        configurations (CanNm_&lt;postBuildVariant&gt;[_*]_PBcfg.h/c).
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_PBcfg.h_8</srcid><srcstatus/><internalId>753</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/src/CanNm_PBcfg.c_4</srcid><srcstatus/><internalId>772</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_PB_GetNodeIdentifier</srcid><srcstatus/><internalId>1608</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_PB_CanNmRxIndication</srcid><srcstatus/><internalId>1609</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>566</internalId></specobject>

    <specobject>
      <id>CanNm.EB.Config.CanNmMultiCoreSupport</id>
      <status>approved</status>
      <version>1</version>
      <description>
        The boolean configuration parameter CanNmMultiCoreSupport enables module multi core support.
        The parameter has CONFIG-CLASS PRE-COMPILE  and default value FALSE.
        It SHALL be placed into CanNmGeneralContainer.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_425</srcid><srcstatus/><internalId>745</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/CanNm_Int.h.m4_484</srcid><srcstatus/><internalId>809</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_102</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_MultiCoreSupport_COMPILE_1</srcid><srcstatus/><internalId>1461</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_MultiCoreSupport_COMPILE_2</srcid><srcstatus/><internalId>1462</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>567</internalId></specobject>

    <specobject>
      <id>CanNm.EB.SchM_Call_Nm_NetworkStartIndication</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If CanNmMultiCoreSupport is TRUE, CanNm shall call
        SchM_Call_CanNm_RequiredCSEntry_Nm_NetworkStartIndication
        instead of Nm_NetworkStartIndication.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/CanNm_Int.h.m4_429</srcid><srcstatus/><internalId>798</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_Schm_Call_TRUE</srcid><srcstatus/><internalId>1612</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Schm_Call_NetworkStartIndication_TRUE</srcid><srcstatus/><internalId>1613</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Schm_Call_PduRxIndication_False</srcid><srcstatus/><internalId>1618</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>568</internalId></specobject>

    <specobject>
      <id>CanNm.EB.SchM_Call_Nm_NetworkMode</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If CanNmMultiCoreSupport is TRUE, CanNm shall call
        SchM_Call_CanNm_RequiredCSEntry_Nm_NetworkMode instead
        of Nm_NetworkMode.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/CanNm_Int.h.m4_434</srcid><srcstatus/><internalId>799</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_Schm_Call_TRUE</srcid><srcstatus/><internalId>1612</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Schm_Call_PrepareBusSleepMode_TRUE</srcid><srcstatus/><internalId>1614</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>569</internalId></specobject>

    <specobject>
      <id>CanNm.EB.SchM_Call_Nm_BusSleepMode</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If CanNmMultiCoreSupport is TRUE, CanNm shall call
        SchM_Call_CanNm_RequiredCSEntry_Nm_BusSleepMode
        instead of Nm_BusSleepMode.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/CanNm_Int.h.m4_439</srcid><srcstatus/><internalId>800</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_Schm_Call_TRUE</srcid><srcstatus/><internalId>1612</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Schm_Call_NetworkStartIndication_TRUE</srcid><srcstatus/><internalId>1613</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Schm_Call_PduRxIndication_False</srcid><srcstatus/><internalId>1618</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>570</internalId></specobject>

    <specobject>
      <id>CanNm.EB.SchM_Call_Nm_PrepareBusSleepMode</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If CanNmMultiCoreSupport is TRUE, CanNm shall call
        SchM_Call_CanNm_RequiredCSEntry_Nm_PrepareBusSleepMode
        instead of Nm_PrepareBusSleepMode.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/CanNm_Int.h.m4_444</srcid><srcstatus/><internalId>801</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_Schm_Call_TRUE</srcid><srcstatus/><internalId>1612</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Schm_Call_PrepareBusSleepMode_TRUE</srcid><srcstatus/><internalId>1614</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>571</internalId></specobject>

    <specobject>
      <id>CanNm.EB.SchM_Call_Nm_RemoteSleepIndication</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If CanNmMultiCoreSupport is TRUE, CanNm shall call
        SchM_Call_CanNm_RequiredCSEntry_Nm_RemoteSleepIndication
        instead of Nm_RemoteSleepIndication.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/CanNm_Int.h.m4_449</srcid><srcstatus/><internalId>802</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_Schm_Call_TRUE</srcid><srcstatus/><internalId>1612</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Schm_Call_RemoteSleep_TRUE</srcid><srcstatus/><internalId>1615</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Schm_Call_RemoteSleep_False</srcid><srcstatus/><internalId>1620</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>572</internalId></specobject>

    <specobject>
      <id>CanNm.EB.SchM_Call_Nm_RemoteSleepCancellation</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If CanNmMultiCoreSupport is TRUE, CanNm shall call
        SchM_Call_CanNm_RequiredCSEntry_Nm_RemoteSleepCancellation
        instead of Nm_RemoteSleepCancellation.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/CanNm_Int.h.m4_454</srcid><srcstatus/><internalId>803</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_Schm_Call_TRUE</srcid><srcstatus/><internalId>1612</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Schm_Call_RemoteSleep_TRUE</srcid><srcstatus/><internalId>1615</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Schm_Call_RemoteSleep_False</srcid><srcstatus/><internalId>1620</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>573</internalId></specobject>

    <specobject>
      <id>CanNm.EB.SchM_Call_Nm_PduRxIndication</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If CanNmMultiCoreSupport is TRUE, CanNm shall call
        SchM_Call_CanNm_RequiredCSEntry_Nm_PduRxIndication
        instead of Nm_PduRxIndication.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/CanNm_Int.h.m4_459</srcid><srcstatus/><internalId>804</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_Schm_Call_TRUE</srcid><srcstatus/><internalId>1612</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Schm_Call_NetworkStartIndication_TRUE</srcid><srcstatus/><internalId>1613</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Schm_Call_PduRxIndication_False</srcid><srcstatus/><internalId>1618</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>574</internalId></specobject>

    <specobject>
      <id>CanNm.EB.SchM_Call_Nm_StateChangeNotification</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If CanNmMultiCoreSupport is TRUE, CanNm shall call
        SchM_Call_CanNm_RequiredCSEntry_Nm_StateChangeNotification
        instead of Nm_StateChangeNotification.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/CanNm_Int.h.m4_464</srcid><srcstatus/><internalId>805</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_Schm_Call_TRUE</srcid><srcstatus/><internalId>1612</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Schm_Call_PrepareBusSleepMode_TRUE</srcid><srcstatus/><internalId>1614</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Schm_Call_PduRxIndication_False</srcid><srcstatus/><internalId>1618</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>575</internalId></specobject>

    <specobject>
      <id>CanNm.EB.SchM_Call_Nm_RepeatMessageIndication</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If CanNmMultiCoreSupport is TRUE, CanNm shall call
        SchM_Call_CanNm_RequiredCSEntry_Nm_RepeatMessageIndication
        instead of Nm_RepeatMessageIndication.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/CanNm_Int.h.m4_469</srcid><srcstatus/><internalId>806</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_Schm_Call_TRUE</srcid><srcstatus/><internalId>1612</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Schm_Call_RepeatMessageIndication_TRUE</srcid><srcstatus/><internalId>1616</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Schm_Call_RepeatMessageIndication_False</srcid><srcstatus/><internalId>1619</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>576</internalId></specobject>

    <specobject>
      <id>CanNm.EB.SchM_Call_Nm_TxTimeoutException</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If CanNmMultiCoreSupport is TRUE, CanNm shall call
        SchM_Call_CanNm_RequiredCSEntry_Nm_TxTimeoutException
        instead of Nm_TxTimeoutException.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/CanNm_Int.h.m4_474</srcid><srcstatus/><internalId>807</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_Schm_Call_TRUE</srcid><srcstatus/><internalId>1612</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Schm_Call_TxTimeoutException_TRUE</srcid><srcstatus/><internalId>1617</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_ReliableTxConfirmation_Schm_01</srcid><srcstatus/><internalId>1715</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_ReliableTxConfirmation_Schm_02</srcid><srcstatus/><internalId>1716</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>577</internalId></specobject>

    <specobject>
      <id>CanNm.EB.SchM_Call_Nm_CarWakeUpIndication</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If CanNmMultiCoreSupport is TRUE, CanNm shall call
        SchM_Call_CanNm_RequiredCSEntry_Nm_CarWakeUpIndication
        instead of Nm_CarWakeUpIndication.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/CanNm_Int.h.m4_479</srcid><srcstatus/><internalId>808</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_Schm_Call_TRUE</srcid><srcstatus/><internalId>1612</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Schm_Call_NetworkStartIndication_TRUE</srcid><srcstatus/><internalId>1613</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Schm_Call_PduRxIndication_False</srcid><srcstatus/><internalId>1618</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>578</internalId></specobject>

    <specobject>
      <id>CanNm.EB.SchM_Call_DET</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If CanNmMultiCoreSupport is TRUE and DET is enabled and SchM_Call returns
        a different value from SCHM_E_OK, DET shall be reported.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2190</srcid><srcstatus/><internalId>1011</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2676</srcid><srcstatus/><internalId>1046</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_292</srcid><srcstatus/><internalId>1080</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_315</srcid><srcstatus/><internalId>1082</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_331</srcid><srcstatus/><internalId>1084</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_394</srcid><srcstatus/><internalId>1092</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_679</srcid><srcstatus/><internalId>1112</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_714</srcid><srcstatus/><internalId>1114</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_795</srcid><srcstatus/><internalId>1118</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_969</srcid><srcstatus/><internalId>1132</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1057</srcid><srcstatus/><internalId>1138</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1093</srcid><srcstatus/><internalId>1140</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1331</srcid><srcstatus/><internalId>1164</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1387</srcid><srcstatus/><internalId>1169</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1586</srcid><srcstatus/><internalId>1183</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1671</srcid><srcstatus/><internalId>1192</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1875</srcid><srcstatus/><internalId>1211</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_Schm_Call_StateChangeNotification</srcid><srcstatus/><internalId>1621</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Schm_Call_BusSleepMode</srcid><srcstatus/><internalId>1622</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Schm_Call_NetworkStartIndication</srcid><srcstatus/><internalId>1623</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Schm_Call_PduRxIndication</srcid><srcstatus/><internalId>1624</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Schm_Call_PduRxIndication_1</srcid><srcstatus/><internalId>1625</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Schm_Call_NetworkMode</srcid><srcstatus/><internalId>1626</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Schm_Call_NetworkMode_1</srcid><srcstatus/><internalId>1627</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Schm_Call_NetworkMode_2</srcid><srcstatus/><internalId>1628</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Schm_Call_NetworkMode_3</srcid><srcstatus/><internalId>1629</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Schm_Call_PrepareBusSleepMode</srcid><srcstatus/><internalId>1630</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Schm_Call_RemoteSleepIndication</srcid><srcstatus/><internalId>1631</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Schm_Call_RemoteSleepCancellation</srcid><srcstatus/><internalId>1632</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Schm_Call_CarWakeUpIndication</srcid><srcstatus/><internalId>1633</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Schm_Call_TxTimeoutException</srcid><srcstatus/><internalId>1634</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_Schm_Call_RepeatMessageIndication</srcid><srcstatus/><internalId>1635</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_ReliableTxConfirmation_Schm_02</srcid><srcstatus/><internalId>1716</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations><ruleid>WRN.impl.needscoverage.count</ruleid><ruleid>WRN.swuts.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>579</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmPnInfo</id>
      <status>approved</status>
      <version>2</version>
      <description>
        The length of the (((CanNmPnInfoOffset + CanNmPnInfoLength) -1) should not be greater
        than 63.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_3012</srcid><srcstatus/><internalId>1388</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_GEN_10004</srcid><srcstatus/><internalId>1487</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_CanNmPnInfoOffset</srcid><srcstatus/><internalId>1636</internalId></linkedfrom><linkedfrom><srcid>TS_CANNM_CanNmPnInfo_504PNCs</srcid><srcstatus/><internalId>1725</internalId></linkedfrom><linkedfrom><srcid>TS_CANNM_CanNmPnResetTime_504PNCs</srcid><srcstatus/><internalId>1726</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>580</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNm_NetworkGwEraRequest</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Service name      : CanNm_NetworkGwEraRequest
        Syntax            : Std_ReturnType CanNm_NetworkGwEraRequest(
                                const NetworkHandleType nmChannelHandle  )
        Service ID[hex]   : 0xFE
        Sync/Async        : Asynchronous
        Reentrancy        : Reentrant (but not for the same NM-channel)
        Parameters(in)    : nmChannelHandle Identification of the NM-channel
        Parameters(inout) : None
        Parameters(out)   : None
        Return value      : Std_ReturnType
                                      E_OK: No error
                                      E_NOT_OK:Requesting of network has failed
        Description       : Request the network, since  ECU needs to communicate on the bus.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_CanNm_NetworkGwEraRequest_NetworkRequest</srcid><srcstatus/><internalId>1539</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_593</srcid><srcstatus/><internalId>853</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>581</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNm_NetworkGwEraRequest.NetworkRequest</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The function call CanNm_NetworkGwEraRequest shall request the network. I.e. the CanNm
        module shall change network state to 'requested'.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_CanNm_NetworkGwEraRequest_NetworkRequest</srcid><srcstatus/><internalId>1539</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_641</srcid><srcstatus/><internalId>859</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>582</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNm_NetworkGwEraRequest.ActiveWakeupBit.BusSleepMode</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In case CanNmActiveWakeupBitEnabled is set to true and Network Mode is entered from BusSleepMode
        due to CanNm_NetworkGwEraRequest active wakeup bit shall not be set.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_CanNm_NetworkGwEraRequest_ActiveWakeupBit_BusSleepMode</srcid><srcstatus/><internalId>1535</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_402</srcid><srcstatus/><internalId>1093</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>583</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNm_NetworkGwEraRequest.ActiveWakeupBit.PrepareBusSleepMode</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In case CanNmActiveWakeupBitEnabled is set to true and Network Mode is entered from PrepareBusSleepMode
        due to CanNm_NetworkGwEraRequest active wakeup bit shall not be set.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_CanNm_NetworkGwEraRequest_ActiveWakeupBit_PrepareBusSleepMode</srcid><srcstatus/><internalId>1536</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_403</srcid><srcstatus/><internalId>1094</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>584</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNm_NetworkGwEraRequest.CanNmImmediateNmTransmissions.BusSleepMode</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In case Network Mode is entered from BusSleepMode
        due to CanNm_NetworkGwEraRequest and CanNmImmediateNmTransmissions is greater than zero,
        immediate messages shall be sent on the bus.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_CanNm_NetworkGwEraRequest_ActiveWakeupBit_BusSleepMode</srcid><srcstatus/><internalId>1535</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1175</srcid><srcstatus/><internalId>1149</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>585</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNm_NetworkGwEraRequest.CanNmImmediateNmTransmissions.PrepareBusSleepMode</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In case Network Mode is entered from PrepareBusSleepMode
        due to CanNm_NetworkGwEraRequest and CanNmImmediateNmTransmissions is greater than zero,
        immediate messages shall be sent on the bus.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_CanNm_NetworkGwEraRequest_ActiveWakeupBit_PrepareBusSleepMode</srcid><srcstatus/><internalId>1536</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1176</srcid><srcstatus/><internalId>1150</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>586</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNm_NetworkGwEraRequest.CanNmImmediateRestartEnabled.PrepareBusSleepMode</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In case Network Mode is entered from PrepareBusSleepMode
        due to CanNm_NetworkGwEraRequest and CanNmImmediateRestartEnabled is set to true,
        immediate messages shall be sent on the bus.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_CanNm_NetworkGwEraRequest_CanNmImmediateRestartEnabled_PrepareBusSleepMode</srcid><srcstatus/><internalId>1559</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1154</srcid><srcstatus/><internalId>1146</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>587</internalId></specobject>

    <specobject>
      <id>CanNm.EB.PassiveStartup.NetworkRequest.Sequence.ActiveWakeupBit.BusSleepMode</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In case CanNmActiveWakeupBitEnabled is set to true and Network Mode is entered from BusSleepMode
        due to PassiveStartup NetworkRequest sequence active wakeup bit shall not be set.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_PassiveStartup_NetworkRequest_Sequence_ActiveWakeupBit_BusSleepMode</srcid><srcstatus/><internalId>1537</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_404</srcid><srcstatus/><internalId>1095</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>588</internalId></specobject>

    <specobject>
      <id>CanNm.EB.PassiveStartup.NetworkRequest.Sequence.ActiveWakeupBit.PrepareBusSleepMode</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In case CanNmActiveWakeupBitEnabled is set to true and Network Mode is entered from PrepareBusSleepMode
        due to PassiveStartup NetworkRequest sequence active wakeup bit shall not be set.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_PassiveStartup_NetworkRequest_Sequence_ActiveWakeupBit_PrepareBusSleepMode</srcid><srcstatus/><internalId>1538</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_405</srcid><srcstatus/><internalId>1096</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>589</internalId></specobject>

    <specobject>
      <id>CanNm.EB.PassiveStartup.NetworkRequest.Sequence.CanNmImmediateNmTransmissions.BusSleepMode</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In case Network Mode is entered from BusSleepMode
        due to PassiveStartup NetworkRequest sequence and CanNmImmediateNmTransmissions is greater than zero,
        immediate messages shall be sent on the bus.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_PassiveStartup_NetworkRequest_Sequence_ActiveWakeupBit_BusSleepMode</srcid><srcstatus/><internalId>1537</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1177</srcid><srcstatus/><internalId>1151</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>590</internalId></specobject>

    <specobject>
      <id>CanNm.EB.PassiveStartup.NetworkRequest.Sequence.CanNmImmediateNmTransmissions.PrepareBusSleepMode</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In case Network Mode is entered from PrepareBusSleepMode
        due to PassiveStartup NetworkRequest sequence and CanNmImmediateNmTransmissions is greater than zero,
        immediate messages shall be sent on the bus.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_PassiveStartup_NetworkRequest_Sequence_ActiveWakeupBit_PrepareBusSleepMode</srcid><srcstatus/><internalId>1538</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1178</srcid><srcstatus/><internalId>1152</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>591</internalId></specobject>

    <specobject>
      <id>CanNm.EB.PassiveStartup.NetworkRequest.Sequence.CanNmImmediateRestartEnabled.PrepareBusSleepMode</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In case Network Mode is entered from PrepareBusSleepMode
        due to PassiveStartup NetworkRequest sequence and CanNmImmediateRestartEnabled is set to true,
        immediate messages shall be sent on the bus.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_PassiveStartup_NetworkRequest_Sequence_CanNmImmediateRestartEnabled_PrepareBusSleepMode</srcid><srcstatus/><internalId>1560</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1155</srcid><srcstatus/><internalId>1147</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>592</internalId></specobject>

    <specobject>
      <id>CanNm.EB.EB_CANNM_Define</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        CanNm shall define EB_CANNM in order for Nm module to check if CanNm module is provided by Elektrobit or not.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_30005</srcid><srcstatus/><internalId>1457</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/CanNm.h_30</srcid><srcstatus/><internalId>785</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>593</internalId></specobject>

    <specobject>
      <id>CanNm.EB.ECUC_CanNm_00029</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Name                 CanNmMsgCycleOffset {CANNM_MSG_CYCLE_OFFSET}
        Description          Time offset in the periodic transmission node. It determines the  start
                             delay of the transmission. Specified in seconds. This  parameter is only
                             valid if CanNmPassiveModeEnabled is False.
        Multiplicity         1
        Type                 EcucFloatParamDef
        Range                0 .. 65.535
        Default value        -
        ConfigurationClass   Pre-compile time   X  VARIANT-PRE-COMPILE
                             Link time          X  VARIANT-LINK-TIME
                             Post-build time    X  VARIANT-POST-BUILD
        Scope/Dependency     scope: Instance
                             dependency: Parameter value &amp;lt; CanMsgCycleTime
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_PB_V0_MsgCycleOffset</srcid><srcstatus/><internalId>1610</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_PB_V1_MsgCycleOffset</srcid><srcstatus/><internalId>1611</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_CanIf_Transmit_Check_1</srcid><srcstatus/><internalId>1639</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_CanIf_Transmit_Check_2</srcid><srcstatus/><internalId>1640</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_CanIf_Transmit_Check_3</srcid><srcstatus/><internalId>1641</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_CanIf_Transmit_Check_4</srcid><srcstatus/><internalId>1642</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_1989</srcid><srcstatus/><internalId>1328</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>594</internalId></specobject>

    <specobject>
      <id>CanNm.EB.SWS_CanNm_00335</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In context of requirement SWS_CanNm_00335 the retry shall be done on the next mainfunction
        only if the current state is Repeat Message State
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1233</srcid><srcstatus/><internalId>1157</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_CanIf_Not_Ok_8_9</srcid><srcstatus/><internalId>1784</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_CanIf_Not_Ok_8_10</srcid><srcstatus/><internalId>1785</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_CanIf_Not_Ok_8_11</srcid><srcstatus/><internalId>1786</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>595</internalId></specobject>

    <specobject>
      <id>CanNm.EB.StateChangeNotification</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In the context of state change notification if the current state is read it shall report the
        current state of the state machine
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_277</srcid><srcstatus/><internalId>1078</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_520</srcid><srcstatus/><internalId>1103</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_880</srcid><srcstatus/><internalId>1126</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1133</srcid><srcstatus/><internalId>1143</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1318</srcid><srcstatus/><internalId>1162</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_StateChangeNotification_0</srcid><srcstatus/><internalId>1547</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>596</internalId></specobject>

    <specobject>
      <id>CanNm.EB.PnSyncShutdown.CanNm_RequestSynchronizedPncShutdown.InvalidPncId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error tracing is enabled (CANNM_DEV_ERROR_DETECT is set to TRUE), and
        CanNm_RequestSynchronizedPncShutdown is called with a value that is outside of range
        (8*CanNmPnInfoOffset) to (8*(CanNmPnInfoOffset + CanNmPnInfoLength) - 1), then
        the CanNm module shall report the error CANNM_E_INVALID_FUNCTION_ARG.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2496</srcid><srcstatus/><internalId>1040</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_DET</srcid><srcstatus/><internalId>1666</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>597</internalId></specobject>

    <specobject>
      <id>CanNm.EB.PnSyncShutdown.CanNm_Transmit</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Any calls to CanNm_Transmit between transmission of a pn synchronized shutdown message and
        reception/timeout for that pn synchronized shutdown message, shall not trigger a new message
        tranmission.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2317</srcid><srcstatus/><internalId>1022</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_23</srcid><srcstatus/><internalId>1684</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>598</internalId></specobject>

    <specobject>
      <id>CanNm.EB.PnSyncShutdown.CanNm_TxConfirmation.Timeout</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If CanNmSynchronizedPncShutdownEnabled is set to TRUE, and
        CanNmPnShutdownMessageRetransmissionDuration is configured, and the CanNm module has
        requested a transmission due to synchronized PNC shutdown, and  a CanNm_TxConfirmation
        timeout occurs, then the CanNm shall keep those PNC IDs stored as pending request for a
        synchronized PNC shutdown and perform a retransmission in the next main function.
      </description>
      <comment>
        This is the equivalent of SWS_CanNm_00465, with the exception that reliable TxConfirmation
        is not implemented, and the retransmission occurs when a CanNm_TxConfirmation timeout occurs
        instead of when CanNm_TxConfirmation returns E_NOT_OK or CanIf_Transmit returns E_NOT_OK.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2990</srcid><srcstatus/><internalId>1057</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_3057</srcid><srcstatus/><internalId>1059</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_3</srcid><srcstatus/><internalId>1669</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_4</srcid><srcstatus/><internalId>1670</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_12</srcid><srcstatus/><internalId>1676</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00465</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>408</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>599</internalId></specobject>

    <specobject>
      <id>CanNm.EB.PnSyncShutdown.CanNm_RequestSynchronizedPncShutdown.Multicore</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If CanNmSynchronizedPncShutdownEnabled is set to TRUE, and requests for synchronized PNC
        shutdown are sent from an NM partition, then the CanNm module shall set for this message
        additionally the following data beneath the normal data:
          - Set the PNSR bit in the CBV to 1
          - If user data is enabled, fetch the available data (either from Com if
            CanNmComUserDataSupport is enabled or from internal storage) and copy the data in the
            user data range of the NM-PDU
          - Write the PNC bit vector with respect to NmPncBitVectorOffset and NmPncBitVectorLength
            of the corresponding NM-channel by setting bits that corresponds to PNC IDs stored as
            pending request for a synchronized PNC shutdown to 1 and all other bits to 0

        Note: The CanNm modul has to aggregate all PNCs which were indicated for a synchronized PNC
        shutdown and transfer the pncId’s to a byte array (PN Info range). Each bit (PN bit) of the
        PN Info range represent a particular PNC. The byteIndex and bitindex within the PN Info
        range of PN bit shall be determined as follows:
          - byteIndex = (PncId div 8)
          - bitIndex = (PncId mod 8)
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_Multicore_1</srcid><srcstatus/><internalId>1686</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/src/CanNm_MainFunction.c_190</srcid><srcstatus/><internalId>771</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>600</internalId></specobject>

    <specobject>
      <id>CanNm.EB.PnSyncShutdown.Nm_ForwardSynchronizedPncShutdown.Multicore</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If CanNmSynchronizedPncShutdownEnabled is TRUE, the PNI bit in the received NM-PDU is set
        to 1 and the PNSR bit is set to 1, CanNm module shall extract the PNC bit vector from the
        received NM-PDU according to the partial network configuration (NmPncBitVectorOffset and
        NmPncBitVectorLength of the corresponding NM-channel) and forward the PNC bit vector to
        Nm module on the Nm partition.

        Note: PNSR Bit set to 1 is only possible if a synchronized PNC shutdown is requested.
        A synchronized PNC shutdown should be handled across the PN topology. Therefore, it is
        assumed that either all coordinators have the synchronized PNC shutdown enabled or all
        coordinators have the synchronized PNC shutdown disabled. A mixture of both would lead to
        an unsynchronized PNC shutdown, which has to be avoided.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_Multicore_2</srcid><srcstatus/><internalId>1687</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_3176</srcid><srcstatus/><internalId>1062</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>601</internalId></specobject>

    <specobject>
      <id>CanNm.EB.Config.CanNmChannelMultiCoreSupport</id>
      <status>approved</status>
      <version>1</version>
      <description>
        Multi core per channel support is enabled if CanNmMultiCoreSupport is set to FALSE
        and there is a channel that has the CanNmComMNetworkHandleRef configuration parameter
        reference with a ComMChannelPartitionRef configuration parameter set.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_Channel_Multicore_MasterPNCPartition_COMPILE_2</srcid><srcstatus/><internalId>1464</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_Channel_Multicore_NoMasterPNCPartition_COMPILE_2</srcid><srcstatus/><internalId>1466</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_GEN_10005</srcid><srcstatus/><internalId>1488</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_GEN_10006</srcid><srcstatus/><internalId>1489</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_438</srcid><srcstatus/><internalId>747</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>602</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmChannelMultiCore.ChannelPartition</id>
      <status>approved</status>
      <version>1</version>
      <description>
        Each CanNm channel shall have a partition associated to it by configuration parameter
        ComMChannelPartitionRef of ComM channel referenced CanNmComMNetworkHandleRef.
      </description>
      <needscoverage>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.Algorithm.ChannelPartition</srcid><srcstatus/><internalId>1418</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>603</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmChannelMultiCore.AggregatePartition</id>
      <status>approved</status>
      <version>1</version>
      <description>
        A partition defined by configuration parameter ComMMasterPNCEcuCPartitionRef of ComM
        shall handle data sent from other partitions if CanNmPnEiraCalcEnabled is set to true.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_GEN_10007</srcid><srcstatus/><internalId>1490</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swdd</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.Dsn.Algorithm.AggregatePartition</srcid><srcstatus/><internalId>1419</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>604</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNm_MainFunction_Main</id>
      <status>approved</status>
      <version>1</version>
      <description>
        Service name    : CanNm_MainFunction_Main
        Syntax          : void CanNm_MainFunction( void )
        Service ID[hex] : 0xFF
        Timing          : FIXED_CYCLIC
        Description     : Main function of the CanNm which processes the handling of PN timers,
                          and PN EIRA information algorithm described in the other requirements.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_Channel_Multicore_MasterPNCPartition_COMPILE_1</srcid><srcstatus/><internalId>1463</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_Channel_Multicore_MultiChannelTypeStubs_COMPILE_1</srcid><srcstatus/><internalId>1480</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_Schm_Call_Channel_Multicore_1</srcid><srcstatus/><internalId>1662</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/src/CanNm_MainFunction.c_76</srcid><srcstatus/><internalId>766</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>605</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNm_MainFunction_Main.Enable</id>
      <status>approved</status>
      <version>1</version>
      <description>
        Function CanNm_MainFunction_Main should be present only if multi core per channel support
        is enabled.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/src/CanNm_MainFunction.c_68</srcid><srcstatus/><internalId>764</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_Schm_Call_Channel_Multicore_1</srcid><srcstatus/><internalId>1662</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>606</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNm_MainFunction_Main.Partition</id>
      <status>approved</status>
      <version>1</version>
      <description>
        Function CanNm_MainFunction_Main should reside on partition defined by configuration
        parameter ComMMasterPNCEcuCPartitionRef of ComM.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/CanNm_Bswmd.arxml.m4_81</srcid><srcstatus/><internalId>1401</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>607</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNm_MainFunction_X</id>
      <status>approved</status>
      <version>1</version>
      <description>
        Service name    : CanNm_MainFunction_X
        Syntax          : void CanNm_MainFunction_X(  void  )
        Service ID[hex] : 0xFF
        Timing          : FIXED_CYCLIC
        Description     : Main function of the CanNm which processes the algorithm described in
                          the other requirements. This function is responsible to handle one CanNm
                          instance of one channel. For each channel X there should be one such
                          function.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_Channel_Multicore_MasterPNCPartition_COMPILE_1</srcid><srcstatus/><internalId>1463</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_Channel_Multicore_NoMasterPNCPartition_COMPILE_1</srcid><srcstatus/><internalId>1465</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_Channel_Multicore_MultiChannelTypeStubs_COMPILE_1</srcid><srcstatus/><internalId>1480</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_Schm_Call_Channel_Multicore_1</srcid><srcstatus/><internalId>1662</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_State_Transitions_Multicore_1</srcid><srcstatus/><internalId>1664</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_State_Transitions_PassiveMode_Multicore_1</srcid><srcstatus/><internalId>1665</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/src/CanNm_MainFunction.c_103</srcid><srcstatus/><internalId>767</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm.EB.CanNm_MainFunction_X.Name</srcid><srcstatus/><internalId>609</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>608</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNm_MainFunction_X.Name</id>
      <status>approved</status>
      <version>1</version>
      <description>
        Name CanNm_MainFunction_X functions should be constructed by appending the
        CanNmRxPduId configuration parameter of each channel, to the string "CanNm_MainFunction_".
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/src/CanNm_MainFunction.c_104</srcid><srcstatus/><internalId>768</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNm_MainFunction_X</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>608</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>609</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNm_MainFunction_X.Enable</id>
      <status>approved</status>
      <version>1</version>
      <description>
        Functions CanNm_MainFunction_X should be present only if multi core per channel support is
        enabled.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/src/CanNm_MainFunction.c_69</srcid><srcstatus/><internalId>765</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_Schm_Call_Channel_Multicore_1</srcid><srcstatus/><internalId>1662</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>610</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNm_MainFunction_X.Partition</id>
      <status>approved</status>
      <version>1</version>
      <description>
        Function CanNm_MainFunction_X should reside on partition defined by configuration
        parameter ComMChannelPartitionRef of a ComM channel, where X is the CanNmRxPduId
        of CanNm channel that references that ComM channel through CanNmComMNetworkHandleRef.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/CanNm_Bswmd.arxml.m4_187</srcid><srcstatus/><internalId>1404</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>611</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmChannelMultiCore.Sender</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If multi core per channel support is enabled then a sender service to send EIRA data from
        that ChannelPartition to the AggregatePartition shall be defined for each channel.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/CanNm_Bswmd.arxml.m4_199</srcid><srcstatus/><internalId>1405</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>612</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmChannelMultiCore.Sender.Partition</id>
      <status>approved</status>
      <version>1</version>
      <description>
        The sender service of one channel shall reside on that channels ChannelPartition.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/CanNm_Bswmd.arxml.m4_200</srcid><srcstatus/><internalId>1406</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>613</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmChannelMultiCore.Sender.Rx</id>
      <status>approved</status>
      <version>1</version>
      <description>
        For each channel on recieving EIRA data, that data shall also be sent by that channel
        sender service to the AggregatePartition.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/CanNm_Bswmd.arxml.m4_201</srcid><srcstatus/><internalId>1407</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_Schm_Call_Channel_Multicore_1</srcid><srcstatus/><internalId>1662</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>614</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmChannelMultiCore.Sender.Tx</id>
      <status>approved</status>
      <version>1</version>
      <description>
        For each channel on sending EIRA data, that data shall also be be sent by that channel
        sender service to the AggregatePartition.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2394</srcid><srcstatus/><internalId>1027</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_Schm_Call_Channel_Multicore_1</srcid><srcstatus/><internalId>1662</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_MulticoreChannel_1</srcid><srcstatus/><internalId>1688</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>615</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmChannelMultiCore.Receiver</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If multi core per channel support is enabled then a receiver service to receive EIRA data
        from each ChannelPartition to the AggregatePartition shall be defined for each channel.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/src/CanNm_MainFunction.c_150</srcid><srcstatus/><internalId>769</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_Channel_Multicore_MasterPNCPartition_COMPILE_1</srcid><srcstatus/><internalId>1463</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_Channel_Multicore_MultiChannelTypeStubs_COMPILE_1</srcid><srcstatus/><internalId>1480</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_Schm_Call_Channel_Multicore_1</srcid><srcstatus/><internalId>1662</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>616</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmChannelMultiCore.Receiver.Partition</id>
      <status>approved</status>
      <version>1</version>
      <description>
        All channel receiver services shall reside on the AggregatePartition.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/CanNm_Bswmd.arxml.m4_93</srcid><srcstatus/><internalId>1402</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>617</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmChannelMultiCore.Receiver.Schedule</id>
      <status>approved</status>
      <version>1</version>
      <description>
        All channel receiver services shall be triggered by RTE on sending data from
        ChannelPartitions to AggregatePartition.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/CanNm_Bswmd.arxml.m4_94</srcid><srcstatus/><internalId>1403</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>618</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmChannelMultiCore.Receiver.Aggregate</id>
      <status>approved</status>
      <version>1</version>
      <description>
        All channel receiver services shall aggregate EIRA data received in a single EIRA buffer.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/src/CanNm_MainFunction.c_161</srcid><srcstatus/><internalId>770</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>619</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmChannelMultiCore.ChannelApplicationId</id>
      <status>approved</status>
      <version>1</version>
      <description>
        At compile time, if multi core per channel support is enabled, each CanNm channel shall
        have associated the Os application id of the application that has OsAppEcucPartitionRef
        referencing the same partition as refrenced by ComMChannelPartitionRef of that channel.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/src/CanNm_Cfg.c_243</srcid><srcstatus/><internalId>763</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>620</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmChannelMultiCore.DetAppIDPassiveStartUp</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If development error detection is enabled, and if multi core per channel support is
        enabled, and function CanNm_PassiveStartUp is called in an os application with a
        different id then the channel's configured application id than the CanNm module shall set
        the error code CANNM_E_INVALID_OSAPPLICATION.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_458</srcid><srcstatus/><internalId>840</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_Schm_Call_Channel_Multicore_DetCheck_ApplicationID</srcid><srcstatus/><internalId>1661</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>621</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmChannelMultiCore.DetAppIDNetworkRequest</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If development error detection is enabled, and if multi core per channel support is
        enabled, and function CanNm_NetworkRequest is called in an os application with a
        different id then the channel's configured application id than the CanNm module shall set
        the error code CANNM_E_INVALID_OSAPPLICATION.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_553</srcid><srcstatus/><internalId>850</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_Schm_Call_Channel_Multicore_DetCheck_ApplicationID</srcid><srcstatus/><internalId>1661</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>622</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmChannelMultiCore.DetAppIDNetworkGwEraRequest</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If development error detection is enabled, and if multi core per channel support is
        enabled, and function CanNm_NetworkGwEraRequest is called in an os application with a
        different id then the channel's configured application id than the CanNm module shall set
        the error code CANNM_E_INVALID_OSAPPLICATION.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_625</srcid><srcstatus/><internalId>858</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_Schm_Call_Channel_Multicore_DetCheck_ApplicationID</srcid><srcstatus/><internalId>1661</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>623</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmChannelMultiCore.DetAppIDNetworkRelease</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If development error detection is enabled, and if multi core per channel support is
        enabled, and function CanNm_NetworkRelease is called in an os application with a
        different id then the channel's configured application id than the CanNm module shall set
        the error code CANNM_E_INVALID_OSAPPLICATION.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_694</srcid><srcstatus/><internalId>866</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_Schm_Call_Channel_Multicore_DetCheck_ApplicationID</srcid><srcstatus/><internalId>1661</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>624</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmChannelMultiCore.DetAppIDDisableCommunication</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If development error detection is enabled, and if multi core per channel support is
        enabled, and function CanNm_DisableCommunication is called in an os application with a
        different id then the channel's configured application id than the CanNm module shall set
        the error code CANNM_E_INVALID_OSAPPLICATION.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_768</srcid><srcstatus/><internalId>874</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_Schm_Call_Channel_Multicore_DetCheck_ApplicationID</srcid><srcstatus/><internalId>1661</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>625</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmChannelMultiCore.DetAppIDEnableCommunication</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If development error detection is enabled, and if multi core per channel support is
        enabled, and function CanNm_EnableCommunication is called in an os application with a
        different id then the channel's configured application id than the CanNm module shall set
        the error code CANNM_E_INVALID_OSAPPLICATION.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_858</srcid><srcstatus/><internalId>883</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_Schm_Call_Channel_Multicore_DetCheck_ApplicationID</srcid><srcstatus/><internalId>1661</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>626</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmChannelMultiCore.DetAppIDSetUserData</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If development error detection is enabled, and if multi core per channel support is
        enabled, and function CanNm_SetUserData is called in an os application with a
        different id then the channel's configured application id than the CanNm module shall set
        the error code CANNM_E_INVALID_OSAPPLICATION.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_960</srcid><srcstatus/><internalId>894</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_Schm_Call_Channel_Multicore_DetCheck_ApplicationID_1</srcid><srcstatus/><internalId>1663</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>627</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmChannelMultiCore.DetAppIDGetUserData</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If development error detection is enabled, and if multi core per channel support is
        enabled, and function CanNm_GetUserData is called in an os application with a
        different id then the channel's configured application id than the CanNm module shall set
        the error code CANNM_E_INVALID_OSAPPLICATION.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1046</srcid><srcstatus/><internalId>903</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_Schm_Call_Channel_Multicore_DetCheck_ApplicationID</srcid><srcstatus/><internalId>1661</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>628</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmChannelMultiCore.DetAppIDGetNodeIdentifier</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If development error detection is enabled, and if multi core per channel support is
        enabled, and function CanNm_GetNodeIdentifier is called in an os application with a
        different id then the channel's configured application id than the CanNm module shall set
        the error code CANNM_E_INVALID_OSAPPLICATION.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1149</srcid><srcstatus/><internalId>913</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_Schm_Call_Channel_Multicore_DetCheck_ApplicationID</srcid><srcstatus/><internalId>1661</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>629</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmChannelMultiCore.DetAppIDGetLocalNodeIdentifier</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If development error detection is enabled, and if multi core per channel support is
        enabled, and function CanNm_GetLocalNodeIdentifier is called in an os application with a
        different id then the channel's configured application id than the CanNm module shall set
        the error code CANNM_E_INVALID_OSAPPLICATION.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1240</srcid><srcstatus/><internalId>923</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_Schm_Call_Channel_Multicore_DetCheck_ApplicationID</srcid><srcstatus/><internalId>1661</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>630</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmChannelMultiCore.DetAppIDRepeatMessageRequest</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If development error detection is enabled, and if multi core per channel support is
        enabled, and function CanNm_RepeatMessageRequest is called in an os application with a
        different id then the channel's configured application id than the CanNm module shall set
        the error code CANNM_E_INVALID_OSAPPLICATION.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1322</srcid><srcstatus/><internalId>933</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_Schm_Call_Channel_Multicore_DetCheck_ApplicationID</srcid><srcstatus/><internalId>1661</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>631</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmChannelMultiCore.DetAppIDGetPduData</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If development error detection is enabled, and if multi core per channel support is
        enabled, and function CanNm_GetPduData is called in an os application with a
        different id then the channel's configured application id than the CanNm module shall set
        the error code CANNM_E_INVALID_OSAPPLICATION.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1412</srcid><srcstatus/><internalId>943</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_Schm_Call_Channel_Multicore_DetCheck_ApplicationID</srcid><srcstatus/><internalId>1661</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>632</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmChannelMultiCore.DetAppIDGetState</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If development error detection is enabled, and if multi core per channel support is
        enabled, and function CanNm_GetState is called in an os application with a
        different id then the channel's configured application id than the CanNm module shall set
        the error code CANNM_E_INVALID_OSAPPLICATION.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1510</srcid><srcstatus/><internalId>953</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_Schm_Call_Channel_Multicore_DetCheck_ApplicationID</srcid><srcstatus/><internalId>1661</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>633</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmChannelMultiCore.DetAppIDCheckRemoteSleepIndication</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If development error detection is enabled, and if multi core per channel support is
        enabled, and function CanNm_CheckRemoteSleepIndication is called in an os application with
        a different id then the channel's configured application id than the CanNm module shall set
        the error code CANNM_E_INVALID_OSAPPLICATION.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1730</srcid><srcstatus/><internalId>975</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_Schm_Call_Channel_Multicore_DetCheck_ApplicationID</srcid><srcstatus/><internalId>1661</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>634</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmChannelMultiCore.DetAppIDTxConfirmation</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If development error detection is enabled, and if multi core per channel support is
        enabled, and function CanNm_TxConfirmation is called in an os application with a
        different id then the channel's configured application id than the CanNm module shall set
        the error code CANNM_E_INVALID_OSAPPLICATION.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_1915</srcid><srcstatus/><internalId>989</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_Schm_Call_Channel_Multicore_DetCheck_ApplicationID</srcid><srcstatus/><internalId>1661</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>635</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmChannelMultiCore.DetAppIDRxIndication</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If development error detection is enabled, and if multi core per channel support is
        enabled, and function CanNm_RxIndication is called in an os application with a
        different id then the channel's configured application id than the CanNm module shall set
        the error code CANNM_E_INVALID_OSAPPLICATION.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2016</srcid><srcstatus/><internalId>998</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_Schm_Call_Channel_Multicore_DetCheck_ApplicationID</srcid><srcstatus/><internalId>1661</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>636</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmChannelMultiCore.DetAppIDTransmit</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If development error detection is enabled, and if multi core per channel support is
        enabled, and function CanNm_Transmit is called in an os application with a
        different id then the channel's configured application id than the CanNm module shall set
        the error code CANNM_E_INVALID_OSAPPLICATION.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2279</srcid><srcstatus/><internalId>1021</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_Schm_Call_Channel_Multicore_DetCheck_ApplicationID</srcid><srcstatus/><internalId>1661</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>637</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmChannelMultiCore.DetAppIDConfirmPnAvailability</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If development error detection is enabled, and if multi core per channel support is
        enabled, and function CanNm_ConfirmPnAvailability is called in an os application with a
        different id then the channel's configured application id than the CanNm module shall set
        the error code CANNM_E_INVALID_OSAPPLICATION.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2434</srcid><srcstatus/><internalId>1033</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_Schm_Call_Channel_Multicore_DetCheck_ApplicationID</srcid><srcstatus/><internalId>1661</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>638</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmChannelMultiCore.DetAppIDRequestSynchronizedPncShutdown</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If development error detection is enabled, and if multi core per channel support is
        enabled, and function CanNm_RequestSynchronizedPncShutdown is called in an os application with a
        different id then the channel's configured application id than the CanNm module shall set
        the error code CANNM_E_INVALID_OSAPPLICATION.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_2504</srcid><srcstatus/><internalId>1041</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_SynchronizedPncShutdown_MulticoreChannel_2</srcid><srcstatus/><internalId>1689</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>639</internalId></specobject>

    <specobject>
      <id>CanNm.EB.ComUserDataSupport.CanNmUserDataTxPdu</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If UserDataLength(RxPdu length - number of control bytes (CBV+NID)) is different then 0 for a
        CanNm channel and CanNmPassiveModeEnabled is set to false and CanNmComUserDataSupport is set to true,
        then CanNmUserDataTxPdu shall be set for the respective channel.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_macros/CanNm_Checks.m_198</srcid><srcstatus/><internalId>775</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_2857</srcid><srcstatus/><internalId>1375</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_GEN_10012</srcid><srcstatus/><internalId>1495</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>640</internalId></specobject>
    
    <specobject>
      <id>CanNm.EB.ComUserDataSupport.NoCanNmUserDataTxPdu</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If UserDataLength(RxPdu length - number of control bytes (CBV+NID)) is 0 for a
        CanNm channel and CanNmPassiveModeEnabled is set to false and CanNmComUserDataSupport is set to true,
        then CanNmUserDataTxPdu shall not be set for the respective channel.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_macros/CanNm_Checks.m_203</srcid><srcstatus/><internalId>776</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_GEN_10013</srcid><srcstatus/><internalId>1496</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>641</internalId></specobject>    
    
    <specobject>
      <id>CanNm.EB.ComUserDataSupport.UserDataLength</id>
      <status>approved</status>
      <version>1</version>
      <description>
        The difference between number of enabled system bytes and length of th RxPdu is the amount of user data bytes.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_macros/CanNm_Checks.m_209</srcid><srcstatus/><internalId>777</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate_macros/CanNm_Checks.m_222</srcid><srcstatus/><internalId>779</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_GEN_10014</srcid><srcstatus/><internalId>1497</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_GEN_10016</srcid><srcstatus/><internalId>1499</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>642</internalId></specobject>        

    <specobject>
      <id>CanNm.EB.ComUserDataSupport.NoCanNmUserDataRxPdu</id>
      <status>approved</status>
      <version>1</version>
      <description>
        If UserDataLength(RxPdu length - number of control bytes (CBV+NID)) is 0 for a
        CanNm channel and CanNmPassiveModeEnabled is set to false and CanNmComUserDataSupport is set to true,
        then CanNmUserDataRxPdu shall not be set for the respective channel.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_macros/CanNm_Checks.m_216</srcid><srcstatus/><internalId>778</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_GEN_10015</srcid><srcstatus/><internalId>1498</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>643</internalId></specobject>    
    
    <specobject>
      <id>CanNm.EB.RxPduLength</id>
      <status>approved</status>
      <version>1</version>
      <description>
        The Rx pdu length of a channel shall be large enough to hold system bytes
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_macros/CanNm_Checks.m_230</srcid><srcstatus/><internalId>780</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_GEN_10017</srcid><srcstatus/><internalId>1500</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>644</internalId></specobject>        

    <specobject>
      <id>CanNm.EB.Config.CanNmPnSupported</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        This parameter shall be a copy of CanNmGlobalPnSupport.
      </description>
      <comment>
        The reason this parameter exits is that CanSM verifies this parameter if is set to true
        to enable partial networking.
        This parameter shall be removed once CanSM uses the new CanNmGlobalPnSupport parameter
      </comment>      
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_126</srcid><srcstatus/><internalId>1217</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>645</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmMultiCoreUseSingleCS</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Name:               CanNmMultiCoreUseSingleCS
        Parent Container    CanNmGeneral
        Description:        In case CanNmMultiCoreUseSingleCS is set to TRUE, single client server
                            shall be used for CanNm_PassiveStartup, CanNm_NetworkRequest and 
                            CanNm_NetworkRelease.
        Multiplicity:       1
        Type:               EcucBooleanParamDef
        Default value:      false
        ConfigurationClass: Pre-compile time X All variants
                            Link time        -
                            Post-build time  -
        Dependency:         dependency: Parameter shall be set to false if CanNmMultiCoreSupport is
                                        set to false.
                                        Parameter shall have the same value as NmMultiCoreSupport.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/CanNm_Cfg.h.m4_434</srcid><srcstatus/><internalId>746</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_71</srcid><srcstatus/><internalId>1215</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_CanNm_MultipleNetworkOperations_02</srcid><srcstatus/><internalId>1718</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_CanNm_MultipleNetworkOperations_03</srcid><srcstatus/><internalId>1719</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_CanNm_MultipleNetworkOperations_04</srcid><srcstatus/><internalId>1720</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>646</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmMultiCoreUseSingleCS.CanNm_MultipleNetworkOperations</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Service name      : CanNm_MultipleNetworkOperations
        Syntax            : Std_ReturnType  CanNm_MultipleNetworkOperations(
                                NetworkHandleType nmChannelHandle, uint8 operation)

        Service ID[hex]   : -
        Sync/Async        : Asynchronous
        Reentrancy        : Reentrant(but not for the same NM-Channel)
        Parameters (in)   : nmChannelHandle  Identification of the NM-channel
                            operation   Identification of operation to be executed 
                                        (0 CanNm_PassiveStartUp, 1 CanNm_NetworkRequest,
                                         2 CanNm_NetworkRelease, 3 CanNm_NetworkGwEraRequest,)
        Parameters(inout) : None
        Parameters(out)   : None
        Return value      : Std_ReturnType
                                 E_OK: No error
                                 E_NOT_OK: operation failed.
        Description       : In context of multicore, ensures handling order of CanNm_PassiveStartUp,
                            CanNm_NetworkRequest, CanNm_NetworkRelease, CanNm_NetworkGwEraRequest is kept as there are received
                            by being the single client server interface. Executes one of the 
                            operation selected (CanNm_PassiveStartUp, CanNm_NetworkRequest,
                            CanNm_NetworkRelease, CanNm_NetworkGwEraRequest).
        Available via     : CanNm.h
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_3197</srcid><srcstatus/><internalId>1065</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_CanNm_MultipleNetworkOperations_01</srcid><srcstatus/><internalId>1717</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_CanNm_MultipleNetworkOperations_02</srcid><srcstatus/><internalId>1718</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_CanNm_MultipleNetworkOperations_03</srcid><srcstatus/><internalId>1719</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_CanNm_MultipleNetworkOperations_04</srcid><srcstatus/><internalId>1720</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>647</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmMultiCoreUseSingleCS.CanNm_MultipleNetworkOperations.Available</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        CanNm_MultipleNetworkOperations api shall be available only if CanNmMultiCoreUseSingleCS
        parameter is set to true.        
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_3195</srcid><srcstatus/><internalId>1064</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>648</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmMultiCoreUseSingleCS.PassiveStartup</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If CanNm_MultipleNetworkOperations is called with operation parameter set to 0 then
        CanNm_PassiveStartUp shall be executed.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_3205</srcid><srcstatus/><internalId>1066</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_CanNm_MultipleNetworkOperations_01</srcid><srcstatus/><internalId>1717</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_CanNm_MultipleNetworkOperations_04</srcid><srcstatus/><internalId>1720</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>649</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmMultiCoreUseSingleCS.NetworkRequest</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If CanNm_MultipleNetworkOperations is called with operation parameter set to 1 then
        CanNm_NetworkRequest shall be executed.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_3211</srcid><srcstatus/><internalId>1067</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_CanNm_MultipleNetworkOperations_02</srcid><srcstatus/><internalId>1718</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>650</internalId></specobject>

    <specobject>
      <id>CanNm.EB.CanNmMultiCoreUseSingleCS.NetworkRelease</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If CanNm_MultipleNetworkOperations is called with operation parameter set to 2 then 
        CanNm_NetworkRelease shall be executed.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_3216</srcid><srcstatus/><internalId>1068</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_CanNm_MultipleNetworkOperations_02</srcid><srcstatus/><internalId>1718</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>651</internalId></specobject>
    
    <specobject>
      <id>CanNm.EB.CanNmMultiCoreUseSingleCS.NetworkGwEraRequest</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If CanNm_MultipleNetworkOperations is called with operation parameter set to a 
        different value than 0,1,2 then CanNm_NetworkGwEraRequest shall be executed.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_3221</srcid><srcstatus/><internalId>1069</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_CanNm_MultipleNetworkOperations_03</srcid><srcstatus/><internalId>1719</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>652</internalId></specobject>    

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>CanNm.EB.DBGINST001</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Every public API of the module shall have debug instrumentation.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_DBGINST_001</srcid><srcstatus/><internalId>1451</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>653</internalId></specobject>

    <specobject>
      <id>CanNm.EB.DBGINST002</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The parameter of a API shall be available in the entry instrumentation.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_DBGINST_001</srcid><srcstatus/><internalId>1451</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>654</internalId></specobject>

    <specobject>
      <id>CanNm.EB.DBGINST003</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The parameter of a API shall be available in the exit instrumentation.
        If the API has a return value, the very first parameter of the macro shall contain the expected return value.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_DBGINST_001</srcid><srcstatus/><internalId>1451</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>655</internalId></specobject>

    <specobject>
      <id>CanNm.EB.DBGINST004</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The default implementation of the debug instrumentation shall be an empty macro.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_DBGINST_001</srcid><srcstatus/><internalId>1451</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>656</internalId></specobject>

    <specobject>
      <id>CanNm.EB.DBGINST005</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The module shall include the header files Base_Dbg.h in order to allow changing the default implementation of the debug instrumentation.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_DBGINST_001</srcid><srcstatus/><internalId>1451</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>657</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>CanNm.EB.PBCFGM101</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Service name: CanNm_IsValidConfig
        Syntax: Std_ReturnType CanNm_IsValidConfig( void* ConfigPtr )
        Sync/Async: Synchronous
        Reentrancy: Reentrant
        Parameters (in): ConfigPtr, post build configuration manager
        configuration.
        Parameters (inout): None
        Parameters (out): None
        Return value: Returns E_OK if the CanNm configuration is valid otherwise E_NOT_OK. A
        null pointer is interpreted as invalid configuration.
        Description: This function determines if the CanNm configuration is valid. This
        function can be called also before the CanNm is initialized. No error reporting
        is necessary within this function.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm_Test_IsValidConfig</srcid><srcstatus/><internalId>1452</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>658</internalId></specobject>

    <specobject>
      <id>CanNm.EB.PBCFGM102</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        A configuration is valid
        - if the platform signature in the post build configuration equals the value
          determined by the macro TS_PlatformSigIsValid.
        - if the link time signature in the post build configuration equals the link time
          signature in the link time configuration file.
        - if the compile time signature in the post build configuration equals the value of
          the macro CANNM_CFG_SIGNATURE.
        - if the compile time signature of Published information in the post build configuration
          equals the value of the macro CANNM_PUBLIC_INFO_SIGNATURE.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm_Test_IsValidConfig</srcid><srcstatus/><internalId>1452</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>659</internalId></specobject>

    <specobject>
      <id>CanNm.EB.PBCFGM104</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        For generalized consistency of the post build configuration versus the compile time
        configuration:
        - the post build configuration structure shall contain the uint32 value
          CfgSignature.
        - the CanNm_Cfg.h file shall contain the macro
          CANNM_CFG_SIGNATURE.
        - the MCG shall generate this signature value of compile time parameters. The x-path
          function asc:getConfigSignature(nodeset) shall be used to determine the signature out
          of a list of parameters. The list of compile time parameters shall determined with the
          function asc:getConfigClassNodeList(cassString).
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm_Test_IsValidConfig</srcid><srcstatus/><internalId>1452</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>660</internalId></specobject>

    <specobject>
      <id>CanNm.EB.PBCFGM104_1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        For generalized consistency of the post build configuration versus the compile time
        configuration:
        - the post build configuration structure shall contain the uint32 value
          PublicInfoSignature.
        - the CanNm_Cfg.h file shall contain the macro
          CANNM_PUBLIC_INFO_SIGNATURE.
        - The MCG shall generate this signature value from the list of parameters of
          configuration class 'PublishedInformation' except 'Release'. The XPath function
          asc:getConfigSignature(nodeset) shall be used to determine the signature out of the
          list of parameters. The list of parameters shall be determined with the function
          asc:getConfigClassNodeList(cassString).
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm_Test_IsValidConfig</srcid><srcstatus/><internalId>1452</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>661</internalId></specobject>

    <specobject>
      <id>CanNm.EB.PBCFGM105</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        For generalized consistency of the post build configuration versus the link time
        configuration:
        - the post build configuration structure shall contain the uint32 value
          LcfgSignature.
        - the link time configuration shall contain the uint32 value
          CanNm_LcfgSignature.
        - the MCG shall generate this signature value of link time parameters. The x-path
          function asc:getConfigSignature(nodeset) shall be used to determine the signature out
          of a list of parameters. The list of link time parameters shall determined with the
          function asc:getConfigClassNodeList(cassString).
      </description>
      <comment>
        See also:
        https://infohub.automotive.elektrobit.com/display/PRJEBTRESOS/PostBuild#PostBuild-Consistencypostbuildconfig
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm_Test_IsValidConfig</srcid><srcstatus/><internalId>1452</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>662</internalId></specobject>

    <specobject>
      <id>CanNm.EB.PBCFGM106</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        For Platform verification:
        - the CanNm post build configuration structure shall contain the value
          uint32 PlatformSignature. This uint32 must be the first value of the post build
          configuration structure to guarantee the correct access not disturbed by any padding
          bytes.
        - the MCG shall generate this signature for the selected target. The generator shall
          use the x-path function asc:getPlatformSignature() to determine this value.
      </description>
      <comment>
        See also:
        https://infohub.automotive.elektrobit.com/display/PRJEBTRESOS/PostBuild#PostBuild-Consistencypostbuildconfig
        https://issue.ebgroup.elektrobit.com/browse/ASCBASE-1485
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm_Test_IsValidConfig</srcid><srcstatus/><internalId>1452</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>663</internalId></specobject>

    <specobject>
      <id>CanNm.EB.PBCFGM107</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The PbcfgM support shall be enabled or disabled via the macro
        CANNM_PBCFGM_SUPPORT_ENABLED defined in the file
        CanNm_Cfg.h.
        If the PbcfgM configuration references the CanNm configuration
        the macro is set to STD_ON otherwise, or if no PbcfgM configuration is
        available it is set to STD_OFF.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm_Test_IsValidConfig</srcid><srcstatus/><internalId>1452</internalId></linkedfrom><linkedfrom><srcid>CanNm_Test_PBcfgM_Off</srcid><srcstatus/><internalId>1454</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>664</internalId></specobject>

    <specobject>
      <id>CanNm.EB.PBCFGM108</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the CanNm is referenced by the PbcfgM, the parameter regarding the
        relocatable feature, shall not be editable and the MCG shall use the configuration of
        the PbcfgM.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm_Test_PBcfgM_Off</srcid><srcstatus/><internalId>1454</internalId></linkedfrom><linkedfrom><srcid>CanNm_Test_PBcfgM_On</srcid><srcstatus/><internalId>1455</internalId></linkedfrom><linkedfrom><srcid>CanNm_ComTest_NoPbCfg</srcid><srcstatus/><internalId>1481</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/CanNm.xdm.m4_192</srcid><srcstatus/><internalId>1221</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>665</internalId></specobject>

    <specobject>
      <id>CanNm.EB.PBCFGM110</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The CanNm_Init() function must be extended to enable the PbcgfM
        features.
        The initialization function shall obtain the CanNm configuration
        from the PbcfgM if the PbcfgM support is enabled within this CanNm
        and the initialization function is called with a null pointer.
        The validity of the configuration shall be checked by the function
        CanNm_IsValidConfig(). The validity shall be check regardless the PbcfgM
        support is enabled or not.
        If no valid configuration can be obtained the initialization function shall
        return, leaving the CanNm uninitialized.
        In the case error reporting is enabled and no valid configuration can be obtained
        an erroneous parameter shall be indicated.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm_Test_VerifyInitWithPcfgM</srcid><srcstatus/><internalId>1453</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>666</internalId></specobject>

    <specobject>
      <id>CanNm.EB.PostBuild_1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The CanNm module shall compile and build an executable even in the absence
        of a post build configuration, i.e. without any post build generated .c and .h files
        available.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm_ComTest_NoPbCfg</srcid><srcstatus/><internalId>1481</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>667</internalId></specobject>

    <specobject>
      <id>CanNm.EB.PbcfgM_General_3</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The CanNm shall provide the following macros in the header file
        CanNm_Cfg.h:
        - CANNM_RELOCATABLE_CFG_ENABLE which is set to STD_ON
          if relocatable config shall be enabled, otherwise it's set to STD_OFF.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm_Test_PBcfgM_On</srcid><srcstatus/><internalId>1455</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>668</internalId></specobject>

    <specobject>
      <id>CanNm.EB.PbcfgM_General_6</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If PbcfgM support is enabled CanNm shall define the following macros in
        CanNm_PBCfg.c:
        - TS_PB_CFG_LAYOUT_TYPE: Shall expand to the type definition of the Postbuild
          configuration layout type (e.g. CanNm_ConstConfigLayoutType)
        - TS_PB_CFG_NAME: Shall expand to the name of the structure defining the Postbuild
          configuration layout (e.g. CanNm_ConfigLayout)
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>CanNm_Test_PBcfgM_Off</srcid><srcstatus/><internalId>1454</internalId></linkedfrom><linkedfrom><srcid>CanNm_Test_PBcfgM_On</srcid><srcstatus/><internalId>1455</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>669</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>CanNm.EB.PDULENGTHTYPE001</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The CanNm module shall support the following values of PduLengthType:
        [UINT32, UINT16]
      </description>
      <verifycrit>
        Use case 1 - Modules not capable of handling more than 64 kbytes of data:
          - use PduLengthType value 'UINT32' with conformance test
          - verify successful test run, verify absence of metric violations
            (MISRA-C:2012, static code analysis, compiler warnings)
        Use case 2 - Modules capable of handling more than 64 kbytes of data:
          - use conformance test which handles more than 64 kbytes of data
          - apply "boundary" tests using data length of:
            [&lt;&lt;65535,65535, 65536, &gt;131072][bytes]
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_RxIndication</srcid><srcstatus/><internalId>1775</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>670</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>CanNm.EB.Interface.Consistency</id>
       <status>approved</status>
       <source>EB</source>
       <version>1</version>
       <description>
        The module shall provide a mechanism to guarantee consistency of interfaces and
        types between its implementation and its code stub.
       </description>
       <comment>
        The code stub of a module shall provide the same external view than the module itself.
        This is mandatory because unit test of modules test against the code stubs of
        adjacent modules. Inconsistent stubs may result in the situation that incompatible
        interfaces are not detected as unit test stage.
       </comment>
       <verifycrit>
        Create a compile test with two permutations that call all interfaces of a module
        (in both permutations).
        p0: Behave like a regular compile test; call the module generator and compile against
        the implementation of the module.
        p1: Do not generate module code and do not compile the implementation of the module.
        Instead the module shall be replaced with its own code stub.
       </verifycrit>
       <needscoverage>
          <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_VerifyCodeStub</srcid><srcstatus/><internalId>1456</internalId></linkedfrom></coveredby></needscov>
       <containerCovstatus>covered</containerCovstatus></needscoverage>
       
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>671</internalId></specobject>

  </specobjects>
    <specobjects doctype="dev">
    <specobject>
      <id>dev.CanNm.COMUserDataZeroLength</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>517</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00086</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>672</internalId></specobject>
    <specobject>
      <id>dev.CanNm.NoLinkTimeSupport</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>723</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM300</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>673</internalId></specobject>
    <specobject>
      <id>dev.CanNm.CanNmMsgReducedTime.ConfigClass</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>727</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.REQPROD_270433_1.RFC_54397.CanNmMsgReducedTime</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>536</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>674</internalId></specobject>
    <specobject>
      <id>dev.CanNm.ConfigClassLinkTime</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>731</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.AUTOSAR_4.0.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>527</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>675</internalId></specobject>
    <specobject>
      <id>dev.CanNm.PreCompile</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>814</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00032</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>96</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00059</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00072</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00084</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>360</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00068</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00075</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>128</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00076</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>129</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>130</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00074</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>127</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00056</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>112</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>104</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>94</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00088</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>383</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00090</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>385</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>91</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00025</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>90</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00067</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>120</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00023</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>89</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>88</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>384</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.ECUC_CanNm_00097</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>417</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.ECUC_CanNm_00098</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>415</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>86</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>87</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00018</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>85</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00079</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00061</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>116</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00060</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00063</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>676</internalId></specobject>
    <specobject>
      <id>dev.CanNm.CanNmImmediateNmCycleTime</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>899</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>677</internalId></specobject>
    <specobject>
      <id>dev.CanNm.CanNmMsgCycleOffset</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>918</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM300</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>678</internalId></specobject>
    <specobject>
      <id>dev.CanNm.CanNmPnFilterMaskByteIndex</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>939</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00063</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>679</internalId></specobject>
    <specobject>
      <id>dev.CanNm.PostBuildMultiplicity</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>960</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>94</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>84</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>680</internalId></specobject>
    <specobject>
      <id>dev.CanNm.CanNmWaitBusSleepTimeMultiplicity</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>982</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>87</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>681</internalId></specobject>
    <specobject>
      <id>dev.CanNm.CoordinatorSyncSupport</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>1004</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00338</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>316</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00340</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>318</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00341</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>319</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00342</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>320</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00080</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00348</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>362</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>682</internalId></specobject>
    <specobject>
      <id>dev.CanNm.PartianlNetworkLearning</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>1033</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00380</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>392</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00094</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>391</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00382</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>394</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00384</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>395</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_91004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>399</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00381</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>393</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00093</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>390</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00045</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>400</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>683</internalId></specobject>
    <specobject>
      <id>dev.CanNm.DependencyNmTxTimeoutOnPnSupport</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>1062</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00066</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>149</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>684</internalId></specobject>
    <specobject>
      <id>dev.CanNm.CanNmStayInPbsEnabled</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>1084</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00088</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00115</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00092</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>389</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>685</internalId></specobject>
    <specobject>
      <id>dev.CanNm.EnableCommunicationFirstNmMessage</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>1108</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00178</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>227</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>686</internalId></specobject>
    <specobject>
      <id>dev.CanNm.APIReentrancy</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>1129</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00217</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>247</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>687</internalId></specobject>
    <specobject>
      <id>dev.CanNm.MsgCycleOffsetRStoNO</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>1151</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>361</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>688</internalId></specobject>
    <specobject>
      <id>dev.CanNm.ReturnValuePduR_CanNmTriggerTransmit</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>1171</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00450</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>364</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>689</internalId></specobject>
    <specobject>
      <id>dev.CanNm.SynchronizedPncShutdownDependencyToTxConfirmationENotOk</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>1218</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00465</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>408</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>690</internalId></specobject>
    <specobject>
      <id>dev.CanNm.ObsoleteSynchronizedPNCShutdownReq</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>1235</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00463</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>396</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00466</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>397</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>691</internalId></specobject>
    <specobject>
      <id>dev.CanNm.CBVByteLocation</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>1257</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00075</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>692</internalId></specobject>
    <specobject>
      <id>dev.CanNm.HeaderFileNameChanged</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>1278</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00307</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>297</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>693</internalId></specobject>
    <specobject>
      <id>dev.CanNm.APIMissingNm_CoordReadyToSleepCancellation</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>1298</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00325</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>304</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>694</internalId></specobject>
    <specobject>
      <id>dev.CanNm.NmPduReceiveInBussSleepDet</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>1323</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00336</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>315</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>695</internalId></specobject>
    <specobject>
      <id>dev.CanNm.PnMessageFilteringEnteringBussSleep</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>1345</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00403</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>326</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>696</internalId></specobject>
    <specobject>
      <id>dev.CanNm.CanNmMainFunctionPeriodRange</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>1366</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00032</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>96</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>697</internalId></specobject>
    <specobject>
      <id>dev.CanNm.CanNmPnHandleMultipleNetworkRequestsDependency</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>1391</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00073</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>698</internalId></specobject>
    <specobject>
      <id>dev.CanNm.ReTransmissionOnRepeatMessageEnter</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>1415</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00100</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>168</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>699</internalId></specobject>
    <specobject>
      <id>dev.CanNm.CanNmGlobalConfig_Parameters</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>1443</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>74</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>700</internalId></specobject>
    <specobject>
      <id>dev.CanNm.UninitErrorName</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>1464</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00316</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>367</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>701</internalId></specobject>
    <specobject>
      <id>dev.CanNm.PointerParameterErrorName</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>1485</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00316</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>367</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>702</internalId></specobject>
    <specobject>
      <id>dev.CanNm.NotInBusSleepErrorName</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>1505</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00316</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>367</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>703</internalId></specobject>
    <specobject>
      <id>dev.CanNm.MessageTxTimeoutTimerStopDependency</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>1527</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00061</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>146</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00065</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>704</internalId></specobject>
    <specobject>
      <id>dev.CanNm.CanNmMsgTimeoutTimeDependencyMultiplicity</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>1548</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>94</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>705</internalId></specobject>
    <specobject>
      <id>dev.CanNm.CanNmRemoteSleepIndTimeDependencyMultiplicity</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>1569</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00023</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>89</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>706</internalId></specobject>
    <specobject>
      <id>dev.CanNm.PartlyImplementedFunctionalities</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>1585</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>707</internalId></specobject>
    <specobject>
      <id>dev.CanNm.UnsupportedFunctionalities</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>1601</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00350</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>369</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_91002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>373</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00352</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>371</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_91001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>372</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00351</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>370</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>708</internalId></specobject>
    <specobject>
      <id>dev.CanNm.CanNm_TransmitAvailability</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>1644</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00330</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>309</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>709</internalId></specobject>
    <specobject>
      <id>dev.CanNm.UserDataLength</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>1661</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00332</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>311</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>710</internalId></specobject>
    <specobject>
      <id>dev.CanNm.MessageTxTimeoutTimerDependency</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>1680</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00446</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>359</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>711</internalId></specobject>
    <specobject>
      <id>dev.CanNm.CanNmMsgTimeoutTime</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>1699</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>94</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>712</internalId></specobject>
    <specobject>
      <id>dev.CanNm.CanNmRepeatMessageTime</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>1718</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>88</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>713</internalId></specobject>
    <specobject>
      <id>dev.CanNm.CanNmTxConfirmationTxTimeout</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>1738</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00065</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>714</internalId></specobject>
    <specobject>
      <id>dev.CanNm.RxIndicationTxConfirmationHeaderFile</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>1756</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00228</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>257</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00231</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>258</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>715</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_3</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>3</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM304</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>716</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_77</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>77</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmNodeIdCallbackHeaderName</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>547</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>717</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_106</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>106</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Impl.PbCfgM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>544</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>718</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_114</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>114</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Impl.Relocatable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>545</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>719</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_124</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>124</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>720</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_131</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>131</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM168</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>721</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_138</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>138</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>722</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_145</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>145</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00161</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>723</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_152</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>152</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>724</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_159</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>159</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>725</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_166</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>166</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00041</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00071</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>726</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_173</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>173</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00158</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>727</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_180</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>180</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00044</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>728</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_187</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>187</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00149</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>207</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>729</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_195</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>195</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmNodeIdEnabled</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>550</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>730</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_202</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>202</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>384</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>731</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_209</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>209</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00088</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>383</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>732</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_216</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>216</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00185</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>733</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_223</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>223</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00040</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00052</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>734</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_237</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>237</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM188</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>735</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_244</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>244</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM014_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>736</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_259</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>259</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00084</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>360</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>737</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_267</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>267</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmNodeIdCallbackName</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>546</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>738</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_289</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>289</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00415</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>338</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>739</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_290</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>290</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00061</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>116</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>740</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_316</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>316</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00060</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>741</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_324</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>324</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00070</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>123</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>742</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_332</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>332</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00067</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>120</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>743</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_358</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>358</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.ECUC_CanNm_00097</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>417</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>744</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_425</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>425</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.CanNmMultiCoreSupport</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>567</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>745</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_434</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>434</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmMultiCoreUseSingleCS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>646</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>746</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_438</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>438</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.CanNmChannelMultiCoreSupport</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>602</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>747</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_451</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>451</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SymbolicName.CanNmRxPduId.NoShortName</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>512</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.SymbolicName.ecuc_sws_2108_3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>511</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>748</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_492</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>492</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SymbolicName.ecuc_sws_2108_1</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>509</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.SymbolicName.CanNmTxConfirmationPduId.NoShortName</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>513</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>749</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_534</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>534</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SymbolicName.ecuc_sws_2108_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>510</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>750</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Cfg.h.m4_535</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Cfg.h.m4</sourcefile>
      <sourceline>535</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SymbolicName.CanNmTxUserDataPduId.NoShortName</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>514</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>751</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate/include/CanNm_Lcfg.h.m4_11</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_Lcfg.h.m4</sourcefile>
      <sourceline>11</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.PostBuildRamSize.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>559</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>752</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate/include/CanNm_PBcfg.h_8</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/include/CanNm_PBcfg.h</sourcefile>
      <sourceline>8</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.PBSelectable.Master</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>566</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>753</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate/src/CanNm_Cfg.c_50</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/src/CanNm_Cfg.c</sourcefile>
      <sourceline>50</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM299</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>754</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/src/CanNm_Cfg.c_92</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/src/CanNm_Cfg.c</sourcefile>
      <sourceline>92</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00246</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>264</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>755</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/src/CanNm_Cfg.c_94</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/src/CanNm_Cfg.c</sourcefile>
      <sourceline>94</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00247</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>756</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/src/CanNm_Cfg.c_96</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/src/CanNm_Cfg.c</sourcefile>
      <sourceline>96</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00248</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>266</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>757</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/src/CanNm_Cfg.c_98</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/src/CanNm_Cfg.c</sourcefile>
      <sourceline>98</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00249</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>267</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>758</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/src/CanNm_Cfg.c_105</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/src/CanNm_Cfg.c</sourcefile>
      <sourceline>105</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00056</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>112</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>759</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/src/CanNm_Cfg.c_120</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/src/CanNm_Cfg.c</sourcefile>
      <sourceline>120</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>760</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/src/CanNm_Cfg.c_146</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/src/CanNm_Cfg.c</sourcefile>
      <sourceline>146</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00079</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>761</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/src/CanNm_Cfg.c_172</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/src/CanNm_Cfg.c</sourcefile>
      <sourceline>172</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00068</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>762</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/src/CanNm_Cfg.c_243</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/src/CanNm_Cfg.c</sourcefile>
      <sourceline>243</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.ChannelApplicationId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>620</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>763</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate/src/CanNm_MainFunction.c_68</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/src/CanNm_MainFunction.c</sourcefile>
      <sourceline>68</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNm_MainFunction_Main.Enable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>606</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>764</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/src/CanNm_MainFunction.c_69</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/src/CanNm_MainFunction.c</sourcefile>
      <sourceline>69</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNm_MainFunction_X.Enable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>610</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>765</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/src/CanNm_MainFunction.c_76</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/src/CanNm_MainFunction.c</sourcefile>
      <sourceline>76</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNm_MainFunction_Main</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>605</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>766</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/src/CanNm_MainFunction.c_103</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/src/CanNm_MainFunction.c</sourcefile>
      <sourceline>103</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNm_MainFunction_X</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>608</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>767</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/src/CanNm_MainFunction.c_104</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/src/CanNm_MainFunction.c</sourcefile>
      <sourceline>104</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNm_MainFunction_X.Name</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>609</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>768</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/src/CanNm_MainFunction.c_150</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/src/CanNm_MainFunction.c</sourcefile>
      <sourceline>150</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.Receiver</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>616</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>769</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/src/CanNm_MainFunction.c_161</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/src/CanNm_MainFunction.c</sourcefile>
      <sourceline>161</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.Receiver.Aggregate</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>619</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>770</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/src/CanNm_MainFunction.c_190</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/src/CanNm_MainFunction.c</sourcefile>
      <sourceline>190</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.PnSyncShutdown.CanNm_RequestSynchronizedPncShutdown.Multicore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>600</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>771</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate/src/CanNm_PBcfg.c_4</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate/src/CanNm_PBcfg.c</sourcefile>
      <sourceline>4</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.PBSelectable.Master</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>566</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>772</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate_macros/CanNm_Checks.m_51</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate_macros/CanNm_Checks.m</sourcefile>
      <sourceline>51</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.ComUserDataSupport.PduR_CanNmUserDataRxId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>497</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>773</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_macros/CanNm_Checks.m_131</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate_macros/CanNm_Checks.m</sourcefile>
      <sourceline>131</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.PostBuildRamSize.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>560</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>774</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_macros/CanNm_Checks.m_198</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate_macros/CanNm_Checks.m</sourcefile>
      <sourceline>198</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.ComUserDataSupport.CanNmUserDataTxPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>640</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>775</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_macros/CanNm_Checks.m_203</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate_macros/CanNm_Checks.m</sourcefile>
      <sourceline>203</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.ComUserDataSupport.NoCanNmUserDataTxPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>641</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>776</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_macros/CanNm_Checks.m_209</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate_macros/CanNm_Checks.m</sourcefile>
      <sourceline>209</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.ComUserDataSupport.UserDataLength</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>642</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>777</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_macros/CanNm_Checks.m_216</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate_macros/CanNm_Checks.m</sourcefile>
      <sourceline>216</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.ComUserDataSupport.NoCanNmUserDataRxPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>643</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>778</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_macros/CanNm_Checks.m_222</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate_macros/CanNm_Checks.m</sourcefile>
      <sourceline>222</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.ComUserDataSupport.UserDataLength</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>642</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>779</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_macros/CanNm_Checks.m_230</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate_macros/CanNm_Checks.m</sourcefile>
      <sourceline>230</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.RxPduLength</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>644</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>780</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate_macros/CanNm_Macros.m_48</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate_macros/CanNm_Macros.m</sourcefile>
      <sourceline>48</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Dsn.Algorithm.ChannelPartition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1418</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>781</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_macros/CanNm_Macros.m_61</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate_macros/CanNm_Macros.m</sourcefile>
      <sourceline>61</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Dsn.Algorithm.AggregatePartition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1419</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>782</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/CanNm_Macros.m_16</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate_swcd/swcd/CanNm_Macros.m</sourcefile>
      <sourceline>16</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Dsn.Algorithm.ChannelPartition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1418</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>783</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/CanNm_Macros.m_29</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate_swcd/swcd/CanNm_Macros.m</sourcefile>
      <sourceline>29</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Dsn.Algorithm.AggregatePartition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1419</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>784</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/include/CanNm.h_30</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/include/CanNm.h</sourcefile>
      <sourceline>30</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.EB_CANNM_Define</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>593</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>785</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/include/CanNm_Api.h_19</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/include/CanNm_Api.h</sourcefile>
      <sourceline>19</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00309</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>299</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>786</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/CanNm_Api.h_21</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/include/CanNm_Api.h</sourcefile>
      <sourceline>21</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>787</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/CanNm_Api.h_41</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/include/CanNm_Api.h</sourcefile>
      <sourceline>41</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM210</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>32</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>788</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/CanNm_Api.h_474</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/include/CanNm_Api.h</sourcefile>
      <sourceline>474</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM302</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>789</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/include/CanNm_Cbk.h_7</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/include/CanNm_Cbk.h</sourcefile>
      <sourceline>7</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00305</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>296</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>790</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/CanNm_Cbk.h_38</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/include/CanNm_Cbk.h</sourcefile>
      <sourceline>38</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM303</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>791</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/include/CanNm_Int.h.m4_21</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/include/CanNm_Int.h.m4</sourcefile>
      <sourceline>21</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00309</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>299</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>792</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/CanNm_Int.h.m4_27</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/include/CanNm_Int.h.m4</sourcefile>
      <sourceline>27</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00305</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>296</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>793</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/CanNm_Int.h.m4_55</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/include/CanNm_Int.h.m4</sourcefile>
      <sourceline>55</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>794</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/CanNm_Int.h.m4_102</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/include/CanNm_Int.h.m4</sourcefile>
      <sourceline>102</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00045</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>400</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>795</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/CanNm_Int.h.m4_109</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/include/CanNm_Int.h.m4</sourcefile>
      <sourceline>109</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00045</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>400</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>796</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/CanNm_Int.h.m4_200</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/include/CanNm_Int.h.m4</sourcefile>
      <sourceline>200</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00045</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>400</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>797</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/CanNm_Int.h.m4_429</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/include/CanNm_Int.h.m4</sourcefile>
      <sourceline>429</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_NetworkStartIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>568</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>798</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/CanNm_Int.h.m4_434</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/include/CanNm_Int.h.m4</sourcefile>
      <sourceline>434</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_NetworkMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>569</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>799</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/CanNm_Int.h.m4_439</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/include/CanNm_Int.h.m4</sourcefile>
      <sourceline>439</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_BusSleepMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>570</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>800</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/CanNm_Int.h.m4_444</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/include/CanNm_Int.h.m4</sourcefile>
      <sourceline>444</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_PrepareBusSleepMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>571</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>801</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/CanNm_Int.h.m4_449</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/include/CanNm_Int.h.m4</sourcefile>
      <sourceline>449</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_RemoteSleepIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>572</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>802</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/CanNm_Int.h.m4_454</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/include/CanNm_Int.h.m4</sourcefile>
      <sourceline>454</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_RemoteSleepCancellation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>573</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>803</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/CanNm_Int.h.m4_459</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/include/CanNm_Int.h.m4</sourcefile>
      <sourceline>459</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_PduRxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>574</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>804</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/CanNm_Int.h.m4_464</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/include/CanNm_Int.h.m4</sourcefile>
      <sourceline>464</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_StateChangeNotification</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>575</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>805</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/CanNm_Int.h.m4_469</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/include/CanNm_Int.h.m4</sourcefile>
      <sourceline>469</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_RepeatMessageIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>576</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>806</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/CanNm_Int.h.m4_474</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/include/CanNm_Int.h.m4</sourcefile>
      <sourceline>474</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_TxTimeoutException</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>577</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>807</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/CanNm_Int.h.m4_479</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/include/CanNm_Int.h.m4</sourcefile>
      <sourceline>479</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_CarWakeUpIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>578</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>808</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/CanNm_Int.h.m4_484</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/include/CanNm_Int.h.m4</sourcefile>
      <sourceline>484</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.CanNmMultiCoreSupport</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>567</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>809</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/CanNm_Int.h.m4_799</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/include/CanNm_Int.h.m4</sourcefile>
      <sourceline>799</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00438</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>353</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00428</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>347</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>810</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/CanNm_Int.h.m4_912</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/include/CanNm_Int.h.m4</sourcefile>
      <sourceline>912</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM311</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>61</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>811</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_44</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>44</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM306</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>812</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_53</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>53</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM307</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>813</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_55</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>55</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM310</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>814</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_57</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>57</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00312</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>300</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>815</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_61</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>61</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00326</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>305</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>816</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_67</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>67</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00308</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>298</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>817</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_136</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>136</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM311</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>61</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>818</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_203</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>203</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Impl.IsValid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>537</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>819</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_240</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>240</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00208</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>241</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>820</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_259</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>259</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00060</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>821</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_265</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>265</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.ImplicitUninitState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>557</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.NotSuccessfulInitialization</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>558</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>822</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_279</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>279</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Impl.Init</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>539</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>823</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_292</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>292</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>824</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_299</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>299</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>485</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM292</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>825</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_309</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>309</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>484</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>826</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_319</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>319</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.PostBuildRamSize.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>561</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>827</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_339</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>339</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00141</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>202</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>828</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_348</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>348</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00033</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>139</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>829</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_351</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>351</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM061</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>830</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_355</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>355</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00143</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>203</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>831</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_362</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>362</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00435</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>351</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>832</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_411</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>411</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00144</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>204</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>833</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_414</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>414</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00424</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>344</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>834</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_427</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>427</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00211</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>242</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>835</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_437</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>437</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM243</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>836</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_439</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>439</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM191</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>837</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_442</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>442</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>838</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_450</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>450</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>482</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00192</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>461</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>839</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_458</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>458</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDPassiveStartUp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>621</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>840</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_474</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>474</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00128.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>477</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00128.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>478</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>841</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_475</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>475</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.PASSIVE_START_BUS_SLEEP_MODE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1420</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>842</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_476</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>476</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.PASSIVE_START_PREPARE_BUS_SLEEP_MODE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1447</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>843</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_501</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>501</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00147</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>206</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00189</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>844</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_520</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>520</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00213</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>243</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00257</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>272</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>845</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_531</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>531</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM243</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>846</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_533</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>533</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM191</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>847</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_536</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>536</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>848</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_545</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>545</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>482</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00192</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>461</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>849</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_553</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>553</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDNetworkRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>622</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>850</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_569</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>569</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00255</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>270</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>851</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_582</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>582</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00189</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>852</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_593</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>593</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNm_NetworkGwEraRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>581</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>853</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_603</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>603</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM243</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>854</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_605</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>605</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM191</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>855</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_608</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>608</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>856</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_617</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>617</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>482</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00192</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>461</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>857</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_625</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>625</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDNetworkGwEraRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>623</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>858</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_641</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>641</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNm_NetworkGwEraRequest.NetworkRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>582</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>859</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_652</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>652</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00189</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>860</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_663</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>663</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00214</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>244</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00260</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>274</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>861</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_673</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>673</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM243</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>862</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_675</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>675</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM191</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>863</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_678</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>678</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>864</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_686</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>686</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>482</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00192</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>461</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>865</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_694</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>694</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDNetworkRelease</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>624</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>866</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_711</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>711</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00105</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>173</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM258</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>867</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_723</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>723</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00189</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>868</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_736</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>736</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00170</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00215</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>276</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>869</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_747</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>747</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM243</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>870</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_749</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>749</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM191</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>871</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_752</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>752</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>872</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_760</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>760</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>482</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00192</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>461</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>873</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_768</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>768</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDDisableCommunication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>625</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>874</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_802</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>802</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SWS_CanNm_00177_Implicit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>504</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>875</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_808</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>808</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00172</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>876</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_825</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>825</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00264</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>278</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>877</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_826</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>826</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>246</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>878</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_836</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>836</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM243</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>879</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_838</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>838</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM191</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>880</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_841</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>841</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>881</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_849</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>849</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>482</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00192</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>461</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>882</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_858</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>858</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDEnableCommunication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>626</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>883</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_884</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>884</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00176</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>225</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>884</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_893</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>893</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00177</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>885</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_899</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>899</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00295</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>295</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>886</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_917</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>917</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00327</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>306</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00159</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM217</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00266</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>280</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>887</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_927</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>927</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00189</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>888</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_933</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>933</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM243</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>889</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_935</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>935</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM191</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>890</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_938</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>938</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>891</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_946</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>946</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>482</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00192</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>461</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>892</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_952</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>952</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>485</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM292</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>893</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_960</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>960</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDSetUserData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>627</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>894</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_976</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>976</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM243</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>895</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_980</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>980</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.ComUserDataSupport.SetGetUserDataNoUserData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>499</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>896</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1007</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1007</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00160</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>217</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00218</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>248</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00268</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>282</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>897</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1020</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1020</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM243</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>898</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1022</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1022</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM191</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>899</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1025</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1025</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>900</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1033</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1033</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>482</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00192</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>461</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>901</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1039</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1039</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>485</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM292</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>902</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1046</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1046</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDGetUserData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>628</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>903</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1062</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1062</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM243</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>904</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1066</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1066</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.ComUserDataSupport.SetGetUserDataNoUserData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>499</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>905</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1082</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1082</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00189</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>906</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1096</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1096</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00219</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM270</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>907</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1122</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1122</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM243</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>908</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1124</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1124</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM191</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>909</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1127</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1127</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>910</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1136</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1136</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>482</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00192</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>461</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>911</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1142</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1142</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>485</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM292</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>912</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1149</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1149</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDGetNodeIdentifier</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>629</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>913</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1157</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1157</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00132</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>198</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>914</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1158</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1158</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM270</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>915</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1162</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1162</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00189</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>916</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1184</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1184</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>250</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM272</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>917</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1209</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1209</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM243</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>918</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1211</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1211</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM191</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>919</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1214</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1214</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>920</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1224</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1224</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>482</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00192</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>461</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>921</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1232</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1232</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>485</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM292</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>922</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1240</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1240</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDGetLocalNodeIdentifier</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>630</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>923</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1248</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1248</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00133</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>924</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1250</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1250</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmNodeIdCallback.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>548</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>925</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1254</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1254</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM272</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>926</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1258</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1258</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00189</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>927</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1278</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1278</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00221</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>251</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM274</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM135.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>471</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>928</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1301</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1301</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM243</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>929</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1303</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1303</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM191</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>930</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1306</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1306</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>931</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1314</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1314</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>482</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00192</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>461</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>932</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1322</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1322</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDRepeatMessageRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>631</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>933</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1340</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1340</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00121</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>189</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>934</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1349</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1349</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00137.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>425</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00137.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>426</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00137.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>427</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>935</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1350</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1350</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00189</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>936</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1364</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1364</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00138</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00222</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>252</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>472</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>473</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>474</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>937</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1386</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1386</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM243</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>938</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1388</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1388</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM191</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>939</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1391</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1391</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>940</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1399</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1399</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>482</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00192</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>461</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>941</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1405</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1405</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>485</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM292</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>942</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1412</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1412</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDGetPduData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>632</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>943</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1442</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1442</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00189</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>944</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1462</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1462</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00223</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>253</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>945</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1471</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1471</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00189</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>946</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1477</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1477</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM243</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>947</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1479</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1479</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM191</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>948</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1482</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1482</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>949</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1490</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1490</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>482</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00192</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>461</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>950</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1496</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1496</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>485</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM292</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>951</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1502</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1502</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>485</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM292</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>952</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1510</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1510</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDGetState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>633</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>953</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1527</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1527</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00092</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00091</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>386</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>954</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1530</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1530</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00094</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>163</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>955</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1560</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1560</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00224</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>254</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM278</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>956</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1569</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1569</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM243</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>957</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1573</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1573</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>485</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM292</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>958</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1580</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1580</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM225</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>959</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1593</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1593</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00226</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>255</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00072</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00280</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>289</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>960</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1601</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1601</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00189</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>961</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1606</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1606</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM243</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>962</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1608</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1608</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM191</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>963</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1611</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1611</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>964</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1620</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1620</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>482</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00192</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>461</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>965</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1639</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1639</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00181</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>966</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1650</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1650</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00187.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>475</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00187.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>476</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>967</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1664</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1664</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00130</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>968</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1684</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1684</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00227</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>256</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00282</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>291</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00153</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>211</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>969</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1700</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1700</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM243</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>970</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1702</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1702</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM191</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>971</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1705</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1705</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>972</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1714</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1714</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>482</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00192</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>461</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>973</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1721</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1721</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>485</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM292</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>974</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1730</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1730</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDCheckRemoteSleepIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>634</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>975</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1764</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1764</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00154.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>442</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00154.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>443</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00154.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>444</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>976</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1765</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1765</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00189</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>977</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1780</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1780</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00234</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>259</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>978</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1788</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1788</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.MainFunction.InitCheck</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>979</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1825</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1825</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM422</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM423</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>67</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>980</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1842</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1842</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM433</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>70</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM434</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>981</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1863</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1863</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00284</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00073.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>452</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00073.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>453</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>982</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1867</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1867</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00228</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>257</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>983</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1876</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1876</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM243</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>984</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1878</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1878</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>985</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1881</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1881</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM229.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>457</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>986</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1903</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1903</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM243</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>987</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1907</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1907</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>483</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM229.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>456</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>988</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1915</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1915</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDTxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>635</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>989</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1925</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1925</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00329</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>308</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.ComUserDataSupport.PduRCallsNoUserData.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>502</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.PduRAPIs.TxPduId_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>515</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>990</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1945</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1945</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00464</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>407</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>991</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1966</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1966</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00231</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>258</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>992</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1985</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1985</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM243</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>993</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1987</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1987</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>994</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1990</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1990</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM232.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>459</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>995</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_1996</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>1996</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>483</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM232.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>458</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>996</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2008</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2008</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>485</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM232.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>460</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM233</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM292</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>997</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2016</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2016</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDRxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>636</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>998</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2030</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2030</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00035</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>140</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>999</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2033</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2033</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00412</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>335</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1000</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2035</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2035</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.PnEnabled_FALSE.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>562</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1001</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2055</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2055</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM433</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>70</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM434</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1002</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2071</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2071</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM433</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>70</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM434</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1003</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2121</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2121</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00461</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>403</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00317.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>488</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00324</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>303</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1004</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2135</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2135</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00407</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>330</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1005</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2139</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2139</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00409</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>332</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00410</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>333</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00411</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>334</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00420</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>342</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM403</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>64</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00421</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>343</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1006</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2151</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2151</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.ComUserDataSupport.PduRCallsNoUserData.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>501</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1007</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2158</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2158</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.ComUserDataSupport.CanNmUserDataRxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>496</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1008</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2163</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2163</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM135.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>470</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1009</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2183</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2183</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1010</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2190</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2190</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1011</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2213</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2213</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00331</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>310</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM330</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00333.1</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>419</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00333.2</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>420</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1012</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2242</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2242</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM243</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1013</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2244</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2244</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM191</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1014</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2247</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2247</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1015</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2253</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2253</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>483</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM196</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1016</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2258</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2258</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM199</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1017</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2262</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2262</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>485</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM292</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM196</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1018</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2267</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2267</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM199</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1019</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2271</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2271</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM196</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1020</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2279</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2279</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDTransmit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>637</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1021</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2317</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2317</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.PnSyncShutdown.CanNm_Transmit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>598</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1022</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2345</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2345</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00189</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1023</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2367</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2367</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.ComUserDataSupport.PduRCallsNoUserData.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>500</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1024</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2376</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2376</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00328</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>307</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.PduRAPIs.TxPduId_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>516</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1025</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2381</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2381</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.PnEnabled_FALSE.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>563</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1026</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2394</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2394</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.Sender.Tx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>615</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1027</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2404</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2404</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00344</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>321</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00346</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>323</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1028</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2413</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2413</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM243</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1029</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2415</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2415</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1030</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2418</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2418</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1031</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2426</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2426</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>482</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00192</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>461</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1032</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2434</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2434</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDConfirmPnAvailability</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>638</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1033</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2451</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2451</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00404</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>327</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1034</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2463</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2463</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_91003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>412</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00467</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>413</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1035</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2475</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2475</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM243</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1036</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2477</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2477</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1037</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2480</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2480</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1038</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2488</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2488</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>482</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00192</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>461</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1039</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2496</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2496</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.PnSyncShutdown.CanNm_RequestSynchronizedPncShutdown.InvalidPncId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>597</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1040</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2504</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2504</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDRequestSynchronizedPncShutdown</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>639</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1041</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2517</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2517</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00462</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>405</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1042</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2582</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2582</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM418</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>65</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00419</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>341</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1043</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2649</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2649</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00406</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>329</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1044</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2655</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2655</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00408</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>331</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1045</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2676</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2676</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1046</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2719</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2719</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00442</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>355</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00431</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>349</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1047</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2733</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2733</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00443.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>469</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00432.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>451</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1048</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2761</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2761</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00437</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>352</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM425</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00426</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>345</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00427</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>346</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1049</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2766</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2766</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00439</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>354</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00429</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>348</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM430</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>69</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1050</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2781</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2781</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00443.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>468</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00432.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>449</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00432.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>450</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1051</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2798</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2798</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM436</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>72</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1052</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2862</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2862</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00460</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>402</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1053</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2880</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2880</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00045</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>400</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00506</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>406</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1054</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2886</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2886</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00506</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>406</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1055</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2911</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2911</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00471</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>410</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00317.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>489</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00324</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>303</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1056</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_2990</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>2990</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.PnSyncShutdown.CanNm_TxConfirmation.Timeout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>599</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1057</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_3046</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>3046</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00472</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>411</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00317.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>489</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00324</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>303</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1058</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_3057</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>3057</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.PnSyncShutdown.CanNm_TxConfirmation.Timeout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>599</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1059</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_3066</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>3066</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00464</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>407</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1060</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_3094</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>3094</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00461</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>403</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1061</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_3176</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>3176</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.PnSyncShutdown.Nm_ForwardSynchronizedPncShutdown.Multicore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>601</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1062</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_3183</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>3183</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00504</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>404</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1063</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_3195</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>3195</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmMultiCoreUseSingleCS.CanNm_MultipleNetworkOperations.Available</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>648</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1064</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_3197</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>3197</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmMultiCoreUseSingleCS.CanNm_MultipleNetworkOperations</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>647</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1065</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_3205</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>3205</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmMultiCoreUseSingleCS.PassiveStartup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>649</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1066</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_3211</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>3211</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmMultiCoreUseSingleCS.NetworkRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>650</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1067</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_3216</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>3216</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmMultiCoreUseSingleCS.NetworkRelease</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>651</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1068</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm.c.m4_3221</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm.c.m4</sourcefile>
      <sourceline>3221</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmMultiCoreUseSingleCS.NetworkGwEraRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>652</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1069</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/CanNm_Hsm.c_78</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_Hsm.c</sourcefile>
      <sourceline>78</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00308</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>298</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1070</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_Hsm.c_404</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_Hsm.c</sourcefile>
      <sourceline>404</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.EventQueue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>517</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1071</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_40</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>40</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00312</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>300</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1072</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_42</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>42</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM307</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1073</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_47</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>47</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00308</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>298</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1074</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_215</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>215</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>223</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1075</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_217</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>217</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00175</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>224</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1076</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_220</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>220</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00173</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1077</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_277</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>277</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.StateChangeNotification</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>596</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1078</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_285</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>285</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00126</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>193</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00093</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>162</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00324</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>303</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1079</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_292</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>292</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1080</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_308</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>308</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00127</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>194</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.Internal_Transition_BUS_SLEEP_MODE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1421</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1081</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_315</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>315</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1082</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_324</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>324</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1083</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_331</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>331</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1084</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_340</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>340</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM336</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00317.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>486</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1085</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_354</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>354</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00129</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>196</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1086</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_355</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>355</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.NET_REQSTATUS_CHANGED_BUS_SLEEP_MODE_NetworkRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1422</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1087</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_356</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>356</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.NET_REQSTATUS_CHANGED_BUS_SLEEP_MODE_NetworkGwEraRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1423</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1088</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_380</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>380</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.NmTimer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>556</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00096</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1089</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_383</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>383</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00206</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>240</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1090</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_387</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>387</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00097</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>165</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00093</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>162</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1091</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_394</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>394</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1092</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_402</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>402</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNm_NetworkGwEraRequest.ActiveWakeupBit.BusSleepMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>583</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1093</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_403</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>403</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNm_NetworkGwEraRequest.ActiveWakeupBit.PrepareBusSleepMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>584</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1094</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_404</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>404</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.PassiveStartup.NetworkRequest.Sequence.ActiveWakeupBit.BusSleepMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>588</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1095</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_405</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>405</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.PassiveStartup.NetworkRequest.Sequence.ActiveWakeupBit.PrepareBusSleepMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>589</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1096</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_413</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>413</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00401.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>454</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00401.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>455</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1097</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_434</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>434</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.Internal_Transition_NETWORK_MODE_0</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1442</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1098</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_435</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>435</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.Internal_Transition_NETWORK_MODE_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1443</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1099</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_454</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>454</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.Internal_Transition_NETWORK_MODE_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1444</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1100</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_464</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>464</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.Internal_Transition_NETWORK_MODE_3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1445</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1101</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_485</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>485</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00454</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>365</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.NET_REQ_STATUS_CHANGED_NETWORK_MODE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1441</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1102</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_520</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>520</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.StateChangeNotification</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>596</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1103</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_535</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>535</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.NM_TIMEOUT_READY_SLEEP_STATE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1438</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1104</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_569</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>569</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.NET_REQ_STATUS_CHANGED_READY_SLEEP_STATE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1436</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1105</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_570</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>570</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>178</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1106</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_625</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>625</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.NET_REQ_STATUS_CHANGED_READY_SLEEP_STATE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1436</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1107</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_668</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>668</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00152.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>441</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>179</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00112</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1108</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_669</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>669</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.REPEAT_MESSAGE_REASON_READY_SLEEP_STATE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1432</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1109</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_670</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>670</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.REPEAT_MESSAGE_REASON_READY_SLEEP_STATE_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1433</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1110</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_671</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>671</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.REPEAT_MESSAGE_REASON_READY_SLEEP_STATE_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1434</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1111</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_679</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>679</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1112</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_707</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>707</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00151.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>439</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.RX_INDICATION_READY_SLEEP_STATE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1437</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1113</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_714</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>714</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1114</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_754</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>754</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00173</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00051</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00108.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>428</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00108.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>429</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1115</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_773</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>773</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.Internal_Transition_SENDING_SUB_MODE_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1448</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1116</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_788</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>788</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00066.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>490</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1117</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_795</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>795</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1118</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_806</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>806</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM446</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1119</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_819</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>819</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.Internal_Transition_SENDING_SUB_MODE_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1449</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1120</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_824</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>824</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00032</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>401</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM100.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>421</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM100.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>422</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1121</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_825</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>825</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM100.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>423</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM100.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>424</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1122</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_843</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>843</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.Internal_Transition_SENDING_SUB_MODE_3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1450</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1123</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_851</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>851</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00317.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>487</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00193</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>236</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00194</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>237</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1124</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_856</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>856</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00101</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>169</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00117</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00206</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>240</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1125</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_880</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>880</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.StateChangeNotification</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>596</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1126</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_906</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>906</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00180</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>462</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1127</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_925</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>925</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.Internal_Transition_NORMAL_OPERATION_STATE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1425</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1128</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_936</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>936</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00118</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>186</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.NET_REQ_STATUS_CHANGED_NORMAL_OPERATION_STATE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1435</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1129</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_960</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>960</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.UNI_TIMEOUT_NORMAL_OPERATION_REMOTE_ACTIVITY</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1426</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1130</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_962</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>962</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00150</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>208</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1131</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_969</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>969</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1132</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1034</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1034</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.NET_REQ_STATUS_CHANGED_NORMAL_OPERATION_STATE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1435</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1133</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1046</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1046</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00152.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>440</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00119</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>187</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00120</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1134</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1047</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1047</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.REPEAT_MESSAGE_REASON_NORMAL_OPERATION_REMOTE_SLEEP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1427</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1135</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1048</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1048</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.REPEAT_MESSAGE_REASON_NORMAL_OPERATION_REMOTE_ACTIVITY_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1429</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1136</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1049</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1049</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.REPEAT_MESSAGE_REASON_NORMAL_OPERATION_REMOTE_ACTIVITY_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1430</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1137</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1057</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1057</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1138</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1086</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1086</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00151.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>438</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.RX_INDICATION_NORMAL_OPERATION_REMOTE_SLEEP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1428</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1139</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1093</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1093</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1140</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1112</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1112</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00314</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>301</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1141</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1123</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1123</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00102</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>170</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1142</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1133</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1133</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.StateChangeNotification</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>596</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1143</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1145</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1145</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00116</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1144</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1150</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1150</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1145</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1154</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1154</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNm_NetworkGwEraRequest.CanNmImmediateRestartEnabled.PrepareBusSleepMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>587</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1146</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1155</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1155</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.PassiveStartup.NetworkRequest.Sequence.CanNmImmediateRestartEnabled.PrepareBusSleepMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>592</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1147</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1159</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1159</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>190</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.NET_REQ_STATUS_CHANGED_PREPARE_BUS_SLEEP_MODE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1439</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1148</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1175</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1175</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNm_NetworkGwEraRequest.CanNmImmediateNmTransmissions.BusSleepMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>585</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1149</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1176</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1176</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNm_NetworkGwEraRequest.CanNmImmediateNmTransmissions.PrepareBusSleepMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>586</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1150</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1177</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1177</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.PassiveStartup.NetworkRequest.Sequence.CanNmImmediateNmTransmissions.BusSleepMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>590</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1151</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1178</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1178</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.PassiveStartup.NetworkRequest.Sequence.CanNmImmediateNmTransmissions.PrepareBusSleepMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>591</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1152</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1199</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1199</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00023</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>137</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.SWS_CanNm_00178_ImmediateNmTransmissions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>503</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1153</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1200</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1200</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00156.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>432</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00156.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>433</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00156.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>434</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00156.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>435</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1154</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1208</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1208</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00023</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>137</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.SWS_CanNm_00178_ImmediateNmTransmissions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>503</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1155</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1209</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1209</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00156.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>432</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00156.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>433</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00156.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>434</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00156.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>435</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1156</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1233</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1233</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SWS_CanNm_00335</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>595</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1157</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1241</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1241</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00107</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1158</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1262</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1262</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00106</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>174</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.RMS_TIMEOUT_READY_SLEEP_STATE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1431</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1159</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1278</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1278</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00103</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>171</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.RMS_TIMEOUT_REPEAT_MESSAGE_STATE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1424</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1160</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1312</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1312</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM115</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM088</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.UNI_TIMEOUT_PREPARE_BUS_SLEEP_MODE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1446</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1161</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1318</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1318</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.StateChangeNotification</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>596</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1162</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1324</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1324</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00114</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00093</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>162</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1163</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1331</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1331</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1164</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1352</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1352</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00402</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>325</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1165</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1366</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1366</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00315</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>302</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00123</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>191</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1166</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1378</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1378</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00315</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>302</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00124</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>192</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.RX_INDICATION_PREPARE_BUS_SLEEP_MODE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1440</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1167</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1380</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1380</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1168</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1387</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1387</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1169</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1406</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1406</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00143</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>203</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1170</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1411</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1411</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM061</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1171</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1421</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1421</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00025</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1172</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1434</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1434</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00085</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>156</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1173</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1444</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1444</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmNodeIdCallback.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>549</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1174</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1449</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1449</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>135</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1175</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1455</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1455</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00414</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>337</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1176</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1458</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1458</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00413</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>336</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1177</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1473</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1473</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00435</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>351</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1178</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1541</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1541</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00460</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>402</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1179</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1567</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1567</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00098</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>463</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1180</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1574</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1574</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00206</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>240</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1181</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1579</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1579</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1182</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1586</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1586</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1183</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1603</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1603</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00180</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>462</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1184</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1618</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1618</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00238</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>261</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00069</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>464</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00157.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>436</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1185</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1619</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1619</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00157.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>437</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1186</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1632</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1632</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00071</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1187</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1642</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1642</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.NmTimer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>556</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00099.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>465</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1188</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1645</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1645</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00206</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>240</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1189</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1650</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1650</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00065</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>492</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1190</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1664</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1664</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00066.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>491</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1191</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1671</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1671</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1192</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1691</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1691</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM178</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1193</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1695</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1695</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00179</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>228</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00206</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>240</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1194</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1698</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1698</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00180</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>462</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1195</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1705</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1705</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00173</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00051</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1196</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1707</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1707</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>223</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1197</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1709</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1709</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00175</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>224</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1198</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1722</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1722</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00072</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00237</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>260</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1199</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1742</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1742</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00032</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>401</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1200</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1749</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1749</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM064</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>467</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1201</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1754</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1754</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00099.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>466</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1202</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1762</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1762</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmRetryFirstMessageRequest</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>520</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1203</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1763</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1763</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmRetryFirstMessageRequestReadySleepState_1</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>523</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1204</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1764</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1764</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmRetryFirstMessageRequestNormalOperationState</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>522</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1205</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1765</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1765</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmRetryFirstMessageRequestReadySleepState_2</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>524</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1206</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1769</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1769</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmRetryFirstMessageRequestRepeatMessageState</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>521</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1207</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1795</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1795</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00334.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>430</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00334.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>431</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00335</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>314</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1208</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1827</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1827</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00040</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1209</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1862</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1862</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00166</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1210</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/CanNm_HsmCanNmFnct.c_1875</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/src/CanNm_HsmCanNmFnct.c</sourcefile>
      <sourceline>1875</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1211</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_21</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>21</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00087</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>388</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1212</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_47</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>47</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATION_CONFIG_VARIANT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>525</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1213</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_48</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>48</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1214</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_71</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>71</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmMultiCoreUseSingleCS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>646</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1215</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_102</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>102</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.CanNmMultiCoreSupport</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>567</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1216</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_126</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>126</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.CanNmPnSupported</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>645</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1217</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_144</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>144</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1218</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_166</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>166</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.RelocatablePBCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>542</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1219</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_184</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>184</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1220</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_192</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>192</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.PBCFGM108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>665</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1221</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_198</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>198</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.CanNmMaxPn</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>543</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1222</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_211</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>211</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1223</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_246</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>246</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>74</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1224</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_268</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>268</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00040</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1225</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_294</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>294</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1226</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_303</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>303</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM163.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>446</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1227</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_306</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>306</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.BLR_PNC</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>555</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1228</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_313</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>313</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1229</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_348</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>348</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1230</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_356</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>356</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM163.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>445</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1231</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_368</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>368</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1232</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_394</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>394</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1233</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_416</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>416</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmNodeIdCallbackName</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>546</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1234</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_433</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>433</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1235</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_468</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>468</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1236</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_487</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>487</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00044</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1237</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_501</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>501</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1238</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_532</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>532</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1239</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_545</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>545</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1240</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_563</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>563</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1241</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_573</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>573</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00094</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>391</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1242</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_592</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>592</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1243</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_604</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>604</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00086</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>368</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1244</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_618</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>618</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1245</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_637</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>637</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1246</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_655</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>655</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1247</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_670</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>670</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00041</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1248</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_693</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>693</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1249</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_708</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>708</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM032_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>4</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1250</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_722</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>722</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1251</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_753</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>753</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1252</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_763</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>763</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1253</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_784</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>784</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1254</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_802</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>802</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1255</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_827</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>827</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1256</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_843</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>843</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00070</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>123</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1257</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_866</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>866</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1258</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_885</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>885</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00059</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1259</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_907</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>907</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1260</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_923</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>923</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1261</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_960</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>960</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1262</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_969</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>969</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM163.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>447</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1263</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_980</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>980</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1264</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_989</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>989</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1265</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1014</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1014</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1266</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1048</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1048</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1267</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1064</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1064</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1268</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1078</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1078</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1269</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1089</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1089</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00072</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1270</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1110</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1110</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1271</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1128</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1128</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.ECUC_CanNm_00098</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>415</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1272</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1146</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1146</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1273</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1170</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1170</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.ECUC_CanNm_00096</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>416</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1274</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1188</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1188</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1275</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1209</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1209</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM017_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00203</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>239</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1276</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1222</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1222</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.REQPROD_270433_1.RFC_54397.CanNmChannelConfig</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>535</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1277</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1227</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1227</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATION_CONFIG_VARIANT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>525</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1278</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1254</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1254</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1279</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1268</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1268</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmNodeIdEnabled</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>550</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1280</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1269</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1269</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1281</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1270</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1270</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00090</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>385</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1282</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1297</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1297</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1283</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1298</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1298</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.CanNmNodeId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>531</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1284</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1308</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1308</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>384</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1285</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1331</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1331</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1286</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1347</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1347</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00092</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>389</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1287</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1366</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1366</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1288</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1379</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1379</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00088</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>383</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1289</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1398</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1398</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1290</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1406</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1406</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM163.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>448</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1291</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1409</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1409</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmNodeDetectionEnabled</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>551</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1292</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1417</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1417</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00068</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1293</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1435</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1435</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1294</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1453</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1453</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00405</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>328</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00075</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>128</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1295</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1466</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1466</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1296</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1481</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1481</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00405</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>328</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00076</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>129</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1297</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1494</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1494</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1298</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1523</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1523</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>130</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1299</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1545</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1545</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1300</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1557</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1557</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1301</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1575</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1575</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1302</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1590</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1590</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00074</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>127</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1303</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1607</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1607</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1304</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1617</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1617</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00093</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>390</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1305</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1636</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1636</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1306</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1649</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1649</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00066</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1307</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1673</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1673</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.REQPROD_270433_1.AUTOSAR403PB.CanNmPnEnabled</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>532</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1308</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1674</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1674</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1309</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1684</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1684</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.DependencyCheck.CanNmPnEnabled.ComUserDataSupport</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>519</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1310</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1695</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1695</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.ECUC_CanNm_00059.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>479</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1311</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1698</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1698</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.ECUC_CanNm_00059.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>480</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1312</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1707</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1707</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00067</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>120</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1313</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1724</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1724</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1314</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1743</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1743</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM073_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>5</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1315</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1769</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1769</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.CanNmPnHandleMultipleNetworkRequests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>530</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1316</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1770</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1770</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1317</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1782</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1782</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00445</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>358</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1318</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1789</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1789</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.ECUC_CanNm_00097</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>417</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1319</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1807</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1807</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1320</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1826</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1826</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00079</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1321</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1844</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1844</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1322</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1862</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1862</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1323</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1882</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1882</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1324</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1920</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1920</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1325</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1941</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1941</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00056</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>112</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1326</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1967</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1967</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1327</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_1989</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>1989</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.ECUC_CanNm_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>594</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1328</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2017</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2017</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1329</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2042</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2042</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1330</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2067</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2067</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1331</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2089</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2089</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>104</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1332</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2121</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2121</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1333</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2147</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2147</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM030_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>3</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1334</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2178</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2178</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1335</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2201</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2201</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1336</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2223</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2223</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1337</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2224</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2224</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.CanNmNodeId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>531</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1338</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2243</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2243</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>91</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1339</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2244</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2244</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM075</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>14</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1340</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2272</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2272</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1341</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2290</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2290</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.ActiveWakeUpBitCBV.dependencyCheck</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>518</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1342</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2301</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2301</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00025</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>90</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1343</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2302</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2302</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00074</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1344</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2337</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2337</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1345</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2353</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2353</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmPduNidPosition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>552</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1346</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2366</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2366</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00023</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>89</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1347</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2387</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2387</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1348</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2411</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2411</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>88</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1349</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2444</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2444</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1350</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2474</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2474</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>86</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1351</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2509</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2509</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1352</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2530</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2530</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM021_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>2</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1353</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2566</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2566</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1354</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2585</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2585</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00018</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>85</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1355</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2602</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2602</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1356</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2622</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2622</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00038</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>99</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1357</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2644</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2644</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATION_CONFIG_VARIANT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>525</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1358</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2648</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2648</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00054</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>110</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1359</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2665</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2665</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1360</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2682</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2682</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmRxPduId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>553</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1361</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2691</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2691</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>100</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1362</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2705</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2705</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.REQPROD_270433_1.RFC_54397.CanNmRxPduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>529</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1363</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2706</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2706</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1364</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2720</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2720</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmRxPduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>554</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1365</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2734</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2734</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00036</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>97</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1366</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2751</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2751</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATION_CONFIG_VARIANT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>525</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1367</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2760</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2760</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1368</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2775</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2775</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1369</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2796</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2796</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1370</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2811</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2811</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.REQPROD_270433_1.AUTOSAR403PB.CanNmTxPduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>528</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1371</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2812</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2812</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1372</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2835</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2835</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00045</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>106</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1373</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2853</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2853</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATION_CONFIG_VARIANT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>525</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1374</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2857</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2857</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.ComUserDataSupport.CanNmUserDataTxPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>640</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1375</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2860</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2860</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.ComUserDataSupport.PduRefNoUserData.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>498</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1376</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2864</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2864</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1377</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2878</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2878</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1378</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2899</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2899</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00046</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>107</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1379</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2912</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2912</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.REQPROD_270433_1.RFC_54397.CanNmTxUserDataPduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>533</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1380</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2913</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2913</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1381</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2932</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2932</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.ComUserDataSupport.CanNmUserDataRxPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>494</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1382</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2949</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2949</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATION_CONFIG_VARIANT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>525</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1383</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2956</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2956</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.ComUserDataSupport.CanNmRxUserDataPduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>495</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1384</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2969</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2969</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1385</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2979</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2979</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.UserDataRef.PnEiraRxSduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>508</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1386</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_2993</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>2993</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00071</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1387</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_3012</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>3012</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmPnInfo</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>580</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1388</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_3018</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>3018</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00061</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>116</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1389</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_3031</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>3031</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1390</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_3046</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>3046</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00060</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1391</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_3059</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>3059</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1392</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_3074</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>3074</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00069</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1393</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_3083</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>3083</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00069</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1394</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_3099</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>3099</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00063</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1395</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_3113</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>3113</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1396</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_3138</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>3138</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1397</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_3152</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>3152</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.REQPROD_270433_1.RFC_58899.CanNmPnFilterMaskByteValue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>534</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1398</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/CanNm.xdm.m4_3153</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/config/CanNm.xdm.m4</sourcefile>
      <sourceline>3153</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.IMPLEMENTATIONCONFIGCLASS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1399</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/CanNm_Bswmd.arxml.m4_10</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate_swcd/swcd/CanNm_Bswmd.arxml.m4</sourcefile>
      <sourceline>10</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.BSWMDGeneration.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>507</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1400</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/CanNm_Bswmd.arxml.m4_81</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate_swcd/swcd/CanNm_Bswmd.arxml.m4</sourcefile>
      <sourceline>81</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNm_MainFunction_Main.Partition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>607</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1401</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/CanNm_Bswmd.arxml.m4_93</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate_swcd/swcd/CanNm_Bswmd.arxml.m4</sourcefile>
      <sourceline>93</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.Receiver.Partition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>617</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1402</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/CanNm_Bswmd.arxml.m4_94</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate_swcd/swcd/CanNm_Bswmd.arxml.m4</sourcefile>
      <sourceline>94</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.Receiver.Schedule</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>618</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1403</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/CanNm_Bswmd.arxml.m4_187</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate_swcd/swcd/CanNm_Bswmd.arxml.m4</sourcefile>
      <sourceline>187</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNm_MainFunction_X.Partition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>611</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1404</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/CanNm_Bswmd.arxml.m4_199</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate_swcd/swcd/CanNm_Bswmd.arxml.m4</sourcefile>
      <sourceline>199</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.Sender</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>612</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1405</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/CanNm_Bswmd.arxml.m4_200</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate_swcd/swcd/CanNm_Bswmd.arxml.m4</sourcefile>
      <sourceline>200</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.Sender.Partition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>613</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1406</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/CanNm_Bswmd.arxml.m4_201</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate_swcd/swcd/CanNm_Bswmd.arxml.m4</sourcefile>
      <sourceline>201</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.Sender.Rx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>614</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1407</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/CanNm_Bswmd.arxml.m4_1069</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate_swcd/swcd/CanNm_Bswmd.arxml.m4</sourcefile>
      <sourceline>1069</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.BSWMDGeneration.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>505</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1408</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/CanNm_Bswmd.arxml.m4_1386</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate_swcd/swcd/CanNm_Bswmd.arxml.m4</sourcefile>
      <sourceline>1386</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.BSWMDGeneration.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>506</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1409</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate_var/xgen/CanNm.xgen_5</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate_var/xgen/CanNm.xgen</sourcefile>
      <sourceline>5</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Format.VCC-62</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>540</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1410</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_var/xgen/CanNm.xgen_36</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate_var/xgen/CanNm.xgen</sourcefile>
      <sourceline>36</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.PBSelectable.FileName</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>564</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1411</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_var/xgen/CanNm.xgen_42</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate_var/xgen/CanNm.xgen</sourcefile>
      <sourceline>42</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.PBSelectable.TypeName</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>565</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1412</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_var/xgen/CanNm.xgen_64</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate_var/xgen/CanNm.xgen</sourcefile>
      <sourceline>64</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Impl.Relocatable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>545</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1413</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_var/xgen/CanNm.xgen_80</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate_var/xgen/CanNm.xgen</sourcefile>
      <sourceline>80</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00447</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>363</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1414</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_var/xgen/CanNm.xgen_84</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate_var/xgen/CanNm.xgen</sourcefile>
      <sourceline>84</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Impl.Hash</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>538</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1415</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_var/xgen/CanNm.xgen_89</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate_var/xgen/CanNm.xgen</sourcefile>
      <sourceline>89</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00202</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>238</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1416</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_var/xgen/CanNm.xgen_134</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/src/Autosar/generate_var/xgen/CanNm.xgen</sourcefile>
      <sourceline>134</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM301</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Format.C</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>541</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1417</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>CanNm.EB.Dsn.Algorithm.ChannelPartition</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/project/design/basic_software/algorithm_view.xml</sourcefile>
      <sourceline>64</sourceline>
      <version>1</version>
      <description>
          If multicore per channel is enabled than each channel shall have configured 
          a partition on which its operations are run.
        </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_macros/CanNm_Macros.m_48</srcid><srcstatus/><internalId>781</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/CanNm_Macros.m_16</srcid><srcstatus/><internalId>783</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.ChannelPartition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>603</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1418</internalId></specobject>
    <specobject>
      <id>CanNm.EB.Dsn.Algorithm.AggregatePartition</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/project/design/basic_software/algorithm_view.xml</sourcefile>
      <sourceline>84</sourceline>
      <version>1</version>
      <description>
          A partition shall be set that aggregates PN EIRA information if multicore 
          per channel is enabled and PN EIRA information is generated.
        </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_macros/CanNm_Macros.m_61</srcid><srcstatus/><internalId>782</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/CanNm_Macros.m_29</srcid><srcstatus/><internalId>784</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.AggregatePartition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>604</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1419</internalId></specobject>
  </specobjects>
    <specobjects doctype="swdd">
    <specobject>
      <id>CanNm.EB.Dsn.StateDynamics.PASSIVE_START_BUS_SLEEP_MODE</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/project/design/basic_software/state_dynamics_view.xml</sourcefile>
      <sourceline>54</sourceline>
      <version>1</version>
      <description>
            In state Bus-Sleep Mode and user calls
            &lt;function&gt;CanNm_PassiveStartUp()&lt;/function&gt;,
            the CanNm module enters Network Mode.
        </description>
      <comment>
             When CanNm module enters Network Mode, by default
             enters Repeat Message State.
        </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_475</srcid><srcstatus/><internalId>842</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32019</srcid><srcstatus/><internalId>1577</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_0087</srcid><srcstatus/><internalId>1651</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00128.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>477</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1420</internalId></specobject>
    <specobject>
      <id>CanNm.EB.Dsn.StateDynamics.Internal_Transition_BUS_SLEEP_MODE</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/project/design/basic_software/state_dynamics_view.xml</sourcefile>
      <sourceline>80</sourceline>
      <version>1</version>
      <description>
            In state Bus-Sleep Mode, when the CanNm module receives
            successfully Network Management PDU, the CanNm
            module notify the upper layer by calling the
            &lt;function&gt;Nm_NetworkStartIndication()&lt;/function&gt;.
        </description>
      <comment>
            When the CanNm module receives successfully Network
            Management PDU, module calls
            &lt;function&gt;CanNm_RxIndication()&lt;/function&gt;.
        </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_308</srcid><srcstatus/><internalId>1081</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0092</srcid><srcstatus/><internalId>1749</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00127</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>194</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1421</internalId></specobject>
    <specobject>
      <id>CanNm.EB.Dsn.StateDynamics.NET_REQSTATUS_CHANGED_BUS_SLEEP_MODE_NetworkRequest</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/project/design/basic_software/state_dynamics_view.xml</sourcefile>
      <sourceline>108</sourceline>
      <version>1</version>
      <description>
            In state Bus-Sleep Mode and user calls
            &lt;function&gt;CanNm_NetworkRequest()&lt;/function&gt;,
            the CanNm module enters Network Mode.
        </description>
      <comment>
             When CanNm module enters Network Mode, by default
             enters Repeat Message State.
        </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_355</srcid><srcstatus/><internalId>1087</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32027</srcid><srcstatus/><internalId>1576</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00129</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>196</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1422</internalId></specobject>
    <specobject>
      <id>CanNm.EB.Dsn.StateDynamics.NET_REQSTATUS_CHANGED_BUS_SLEEP_MODE_NetworkGwEraRequest</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/project/design/basic_software/state_dynamics_view.xml</sourcefile>
      <sourceline>133</sourceline>
      <version>1</version>
      <description>
            In state Bus-Sleep Mode and user calls
            &lt;function&gt;CanNm_NetworkGwEraRequest()&lt;/function&gt;,
            the CanNm module enters Network Mode.
        </description>
      <comment>
             When CanNm module enters Network Mode, by default
             enters Repeat Message State.
        </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_356</srcid><srcstatus/><internalId>1088</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_CanNm_NetworkGwEraRequest_ActiveWakeupBit_BusSleepMode</srcid><srcstatus/><internalId>1535</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00129</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>196</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1423</internalId></specobject>
    <specobject>
      <id>CanNm.EB.Dsn.StateDynamics.RMS_TIMEOUT_REPEAT_MESSAGE_STATE</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/project/design/basic_software/state_dynamics_view.xml</sourcefile>
      <sourceline>159</sourceline>
      <version>1</version>
      <description>
            In Repeat Message State if Repeat Message Timer expires,
            and the network is requested (call of &lt;function&gt;CanNm_NetworkRequest()&lt;/function&gt;),
            the state machine enters Normal Operation State.
        </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1278</srcid><srcstatus/><internalId>1160</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32053</srcid><srcstatus/><internalId>1579</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_32038</srcid><srcstatus/><internalId>1699</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00102</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>170</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00103</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>171</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1424</internalId></specobject>
    <specobject>
      <id>CanNm.EB.Dsn.StateDynamics.Internal_Transition_NORMAL_OPERATION_STATE</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/project/design/basic_software/state_dynamics_view.xml</sourcefile>
      <sourceline>185</sourceline>
      <version>1</version>
      <description>
            In Normal Operation State, if rx idication is received,
            the Remote Sleep Indication Detection timer is restarted.
        </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_925</srcid><srcstatus/><internalId>1128</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32051</srcid><srcstatus/><internalId>1644</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00180</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>462</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1425</internalId></specobject>
    <specobject>
      <id>CanNm.EB.Dsn.StateDynamics.UNI_TIMEOUT_NORMAL_OPERATION_REMOTE_ACTIVITY</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/project/design/basic_software/state_dynamics_view.xml</sourcefile>
      <sourceline>206</sourceline>
      <version>1</version>
      <description>
            In state Normal Operation, if no rx messages are received for a configurable
            amount of time determined by &lt;parameter&gt;CANNM_REMOTE_SLEEP_IND_TIME&lt;/parameter&gt;,
            the CanNm module calls &lt;function&gt;Nm_RemoteSleepIndication()&lt;/function&gt;.
        </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_960</srcid><srcstatus/><internalId>1130</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32057</srcid><srcstatus/><internalId>1598</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00150</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>208</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1426</internalId></specobject>
    <specobject>
      <id>CanNm.EB.Dsn.StateDynamics.REPEAT_MESSAGE_REASON_NORMAL_OPERATION_REMOTE_SLEEP</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/project/design/basic_software/state_dynamics_view.xml</sourcefile>
      <sourceline>228</sourceline>
      <version>1</version>
      <description>
            In state Normal Operation, if Remote Sleep Indication has
            been previously detected, and remote message reason is received,
            the CanNm module calls the &lt;function&gt;Nm_RemoteSleepCancellation()&lt;/function&gt;
            and transition to Repeat Message State is done.
        </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1047</srcid><srcstatus/><internalId>1135</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32052</srcid><srcstatus/><internalId>1645</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00152.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>440</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1427</internalId></specobject>
    <specobject>
      <id>CanNm.EB.Dsn.StateDynamics.RX_INDICATION_NORMAL_OPERATION_REMOTE_SLEEP</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/project/design/basic_software/state_dynamics_view.xml</sourcefile>
      <sourceline>251</sourceline>
      <version>1</version>
      <description>
            In state Normal Operation, if Remote Sleep Indication has
            been previously detected and if a Network Management
            PDU is received, the CanNm module calls the
            &lt;function&gt;Nm_RemoteSleepCancellation()&lt;/function&gt;
            and current state remains Normal Operation State.
        </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1086</srcid><srcstatus/><internalId>1139</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_33030</srcid><srcstatus/><internalId>1657</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00151.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>438</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1428</internalId></specobject>
    <specobject>
      <id>CanNm.EB.Dsn.StateDynamics.REPEAT_MESSAGE_REASON_NORMAL_OPERATION_REMOTE_ACTIVITY_1</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/project/design/basic_software/state_dynamics_view.xml</sourcefile>
      <sourceline>275</sourceline>
      <version>1</version>
      <description>
            In Normal Operation State, if user calls
            &lt;function&gt;CanNm_RepeatMessageRequest()&lt;/function&gt;,
            the CanNm module enters the Repeat Message State.
        </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1048</srcid><srcstatus/><internalId>1136</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0132</srcid><srcstatus/><internalId>1766</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_RepeatMsgReqCommDisable</srcid><srcstatus/><internalId>1769</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00120</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1429</internalId></specobject>
    <specobject>
      <id>CanNm.EB.Dsn.StateDynamics.REPEAT_MESSAGE_REASON_NORMAL_OPERATION_REMOTE_ACTIVITY_2</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/project/design/basic_software/state_dynamics_view.xml</sourcefile>
      <sourceline>297</sourceline>
      <version>1</version>
      <description>
            In Normal Operation State, at Repeat Message Request Bit Indication,
            the CanNm module enters the Repeat Message State.
        </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1049</srcid><srcstatus/><internalId>1137</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0118_EB</srcid><srcstatus/><internalId>1758</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00119</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>187</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1430</internalId></specobject>
    <specobject>
      <id>CanNm.EB.Dsn.StateDynamics.RMS_TIMEOUT_READY_SLEEP_STATE</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/project/design/basic_software/state_dynamics_view.xml</sourcefile>
      <sourceline>318</sourceline>
      <version>1</version>
      <description>
            In Repeat Message State, if the network has been released,
            the CanNm module enters the Ready Sleep State.
        </description>
      <comment>
            The network management state machine stay in the Repeat
            Message State for a configurable amount of time determined
            by &lt;parameter&gt;CANNM_REPEAT_MESSAGE_TIME&lt;/parameter&gt;; after
            that time the CanNm module leave the Repeat Message State.
        </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1262</srcid><srcstatus/><internalId>1159</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32037</srcid><srcstatus/><internalId>1698</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00102</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>170</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00106</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>174</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1431</internalId></specobject>
    <specobject>
      <id>CanNm.EB.Dsn.StateDynamics.REPEAT_MESSAGE_REASON_READY_SLEEP_STATE</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/project/design/basic_software/state_dynamics_view.xml</sourcefile>
      <sourceline>349</sourceline>
      <version>1</version>
      <description>
            In Ready Sleep State, if Remote Sleep Indication has been previously
            detected and repeat message reason is received, the CanNm module calls
            the &lt;function&gt;Nm_RemoteSleepCancellation()&lt;/function&gt; and transition
            to Repeat Message State is done.
        </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_669</srcid><srcstatus/><internalId>1109</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0128</srcid><srcstatus/><internalId>1765</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00152.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>441</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1432</internalId></specobject>
    <specobject>
      <id>CanNm.EB.Dsn.StateDynamics.REPEAT_MESSAGE_REASON_READY_SLEEP_STATE_1</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/project/design/basic_software/state_dynamics_view.xml</sourcefile>
      <sourceline>372</sourceline>
      <version>1</version>
      <description>
            In Ready Sleep State, if user calls
            &lt;function&gt;CanNm_RepeatMessageRequest()&lt;/function&gt;
            the CanNm module enters the Repeat Message State.
        </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_670</srcid><srcstatus/><internalId>1110</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0139</srcid><srcstatus/><internalId>1757</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00112</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1433</internalId></specobject>
    <specobject>
      <id>CanNm.EB.Dsn.StateDynamics.REPEAT_MESSAGE_REASON_READY_SLEEP_STATE_2</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/project/design/basic_software/state_dynamics_view.xml</sourcefile>
      <sourceline>394</sourceline>
      <version>1</version>
      <description>
            In Ready Sleep State, at Repeat Message Request Bit Indication,
            the CanNm module enters the Repeat Message State.
        </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_671</srcid><srcstatus/><internalId>1111</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0125</srcid><srcstatus/><internalId>1763</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>179</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1434</internalId></specobject>
    <specobject>
      <id>CanNm.EB.Dsn.StateDynamics.NET_REQ_STATUS_CHANGED_NORMAL_OPERATION_STATE</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/project/design/basic_software/state_dynamics_view.xml</sourcefile>
      <sourceline>415</sourceline>
      <version>1</version>
      <description>
            In Normal Operation State, when the network is released,
            (call of &lt;function&gt;CanNm_NetworkRelease&lt;/function&gt;),
            the CanNm module enters the Ready Sleep state.
        </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_936</srcid><srcstatus/><internalId>1129</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1034</srcid><srcstatus/><internalId>1133</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32029</srcid><srcstatus/><internalId>1583</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00118</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>186</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00105</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>173</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1435</internalId></specobject>
    <specobject>
      <id>CanNm.EB.Dsn.StateDynamics.NET_REQ_STATUS_CHANGED_READY_SLEEP_STATE</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/project/design/basic_software/state_dynamics_view.xml</sourcefile>
      <sourceline>441</sourceline>
      <version>1</version>
      <description>
            In Ready Sleep State, when the network is requested
            (call of &lt;function&gt;CanNm_NetworkRequest()&lt;/function&gt;),
            the CanNm module enters the Normal Operation State.
        </description>
      <comment>
            In Ready Sleep State, when CanNm module start transmission
            of Network Management PDUs, the state machine
            enters the Normal Operation State.
        </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_569</srcid><srcstatus/><internalId>1105</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_625</srcid><srcstatus/><internalId>1107</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0105</srcid><srcstatus/><internalId>1730</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>178</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00116</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1436</internalId></specobject>
    <specobject>
      <id>CanNm.EB.Dsn.StateDynamics.RX_INDICATION_READY_SLEEP_STATE</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/project/design/basic_software/state_dynamics_view.xml</sourcefile>
      <sourceline>476</sourceline>
      <version>1</version>
      <description>
            In Ready Sleep State, if Remote Sleep Indication has been
            previously detected and if a Network Management PDU is received,
            the CanNm module calls &lt;function&gt;Nm_RemoteSleepCancellation()&lt;/function&gt;.
        </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_707</srcid><srcstatus/><internalId>1113</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0127</srcid><srcstatus/><internalId>1744</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00151.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>439</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1437</internalId></specobject>
    <specobject>
      <id>CanNm.EB.Dsn.StateDynamics.NM_TIMEOUT_READY_SLEEP_STATE</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/project/design/basic_software/state_dynamics_view.xml</sourcefile>
      <sourceline>498</sourceline>
      <version>1</version>
      <description>
            In Ready Sleep State, if the NM-Timeout Timer expires
            the CanNm module enters Prepare Bus-Sleep Mode.
        </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_535</srcid><srcstatus/><internalId>1104</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_NmTimeOut_Start</srcid><srcstatus/><internalId>1790</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1438</internalId></specobject>
    <specobject>
      <id>CanNm.EB.Dsn.StateDynamics.NET_REQ_STATUS_CHANGED_PREPARE_BUS_SLEEP_MODE</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/project/design/basic_software/state_dynamics_view.xml</sourcefile>
      <sourceline>519</sourceline>
      <version>1</version>
      <description>
            In Prepare Bus-Sleep Mode, when the network has been requested
            and if &lt;parameter&gt;CANNM_IMMEDIATE_RESTART_ENABLED&lt;/parameter&gt;
            is set to TRUE, the CanNm module transmit a Network
            Management PDU and Network Mode is entered.
        </description>
      <comment>
            When the Network Mode is entered, by default, the CanNm module
            enters Repeat Message State.
        </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1159</srcid><srcstatus/><internalId>1148</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0084</srcid><srcstatus/><internalId>1729</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>190</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00123</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>191</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00315</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>302</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1439</internalId></specobject>
    <specobject>
      <id>CanNm.EB.Dsn.StateDynamics.RX_INDICATION_PREPARE_BUS_SLEEP_MODE</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/project/design/basic_software/state_dynamics_view.xml</sourcefile>
      <sourceline>554</sourceline>
      <version>1</version>
      <description>
            In Prepare Bus-Sleep Mode, at successful reception of
            a Network Management PDU, CanNm module enters Network Mode.
        </description>
      <comment>
            In Prepare Bus-Sleep Mode, when the Network Mode
            is entered, by default, the CanNm module enters
            Repeat Message State.
        </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1378</srcid><srcstatus/><internalId>1167</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32043</srcid><srcstatus/><internalId>1586</internalId></linkedfrom><linkedfrom><srcid>TC_CANNM_CanNm_PrepareBusSleep_To_RepeatMessage_Coverage</srcid><srcstatus/><internalId>1722</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00124</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>192</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00315</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>302</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1440</internalId></specobject>
    <specobject>
      <id>CanNm.EB.Dsn.StateDynamics.NET_REQ_STATUS_CHANGED_NETWORK_MODE</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/project/design/basic_software/state_dynamics_view.xml</sourcefile>
      <sourceline>584</sourceline>
      <version>1</version>
      <description>
            In Network Mode, if &lt;parameter&gt;CanNmPnHandleMultipleNetworkRequests&lt;/parameter&gt;
            is set to TRUE, CanNm_NetworkRequest trigger a state transition to Repeat
            Message state.
        </description>
      <comment>
            If PDU tranmission ability is enabled the NM PDUs shall be transmitted using
            CanNmImmediateNmCycleTime as cycle time and the transmission of the first
            NM PDU shall be triggered as soon as possible. After these transmissions
            the Message Cycle Timer shall be reloaded with CanNmImmediateNmCycleTime.
            The CanNmMsgCycleOffset shall not be applied in this case.
        </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_485</srcid><srcstatus/><internalId>1102</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_PN_SpontaneousTr_ReEnterRMS</srcid><srcstatus/><internalId>1525</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00454</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>365</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1441</internalId></specobject>
    <specobject>
      <id>CanNm.EB.Dsn.StateDynamics.Internal_Transition_NETWORK_MODE_0</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/project/design/basic_software/state_dynamics_view.xml</sourcefile>
      <sourceline>613</sourceline>
      <version>1</version>
      <description>
            In Network Mode, if &lt;parameter&gt;CANNM_COM_CONTROL_ENABLED&lt;/parameter&gt;
            is set to TRUE and &lt;parameter&gt;CANNM_PASSIVE_MODE_ENABLED&lt;/parameter&gt;
            is set to FALSE and communication is enabled the CanNm module start
            the CanNm Message Cycle Timer in order to start transmission of
            Network Management PDUs, restart the NM-Timeout Timer and start
            the Remote Sleep Indication Detection.
        </description>
      <comment>
            Communication control by enable or disable communication.
        </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_434</srcid><srcstatus/><internalId>1098</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_33029</srcid><srcstatus/><internalId>1656</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM178</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00179</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>228</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00180</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>462</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1442</internalId></specobject>
    <specobject>
      <id>CanNm.EB.Dsn.StateDynamics.Internal_Transition_NETWORK_MODE_1</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/project/design/basic_software/state_dynamics_view.xml</sourcefile>
      <sourceline>649</sourceline>
      <version>1</version>
      <description>
            In Network Mode, if &lt;parameter&gt;CANNM_COM_CONTROL_ENABLED&lt;/parameter&gt;
            is set to TRUE and &lt;parameter&gt;CANNM_PASSIVE_MODE_ENABLED&lt;/parameter&gt;
            is set to FALSE and communication is disabled the CanNm module stop
            the CanNm Message Cycle Timer in order to stop transmission of
            Network Management PDUs, stop the NM-Timeout Timer and stop the
            Remote Sleep Indication Detection.
        </description>
      <comment>
            Communication control by enable or disable communication.
        </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_435</srcid><srcstatus/><internalId>1099</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_33029</srcid><srcstatus/><internalId>1656</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM178</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00179</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>228</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00180</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>462</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1443</internalId></specobject>
    <specobject>
      <id>CanNm.EB.Dsn.StateDynamics.Internal_Transition_NETWORK_MODE_2</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/project/design/basic_software/state_dynamics_view.xml</sourcefile>
      <sourceline>685</sourceline>
      <version>1</version>
      <description>
            In Network Mode, at successful reception of a Network Management
            PDU (call of &lt;function&gt;CanNm_RxIndication()&lt;/function&gt;) the CanNm
            module restart the NM-Timeout Timer if PDU tranmission ability is enabled.
        </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_454</srcid><srcstatus/><internalId>1100</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_NmTimeOut_Restart_2</srcid><srcstatus/><internalId>1768</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00098</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>463</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00206</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>240</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1444</internalId></specobject>
    <specobject>
      <id>CanNm.EB.Dsn.StateDynamics.Internal_Transition_NETWORK_MODE_3</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/project/design/basic_software/state_dynamics_view.xml</sourcefile>
      <sourceline>711</sourceline>
      <version>1</version>
      <description>
            In Network Mode, at successful transmission of a Network Management
            PDU (call of &lt;function&gt;CanNm_TxConfirmation()&lt;/function&gt;) the CanNm
            module restart the NM-Timeout Timer if PDU tranmission ability is enabled.
        </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_464</srcid><srcstatus/><internalId>1101</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_Enable_TxConfirmation</srcid><srcstatus/><internalId>1531</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00099.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>465</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1445</internalId></specobject>
    <specobject>
      <id>CanNm.EB.Dsn.StateDynamics.UNI_TIMEOUT_PREPARE_BUS_SLEEP_MODE</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/project/design/basic_software/state_dynamics_view.xml</sourcefile>
      <sourceline>733</sourceline>
      <version>1</version>
      <description>
            In Prepare Bus-Sleep Mode, state machine stay for a configurable amount
            of time determined by &lt;parameter&gt;CANNM_WAIT_BUS_SLEEP_TIME&lt;/parameter&gt;;
            after that time the Prepare Bus-Sleep Mode is left and the Bus-Sleep Mode
            is entered.
        </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_1312</srcid><srcstatus/><internalId>1161</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32022</srcid><srcstatus/><internalId>1588</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM115</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM088</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1446</internalId></specobject>
    <specobject>
      <id>CanNm.EB.Dsn.StateDynamics.PASSIVE_START_PREPARE_BUS_SLEEP_MODE</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/project/design/basic_software/state_dynamics_view.xml</sourcefile>
      <sourceline>760</sourceline>
      <version>1</version>
      <description>
            In state Prepare Bus-Sleep Mode and user calls
            &lt;function&gt;CanNm_PassiveStartUp()&lt;/function&gt;,
            the CanNm module enters Network Mode.
        </description>
      <comment>
             When CanNm module enters Network Mode, by default
             enters Repeat Message State.
        </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm.c.m4_476</srcid><srcstatus/><internalId>843</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CanNm_32020</srcid><srcstatus/><internalId>1578</internalId></linkedfrom><linkedfrom><srcid>TS_CanNm_33025</srcid><srcstatus/><internalId>1648</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00128.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>478</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1447</internalId></specobject>
    <specobject>
      <id>CanNm.EB.Dsn.StateDynamics.Internal_Transition_SENDING_SUB_MODE_1</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/project/design/basic_software/state_dynamics_view.xml</sourcefile>
      <sourceline>786</sourceline>
      <version>1</version>
      <description>
            In SendingSubMode, if &lt;parameter&gt;CANNM_PASSIVE_MODE_ENABLED&lt;/parameter&gt;
            and &lt;parameter&gt;CANNM_IMMEDIATE_TXCONF_ENABLED&lt;/parameter&gt; are set to FALSE,
            action &lt;function&gt;Nm_TxTimeoutException()&lt;/function&gt; indicate that an attempt
            to send an NM message failed.
            If &lt;parameter&gt;CANNM_PN_SUPPORTED&lt;/parameter&gt; is set to TRUE, action
            &lt;function&gt;CanSM_TxTimeoutException()&lt;/function&gt;is called once when the
            NM Message Tx Timeout Timer expires.
        </description>
      <comment>
            CanSM_TxTimeoutException function notify the CanSM module,
            that the CanNm has detected for the affected partial CAN
            network a tx timeout exception (which shall be recovered by
            the CanSM module with a transition to no communication and
            back to the requested communication mode again).
        </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_773</srcid><srcstatus/><internalId>1116</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_NmMessageTxTimeout</srcid><srcstatus/><internalId>1549</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00066.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>490</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00066.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>491</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM446</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1448</internalId></specobject>
    <specobject>
      <id>CanNm.EB.Dsn.StateDynamics.Internal_Transition_SENDING_SUB_MODE_2</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/project/design/basic_software/state_dynamics_view.xml</sourcefile>
      <sourceline>827</sourceline>
      <version>1</version>
      <description>
            In SendingSubMode, if transmission of Network Management PDUs has
            been started and the CanNm Message Cycle Timer expires, the CanNm module
            transmit a Network Management PDU by calling &lt;function&gt;CanIf_Transmit&lt;/function&gt;.
        </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_819</srcid><srcstatus/><internalId>1120</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_0111</srcid><srcstatus/><internalId>1592</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00032</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>401</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1449</internalId></specobject>
    <specobject>
      <id>CanNm.EB.Dsn.StateDynamics.Internal_Transition_SENDING_SUB_MODE_3</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/doc/project/design/basic_software/state_dynamics_view.xml</sourcefile>
      <sourceline>849</sourceline>
      <version>1</version>
      <description>
            In SendingSubMode, when the NM-Timeout Timer expires,
            the CanNm module start the NM-Timeout Timer.
        </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/CanNm_HsmCanNmFnct.c_843</srcid><srcstatus/><internalId>1123</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TC_CANNM_SendingSubMode_NMTimeout_Timer</srcid><srcstatus/><internalId>1771</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00101</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>169</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00117</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1450</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_DBGINST_001</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/build/reqm/common_req/CanNm_DbgInst_Trace_APIs.c</sourcefile>
      <sourceline>40</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
   Test Dbg
&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 
  VP: Successful compilation test.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.DBGINST001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>653</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.DBGINST002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>654</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.DBGINST003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>655</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.DBGINST004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>656</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.DBGINST005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>657</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1451</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>CanNm_Test_IsValidConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/build/reqm/common_req/CanNm_PbcfgM_Main_Impl_Test.c</sourcefile>
      <sourceline>71</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that the function CanNm_IsValidConfig() is implemented as specified.
  
Test Object: 
    CanNm_IsValidConfig()
  
Test Precondition: 
    The CanNm module is not initialized.
  
Test Execution: 
    01: Call the function CanNm_IsValidConfig() with an NULL_PTR.
    02: VP:
        The function must have returned with E_NOT_OK.
    03: Create an invalid configuration regarding the endianness and alignment.
    04: Call the function CanNm_IsValidConfig() with this invalid configuration.
    05: VP(CanNm.EB.PBCFGM106):
        The function must have returned with E_NOT_OK.
    The following 3 steps are only executed if the module has a link-time configuration:
        06: Create an invalid configuration regarding the link time configuration.
        07: Call the function CanNm_IsValidConfig() with this invalid configuration.
        08: VP(CanNm.EB.PBCFGM105):
                The function must have returned with E_NOT_OK.
    09: Create an invalid configuration regarding the compile time configuration.
    10: Call the function CanNm_IsValidConfig() with this invalid configuration.
    11: VP(CanNm.EB.PBCFGM104):
        The function must have returned with E_NOT_OK.
    12: Create an invalid configuration regarding the published information configuration.
    13: Call the function CanNm_IsValidConfig() with this invalid configuration.
    14: VP(CanNm.EB.PBCFGM104_1):
        The function must have returned with E_NOT_OK.
    15: Call the function CanNm_IsValidConfig() with a valid configuration.
    16: VP:
        The function must have returned with E_OK.
    17: VP(CanNm.EB.PBCFGM107):
        Check if CANNM_PBCFGM_SUPPORT_ENABLED is set to STD_ON.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.PBCFGM101</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>658</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.PBCFGM102</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>659</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.PBCFGM104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>660</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.PBCFGM104_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>661</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.PBCFGM105</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>662</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.PBCFGM106</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>663</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.PBCFGM107</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>664</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1452</internalId></specobject>
    <specobject>
      <id>CanNm_Test_VerifyInitWithPcfgM</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/build/reqm/common_req/CanNm_PbcfgM_Main_Impl_Test.c</sourcefile>
      <sourceline>225</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that the CanNm can be initialized via the PbcfgM.
  
Test Object: 
    CanNm_IsValidConfig()
  
Test Precondition: 
    The CanNm module must not have been initialized.
  
Test Execution: 
    01: Create an invalid configuration regarding the endianness and alignment.
    02: Call the function CanNm_Init() with this invalid configuration.
    03: VP:
        A Det call must have been performed correctly.
    04: Create an invalid configuration regarding the compile time configuration.
    05: Call the function CanNm_Init() with this invalid configuration.
    06: VP:
        A Det call must have been performed correctly.
    The following 3 steps are only executed if the module has a link-time configuration:
        07: Create an invalid configuration regarding the link time configuration.
        08: Call the function CanNm_Init() with this invalid configuration.
        09: VP:
            A Det call must have been performed correctly.
    10: Create an invalid configuration regarding the published information configuration.
    11: Call the function CanNm_Init() with this invalid configuration.
    12: VP:
        A Det call must have been performed correctly.
    13: Initialize the PbcfgM_GetConfig() stub that way that it can return a valid function.
    14: Call the function CanNm_Init() with a null pointer.
    15: VP:
        The function PbcfgM_GetConfig() must have been called once.
    16: VP:
        No Det call must have been performed.
    17: VP:
        The module internal configuration pointer CanNm_RootPtr must equal
        the pointer supplied to the initialization function
    18: PbcfgM_GetConfig shall return E_NOT_OK.
        set the configuration pointer which is returned to NULL_PTR
    19: Call CanNm_Init with NULL_PTR.
    20: VP(CanNm.EB.PBCFGM110):
        Check if Det error is reported.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.PBCFGM110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>666</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1453</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>CanNm_Test_PBcfgM_Off</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/build/reqm/common_req/CanNm_PbcfgM_Off_Compile_Test.c</sourcefile>
      <sourceline>26</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      Verify that if PbcfgM support is disabled then CanNm_PBCfg.c shall define
      TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME.
      CANNM_PBCFGM_SUPPORT_ENABLED shall be set to STD_OFF.
      CANNM_RELOCATABLE_CFG_ENABLE shall be set to STD_OFF.
    
Test Object: None.
Test Precondition: 
      - PbcfgM configuration does not refer to module CanNm (or no config exists)
      - Include CanNm_PBcfg.c only for step 01 and 02.
      - Include CanNm_Cfg.h for step 03.
    
Test Execution: 
        01: VP(CanNm.EB.PbcfgM_General_6):
            Check that symbols TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME exists.
        02: VP(CanNm.EB.PbcfgM_General_6):
            Check that symbols TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME has the value
            CanNm_ConfigLayoutType and CANNM_CONFIG_NAME respectively.
        03: VP (CanNm.EB.PBCFGM107):
            Verify that CANNM_PBCFGM_SUPPORT_ENABLED is set to STD_OFF.
        04: VP(CanNm.EB.PBCFGM108, CanNm.EB.RelocatablePBCfg):
            CANNM_RELOCATABLE_CFG_ENABLE shall be STD_OFF
    
Test Input: 
    
Test Output: 
    &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.PbcfgM_General_6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>669</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.PBCFGM107</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>664</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.PBCFGM108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>665</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.RelocatablePBCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>542</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1454</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>CanNm_Test_PBcfgM_On</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/build/reqm/common_req/CanNm_PbcfgM_On_Compile_Test.c</sourcefile>
      <sourceline>24</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      1.)
      Verify that CANNM_RELOCATABLE_CFG_ENABLE is defined
      in the header file CanNm_Cfg.h.
      2.)
      Verify that if PbcfgM support is enabled then CanNm_PBCfg.c shall NOT define
      TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME.
    
Test Object: None.
Test Precondition: 
        - CANNM_PBCFGM_SUPPORT_ENABLED = STD_ON
    
Test Execution: 
        ------------------------ 1.) ---------------------
        01: VP (CanNm.EB.PbcfgM_General_3,
                CanNm.EB.PBCFGM108,
                CanNm.EB.RelocatablePBCfg):
            Verify that CANNM_RELOCATABLE_CFG_ENABLE is set to STD_ON.
        ------------------------ 2.) ---------------------
        02: Include CanNm_PBcfg.c.
        03: VP(CanNm.EB.PbcfgM_General_6):
            Check that symbols TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME exist.
    
Test Input: 
        None.
    
Test Output: 
        Binary file.
    &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.PbcfgM_General_3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.PbcfgM_General_6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>669</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.PBCFGM108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>665</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.RelocatablePBCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>542</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1455</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_VerifyCodeStub</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/build/reqm/common_req/CanNm_VerifyStub_testspec.h</sourcefile>
      <sourceline>7</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that the code stub of the module is consistent with the
    implementation.
  
Test Object: 
    Relocatable post-build configuration macros generation.
  
Test Precondition: 
    Permutation [VerifyStub == true]:
      - Unit test contains its own code stub
      - Module is excluded from generation and compilation
    Permutation [VerifyStub == false]:
      - unit test excludes its own code stub
  
Test Execution: 
    01: Invoke all module APIs
    02: VP(CanNm.EB.Interface.Consistency):
        Unit test compiles (implicitly tested)
  
Test Input: 
  
Test Output: 
    Test is correctly generated and compiled.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Interface.Consistency</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>671</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1456</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_30005</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_ComTest_1/source/application/test_config.h</sourcefile>
      <sourceline>31</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    - Verify that source code gets compiled for the configuration with only
      one channel and all optional features and APIs disabled.
    - Verify that Rte generates SchM stubs, Main_Function and Exclusive
      areas required by CanNm module.
  
Test Object: None.
Test Precondition: 
    * Important configuration details:
      - "CanNmVersionInfoApi" is set to 'false'
      - "CanNmComControlEnabled" is set to 'false'
      - "CanNmStateChangeIndEnabled" is set to 'false'
      - "CanNmPassiveModeEnabled" is set to 'false'
      - "CanNmImmediateTxconfEnabled" is set to 'false'
      - "CanNmUserDataEnabled" is set to 'false'
      - "CanNmRemoteSleepIndEnabled" is set to 'false'
      - "CanNmNodeDetectionEnabled" is set to 'false'
      - "CanNmBusSynchronizationEnabled" is set to 'false'
      - "CanNmBusLoadReductionEnabled" is set to 'false'
      - "CanNmRepeatMsgIndEnabled" is set to 'false'
      - "CanNmDevErrorDetect" is set to 'false'
      - "CanNmPnEnabled" is set to 'false'
      - "CanNmPnEiraCalcEnabled" is set to 'false'
      - "CanNmActiveWakeupBitEnabled" is set to 'false'
      - "CanNmSynchronizedPncShutdownEnabled" is set to 'false' or disabled
      - "CanNmTxConfirmationReliableResultEnable" is set to 'false' or disabled
      - Only one channel is configured
    * Misc:
      To ensure that APIs which shall not be provided by the CanNm module
      for this configuration are actually not provided,
      dummy implementations are provided for the following API functions:
      - CanNm_SetUserData()
      - CanNm_GetUserData()
      - CanNm_RequestBusSynchronization()
      - CanNm_CheckRemoteSleepIndication()
      - CanNm_GetVersionInfo()
      - CanNm_DisableCommunication()
      - CanNm_EnableCommunication()
      - CanNm_Transmit()
      - CanNm_ConfirmPnAvailability()
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM188</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>472</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>473</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>474</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00158</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00166</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00161</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00149</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>207</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00185</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00052</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM168</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM274</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM272</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>384</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00088</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>383</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM014_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00040</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00041</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00044</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00070</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>123</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00066</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.EB_CANNM_Define</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>593</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.BSWMDGeneration.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>505</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.BSWMDGeneration.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>506</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.BSWMDGeneration.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>507</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00084</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>360</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.ECUC_CanNm_00097</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>417</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1457</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_30010</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_ComTest_10/source/application/test_config.h</sourcefile>
      <sourceline>31</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    - Verify that source code gets compiled for the configuration where
      some of the features are enabled and some disabled and more than one
      channels are present.
  
Test Object: None.
Test Precondition: 
    * Important configuration details:
      - "CanNmVersionInfoApi" is set to 'false'
      - "CanNmComControlEnabled" is set to 'true'
      - "CanNmStateChangeIndEnabled" is set to 'false'
      - "CanNmPassiveModeEnabled" is set to 'false'
      - "CanNmPduRxIndicationEnabled" is set to 'false'
      - "CanNmImmediateRestartEnabled" is set to 'true'
      - "CanNmImmediateTxconfEnabled" is set to 'true'
      - "CanNmUserDataEnabled" is set to 'true'
      - "CanNmRemoteSleepIndEnabled" is set to 'true'
      - "CanNmNodeDetectionEnabled" is set to 'false'
      - "CanNmBusSynchronizationEnabled" is set to 'true'
      - "CanNmBusLoadReductionEnabled" is set to 'false'
      - "CanNmRepeatMsgIndEnabled" is set to 'false'
      - "CanNmDevErrorDetect" is set to 'true'
      - "CanNmPnEnabled" is set to 'true'
      - "CanNmPnEiraCalcEnabled" is set to 'false'
      - "CanNmPnEraCalcEnabled" is set to 'true'
      - "CanNmComUserDataSupport" is set to 'true'
      - "CanNmActiveWakeupBitEnabled" is set to 'true'
      - Two channels are configured
    * Misc:
      To ensure that APIs which shall not be provided by the CanNm module
      for this configuration are actually not provided,
      dummy implementations are provided for the following API functions:
      - CanNm_SetUserData()
      - CanNm_GetVersionInfo()
      - CanNm_TxConfirmation()
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM188</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>472</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>473</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>474</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM278</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00158</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00149</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>207</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00185</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00052</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00071</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM168</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM135.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>471</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00130</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00257</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>272</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00260</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>274</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00264</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>278</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00266</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>280</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00268</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>282</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00280</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>289</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00282</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>291</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00284</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM272</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00327</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>306</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>384</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00088</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>383</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM014_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00040</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00041</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00044</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00070</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>123</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00066</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM434</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00084</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>360</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM330</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1458</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_PnEnabled_FALSE_COMPILE_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_ComTest_11/source/application/CanNm_ComTest.c</sourcefile>
      <sourceline>63</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   Chek if every API can be called.
  
Test Object: None.
Test Precondition: 
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00208</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>241</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00227</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>256</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00215</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>246</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>250</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00219</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00222</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>252</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00223</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>253</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00218</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>248</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM217</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00214</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>244</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00213</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>243</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00226</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>255</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00221</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>251</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00211</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>242</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00224</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>254</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00231</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>258</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00228</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>257</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00331</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>310</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1459</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_PnEnabled_FALSE_COMPILE_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_ComTest_11/source/application/test_config.h</sourcefile>
      <sourceline>30</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    - Verify that source code gets compiled for the configuration where
      some of the features are enabled and some disabled and more than one
      channels are present.
    - Check that symbolic name macros are generated correctly.
  
Test Object: None.
Test Precondition: 
    * Important configuration details:
      - "CanNmVersionInfoApi" is set to 'false'
      - "CanNmComControlEnabled" is set to 'true'
      - "CanNmStateChangeIndEnabled" is set to 'false'
      - "CanNmPassiveModeEnabled" is set to 'false'
      - "CanNmPduRxIndicationEnabled" is set to 'false'
      - "CanNmImmediateRestartEnabled" is set to 'false'
      - "CanNmImmediateTxconfEnabled" is set to 'true'
      - "CanNmUserDataEnabled" is set to 'true'
      - "CanNmRemoteSleepIndEnabled" is set to 'true'
      - "CanNmNodeDetectionEnabled" is set to 'true'
      - "CanNmBusSynchronizationEnabled" is set to 'true'
      - "CanNmRepeatMsgIndEnabled" is set to 'true'
      - "CanNmDevErrorDetect" is set to 'false'
      - "CanNmPnEnabled" is set to 'true'
      - "CanNmPnEiraCalcEnabled" is set to 'true'
      - "CanNmPnEraCalcEnabled" is set to 'true'
      - "CanNmActiveWakeupBitEnabled" is set to 'true'
      - Two channels are configured
    * Misc:
      To ensure that APIs which shall not be provided by the CanNm module
      for this configuration are actually not provided,
      dummy implementations are provided for the following API functions:
      - CanNm_SetUserData()
      - CanNm_GetUserData()
      - CanNm_TxConfirmation()
  
Test Execution: None.
Test Input: None.
Test Output: 
    CanNmConf_CanNmChannelConfig_0_CanNmRxPdu           0U
    CanNmConf_CanNmChannelConfig_CanNmRxPdu_1           1U
    CanNmConf_CanNmChannelConfig_0_CanNmTxPdu          10U
    CanNmConf_CanNmChannelConfig_CanNmTxPdu_1          11U
    CanNmConf_CanNmChannelConfig_CanNmUserDataTxPdu_0   0U

  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM188</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>472</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>473</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>474</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM278</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00284</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00158</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00166</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00161</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00149</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>207</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00185</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00052</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM168</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM274</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM272</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>384</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00088</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>383</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM014_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00040</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00041</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00044</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00070</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>123</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00066</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM433</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>70</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1460</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_MultiCoreSupport_COMPILE_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_ComTest_12/source/application/CanNm_ComTest.c</sourcefile>
      <sourceline>64</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that source code gets compiled for the configuration
    with CanNmMultiCoreSupport on true.
  
Test Object: None.
Test Precondition: 
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.CanNmMultiCoreSupport</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>567</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1461</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_MultiCoreSupport_COMPILE_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_ComTest_12/source/application/test_config.h</sourcefile>
      <sourceline>30</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    - Verify that source code gets compiled for the configuration
      with CanNmMultiCoreSupport on true.
    - Check that symbolic name macros are generated correctly.
  
Test Object: None.
Test Precondition: 
    * Important configuration details:
      - "CanNmMultiCoreSupport" is set to 'true'
      - "CanNmPassiveModeEnabled" is set to 'true'
      - "CanNmVersionInfoApi" is set to 'false'
      - "CanNmComControlEnabled" is set to 'false'
      - "CanNmStateChangeIndEnabled" is set to 'false'
      - "CanNmPduRxIndicationEnabled" is set to 'false'
      - "CanNmImmediateRestartEnabled" is set to 'false'
      - "CanNmImmediateTxconfEnabled" is set to 'false'
      - "CanNmUserDataEnabled" is set to 'true'
      - "CanNmRemoteSleepIndEnabled" is set to 'false'
      - "CanNmNodeDetectionEnabled" is set to 'false'
      - "CanNmBusSynchronizationEnabled" is set to 'false'
      - "CanNmRepeatMsgIndEnabled" is set to 'false'
      - "CanNmDevErrorDetect" is set to 'false'
      - "CanNmPnEnabled" is set to 'true'
      - "CanNmPnEiraCalcEnabled" is set to 'true'
      - "CanNmPnEraCalcEnabled" is set to 'false'
      - "CanNmActiveWakeupBitEnabled" is set to 'false'
      - Two channels are configured
    * Misc:
      To ensure that APIs which shall not be provided by the CanNm module
      for this configuration are actually not provided,
      dummy implementations are provided for the following API functions:
      - CanNm_SetUserData()
      - CanNm_GetUserData()
      - CanNm_TxConfirmation()
  
Test Execution: None.
Test Input: None.
Test Output: 
    CanNmConf_CanNmChannelConfig_0_CanNmRxPdu           0U
    CanNmConf_CanNmChannelConfig_CanNmRxPdu_1           1U
    CanNmConf_CanNmChannelConfig_0_CanNmTxPdu          10U
    CanNmConf_CanNmChannelConfig_CanNmTxPdu_1          11U
    CanNmConf_CanNmChannelConfig_CanNmUserDataTxPdu_0   0U
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.CanNmMultiCoreSupport</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>567</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1462</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_Channel_Multicore_MasterPNCPartition_COMPILE_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_ComTest_13/source/application/CanNm_ComTest.c</sourcefile>
      <sourceline>47</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that channel main functions are generated when multicore per channel 
    is configured with PNC support.
  
Test Object: None.
Test Precondition: 
    ComMMasterPNCEcuCPartitionRef configuration parameter is set in ComM
    ComMChannelPartitionRef references are set in ComM
  
Test Execution: 
  
Test Input: 
    CanNm multicore channel conditions are enabled.
    Channels assigned to two different partitions.
    Function calls for each channel and main partition generated functions.
  
Test Output: 
    Executable file.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNm_MainFunction_Main</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>605</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNm_MainFunction_X</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>608</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.Receiver</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>616</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1463</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_Channel_Multicore_MasterPNCPartition_COMPILE_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_ComTest_13/source/application/test_config.h</sourcefile>
      <sourceline>33</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check multicore per channel is enabled.
  
Test Object: None.
Test Precondition: 
    ComMMasterPNCEcuCPartitionRef configuration parameter is set in ComM
    ComMChannelPartitionRef references are set in ComM
  
Test Execution: 
  
Test Input: 
    CanNm multicore channel suport is enabled.
    Channels assigned to two different partitions.
    ComMMasterPNCEcuCPartitionRef configuration parameter is set in ComM
  
Test Output: 
    Executable file.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.CanNmChannelMultiCoreSupport</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>602</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1464</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_Channel_Multicore_NoMasterPNCPartition_COMPILE_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_ComTest_14/source/application/CanNm_ComTest.c</sourcefile>
      <sourceline>40</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that channel main functions are generated when multicore per channel 
    is configured without PNC support.
  
Test Object: None.
Test Precondition: 
    Channel 0 is assigned to TST_APPL_ID_0 and channel 1 is assigned to TST_APPL_ID_1
    ComMMasterPNCEcuCPartitionRef configuration parameter is disabled in ComM
  
Test Execution: 
  
Test Input: 
    CanNm multicore channel suport is enabled.
    Channels assigned to two different partitions.
    Function calls for each channel.
  
Test Output: 
    Executable file.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNm_MainFunction_X</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>608</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1465</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_Channel_Multicore_NoMasterPNCPartition_COMPILE_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_ComTest_14/source/application/test_config.h</sourcefile>
      <sourceline>33</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check multicore per channel is enabled.
  
Test Object: None.
Test Precondition: 
    ComMMasterPNCEcuCPartitionRef configuration parameter is disabled in ComM
    ComMChannelPartitionRef references are set in ComM
  
Test Execution: 
  
Test Input: 
    CanNm multicore channel suport is enabled.
    Channels assigned to two different partitions.
    ComMMasterPNCEcuCPartitionRef configuration parameter is disabled in ComM
  
Test Output: 
    Executable file.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.CanNmChannelMultiCoreSupport</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>602</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1466</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_SynchronizedPncShutdown_Compile_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_ComTest_15/source/application/CanNm_ComTest.c</sourcefile>
      <sourceline>46</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   Chek if every CanNm_RequestSynchronizedPncShutdown API can be called.
  
Test Object: None.
Test Precondition: 
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_91003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>412</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00467</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>413</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1467</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_SynchronizedPncShutdown_Compile_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_ComTest_15/source/application/test_config.h</sourcefile>
      <sourceline>31</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    - Verify that source code gets compiled for the configuration with channels
      configured to support PN synchronize shutdown functionality 
      (CanNmSynchronizedPncShutdownEnabled).
  
Test Object: None.
Test Precondition: 
    Pn synchronize shutdown configuration parameters are set.
  
Test Execution: None.
Test Input: 
    pn sync shutdown configuration parameters set
  
Test Output: 
    executable file
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.ECUC_CanNm_00096</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>416</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.ECUC_CanNm_00097</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>417</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.ECUC_CanNm_00098</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>415</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1468</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_Channel_PNSyncShutdown_check_EIRAMulticore</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_ComTest_16/source/application/CanNm_ComTest.c</sourcefile>
      <sourceline>40</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that CanNm mdoule compiles when multicore per channel is enabled, and 
    CanNmPnEiraCalcEnabled si not true, and Synchronized Pnc Shutdown is enabled.
  
Test Object: None.
Test Precondition: 
    ComMChannelPartitionRef references are set in ComM.
    At least two channels have ComMNmVariant set to FULL or PASSIVE in ComM.
    CanNmPnEiraCalcEnabled si not set to TRUE.
    CanNmSynchronizedPncShutdownEnabled is set to TRUE for at least one channel.
  
Test Execution: 
  
Test Input: 
    CanNm multicore channel conditions are enabled
    CanNm Channels assigned to different partitions
    CanNmPnEiraCalcEnabled si not set to TRUE
    CanNmSynchronizedPncShutdownEnabled set to TRUE
  
Test Output: 
    Executable file.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_91003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>412</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1469</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_Channel_PNSyncShutdown_check_EIRA</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_ComTest_17/source/application/CanNm_ComTest.c</sourcefile>
      <sourceline>37</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that CanNm mdoule compiles when multicore per channel is disabled, and 
    CanNmPnEiraCalcEnabled si not true, and Synchronized Pnc Shutdown is enabled.
  
Test Object: None.
Test Precondition: 
    ComMChannelPartitionRef references are not set in ComM.
    ComMMasterPNCEcuCPartitionRef references is not set in ComM.
    CanNmPnEiraCalcEnabled si not set to TRUE.
    CanNmSynchronizedPncShutdownEnabled is set to TRUE for at least one channel.
  
Test Execution: 
  
Test Input: 
    CanNm multicore channel conditions are disabled
    CanNmPnEiraCalcEnabled si not set to TRUE
    CanNmSynchronizedPncShutdownEnabled set to TRUE
  
Test Output: 
    Executable file.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_91003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>412</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1470</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_30006</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_ComTest_2/source/application/test_config.h</sourcefile>
      <sourceline>31</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    - Verify that source code gets compiled for the configuration where some of
      the features are enabled and some disabled and only a single channel
      is present.
      Also to ensure that when CANNM_PASSIVE_MODE_ENABLED = STD_ON,
      the CanNm module deactivates the transmission error handling. This
      can be ensured by disabling the provision of Nm_TxTimeoutException
      from Nm stubs. (CanNm.EB_Ref.SWS_CanNm_00073.1)
  
Test Object: None.
Test Precondition: None.
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM188</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>472</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>473</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>474</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM278</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00284</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00158</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00166</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00149</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>207</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00185</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00052</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00071</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM168</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM135.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>471</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>384</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00088</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>383</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM014_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00040</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00041</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00044</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00070</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>123</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00066</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00084</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>360</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00346</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>323</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00073.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>452</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.ECUC_CanNm_00097</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>417</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1471</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_30007</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_ComTest_3/source/application/test_config.h</sourcefile>
      <sourceline>31</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    - Verify that source code gets compiled for the configuration with all
      optional features disabled for more than one channels are present.
  
Test Object: None.
Test Precondition: 
    * Important configuration details:
      - "CanNmVersionInfoApi" is set to 'false'
      - "CanNmComControlEnabled" is set to 'false'
      - "CanNmStateChangeIndEnabled" is set to 'false'
      - "CanNmPassiveModeEnabled" is set to 'false'
      - "CanNmPduRxIndicationEnabled" is set to 'false'
      - "CanNmImmediateRestartEnabled" is set to 'false'
      - "CanNmImmediateTxconfEnabled" is set to 'false'
      - "CanNmUserDataEnabled" is set to 'true'
      - "CanNmRemoteSleepIndEnabled" is set to 'false'
      - "CanNmNodeDetectionEnabled" is set to 'false'
      - "CanNmBusSynchronizationEnabled" is set to 'false'
      - "CanNmBusLoadReductionEnabled" is set to 'false'
      - "CanNmRepeatMsgIndEnabled" is set to 'false'
      - "CanNmDevErrorDetect" is set to 'true'
      - "CanNmPnEnabled" is set to 'false'
      - "CanNmPnEiraCalcEnabled" is set to 'false'
      - "CanNmPnEraCalcEnabled" is set to 'false'
      - "CanNmActiveWakeupBitEnabled" is set to 'false'
      - "CanNmSynchronizedPncShutdownEnabled" is set to 'false'
      - "CanNmTxConfirmationReliableResultEnable" is set to 'false'
      - Two channels are configured
    * Misc:
      To ensure that APIs which shall not be provided by the CanNm module
      for this configuration are actually not provided,
      dummy implementations are provided for the following API functions:
      - CanNm_SetUserData()
      - CanNm_GetUserData()
      - CanNm_RequestBusSynchronization()
      - CanNm_CheckRemoteSleepIndication()
      - CanNm_GetVersionInfo()
      - CanNm_DisableCommunication()
      - CanNm_EnableCommunication()
      - CanNm_Transmit()
      - CanNm_ConfirmPnAvailability()
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM188</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>472</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>473</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>474</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM278</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00284</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00158</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00166</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00161</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00149</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>207</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00185</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00052</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM168</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM274</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM272</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>384</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00088</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>383</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM014_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00040</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00041</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00044</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00070</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>123</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00066</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM433</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>70</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00084</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>360</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.ECUC_CanNm_00097</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>417</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1472</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_30008</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_ComTest_4/source/application/test_config.h</sourcefile>
      <sourceline>31</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    - Verify that source code gets compiled for the configuration where
      most of the features are disabled and some are enabled and more
      than one channels are present.
  
Test Object: None.
Test Precondition: 
    * Important configuration details:
      - "CanNmVersionInfoApi" is set to 'true'
      - "CanNmComControlEnabled" is set to 'false'
      - "CanNmStateChangeIndEnabled" is set to 'false'
      - "CanNmPassiveModeEnabled" is set to 'true'
      - "CanNmPduRxIndicationEnabled" is set to 'true'
      - "CanNmImmediateRestartEnabled" is set to 'false'
      - "CanNmImmediateTxconfEnabled" is set to 'false'
      - "CanNmUserDataEnabled" is set to 'true'
      - "CanNmRemoteSleepIndEnabled" is set to 'false'
      - "CanNmNodeDetectionEnabled" is set to 'false'
      - "CanNmBusSynchronizationEnabled" is set to 'false'
      - "CanNmBusLoadReductionEnabled" is set to 'false'
      - "CanNmDevErrorDetect" is set to 'true'
      - "CanNmRepeatMsgIndEnabled" is set to 'false'
      - "CanNmPnEnabled" is set to 'true'
      - "CanNmPnEiraCalcEnabled" is set to 'false'
      - "CanNmActiveWakeupBitEnabled" is set to 'false'
      - "CanNmSynchronizedPncShutdownEnabled" is set to 'false'
      - "CanNmTxConfirmationReliableResultEnable" is set to 'false'
      - Two channels are configured
      - CanNmTimeOutTime is configured as non-multiple of CanNmMsgCycleTime
      (ASCCANNM-414).
    * Misc:
      To ensure that APIs which shall not be provided by the CanNm module
      for this configuration are actually not provided,
      dummy implementations are provided for the following API functions:
      - CanNm_NetworkRelease()
      - CanNm_NetworkRequest()
      - CanNm_SetUserData()
      - CanNm_RequestBusSynchronization()
      - CanNm_CheckRemoteSleepIndication()
      - CanNm_DisableCommunication()
      - CanNm_EnableCommunication()
      - CanNm_Transmit()
      - CanNm_TxConfirmation()
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM188</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>472</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>473</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>474</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM278</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00284</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00158</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00166</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00149</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>207</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00185</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00052</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00071</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM168</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM135.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>471</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00257</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>272</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00260</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>274</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00264</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>278</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00266</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>280</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00268</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>282</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00282</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>291</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM272</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>384</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00088</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>383</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM014_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00040</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00041</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00044</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00070</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>123</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00066</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00084</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>360</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.ECUC_CanNm_00097</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>417</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1473</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_30009</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_ComTest_5/source/application/test_config.h</sourcefile>
      <sourceline>31</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    - Verify that source code gets compiled for the configuration where
      some of the features are enabled and some disabled and more than one
      channels are present.
  
Test Object: None.
Test Precondition: 
    * Important configuration details:
      - "CanNmVersionInfoApi" is set to 'false'
      - "CanNmComControlEnabled" is set to 'true'
      - "CanNmStateChangeIndEnabled" is set to 'false'
      - "CanNmPassiveModeEnabled" is set to 'false'
      - "CanNmPduRxIndicationEnabled" is set to 'false'
      - "CanNmImmediateRestartEnabled" is set to 'true'
      - "CanNmImmediateTxconfEnabled" is set to 'true'
      - "CanNmUserDataEnabled" is set to 'true'
      - "CanNmRemoteSleepIndEnabled" is set to 'true'
      - "CanNmNodeDetectionEnabled" is set to 'false'
      - "CanNmBusSynchronizationEnabled" is set to 'true'
      - "CanNmBusLoadReductionEnabled" is set to 'false'
      - "CanNmRepeatMsgIndEnabled" is set to 'false'
      - "CanNmDevErrorDetect" is set to 'true'
      - "CanNmPnEnabled" is set to 'true'
      - "CanNmPnEiraCalcEnabled" is set to 'true'
      - "CanNmPnEraCalcEnabled" is set to 'true'
      - "CanNmComUserDataSupport" is set to 'true'
      - "CanNmActiveWakeupBitEnabled" is set to 'true'
      - "CanNmSynchronizedPncShutdownEnabled" is set to 'true'
      - "CanNmTxConfirmationReliableResultEnable" is set to 'false'
      - Two channels are configured
    * Misc:
      To ensure that APIs which shall not be provided by the CanNm module
      for this configuration are actually not provided,
      dummy implementations are provided for the following API functions:
      - CanNm_SetUserData()
      - CanNm_GetVersionInfo()
      - CanNm_TxConfirmation()
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM188</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>472</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>473</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>474</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM278</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00158</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00149</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>207</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00185</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00052</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00071</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM168</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM135.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>471</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00130</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00257</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>272</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00260</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>274</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00264</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>278</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00266</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>280</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00268</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>282</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00280</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>289</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00282</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>291</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00284</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM272</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00327</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>306</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>384</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00088</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>383</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM014_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00040</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00041</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00044</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00070</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>123</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00066</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM434</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00084</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>360</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM330</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.ECUC_CanNm_00096</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>416</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.ECUC_CanNm_00097</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>417</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1474</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_30002</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_ComTest_6/source/application/test_config.h</sourcefile>
      <sourceline>30</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    - Verify that source code gets compiled for the configuration where
      some of the features are enabled and some disabled and more than one
      channels are present.
    - Check that symbolic name macros are generated correctly.
    - Also to ensure that when CANNM_IMMEDIATE_TXCONF_ENABLED = STD_ON,
      the CanNm module deactivates the transmission error handling. This
      can be ensured by disabling the provision of Nm_TxTimeoutException()
      callout function from Nm stubs. (CanNm.EB_Ref.SWS_CanNm_00073.2)
  
Test Object: None.
Test Precondition: 
    * Important configuration details:
      - "CanNmVersionInfoApi" is set to 'false'
      - "CanNmComControlEnabled" is set to 'true'
      - "CanNmStateChangeIndEnabled" is set to 'false'
      - "CanNmPassiveModeEnabled" is set to 'false'
      - "CanNmPduRxIndicationEnabled" is set to 'false'
      - "CanNmImmediateRestartEnabled" is set to 'true'
      - "CanNmImmediateTxconfEnabled" is set to 'true'
      - "CanNmUserDataEnabled" is set to 'true'
      - "CanNmRemoteSleepIndEnabled" is set to 'true'
      - "CanNmNodeDetectionEnabled" is set to 'true'
      - "CanNmBusSynchronizationEnabled" is set to 'true'
      - "CanNmBusLoadReductionEnabled" is set to 'false'
      - "CanNmRepeatMsgIndEnabled" is set to 'true'
      - "CanNmDevErrorDetect" is set to 'false'
      - "CanNmPnEnabled" is set to 'true'
      - "CanNmPnEiraCalcEnabled" is set to 'true'
      - "CanNmComUserDataSupport" is set to 'true'
      - "CanNmActiveWakeupBitEnabled" is set to 'true'
    * Misc:
      To ensure that APIs which shall not be provided by the CanNm module
      for this configuration are actually not provided,
      dummy implementations are provided for the following API functions:
      - CanNm_SetUserData()
      - CanNm_GetVersionInfo()
      - CanNm_TxConfirmation()
  
Test Execution: None.
Test Input: None.
Test Output: 
    CanNmConf_CanNmChannelConfig_CanNmChannelConfig_0_CanNmRxPdu_0   0U
    CanNmConf_CanNmChannelConfig_CanNmRxPdu_1                        1U
    CanNmConf_CanNmChannelConfig_0_CanNmTxPdu                       10U
    CanNmConf_CanNmChannelConfig_CanNmTxPdu_1                       11U
    CanNmConf_CanNmChannelConfig_CanNmUserDataTxPdu_0                0U
    CanNmConf_CanNmChannelConfig_CanNmUserDataTxPdu_1                1U
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM188</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>472</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>473</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>474</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM278</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00280</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>289</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00284</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00158</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00166</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00149</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>207</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00185</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00052</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00071</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM168</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM135.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>471</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>276</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM270</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM272</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>384</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00088</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>383</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM014_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00040</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00041</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00044</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00070</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>123</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00066</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00084</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>360</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.SymbolicName.ecuc_sws_2108_1</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>509</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.SymbolicName.ecuc_sws_2108_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>510</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.SymbolicName.ecuc_sws_2108_3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>511</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM330</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00073.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>453</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1475</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_300011</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_ComTest_7/source/application/test_config.h</sourcefile>
      <sourceline>30</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    - Verify that source code gets compiled for the configuration where
      all the features except CanNmComUserDataSupport are disabled and
      only one channel is configured.
    - Verify the generation of symbolic name macros when
      CANNM_DONT_PROVIDE_LEGACY_SYMBOLIC_NAMES is defined, that legacy
      symbols names are not provided by CanNm.
  
Test Object: None.
Test Precondition: 
    * Important configuration details:
      - "CanNmVersionInfoApi" is set to 'false'
      - "CanNmComControlEnabled" is set to 'false'
      - "CanNmStateChangeIndEnabled" is set to 'false'
      - "CanNmPassiveModeEnabled" is set to 'false'
      - "CanNmPduRxIndicationEnabled" is set to 'false'
      - "CanNmImmediateRestartEnabled" is set to 'false'
      - "CanNmImmediateTxconfEnabled" is set to 'false'
      - "CanNmUserDataEnabled" is set to 'false'
      - "CanNmRemoteSleepIndEnabled" is set to 'false'
      - "CanNmNodeDetectionEnabled" is set to 'false'
      - "CanNmBusSynchronizationEnabled" is set to 'false'
      - "CanNmBusLoadReductionEnabled" is set to 'false'
      - "CanNmRepeatMsgIndEnabled" is set to 'false'
      - "CanNmDevErrorDetect" is set to 'false'
      - "CanNmPnEnabled" is set to 'false'
      - "CanNmPnEiraCalcEnabled" is set to 'false'
      - "CanNmComUserDataSupport" is set to 'true'
      - "CanNmActiveWakeupBitEnabled" is set to 'false'
    * Misc:
      To ensure that APIs which shall not be provided by the CanNm module
      for this configuration are actually not provided,
      dummy implementations are provided for the following API functions:
      - CanNm_SetUserData()
      - CanNm_RequestBusSynchronization()
      - CanNm_CheckRemoteSleepIndication()
      - CanNm_GetVersionInfo()
      - CanNm_DisableCommunication()
      - CanNm_EnableCommunication()
      - CanNm_ConfirmPnAvailability()
  
Test Execution: None.
Test Input: 
  
Test Output: 
    CanNmConf_CanNmChannelConfig_CanNmChannelConfig_0_CanNmRxPdu           0U
    CanNmConf_CanNmChannelConfig_CanNmChannelConfig_0_CanNmTxPdu           10U
    CanNmConf_CanNmChannelConfig_CanNmChannelConfig_0_CanNmUserDataTxPdu   0U
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM188</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>472</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>473</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>474</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM278</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00158</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00166</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00161</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00149</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>207</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00185</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00052</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM168</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM274</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM272</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>384</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00088</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>383</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM014_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00040</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00041</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00044</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00070</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>123</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00066</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.SymbolicName.CanNmRxPduId.NoShortName</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>512</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.SymbolicName.CanNmTxConfirmationPduId.NoShortName</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>513</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.SymbolicName.CanNmTxUserDataPduId.NoShortName</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>514</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM330</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1476</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_80001</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_ComTest_8/source/application/test_config.h</sourcefile>
      <sourceline>16</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies that
     - Multiple RxPdus are accepted for a channel.
     - Symbolic names are generated correctly in case multiple RX PDUs are configured for a channel.
  
Test Object: None.
Test Precondition:  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00038</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>99</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.SymbolicName.ecuc_sws_2108_3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>511</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1477</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_80002</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_ComTest_9/source/application/CanNm_ComTest.c</sourcefile>
      <sourceline>63</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   Chek if every API can be called.
  
Test Object: None.
Test Precondition: 
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00208</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>241</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00227</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>256</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00215</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>246</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>250</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00219</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00222</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>252</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00223</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>253</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00218</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>248</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM217</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00214</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>244</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00213</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>243</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00226</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>255</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00221</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>251</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00211</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>242</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00224</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>254</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00231</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>258</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00228</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>257</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00331</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>310</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1478</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_80003</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_ComTest_9/source/application/test_config.h</sourcefile>
      <sourceline>30</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    - Verify that source code gets compiled for the configuration where
      some of the features are enabled and some disabled and more than one
      channels are present.
    - Check that symbolic name macros are generated correctly.
  
Test Object: None.
Test Precondition: 
    * Important configuration details:
      - "CanNmVersionInfoApi" is set to 'false'
      - "CanNmComControlEnabled" is set to 'true'
      - "CanNmStateChangeIndEnabled" is set to 'false'
      - "CanNmPassiveModeEnabled" is set to 'false'
      - "CanNmPduRxIndicationEnabled" is set to 'false'
      - "CanNmImmediateRestartEnabled" is set to 'false'
      - "CanNmImmediateTxconfEnabled" is set to 'true'
      - "CanNmUserDataEnabled" is set to 'true'
      - "CanNmRemoteSleepIndEnabled" is set to 'true'
      - "CanNmNodeDetectionEnabled" is set to 'true'
      - "CanNmBusSynchronizationEnabled" is set to 'true'
      - "CanNmRepeatMsgIndEnabled" is set to 'true'
      - "CanNmDevErrorDetect" is set to 'false'
      - "CanNmPnEnabled" is set to 'true'
      - "CanNmPnEiraCalcEnabled" is set to 'true'
      - "CanNmPnEraCalcEnabled" is set to 'true'
      - "CanNmActiveWakeupBitEnabled" is set to 'true'
      - Two channels are configured
    * Misc:
      To ensure that APIs which shall not be provided by the CanNm module
      for this configuration are actually not provided,
      dummy implementations are provided for the following API functions:
      - CanNm_SetUserData()
      - CanNm_GetUserData()
      - CanNm_TxConfirmation()
  
Test Execution: None.
Test Input: None.
Test Output: 
    CanNmConf_CanNmChannelConfig_0_CanNmRxPdu           0U
    CanNmConf_CanNmChannelConfig_CanNmRxPdu_1           1U
    CanNmConf_CanNmChannelConfig_0_CanNmTxPdu          10U
    CanNmConf_CanNmChannelConfig_CanNmTxPdu_1          11U
    CanNmConf_CanNmChannelConfig_CanNmUserDataTxPdu_0   0U
    CanNmConf_CanNmChannelConfig_CanNmUserDataTxPdu_1   1U
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM188</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>472</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>473</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>474</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM278</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00284</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00158</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00166</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00161</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00149</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>207</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00185</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00052</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM168</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM274</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM272</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>384</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00088</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>383</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM014_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00040</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00041</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00044</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00070</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>123</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00066</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM433</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>70</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1479</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_Channel_Multicore_MultiChannelTypeStubs_COMPILE_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_ComTest_MulticoreStubCheck/source/application/CanNm_ComTest.c</sourcefile>
      <sourceline>49</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that channel main functions are generated when multicore per channel 
    is configured.
  
Test Object: None.
Test Precondition: 
    ComMChannelPartitionRef references are set in ComM.
    At least two channels have ComMNmVariant set to FULL or PASSIVE.
    One CanNm channel has ComMNmVariant set to NONE.
    One UdpNm channel is configured.
    One FrNm channel is configured.
  
Test Execution: 
  
Test Input: 
    CanNm multicore channel conditions are enabled.
    CanNm Channels assigned to different partitions.
    Two CanNm channel have ComMNmVariant set to FULL.
    One CanNm channel has ComMNmVariant set to PASSIVE.
    One CanNm channel has ComMNmVariant set to NONE.
    Function calls for each channel and main partition generated functions.
    One UdpNm channel is configured.
    One FrNm channel is configured.
  
Test Output: 
    Executable file.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNm_MainFunction_Main</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>605</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNm_MainFunction_X</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>608</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.Receiver</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>616</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1480</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>CanNm_ComTest_NoPbCfg</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_ComTest_NoPbCfg/source/application/ComTest_NoPBcfg.c.m4</sourcefile>
      <sourceline>23</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test shall prove that that the CanNm also compiles without any post build information
  
Test Object: 
    Compile test
  
Test Precondition: 
        * The merged make file holds a rule which removes all post build files after generation
  
Test Execution: 
        The test run is successful when the CanNm compiles under sticking to the precondition.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.PostBuild_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.PBCFGM108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>665</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1481</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>CanNm_Test_CanNmNodeIdCallback_Off</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_ComTest_PbcfgMOff/source/application/Tests.c.m4</sourcefile>
      <sourceline>6</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      Check if CANNM_NODEID_CALLBACK_ENABLED is set to STD_OFF and CANNM_NODEID_CALLBACK_NAME is 
      not defined if CanNmNodeIdCallback is disabled.
    
Test Object: None.
Test Precondition: 
        - CanNmNodeIdCallback is disabled
    
Test Execution: 
      01: Check if CANNM_NODEID_CALLBACK_ENABLED macro is set to STD_OFF.
      02: VP(CanNm.EB.CanNmNodeIdCallbackName):
          - Check if CANNM_NODEID_CALLBACK_NAME macro is not generated.
    
Test Input: 
    
Test Output: 
    &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmNodeIdCallbackName</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>546</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1482</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>CanNm_Test_CanNmNodeIdCallback_On</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_ComTest_PbcfgMOn/source/application/Tests.c.m4</sourcefile>
      <sourceline>6</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      Check if CANNM_NODEID_CALLBACK_ENABLED is set to STD_ON and CANNM_NODEID_CALLBACK_NAME
      is defined if CanNmNodeIdCallback is enabled.
    
Test Object: None.
Test Precondition: 
        - CanNmNodeIdCallback is enabled
    
Test Execution: 
      01: Check if CANNM_NODEID_CALLBACK_ENABLED macro is generated.
      02: VP (CanNm.EB.CanNmNodeIdCallbackName):
          - Check if CANNM_NODEID_CALLBACK_NAME macro is generated.
    
Test Input: 
    
Test Output: 
    &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmNodeIdCallbackName</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>546</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1483</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_GEN_10001</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_GenTest_01_XdmChecks/source/application/EbTest_Config.h</sourcefile>
      <sourceline>28</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check if the pdu referenced by CanNmPnEraRxNSduRef is configured in PduR.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
  01: VP(CanNm.ECUC_CanNm_00079) Check if an error is trown if a bad configuration is given.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00079</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1484</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CANNM_GEN_InvalidRange_CanNmPnInfoOffset</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_GenTest_02_XdmChecks/source/application/EbTest_Config.h</sourcefile>
      <sourceline>28</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check the range of CanNmPnInfoOffset is from 1 to 63.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
  01: VP(CanNm.ECUC_CanNm_00060) Check if an error is trown if a bad configuration is given.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00060</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1485</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_GEN_10003</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_GenTest_03_XdmChecks/source/application/EbTest_Config.h</sourcefile>
      <sourceline>28</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check the range of CanNmPnInfoLength is from 1 to 63.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
  01: VP(CanNm.ECUC_CanNm_00061) Check if an error is trown if a bad configuration is given.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00061</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>116</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1486</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_GEN_10004</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_GenTest_04_XdmChecks/source/application/EbTest_Config.h</sourcefile>
      <sourceline>27</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check the length of the (((CanNmPnInfoOffset + CanNmPnInfoLength) -1) should not
  be greater then 63.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
  01: VP(CanNm.EB.CanNmPnInfo) Check if an error is trown if a bad configuration is given.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmPnInfo</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>580</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1487</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_GEN_10005</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_GenTest_05_XdmChecks/source/application/EbTest_Config.h</sourcefile>
      <sourceline>29</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that when multicore per channel conditions are met then all channels have a valid ComMChannelPartitionRef partition reference.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
  01: VP(CanNm.EB.Config.CanNmChannelMultiCoreSupport) Check if an error is trown if a bad configuration is given.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.CanNmChannelMultiCoreSupport</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>602</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1488</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_GEN_10006</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_GenTest_06_XdmChecks/source/application/EbTest_Config.h</sourcefile>
      <sourceline>29</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that when multicore per channel conditions are met then all channels
  ComMChannelPartitionRef partition references are also referenced by an 
  Os application (OsAppEcucPartitionRef).
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
  01: VP(CanNm.EB.Config.CanNmChannelMultiCoreSupport) Check if an error is trown if a bad configuration is given.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Config.CanNmChannelMultiCoreSupport</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>602</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1489</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_GEN_10007</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_GenTest_07_XdmChecks/source/application/EbTest_Config.h</sourcefile>
      <sourceline>29</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that when multicore per channel conditions are met and CanNmPnEiraCalcEnabled is true then 
  a PNC partiton reference is defined in ComM.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
  01: VP(CanNm.EB.CanNmChannelMultiCore.AggregatePartition) Check if an error is trown if a bad configuration is given.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.AggregatePartition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>604</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1490</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_GEN_10008</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_GenTest_08_XdmChecks/source/application/EbTest_Config.h</sourcefile>
      <sourceline>29</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that in case CanNmSynchronizedPncShutdownEnabled is set to true for a channel then
  CanNmPnEnabled is also set to true for same channel for an active gateway.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
  01: VP(CanNm.ASRR2111.ECUC_CanNm_00097) Check if an error is trown if a bad configuration is
      given where CanNmSynchronizedPncShutdownEnabled is set to true and CanNmPnEnabled is set to
      false for a CanNm channel that has ComM parameter ComMPncGatewayType set to
      COMM_GATEWAY_TYPE_ACTIVE.

Test Input: 
  CanNmSynchronizedPncShutdownEnabled is set to true
  CanNmPnEnabled is set to false
  ComMPncGatewayType set to COMM_GATEWAY_TYPE_ACTIVE

Test Output: 
  code generation error
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.ECUC_CanNm_00097</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>417</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1491</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_GEN_10009</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_GenTest_09_XdmChecks/source/application/EbTest_Config.h</sourcefile>
      <sourceline>29</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that in case CanNmSynchronizedPncShutdownEnabled is set to true for a channel then
  CanNmPnEraCalcEnabled is also set to true for same channel for an active gateway.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
  01: VP(CanNm.ASRR2111.ECUC_CanNm_00097) Check if an error is trown if a bad configuration is
      given where CanNmSynchronizedPncShutdownEnabled is set to true and CanNmPnEraCalcEnabled is
      set to false for a CanNm channel that has ComM parameter ComMPncGatewayType set to
      COMM_GATEWAY_TYPE_ACTIVE.

Test Input: 
  CanNmSynchronizedPncShutdownEnabled is set to true
  CanNmPnEraCalcEnabled is set to false
  ComMPncGatewayType set to COMM_GATEWAY_TYPE_ACTIVE

Test Output: 
  code generation error
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.ECUC_CanNm_00097</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>417</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1492</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_GEN_10010</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_GenTest_10_XdmChecks/source/application/EbTest_Config.h</sourcefile>
      <sourceline>29</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that in case CanNmSynchronizedPncShutdownEnabled is set to true for a channel then
  CanNmPnEnabled is also set to true for same channel for an active gateway.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
  01: VP(CanNm.ASRR2111.ECUC_CanNm_00097) Check if an error is trown if a bad configuration is
      given where CanNmSynchronizedPncShutdownEnabled is set to true and CanNmPnEnabled is set to
      false for a CanNm channel that has ComM parameter ComMPncGatewayType set to
      COMM_GATEWAY_TYPE_PASSIVE.

Test Input: 
  CanNmSynchronizedPncShutdownEnabled is set to true
  CanNmPnEnabled is set to false
  ComMPncGatewayType set to COMM_GATEWAY_TYPE_PASSIVE

Test Output: 
  code generation error
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.ECUC_CanNm_00097</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>417</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1493</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_GEN_10011</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_GenTest_11_XdmChecks/source/application/EbTest_Config.h</sourcefile>
      <sourceline>29</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that in case CanNmSynchronizedPncShutdownEnabled is set to true for a channel then
  CanNmPnEraCalcEnabled is also set to true for same channel for an active gateway.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
  01: VP(CanNm.ASRR2111.ECUC_CanNm_00097) Check if an error is trown if a bad configuration is
      given where CanNmSynchronizedPncShutdownEnabled is set to true and CanNmPnEraCalcEnabled is
      set to false for a CanNm channel that has ComM parameter ComMPncGatewayType set to
      COMM_GATEWAY_TYPE_PASSIVE.

Test Input: 
  CanNmSynchronizedPncShutdownEnabled is set to true
  CanNmPnEraCalcEnabled is set to false
  ComMPncGatewayType set to COMM_GATEWAY_TYPE_PASSIVE

Test Output: 
  code generation error
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.ECUC_CanNm_00097</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>417</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1494</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_GEN_10012</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_GenTest_12_XdmChecks/source/application/EbTest_Config.h</sourcefile>
      <sourceline>29</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that in case 
  CanNmPassiveModeEnabled is set to false and 
  ComUserDataSupport is set to true and
  UserDataLength is greater than zero 
  CanNmUserDataTxPdu shall be set
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
  01: VP(CanNm.EB.ComUserDataSupport.CanNmUserDataTxPdu) Check that error is reported

Test Input: 
  CanNmPassiveModeEnabled is set to false and 
  ComUserDataSupport is set to true and
  UserDataLength is greater than zero 

Test Output: 
  Code generation error
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.ComUserDataSupport.CanNmUserDataTxPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>640</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1495</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_GEN_10013</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_GenTest_13_XdmChecks/source/application/EbTest_Config.h</sourcefile>
      <sourceline>29</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that in case 
  CanNmPassiveModeEnabled is set to false and 
  ComUserDataSupport is set to true and
  UserDataLength is zero 
  CanNmUserDataTxPdu shall not be set
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
  01: VP(CanNm.EB.ComUserDataSupport.NoCanNmUserDataTxPdu) Check that error is reported

Test Input: 
  CanNmPassiveModeEnabled is set to false and 
  ComUserDataSupport is set to true and
  UserDataLength is zero 

Test Output: 
  Code generation error
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.ComUserDataSupport.NoCanNmUserDataTxPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>641</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1496</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_GEN_10014</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_GenTest_14_XdmChecks/source/application/EbTest_Config.h</sourcefile>
      <sourceline>29</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that in case 
  CanNmPassiveModeEnabled is set to false and 
  ComUserDataSupport is set to true and
  if UserDataLength differs then pdu length of CanNmUserDataTxPdu - configurred system bytes
  generation error shall be generated
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
  01: VP(CanNm.EB.ComUserDataSupport.UserDataLength) check that error is reported

Test Input: 
  CanNmPassiveModeEnabled is set to false and 
  ComUserDataSupport is set to true and
  UserDataLength is different then CanNmUserDataTxPdu - configurred system bytes

Test Output: 
  code generation error
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.ComUserDataSupport.UserDataLength</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>642</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1497</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_GEN_10015</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_GenTest_15_XdmChecks/source/application/EbTest_Config.h</sourcefile>
      <sourceline>29</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that in case 
  CanNmPassiveModeEnabled is set to false and 
  ComUserDataSupport is set to true and
  if UserDataLength is zero UserDataRxPdu shall not be configurred
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
  01: VP(CanNm.EB.ComUserDataSupport.NoCanNmUserDataRxPdu) check that error is reported

Test Input: 
  CanNmPassiveModeEnabled is set to false and 
  ComUserDataSupport is set to true and
  UserDataLength is zero

Test Output: 
  code generation error
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.ComUserDataSupport.NoCanNmUserDataRxPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>643</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1498</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_GEN_10016</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_GenTest_16_XdmChecks/source/application/EbTest_Config.h</sourcefile>
      <sourceline>30</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that in case 
  CanNmPassiveModeEnabled is set to false and 
  ComUserDataSupport is set to true and
  if UserDataLength differs then pdu length of CanNmUserDataRxPdu - configurred system bytes
  generation error shall be generated
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
  01: VP(CanNm.EB.ComUserDataSupport.UserDataLength) check that error is reported

Test Input: 
  CanNmPassiveModeEnabled is set to false and 
  ComUserDataSupport is set to true and
  UserDataLength is different then CanNmUserDataRxPdu - configurred system bytes

Test Output: 
  code generation error
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.ComUserDataSupport.UserDataLength</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>642</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1499</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_GEN_10017</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Compile/IN/CanNm_GenTest_17_XdmChecks/source/application/EbTest_Config.h</sourcefile>
      <sourceline>29</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that in case Rx Pdu length is not large enough to hold system bytes
  error is generated.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
  01: VP(CanNm.EB.RxPduLength) check that error is reported

Test Input: 
  Rx Pdu length is not large enough to hold system bytes

Test Output: 
  code generation error
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.RxPduLength</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>644</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1500</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_32007</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_1/source/application/CanNm_ConTest_1.c</sourcefile>
      <sourceline>64</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    To test DET detection functionality of all CanNm APIs for error
    CANNM_E_NO_INIT.
  
Test Object: None.
Test Precondition: 
    * CanNm should be in the un-initialized state.
    * CANNM_DEV_ERROR_DETECT should be TRUE.
  
Test Execution: 
    01: Clear the DET stubs.
    02: Call the following APIs:
          CanNm_PassiveStartUp
          CanNm_NetworkRequest
          CanNm_NetworkGwEraRequest
          CanNm_NetworkRelease
          CanNm_DisableCommunication
          CanNm_EnableCommunication
          CanNm_SetUserData
          CanNm_GetUserData
          CanNm_GetNodeIdentifier
          CanNm_GetLocalNodeIdentifier
          CanNm_RepeatMessageRequest
          CanNm_GetPduData
          CanNm_GetState
          CanNm_RequestBusSynchronization
          CanNm_CheckRemoteSleepIndication
    03: VP (CanNm.ASR403.CANNM039, CanNm.ASR403.CANNM191, CanNm.SWS_CanNm_00189):
        - All APIs return E_NOT_OK
    04: VP (CanNm.ASR403.CANNM039, CanNm.EB_Ref.SWS_CanNm_00316.1, CanNm.ASR403.CANNM019):
        - DET error CANNM_E_NO_INIT is reported from all APIs.
    05: Call CanNm_TxConfirmation when CanNm is in uninitialized state.
    06: VP (CanNm.ASR403.CANNM039, CanNm.EB_Ref.SWS_CanNm_00316.1, CanNm.ASR403.CANNM019, CanNm.EB_Ref.CANNM229.2):
        - DET error CANNM_E_NO_INIT is reported with instance Id same
          as CanNm channel handle.
    07: Call CanNm_RxIndication when CanNm is in uninitialized state.
    08: VP (CanNm.ASR403.CANNM039, CanNm.EB_Ref.SWS_CanNm_00316.1, CanNm.ASR403.CANNM019, CanNm.EB_Ref.CANNM232.2, CanNm.ASR403.CANNM233):
        - DET error CANNM_E_NO_INIT is reported with instance Id same
          as CanNm channel handle.
    09: Initialize CanNm with wrong configuration set
    10: VP (CanNm.ASRR2111.SWS_CanNm_91003)
        - check a call to CanNm_RequestSynchronizedPncShutdown is succsessfull
          when no cannm channels are configured with 
          CanNmSynchronizedPncShutdownEnabled set
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM191</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00189</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM229.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>457</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM232.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>459</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM233</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>484</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM210</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>32</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_91003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>412</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1501</internalId></specobject>
    <specobject>
      <id>TS_CanNm_32010</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_1/source/application/CanNm_ConTest_1.c</sourcefile>
      <sourceline>379</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    To test the behavior of CanNm_MainFunction() before initialization of
    CanNm.
  
Test Object: None.
Test Precondition: 
    CanNm should be in the un-initialized state.
  
Test Execution: 
    01: Clear the DET stubs.
    02: Call CanNm_MainFunction() before initialization of CanNm.
    03: VP (CanNm.EB.MainFunction.InitCheck):
        - No error has been reported to the DET.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.MainFunction.InitCheck</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1502</internalId></specobject>
    <specobject>
      <id>TS_CanNm_32008</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_1/source/application/CanNm_ConTest_1.c</sourcefile>
      <sourceline>430</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    1. To test DET detection functionality of CanNm APIs for error
       CANNM_E_INVALID_CHANNEL.
    2. To test DET detection functionality of CanNm_TxConfirmation for error
       CANNM_E_INVALID_PDUID.
    3. To test DET detection functionality of CanNm_RxIndication for error
       CANNM_E_INVALID_PDUID.
  
Test Object: None.
Test Precondition: 
    * CANNM_DEV_ERROR_DETECT should be TRUE.
  
Test Execution: 
    01: Clear the DET stubs.
    02: Initialize the CanNm module.
    03: Call the following APIs(having return value) with an invalid channel
        handle as parameter:
        * CanNm_PassiveStartUp()
        * CanNm_NetworkRequest()
        * CanNm_NetworkGwEraRequest
        * CanNm_NetworkRelease()
        * CanNm_DisableCommunication()
        * CanNm_EnableCommunication()
        * CanNm_SetUserData()
        * CanNm_GetUserData()
        * CanNm_GetNodeIdentifier()
        * CanNm_GetLocalNodeIdentifier()
        * CanNm_RepeatMessageRequest()
        * CanNm_GetPduData()
        * CanNm_GetState()
        * CanNm_RequestBusSynchronization()
        * CanNm_CheckRemoteSleepIndication()
    04: VP (CanNm.ASR403.CANNM199, CanNm.EB_Ref.SWS_CanNm_00192, CanNm.SWS_CanNm_00189, CanNm.SWS_CanNm_00244):
        - All APIs return E_NOT_OK
    05: VP (CanNm.ASR403.CANNM199, CanNm.ASR403.CANNM241, CanNm.EB_Ref.SWS_CanNm_00316.2, CanNm.ASR403.CANNM019, CanNm.SWS_CanNm_00244):
        - DET error CANNM_E_INVALID_CHANNEL is reported.
    06: Call CanNm_TxConfirmation with invalid TxPduId.
    07: VP (CanNm.ASR403.CANNM199, CanNm.ASR403.CANNM241, CanNm.EB_Ref.SWS_CanNm_00316.2, CanNm.ASR403.CANNM019, CanNm.EB_Ref.CANNM229.1,
            CanNm.EB_Ref.SWS_CanNm_00316.3, CanNm.SWS_CanNm_00244):
        - DET error CANNM_E_INVALID_PDUID is reported with instance
          Id same as CanNm channel handle.
    08: Call CanNm_RxIndication with invalid RxPduId.
    09: VP (CanNm.ASR403.CANNM199, CanNm.ASR403.CANNM241, CanNm.EB_Ref.SWS_CanNm_00316.2, CanNm.ASR403.CANNM019, CanNm.EB_Ref.CANNM232.1,
            CanNm.ASR403.CANNM233, CanNm.EB_Ref.SWS_CanNm_00316.3, CanNm.SWS_CanNm_00244):
        - DET error CANNM_E_INVALID_PDUID is reported with instance
          Id same as CanNm channel handle.
    10: Call RxIndication with SduDataPtr = NULL_PTR 
    11: Check Det error is reported
    12: Call RxIndication with SduLength greater than configured in CanNm module
    13: Check Det error is reported
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM199</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00192</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>461</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00189</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>482</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM229.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>456</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM232.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>458</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM233</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>483</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1503</internalId></specobject>
    <specobject>
      <id>TS_CanNm_32009</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_1/source/application/CanNm_ConTest_1.c</sourcefile>
      <sourceline>807</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    To test DET detection functionality for error CANNM_E_NULL_POINTER.
  
Test Object: None.
Test Precondition: 
    * CANNM_DEV_ERROR_DETECT should be TRUE.
  
Test Execution: 
    01: Clear the DET stubs
    02: Initialize the CanNm module.
    03: Call the following APIs with a Null pointer as parameter:
         CanNm_SetUserData()
         CanNm_GetUserData()
         CanNm_GetNodeIdentifier()
         CanNm_GetLocalNodeIdentifier()
         CanNm_GetPduData()
         CanNm_GetState()
         CanNm_CheckRemoteSleepIndication()
         CanNm_GetVersionInfo()
   04: VP (CanNm.SWS_CanNm_00189, CanNm.ASR403.CANNM199, CanNm.ASR403.CANNM241, CanNm.EB_Ref.SWS_CanNm_00316.5, CanNm.ASR403.CANNM019, CanNm.ASR403.CANNM292,
           CanNm.EB_Ref.CANNM232.3, CanNm.SWS_CanNm_00244):
       - All APIs return E_NOT_OK
       - The DET error CANNM_E_NULL_POINTER is reported.
   05: Call CanNm_RxIndication with PduInfoPtr as NULL_PTR.
   06: VP (CanNm.ASR403.CANNM196, CanNm.ASR403.CANNM199, CanNm.ASR403.CANNM241, CanNm.EB_Ref.SWS_CanNm_00316.5, CanNm.ASR403.CANNM019, CanNm.ASR403.CANNM292,
           CanNm.EB_Ref.CANNM232.3, CanNm.ASR403.CANNM233, CanNm.SWS_CanNm_00244):
       - DET error CANNM_E_NULL_POINTER is reported with instance
         Id same as CanNm channel handle.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM196</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM199</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00189</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>485</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM292</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM232.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>460</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM233</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1504</internalId></specobject>
    <specobject>
      <id>TS_CanNm_32012</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_1/source/application/CanNm_ConTest_1.c</sourcefile>
      <sourceline>942</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    To test the reporting of error CANNM_E_NETWORK_TIMEOUT.
  
Test Object: None.
Test Precondition: 
    * CANNM_DEV_ERROR_DETECT should be TRUE.
  
Test Execution: 
    01: Go to the Repeat message state.
    02: Call main function so that the Nm timer expires.
    03: VP (CanNm.EB_Ref.SWS_CanNm_00317.2, CanNm.SWS_CanNm_00193):
        - The error CANNM_E_NETWORK_TIMEOUT is reported to DET.
    04: Go to the Normal operation state.
    05: Call main function so that the Nm timer expires.
    06: VP (CanNm.EB_Ref.SWS_CanNm_00317.2, CanNm.SWS_CanNm_00193):
        - The error CANNM_E_NETWORK_TIMEOUT is reported to DET.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00317.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>487</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00193</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>236</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>86</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1505</internalId></specobject>
    <specobject>
      <id>TS_CanNm_NetStartInd_DetError</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_1/source/application/CanNm_ConTest_1.c</sourcefile>
      <sourceline>1024</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    To test the reporting of error CANNM_E_NET_START_IND.
  
Test Object: None.
Test Precondition: 
    * CANNM_DEV_ERROR_DETECT should be TRUE.
  
Test Execution: 
    01: Initialize the CanNm Module so that CanNm reaches Bus-Sleep mode.
    02: Call CanNm_RxIndication().
    03: Call CanNm_MainFunction once (to process CanNm_RxIndication).
    04: VP (CanNm.ASR403.CANNM336, CanNm.EB_Ref.SWS_CanNm_00317.1):
        - The error CANNM_E_NET_START_IND is reported to DET.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM336</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00317.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>486</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1506</internalId></specobject>
    <specobject>
      <id>TS_CanNm_EventQueue</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_1/source/application/CanNm_ConTest_1.c</sourcefile>
      <sourceline>1089</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      When CanNm is in state "Normal operation" and CanNm_NetworkRelease()
      is called more often than the event queue size and if
      CanNm_MainFunction() is called until NM_TIMEOUT timer expires,
      then it must be ensured that the network channel reaches
      the prepare bus sleep state. Note that in case of queue overflow, the
      network channel never goes to prepare bus sleep state because the timeout
      event won't be queued as the event queue is already filled up during the
      calls of CanNm_NetworkRelease().
  
Test Object: Event queue
Test Precondition: 
    * CANNM_PASSIVE_MODE_ENABLED shall be STD_OFF.
    * CanNm is initialized
    * CanNm is in Normal Operation State
  
Test Execution: 
    01: Prepare test case preconditions.
    02: Ensure that CanNm is in NormalOperationState.
    03: Within a loop, release the channel more often than the size of the event
        queue and invoke channel main function until NM_TIMEOUT time expires.
    04: VP (CanNm.SWS_CanNm_00109, CanNm.EB.EventQueue):
        - CanNm has reached Prepare bus sleep state.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.EventQueue</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>517</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1507</internalId></specobject>
    <specobject>
      <id>TS_CanNm_WrongPostBuildRamSize</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_1/source/application/CanNm_ConTest_1.c</sourcefile>
      <sourceline>1193</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   The test should prove that in case the postbuild time 
   size needed by internal RX and TX buffers is greater than 
   the precompile alocated,
   the CanNm_Init shall report DET error CANNM_E_INIT_FAILED
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Prepare test case preconditions.
    02: Prepare test_configuration, and modify Postbuild Ram size
    03: Call CanNm Init
    04: VP(CanNm.EB.PostBuildRamSize.3)
        - Check that CanNm reports DET error CANNM_E_INIT_FAILED
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.PostBuildRamSize.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>561</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1508</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TC_CANNM_DETchecks_ConfirmPnAvailability</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_10/source/application/CanNm_ConTest_10.c</sourcefile>
      <sourceline>41</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    To test DET detection functionality of CanNm_ConfirmPnAvailability for error
    CANNM_E_NO_INIT and CANNM_E_INVALID_CHANNEL.
  
Test Object: None.
Test Precondition: 
    Important configuraiton settings:
      - CanNmDevErrorDetect is set to 'true'.
    Module state:
      - CanNm is not initialized.
  
Test Execution: 
    01: Clear the DET stubs.
    02: Call CanNm_ConfirmPnAvailability.
    03: VP (CanNm.ASR403.CANNM039, CanNm.EB_Ref.SWS_CanNm_00316.1, CanNm.ASR403.CANNM019):
        - DET error CANNM_E_NO_INIT is reported.
    04: Initialize the CanNm module.
    05: Call CanNm_ConfirmPnAvailability with invalid Network Handle
    06: VP (CanNm.ASR403.CANNM199, CanNm.ASR403.CANNM241, CanNm.EB_Ref.SWS_CanNm_00316.2, CanNm.ASR403.CANNM019, CanNm.SWS_CanNm_00244):
        - DET error CANNM_E_INVALID_CHANNEL is reported.
    07: Call CanNm_ConfirmPnAvailability with invalid handle id.
    08: VP (CanNm.EB_Ref.SWS_CanNm_00316.2):
        - Check DET is reported.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM199</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>482</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1509</internalId></specobject>
    <specobject>
      <id>TC_CANNM_EIRA_ERA_Calc_FilterAlgo</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_10/source/application/CanNm_ConTest_10.c</sourcefile>
      <sourceline>135</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    Verify that, If CanNmPnEnabled is TRUE and the PNI bit in the received
    NM-PDU is 1, CanNm module shall process the Partial Networking Information
    of the NM-PDU according to NM PDU Filter Algorithm.
    Verify that, If a NM-PDU is received the CanNm shall set every requested and
    filtered (relevant) PN request bit in the EIRA/ERA to 1.
    Verify that, if content of EIRA/ERA changes (any bit changes from 1 to 0 or from
    0 to 1) because of a received or the EIRA/ERA reset timer expiration, the CanNm
    shall inform the upper layers by calling PduR_CanNmRxIndication().
  
Test Object: None.
Test Precondition: 
    CanNmPnEnable == true
    PnEiraCalcEnable == true
    PnEraCalcEnable == true
    PNI bit in Nm message shall be 1.
  
Test Execution: 
    01: Initialize the stubs.
    02: Invoke CanNm_Init().
    03: Execute the following for every channel
    04: Invoke CanNm_ConfirmPnAvailability.
    05: Invoke CanNmRxIndication with all PN request bits set in the NM-PDU.
    06: Invoke Main Function once.
    07: VP (CanNm.SWS_CanNm_00412, CanNm.ASR403.CANNM425, CanNm.ASR403.CANNM436, CanNm.SWS_CanNm_00426, CanNm.SWS_CanNm_00437, CanNm.EB_Ref.SWS_CanNm_00432.1,
            CanNm.SWS_CanNm_00344, CanNm.ASR403.CANNM423, CanNm.EB_Ref.SWS_CanNm_00443.1, CanNm.ASR403.CANNM434):
        - PduR_CanNmRxIndication is invoked for both EIRA/ERA.
        - Only relevant bits are set in the EIRA/ERA data sent to Com.
    08: Invoke CanNmRxIndication for both EIRA/ERA with Filter Mask Value in
        corresponding PDU message byte.
    09: Invoke Main Function once.
    10: VP(CanNm.SWS_CanNm_00412, CanNm.EB_Ref.SWS_CanNm_00432.1, CanNm.SWS_CanNm_00325):
        - PduR_CanNmRxIndication is not Invoked as there was no change in
        the PN info received.
    11: Invoke Main Function continuously for one cycle time less than
        what is required for PN Reset Timer expiry.
    12: VP (CanNm.SWS_CanNm_00431, CanNm.SWS_CanNm_00442, CanNm.EB_Ref.SWS_CanNm_00432.3):
        - PduR_CanNmRxIndication is not Invoked.
        - The respective bits in the EIRA/ERA value are not cleared.
    13: Invoke Main Function once so that PN Reset Time elapses.
    14: VP (CanNm.EB_Ref.SWS_CanNm_00443.2, CanNm.SWS_CanNm_00431, CanNm.SWS_CanNm_00442, CanNm.EB_Ref.SWS_CanNm_00432.3, CanNm.SWS_CanNm_00325):
        - PduR_CanNmRxIndication is Invoked.
        - The respective bits in the EIRA/ERA value are cleared.
    15: Invoke CanNmRxIndication for both EIRA/ERA with Filter Mask Value in
        corresponding PDU message byte.
    16: VP (CanNm.SWS_CanNm_00412, CanNm.SWS_CanNm_00426, CanNm.SWS_CanNm_00437, CanNm.EB_Ref.SWS_CanNm_00432.1, CanNm.SWS_CanNm_00325):
        - PduR_CanNmRxIndication is invoked for both EIRA/ERA
        - Only relevant bits are set in the EIRA/ERA data sent to Com.
    17: Invoke Main Function continuously for one cycle time less than
        what is required for PN Reset Timer expiry.
    18: VP (CanNm.SWS_CanNm_00431, CanNm.EB_Ref.SWS_CanNm_00432.3):
        - PduR_CanNmRxIndication is not Invoked.
        - The respective bits in the EIRA/ERA value are not cleared.
    19: Invoke Main Function once so that PN Reset Time elapses.
    20: VP (CanNm.SWS_CanNm_00431, CanNm.SWS_CanNm_00442, CanNm.EB_Ref.SWS_CanNm_00432.3, CanNm.SWS_CanNm_00325):
        - PduR_CanNmRxIndication is invoked for both EIRA/ERA.
        - The respective bits in the EIRA/ERA value are cleared.
    21: Invoke CanNmRxIndication without Filter Mask Value in corresponding PDU
        message byte.
    22: VP (CanNm.SWS_CanNm_00412, CanNm.SWS_CanNm_00325):
        - PduR_CanNmRxIndication is not Invoked.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00412</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>335</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00431</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>349</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM425</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00426</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>345</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00432.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>449</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00432.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>451</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM423</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>67</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00344</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>321</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00325</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>304</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM434</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM436</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>72</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00437</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>352</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00442</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>355</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00443.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>468</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00443.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>469</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1510</internalId></specobject>
    <specobject>
      <id>TC_CANNM_AllMessageKeepAwake_True</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_10/source/application/CanNm_ConTest_10.c</sourcefile>
      <sourceline>394</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that, If CanNmPnEnabled is TRUE, the PNI bit in the received NM-PDU
    is 0 and CanNmAllNmMessagesKeepAwake is TRUE, the CanNm module shall perform
    the normal Rx Indication handling omitting the extensions for partial
    networking.
    Verify that, If no bit within the PN Info Range of the received NM-PDU
    matches with a bit in the NM filter mask and CanNmAllNmMessagesKeepAwake is
    TRUE the message shall be processed with the normal Rx Indication handling.
  
Test Object: None.
Test Precondition: 
    CanNmPnEnabled == true
    CanNmAllNmMessagesKeepAwake == true for channel 0
  
Test Execution: 
    01: Initialize the stubs.
    02: Invoke CanNm_Init().
    03. Invoke CanNm_ConfirmPnAvailability to enable PN filtering.
    04: Goto ready sleep state.
    05. Invoke Main Function until 'NmTimeOut Timer - 1' expires.
    06: Invoke CanNm_RxIndication with PNI bit value as 0 and with invalid
        mask bytes.
    07: Invoke Main Function once
    08: VP (CanNm.SWS_CanNm_00410, CanNm.ECUC_CanNm_00068):
        - PduR_CanNmRxIndication is not Invoked.
        - State is still Ready Sleep.
    09: Invoke Main Function until 'NmTimeOut Timer - 1' expires.
    10: Invoke CanNm_RxIndication with the PNI bit value as 0
        but valid bits in the PN Info range.
    11: Invoke Main Function once
    12: VP(CanNm.SWS_CanNm_00421, CanNm.ECUC_CanNm_00068):
        - PduR_CanNmRxIndication is not Invoked.
        - State is still Ready Sleep
    13: Invoke Main Function until NmTimeOut Timer expires.
    14: State is prepare bussleep state.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00410</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>333</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00421</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>343</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00068</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1511</internalId></specobject>
    <specobject>
      <id>TC_CANNM_PnEnabled_PNIBit_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_10/source/application/CanNm_ConTest_10.c</sourcefile>
      <sourceline>596</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that, If CanNmPnEnabled is TRUE the CanNm module shall set the value
    of the transmitted PNI bit to 1.  Further ensure that content of user data
    is not affected.
  
Test Object: None.
Test Precondition: 
    CanNmPnEnabled == true
  
Test Execution: 
    01: Initialize the stubs.
    02: Invoke CanNm_Init().
    03: Execute the following for every channel
    04: Goto Repeat Message state
    05: Reset CanIf Tx buffer and set user data in CanNm
    06: Check if CanNm Offset Time is greater than zero than proceed to step 07
        else continue with step 08
    07: Invoke Main Function in a loop until Message Cycle Offset expires
    08: Invoke Main Function in a loop until Message Cycle time expires
    09: VP (CanNm.SWS_CanNm_00325):
        - CanIf_Transmit is Invoked.
    10: VP (CanNm.SWS_CanNm_00413):
        - PNI bit(6th bit of CBV byte) is set.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00413</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>336</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00325</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>304</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1512</internalId></specobject>
    <specobject>
      <id>TC_CANNM_AllMessageKeepAwake_False</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_10/source/application/CanNm_ConTest_10.c</sourcefile>
      <sourceline>708</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that, If CanNmPnEnabled is TRUE, the PNI bit in the received NM-PDU
    is 0 and CanNmAllNmMessagesKeepAwake is FALSE, the CanNm module shall ignore
    the received NM-PDU.
    Verify that, If no bit within the PN Info Range of the received NM-PDU
    matches with a bit in the NM filter mask and CanNmAllNmMessagesKeepAwake is
    FALSE the message is dropped from further processing.
  
Test Object: None.
Test Precondition: 
    CanNmPnEnabled == true
    CanNmAllNmMessagesKeepAwake == false for channel 1
  
Test Execution: 
    01: Initialize the stubs.
    02: Invoke CanNm_Init().
    03: Goto ready sleep state.
    04. Invoke Main Function until 'Nm_TimeOut - 1' expires.
    05: Invoke CanNm_ConfirmPnAvailability to enable PN filtering.
    06: Invoke CanNm_RxIndication with PNI bit value as 1 and without valid mask
        bytes.
    07: Invoke Main Function once.
    08: VP(CanNm.SWS_CanNm_00411,CanNm.ECUC_CanNm_00068):
        - PduR_CanNmRxIndication is not Invoked.
        - Transition to Prepare Bus Sleep Mode happened.
    09: Invoke CanNm_RxIndication with a PNI bit value as 0
        but with valid mask bytes in Pn Info range.
    10: Invoke Main Function once.
    11: VP(CanNm.SWS_CanNm_00420,CanNm.ECUC_CanNm_00068):
        - PduR_CanNmRxIndication is not Invoked.
        - State is still Prepare Bus Sleep.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00411</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>334</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00420</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>342</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00068</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1513</internalId></specobject>
    <specobject>
      <id>TC_CANNM_Rx_EIRA_ERA_Reset_Timer_Chk</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_10/source/application/CanNm_ConTest_10.c</sourcefile>
      <sourceline>875</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify EIRA/ERA got reset after EIRA/ERA reset time.
    Verify CanNm module restart the EIRA/ERA reset timer for every
    PN request bit if a NM-PDU is received.
  
Test Object: None.
Test Precondition: 
    CanNmPnEnabled == true
    PnEiraCalcEnable == true
    PnEraCalcEnable == true
  
Test Execution: 
    01: Set all PN request bits in the NM-Pdu.
    02: Call CanNm_ConfirmPnAvailability to enable Pn filtering
    03: Invoke RxIndication.
    04: Call main function once
    05: VP (CanNm.ECUC_CanNm_00072):
        - PduR_CanNmRxIndication is invoked with the PDU-ID
          configured in CanNmPnEiraRxNSduRef.
    06: VP (CanNm.ASR403.CANNM425, CanNm.ASR403.CANNM436):
        - Only relevant bits are set in the EIRA/ERA data sent to Com
    07: Call Main function for CanNmPnResetTime-1
    08: Check that PN info in the PduR stub has not been changed
    09: Call main function once
    10: VP (CanNm.SWS_CanNm_00428, CanNm.SWS_CanNm_00438, CanNm.ECUC_CanNm_00059):
        - PN info in the PduR stub has been reset.
    11: Provide valid PN info through RxIndication
    12: Call main function once
    13: VP (CanNm.ASR403.CANNM425, CanNm.ASR403.CANNM436):
        - Only relevant bits are set in the EIRA/ERA data sent to Com.
    14: Call Main function for CanNmPnResetTime-1
    15: Check that PN info in the PduR stub has not been changed
    16: Provide valid PN info through RxIndication, this should reset the PN
        timer.
    17: Call main function for CanNmPnResetTime-1
    18: Check that PN info in the PduR stub has not been changed
    19: Call main function once
    20: VP (CanNm.SWS_CanNm_00429, CanNm.SWS_CanNm_00439, CanNm.ECUC_CanNm_00059):
        - PN info in the PduR stub should be 0.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00428</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>347</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00429</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>348</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00059</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00072</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM425</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM436</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>72</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00438</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>353</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00439</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>354</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1514</internalId></specobject>
    <specobject>
      <id>TC_CANNM_PN_RequestInfo_Chk</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_10/source/application/CanNm_ConTest_10.c</sourcefile>
      <sourceline>1077</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify length of the PN request information in the NM message.
    Verify if at least one bit within the PN Info Range of the received NM-PDU
    matches with a bit in the NM filter mask  then the message is processed.
  
Test Object: None.
Test Precondition: 
    CanNmPnEnabled == true
    CanNmAllNmMessagesKeepAwake = FALSE for channel 1
  
Test Execution: 
    01: Go to ready sleep state boundary to transition to prepare bus sleep
        state.
    02: Provide Pn info with all bits set except those are relevant for the ECU
    03: Call main function once
    04: Check that RxIndication is ignored
    05: VP(CanNm.ECUC_CanNm_00060,CanNm.SWS_CanNm_00415,CanNm.ECUC_CanNm_00064):
        - State transits to prepare bus sleep state
    06: Set one of the valid bit at the mask corresponds to last valid byte and
        invoke RxIndication
    07: Call main function once
    08: Check that RepeatMessageState is entered
    09: Call main function until transition to prepare bus sleep state about to
        happen.
    10: Provide Pn info with one of the valid bit at the mask corresponds to
        first valid byte and invoke RxIndication.
    11: Call main function once
    12: VP(CanNm.SWS_CanNm_00419):
        - RxIndication is not ignored
    13: VP (CanNm.ECUC_CanNm_00061, CanNm.ECUC_CanNm_00063):
        - State remains in Repeat Message State.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00060</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00415</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>338</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00061</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>116</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00063</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00419</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>341</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1515</internalId></specobject>
    <specobject>
      <id>TC_CANNM_ConfirmPnAvailability_Not_Called</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_10/source/application/CanNm_ConTest_10.c</sourcefile>
      <sourceline>1277</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify NM-PDU even if the filter algorithm is disabled the aggregation of ERA/EIRA
    is performed.
  
Test Object: None.
Test Precondition: 
    CanNmPnEnabled == true
  
Test Execution: 
    01: Initialize the stubs.
    02: Invoke CanNm_Init().
    03: Execute the following for every channel
    04: Invoke CanNmRxIndication with Filter Mask Value in corresponding PDU
        message byte.
    05: Call Main Function once.
    06: VP (CanNm.SWS_CanNm_00404):
        - PduR_CanNmRxIndication is invoked for ERA and EIRA even if PN filter is disabled.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00404</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>327</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1516</internalId></specobject>
    <specobject>
      <id>TC_CANNM_CanIf_Not_Ok_10_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_10/source/application/CanNm_ConTest_10.c</sourcefile>
      <sourceline>1374</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that the SM transits from state BUS_SLEEP to REPEAT_MESSAGE state
    the SM stays in REPEAT_MESSAGE state until CanIf_Transmit returns E_OK and RMS timer expires.
    The tests also checks if CanIf_Transmit return E_NOT_OK the RMS timer is reloaded.
    The RMS is reloaded until CanIf_Transmit returns E_OK
    The test checks the functionality in case that "immediate" messages are turned off.
  
Test Object: None.
Test Precondition: 
    CANNM_IMMEDIATE_TRANSMISSION == STD_OFF
  
Test Execution: 
    01: Initialize the stubs
    02: Set CanIf_Transmit return value to E_NOT_OK
    03: Check that current state is BUS_SLEEP
    04: Request the Network
    05: Check that SM entered into REPEAT_MESSAGE_STATE
    06: Wait MsgCycleOffset - 1 cycles check no CanIf_Transmit was triggered
    07: On the last MsgCycleOffset cycles CanIf_Transmit was triggered
    08: Call main function for MsgCycleTime times
    09: VP (CanNm.EB.CanNmRetryFirstMessageRequest),
           (CanNm.EB.CanNmRetryFirstMessageRequestRepeatMessageState):
        - Check that CanIf_Transmit was called on each cycle sine the return value is still E_NOT_OK
    10: Set CanIf_Transmit return value to E_OK
    11: Check that CanIf_Transmit was called because the last CanIf_Transmit value was false
    12: Call main cycles for MsgCycleTime - 1
    13: Check that CanIf_Transmit was not called
    14: Call the last cycle from MsgCycleTime
    15: Check that on the last cycle of MsgCycleTime CanIf_Transmit was called
    16: Call main cycles for MsgCycleTime - 1
    17: Check that CanIf_Transmit was not called
    18: Check that on the last cycle of MsgCycleTime CanIf_Transmit was called
    19: Because RMS time has already expired check that the SM is in NORMAL_OPERATION_STATE
    20: Call Main cycle once again to avoid going into PREPARE_BUS_SLEEP
    21: Release the network
    22: Check that SM is in PREPARE_BUS_SLEEP
    23: Wait the max time (CanNmTime) to go to PREPARE_BUS_SLEEP
    24: Check that the current state is PREPARE_BUS_SLEEP
    25: Check while in READY_SLEEP_STATE no CanIf_Transmit was called
    26: Wait the max time (RSITime) to go in state BUS_SLEEP
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmRetryFirstMessageRequest</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>520</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmRetryFirstMessageRequestRepeatMessageState</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>521</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1517</internalId></specobject>
    <specobject>
      <id>TC_CANNM_CanIf_Not_Ok_10_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_10/source/application/CanNm_ConTest_10.c</sourcefile>
      <sourceline>1527</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that the SM transits from state BUS_SLEEP to REPEAT_MESSAGE state
    the SM stays in REPEAT_MESSAGE state until the NM timer and RMS timer expires.
    The tests also checks if CanIf_Transmit return E_NOT_OK the RMS timer is reloaded.
    The test checks the functionality in case that "immediate" messages are turned off.
  
Test Object: None.
Test Precondition: 
    CANNM_IMMEDIATE_TRANSMISSION == STD_OFF
  
Test Execution: 
    01: Initialize the stubs
    02: Set CanIf_Transmit return value to E_NOT_OK
    03: Check that the current state is BUS_SLEEP
    04: Request the network
    05: Check that SM entered into REPEAT_MESSAGE state
    06: Wait MsgCycleOffset - 1 cycles check no CanIf_Transmit was triggered
    07: Because "immediate" messages are turned no CanIf_Transmit should be called
    08: VP (CanNm.EB.CanNmRetryFirstMessageRequest):
        - On the last cycle from MsgCycleOffset the CanIf_Transmit should be called
    09: Because CanIf_Transmit never returns E_OK after CanNmTime expires the RMS timer
        should not be reloaded any more. Before CanNmTime expires on each cycle the CanIf_Transmit
        will try to send the message
    10: Wait until RMS almost expires (RMS - 1)
    11: VP (CanNm.EB.CanNmRetryFirstMessageRequestRepeatMessageState):
        - Check that CanIf_Transmit is not called on each cycle again,
        but the number of times that MsgCycleTime fits into RMS-1 time
    12: Check that SM is still in REPEAT_MESSAGE state
    13: On the current transition the SM should goto NORMAL_OPERATION state
    14: Check that SM entered NORMAL_OPERATION state
    15: Wait some cycles and check that only n times is Called CanIf_Transmit
    16: Check that during NORMAL_OPERATION state only n times have been called the CanIf_Transmit
    17: Release the network
    18: Check that current state is READY_SLEEP state
    19: Wait the maximum time for entering PREPARE_BUS_SLEEP_MODE
    20: Check that SM entered the PREPARE_BUS_SLEEP state
    21: In READY_SLEEP state the CanIf_Transmit should not be called
    22: Wait the maximum time for entering BUS_SLEEP state
    23: Check that SM entered BUS_SLEEP mode
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmRetryFirstMessageRequest</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>520</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmRetryFirstMessageRequestRepeatMessageState</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>521</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1518</internalId></specobject>
    <specobject>
      <id>TS_CanNm_RSI</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_10/source/application/CanNm_ConTest_10.c</sourcefile>
      <sourceline>1673</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    The test should prove that in case the state machine is in 
    normal operation state and no messages are received for RSI time,
    State macine enters state Normal Operation Remote Sleep.
    Test that if the state machine is 
    Ready Sleep Remote Activity and network relase is issued 
    state machine remains in state Ready Sleep Remote Activity.
    Test that if the state machine is 
    Ready Sleep Remote Sleep and network relase is issued 
    state machine remains in state Ready Sleep Remote Sleep.
  
Test Object: None.
Test Precondition: 
    CanNmPassiveModeEnabled is disabled.
    CanNmRemoteSleepIndEnabled is enabled
  
Test Execution: 
    01: Initialize stubs
    02: Initialize CanNm
    03: Request the network
    04: Check thet current state is Repeat Message State
    05: Call mainfunction RMS number of times
    06: Check thet current state is Normal Operation State
    07: Release the network
    08: Check thet current state is Ready Sleep State
    09: Check that if state machine is in Ready Sleep State and a
        network release is once again issued the
        current state remains Ready Sleep state
    10: Check that the current state is Ready Sleep State
    11: Request the network
    12: Check that the current state is Normal Operation State
    13: Wait until RSI timer expires
    14: VP: (CanNm.SWS_CanNm_00150)
        Check that Nm_RemoteSleepIndication has been called
    15: Release the network
    16: Check that the current state is Ready Sleep State
    17: Check that if state machine is in Ready Sleep State and a
         network release is once again issued the
         current state remains Ready Sleep state
    18: Check that the current state is Ready Sleep State
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00150</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>208</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1519</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TC_CANNM_TX_EIRA_VERIFICATION</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_11/source/application/CanNm_ConTest_11.c</sourcefile>
      <sourceline>57</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify PN request bit in the EIRA is set to 1 as per PN request bits in the
    transmitted NM-PDU.
  
Test Object: None.
Test Precondition: 
    CanNmPnEnabled = true for channel 0
  
Test Execution: 
    01: Initialize the stubs.
    02: Invoke CanNm_Init().
    03: Goto Repeat Message state.
    04: Invoke Main Function once to update EIRA bits
    05: VP (CanNm.SWS_CanNm_00427, CanNm.ASR403.CANNM423, CanNm.ASR403.CANNM425, CanNm.EB_Ref.SWS_CanNm_00432.2):
        - PduR_CanNmRxIndication is invoked
        - check if all the bits are set in the EIRA
    06: Invoke Main Function in a loop until Message Cycle Offset expires.
    07: Clear the PDU data from PduR.
    08: Invoke Main Function in a loop until TST_CANNM_PN_RESET_TIME expires.
    09: Whether EIRA reset to zero.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00427</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>346</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00432.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>450</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM423</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>67</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM425</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1520</internalId></specobject>
    <specobject>
      <id>TC_CANNM_Tx_EIRA_Reset_Timer_Chk</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_11/source/application/CanNm_ConTest_11.c</sourcefile>
      <sourceline>163</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify PN request bit in the EIRA is set to 1 as per PN request bits in the
    transmitted NM-PDU.
  
Test Object: None.
Test Precondition: 
    CanNmPnEnabled = true for channel 0.
  
Test Execution: 
    01: Initialize the stubs.
    02: Invoke CanNm_Init().
    03: Go to Normal Operation state.
    04: Send a valid Pn info through PduR stub with all PN request bits set
    05: Call main function until CanIf_Transmit is called
    06: Set all EIRA bits that are part of PduRStub_Buffer
    07: Clear Pn info in PduR stub
    08: - Init PduR_CanNmRxIndication_Stub to 0
        - Check that only bits which does not pass the
          mask are reset after one main call cycle
    09: Call Main function max_wait times
    10: Check PN info in the CanIf stub is same as the send data
    11: Call main function until an NM-PDU is transmitted.
    12: VP (CanNm.SWS_CanNm_00428):
        - After timer expired all EIRA bits should be reset to 0
    13: Send valid Pn info through PduR stub
    14: Call main function until CanIf_Transmit is called
    15: VP (CanNm.ASR403.CANNM425):
        - Only those relevant PN request bits(configured in PN Filter mask)
          are set to 1 in EIRA.
    16: Call main function until CanIf_Transmit called to restart EIRA timer.
    17: Clear Pn info in PduR stub
    18: Call Main function until CanNmPnResetTime-1.
    19: Check PN info in the CanIf stub, it should the same data sent at first
        step
    20: Call main function once.
    21: VP (CanNm.ASR403.CANNM430, CanNm.ECUC_CanNm_00059):
        - PN info in the CanIf stub is 0.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00428</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>347</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM430</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>69</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00059</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM425</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1521</internalId></specobject>
    <specobject>
      <id>TC_CANNM_PnFiler_During_Init</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_11/source/application/CanNm_ConTest_11.c</sourcefile>
      <sourceline>391</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that CanNm module initialization and entering the Bus-Sleep Mode
    causes the PN message filtering to be disabled, and all received (PN) NM
    messages have been processed as normal NM messages. [CanNm.ASR403.CANNM403]
  
Test Object: None.
Test Precondition: 
    CanNmPnEnabled = true for channel 0
    CanNmAllNmMessagesKeepAwake = false
  
Test Execution: 
    01: Initialize the stubs.
    02: Invoke CanNm_Init().
    03: Goto bus sleep mode
    04: Invoke CanNm_RxIndication with PN data other than MASK value set.
    05: Call Main Function once.
    06: VP (CanNm.ASR403.CANNM403):
        - NM message is processed.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM403</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>64</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1522</internalId></specobject>
    <specobject>
      <id>TC_CANNM_PnFilter_MASK</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_11/source/application/CanNm_ConTest_11.c</sourcefile>
      <sourceline>493</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check the functionality of CanNm_ConfirmPnAvailability regarding
    CanNm_RxIndication.
  
Test Object: None.
Test Precondition: 
    CanNmPnEnabled = true for channel 0
    CanNmAllNmMessagesKeepAwake = false
  
Test Execution: 
    01: Initialize the stub values
    02: Initialize CanNm
    03: Goto normal operation mode
    04: Clear PN info
    05: Clear PduR_CanNmRxIndication stub count
    06: Invoke Rx Indication with valid PN bit in Pn Info Range
    07: Invoke Main Function Once
    08: Check that PduR_CanNmRxIndication_Stub was called with UserRxPduId
    09: Set relevant PN bits
    10: Clear PduR_CanNmRxIndication stub count
    11: Invoke Rx Indication with valid PN bit in Pn Info Range
    12: VP (CanNm.SWS_CanNm_00344):
        - Invoke Main Function Once
    13: Check that PduR_CanNmRxIndication was called twice:
        - With UserRxPduId
        - With EiraPduId
    14: Call mainfunction until all PN bits are reset
    15: Call ConfirmPnAvailability for channel 0
    16: Clear PN info
    17: Clear PduR_CanNmRxIndication stub count
    18: Invoke Rx Indication with valid PN bit in Pn Info Range
    19: Invoke Main Function Once
    20: Set relevant PN bits
    21: Clear PduR_CanNmRxIndication stub count
    22: Invoke Rx Indication with valid PN bit in Pn Info Range
    23: Invoke Main Function Once
    24: Check that PduR_CanNmRxIndication was called twice:
        - With UserRxPduId
        - With EiraPduId
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00344</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>321</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1523</internalId></specobject>
    <specobject>
      <id>TC_CANNM_CanNmPnEnabled_False</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_11/source/application/CanNm_ConTest_11.c</sourcefile>
      <sourceline>670</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify if CanNmPnEnabled is FALSE, the CanNm performs normal Rx Indication
    handling and the partial networking extensions are disabled.
  
Test Object: None.
Test Precondition: 
    CanNmPnEnabled == FALSE for channel 1
  
Test Execution: 
    01: Initialize the stubs.
    02: Invoke CanNm_Init().
    03: Goto Normal operation State
    04: Invoke CanNm_RxIndication with PN data other than MASK value set.
    05: Call Main Function once.
    06: VP (CanNm.SWS_CanNm_00409):
        - NM message is processed.
    07: Invoke CanNm_RxIndication with PN data with MASK value.
    08: VP (CanNm.SWS_CanNm_00409):
        - NM message is processed but EIRA is not sent to Com via PduR.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00409</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>332</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1524</internalId></specobject>
    <specobject>
      <id>TC_CANNM_PN_SpontaneousTr_ReEnterRMS</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_11/source/application/CanNm_ConTest_11.c</sourcefile>
      <sourceline>802</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if CanNm_NetworkRequest() is called when CanNm is in
    Network mode (in any sub-state) and CanNmPnHandleMultipleNetworkRequests
    is set to TRUE, then CanNm performs state transition to Repeat
    Message State (CanNm.SWS_CanNm_00454).
  
Test Object: None.
Test Precondition: 
    * Important test configuration details:
      - CanNmPnHandleMultipleNetworkRequests is set to 'true' for Channel0
      - CanNmImmediateNmTransmissions &gt; 1
        - CanNmImmediateNmTransmissions is set to 3 for Channel0
  
Test Execution: 
    Note:
    - All references of "network channel" refer to "Channel0"

    01: Initialize test case
        - Initialize CanNm
        - Initialize dependent module stubs
    02: Invoke CanNm_NetworkRequest() for network channel
    03: Invoke main function once
    04: Ensure that network channel has entered Repeat Message state
    05: Invoke main function so that RMS timer hits its limit
    06: Invoke CanNm_NetworkRequest() for network channel
    07: Invoke main function exactly once, so that RMS timer expires
    08: VP (CanNm.SWS_CanNm_00454, ECUC_CanNm_00073, CanNm.EB.Dsn.StateDynamics.NET_REQ_STATUS_CHANGED_NETWORK_MODE):
        - Network channel has re-entered Repeat Message state
    09: Invoke main function so that RMS timer hits its limit
    10: Ensure that network channel is in Repeat Message state
    11: Invoke main function exactly once, so that RMS timer expires. This
        ensures that Repeat Message state was restarted in step 08.
    12: Ensure that network channel has entered Normal Operation state
    13: Invoke CanNm_NetworkRequest() for network channel
    14: Invoke main function once
    15: VP (CanNm.SWS_CanNm_00454, ECUC_CanNm_00073):
        - Network channel is in Repeat Message state
    16: Goto Ready sleep state
    17: Invoke CanNm_NetworkRequest() for network channel
    18: Invoke main function once
    19: VP (CanNm.SWS_CanNm_00454, ECUC_CanNm_00073):
        - Network channel is in Repeat Message state
    20: Go to Normal Operation State
    21: Call Main Function until the Remote Sleep Indication timer expires
    22: Release the network
    23: Call the mainfunction once and check if the current
        state is Ready Sleep State
    22: Request the network
    23: Call the mainfunction once and check if the current
        state is not Normal Operation State but Repeat Message State
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00454</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>365</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.NET_REQ_STATUS_CHANGED_NETWORK_MODE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1441</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM073_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>5</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1525</internalId></specobject>
    <specobject>
      <id>TC_CANNM_PN_SpontaneousTr_ReEnterRMS2</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_11/source/application/CanNm_ConTest_11.c</sourcefile>
      <sourceline>997</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if CanNm_NetworkRequest() is called when CanNm is in
    Normal Operation State and CanNmPnHandleMultipleNetworkRequests
    is set to FALSE, then CanNm don't perform a state transition to Repeat
    Message State (CanNm.SWS_CanNm_00454).
  
Test Object: None.
Test Precondition: 
    * Important test configuration details:
      - CanNmPnHandleMultipleNetworkRequests is set to 'false' for Channel1
  
Test Execution: 
    Note:
    - All references of "network channel" refer to "Channel1"

    01: Initialize test case
        - Initialize CanNm
        - Initialize dependent module stubs
    02: Goto Ready sleep state
    03: Invoke CanNm_NetworkRequest() for network channel 1
    04: Invoke main function once
    05: VP (CanNm.SWS_CanNm_00454):
        - Check if the current state is Normal Operation State
        and not Repeat Message State
    06: Call Main Function until the Remote Sleep Indication timer expires
    07: Call CanNm_NetworkRelease() in Normal Operation State
        in order to transit to Ready Sleep State
    08: Invoke main function once
    09: Check that the current state is Ready Sleep State
    10: Invoke CanNm_NetworkRequest() in order to
        transit to Normal Operation State
    11: Invoke main function once
    12: VP (CanNm.SWS_CanNm_00110, CanNm.SWS_CanNm_00454):
        - Check if the current state is Normal Operation State
          and not Repeat Message State
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00454</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>365</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>178</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1526</internalId></specobject>
    <specobject>
      <id>TC_CANNM_Timers_Com_Disable0</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_11/source/application/CanNm_ConTest_11.c</sourcefile>
      <sourceline>1122</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that the Nm Timeout timer won't be restarted if the communication is
    disabled when a reenter to Network Mode occurs
    (due to PnHandleMultipleNetworkRequests feature).
    Verify that after re-enabling the communication and the network is released
    the state machine goes into Bus Sleep Mode.
  
Test Object: None.
Test Precondition: None.
Test Execution: 
    PnHandleMultipleNetworkRequests must be TRUE for channel 0
    01: Initialize the CanNm
    02: Request the network
    03: Check that the current state is Repeat Message State
    04: Call main function until
        state machine enters Normal Operation State
    05: Check that the current state is Normal Operation State
    06: Disable the communication
    07: Re-request the network
    08: Call main function until
        state machine enters Normal Operation State
    09: Check that the current state is Normal Operation State
    10: Release the network
    11: Check that the current state is Ready Sleep State
    12: Call main function for CanNmTimeoutTime number of times
    13: VP: (CanNm.EB.NmTimer, CanNm.SWS_CanNm_00454)
        If the CanNmTimer would be restarted on re-entry into
        Network Mode the current state would be PrepareBusSleep,
        or BusSleep mode
    14: Enable the communication
    15: Request the network
    16: Call main function until
        state machine enters Normal Operation State
    17: Check that the current state is Normal Operation State
    18: Release the network
    19: Check that the current state is Ready Sleep State
    20: Call main function for CanNmTimeoutTime + CanNmWaitBusSleepTime
        number of times
    21: Check that the current state is Bus Sleep Mode
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.NmTimer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>556</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00454</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>365</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1527</internalId></specobject>
    <specobject>
      <id>TC_CANNM_Timers_Com_Disable1</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_11/source/application/CanNm_ConTest_11.c</sourcefile>
      <sourceline>1326</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that the Nm Timeout timer won't be restarted if the communication
    is disabled one cycle before CanNmTimeoutTime would expire.
    When communication is enabled the state machine leaves Ready Sleep State
    and enters Bus Sleep Mode
  
Test Object: None.
Test Precondition: None.
Test Execution: 
    PnHandleMultipleNetworkRequests must be TRUE for channel 0
    01: Initialize CanNm
    02: Request the Network
    03: Check that the current state is Repeat Message State
    04: Wait until CanNmTimeoutTime almoast expires
    05: Disable the communication
    06: Wait until state machine enters Normal Operation State
    07: Check that the current state is Normal Operation State
    08: Release the network
    09: Check that the current state is Ready Sleep State
    10: Call main function for CanNmTimeoutTime number of times
    11: VP(CanNm.EB.NmTimer)
        Check that the current state is still Ready Sleep State
    12: Enable the communication
    13: Call main function for CanNmTimeoutTime + CanNmWaitBusSleepTime
        number of times
    14: Check that the state state machine entered Bus Sleep Mode
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.NmTimer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>556</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1528</internalId></specobject>
    <specobject>
      <id>TC_CANNM_Timers_Com_Disable2</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_11/source/application/CanNm_ConTest_11.c</sourcefile>
      <sourceline>1468</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that the Nm Timeout timer won't be restarted if the communication is disabled when
    CanNm_RxIndication() API is called.
    When communication is enabled the state machine leaves Ready Sleep State
    and enters Bus Sleep Mode.
  
Test Object: None.
Test Precondition: None.
Test Execution: 
    01: Initialize CanNm
    02: Request the network
    03: Check that the current state is Repeat Message State
    04: Disable the communication
    05: Release the network
    06: Wait until Repeat Message Timer expires
    07: Check that the current state is Ready Sleep State
    08: Simulate Rx indication
    09: Wait until CanNmTimeoutTime expires
    10: VP(CanNm.EB_Ref.SWS_CanNm_00069, CanNm.EB.NmTimer)
        Check that the current state is still Ready Sleep State
    11: Enable the communication
    12: Call main function for CanNmTimeoutTime + CanNmWaitBusSleepTime
        number of times
    13: Check that the current state is Bus Sleep Mode
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.NmTimer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>556</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00069</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>464</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1529</internalId></specobject>
    <specobject>
      <id>TC_CANNM_Timers_Com_Disable3</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_11/source/application/CanNm_ConTest_11.c</sourcefile>
      <sourceline>1600</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that the Nm Timeout timer won't be restarted
    if the communication is disabled when CanNm_TxConfirmation() API is called.
    When communication is enabled the state machine leaves Ready Sleep State
    and enters Bus Sleep Mode.
  
Test Object: None.
Test Precondition: None.
Test Execution: 
    01: Initialize CanNm
    02: Request the network
    03: Check that the current state is Repeat Message State
    04: Disable Communication
    05: Wait until Repeat Message Timer expires
    06: Check that the current state is Normal Operation State
    07: Simulate TxConfirmation
    08: Release the network
    09: Check that the current state is Ready Sleep State
    10: Wait until CanNmTimeoutTime expires
    11: VP(CanNm.EB_Ref.SWS_CanNm_00099.1) - Check that the current state is Ready Sleep State
    12: Enable Communication
    13: Call main function for CanNmTimeoutTime + CanNmWaitBusSleepTime
        number of times
    14: Check that the current state is Bus Sleep Mode
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.NmTimer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>556</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00099.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>465</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1530</internalId></specobject>
    <specobject>
      <id>TC_CANNM_Enable_TxConfirmation</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_11/source/application/CanNm_ConTest_11.c</sourcefile>
      <sourceline>1737</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify at successful transmission of a Network Management PDU the
    CanNm module restart the NM-Timeout Timer if PDU tranmission ability
    is enabled (call of &lt;function&gt;CanNm_TxConfirmation()&lt;/function&gt;).
  
Test Object: None.
Test Precondition: None.
Test Execution: 
    01: Initialize CanNm.
    02: Request the network.
    03: Check that the current state is Repeat Message State.
    04: Wait until Repeat Message Timer expires.
    05: Check that the current state is Normal Operation State.
    06: Simulate TxConfirmation.
    07: Release the network.
    08: Check that the current state is Ready Sleep State.
    09: Wait until NM-Timeout timer almoast expires
    10: Check the current state is Ready Sleep state
    11: Wait until NM-Timeout timer expires
    12: VP(CanNm.EB.Dsn.StateDynamics.Internal_Transition_NETWORK_MODE_3)
        - Check the current state is Prepare Bus Sleep Mode
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.Internal_Transition_NETWORK_MODE_3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1445</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1531</internalId></specobject>
    <specobject>
      <id>TC_CANNM_MAX_EIRA_SIZE</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_11/source/application/CanNm_ConTest_11.c</sourcefile>
      <sourceline>1864</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    The test should prove that in case the number of partial networks at postbuild time
    is different than at precompile time and PN info is simulated for a partial network
    which did not existed at precompile time PduR_CanNmRxIndication is called
    after PnResetTime.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Prepare modified postbuild data
    02: Initialize module
    03: Simulate Rx data with partial network information
    04: Check that PduR_CanNmRxIndication is called
    05: VP(CanNm.EB_Ref.SWS_CanNm_00432.3):
        - Check that after expiration of PnResetTime
        PduR_CanNmRxIndication is called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00432.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>451</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1532</internalId></specobject>
    <specobject>
      <id>TC_CANNM_ReEnterNetworkMode</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_11/source/application/CanNm_ConTest_11.c</sourcefile>
      <sourceline>1947</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test shall prove that in case current state is repeat message state
    and parameter CanNmPnHandleMultipleNetworkRequests is set to true
    and network is requested again,
    state change notification is called only if current state differs from previous state.
  
Test Object: None.
Test Precondition: 
    CanNmPnHandleMultipleNetworkRequests is set to true
  
Test Execution: 
    01: Initialize stubs
    02: Call network request
    03: VP(CanNm.SWS_CanNm_00166)
        - Check that state change notification has been called
    04: Check that network mode has been called
    05: Check the current state is repeat message state
    06: Re request the network
    07: - Check that state change notification has not been called
          since previous state is equal to current state
    08: Check that network mode is called
    09: Check the current state is Network Mode
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00166</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1533</internalId></specobject>
    <specobject>
      <id>TC_CANNM_ReEnterNetworkModeActiveWakeupBit</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_11/source/application/CanNm_ConTest_11.c</sourcefile>
      <sourceline>2045</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test shall prove that in case the channel state machine
    is in network mode because of a passive startup,
    and parameter CanNmPnHandleMultipleNetworkRequests is set to true
    and CanNmActiveWakeupBitEnabled is set to true
    and network is requested, the network mode is re-entered
    without setting the active wakeup bit.
  
Test Object: None.
Test Precondition: 
    CanNmPnHandleMultipleNetworkRequests is set to true.
    CanNmActiveWakeupBitEnabled is set to true.
  
Test Execution: 
    01: Initialize stubs and module
    02: Call passive startup
    03: Check current state is Repeat Message State
    04: Wait until a message is sent on the bus
    05: Check that message has been sent on the bus and active wakeup bit is not set
    06: Wait until state machine enters ready sleep state
    07: Check state machine entered ready sleep state
    08: Request the network
    09: Check state machine re-entered network mode
    10: Wait until first message is sent
    11: VP(CanNm.ECUC_CanNm_00084,
           CanNm.EB_Ref.SWS_CanNm_00401.1,
           CanNm.EB_Ref.SWS_CanNm_00401.2)
        - Check that active wakeup bit is not set since
        network mode is not entered from BusSleep or PrepareBusSleep.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00084</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>360</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00401.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>454</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00401.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>455</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1534</internalId></specobject>
    <specobject>
      <id>TC_CANNM_CanNm_NetworkGwEraRequest_ActiveWakeupBit_BusSleepMode</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_11/source/application/CanNm_ConTest_11.c</sourcefile>
      <sourceline>2180</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   Test should prove that in case network mode is entered from BusSleepMode due to CanNm_NetworkGwEraRequest
   active wakeup bit is not set and immediate message is sent.
  
Test Object: None.
Test Precondition: 
    CanNmActiveWakeupBitEnabled is set to true.
    CanNmImmediateNmTransmissions &gt; 1
  
Test Execution: 
    01: Initialize stubs and module
    02: Call CanNm_NetworkGwEraRequest
    03: Wait until a message is sent on the bus
    04: Check current state is Repeat Message State
    05: VP(CanNm.EB.CanNm_NetworkGwEraRequest.ActiveWakeupBit.BusSleepMode,
           CanNm.EB.CanNm_NetworkGwEraRequest.CanNmImmediateNmTransmissions.BusSleepMode)
         - Check that message has been sent on the bus and active wakeup bit is not set
    06: Wait until a message is sent on the bus
    07: Check that message has been sent on the bus and active wakeup bit is not set
  
Test Input: 
    Call of CanNm_NetworkGwEraRequest
  
Test Output: 
    Active wakeup Bit is not set
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNm_NetworkGwEraRequest.ActiveWakeupBit.BusSleepMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>583</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNm_NetworkGwEraRequest.CanNmImmediateNmTransmissions.BusSleepMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>585</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.NET_REQSTATUS_CHANGED_BUS_SLEEP_MODE_NetworkGwEraRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1423</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1535</internalId></specobject>
    <specobject>
      <id>TC_CANNM_CanNm_NetworkGwEraRequest_ActiveWakeupBit_PrepareBusSleepMode</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_11/source/application/CanNm_ConTest_11.c</sourcefile>
      <sourceline>2267</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   Test should prove that in case network mode is entered from PrepareBusSleepMode due to CanNm_NetworkGwEraRequest
   active wakeup bit is not set and immediate message is sent.
  
Test Object: None.
Test Precondition: 
    CanNmActiveWakeupBitEnabled is set to true.
    CanNmImmediateNmTransmissions &gt; 1
  
Test Execution: 
    01: Initialize stubs and module
    02: Call CanNm_PassiveStartUp
    03: Wait until state machine enters Prepare Bus Sleep Mode
    04: Check current state is Repeat Message State
    05: Call CanNm_NetworkGwEraRequest
    06: Wait until a message is sent on the bus
    07: VP(CanNm.EB.CanNm_NetworkGwEraRequest.ActiveWakeupBit.PrepareBusSleepMode,
           CanNm.EB.CanNm_NetworkGwEraRequest.CanNmImmediateNmTransmissions.PrepareBusSleepMode)
         - Check that message has been sent on the bus and active wakeup bit is not set
  
Test Input: 
    Call of CanNm_NetworkGwEraRequest in PrepareBusSleepMode
  
Test Output: 
    Active wakeup Bit is not set
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNm_NetworkGwEraRequest.ActiveWakeupBit.PrepareBusSleepMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>584</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNm_NetworkGwEraRequest.CanNmImmediateNmTransmissions.PrepareBusSleepMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>586</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1536</internalId></specobject>
    <specobject>
      <id>TC_CANNM_PassiveStartup_NetworkRequest_Sequence_ActiveWakeupBit_BusSleepMode</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_11/source/application/CanNm_ConTest_11.c</sourcefile>
      <sourceline>2359</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
   Test should prove that in case network mode is entered from BusSleepMode due to passive startup, network request sequence
   active wakeup bit is not set and immediate message is sent.
  
Test Object: None.
Test Precondition: 
    CanNmActiveWakeupBitEnabled is set to true.
    CanNmImmediateNmTransmissions &gt; 1
  
Test Execution: 
    01: Initialize stubs and module
    02: Call Passive Startup, Network request sequence
    03: Wait until a message is sent on the bus
    04: Check current state is Repeat Message State
    05: VP(CanNm.EB.PassiveStartup.NetworkRequest.Sequence.ActiveWakeupBit.BusSleepMode,
           CanNm.EB.PassiveStartup.NetworkRequest.Sequence.CanNmImmediateNmTransmissions.BusSleepMode)
         - Check that message has been sent on the bus and active wakeup bit is not set
  
Test Input: 
    Call of CanNm_PassiveStartUp
    Call of CanNm_NetworkRequest
  
Test Output: 
    Active wakeup Bit is not set
  </description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.PassiveStartup.NetworkRequest.Sequence.ActiveWakeupBit.BusSleepMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>588</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.PassiveStartup.NetworkRequest.Sequence.CanNmImmediateNmTransmissions.BusSleepMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>590</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1537</internalId></specobject>
    <specobject>
      <id>TC_CANNM_PassiveStartup_NetworkRequest_Sequence_ActiveWakeupBit_PrepareBusSleepMode</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_11/source/application/CanNm_ConTest_11.c</sourcefile>
      <sourceline>2438</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
   Test should prove that in case network mode is entered from PrepareBusSleepMode due to passive startup, network request sequence
   active wakeup bit is not set and immediate message is sent.
  
Test Object: None.
Test Precondition: 
    CanNmActiveWakeupBitEnabled is set to true.
    CanNmImmediateNmTransmissions &gt; 1
  
Test Execution: 
    01: Initialize stubs and module
    02: Call CanNm_PassiveStartUp
    03: Wait until state machine enters Prepare Bus Sleep Mode
    04: Check current state is Repeat Message State
    05: Call Passive Startup, Network request sequence
    06: Wait until a message is sent on the bus
    07: VP(CanNm.EB.PassiveStartup.NetworkRequest.Sequence.ActiveWakeupBit.PrepareBusSleepMode,
           CanNm.EB.PassiveStartup.NetworkRequest.Sequence.CanNmImmediateNmTransmissions.PrepareBusSleepMode)
         - Check that message has been sent on the bus and active wakeup bit is not set
  
Test Input: 
    Call of CanNm_PassiveStartUp and
    Call of CanNm_NetworkRequest
    in PrepareBusSleepMode state
  
Test Output: 
    Active wakeup Bit is not set
  </description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.PassiveStartup.NetworkRequest.Sequence.ActiveWakeupBit.PrepareBusSleepMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>589</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.PassiveStartup.NetworkRequest.Sequence.CanNmImmediateNmTransmissions.PrepareBusSleepMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>591</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1538</internalId></specobject>
    <specobject>
      <id>TC_CANNM_CanNm_NetworkGwEraRequest_NetworkRequest</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_11/source/application/CanNm_ConTest_11.c</sourcefile>
      <sourceline>2534</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   Test should prove that in case network mode is entered from BusSleepMode due to
   CanNm_NetworkGwEraRequest, the network got to have the state as requested.
  
Test Object: None.
Test Precondition: 
    Passive mode has to be set to false
  
Test Execution: 
    01: Initialize stubs and module
    02: Call CanNm_NetworkGwEraRequest
    03: Wait until state machine enters Normal Operation State
    04: VP(CanNm.EB.CanNm_NetworkGwEraRequest,
           CanNm.EB.CanNm_NetworkGwEraRequest.NetworkRequest)
        - Check that the state is normal operation
  
Test Input: 
    Call of CanNm_NetworkGwEraRequest
  
Test Output: 
   State Machine goes to Normal operation state
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNm_NetworkGwEraRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>581</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNm_NetworkGwEraRequest.NetworkRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>582</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1539</internalId></specobject>
    <specobject>
      <id>TC_CANNM_ActiveWakeupBit_Sequence_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_11/source/application/CanNm_ConTest_11.c</sourcefile>
      <sourceline>2612</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   Test should prove that the Active wakeup is correctly set based on a defined sequence.
  
Test Object: None.
Test Precondition: 
    Passive mode has to be set to false
  
Test Execution: 
    01: Initialize module
    02: Set sequence
        CanNm_PassiveStartUp
        CanNm_NetworkRelease
        CanNm_NetworkRequest
    03: Check that State Machine is In Repeat Message state
    04: VP(CanNm.EB_Ref.SWS_CanNm_00401.1)
        - Check active wakeup bit is not set
  
Test Input: 
    Call of CanNm_PassiveStartUp
    Call of CanNm_NetworkRelease
    Call of CanNm_NetworkRequest
  
Test Output: 
    Active wakeup Bit is not set
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00401.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>454</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1540</internalId></specobject>
    <specobject>
      <id>TC_CANNM_ActiveWakeupBit_Sequence_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_11/source/application/CanNm_ConTest_11.c</sourcefile>
      <sourceline>2689</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   Test should prove that the Active wakeup is correctly set based on a defined sequence.
  
Test Object: None.
Test Precondition: 
    Passive mode has to be set to false
  
Test Execution: 
    01: Initialize module
    02: Set sequence
        CanNm_NetworkRequest
        CanNm_NetworkRelease
        CanNm_PassiveStartUp
        CanNm_NetworkRequest
    03: Check that State Machine is In Repeat Message state
    04: VP(CanNm.EB_Ref.SWS_CanNm_00401.1)
        - Check active wakeup bit is not set
  
Test Input: 
    Call of CanNm_NetworkRequest
    Call of CanNm_NetworkRelease
    Call of CanNm_PassiveStartUp
    Call of CanNm_NetworkRequest
  
Test Output: 
    Active wakeup Bit is not set
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00401.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>454</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1541</internalId></specobject>
    <specobject>
      <id>TC_CANNM_ActiveWakeupBit_Sequence_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_11/source/application/CanNm_ConTest_11.c</sourcefile>
      <sourceline>2768</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   Test should prove that the Active wakeup is correctly set based on a defined sequence.
  
Test Object: None.
Test Precondition: 
    Passive mode has to be set to false
  
Test Execution: 
    01: Initialize module
    02: Set sequence
        CanNm_PassiveStartUp
        CanNm_NetworkGwEraRequest
    03: Check that State Machine is In Repeat Message state
    04: VP(CanNm.EB_Ref.SWS_CanNm_00401.1)
        - Check active wakeup bit is not set
  
Test Input: 
    Call of CanNm_PassiveStartUp
    Call of CanNm_NetworkGwEraRequest
  
Test Output: 
    Active wakeup Bit is not set
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00401.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>454</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1542</internalId></specobject>
    <specobject>
      <id>TC_CANNM_ActiveWakeupBit_Sequence_4</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_11/source/application/CanNm_ConTest_11.c</sourcefile>
      <sourceline>2842</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   Test should prove that the Active wakeup is correctly set based on a defined sequence.
  
Test Object: None.
Test Precondition: 
    Passive mode has to be set to false
  
Test Execution: 
    01: Initialize module
    02: Set sequence
        CanNm_NetworkGwEraRequest
        CanNm_NetworkRelease
        CanNm_PassiveStartUp
    03: Check that State Machine is In Repeat Message state
    04: VP(CanNm.EB_Ref.SWS_CanNm_00401.1)
        - Check active wakeup bit is not set
  
Test Input: 
    Call of CanNm_NetworkGwEraRequest
    Call of CanNm_NetworkRelease
    Call of CanNm_PassiveStartUp
  
Test Output: 
    Active wakeup Bit is not set
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00401.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>454</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1543</internalId></specobject>
    <specobject>
      <id>TC_CANNM_ActiveWakeupBit_Sequence_5</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_11/source/application/CanNm_ConTest_11.c</sourcefile>
      <sourceline>2918</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   Test should prove that the Active wakeup is correctly set based on a defined sequence.
  
Test Object: None.
Test Precondition: 
    Passive mode has to be set to false
  
Test Execution: 
    01: Initialize module
    02: Set sequence
        CanNm_NetworkRequest
        CanNm_NetworkGwEraRequest
    03: Check that State Machine is In Repeat Message state
    04: VP(CanNm.EB_Ref.SWS_CanNm_00401.1)
        - Check active wakeup bit set
  
Test Input: 
    Call of CanNm_NetworkRequest
    Call of CanNm_NetworkGwEraRequest
  
Test Output: 
    Active wakeup Bit is set
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00401.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>454</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1544</internalId></specobject>
    <specobject>
      <id>TC_CANNM_ActiveWakeupBit_Sequence_6</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_11/source/application/CanNm_ConTest_11.c</sourcefile>
      <sourceline>2991</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   Test should prove that the Active wakeup is correctly set based on a defined sequence.
  
Test Object: None.
Test Precondition: 
    Passive mode has to be set to false
  
Test Execution: 
    01: Initialize module
    02: Set sequence
        CanNm_NetworkRequest
        CanNm_PassiveStartUp
    03: Check that State Machine is In Repeat Message state
    04: VP(CanNm.EB_Ref.SWS_CanNm_00401.1)
        - Check active wakeup bit set
  
Test Input: 
    Call of CanNm_NetworkRequest
    Call of CanNm_PassiveStartUp
  
Test Output: 
    Active wakeup Bit is set
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00401.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>454</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1545</internalId></specobject>
    <specobject>
      <id>TC_CANNM_ActiveWakeupBit_Sequence_7</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_11/source/application/CanNm_ConTest_11.c</sourcefile>
      <sourceline>3064</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   Test should prove that the Active wakeup is correctly set based on a defined sequence.
  
Test Object: None.
Test Precondition: 
    Passive mode has to be set to false
  
Test Execution: 
    01: Initialize module
    02: Set sequence
        CanNm_NetworkRequest
        CanNm_PassiveStartUp
    03: Check that State Machine is In Repeat Message state
    04: VP(CanNm.EB_Ref.SWS_CanNm_00401.1)
        - Check active wakeup bit set
  
Test Input: 
    Call of CanNm_NetworkRequest
    Call of CanNm_PassiveStartUp
  
Test Output: 
    Active wakeup Bit is not set
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00401.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>454</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1546</internalId></specobject>
    <specobject>
      <id>TC_CANNM_StateChangeNotification_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_11/source/application/CanNm_ConTest_11.c</sourcefile>
      <sourceline>3139</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verify that state change notifications are called after updating the
    internal variables holding the current state.
    Test shall prove that state change notification is called only if current
    state differs from previous state.
  
Test Object: None.
Test Precondition: 
    NmStateChangeIndEnabled is set to true
  
Test Execution: 
    01: Initialize stubs;
    02: Call network request;
    03: VP(CanNm.EB.StateChangeNotification)
        - Check that state change notification has been called;
    04: Check the current state is repeat message state;
    05: Call main function;
    06: VP(CanNm.EB.StateChangeNotification)
        - Check that state change notification has been called;
    07: Check the current state is normal operation state;
    08: Call main function;
    09: Call network release;
    10: VP(CanNm.EB.StateChangeNotification)
        - Check that state change notification has been called;
    11: Check the current state is ready sleep state;
    12: Call main function;
    13: VP(CanNm.EB.StateChangeNotification)
        - Check that state change notification has been called;
    14: Check the current state is prepare bus sleep state;
    15: Call main function;
    16: VP(CanNm.EB.StateChangeNotification)
        - Check that state change notification has been called;
    17: Check the current state is prepare bus sleep state;
  
Test Input: 
    NmStateChangeIndEnabled is true;
  
Test Output: 
    When the current state is read in the context of the state change notification,
    it shall report the current state of the state machine.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.StateChangeNotification</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>596</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1547</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TC_CANNM_PnEiraCalcEnabled_PnEraCalcEnabled_FALSE</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_12/source/application/CanNm_ConTest_12.c</sourcefile>
      <sourceline>51</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify CanNm module skip the aggregation of external and internal PN
    requests information if CanNmPnEiraCalcEnabled or CanNmPnEraCalcEnabled are FALSE.
  
Test Object: None.
Test Precondition: 
    CanNmPnEnabled == true
    CanNmPnEiraCalcEnabled = FALSE
    CanNmPnEraCalcEnabled = FALSE
  
Test Execution: 
    01: Initialize stubs.
    02: Invoke CanNm_Init().
    03: Execute the following for each of the configured channel.
    04: Call CanNm_ConfirmPnAvailability to enable PN filtering.
    05: Call CanNm_RxIndication() where some PN info bits which are
        applicable to this ECU are set.
    06: Call main function once.
    07: VP (CanNm.ASR403.CANNM422, CanNm.ASR403.CANNM433):
        - PduR_CanNmRxIndication is not called.
  
Test Input: None.
Test Output: 
    CanNm must ignore EIRA/ERA.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM422</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM433</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>70</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1548</internalId></specobject>
    <specobject>
      <id>TC_CANNM_NmMessageTxTimeout</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_12/source/application/CanNm_ConTest_12.c</sourcefile>
      <sourceline>147</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: TxRX Test
Test Description: 
    - Verify that when the NM Message Timeout occurs, the CanNm module invokes
      Nm_TxTimeoutException() once.
    - Verify that If CanNmPnEnabled is enabled for a channel, the function
      CanSM_TxTimeoutException()) is invoked once when the NM Message Tx Timeout
      Timer expires.
  
Test Object: None.
Test Precondition: 
    - Important test configuration details:
      - "CanNmPassiveModeEnabled" is set to "false".
      - At least one channel with CanNmPnEnabled set to "true".
      - "CanNmImmediateNmTransmissions" is set to "0"  for all channels
        Reason: Important for timing assumptions as the Nm / CanSM shall be
        notified after CanNmMsgCycleOffset plus CanNmTimeoutTime.
    - CanNm is initialized.
  
Test Execution: 
    01: Prepare preconditions
        - Initialize CanNm module.
    02: For each configured CanNm channel execute steps 03 - 16.
    03: Disable the invocation of CanNm_TxConfirmation() in CanIf_Transmit()
        stub.
    04: Request the network for the channel and execute the main function
        once to process the request.
    05: Call CanNm_MainFunction() in a loop until CanNm Message Cycle
        Offset time elapses.
    06: Call CanNm_MainFunction() in a loop until one more cycle will
        cause the Message Timeout time to elapse.
    07: VP (CanNm.EB_Ref.CANNM064):
        - Nm_TxTimeoutException() is not invoked.
        - CanSM_TxTimeoutException() is not invoked.
    08: Call CanNm_MainFunction() once so that the Message Timeout time elapses.
    09: VP (CanNm.EB_Ref.SWS_CanNm_00066.1, CanNm.SWS_CanNm_00325, CanNm.ASR403.CANNM030_Conf, CanNm.ASR403.CANNM446),
           (CanNm.EB.Dsn.StateDynamics.Internal_Transition_SENDING_SUB_MODE_1):
        - Nm_TxTimeoutException() is invoked (i.e., the NM Message
          Tx Timeout was started with CANNM_MSG_TIMEOUT_TIME after step 04).
        - CanSM_TxTimeoutException is invoked once if CanNmPnEnabled is enabled
          for the channel.
    10: Enable the invocation of CanNm_TxConfirmation() in the stub of
        CanIf_Transmit().
    11: Call CanNm_MainFunction() in a loop until CanNm Message Timeout
        time elapses again.
    12: VP (SWS_CanNm_00065):
        - Neither Nm_TxTimeoutException() nor CanSM_TxTimeoutException()
          is invoked (i.e., the NM Message Tx Timeout Timer was stopped
          when CanNm_TxConfirmation is called).
    13: Disable the invocation of CanNm_TxConfirmation() in the stub of
        CanIf_Transmit().
    14: Call CanNm_Init() again to re-initialize the module.
    15: Call CanNm_MainFunction() in a loop until CanNm Message Cycle
        Offset and remaining CanNm Message Timeout time elapses.
    16: VP (CanNm.ASR403.CANNM061):
        - Neither Nm_TxTimeoutException() or CanSM_TxTimeoutException()
          is invoked (i.e., the NM Message Tx Timeout Timer was stopped
          when CanNm is re-initialized).
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM030_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>3</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM061</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM064</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>467</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00065</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>492</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00066.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>490</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00325</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>304</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM446</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.Internal_Transition_SENDING_SUB_MODE_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1448</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1549</internalId></specobject>
    <specobject>
      <id>TC_CANNM_TxTimeoutCanIfTransmitFails</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_12/source/application/CanNm_ConTest_12.c</sourcefile>
      <sourceline>309</sourceline>
      <version>1</version>
      <description>Test Synopsis: TX / RX test
Test Description: 
    - Verify that when CanIf_Transmit() call fails and if the NM Message
      timeout occurs, the CanNm module reports TX timeout exception by
      invoking
      - Nm_TxTimeoutException() once
      - CanSM_TxTimeoutException() once if CanNmPnEnabled is enabled for a
        network channel
  
Test Object: None.
Test Precondition: 
    - Important test configuration details:
      - "CanNmPassiveModeEnabled" is set to FALSE.
      - "CanNmImmediateNmTransmissions" is set to "0"  for all channels
        Reason: Important for timing assumptions as the Nm / CanSM shall be
        notified after CanNmMsgCycleOffset plus CanNmTimeoutTime.
      - "CanNmPnEnabled" is set to TRUE for CanNm channel "Channel1"
    - CanNm is initialized.
  
Test Execution: 
    01: Prepare preconditions
        - Initialize CanNm module.
    02: Set the return value of CanIf_Transmit() to E_NOT_OK. Also disable the
        invocation of CanNm_TxConfirmation() in the stub of CanIf_Transmit().
    03: Request the network of CanNm channel "Channel1" for which
        CanNmPnEnabled is set to TRUE and execute the main function once
        to process the request.
    04: Call CanNm_MainFunction() in a loop until CanNm Message Cycle
        Offset Time elapses (so that the first NM Message is transmitted).
    05: CanIf_Transmit() is invoked.
    06: Call CanNm_MainFunction() for Message Cycle Time number of times
    07: Nm_TxTimeoutException() is not invoked.
        CanSM_TxTimeoutException() is not invoked.
    08: Set the return value of CanIf_Transmit() to E_OK.
    09: Call mainfunction for MessageCycleTime + MessageTimeoutTime + 1 times.
    10: VP (CanNm.EB.TXTimeout.TransmissionFails, CanNm.EB_Ref.CANNM064, CanNm.EB_Ref.SWS_CanNm_00066.1, CanNm.SWS_CanNm_00325, CanNm.ASR403.CANNM446,
            CanNm.ASR403.CANNM030_Conf):
        - Nm_TxTimeoutException() is invoked.
        - CanSM_TxTimeoutException is invoked.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM030_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>3</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM064</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>467</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00066.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>490</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00325</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>304</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM446</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1550</internalId></specobject>
    <specobject>
      <id>TC_CANNM_NODEID_CALLBACK_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_12/source/application/CanNm_ConTest_12.c</sourcefile>
      <sourceline>421</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Verify that, If the parameter 'CanNmNodeIdCallback' is enabled then, API
  'CanNm_GetLocalNodeIdentifier()' shall invoke the callback and return
  the value provided by the callback.

Test Object: None.
Test Precondition: 
  CanNmNodeIdCallback is enabled

Test Execution: 
  01: Intialize the stubs.
  02: Invoke CanNm_Init().
  03: For every configured CanNm channel execute following:
  04: Clear CanNm NodeId callback stub count and set the callback return value.
  05: Invoke CanNm_GetLocalNodeIdentifier().
  06: Check if the value modified by CanNm_GetLocalNodeIdentifier
      is the same as the one returned by the callback.
  07: VP (CanNm.EB.CanNmNodeIdCallback.1):
      Check if CanNm NodeId Callback was invoked.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmNodeIdCallback.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>548</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1551</internalId></specobject>
    <specobject>
      <id>TC_CANNM_NODEID_CALLBACK_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_12/source/application/CanNm_ConTest_12.c</sourcefile>
      <sourceline>493</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Verify that, When a PDU is transmitted by CanNm, the callback is invoked and
  the value provided by the callback shall be set in the position of
  Node Id in the Tx Pdu, if the parameter 'CanNmNodeIdCallback' is enabled.

Test Object: None.
Test Precondition: 
  CanNmNodeIdCallback is enabled

Test Execution: 
  01: Intialize the stubs.
  02: Invoke CanNm_Init().
  03: For every configured CanNm channel execute following:
  04: Clear CanIf_Transmit stub count.
  05: Call CanNm_NetworkRequest for the selected channel.
  06: Invoke Main Function in a loop until "Message Cycle Offset + 1" expires.
  07: Verify that CanIf_Transmit is invoked.
  08: VP (CanNm.EB.CanNmNodeIdCallback.2):
      CanIf_Transmit buffer holds the value at node id position is same
      as return value of CanNm Node Id callback function.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmNodeIdCallback.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>549</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1552</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_ImmediateNmTrans_MsgCycOffZero</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_13/source/application/CanNm_ConTest_13.c</sourcefile>
      <sourceline>59</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that after the transmission of immediate NM messages, NM messages
    are transmitted with the cycle time configured by 'CanNmMsgCycleTime'.
  
Test Object: None.
Test Precondition: 
    Important test configuration details:
      - CanNmImmediateNmTransmissions &gt; 1
      - CanNmMsgCycleOffset = 0
      - CanNmPassiveModeEnabled == false
      - CanNmImmediateRestartEnabled == false
    Module state:
      - CanNm is initialized
      - Dependent stubs are initialzied
  
Test Execution: 
    01: Prepare test case preconditions
    02: Execute steps 03-12 for all the configured channels
    03: Call CanNm_NetworkRequest()
    04: Invoke CanNm_MainFunction() once
    05: Ensure that CanNm has entered Repeat Message State (= RMS) and first
        Nm Message is sent immediately after entering RMS.
    06: Call CanNm_MainFunction() until 'Nm Immediate Cycle time' elapses
    07: VP(CanNm.SWS_CanNm_00335, CanNm.ECUC_CanNm_00056):
        - Ensure that one Nm message is sent
    08: Repeat the steps 06 and 07 until all immediate messages are
        transmitted.
    09: Call CanNm_MainFunction() until 'CanNmMsgCycleTime' expires
    10: One Nm message is transmitted
    11: Invoke Main Function in a loop until 'Message Cycle Time' elapses
    12: One Nm message is transmitted.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00335</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>314</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00056</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>112</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1553</internalId></specobject>
    <specobject>
      <id>TS_CanNm_ImmediateNmTrans_MsgCycOffZero_DisableEnableComm</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_13/source/application/CanNm_ConTest_13.c</sourcefile>
      <sourceline>198</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that a call to CanNm_DisableCommunication then CanNm_EnableCommunication while an
    immediate message is transmitted, sets the next immediate message transmission after
    immediate message cycle time.
  
Test Object: None.
Test Precondition: 
    CanNmImmediateNmTransmissions &gt; 1
    CanNmMsgCycleOffset = 0
    CanNmPassiveModeEnabled == false
  
Test Execution: 
    01: Intialize the module
        Set CanIf_Transmit return value to E_OK
    02: Check that the current state is NM_STATE_BUS_SLEEP
    03: Request the network
    04: Call the main function to trigger the transition to Repeat Message State
    05: Check that the current state is REPEAT_MESSAGE, and  one CanIf_Transmit was called, and
        then reset CanIf_Transmit stub counter
    06: Call main function until the immediate message cycle timer is about to expire
    07: Simulate calls to CanNm_DisableCommunication then CanNm_EnableCommunication while
        transmitting an immediate message
    08: Call main function once to process the transmission
    09: Check CanIf_Transmit stub counter is 1, and reset it
    10: Call main function until the immediate message cycle timer expires
    11: VP(CanNm.ECUC_CanNm_00056)
        Check CanIf_Transmit stub counter is 1, and reset it
  
Test Input: 
    Disable Enable commuication while an immediate message transition occurs
  
Test Output: 
    Count of message tranmissions
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00056</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>112</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1554</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_Set_PduNid</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_14/source/application/CanNm_ConTest_14.c</sourcefile>
      <sourceline>44</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: PduDataTests
Test Description: 
    Verify that Node ID is set on the current position.
  
Test Object: None.
Test Precondition: 
    - Important test configuration details:
      - 'CanNmPassiveModeEnabled' is set to "false".
      - 'CanNmNodeDetectionEnabled' is set to "true".
      - Channel0 is configured with "CanNmPduNidPosition = CANNM_PDU_BYTE_0"
      - Channel1 is configured with "CanNmPduNidPosition = CANNM_PDU_BYTE_1"
  
Test Execution: 
    01: Initialize CanNm and dependent module stubs
    02: For each configured CanNm Channel, execute steps 03-05
    03: Goto Repeat Message state
    04: Call main function until MsgCycleOffset time elapses
    05: VP (CanNm.SWS_CanNm_00013,CanNm.ECUC_CanNm_00025):
        - CanIf_Transmit() is invoked
        - Node ID is set in the transmitted PDU only for the channel where
          node ID is specified.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>135</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00025</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>90</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1555</internalId></specobject>
    <specobject>
      <id>TS_CanNm_14001</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_14/source/application/CanNm_ConTest_14.c</sourcefile>
      <sourceline>128</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: MessageTimoutTimeTest1
Test Description: 
    Verify that in case CanNmImmediateRestartEnabled is set to true and
    the state machine is in Prepare Bus Sleep Mode and the network is requested
    when calling the CanIf_Transmit, the TX Timeout Timer is also started.
  
Test Object: None.
Test Precondition: 
    - Important test configuration details:
      - 'CanNmPassiveModeEnabled' is set to "false".
      - 'CanNmImmediateTxconfEnabled' is set to "false".
      - 'CanNmImmediateRestartEnabled' is set to "true".
  
Test Execution: 
    01: Initialize Stubs, CanNm.
    02: Request a passive start-up.
    03: Wait until State Machine goes into Prepare Bus Sleep mode.
    04: Check that the State Machine got into Prepare Bus Sleep mode.
    05: Reset
        - CanIf_Transmit_Stub.Count
        - Nm_TxTimeoutException_Stub.Count
    06: Request the network.
        CanIf_Transmit will be triggered when going from
        Prepare Bus Sleep Mode to Network Mode
        since Immediate restart is enabled and
        the network is requested.
    07: Wait a main function cycle.
        Message Tx Timeout Timer is started.
    08: VP (CanNm.SWS_CanNm_00122)
        Check that CanIf_Transmit is called.
    09: Wait until Message Tx Timeout Timer almost expires (1 cycle left).
    10: Check that Nm_TxTimeoutException is not called yet.
    11: Wait the last cycle from Message Tx Timeout Timer.
    12: VP (CanNm.EB_Ref.CANNM064, CanNm.EB_Ref.SWS_CanNm_00066.1)
        Check that after Message Tx Timeout Timer expired Nm_TxTimeoutException is called.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>190</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM064</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>467</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00066.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>490</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1556</internalId></specobject>
    <specobject>
      <id>TS_CanNm_14002</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_14/source/application/CanNm_ConTest_14.c</sourcefile>
      <sourceline>232</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: MessageTimoutTimeTest2
Test Description: 
    Verify that in case CanNmImmediateRestartEnabled is set to true and
    the state machine is in Prepare Bus Sleep Mode and the network is requested
    when calling the CanIf_Transmit, the TX Timeout Timer is not started if
    CanIf_Transmit returns E_NOT_OK.
  
Test Object: None.
Test Precondition: 
    - Important test configuration details:
      - 'CanNmPassiveModeEnabled' is set to "false".
      - 'CanNmImmediateTxconfEnabled' is set to "false".
      - 'CanNmImmediateRestartEnabled' is set to "true".
  
Test Execution: 
    01: Initialize Stubs, CanNm.
    02: Request a passive start-up.
    03: Wait until State Machine goes into Prepare Bus Sleep mode.
    04: Check that the State Machine got into Prepare Bus Sleep mode.
    05: Reset
        - CanIf_Transmit_Stub.Count
        - Nm_TxTimeoutException_Stub.Count
    06: Set CanIf_Transmit return value to E_NOT_OK.
    07: Request the network.
        CanIf_Transmit will be triggered when going from
        Prepare Bus Sleep Mode to Network Mode
        since Immediate restart is enabled and
        the network is requested.
    08: Wait a main function cycle.
        Message Tx Timeout Timer is not started
        since CanIf_Transmit returned false.
    09: VP (CanNm.SWS_CanNm_00122)
        Check that CanIf_Transmit is called.
    10: Wait until Message Tx Timeout Timer expires.
    11: Check that after Message Tx Timeout Timer expired Nm_TxTimeoutException is not called.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>190</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1557</internalId></specobject>
    <specobject>
      <id>TC_CANNM_Timers_Com_Disable4</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_14/source/application/CanNm_ConTest_14.c</sourcefile>
      <sourceline>332</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that the Message Cycle Timer won't be restarted
    with CanNmMsgReducedTime in case communication is disabled.
  
Test Object: None.
Test Precondition: 
    CanNmBusLoadReductionActive is set to true for channel 0
  
Test Execution: 
    01: Initialize CanNm
    02: Request the network
    03: Check that the state machine reached Repeat Message State
    04: Disable the Communication
    05: Wait until Repeat Message Timer expires
    06: Check that state machine reached Normal Operation State
    07: Simulate Rx indication
    08: Wait CanNmMsgReducedTime number of main function cycles
    09: Enable Communication
    10: VP(CanNm.EB_Ref.SWS_CanNm_00069)
        Check that CanIf_Transmit is never called
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00069</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>464</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1558</internalId></specobject>
    <specobject>
      <id>TC_CANNM_CanNm_NetworkGwEraRequest_CanNmImmediateRestartEnabled_PrepareBusSleepMode</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_14/source/application/CanNm_ConTest_14.c</sourcefile>
      <sourceline>439</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   Test should prove that in case network mode is entered from PrepareBusSleepMode due to CanNm_NetworkGwEraRequest
   active wakeup bit is not set and immediate restart message is sent.
  
Test Object: None.
Test Precondition: 
    CanNmActiveWakeupBitEnabled is set to true.
    CanNmImmediateRestartEnabled is set to true
  
Test Execution: 
    01: Initialize stubs and module
    02: Call CanNm_PassiveStartUp
    03: Wait until state machine enters Prepare Bus Sleep Mode
    04: Check current state is Repeat Message State
    05: Call CanNm_NetworkGwEraRequest
    06: Wait until a message is sent on the bus
    07: VP(CanNm.EB.CanNm_NetworkGwEraRequest.CanNmImmediateRestartEnabled.PrepareBusSleepMode)
         - Check that message has been sent on the bus and active wakeup bit is not set 
  
Test Input: 
    Call of CanNm_NetworkGwEraRequest in Prepare Bus Sleep Mode
  
Test Output: 
    Active wakeup bit is not set
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNm_NetworkGwEraRequest.CanNmImmediateRestartEnabled.PrepareBusSleepMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>587</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1559</internalId></specobject>
    <specobject>
      <id>TC_CANNM_PassiveStartup_NetworkRequest_Sequence_CanNmImmediateRestartEnabled_PrepareBusSleepMode</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_14/source/application/CanNm_ConTest_14.c</sourcefile>
      <sourceline>526</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
   Test should prove that in case network mode is entered from PrepareBusSleepMode due to passive startup, network request sequence
   active wakeup bit is not set and immediate message is sent.
  
Test Object: None.
Test Precondition: 
    CanNmActiveWakeupBitEnabled is set to true.
    CanNmImmediateRestartEnabled is set to true.
  
Test Execution: 
    01: Initialize stubs and module
    02: Call CanNm_PassiveStartUp
    03: Wait until state machine enters Prepare Bus Sleep Mode
    04: Check current state is Repeat Message State
    05: Call Passive Startup, Network request sequence
    06: Wait until a message is sent on the bus
    07: VP(CanNm.EB.PassiveStartup.NetworkRequest.Sequence.CanNmImmediateRestartEnabled.PrepareBusSleepMode)
         - Check that message has been sent on the bus and active wakeup bit is not set 
  
Test Input: 
    Call of CanNm_PassiveStartUp and
    Call of CanNm_NetworkRequest in Prepare Bus Sleep Mode
  
Test Output: 
    Active wakeup bit is not set
  </description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.PassiveStartup.NetworkRequest.Sequence.CanNmImmediateRestartEnabled.PrepareBusSleepMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>592</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1560</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_RepeatMessageTimeZeroPasiveStartup</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_15/source/application/CanNm_ConTest_15.c</sourcefile>
      <sourceline>40</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test checks that in case the RepeatMessageTime is configured 0
    and the state machine is in BusSleepMode and Passive Startup is requested
    the state machine goes in ReadySleepState after the next Mainfunction call.
    Mainfunction call.
  
Test Object: None.
Test Precondition: 
    - CanNmRepeatMessageTime = 0
  
Test Execution: 
    01: Initialize the CanNm module.
    02: Request a passive startup.
    03: Invoke MainFunction.
    04: VP: (CanNm.SWS_CanNm_00102)
     - Check if the CanNm is in Ready Sleep State.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00102</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>170</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1561</internalId></specobject>
    <specobject>
      <id>TS_CanNm_RepeatMessageTimeZeroActiveStartup</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_15/source/application/CanNm_ConTest_15.c</sourcefile>
      <sourceline>103</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test checks that in case the RepeatMessageTime is configured 0
    and the state machine is in BusSleepMode and the network is requested
    the state machine goes in NormalOperationState after the next Mainfunction call.
    Mainfunction call.
  
Test Object: None.
Test Precondition: 
    - CanNmRepeatMessageTime = 0
  
Test Execution: 
    01: Initialize the CanNm module.
    02: Request the network
    03: Invoke MainFunction
    04: VP: (CanNm.SWS_CanNm_00102)
     - Check if the CanNm is in Normal Operation State
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00102</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>170</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1562</internalId></specobject>
    <specobject>
      <id>TC_CANNM_CanIf_Not_Ok_8_6</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_15/source/application/CanNm_ConTest_15.c</sourcefile>
      <sourceline>163</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    The test covers the case when RMS timer is zero, CanNmRetryFirstMessageRequest is set to
    true, and the first messages are not transmitted (CanIf_Transmit returns E_NOT_OK).
    When RMS timer is zero the resend of the messages is done in Normal Operation State.
  
Test Object: None.
Test Precondition: 
    - CanNmRetryFirstMessageRequest == true
    - CanNmRepeatMessageTime = 0
  
Test Execution: 
    01: Intialize the module
        Set CanIf_Transmit return value to E_NOT_OK
    02: Check that the current state is NM_STATE_BUS_SLEEP
    03: Request the network
    04: Call the main function to trigger the transition to Normal Operation State
    05: Check that the current state is NM_STATE_NORMAL_OPERATION
    06: Call the main function 5 times
    07: VP (CanNm.EB.CanNmRetryFirstMessageRequestNormalOperationState)
        - Check if CanIf_Transmit() was called on each cycle and that the current
    08: Set the CanIf_Transmit return value to E_OK and call the main function
    09: VP (CanNm.EB.CanNmRetryFirstMessageRequest):
        - Call the main function 4 x messagecycletime
    10: Check that CanIf_Transmit is called 4 times
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmRetryFirstMessageRequest</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>520</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmRetryFirstMessageRequestNormalOperationState</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>522</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1563</internalId></specobject>
    <specobject>
      <id>TC_CANNM_CanIf_Not_Ok_8_7</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_15/source/application/CanNm_ConTest_15.c</sourcefile>
      <sourceline>259</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    The test covers the case when RMS timer is zero, CanNmRetryFirstMessageRequest is set to
    true, and the first messages are not transmitted (CanIf_Transmit returns E_NOT_OK).
    When RMS timer is zero the resend of the messages is done in Normal Operation State.
    The test tests when the flow is:
     - Normal Operation State
     - Ready Sleep State
     - Normal Operation State
  
Test Object: None.
Test Precondition: 
    - CanNmRetryFirstMessageRequest == true
    - CanNmRepeatMessageTime = 0
  
Test Execution: 
    01: Intialize the module
        Set CanIf_Transmit return value to E_NOT_OK
    02: Check that the current state is NM_STATE_BUS_SLEEP
    03: Request the network
    04: Call the main function to trigger the transition to Normal Operation State
    05: Check that the current state is NM_STATE_NORMAL_OPERATION
    06: Wait until Message Cycle Offset almoast expired
    07: Check that CanIf_Transmit has not been called yet
    08: Wait 5 mainfunction cycles
    09: VP (CanNm.EB.CanNmRetryFirstMessageRequest):
        - Check that CanIf_Transmit has been called 5 times
    10: Release the network
    11: Call the main function to trigger the transition to Ready Sleep State
    12: Check that the current state is NM_STATE_READY_SLEEP
    13: Wait 5 main function cycles
    14: Check that while in Ready Sleep State CanIf_Transmit has not been called
    15: Request the network
    16: Call the main function to trigger the transition to Ready Sleep State
    17: Check that the current state is NM_STATE_NORMAL_OPERATION
    18: Wait until Message Cycle Offset almoast expired
    19: Check That CanIf_Transmit has not been called yet
    20: Call the main function 5 times
    21: VP(CanNm.EB.CanNmRetryFirstMessageRequestReadySleepState_1)
      - Check that CanIf_Transmit has been called on each cycle
    22: Set the CanIf_Transmit return value to E_OK and call the main function
    23: Call the main function 4 x messagecycletime
    24: Check that CanIf_Transmit is called 4 times
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmRetryFirstMessageRequest</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>520</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmRetryFirstMessageRequestReadySleepState_1</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>523</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1564</internalId></specobject>
    <specobject>
      <id>TC_CANNM_CanIf_Not_Ok_8_8</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_15/source/application/CanNm_ConTest_15.c</sourcefile>
      <sourceline>412</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    The test covers the case when RMS timer is zero, CanNmRetryFirstMessageRequest is set to
    true, and the first messages are not transmitted (CanIf_Transmit returns E_NOT_OK).
    When RMS timer is zero the resend of the messages is done in Normal Operation State.
    The test tests when the flow is:
     - Ready Sleep State
     - Normal Operation State
  
Test Object: None.
Test Precondition: 
    - CanNmRetryFirstMessageRequest == true
    - CanNmRepeatMessageTime = 0
  
Test Execution: 
    01: Intialize the module
        Set CanIf_Transmit return value to E_NOT_OK
    02: Check that the current state is NM_STATE_BUS_SLEEP
    03: Do a passive wakeup
    04: Call the main function to trigger the transition to Ready Sleep State
    05: Check that the current state is NM_STATE_READY_SLEEP
    06: Call the main function 5 times
    07: Request the network
    08: Call the main function to trigger the transition to Normal Operation State
    09: Wait until Message Cycle Offset almoast expires
    10: Check that CanIf_Transmit has not been called yet
    11: Call the main function 5 times
    12: VP(CanNm.EB.CanNmRetryFirstMessageRequest),
          (CanNm.EB.CanNmRetryFirstMessageRequestReadySleepState_2)
    13: Set the CanIf_Transmit return value to E_OK and call the main function
    14: Call the main function 4 x messagecycletime
    15: Check that CanIf_Transmit is called 4 times
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmRetryFirstMessageRequest</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>520</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmRetryFirstMessageRequestReadySleepState_2</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>524</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1565</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TC_CANNM_SetUserData</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_16/source/application/CanNm_ConTest_16.c</sourcefile>
      <sourceline>44</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: PduDataTests
Test Description: 
  Verify the functionality of CanNm_SetUserData().

Test Object: None.
Test Precondition: 
  "CanNmPassiveModeEnabled" is set to "false".
  "CanNmUserDataEnabled" is set to "true".

Test Execution: 
  01: Invoke CanNm_Init().
  02: Call CanNm_NetworkRequest() in bus sleep mode and verify that it returns
     "E_OK".
  03: Call CanNm_MainFunction() so that the state changes to repeat message and
      check that state machine entered Repeat message state.
  04: Call CanNm_SetUserData() in repeat message state and verify that it
      returned E_OK.
  05: Call CanNm_MainFunction() in a loop until Message Cycle Offset time expires.
  06: Verify that CanIf_Transmit() is invoked.
  07: VP (CanNm.SWS_CanNm_00159, CanNm.ASR403.CANNM217):
      - The transmitted data is same as that set by CanNm_SetUserData().
  08: VP (CanNm.EB_Ref.SWS_CanNm_00401.1): Check that the Active Wakeup Bit is set in the CBV

Test Input: None.
Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00159</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM217</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00401.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>454</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1566</internalId></specobject>
    <specobject>
      <id>TC_CANNM_ImmediateTxConfirmationEnabled</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_16/source/application/CanNm_ConTest_16.c</sourcefile>
      <sourceline>152</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Verify that in case parameter CanNmImmediateTxconfEnabled is set to true
  CanNm timout timer is restarted on sucesfull message transmision.

Test Object: None.
Test Precondition: 
  "CanNmImmediateTxconfEnabled" is set to "true".

Test Execution: 
  01: Initialize the stub values  and CanNm
  02: Do a passive startup
  03: Call Mainfunction
  04: Check state machine is in Repeat Message State
  05: Call Mainfunction until Message Cycle Offset almoast expires
  06: Check that CanIf_Transmit is not yet called
  07: Call Mainfunction until Message Cycle Offset expires
  08: Check that CanIf_Transmit is called
  09: Call Mainfunction until Message Cycle Time almoast expires
  10: Check that CanIf_Transmit is not yet called
  11: Call Mainfunction until Message Cycle Time expires
  12: Check that CanIf_Transmit is called
  13: Call Mainfunction until Message Cycle Time almoast expires
  14: Check that CanIf_Transmit is not yet called
  15: Call Mainfunction until Message Cycle Time expires
  16: Check state machine is in Repeat Message State
  17: Call Mainfnction to leave Repeat Message State
  18: Check state machine is in Ready Sleep State
  19: Wait until CanNm timout timer almoast expires
  20: Check Current state is Ready Sleep State
  21: Wait until CanNm timeout timer expires
  22: VP(CanNm.EB_Ref.SWS_CanNm_00099.2)
      After the last message was send CanNm Timout time has to be waited
      until state machine leaves network mode

Test Input: None.
Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00099.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>466</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1567</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_DET_OFF_NotValidCfg</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_17/source/application/CanNm_ConTest_17.c</sourcefile>
      <sourceline>44</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    To test initialization of CanNm module if CanNm_IsValidConfig is not valid.
  
Test Object: None.
Test Precondition: 
   * CANNM_DEV_ERROR_DETECT should be FALSE.
  
Test Execution: 
    01: Invoke CanNm_Init()
    02: Call CanNm_MainFunction()
    03: VP (CanNm.EB.ImplicitUninitState, CanNm.EB.NotSuccessfulInitialization, CanNm.SWS_CanNm_00208, CanNm.SWS_CanNm_00223, CanNm.SWS_CanNm_00091):
        - Check after CanNm_Init if initialization is not received and if current state of module 
    is NM_STATE_UNINIT.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.ImplicitUninitState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>557</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.NotSuccessfulInitialization</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>558</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00208</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>241</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00223</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>253</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00091</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>386</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1568</internalId></specobject>
    <specobject>
      <id>TS_CanNm_DET_OFF_ValidCfg</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_17/source/application/CanNm_ConTest_17.c</sourcefile>
      <sourceline>101</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    To test initialization of CanNm module if CanNm_IsValidConfig is valid.
  
Test Object: None.
Test Precondition: 
   * CANNM_DEV_ERROR_DETECT should be FALSE.
  
Test Execution: 
    01: Invoke CanNm_Init()
    02: Call CanNm_MainFunction()
    03: VP (CanNm.EB.ImplicitUninitState, CanNm.SWS_CanNm_00141, CanNm.SWS_CanNm_00144, CanNm.SWS_CanNm_00208, CanNm.SWS_CanNm_00223, CanNm.SWS_CanNm_00091):
        - Check after CanNm_Init if initialization is received and current state of module is 
    NM_STATE_BUS_SLEEP.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.ImplicitUninitState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>557</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00141</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>202</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00144</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>204</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00208</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>241</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00223</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>253</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00091</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>386</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1569</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TC_CANNM_Immediates_ON</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_18/source/application/CanNm_ConTest_18.c</sourcefile>
      <sourceline>68</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that in case CanNmImmediateNmTransmissions is greater than zero
    the first message is sent just upon entering network mode
    The test also verifies that in case immediates are used the first message
    is sent after Network State Change notification is called.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Initialize stubs
    02: Initialize CanNm
    03: Request the network
    04: Call mainfunction
    05: Get the current state
    06: Check the current state is Repeat Message
    07: VP(CanNm.EB_Ref.SWS_CanNm_00334.1)
        Check that on entry of Repeat Message State CanIf_Transmit has been called
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00334.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>430</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1570</internalId></specobject>
    <specobject>
      <id>TC_CANNM_Immediates_OFF</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_18/source/application/CanNm_ConTest_18.c</sourcefile>
      <sourceline>144</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that in case CanNmImmediateNmTransmissions is  zero
    the first message is sent after Message Cycle Offset time.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Initialize stubs
    02: Initialize CanNm
    03: Request the network
    04: Call mainfunction
    05: Get the current state
    06: Check the current state is Repeat Message
    07: Check that CanIf_Transmit has not been called yet
    08: Wait until Message Cycle Offset time almoast expires
    09: Check that CanIf_Transmit has not been called
    10: VP(CanNm.SWS_CanNm_00005)
        Check that CanIf_Transmit has been called
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1571</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TC_CANNM_DiffrentChFeatures</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_19/source/application/CanNm_ConTest_19.c</sourcefile>
      <sourceline>55</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
     Ensure CanNm_GetNodeIdentifier and CanNm_GetLocalNodeIdentifier
     are available considering channel based configuration.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Initialize test
    02: VP(CanNm.ASR403.CANNM270) CanNm_GetNodeIdentifier available only for channel 0
    03: VP(CanNm.ASR403.CANNM270) CanNm_GetNodeIdentifier not available for channel 1
    04: VP(CanNm.ASR403.CANNM272) CanNm_GetLocalNodeIdentifier available only for channel 0
    05: VP(CanNm.ASR403.CANNM272) CanNm_GetLocalNodeIdentifier not available for channel 1
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM270</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM272</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1572</internalId></specobject>
    <specobject>
      <id>TC_CANNM_DiffrentChFeatures_Rpt</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_19/source/application/CanNm_ConTest_19.c</sourcefile>
      <sourceline>110</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
     Ensure CanNm_RepeatMessageRequest is available only for channel for which
     CanNmNodeDetectionEnabled is configured.
     Channel 0 CanNmNodeDetectionEnabled TRUE;
     Channel 0 CanNmNodeIdEnabled        TRUE;
     Channel 0 CanNmRepeatMsgIndEnabled  TRUE;
     Channel 1 CanNmNodeDetectionEnabled FALSE;
     Channel 1 CanNmNodeIdEnabled        FALSE;
     Channel 1 CanNmRepeatMsgIndEnabled  FALSE;
     Channel 2 CanNmNodeDetectionEnabled FALSE;
     Channel 2 CanNmNodeIdEnabled        TRUE;
     Channel 2 CanNmRepeatMsgIndEnabled  FALSE;
     Channel 3 CanNmNodeDetectionEnabled TRUE;
     Channel 3 CanNmNodeIdEnabled        TRUE;
     Channel 3 CanNmRepeatMsgIndEnabled  FALSE;
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Initialize test
    02: Channel 0 passive startup
    03: VP(CanNm.ASR403.CANNM274) CanNm_RepeatMessageRequest available as CanNmNodeDetectionEnabled == TRUE
    04: Channel 1 passive startup
    05: VP(CanNm.ASR403.CANNM274) CanNm_RepeatMessageRequest not available as CanNmNodeDetectionEnabled == FALSE
    06: Channel 3 passive startup
    07: VP(CanNm.ASR403.CANNM274) CanNm_RepeatMessageRequest available as CanNmNodeDetectionEnabled == TRUE
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM274</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1573</internalId></specobject>
    <specobject>
      <id>TC_CANNM_DiffrentChFeatures_CanNm_GetPduData</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_19/source/application/CanNm_ConTest_19.c</sourcefile>
      <sourceline>250</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
     CanNmUserDataEnabled is FALSE.
     Channel 0 CanNmNodeDetectionEnabled TRUE;
     Channel 0 CanNmNodeIdEnabled        TRUE;
     Channel 1 CanNmNodeDetectionEnabled FALSE;
     Channel 1 CanNmNodeIdEnabled        FALSE;
     Channel 2 CanNmNodeDetectionEnabled FALSE;
     Channel 2 CanNmNodeIdEnabled        TRUE;
     Ensure CanNm_GetPduData is available only for channel for which
     CanNmNodeDetectionEnabled or CanNmNodeIdEnabled is configured.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Initialize test
    02: VP(CANNM276) CanNm_GetPduData OK for Channel 0
    03: VP(CANNM276) CanNm_GetPduData NOT_OK for Channel 1
    04: VP(CANNM276) CanNm_GetPduData OK for Channel 2
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>472</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>473</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM276.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>474</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1574</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TC_CANNM_DiffrentChFeatures_DET</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_19_DET/source/application/CanNm_ConTest_19_DET.c</sourcefile>
      <sourceline>43</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
     Ensure CanNm_GetNodeIdentifier and CanNm_GetLocalNodeIdentifier
     are available considering channel based configuration.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Initialize test
    02: VP(CanNm.ASR403.CANNM270) CanNm_GetNodeIdentifier available only for channel 0
    03: VP(CanNm.ASR403.CANNM270) CanNm_GetNodeIdentifier not available for channel 1 DET reported
    04: VP(CanNm.ASR403.CANNM272) CanNm_GetLocalNodeIdentifier available only for channel 0
    05: VP(CanNm.ASR403.CANNM272) CanNm_GetLocalNodeIdentifier not available for channel 1 DET reported
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM270</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM272</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1575</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_32027</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_2/source/application/CanNm_ConTest_2.c</sourcefile>
      <sourceline>54</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    To Test state transition of CanNm channel from Bus sleep state to
    Repeat message state triggered by a network request.
  
Test Object: None.
Test Precondition: 
    * CANNM_STATE_CHANGE_IND_ENABLED shall be STD_ON.
    * CANNM_PASSIVE_MODE_ENABLED shall be STD_OFF.
  
Test Execution: 
    01: Initialize the CanNm module.
    02: Also verify that no error has been reported to DET.
    03: Go to the Bus sleep state.
    04: Call the CanNm_MainFunction() before any triggers/requests.
    05: Verify whether the current state is Bus Sleep State.
    06: Call CanNm_NetworkRequest() to Request network for a CanNm channel.
    07: Call the CanNm_MainFunction() so that CanNm transits to the Repeat
        message state.
    08: VP (CanNm.SWS_CanNm_00314, CanNm.SWS_CanNm_00129, CanNm.EB.Dsn.StateDynamics.NET_REQSTATUS_CHANGED_BUS_SLEEP_MODE_NetworkRequest):
        - The present state is Repeat message state and that no
          error has been reported to DET.
    09: Verify that Nm_StateChangeNotification and Nm_NetworkMode are called.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00314</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>301</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00129</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>196</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.NET_REQSTATUS_CHANGED_BUS_SLEEP_MODE_NetworkRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1422</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1576</internalId></specobject>
    <specobject>
      <id>TS_CanNm_32019</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_2/source/application/CanNm_ConTest_2.c</sourcefile>
      <sourceline>156</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    To Test state transition of CanNm channel from Bus sleep mode to
    Repeat message state triggered by a Passive startup.
  
Test Object: None.
Test Precondition: 
   * CanNm is initialized.
   * CanNmPassiveModeEnabled is enabled.
   * CanNmStateChangeIndEnabled is enabled.
  
Test Execution: 
    01: Go to the Bus sleep state.
    02: Call the CanNm_MainFunction() before any triggers/requests.
    03: Trigger a passive startup and call the CanNm_MainFunction() so that
        CanNm transits to the Repeat message state.
    04: VP (CanNm.SWS_CanNm_00314, CanNm.EB_Ref.SWS_CanNm_00128.1, CanNm.EB.Dsn.StateDynamics.PASSIVE_START_BUS_SLEEP_MODE):
        - The present state is Repeat Message State and mode is
          Network Mode and that no error has been reported to DET.
    05: VP (CanNm.SWS_CanNm_00097):
        - CanNm notifies Nm about the mode change through Nm_NetworkMode.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00314</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>301</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00128.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>477</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00097</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>165</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.PASSIVE_START_BUS_SLEEP_MODE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1420</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1577</internalId></specobject>
    <specobject>
      <id>TS_CanNm_32020</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_2/source/application/CanNm_ConTest_2.c</sourcefile>
      <sourceline>242</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    To Test state transition of CanNm channel from Prepare Bus sleep mode to
    Repeat message state triggered by a Passive startup.
  
Test Object: None.
Test Precondition: 
   * CanNm is initialized.
   * CanNmStateChangeIndEnabled is enabled.
  
Test Execution: 
    01: Go to the Prepare Bus sleep state.
    02: Call the CanNm_MainFunction() before any triggers/requests.
    03: Verify the current state - No state change occurs as Mainfunction is
        called before any triggers.
    04: Trigger a passive startup and call the CanNm_MainFunction() so that
        CanNm transits to the Repeat message state.
    05: VP (CanNm.SWS_CanNm_00315, CanNm.EB_Ref.SWS_CanNm_00128.2, CanNm.EB.Dsn.StateDynamics.PASSIVE_START_BUS_SLEEP_MODE):
        - The present state is Repeat Message State and mode is
          Network Mode and that no error has been reported to DET.
    06: VP (CanNm.SWS_CanNm_00097):
        - CanNm notifies Nm about the mode change through Nm_NetworkMode.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00315</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>302</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00097</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>165</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00128.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>478</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.PASSIVE_START_PREPARE_BUS_SLEEP_MODE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1447</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1578</internalId></specobject>
    <specobject>
      <id>TS_CanNm_32053</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_2/source/application/CanNm_ConTest_2.c</sourcefile>
      <sourceline>325</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    To Test state transition of CanNm channel from Repeat message state to
    Normal operation state when repeat message timeout occurs.
  
Test Object: None.
Test Precondition: 
    * CanNm is initialized.
    * CanNmPassiveModeEnabled is disabled.
    * CanNmStateChangeIndEnabled is enabled.
  
Test Execution: 
    01: Go to the Repeat message state.
    02: Request network for a CanNm channel so that the state changes to repeat
        message state.
    03: Call CanNm_MainFunction for (repeat message timer - 1) times.
    04: VP (CanNm.SWS_CanNm_00102):
        - The current state is still repeat message state.
    05: Call CanNm_MainFunction once so that the repeat message timer expires.
    06: VP (CanNm.SWS_CanNm_00255, CanNm.SWS_CanNm_00102, CanNm.SWS_CanNm_00103, CanNm.SWS_CanNm_00104, CanNm.ECUC_CanNm_00022),
           (CanNm.EB.Dsn.StateDynamics.RMS_TIMEOUT_REPEAT_MESSAGE_STATE):
        - The state changes to Normal operation state.
    07: Verify that Nm_StateChangeNotification is called for indicating the
        state change to Nm.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00102</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>170</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00255</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>270</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00103</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>171</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>88</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.RMS_TIMEOUT_REPEAT_MESSAGE_STATE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1424</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1579</internalId></specobject>
    <specobject>
      <id>TS_CanNm_32030</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_2/source/application/CanNm_ConTest_2.c</sourcefile>
      <sourceline>418</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that when CanNm_NetworkRequest() is called if CanNm is in
    Ready Sleep state and 'CanNmPnHandleMultipleNetworkRequests'
    is set to FALSE, then CanNm does not perform state transition to Repeat
    Message State (CanNm.SWS_CanNm_00454) however performs state transition to Normal
    operation state (CanNm.SWS_CanNm_00110).
  
Test Object: None.
Test Precondition: 
    - Important test configuration details:
      - CanNmPnHandleMultipleNetworkRequests is set to 'false' for all
        the network channels (Channel0, Channel1 &amp; Channel2)
      - CanNmPassiveModeEnabled is disabled.
      - CanNmStateChangeIndEnabled is enabled.
    - Module State
      - CanNm is initialized.
  
Test Execution: 
    01: Go to Ready sleep state.
    02: Request network for a CanNm channel.
    03: Call CanNm_MainFunction once so that a transition occurs to
        Normal operation state.
    04: VP (CanNm.SWS_CanNm_00104, CanNm.SWS_CanNm_00255, CanNm.SWS_CanNm_00110):
        - The transition to Normal operation state occurred without
          DET calls.
    05: Verify that Nm_StateChangeNotification is called for indicating the
        state change to Nm.
    06: Invoke main function until Remote Sleep indication timer expires
    07: Release the network
    08: Invoke main function once
    09: Ensure that network channel has entered Ready sleep state
    10: Request the network
    11: Invoke main function once
    12: VP (CanNm.SWS_CanNm_00110, CanNm.SWS_CanNm_00454, ECUC_CanNm_00073):
        - Network channel enters Normal Operation state
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00255</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>270</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>178</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00454</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>365</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM073_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>5</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1580</internalId></specobject>
    <specobject>
      <id>TS_CanNm_32055</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_2/source/application/CanNm_ConTest_2.c</sourcefile>
      <sourceline>552</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    To Test state transition of CanNm channel from Ready Sleep State to
    Repeat Message State triggered by a Repeat message state request.
  
Test Object: None.
Test Precondition: 
    * CanNm is initialized.
    * CanNmPassiveModeEnabled is disabled.
    * CanNmStateChangeIndEnabled is enabled.
  
Test Execution: 
    01: Go to Ready sleep state.
    02: Request the Repeat message state.
    03: Call CanNm_MainFunction once so that a transition occurs to Repeat
        message state.
    04: VP (CanNm.SWS_CanNm_00112):
        - The transition occurred to repeat message state without DET calls.
    05: VP (CanNm.SWS_CanNm_00113):
        - The Repeat message bit is set in the transmitted PDU.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00112</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1581</internalId></specobject>
    <specobject>
      <id>TS_CanNm_32042</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_2/source/application/CanNm_ConTest_2.c</sourcefile>
      <sourceline>635</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    To Test state transition of CanNm channel from Ready Sleep State to
    Prepare bus sleep State during the timeout of the Nm-timeout timer.
  
Test Object: None.
Test Precondition: 
    * CanNm is initialized.
  
Test Execution: 
    01: Go to the Ready sleep state.
    02: Receive a Pdu in the same channel and call one MainFunction so that
        the Nm timeout timer is restarted.
    03: Call CanNm_MainFunction() until CanNmTimeoutTime is about to expire, i.e,
        (CanNmTimeoutTime - 2) times.
    04: The current state is ready sleep state.
    05: Call main function once.
    06: VP (CanNm.SWS_CanNm_00109):
        - Check whether the current state is Prepare bus sleep state and
        - The transition occurred without DET calls.
    07: VP (CanNm.SWS_CanNm_00114):
        - Verify the calls to Nm, i.e, Nm_StateChangeNotification and
          Nm_PrepareBusSleepMode are called.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00114</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1582</internalId></specobject>
    <specobject>
      <id>TS_CanNm_32029</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_2/source/application/CanNm_ConTest_2.c</sourcefile>
      <sourceline>749</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    To Test state transition of CanNm channel from Normal operation state to
    Ready sleep state triggered by a network release.
  
Test Object: None.
Test Precondition: 
    * CanNmPassiveModeEnabled is disabled.
    * CanNmStateChangeIndEnabled is enabled.
    * CanNm is initialized.
  
Test Execution: 
    01: Go to the Normal operation state.
    02: Release the network by calling CanNm_NetworkRelease.
    03: Call the CanNm_MainFunction once
    04: VP (CanNm.SWS_CanNm_00105, CanNm.SWS_CanNm_00214, CanNm.ASR403.CANNM258, CanNm.SWS_CanNm_00118),
           (CanNm.EB.Dsn.StateDynamics.NET_REQ_STATUS_CHANGED_NORMAL_OPERATION_STATE):
        - A transition occurs to the Ready sleep state.
    05: Verify Nm_StateChangeNotification is called.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00105</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>173</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00214</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>244</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM258</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00118</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>186</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.NET_REQ_STATUS_CHANGED_NORMAL_OPERATION_STATE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1435</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1583</internalId></specobject>
    <specobject>
      <id>TS_CanNm_32036</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_2/source/application/CanNm_ConTest_2.c</sourcefile>
      <sourceline>823</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    To test DET notification CANNM_E_NETWORK_TIMEOUT in NormalOperationState.
  
Test Object: None.
Test Precondition: 
    * CanNm is initialized.
    * CanNmDevErrorDetect is enabled.
  
Test Execution: 
    01: Go to the Normal operation state.
    02: Call CanNm_MainFunction() until Timeout exception is about to
        take place i.e, ((RMS Time - Nm Timeout Time) - 1) times as
        here RMS Time is greater than Nm Timeout.
    03: VP (CanNm.SWS_CanNm_00194):
        - No Det error is reported.
    04: Call CanNm_MainFunction() so that NM-Timeout Timer expires in
        Normal operation state.
    05: VP (CanNm.SWS_CanNm_00194):
        - Det error CANNM_E_NETWORK_TIMEOUT is reported.
    06: Call CanNm_MainFunction() for (Nm Timeout Timer - 1) times.
    07: Call CanNm_TxConfirmation() for confirming the I-Pdu which is sent last.
    08: Call CanNm_MainFunction() once.
    09: VP (CanNm.SWS_CanNm_00228):
        - No Det error is reported as the Pdu got confirmed before the timer
          is expired.
    10: Verify the current state is Normal operation state.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00194</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>237</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00228</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>257</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1584</internalId></specobject>
    <specobject>
      <id>TS_CanNm_32054</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_2/source/application/CanNm_ConTest_2.c</sourcefile>
      <sourceline>923</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    To Test state transition of CanNm channel from Normal operation state
    to Repeat message state triggered by a Repeat message state request.
  
Test Object: None.
Test Precondition: 
    * CanNm is initialized.
    * CanNmNodeDetectionEnabled is enabled.
    * CanNmStateChangeIndEnabled is enabled.
  
Test Execution: 
    01: Go to the Normal operation state.
    02: Call CanNm_RepeatMessageRequest and call CanNm_MainFunction() once.
    03: VP (CanNm.SWS_CanNm_00120):
        - The current state is repeat message state.
    04: Verify Nm_StateChangeNotification is called.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00120</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1585</internalId></specobject>
    <specobject>
      <id>TS_CanNm_32043</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_2/source/application/CanNm_ConTest_2.c</sourcefile>
      <sourceline>989</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    To test state transition of CanNm Channel from Prepare bus sleep state
    to Repeat message state triggered by a reception of a Nm PDU.
  
Test Object: None.
Test Precondition: 
    * CanNm is initialized.
    * CanNmStateChangeIndEnabled is enabled.
  
Test Execution: 
    01: Go to Prepare bus sleep state.
    02: Simulate the reception of an Nm PDU.
    03: Call CanNm_MainFunction once.
    04: VP (CanNm.SWS_CanNm_00124, CanNm.SWS_CanNm_00315, CanNm.EB.Dsn.StateDynamics.RX_INDICATION_PREPARE_BUS_SLEEP_MODE):
        - The state is changed to Repeat message state
        - No error is reported to DET.
    05: Verify Nm_StateChangeNotification, Nm_NetworkMode and Nm_PduRxIndication
        are called.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00124</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>192</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00315</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>302</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.RX_INDICATION_PREPARE_BUS_SLEEP_MODE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1440</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1586</internalId></specobject>
    <specobject>
      <id>TS_CanNm_32044</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_2/source/application/CanNm_ConTest_2.c</sourcefile>
      <sourceline>1074</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    To test state transition of CanNm Channel from Prepare bus sleep mode
    to Repeat message state triggered by a network request.
  
Test Object: None.
Test Precondition: 
    * CanNm is initialized.
    * CanNmStateChangeIndEnabled is enabled.
    * CanNmPassiveModeEnabled is disabled.
  
Test Execution: 
    01: Go to Prepare bus sleep state.
    02: Call CanNm_NetworkRequest for requesting the channel.
    03: Call CanNm_MainFunction once.
    04: VP (CanNm.SWS_CanNm_00123):
        - The state changes to Repeat message.
    05: Verify Nm_StateChangeNotification and Nm_NetworkMode are called.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00123</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>191</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1587</internalId></specobject>
    <specobject>
      <id>TS_CanNm_32022</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_2/source/application/CanNm_ConTest_2.c</sourcefile>
      <sourceline>1148</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    To test state transition of CanNm Channel from PrepareBusSleepState
    to BusSleepState.
  
Test Object: None.
Test Precondition: 
    * CanNm is initialized.
    * CanNmStateChangeIndEnabled is enabled.
  
Test Execution: 
    01: Go to Prepare bus sleep state.
    02: Call CanNm_MainFunction() for (CANNM_WAIT_BUS_SLEEP_TIME - 1) times.
    03: VP (CanNm.ASR403.CANNM115, CanNm.EB.Dsn.StateDynamics.UNI_TIMEOUT_PREPARE_BUS_SLEEP_MODE):
        - The current state is still Prepare bus Sleep.
    04: Call CanNm_MainFunction() once for CANNM_WAIT_BUS_SLEEP_TIME to expire.
    05: VP (CanNm.ASR403.CANNM115, SWS_CanNm_00088, ECUC_CanNm_00021, CanNm.EB.Dsn.StateDynamics.UNI_TIMEOUT_PREPARE_BUS_SLEEP_MODE):
        - The state is changed to Bus Sleep.
    06: Verify Nm is notified about the state change through
        Nm_StateChangeNotification.
    07: VP (CanNm.SWS_CanNm_00126, CanNm.SWS_CanNm_00324):
        - Nm is notified about the mode change through Nm_BusSleepMode.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM115</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.UNI_TIMEOUT_PREPARE_BUS_SLEEP_MODE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1446</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00126</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>193</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM088</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM021_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>2</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00324</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>303</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1588</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0107</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_2/source/application/CanNm_ConTest_2.c</sourcefile>
      <sourceline>1240</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Init tests
Test Description: 
    To test that CanIf_Transmit() is not invoked after CanNm initialization.
  
Test Object: None.
Test Precondition: 
    * The value of "CanNmPassiveModeEnabled" must be "false".
  
Test Execution: 
    01: Invoke CanNm_Init().
    02: For each configured CanNm Channel invoke CanNm_MainFunction() in a loop
        until CanNm message cycle time expires.
    03: VP (CanNm.SWS_CanNm_00033):
        - CanIf_Transmit() is not invoked.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00033</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>139</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1589</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0108</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_2/source/application/CanNm_ConTest_2.c</sourcefile>
      <sourceline>1304</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Init tests
Test Description: 
    To test that CanNm module sets each byte of the user data to 0xFF after
    initialization.
  
Test Object: None.
Test Precondition: 
    * "CanNmPassiveModeEnabled " is set to value "false".
    * Partial Networking is not supported.
  
Test Execution: 
    01: Initialize stubs &amp; CanNm module.
    02: For each configured CanNm Channel, execute steps 03 to 07 (in a loop).
    03: Verify the value of CanNm User Data Length (as greater than 0).
    04: Simulate CanNm_NetworkRequest() in Bus Sleep mode and verify that it
        returns E_OK.
    05: Invoke CanNm_MainFunction() in a loop until the CanNm message cycle
        offset timer expires.
    06: Verify CanIf_Transmit() has been invoked.
    07: VP (CanNm.SWS_CanNm_00025):
        - Each byte in the user data is set to 0xFF.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00025</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1590</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0109</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_2/source/application/CanNm_ConTest_2.c</sourcefile>
      <sourceline>1403</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Init tests
Test Description: 
    To test that CanNm module sets control bit vector(CBV) to 0x00 after
    CanNm initialization.
  
Test Object: None.
Test Precondition: 
    "CanNmPassiveModeEnabled" is set to"false".
  
Test Execution: 
    01: Invoke CanNm_Init().
    02: Repeat steps 03 to 07 for all CanNm channels.
    03: Verify that value of Control bit vector position is not CANNM_PDU_OFF.
    04: Call CanNm_NetworkRequest() in bus sleep mode and verify whether it
        returned "E_OK".
    05: Invoke CanNm_MainFunction() in a loop until the CanNm message cycle
        offset expires.
    06: VP (CanNm.SWS_CanNm_00325):
        - CanIf_Transmit() is invoked to transmit PDU.
    07: VP (CanNm.SWS_CanNm_00085):
        - The value of control bit vector is 0.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00085</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>156</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00325</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>304</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1591</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0111</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_2/source/application/CanNm_ConTest_2.c</sourcefile>
      <sourceline>1499</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Init tests
Test Description: 
    To test that CanIf_Transmit() is invoked for the transmission of
    Network Management PDUs when message cycle timer expires.
  
Test Object: None.
Test Precondition: 
    "CanNmPassiveModeEnabled" is set to"false".
  
Test Execution: None.
Test Input: None.
Test Output: 
    &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00032</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>401</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.Internal_Transition_SENDING_SUB_MODE_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1449</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00040</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00237</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>260</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1592</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0112</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_2/source/application/CanNm_ConTest_2.c</sourcefile>
      <sourceline>1596</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Init tests
Test Description: 
    To test the state and mode of CanNm after initialization.
  
Test Object: None.
Test Precondition: 
    "CanNmPassiveModeEnabled" is set to"false".
  
Test Execution: 
    01: Invoke CanNm_Init().
    02: Perform the following steps for all configured channels.
    03: VP (CanNm.SWS_CanNm_00141):
        - The current state is "NM_STATE_BUS_SLEEP".
    04: VP (CanNm.SWS_CanNm_00144):
        - The current mode is "NM_MODE_BUS_SLEEP".
    05: VP (CanNm.SWS_CanNm_00126):
        - Nm_BusSleepMode() is not invoked.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00141</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>202</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00144</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>204</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00126</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>193</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1593</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0077</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_2/source/application/CanNm_ConTest_2.c</sourcefile>
      <sourceline>1677</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Tx Rx Test
Test Description: 
    Verify the behavior of CanNm_RequestBusSynchronization() and
    CanNm_NetworkRequest() when a call to the CanIf_Transmit() fails.
  
Test Object: None.
Test Precondition: 
    "CanNmPassiveModeEnabled" is set to "false".
    "CanNmBusSynchronizationEnabled" is set to "true".
  
Test Execution: 
    01: Call CanNm_Init().
    02: Loop over steps 03 to 07 for all configured channels.
    03: Set the CanIf stub behavior to return "E_NOT_OK" for CanIf_Transmit()
        requests.
    04: Call CanNm_NetworkRequest() in bus sleep state
    05: VP (CanNm.SWS_CanNm_00213):
        - CanNm_NetworkRequest() returns "E_OK".
    06: Call CanNm_MainFunction().
    07: Call CanNm_RequestBusSynchronization() in repeat message state
    08: VP (CanNm.SWS_CanNm_00226):
        - CanNm_RequestBusSynchronization() returns "E_NOT_OK".
    09: VP (CanNm.SWS_CanNm_00130):
        - CanIf_Transmit() is invoked.
    10: Set the CanIf stub behavior to return "E_OK" for CanIf_Transmit
        requests.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00226</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>255</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00213</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>243</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00130</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1594</internalId></specobject>
    <specobject>
      <id>TC_CANNM_SetUserDataDet</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_2/source/application/CanNm_ConTest_2.c</sourcefile>
      <sourceline>1776</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Tx Rx Test
Test Description: 
    Verify the behavior of CanNm_SetUserData() when userData length is zero
    for a channel.
  
Test Object: None.
Test Precondition: 
    * A CanNmChannel is configured with userdata length 0.
    * CanNmComUserDataSupport is disabled.
  
Test Execution: 
    01: Call CanNm_Init().
    02: Call CanNm_GetUserData() for channel with DataLength 0 and verify
        that it returned E_NOT_OK.
    03: VP (CanNm.EB.ComUserDataSupport.SetGetUserDataNoUserData):
        - Det error CANNM_E_INVALID_FUNCTION_ARG is reported.
    04: Call CanNm_SetUserData() for a channel with DataLength 0 and verify that
        it returned E_NOT_OK.
    05: VP (CanNm.EB.ComUserDataSupport.SetGetUserDataNoUserData):
        - Det error CANNM_E_INVALID_FUNCTION_ARG is reported.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.ComUserDataSupport.SetGetUserDataNoUserData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>499</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1595</internalId></specobject>
    <specobject>
      <id>TS_CanNm_RepeatMsgTest</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_2/source/application/CanNm_ConTest_2.c</sourcefile>
      <sourceline>1853</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    To verify that the correct number of NM Messages are sent in the
    Repeat Message State.
  
Test Object: None.
Test Precondition: 
    "CanNmPassiveModeEnabled" is set to "false".
  
Test Execution: 
    01: Initialize stubs.
    02: Invoke CanNm_Init.
    03: Loop over steps 04 - 07 for each configured CanNmChannel:
    04: Go to Ready Sleep state.
    05: Invoke CanNm_RepeatMessageRequest to enter into Repeat Message State.
    06: Call Main function as long as module stays in Repeat Message State.
    07: VP (CanNm.EB_Ref.CANNM100.4, CanNm.SWS_CanNm_00102):
        - The number of NM messages sent in Repeat message state
          is equal to 'RMS Time divide by Message Cycle Time'.
    08: Verify that Ready Sleep state is entered.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM100.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>424</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00102</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>170</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1596</internalId></specobject>
    <specobject>
      <id>TS_CanNm_ConcurrencyAccess</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_2/source/application/CanNm_ConTest_2.c</sourcefile>
      <sourceline>1963</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that when CanNm_NetworkRequest() and CanNm_NetworkRelease()
    are called multiple times within the context of a single main function
    cycle, the updated status of 'Network Requested' status is processed.
    For example when CanNm is in state "Normal Operation" and the following
    call sequence:
       1. CanNm_NetworkRelease()
       2. CanNm_NetworkRequest()
       3. CanNm_NetworkRelease()
       4. CanNm_MainFunction()
    will result in the destination state "Ready Sleep".
  
Test Object: None.
Test Precondition: 
    * "CanNmPassiveModeEnabled" is set to "false".
    Module State:
    * CanNm is initialized.
    * CanNm is in Normal Operation State.
  
Test Execution: 
    01: Prepare test case preconditions.
    02: Ensure that CanNm is in NormalOperationState.
    03: Call CanNm_NetworkRelease() followed by CanNm_NetworkRequest() and
        again CanNm_NetworkRelease().
    04: Invoke CanNm main function once.
    05: VP (CanNm.SWS_CanNm_00118):
        - CanNm is in state 'NM_STATE_READY_SLEEP'
    06: Call CanNm_NetworkRequest() followed by CanNm_NetworkRelease() and again
        CanNm_NetworkRequest().
    07: Invoke CanNm main function once
    08: VP (CanNm.SWS_CanNm_00110):
        - CanNm is in state 'NM_STATE_NORMAL_OPERATION'
    09: Invoke CanNm main function until Remote sleep indication timer expires
    10: Call CanNm_NetworkRelease() followed by CanNm_NetworkRequest() and
        again CanNm_NetworkRelease().
    11: Invoke CanNm main function once
    12: VP (CanNm.SWS_CanNm_00118):
        - CanNm is in state 'NM_STATE_READY_SLEEP'
    13: Call CanNm_NetworkRequest() followed by CanNm_NetworkRelease() and
        again CanNm_NetworkRequest().
    14: Invoke CanNm main function once
    15: VP (CanNm.SWS_CanNm_00110):
        - CanNm is in state 'NM_STATE_NORMAL_OPERATION'
    16: Call CanNm_NetworkRelease() followed by CanNm_NetworkRequest() and
        again CanNm_NetworkRelease().
    17: Invoke CanNm main function once
    18: VP (CanNm.SWS_CanNm_00118):
        - CanNm is in state 'NM_STATE_READY_SLEEP'
    19: Call CanNm_NetworkRelease() followed by CanNm_NetworkRequest() and
        again CanNm_NetworkRelease().
    20: Invoke CanNm main function once
    21: Ensure that CanNm remains in state 'NM_STATE_READY_SLEEP'
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00118</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>186</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>178</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1597</internalId></specobject>
    <specobject>
      <id>TS_CanNm_32057</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_2/source/application/CanNm_ConTest_2.c</sourcefile>
      <sourceline>2187</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Normal Operation Remote Sleep re-entry
Test Description: 
    The test should prove that in case the RSI timer expires
    (Nm_RemoteSleepIndication is called) and even if the normal operation state is left
    and then re-entered again Nm_RemoteSleepIndication is not called again.
    The re-entry is done from ready sleep remote sleep (RX indication is not called).
  
Test Object: None.
Test Precondition: 
    "CanNmPassiveModeEnabled" is set to "false".
    "CanNmRemoteSleepIndEnabled" is set to "true".
  
Test Execution: 
    01: Initialize stub values.
    02: Initialize CanNm.
    03: Request the network.
    04: Check that State Machine reached repeat message state.
    05: Wait until RMS timer expires.
    06: Check that State Machine reached normal operation state.
    07: Wait until RSI timer almost expires (1 cycle left).
    08: Check that Nm_RemoteSleepIndication is not yet called.
    09: Wait the last cycle from the RSI time.
    10: VP (CanNm.SWS_CanNm_00150, CanNm.EB.Dsn.StateDynamics.UNI_TIMEOUT_NORMAL_OPERATION_REMOTE_ACTIVITY):
        Check that after RSI timer expired, Nm_RemoteSleepIndication is called.
    11: Release the network.
    12: Check that State Machine reached ready sleep state.
    13: Request the network.
    14: Check that State Machine reached normal operation state.
    15: Check that Nm_RemoteSleepIndication is not called again
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00150</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>208</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.UNI_TIMEOUT_NORMAL_OPERATION_REMOTE_ACTIVITY</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1426</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1598</internalId></specobject>
    <specobject>
      <id>TS_CanNm_CWU_Rx_Enabled_false</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_2/source/application/CanNm_ConTest_2.c</sourcefile>
      <sourceline>2310</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    The test should prove that in case parameter CanNmCarWakeUpRxEnabled
    is set to FALSE, function Nm_CarWakeUpIndication is not called.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Initialize stubs and module
    02: Call CanNm_RxIndication
    03: VP(CanNm.SWS_CanNm_00406)
        - Nm_CarWakeUpIndication is not called
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00406</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>329</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00074</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>127</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1599</internalId></specobject>
    <specobject>
      <id>TS_CanNm_CWU_Rx_Enabled_Filtering_Disabled</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_2/source/application/CanNm_ConTest_2.c</sourcefile>
      <sourceline>2373</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    The test should prove that in case parameter CanNmCarWakeUpRxEnabled
    is set to TRUE and CanNmCarWakeUpFilterEnabled is set to FALSE,
    function Nm_CarWakeUpIndication is called only if
    in byte CanNmCarWakeUpBytePosition bit CanNmCarWakeUpBitPosition is set.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Initialize stubs and module
    02: Call CanNm_RxIndication with CarWakeup bit cleared
    03: Check that Nm_CarWakeUpIndication is not called
    04: Reset buffer for CanNm_GetPduData
    05: Set CarWakeup bit
    06: Call Rxindication
    07: VP(CanNm.SWS_CanNm_00405, CanNm.SWS_CanNm_00406)
        - Check Nm_CarWakeUpIndication is called
    08: VP(CanNm.SWS_CanNm_00407)
        - check that data transmitted with Rx indication is
          the same as data which is returned by CanNm_GetPduData
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00405</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>328</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00406</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>329</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00407</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>330</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00074</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>127</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00075</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>128</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00076</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>129</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>130</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1600</internalId></specobject>
    <specobject>
      <id>TS_CanNm_CWU_Rx_Enabled_Filtering_Enabled</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_2/source/application/CanNm_ConTest_2.c</sourcefile>
      <sourceline>2476</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    The test should prove that in case parameter CanNmCarWakeUpRxEnabled
    is set to TRUE and CanNmCarWakeUpFilterEnabled is set to TRUE,
    function Nm_CarWakeUpIndication is called only if
    in byte CanNmCarWakeUpBytePosition bit CanNmCarWakeUpBitPosition is set
    and Node Id in the received PDU is equal to
    CanNmCarWakeUpFilterNodeId.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Intialize stubs and module
    02: Call CanNm_RxIndication
    03: Check that Nm_CarWakeUpIndication is not called
    04: Set Car Wakeup bit
    05: Check that Nm_CarWakeUpIndication is not called
    06: Initialize buffer used for CanNm_GetPduData
    07: Set Node id
    08: VP(CanNm.SWS_CanNm_00405, CanNm.SWS_CanNm_00408)
        - Check that Nm_CarWakeUpIndication is called
    09: VP(CanNm.SWS_CanNm_00407)
        - check that data transmitted with Rx indication is
          the same as data which is returned by CanNm_GetPduData

  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00405</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>328</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00407</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>330</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00408</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>331</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00074</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>127</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00075</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>128</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00076</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>129</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>130</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1601</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TC_CANNM_UserDataLength0</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_20/source/application/CanNm_ConTest_20.c</sourcefile>
      <sourceline>41</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   Test should prove that in case UserDataLength is set to zero for a channel
   function PduR_CanNmRxIndication is not called
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Initialize Stubs
    02: Initialize CanNm
    03: Call CanNm_RxIndication
    04: VP(CanNm.EB.ComUserDataSupport.PduRCallsNoUserData.2)
        - PduR_CanNmRxIndication is not called
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.ComUserDataSupport.PduRCallsNoUserData.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>501</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1602</internalId></specobject>
    <specobject>
      <id>TC_CANNM_PncEnabledMsgCycleTime</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_20/source/application/CanNm_ConTest_20.c</sourcefile>
      <sourceline>104</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   Test should prove that in case Pn is enabled for a channel messages are sent with
   Message Cycle Time.
   Test also verifies that in case if Pnc is enabled Message Cycle Time has to be
   smaller than PnResetTime(Test compiles).
  
Test Object: None.
Test Precondition: 
   - Partial Networking is enabled;
   - Repeat Message Time is set to zero;
  
Test Execution: 
   01: Initialize Stubs;
   02: Initialize CanNm;
   03: Request the channel actively;
   04: Check The current state is Normal Operation State;
   05: Wait until MessageCycleOfsset almost expires;
   06: Check that after Message Cycle Offset expires a message is sent on the bus;
   07: Wait until Message Cycle Timer almost expires;
   08: VP (CanNm.ECUC_CanNm_00028, CanNm.EB_Ref.ECUC_CanNm_00059.1)
       Check that after message cycle time expires message is sent on the bus;
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.ECUC_CanNm_00059.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>479</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1603</internalId></specobject>
    <specobject>
      <id>TC_CANNM_PncEnabledNmTimoutTime</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_20/source/application/CanNm_ConTest_20.c</sourcefile>
      <sourceline>188</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   Test should prove that in case Pn is enabled bus goes to prepare sleep after
   Nm Time out Timer expires.
   Test also verifies that in case if Pnc is enabled Time Out Timer has to be
   greater than PnResetTime (Test compiles).
  
Test Object: None.
Test Precondition: 
   - Partial Networking is enabled
   - Repeat Message Time is set to zero
  
Test Execution: 
   01: Initialize Stubs;
   02: Initialize CanNm;
   03: Do a passive startup;
   04: Check the current state is Ready Sleep State;
   05: Wait until CanNmTimoutTimer almost expires;
   06: Check the current state is Ready Sleep State;
   07: VP(CanNm.ASR403.CANNM030_Conf, CanNm.EB_Ref.ECUC_CanNm_00059.2)
       - Check the current state is Prepare Bus Sleep;
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM030_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>3</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.ECUC_CanNm_00059.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>480</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1604</internalId></specobject>
    <specobject>
      <id>TC_CANNM_PncDisabledMsgCycleTime</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_20/source/application/CanNm_ConTest_20.c</sourcefile>
      <sourceline>264</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   Test should prove that in case Pn is disabled for a channel messages are sent
   with Message Cycle Time.
   Test also verifies that in case if Pnc is disabled Message Cycle Time can be
   greater than PnResetTime(Test compiles).
  
Test Object: None.
Test Precondition: 
   - Partial Networking is disabled
   - Repeat Message Time is set to zero
   - Message Cycle Time is greater than PnResetTime
  
Test Execution: 
   01: Initialize Stubs;
   02: Initialize CanNm;
   03: Request the channel actively;
   04: Check The current state is Normal Operation State;
   05: Wait until MessageCycleOfsset almost expires;
   06: Check that after Message Cycle Offset expires a message is sent on the bus;
   07: Wait until Message Cycle Timer almost expires;
   08: VP (CanNm.ECUC_CanNm_00028, CanNm.EB_Ref.ECUC_CanNm_00059.1)
       Check that after message cycle time expires message is sent on the bus;
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.ECUC_CanNm_00059.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>479</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1605</internalId></specobject>
    <specobject>
      <id>TC_CANNM_PncDisabledNmTimoutTime</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_20/source/application/CanNm_ConTest_20.c</sourcefile>
      <sourceline>350</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   Test should prove that in case Pn is disabled bus goes to prepare sleep after
   Nm Time out Timer expires.
   Test also verifies that in case if Pnc is disabled Time Out Timer can be lower
   than PnResetTime (Test compiles).
  
Test Object: None.
Test Precondition: 
   - Partial Networking is enabled
   - Repeat Message Time is set to zero
   - Nm Timeout timer is lower than PnResetTime
  
Test Execution: 
   01: Initialize Stubs;
   02: Initialize CanNm;
   03: Do a passive startup;
   04: Check the current state is Ready Sleep State;
   05: Wait until CanNmTimoutTimer almost expires;
   06: Check the current state is Ready Sleep State;
   07: VP(CanNm.ASR403.CANNM030_Conf, CanNm.EB_Ref.ECUC_CanNm_00059.2)
       - Check the current state is Prepare Bus Sleep;
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM030_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>3</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.ECUC_CanNm_00059.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>480</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1606</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TC_CANNM_CanNmPnEnabled_False_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_21/source/application/CanNm_ConTest_21.c</sourcefile>
      <sourceline>43</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify if CanNmPnEnabled is FALSE, CanNm does not performs partial network aggregation
  
Test Object: None.
Test Precondition: 
    CanNmPnEnabled == FALSE for channel 1
  
Test Execution: 
    01: Initialize the stub values
    02: Initialize CanNm
    03: Goto Normal Opreation State
    Clear PduR_CanNmRxIndication stub count
    04: Invoke Rx Indication
    05: Invoke Main Function Once
    06: VP(CanNm.EB.PnEnabled_FALSE.1)
        - check PduR_CanNmRxIndication
    07: Clear User Data
    08: Wait until a message is sent on the Buss
    09: Check that CanIf_Transmit has been invoked
    10: Check that PduR_CanNmTriggerTransmit has been invoked
    11: Wait until Pn Reset Time expires
    12: VP(CanNm.EB.PnEnabled_FALSE.2)
        - Check that PduR_CanNmRxIndication is not called    
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.PnEnabled_FALSE.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>562</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.PnEnabled_FALSE.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>563</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1607</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TC_CANNM_PB_GetNodeIdentifier</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_22/source/application/CanNm_ConTest_22.c</sourcefile>
      <sourceline>71</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
     Ensure CanNm_GetNodeIdentifier is available considering channel
     based configuration.
     To test post-build selectable.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    VP (CanNm.EB.PBSelectable.Master):
        - Check that CanNm_PBcfg.h exists and can be included;
    VP (CanNm.EB.PBSelectable.FileName):
        - Verify that files CanNm_V0_PBcfg.h and CanNm_V1_PBcfg.h exist;
    01: VP(CanNm.EB.PBSelectable.TypeName)
        - Verify that types CanNm_V0_ConstConfigLayoutType and CanNm_V1_ConstConfigLayoutType exist;
    02: Inintialize CanNm with V0;
    03: VP(CanNm.ASR403.CANNM270) CanNm_GetNodeIdentifier to check value of tstByte for V0;
    04: Inintialize CanNm with V1;
    05: VP(CanNm.ASR403.CANNM270) CanNm_GetNodeIdentifier to check value of tstByte for V1;
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM270</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.PBSelectable.FileName</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>564</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.PBSelectable.TypeName</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>565</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.PBSelectable.Master</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>566</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1608</internalId></specobject>
    <specobject>
      <id>TC_CANNM_PB_CanNmRxIndication</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_22/source/application/CanNm_ConTest_22.c</sourcefile>
      <sourceline>139</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    The test should prove that PduR_CanNmRxIndication could be called with two different
    "UserPduInfoGlobal.SduLength" based on initialization variant.
    To test post-build selectable.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    VP (CanNm.EB.PBSelectable.Master):
        - Check that CanNm_PBcfg.h exists and can be included;
    VP (CanNm.EB.PBSelectable.FileName):
        - Verify that files CanNm_V0_PBcfg.h and CanNm_V1_PBcfg.h exist;
    01: VP(CanNm.EB.PBSelectable.TypeName)
        - Verify that types CanNm_V0_ConstConfigLayoutType and CanNm_V1_ConstConfigLayoutType exist;
    02: Initialize CanNm with V0;
    03: VP(CanNm.SWS_CanNm_00231)Simulate Rx data ;
    04: Check Det_ReportError_Stub.Count == 1;
    05: Initialize CanNm with V1;
    06: VP(CanNm.SWS_CanNm_00231) Simulate Rx data;
    07: Check Det_ReportError_Stub.Count == 0;
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00231</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>258</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.PBSelectable.FileName</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>564</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.PBSelectable.TypeName</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>565</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.PBSelectable.Master</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>566</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1609</internalId></specobject>
    <specobject>
      <id>TC_CANNM_PB_V0_MsgCycleOffset</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_22/source/application/CanNm_ConTest_22.c</sourcefile>
      <sourceline>222</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check Message cycle offset for Post build selectable variant V0.
  
Test Object: None.
Test Precondition: 
    Post-build selectable = enable;
  
Test Execution: 
    01: Initialize stub values;
    02: Inintialize CanNm with V0;
    03: Call Network Request;
    04: Call main function until Message Cycle Offset almoast expires;
    05: Check that CanIf_Transmit is not yet called;
    06: VP(CanNm.EB.ECUC_CanNm_00029)
        - Check that CanIf_Transmit is called.
  
Test Input: 
    Call Network request;
  
Test Output: 
    Check that CanIf_Transmit is called;
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.ECUC_CanNm_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>594</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1610</internalId></specobject>
    <specobject>
      <id>TC_CANNM_PB_V1_MsgCycleOffset</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_22/source/application/CanNm_ConTest_22.c</sourcefile>
      <sourceline>286</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check Message cycle offset for Post build selectable variant V1.
  
Test Object: None.
Test Precondition: 
    Post-build selectable = enable;
  
Test Execution: 
    01: Initialize stub values;
    02: Inintialize CanNm with V1;
    03: Call Network Request;
    04: Call main function until Message Cycle Offset almoast expires;
    05: Check that CanIf_Transmit is not yet called;
    06: VP(CanNm.EB.ECUC_CanNm_00029)
        - Check that CanIf_Transmit is called.
  
Test Input: 
    Call Network request;
  
Test Output: 
    Check that CanIf_Transmit is called;
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.ECUC_CanNm_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>594</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1611</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TC_CANNM_Schm_Call_TRUE</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_23_SchM/source/application/CanNm_ConTest_23.c</sourcefile>
      <sourceline>42</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Ensure that function calls are done via RTE SCHM mechanism.
  
Test Object: None.
Test Precondition: 
    CanNmMultiCoreSupport == TRUE
  
Test Execution: 
    01: Initialize module;
    02: VP (CanNm.EB.SchM_Call_Nm_RepeatMessageIndication):
        - Verify SchM_Call for Nm_RepeatMessageIndication;
    03: VP (CanNm.EB.SchM_Call_Nm_PduRxIndication):
        - Verify SchM_Call for Nm_PduRxIndication;
    04: VP (CanNm.EB.SchM_Call_Nm_BusSleepMode):
        - Verify SchM_Call for Nm_BusSleepMode;
    05: VP (CanNm.EB.SchM_Call_Nm_NetworkStartIndication):
        - Verify SchM_Call for Nm_NetworkStartIndication;
    06: VP (CanNm.EB.SchM_Call_Nm_NetworkMode):
        - Verify SchM_Call for Nm_NetworkMode;
    07: VP (CanNm.EB.SchM_Call_Nm_RemoteSleepCancellation):
        - Verify SchM_Call for Nm_RemoteSleepCancellation;
    08: VP (CanNm.EB.SchM_Call_Nm_PrepareBusSleepMode):
        - Verify SchM_Call for Nm_PrepareBusSleepMode;
    09: VP (CanNm.EB.SchM_Call_Nm_RemoteSleepIndication):
        - Verify SchM_Call for Nm_RemoteSleepIndication;
    10: VP (CanNm.EB.SchM_Call_Nm_StateChangeNotification):
        - Verify SchM_Call for Nm_StateChangeNotification;
    11: VP (CanNm.EB.SchM_Call_Nm_CarWakeUpIndication):
        - Verify SchM_Call for Nm_CarWakeUpIndication;
    12: VP (CanNm.EB.SchM_Call_Nm_TxTimeoutException):
        - Verify SchM_Call for Nm_TxTimeoutException;
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_RepeatMessageIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>576</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_PduRxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>574</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_BusSleepMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>570</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_NetworkStartIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>568</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_NetworkMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>569</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_RemoteSleepCancellation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>573</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_PrepareBusSleepMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>571</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_RemoteSleepIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>572</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_StateChangeNotification</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>575</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_CarWakeUpIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>578</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_TxTimeoutException</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>577</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1612</internalId></specobject>
    <specobject>
      <id>TC_CANNM_Schm_Call_NetworkStartIndication_TRUE</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_23_SchM/source/application/CanNm_ConTest_23.c</sourcefile>
      <sourceline>152</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Ensure that function calls are done via RTE SCHM mechanism.

Test Object: None.
Test Precondition: 
  CanNmMultiCoreSupport == TRUE

Test Execution: 
  01: Call CanNm_Init().
  02: The current state is NM_STATE_BUS_SLEEP.
  03: VP(CanNm.EB.SchM_Call_Nm_BusSleepMode):
      - Nm_BusSleepMode is not invoked.
  04: Nm_NetworkStartIndication, Nm_PduRxIndication and Nm_CarWakeUpIndication are initialized.
  05: Call CanNm_RxIndication() in bus sleep mode.
  06: Call CanNm_MainFunction().
  07: VP (CanNm.EB.SchM_Call_Nm_NetworkStartIndication):
      - Nm_NetworkStartIndication is invoked.
  08: VP (CanNm.EB.SchM_Call_Nm_PduRxIndication):
      - Nm_PduRxIndication is invoked.
  09: Nm_CarWakeUpIndication is not invoked.
  10: Set CarWakeup bit.
  11: Call Rxindication.
  12: VP(CanNm.EB.SchM_Call_Nm_CarWakeUpIndication):
      - Nm_CarWakeUpIndication is invoked.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_NetworkStartIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>568</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_BusSleepMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>570</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_PduRxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>574</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_CarWakeUpIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>578</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1613</internalId></specobject>
    <specobject>
      <id>TC_CANNM_Schm_Call_PrepareBusSleepMode_TRUE</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_23_SchM/source/application/CanNm_ConTest_23.c</sourcefile>
      <sourceline>257</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Ensure that function calls are done via RTE SCHM mechanism.

Test Object: None.
Test Precondition: 
  CanNmMultiCoreSupport == TRUE

Test Execution: 
  01: Call CanNm_Init().
  02: Call CanNm_NetworkRequest.
  03: VP(CanNm.EB.SchM_Call_Nm_NetworkMode):
      - Nm_NetworkMode is invoked.
  04: VP(CanNm.EB.SchM_Call_Nm_StateChangeNotification):
      - Nm_StateChangeNotification is invoked.
  05: Verify the current state.
  06: Call CanNm_NetworkRelease() in repeat message state.
  07: Call CanNm_MainFunction() until repeat message time expires.
  08: Verify the current state.
  09: Call CanNm_MainFunction() until remaining CanNm Timeout Time expires.
  10: VP(CanNm.EB.SchM_Call_Nm_PrepareBusSleepMode):
      - Verify that Nm_PrepareBusSleepMode is invoked.
  11: Verify the current state.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_NetworkMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>569</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_PrepareBusSleepMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>571</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_StateChangeNotification</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>575</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1614</internalId></specobject>
    <specobject>
      <id>TC_CANNM_Schm_Call_RemoteSleep_TRUE</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_23_SchM/source/application/CanNm_ConTest_23.c</sourcefile>
      <sourceline>368</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Ensure that function calls are done via RTE SCHM mechanism.

Test Object: None.
Test Precondition: 
  CanNmMultiCoreSupport == TRUE

Test Execution: 
  01: Invoke CanNm_Init().
  02: Invoke CanNm_NetworkRequest() in bus sleep state and verify that it
      returned "E_OK".
  03: Call CanNm_MainFunction().Invoke CanNm_MainFunction() in a loop until
      the CanNm repeat message time expires.
  04: Verify that the current state
      is "NM_STATE_NORMAL_OPERATION" and the current mode is "NM_MODE_NETWORK".
  05: Invoke CanNm_MainFunction() in a loop until the CanNm Remote Sleep
      Indication Time expires.
  06: VP(CanNm.EB.SchM_Call_Nm_RemoteSleepIndication):
      - Nm_RemoteSleepIndication is invoked.
  07: Call CanNm_MainFunction()
  08: Call CanNm_NetworkRelease() in normal operation state and verify that it
      returned "E_OK".
  09: Call CanNm_MainFunction()
  10: Verify that the current state is "NM_STATE_READY_SLEEP" and
      the current mode is "NM_MODE_NETWORK".
  11: Call CanNm_RxIndication().
  12: Call CanNm_MainFunction()
  13: VP (CanNm.EB.SchM_Call_Nm_RemoteSleepCancellation):
      - Nm_RemoteSleepCancellation() is invoked.
 
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_RemoteSleepIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>572</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_RemoteSleepCancellation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>573</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1615</internalId></specobject>
    <specobject>
      <id>TC_CANNM_Schm_Call_RepeatMessageIndication_TRUE</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_23_SchM/source/application/CanNm_ConTest_23.c</sourcefile>
      <sourceline>485</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Ensure that function calls are done via RTE SCHM mechanism.

Test Object: None.
Test Precondition: 
  CanNmMultiCoreSupport == TRUE

Test Execution: 
  01: Call CanNm_Init().
  02: Verify that the value of CanNm Pdu Control bit vector is
      not set to CANNM_PDU_OFF.
  03: Verify the value of CanNm Repeat Message Time is greater than 0.
  04: Call CanNm_NetworkRequest() and verify that it returns "E_OK".
  05: Call CanNm_MainFunction() in a loop until the CanNm message cycle
      Time expires.
  06: Invoke CanNm_RxIndication() with repeat message bit set.
  07: Call CanNm_MainFunction().
  08: VP (CanNm.EB.SchM_Call_Nm_RepeatMessageIndication):
      - Nm_RepeatMessageIndication() is invoked.
  09: Call CanNm_MainFunction() in a loop until the CanNm message cycle
      Time expires.
  10: Invoke CanNm_RxIndication() with repeat message bit set.
  11: Call CanNm_MainFunction().
  12: VP (CanNm.EB.SchM_Call_Nm_RepeatMessageIndication):
      - Nm_RepeatMessageIndication() is invoked.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_RepeatMessageIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>576</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1616</internalId></specobject>
    <specobject>
      <id>TC_CANNM_Schm_Call_TxTimeoutException_TRUE</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_23_SchM/source/application/CanNm_ConTest_23.c</sourcefile>
      <sourceline>579</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Ensure that function calls are done via RTE SCHM mechanism.

Test Object: None.
Test Precondition: 
  CanNmMultiCoreSupport == TRUE

Test Execution: 
  01: Initialize CanNm module.
  02: Request the network for the channel and execute the main function
      once to process the request.
  03: Call CanNm_MainFunction() in a loop until CanNm Message Cycle
      Offset time elapses.
  04: Call CanNm_MainFunction() in a loop until one more cycle will
      cause the Message Timeout time to elapse.
  05: Nm_TxTimeoutException() is not invoked.
  06: Call CanNm_MainFunction() once so that the Message Timeout time elapses.
  07: VP (CanNm.EB.SchM_Call_Nm_TxTimeoutException):
      - Nm_TxTimeoutException() is invoked (i.e., the NM Message
        Tx Timeout was started with CANNM_MSG_TIMEOUT_TIME after step 05).

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_TxTimeoutException</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>577</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1617</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TC_CANNM_Schm_Call_PduRxIndication_False</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_24_SchM/source/application/CanNm_ConTest_24.c</sourcefile>
      <sourceline>42</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Ensure that function calls are done via RTE SCHM mechanism.

Test Object: None.
Test Precondition: 
  CanNmMultiCoreSupport == TRUE

Test Execution: 
  01: Call CanNm_Init().
  02: VP(CanNm.EB.SchM_Call_Nm_BusSleepMode):
      - Nm_BusSleepMode is not invoked.
  03: Nm_NetworkStartIndication, Nm_PduRxIndication and Nm_CarWakeUpIndication are initialized.
  04: Call CanNm_RxIndication() in bus sleep mode.
  05: Call CanNm_MainFunction().
  06: VP (CanNm.EB.SchM_Call_Nm_NetworkStartIndication):
      - Nm_NetworkStartIndication is invoked.
  07: VP(CanNm.EB.SchM_Call_Nm_StateChangeNotification):
      - Nm_StateChangeNotification is not invoked.
  08: VP (CanNm.EB.SchM_Call_Nm_PduRxIndication):
      - Nm_PduRxIndication is not invoked.
  09: Nm_CarWakeUpIndication is not invoked.
  10: Call Rxindication.
  11: VP(CanNm.EB.SchM_Call_Nm_CarWakeUpIndication):
      - Nm_CarWakeUpIndication is not invoked.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_NetworkStartIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>568</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_BusSleepMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>570</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_PduRxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>574</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_CarWakeUpIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>578</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_StateChangeNotification</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>575</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1618</internalId></specobject>
    <specobject>
      <id>TC_CANNM_Schm_Call_RepeatMessageIndication_False</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_24_SchM/source/application/CanNm_ConTest_24.c</sourcefile>
      <sourceline>135</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Ensure that function calls are done via RTE SCHM mechanism.

Test Object: None.
Test Precondition: 
  CanNmMultiCoreSupport == TRUE

Test Execution: 
  01: Call CanNm_Init().
  02: Verify that the value of CanNm Pdu Control bit vector is
      not set to CANNM_PDU_OFF.
  03: Verify the value of CanNm Repeat Message Time is greater than 0.
  04: Call CanNm_NetworkRequest() and verify that it returns "E_OK".
  05: Call CanNm_MainFunction() in a loop until the CanNm message cycle
      Time expires.
  06: Invoke CanNm_RxIndication() with repeat message bit set.
  07: Call CanNm_MainFunction().
  08: VP (CanNm.EB.SchM_Call_Nm_RepeatMessageIndication):
      - Nm_RepeatMessageIndication() is not invoked.
  09: Call CanNm_MainFunction() in a loop until the CanNm message cycle
      Time expires.
  10: Invoke CanNm_RxIndication() with repeat message bit set.
  11: Call CanNm_MainFunction().
  12: VP (CanNm.EB.SchM_Call_Nm_RepeatMessageIndication):
      - Nm_RepeatMessageIndication() is not invoked.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_RepeatMessageIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>576</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1619</internalId></specobject>
    <specobject>
      <id>TC_CANNM_Schm_Call_RemoteSleep_False</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_24_SchM/source/application/CanNm_ConTest_24.c</sourcefile>
      <sourceline>226</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Ensure that function calls are done via RTE SCHM mechanism.

Test Object: None.
Test Precondition: 
  CanNmMultiCoreSupport == TRUE

Test Execution: 
  01: Invoke CanNm_Init().
  02: Invoke CanNm_NetworkRequest() in bus sleep state and verify that it
      returned "E_OK".
  03: Call CanNm_MainFunction().Invoke CanNm_MainFunction() in a loop until
      the CanNm repeat message time expires.
  04: Initialize Nm_RemoteSleepCancellation stub.
  05: Invoke CanNm_MainFunction() in a loop until the CanNm Remote Sleep
      Indication Time expires.
  06: VP(CanNm.EB.SchM_Call_Nm_RemoteSleepIndication):
      - Nm_RemoteSleepIndication is not invoked.
  07: Call CanNm_MainFunction()
  08: Call CanNm_NetworkRelease() in normal operation state and verify that it
      returned "E_OK".
  09: Call CanNm_MainFunction()
  10: Call CanNm_RxIndication().
  11: Call CanNm_MainFunction()
  12: VP (CanNm.EB.SchM_Call_Nm_RemoteSleepCancellation):
      - Nm_RemoteSleepCancellation() is not invoked.
 
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_RemoteSleepIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>572</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_RemoteSleepCancellation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>573</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1620</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TC_CANNM_Schm_Call_StateChangeNotification</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_25_SchMCallDet/source/application/CanNm_ConTest_25.c.m4</sourcefile>
      <sourceline>53</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
m4_ifelse(PM_CanNmDevErrorReport,1,\-:
    Check that in case SchM_Call_CanNm_RequiredCSEntry_Nm_StateChangeNotification_Channel0
    returns different value from SCHM_E_OK, DET is reported.
:-/,m4_ifelse( :else: )\-:
    Check that in case SchM_Call_CanNm_RequiredCSEntry_Nm_StateChangeNotification_Channel0
    returns SCHM_E_OK DET is not reported.
:-/m4_ifelse( :endif: ))
  
Test Object: None.
Test Precondition: 
    CanNmMultiCoreSupport == TRUE
  
Test Execution: 
    01: Initialize stubs and reset DET/NM/CANIF stubs.
    02: Initialize Det stub.
    03: Call CanNm_Init.
    04: VP(CanNm.EB.SchM_Call_DET):
m4_ifelse(PM_CanNmDevErrorReport,1,\-:
        - Check if DET is reported.
:-/,m4_ifelse( :else: )\-:
        - Check if DET is not reported.
:-/m4_ifelse( :endif: ))
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1621</internalId></specobject>
    <specobject>
      <id>TC_CANNM_Schm_Call_BusSleepMode</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_25_SchMCallDet/source/application/CanNm_ConTest_25.c.m4</sourcefile>
      <sourceline>120</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
m4_ifelse(PM_CanNmDevErrorReport,1,\-:
    Check that in case SchM_Call_CanNm_RequiredCSEntry_Nm_BusSleepMode_Channel0
    returns different value from SCHM_E_OK, DET is reported.
:-/,m4_ifelse( :else: )\-:
    Check that in case SchM_Call_CanNm_RequiredCSEntry_Nm_BusSleepMode_Channel0
    returns SCHM_E_OK DET is not reported.
:-/m4_ifelse( :endif: ))
  
Test Object: None.
Test Precondition: 
    CanNmMultiCoreSupport == TRUE
  
Test Execution: 
    01: Initialize CanNm.
    02: Do a passive startup.
    03: Wait until current state is Prepare Bus Sleep Mode.
    04: Wait until current state is Bus Sleep Mode.
    05: VP(CanNm.EB.SchM_Call_DET)
m4_ifelse(PM_CanNmDevErrorReport,1,\-:
        - If CanNmDevErrorReport == 1, check that DET is reported.
:-/,m4_ifelse( :else: )\-:
        - If CanNmDevErrorReport == 0, check that DET is not reported.
:-/m4_ifelse( :endif: ))
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1622</internalId></specobject>
    <specobject>
      <id>TC_CANNM_Schm_Call_NetworkStartIndication</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_25_SchMCallDet/source/application/CanNm_ConTest_25.c.m4</sourcefile>
      <sourceline>217</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
m4_ifelse(PM_CanNmDevErrorReport,1,\-:
    Check that in case SchM_Call_CanNm_RequiredCSEntry_Nm_NetworkStartIndication_Channel0
    returns different value from SCHM_E_OK, DET is reported.
:-/,m4_ifelse( :else: )\-:
    Check that in case SchM_Call_CanNm_RequiredCSEntry_Nm_NetworkStartIndication_Channel0
    returns SCHM_E_OK DET is not reported.
:-/m4_ifelse( :endif: ))
  
Test Object: None.
Test Precondition: 
    CanNmMultiCoreSupport == TRUE
  
Test Execution: 
    01: Intialize CanNm.
    02: Call CanNm_RxIndication.
    03: VP(CanNm.EB.SchM_Call_DET):
m4_ifelse(PM_CanNmDevErrorReport,1,\-:
        - Check that DET is reported.
:-/,m4_ifelse( :else: )\-:
        - Check that DET is not reported.
:-/m4_ifelse( :endif: ))
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1623</internalId></specobject>
    <specobject>
      <id>TC_CANNM_Schm_Call_PduRxIndication</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_25_SchMCallDet/source/application/CanNm_ConTest_25.c.m4</sourcefile>
      <sourceline>294</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
m4_ifelse(PM_CanNmDevErrorReport,1,\-:
    Check that in case SchM_Call_CanNm_RequiredCSEntry_Nm_PduRxIndication_Channel0
    returns different value from SCHM_E_OK, DET is reported.
:-/,m4_ifelse( :else: )\-:
    Check that in case SchM_Call_CanNm_RequiredCSEntry_Nm_PduRxIndication_Channel0
    returns SCHM_E_OK DET is not reported.
:-/m4_ifelse( :endif: ))
  
Test Object: None.
Test Precondition: 
    CanNmMultiCoreSupport == TRUE
  
Test Execution: 
    01: Initialize CanNm.
    02: Call CanNm_RxIndication.
    03: VP(CanNm.EB.SchM_Call_DET):
m4_ifelse(PM_CanNmDevErrorReport,1,\-:
        - If CanNmDevErrorReport = 1, Check that DET is reported.
:-/,m4_ifelse( :else: )\-:
        - If CanNmDevErrorReport = 0,Check that DET is not reported.
:-/m4_ifelse( :endif: ))
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1624</internalId></specobject>
    <specobject>
      <id>TC_CANNM_Schm_Call_PduRxIndication_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_25_SchMCallDet/source/application/CanNm_ConTest_25.c.m4</sourcefile>
      <sourceline>371</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
m4_ifelse(PM_CanNmDevErrorReport,1,\-:
    Check that in case SchM_Call_CanNm_RequiredCSEntry_Nm_NetworkMode_Channel0
    returns different value from SCHM_E_OK, DET is reported.
:-/,m4_ifelse( :else: )\-:
    Check that in case SchM_Call_CanNm_RequiredCSEntry_Nm_NetworkMode_Channel0
    returns SCHM_E_OK DET is not reported.
:-/m4_ifelse( :endif: ))
  
Test Object: None.
Test Precondition: 
    CanNmMultiCoreSupport == TRUE
  
Test Execution: 
    01: Initialize CanNm.
    02: Call CanNm_NetworkRequest.
    03: Wait until RemoteSleepIndication has been called.
    04: Call CanNm_NetworkRequest and call main function.
    05: Call CanNm_RxIndication and call main function.
    06: Check if state machine is in Ready Sleep State.
    07: Wait until state machine goes to Prepare Bus Sleep Mode.
    08: Call CanNm_RxIndication and call main function.
    09: Check if state machine is in Repeat Message State.
    10: VP(CanNm.EB.SchM_Call_DET):
m4_ifelse(PM_CanNmDevErrorReport,1,\-:
        - If CanNmDevErrorReport = 1, Check that DET is reported.
:-/,m4_ifelse( :else: )\-:
        - If CanNmDevErrorReport = 0,Check that DET is not reported.
:-/m4_ifelse( :endif: ))
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1625</internalId></specobject>
    <specobject>
      <id>TC_CANNM_Schm_Call_NetworkMode</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_25_SchMCallDet/source/application/CanNm_ConTest_25.c.m4</sourcefile>
      <sourceline>495</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
m4_ifelse(PM_CanNmDevErrorReport,1,\-:
    Check that in case SchM_Call_CanNm_RequiredCSEntry_Nm_NetworkMode_Channel0
    returns different value from SCHM_E_OK, DET is reported.
:-/,m4_ifelse( :else: )\-:
    Check that in case SchM_Call_CanNm_RequiredCSEntry_Nm_NetworkMode_Channel0
    returns SCHM_E_OK DET is not reported.
:-/m4_ifelse( :endif: ))
  
Test Object: None.
Test Precondition: 
    CanNmMultiCoreSupport == TRUE
  
Test Execution: 
    01: Initialize CanNm.
    02: Request the network.
    03: Go to Repeat Message State.
    04: VP(CanNm.EB.SchM_Call_DET)
m4_ifelse(PM_CanNmDevErrorReport,1,\-:
        - Check that DET is reported.
:-/,m4_ifelse( :else: )\-:
        - Check that DET is not reported.
:-/m4_ifelse( :endif: ))
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1626</internalId></specobject>
    <specobject>
      <id>TC_CANNM_Schm_Call_NetworkMode_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_25_SchMCallDet/source/application/CanNm_ConTest_25.c.m4</sourcefile>
      <sourceline>574</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
m4_ifelse(PM_CanNmDevErrorReport,1,\-:
    Check that in case SchM_Call_CanNm_RequiredCSEntry_Nm_NetworkMode_Channel0
    returns different value from SCHM_E_OK, DET is reported.
:-/,m4_ifelse( :else: )\-:
    Check that in case SchM_Call_CanNm_RequiredCSEntry_Nm_NetworkMode_Channel0
    returns SCHM_E_OK DET is not reported.
:-/m4_ifelse( :endif: ))
  
Test Object: None.
Test Precondition: 
    CanNmMultiCoreSupport == TRUE
  
Test Execution: 
    01: Initialize CanNm.
    02: Request the network.
    03: Go to Repeat Message State.
    04: VP(CanNm.EB.SchM_Call_DET)
m4_ifelse(PM_CanNmDevErrorReport,1,\-:
        - Check that DET is reported.
:-/,m4_ifelse( :else: )\-:
        - Check that DET is not reported.
:-/m4_ifelse( :endif: ))
    05: Go to Normal Operation State.
    06: VP(CanNm.EB.SchM_Call_DET)
m4_ifelse(PM_CanNmDevErrorReport,1,\-:
        - Check that DET is reported.
:-/,m4_ifelse( :else: )\-:
        - Check that DET is not reported.
:-/m4_ifelse( :endif: ))
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1627</internalId></specobject>
    <specobject>
      <id>TC_CANNM_Schm_Call_NetworkMode_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_25_SchMCallDet/source/application/CanNm_ConTest_25.c.m4</sourcefile>
      <sourceline>674</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
m4_ifelse(PM_CanNmDevErrorReport,1,\-:
    Check that in case SchM_Call_CanNm_RequiredCSEntry_Nm_NetworkMode_Channel0
    returns different value from SCHM_E_OK, DET is reported.
:-/,m4_ifelse( :else: )\-:
    Check that in case SchM_Call_CanNm_RequiredCSEntry_Nm_NetworkMode_Channel0
    returns SCHM_E_OK DET is not reported.
:-/m4_ifelse( :endif: ))
  
Test Object: None.
Test Precondition: 
    CanNmMultiCoreSupport == TRUE
  
Test Execution: 
    01: Initialize CanNm.
    02: Request the network.
    03: Go to Repeat Message State.
    04: Call CanNm_NetworkRelease and invoke main function.
    05: Call CanNm_RxIndication and invoke main function.
    06: Go to Ready Sleep State.
    07: VP(CanNm.EB.SchM_Call_DET)
m4_ifelse(PM_CanNmDevErrorReport,1,\-:
        - Check that DET is reported.
:-/,m4_ifelse( :else: )\-:
        - Check that DET is not reported.
:-/m4_ifelse( :endif: ))
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1628</internalId></specobject>
    <specobject>
      <id>TC_CANNM_Schm_Call_NetworkMode_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_25_SchMCallDet/source/application/CanNm_ConTest_25.c.m4</sourcefile>
      <sourceline>774</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
m4_ifelse(PM_CanNmDevErrorReport,1,\-:
    Check that in case SchM_Call_CanNm_RequiredCSEntry_Nm_NetworkMode_Channel0
    returns different value from SCHM_E_OK, DET is reported.
:-/,m4_ifelse( :else: )\-:
    Check that in case SchM_Call_CanNm_RequiredCSEntry_Nm_NetworkMode_Channel0
    returns SCHM_E_OK DET is not reported.
:-/m4_ifelse( :endif: ))
  
Test Object: None.
Test Precondition: 
    CanNmMultiCoreSupport == TRUE
  
Test Execution: 
    01: Initialize CanNm.
    02: Request the network.
    03: Wait until RemoteSleepIndication has been called.
    04: Call CanNm_NetworkRelease and invoke main function.
    05: Call CanNm_RepeatMessageRequest and call main function.
    06: Go to Network Mode.
    07: VP(CanNm.EB.SchM_Call_DET)
m4_ifelse(PM_CanNmDevErrorReport,1,\-:
        - Check that DET is reported.
:-/,m4_ifelse( :else: )\-:
        - Check that DET is not reported.
:-/m4_ifelse( :endif: ))
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1629</internalId></specobject>
    <specobject>
      <id>TC_CANNM_Schm_Call_PrepareBusSleepMode</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_25_SchMCallDet/source/application/CanNm_ConTest_25.c.m4</sourcefile>
      <sourceline>873</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
m4_ifelse(PM_CanNmDevErrorReport,1,\-:
    Check that in case SchM_Call_CanNm_RequiredCSEntry_Nm_BusSleepMode_Channel0
    returns different value from SCHM_E_OK, DET is reported.
:-/,m4_ifelse( :else: )\-:
    Check that in case SchM_Call_CanNm_RequiredCSEntry_Nm_BusSleepMode_Channel0
    returns SCHM_E_OK DET is not reported.
:-/m4_ifelse( :endif: ))
  
Test Object: None.
Test Precondition: 
    CanNmMultiCoreSupport == TRUE
  
Test Execution: 
    01: Initialize CanNm.
    02: Do a passive startup.
    03: Wait until state machine reaches Ready Sleep State.
    04: VP(CanNm.EB.SchM_Call_DET)
m4_ifelse(PM_CanNmDevErrorReport,1,\-:
        - Check that DET is reported.
:-/,m4_ifelse( :else: )\-:
        - Check that DET is not reported.
:-/m4_ifelse( :endif: ))
    05: Wait until state machine goes to Prepare Bus Sleep Mode.
    06: VP(CanNm.EB.SchM_Call_DET)
m4_ifelse(PM_CanNmDevErrorReport,1,\-:
        - Check that DET is reported.
:-/,m4_ifelse( :else: )\-:
        - Check that DET is not reported.
:-/m4_ifelse( :endif: ))
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1630</internalId></specobject>
    <specobject>
      <id>TC_CANNM_Schm_Call_RemoteSleepIndication</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_25_SchMCallDet/source/application/CanNm_ConTest_25.c.m4</sourcefile>
      <sourceline>989</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
m4_ifelse(PM_CanNmDevErrorReport,1,\-:
    Check that in case SchM_Call_CanNm_RequiredCSEntry_Nm_RemoteSleepIndication_Channel0
    returns different value from SCHM_E_OK, DET is reported.
:-/,m4_ifelse( :else: )\-:
    Check that in case SchM_Call_CanNm_RequiredCSEntry_Nm_RemoteSleepIndication_Channel0
    returns SCHM_E_OK DET is not reported.
:-/m4_ifelse( :endif: ))
  
Test Object: None.
Test Precondition: 
    CanNmMultiCoreSupport == TRUE
  
Test Execution: 
    01: Initialize CanNm.
    02: Request the network.
    03: Wait until RemoteSleepIndication has been called.
    04: VP(CanNm.EB.SchM_Call_DET)
m4_ifelse(PM_CanNmDevErrorReport,1,\-:
        - Check that DET is reported.
:-/,m4_ifelse( :else: )\-:
        - Check that DET is not reported.
:-/m4_ifelse( :endif: ))
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1631</internalId></specobject>
    <specobject>
      <id>TC_CANNM_Schm_Call_RemoteSleepCancellation</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_25_SchMCallDet/source/application/CanNm_ConTest_25.c.m4</sourcefile>
      <sourceline>1071</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
m4_ifelse(PM_CanNmDevErrorReport,1,\-:
    Check that in case SchM_Call_CanNm_RequiredCSEntry_Nm_RemoteSleepCancellation_Channel0
    returns different value from SCHM_E_OK, DET is reported.
:-/,m4_ifelse( :else: )\-:
    Check that in case SchM_Call_CanNm_RequiredCSEntry_Nm_RemoteSleepCancellation_Channel0
    returns SCHM_E_OK DET is not reported.
:-/m4_ifelse( :endif: ))
  
Test Object: None.
Test Precondition: 
    CanNmMultiCoreSupport == TRUE
  
Test Execution: 
    01: Initialize CanNm.
    02: Request the network.
    03: Wait until Remote Sleep Indication has been called.
    04: Call CanNm_RxIndication and invoke main function.
    05: Go to Repeat Message State.
    06: VP(CanNm.EB.SchM_Call_DET)
m4_ifelse(PM_CanNmDevErrorReport,1,\-:
        - Check that DET is reported.
:-/,m4_ifelse( :else: )\-:
        - Check that DET is not reported.
:-/m4_ifelse( :endif: ))
    07: Go to Normal Operation State.
    08: Wait until Remote Sleep Indication has been called.
    09: CanNm_RxIndication and invoke main function.
    10: Go to Normal Operation State.
    11: VP(CanNm.EB.SchM_Call_DET)
m4_ifelse(PM_CanNmDevErrorReport,1,\-:
        - Check that DET is reported.
:-/,m4_ifelse( :else: )\-:
        - Check that DET is not reported.
:-/m4_ifelse( :endif: ))
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1632</internalId></specobject>
    <specobject>
      <id>TC_CANNM_Schm_Call_CarWakeUpIndication</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_25_SchMCallDet/source/application/CanNm_ConTest_25.c.m4</sourcefile>
      <sourceline>1205</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
m4_ifelse(PM_CanNmDevErrorReport,1,\-:
    Check that in case SchM_Call_CanNm_RequiredCSEntry_Nm_CarWakeUpIndication_Channel0
    returns different value from SCHM_E_OK, DET is reported.
:-/,m4_ifelse( :else: )\-:
    Check that in case SchM_Call_CanNm_RequiredCSEntry_Nm_CarWakeUpIndication_Channel0
    returns SCHM_E_OK DET is not reported.
:-/m4_ifelse( :endif: ))
  
Test Object: None.
Test Precondition: 
    CanNmMultiCoreSupport == TRUE
  
Test Execution: 
    01: Initialize CanNm.
    02: Call CanNm_RxIndication.
    03: VP(CanNm.EB.SchM_Call_DET)
m4_ifelse(PM_CanNmDevErrorReport,1,\-:
        - Check DET is reported.
:-/,m4_ifelse( :else: )\-:
        - Check DET is not reported.
:-/m4_ifelse( :endif: ))
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1633</internalId></specobject>
    <specobject>
      <id>TC_CANNM_Schm_Call_TxTimeoutException</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_25_SchMCallDet/source/application/CanNm_ConTest_25.c.m4</sourcefile>
      <sourceline>1273</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
m4_ifelse(PM_CanNmDevErrorReport,1,\-:
    Check that in case SchM_Call_CanNm_RequiredCSEntry_Nm_TxTimeoutException_Channel0
    returns different value from SCHM_E_OK, DET is reported.
:-/,m4_ifelse( :else: )\-:
    Check that in case SchM_Call_CanNm_RequiredCSEntry_Nm_TxTimeoutException_Channel0
    returns SCHM_E_OK DET is not reported.
:-/m4_ifelse( :endif: ))
  
Test Object: None.
Test Precondition: 
    CanNmMultiCoreSupport == TRUE
  
Test Execution: 
    01: Initialize CanNm.
    02: Call CanNm_NetworkRequest and invoke main function.
    03: VP(CanNm.EB.SchM_Call_DET)
m4_ifelse(PM_CanNmDevErrorReport,1,\-:
        - Check DET is reported.
:-/,m4_ifelse( :else: )\-:
        - Check DET is not reported.
:-/m4_ifelse( :endif: ))
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1634</internalId></specobject>
    <specobject>
      <id>TC_CANNM_Schm_Call_RepeatMessageIndication</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_25_SchMCallDet/source/application/CanNm_ConTest_25.c.m4</sourcefile>
      <sourceline>1346</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
m4_ifelse(PM_CanNmDevErrorReport,1,\-:
    Check that in case SchM_Call_CanNm_RequiredCSEntry_Nm_RepeatMessageIndication_Channel0
    returns different value from SCHM_E_OK, DET is reported.
:-/,m4_ifelse( :else: )\-:
    Check that in case SchM_Call_CanNm_RequiredCSEntry_Nm_RepeatMessageIndication_Channel0
    returns SCHM_E_OK DET is not reported.
:-/m4_ifelse( :endif: ))
  
Test Object: None.
Test Precondition: 
    CanNmMultiCoreSupport == TRUE
  
Test Execution: 
    01: Initialize CanNm.
    02: Call CanNm_RxIndication.
    03: VP(CanNm.EB.SchM_Call_DET)
m4_ifelse(PM_CanNmDevErrorReport,1,\-:
        - Check DET is reported.
:-/,m4_ifelse( :else: )\-:
        - Check DET is not reported.
:-/m4_ifelse( :endif: ))
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1635</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TC_CANNM_CanNmPnInfoOffset</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_26/source/application/CanNm_ConTest_26.c</sourcefile>
      <sourceline>41</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if the content of EIRA changes because of a received NM PDU, CanNm
    inform the upper layers by calling PduR_CanNmRxIndication(). By means of
    the Rx Indication function the EIRA data shall be provided to the COM module.
  
Test Object: None.
Test Precondition: 
    CanNmPnInfo = true;
  
Test Execution: 
    01: Initialize Stubs
    02: Initialize CanNm
    03: Call CanNm_RxIndication
    04: VP(CanNm.EB.CanNmPnInfo)
        - PduR_CanNmRxIndication is called.
    05: EIRA data provided by COM module is valid.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmPnInfo</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>580</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1636</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TC_CANNM_CanIf_Transmit_ImmediateNmTransmissions</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_27/source/application/CanNm_ConTest_27.c</sourcefile>
      <sourceline>40</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If partial networking is enabled and CanNmRetryFirstMessageRequest is enabled and
    immediate messages are enabled and on the current main function cycle CanIf_Transmit
    return E_OK and on the next main function cycle network is requested again and
    network mode is re-entered again, CanIf_Transmit is called only once.
    After reset CanIf_Transmit_Stub to 0 and CanNm_NetworkRequest is called,
    CanIf_Transmit should be called once in the same mainfunction.
  
Test Object: None.
Test Precondition: 
    CanNmImmediateNmTransmissions != 0;
    CanNmMsgCycleOffset = 0;
    CanNmGlobalPnSupport = true;
    CanNmRetryFirstMessageRequest = true;
  
Test Execution: 
    01: Intialize the module;
    02: Set CanIf_Transmit return value to E_NOT_OK;
    03: Set stub CanIf_Transmit_Stub to 0;
    04: Check that the current state is NM_STATE_BUS_SLEEP for channel 0;
    05: Call CanNm_PassiveStartUp for channel 0;
    06: Call main function once;
    07: Reset stub CanIf_Transmit_Stub to 0;
    08: Set CanIf_Transmit return value to E_OK;
    09: Call CanNm_NetworkRequest for channel 0;
    10: Call main function once;
    11: VP (CanNm.SWS_CanNm_00005):
        - Check if CanIf_Transmit_Stub = 1;
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1637</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_ImmediateRestart</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_28/source/application/CanNm_ConTest_28.c</sourcefile>
      <sourceline>68</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that in case CanNmImmediateRestartEnabled is set to true and
    the state machine is in Prepare Bus Sleep Mode and the network is requested
    when calling the CanIf_Transmit, NM state is correct and one message is sent
    on the same main function.
  
Test Object: None.
Test Precondition: 
    'CanNmImmediateRestartEnabled' is set to "true";
    'CanNmComUserDataSupport' is set to "true";
  
Test Execution: 
    01: Initialize Stubs, CanNm;
    02: Request a passive start-up;
    03: Call Main function and wait until State Machine goes into Prepare Bus Sleep mode;
    04: Check that current state is Prepare Bus Sleep State;
    05: Call Passive Startup, Network request sequence;
    06: Reset CanIf_Transmit_Stub.Count;
    07: Call Main function once;
    08: Check that current state is Repeat Message State;
    09: VP (CanNm.SWS_CanNm_00122):
        - Check if CanIf_Transmit_Stub.Count = 1;
        - Check that on entry of Repeat Message State CanIf_Transmit has been called.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>190</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1638</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_CanIf_Transmit_Check_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_29/source/application/CanNm_ConTest_29.c</sourcefile>
      <sourceline>76</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Test shall prove that in case CanNmImmediateRestartEnabled is set to true
  and CanNmMsgCycleOffset is set to 0 and Network mode is entered via
  CanNm_NetworkRequest, then the number of sent messages is greater than zero.
  (Transmission does not gets stuck)

Test Object: None.
Test Precondition: 
  CanNmMsgCycleOffset is 0
  CanNmImmediateRestartEnabled is TRUE

Test Execution: 
  01: Initialize stubs
  02: Initialize CanNm
  03: Go to prepapre bus sleep mode
  04: Check current mode is prepare bus sleep mode
  05: Invoke CanNm_NetworkRequest
  06: Reset CanIf_Transmit stub count to 0
  07: Call main function once
  08: VP(CanNm.ECUC_CanNm_00009, CanNm.EB.ECUC_CanNm_00029)
      Check that CanIf_Transmit stub count is 1 and reset it to 0, and
      current state is repeat message state
  09: Invoke main function until more than 2 messages should be transmitted
  10: Check than the expected number of messages were transmitted

Test Input: 
  Call CanNm_NetworkRequest while state machine is in prepare bus sleep mode

Test Output: 
  Check that multiple messages are sent on the bus
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.ECUC_CanNm_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>594</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1639</internalId></specobject>
    <specobject>
      <id>TS_CanNm_CanIf_Transmit_Check_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_29/source/application/CanNm_ConTest_29.c</sourcefile>
      <sourceline>172</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   Test shall prove that in case CanNmMsgCycleOffset is set to 0 and
   current state is normal operation state
   and rx indications is triggered with repeat message bit set
   in context of CanIf_Transmit, then the state machine
   switches to repeat message state and transmission does not gets stuck.

Test Object: None.
Test Precondition: 
  CanNmMsgCycleOffset is 0
  CanNmNodeDetectionEnabled is TRUE

Test Execution: 
  01: Initialize stubs
  02: Initialize CanNm
  03: Go to normal operation state
  04: Check current state is normal operation
  05: Invoke main function till a message is about to be sent
  06: Set the repeat message bit to 1 in a recieved message
  07: Simulate a Rx message reception in context of CanIf_Transmit
  08: Reset CanIf_Transmit stub count to 0
  09: Call main function once
  10: VP(CanNm.EB.ECUC_CanNm_00029)
      Check that CanIf_Transmit stub count is 2 (one message from message timer cycle expire, and
      one from reentry to repeat message state) and reset it to 0, and
      check current state is repeat message state
  11: Invoke main function until more than 2 messages should be transmitted
  12: Check than the expected number of messages were transmitted

Test Input: 
  Call CanNm_RxIndication in context of CanIf_Transmit

Test Output: 
  Check that multiple messages are sent on the bus
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.ECUC_CanNm_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>594</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1640</internalId></specobject>
    <specobject>
      <id>TS_CanNm_CanIf_Transmit_Check_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_29/source/application/CanNm_ConTest_29.c</sourcefile>
      <sourceline>284</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Test shall prove that in case CanNmMsgCycleOffset is set to 0 and
  current state is normal operation state
  and CanNm_RepeatMessageRequest is triggered in context of CanIf_Transmit, then the
  state machine switches to repeat message state and transmission does not gets stuck.

Test Object: None.
Test Precondition: 
  CanNmMsgCycleOffset is 0
  CanNmNodeDetectionEnabled is TRUE

Test Execution: 
  01: Initialize stubs
  02: Initialize CanNm
  03: Go to normal operation state
  04: Check current state is normal operation
  05: Invoke main function till a message is about to be sent
  06: Simulate a CanNm_RepeatMessageRequest request in context of CanIf_Transmit
  07: Reset CanIf_Transmit stub count to 0
  08: Call main function once
  09: VP(CanNm.EB.ECUC_CanNm_00029)
      Check that CanIf_Transmit stub count is 2 (one message from message timer cycle expire, and
      one from reentry to repeat message state) and reset it to 0, and
      check current state is repeat message state
  10: Invoke main function until more than 2 messages should be transmitted
  11: Check than the expected number of messages were transmitted

Test Input: 
  Call CanNm_RepeatMessageRequest in context of CanIf_Transmit

Test Output: 
  Check that multiple messages are sent on the bus
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.ECUC_CanNm_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>594</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1641</internalId></specobject>
    <specobject>
      <id>TS_CanNm_CanIf_Transmit_Check_4</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_29/source/application/CanNm_ConTest_29.c</sourcefile>
      <sourceline>386</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   Test shall prove that in case UdpNmMsgCycleOffset is set to 0 and
   current state is normal operation state
   and CanNm_DisableCommunication is triggered
   and CanNm_EnableCommunication is triggered in context of CanIf_Transmit,
   then state machine remains in normal operation state and transmission does
   not gets stuck.

Test Object: None.
Test Precondition: 
  CanNmMsgCycleOffset is 0
  CanNmComControlEnabled is TRUE.

Test Execution: 
  01: Initialize stubs
  02: Initialize CanNm
  03: Go to normal operation state
  04: Check current state is normal operation
  05: Invoke main function till a message is about to be sent
  06: Simulate a call to CanNm_DisableCommunication then a call to CanNm_EnableCommunication
      in context of CanIf_Transmit
  07: Reset CanIf_Transmit stub count to 0
  08: Call main function once
  09: VP(CanNm.EB.ECUC_CanNm_00029)
      Check that CanIf_Transmit stub count is 1 and reset it to 0, and
      check current state is normal operation state
  10: Invoke main function until more than 2 messages should be transmitted
  11: Check than the expected number of messages were transmitted

Test Input: 
  Call CanNm_DisableCommunication and CanNm_EnableCommunication in context of CanIf_Transmit

Test Output: 
  Check that multiple messages are sent on the bus
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.ECUC_CanNm_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>594</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1642</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_32050</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_3/source/application/CanNm_ConTest_3.c</sourcefile>
      <sourceline>44</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    To test the CanNm_Init, CanNm_GetState and CanNm_GetVersionInfo
    functionality.
  
Test Object: None.
Test Precondition: 
   * CanNmVersionInfoApi is enabled.
  
Test Execution: 
    01: Initialize the CanNm module.
    02: VP (CanNm.SWS_CanNm_00208, CanNm.SWS_CanNm_00141, CanNm.SWS_CanNm_00223, CanNm.SWS_CanNm_00144, CanNm.SWS_CanNm_00091):
        - The default state is Bus Sleep and mode is Bus sleep mode.
    03: Call CanNm_GetVersionInfo.
    04: Verify the version information.
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00208</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>241</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00141</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>202</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00223</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>253</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00144</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>204</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00091</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>386</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1643</internalId></specobject>
    <specobject>
      <id>TS_CanNm_32051</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_3/source/application/CanNm_ConTest_3.c</sourcefile>
      <sourceline>115</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    To test Remote Sleep Indication in Normal Operation state.
  
Test Object: None.
Test Precondition: 
    * CanNmRemoteSleepIndEnabled is enabled.
  
Test Execution: 
    01: Go to the NormalOperationState.
    02: Call CanNm_MainFunction() until the remote sleep indication timer
        expires in the Normal operation state.
    03: VP (CanNm.SWS_CanNm_00150):
        - Nm_RemoteSleepIndication is called.
    04: VP (CanNm.SWS_CanNm_00153):
        - CanNm_CheckRemoteSleepIndication() sets nmRemoteSleepIndPtr
          to TRUE indicating that CanNm has indicated remote sleep.
    05: Verify whether the current state is Normal operation state.
    06: Go to the Repeat message state.
    07: VP (CanNm.SWS_CanNm_00227, CanNm.SWS_CanNm_00153, CanNm.EB_Ref.SWS_CanNm_00154.3):
        - CanNm_CheckRemoteSleepIndication() returns E_NOT_OK as
          the state is not normal operation or ready sleep.
    08: Go to Ready Sleep state
    09: VP (CanNm.SWS_CanNm_00227):
        - CanNm_CheckRemoteSleepIndication() returns E_OK as
          the state is ready sleep.
    10: Call CanNm_DisableCommunication()
    11: Call network request and mainfunction to get to the NormalOperationState.
    12: Check if the current state is indeed NormalOperationState
    13: Call CanNm_MainFunction() until the remote sleep indication timer expires
    14: VP (CanNm.EB_Ref.SWS_CanNm_00180, CanNm.EB.Dsn.StateDynamics.Internal_Transition_NORMAL_OPERATION_STATE):
        - Check if Nm_RemoteSleepIndication was not called because the communication is disabled and
        that the current state is NM_STATE_NORMAL_OPERATION
    15: While communication is disabled call RxIndication
    16: Call main function RSITime times
    17: VP (CanNm.EB_Ref.SWS_CanNm_00180, CanNm.EB.Dsn.StateDynamics.Internal_Transition_NORMAL_OPERATION_STATE):
        - Check if Nm_RemoteSleepIndication was not called because the communication is disabled and
        that the current state is NM_STATE_NORMAL_OPERATION
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00150</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>208</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00153</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>211</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00154.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>444</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00227</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>256</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00180</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>462</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.Internal_Transition_NORMAL_OPERATION_STATE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1425</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1644</internalId></specobject>
    <specobject>
      <id>TS_CanNm_32052</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_3/source/application/CanNm_ConTest_3.c</sourcefile>
      <sourceline>293</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    To test Remote sleep cancellation in Normal Operation state.
  
Test Object: None.
Test Precondition: 
    * CanNmRemoteSleepIndEnabled is enabled.
    * CanNmStateChangeIndEnabled is enabled.
  
Test Execution: 
    01. Go to the Normal operation state.
    02. Call CanNm_MainFunction() until the Remote sleep indication timer expires
    03: Provide an Rx indication in ready sleep state.
    04: VP (CanNm.EB.Dsn.StateDynamics.REPEAT_MESSAGE_REASON_NORMAL_OPERATION_REMOTE_SLEEP):
        - Call CanNm_MainFunction() once so that a transition occurs to
        Repeat message state.
        - Verify that Nm_RemoteSleepCancellation() is called.
    05: VP (CanNm.EB_Ref.SWS_CanNm_00152.1, CanNm.EB_Ref.SWS_CanNm_00151.1, CanNm.SWS_CanNm_00093):
        - The following Nm notifications are invoked:
          Remote Sleep Cancellation, state change notification,
          Pdu Rx Indication and Repeat Message Indication.
    06: Verify whether the current state is repeat message state.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00152.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>440</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00151.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>438</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00093</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>162</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.REPEAT_MESSAGE_REASON_NORMAL_OPERATION_REMOTE_SLEEP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1427</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1645</internalId></specobject>
    <specobject>
      <id>TS_CanNm_33023</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_3/source/application/CanNm_ConTest_3.c</sourcefile>
      <sourceline>394</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    To test the APIs CanNm_GetNodeIdentifier() and
    CanNm_GetLocalNodeIdentifier().
  
Test Object: None.
Test Precondition: 
    CanNmPduNidPosition shall not be CANNM_PDU_OFF.
  
Test Execution: 
    01: Go to the Repeat message state.
    02: Request network for a CanNm channel.
    03: Call CanNm_MainFunction until the Repeat message timer expires.
    04: Verify whether the current state is normal operation state and verify
        that no DET errors has been reported.
    05: Call CanNm_GetPduData to get the whole PDU data out of the most
        recently received NM message.
    06: Call CanNm_GetNodeIdentifier()
    07: VP (CanNm.SWS_CanNm_00132, CanNm.ECUC_CanNm_00025):
        - The returned node identifier is the same as the node Id of the
          last received PDU.
         (Node Id has to be compared with the source node Id in the position
          defined by CanNmPduNidPosition of received Nm PDU)
    08: Call CanNm_GetLocalNodeIdentifier()
    09: VP (CanNm.SWS_CanNm_00133):
        - The returned node identifier is the same as the configured
          local node identifier.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00132</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>198</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00133</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00025</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>90</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1646</internalId></specobject>
    <specobject>
      <id>TS_CanNm_RequestBusSync</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_3/source/application/CanNm_ConTest_3.c</sourcefile>
      <sourceline>498</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    To test the following behavior of CanNm_RequestBusSynchronization() API:
    - The service call CanNm_RequestBusSynchronization shall trigger
      transmission of a single Network Management PDU if
      CANNM_PASSIVE_MODE_ENABLED (configuration parameter)
      is not defined. (CanNm.SWS_CanNm_00130)
    - If CanNm_RequestBusSynchronization is called in Bus-Sleep Mode
      and Prepare Bus-Sleep Mode the CanNm module shall not execute
      the service and shall return E_NOT_OK. (CanNm.EB_Ref.SWS_CanNm_00187.1, CanNm.EB_Ref.SWS_CanNm_00187.2)
    - The service CanNm_RequestBusSynchronization shall return E_NOT_OK
      if the Network Management PDU transmission ability is disabled.
      (CanNm.SWS_CanNm_00181)
  
Test Object: None.
Test Precondition: 
    - Important test configuration details:
      - CanNmBusSynchronizationEnabled is set to 'true'.
      - CanNmPassiveModeEnabled is set to 'false'.
  
Test Execution: 
    01. Go to bus sleep state.
    02: Call CanNm_RequestBusSynchronization() in bus sleep state
    03: VP (CanNm.EB_Ref.SWS_CanNm_00187.1):
        - CanNm_RequestBusSynchronization() returns E_NOT_OK.
    04: Go to prepare bus sleep state.
    05: Call CanNm_RequestBusSynchronization() in prepare bus sleep state
    06: VP (CanNm.EB_Ref.SWS_CanNm_00187.2):
        - CanNm_RequestBusSynchronization() returns E_NOT_OK.
    07: Go to repeat message state.
    08: Disable the NM-PDU transmission ability (CanNm_DisableCommunication).
    09: VP (CanNm.SWS_CanNm_00181):
        - CanNm_RequestBusSynchronization() returns E_NOT_OK.
        - CanIf_Transmit() is not called to transmit Nm PDUs.
    10: Enable the NM-PDU transmission ability (CanNm_EnableCommunication).
    11: Call CanNm_RequestBusSynchronization() in repeat message state
    12: VP (CanNm.SWS_CanNm_00130):
        - CanNm_RequestBusSynchronization() returns E_OK.
        - CanIf_Transmit() is called to transmit Nm PDUs.
    13: Go to normal operation state.
    14: Disable the NM-PDU transmission ability (CanNm_DisableCommunication).
    15: VP (CanNm.SWS_CanNm_00181):
        - CanNm_RequestBusSynchronization() returns E_NOT_OK.
        - CanIf_Transmit() is not called to transmit Nm PDUs.
    16: Enable the NM-PDU transmission ability (CanNm_EnableCommunication).
    17: Call CanNm_RequestBusSynchronization() in normal operation state.
    18: VP (CanNm.SWS_CanNm_00130):
        - CanNm_RequestBusSynchronization() returns E_OK.
        - CanIf_Transmit() is called to transmit Nm PDUs.
    19: Go to ready sleep state.
    20: Disable the NM-PDU transmission ability (CanNm_DisableCommunication).
    21: VP (CanNm.SWS_CanNm_00181):
        - CanNm_RequestBusSynchronization() returns E_NOT_OK.
        - CanIf_Transmit() is not called to transmit Nm PDUs.
    22: Enable the NM-PDU transmission ability (CanNm_EnableCommunication).
    23: Call CanNm_RequestBusSynchronization() in ready sleep state.
    24: VP (CanNm.SWS_CanNm_00130):
        - CanNm_RequestBusSynchronization() returns E_OK.
        - CanIf_Transmit() is called to transmit Nm PDUs.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00130</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00187.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>475</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00187.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>476</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00181</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1647</internalId></specobject>
    <specobject>
      <id>TS_CanNm_33025</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_3/source/application/CanNm_ConTest_3.c</sourcefile>
      <sourceline>654</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    To test CanNm_PassiveStartUp() in different states.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Go to state NM_STATE_BUS_SLEEP for channel 1.
    02: Check CanNm_PassiveStartUp return E_OK and check no det error.
    03: Call main function.
    04: VP(CanNm.EB_Ref.SWS_CanNm_00128.1):
        - Check that current state is NM_STATE_REPEAT_MESSAGE for channel 1.
    05: Go to state NM_STATE_PREPARE_BUS_SLEEP for channel 1.
    06: Check CanNm_PassiveStartUp return E_OK and check no det error.
    07: Call main function.
    08: VP(CanNm.EB_Ref.SWS_CanNm_00128.2,
           CanNm.EB.Dsn.StateDynamics.PASSIVE_START_PREPARE_BUS_SLEEP_MODE):
        - Check that current state is NM_STATE_REPEAT_MESSAGE for channel 1.
    09: VP(SWS_CanNm_00147):
        - Check CanNm_PassiveStartUp return E_NOT_OK and check no det error.
    10: Call main function.
    11: Check that current state is NM_STATE_REPEAT_MESSAGE for channel 1.
    12: Go to state NM_STATE_NORMAL_OPERATION for channel 1.
    13: VP(SWS_CanNm_00147):
        - Check CanNm_PassiveStartUp return E_NOT_OK and check no det error.
    14: Call main function.
    15: Check that current state is NM_STATE_NORMAL_OPERATION for channel 1.
    16: Go to state NM_STATE_READY_SLEEP for channel 1.
    17: VP(SWS_CanNm_00147):
        - Check CanNm_PassiveStartUp return E_NOT_OK and check no det error.
    18: Call main function.
    19: Check that current state is NM_STATE_READY_SLEEP for channel 1.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00147</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>206</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00128.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>477</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00128.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>478</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.PASSIVE_START_PREPARE_BUS_SLEEP_MODE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1447</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1648</internalId></specobject>
    <specobject>
      <id>TS_CanNm_33026</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_3/source/application/CanNm_ConTest_3.c</sourcefile>
      <sourceline>793</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    To test CanNm_RepeatMessageRequest() in different states.
  
Test Object: None.
Test Precondition: 
    CanNmNodeDetectionEnabled shall be true.
  
Test Execution: 
    01: Go to BusSleepState.
    02: VP (CanNm.EB_Ref.SWS_CanNm_00137.3):
        - CanNm_RepeatMessageRequest() returns E_NOT_OK.
    03: Go to PrepareBusSleepState.
    04: VP (CanNm.EB_Ref.SWS_CanNm_00137.2):
        - CanNm_RepeatMessageRequest() returns E_NOT_OK.
    05: Go to RepeatMessageState.
    06: VP (CanNm.EB_Ref.SWS_CanNm_00137.1):
        - CanNm_RepeatMessageRequest() returns E_NOT_OK.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00137.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>425</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00137.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>426</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00137.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>427</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1649</internalId></specobject>
    <specobject>
      <id>TS_CanNm_33027</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_3/source/application/CanNm_ConTest_3.c</sourcefile>
      <sourceline>862</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    To test the acceptance of CanNm_NetworkRequest() and CanNm_NetworkRelease()
    in different states.
  
Test Object: None.
Test Precondition: 
    * CanNmPassiveModeEnabled is disabled.
  
Test Execution: 
    Repeat steps 01, 02 and 03 for all states.
    01: Call CanNm_NetworkRequest() and CanNm_NetworkRelease().
    02: 02.a: VP (CanNm.SWS_CanNm_00104): - Call CanNm_NetworkRequest().
        02.b: VP (CanNm.SWS_CanNm_00105): - Call CanNm_NetworkRelease().
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00105</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>173</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1650</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0087</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_3/source/application/CanNm_ConTest_3.c</sourcefile>
      <sourceline>963</sourceline>
      <version>1</version>
      <description>Test Synopsis: Passive Start up test
Test Description: 
    Verify the behavior of CanNm_PassiveStartUp() in the Bus Sleep Mode,
    Network Mode and Prepare Bus Sleep Mode.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Invoke CanNm_Init().
    02: For each configured CanNm Channel execute the following:
    03: Verify whether the value of CanNm Repeat Message Time is greater than 0.
    04: Call CanNm_PassiveStartUp() in bus sleep mode and verify that it returns E_OK.
    05: Call CanNm_MainFunction for changing the state to repeat message.
    06: VP (CanNm.EB_Ref.SWS_CanNm_00128.1, CanNm.SWS_CanNm_00211, CanNm.EB.Dsn.StateDynamics.PASSIVE_START_BUS_SLEEP_MODE):
        - Current state is "NM_STATE_REPEAT_MESSAGE" and current mode
          is "NM_MODE_NETWORK".
    07: VP (SWS_CanNm_00147):
        - CanNm_PassiveStartUp() returns "E_NOT_OK" in repeat message state.
    08: Call CanNm_MainFunction() in a loop until the Repeat Message Time
        elapses.
    09: VP (CanNm.SWS_CanNm_00143):
        - Current state is "NM_STATE_READY_SLEEP" (to veriy that netowrk state
          is set to 'released' by default after initialization).
    10: Call CanNm_MainFunction() in a loop until the remaining part of
        CanNm Timeout Time elapses.
    11: Verify that the state is prepare bus sleep.
    12: CanNm_PassiveStartUp() returns "E_OK" in prepare bus sleep state.
    13: Call CanNm_MainFunction().
    14: VP (CanNm.EB_Ref.SWS_CanNm_00128.2):
        - Current state is "NM_STATE_REPEAT_MESSAGE" and current mode
        is "NM_MODE_NETWORK".
  
Test Input: None.
Test Output: 
  </description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00143</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>203</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00211</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>242</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00147</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>206</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00128.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>477</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00128.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>478</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.PASSIVE_START_BUS_SLEEP_MODE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1420</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1651</internalId></specobject>
    <specobject>
      <id>TC_CANNM_PnDisable_PNIBit_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_3/source/application/CanNm_ConTest_3.c</sourcefile>
      <sourceline>1113</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if CanNmPnEnabled is FALSE then CanNm module always sets
    the value of the transmitted PNI bit to 0.
  
Test Object: None.
Test Precondition: 
    * CanNmPnEnabled == false
  
Test Execution: 
    01: Initialize the stubs.
    02: Invoke CanNm_Init().
    03: Execute the folowing for every channel.
    04: Goto Repeat Message state.
    05: Invoke Main Function in a loop until Message Cycle Offset or
        Message Cycle time elapses.
    06: VP (CanNm.SWS_CanNm_00414):
        - CanIf_Transmit is Invoked.
        - PNI bit(6th bit of CBV byte) is not set.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00414</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>337</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1652</internalId></specobject>
    <specobject>
      <id>TC_CANNM_ActiveWakeupBit_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_3/source/application/CanNm_ConTest_3.c</sourcefile>
      <sourceline>1197</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that, if the CanNm performs a state change from BusSleep state or
    PrepareBusSleep state to NetworkMode due to a call to CanNm_NetworkRequest
    (i.e. due to an active wake up) and CanNmActiveWakeupBitEnabled is TRUE,
    the CanNm sets the ActiveWakeupBit in the CBV. Further ensure that
    content of user data is not affected.
    Verify that, if the CanNm module leaves the NetworkMode, the CanNm module
    resets the ActiveWakeupBit in the CBV.
  
Test Object: None.
Test Precondition: 
    CanNmActiveWakeupBitEnabled = true.
  
Test Execution: 
    01: Initialize stubs.
    02: Invoke CanNm_Init().
    03: For each configured channel, execute steps 04-30.
    04: Ensure current state is BusSleepState
    05: Reset CanIf Tx buffer and set user data in CanNm
    06: Invoke Network Request
    07: Invoke Main Function once to process CanNm_NetworkRequest
    07: Check if Repeat Message State is entered.
    09: Check if CanNm Offset Time is greater than zero then proceed to step 08
        else continue with step 09.
    10: Invoke Main Function in a loop until Message Cycle Offset expires.
    11: VP (CanNm.EB_Ref.SWS_CanNm_00401.1):
        - ActiveWakeUp bit is set in CBV.
        - Content of User data is unchanged.
    12: Invoke Main Function in a loop till time equivalent of
        Repeat Message Time expires.
    13: Check if Normal Operation state is reached.
    14: VP (CanNm.EB_Ref.SWS_CanNm_00401.1):
        - ActiveWakeUp bit is set in CBV.
    15: Invoke Network Release.
    16: Invoke Main Function once to process CanNm_NetworkRelease.
    17: Check if Ready Sleep state is entered.
    18: VP (CanNm.EB_Ref.SWS_CanNm_00401.1):
        - ActiveWakeUp bit is set in CBV.
    19: Invoke Main Function in a loop till time equivalent of
        TimeoutTime expires.
    20: Check if Prepare Bus Sleep Mode is entered.
    21: Invoke CanNm_RxIndication() and invoke mainfunction to enter Network
        Mode.
    22: Check if Repeat Message State is entered.
    23: Check if CanNm Offset Time is greater than zero then proceed to step 22
        else continue with step 23.
    24: Invoke Main Function in a loop until Message Cycle Offset expires.
    25: VP (CanNm.SWS_CanNm_00402):
        - ActiveWakeUp bit is cleared in CBV.
    26: Invoke Tst_GotoState() to enter Prepare Bus Sleep State.
    27: Invoke Network Request.
    28: Invoke Main Function once to process CanNm_NetworkRequest.
    29: Check if Repeat Message State is entered.
    30: Check if CanNm Offset Time is greater than zero then proceed to step 31
        else continue with step 32
    31: Invoke Main Function in a loop until Message Cycle Offset expires
    32: VP (CanNm.EB_Ref.SWS_CanNm_00401.2):
        * ActiveWakeUp bit is set in CBV.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00401.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>454</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00401.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>455</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00402</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>325</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1653</internalId></specobject>
    <specobject>
      <id>TC_CANNM_ActiveWakeupBit_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_3/source/application/CanNm_ConTest_3.c</sourcefile>
      <sourceline>1487</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that, if CanNm performs a state change from BusSleep state to
    NetworkMode due to a call to CanNm_PassiveStartUp (i.e. due to a passive
    wakeup) and CanNmActiveWakeupBitEnabled is TRUE, the CanNm does not set
    the ActiveWakeupBit in the CBV.
  
Test Object: None.
Test Precondition: 
    CanNmPassiveModeEnabled = true.
    CanNmActiveWakeupBitEnabled = true.
  
Test Execution: 
    01: Initialize stubs.
    02. Invoke CanNm_Init().
    03: For each configured channel, execute steps 04-10.
    04: Invoke Passive StartUp.
    05: Invoke Main Function once to process CanNm_PassiveStartUp.
    06: Check if Repeat Message State is entered.
    07: Check if CanNm Offset Time is greater than zero then proceed to step 08
        else continue with step 09.
    08: Invoke Main Function in a loop until Message Cycle Offset expires.
    09: VP (CanNm.EB_Ref.SWS_CanNm_00401.1):
        - ActiveWakeUp bit is not set in CBV.
    10: Enter the Bus Sleep Mode.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00401.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>454</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1654</internalId></specobject>
    <specobject>
      <id>TS_CanNm_33028</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_3/source/application/CanNm_ConTest_3.c</sourcefile>
      <sourceline>1588</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that in case of communication is disabled
    the function CanIf_Transmit is not called any more.
    After the communication is enabled sending of PDUs is restarted.
    This test checks if the Message Cycle timer
    expires on the same cycle as the communication is disabled,
    NM PDUs are not sent.
  
Test Object: None.
Test Precondition: 
    CanNmPassiveModeEnabled is disabled.
  
Test Execution: 
    01: Initialize stubs.
    02: Initialize CanNm.
    03: Initialize CanIf_Transmit_Stub.Count.
    04: Request the network.
    05: Wait a couple of cycles for CanNm to send out some data.
    06: Check that CanNm has send the data. (CanIf_Transmit has been called).
    07: Wait until Message cycle timer has almost expired.
    08: Disable the communication.
    09: On the first cycle the MessageCycleTimer expires so it emits an event
        which if the communication wouldn't be disabled it would trigger
        the transmission of data (CanIf_Transmit).
        Wait some extra cycles to check that CanIf_Transmit is not called.
    10: VP(CanNm.SWS_CanNm_00170):
        If the communication is disabled the CanIf_Transmit function
        shall not be called.
    11: Enable the communication.
    12: Wait some main function cycles.
    13: Check that after enabling the communication
        CanIf_Transmit_Stub is called again.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00170</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1655</internalId></specobject>
    <specobject>
      <id>TS_CanNm_33029</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_3/source/application/CanNm_ConTest_3.c</sourcefile>
      <sourceline>1690</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that in case of communication is disabled
    the function CanIf_Transmit is not called any more.
    After the communication is enabled sending of PDUs is restarted.
    This test checks that in case CanNmBusLoadReductionActive is enabled
    and CanNm_RxIndication is invoked (while communication is disabled)
    the transmission of PDUs is not restarted.
  
Test Object: None.
Test Precondition: 
    CanNmPassiveModeEnabled is disabled.
    CanNmBusLoadReductionActive is enabled.
  
Test Execution: 
    01: Initialize stubs.
    02: Initialize CanNm.
    03: Initialize CanIf_Transmit_Stub.Count.
    04: Request the network.
    05: Wait until Repeat Message Timer expires.
    06: Check that CanIf_Transmit has been called.
    07: Reset CanIf_Transmit_Stub.Count.
    08: VP (CanNm.EB.Dsn.StateDynamics.Internal_Transition_NETWORK_MODE_1):
        - Disable the communication.
    09: Wait some main function cycles.
    10: Invoke CanNm_RxIndication.
    11: Wait some main function cycles.
    12: VP(CanNm.SWS_CanNm_00170):
        - If the communication is disabled the CanIf_Transmit function
        shall not be called.
    13: VP (CanNm.EB.Dsn.StateDynamics.Internal_Transition_NETWORK_MODE_0):
        - Enable The communication.
    14: Wait some main function cycles.
    15: Check that after enabling the communication
        CanIf_Transmit_Stub is called again.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00170</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.Internal_Transition_NETWORK_MODE_0</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1442</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.Internal_Transition_NETWORK_MODE_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1443</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1656</internalId></specobject>
    <specobject>
      <id>TS_CanNm_33030</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_3/source/application/CanNm_ConTest_3.c</sourcefile>
      <sourceline>1803</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   The test tests that function CanNm_CheckRemoteSleepIndication returns
   correct values in all states and sub-states and performs
   all transitions between sub-states of
   "Normal Operation State" and "Ready Sleep State".
  
Test Object: None.
Test Precondition: 
    CanNmPassiveModeEnabled is disabled.
    CanNmRemoteSleepIndEnabled is enabled
  
Test Execution: 
    01: Initialize stubs.
    02: Initialize CanNm.
    03: VP (CanNm.EB_Ref.SWS_CanNm_00154.1)
        - Check that in "Bus Sleep Mode" function CanNm_CheckRemoteSleepIndication
          returns E_NOT_OK.
    04: Request the network.
    05: VP (CanNm.EB_Ref.SWS_CanNm_00154.3)
        - Check that in "Repeat Message State" function CanNm_CheckRemoteSleepIndication
          returns E_NOT_OK.
    06: Go to "Normal Operation State" (Repeat message timer expires).
    07: VP (CanNm.SWS_CanNm_00153)
        - Check that in "Normal Operation State" function CanNm_CheckRemoteSleepIndication
          returns E_OK and the "Remote Sleep Indication" is not set
          (while "Remote Sleep Indication" timer has not yet expired).
    08: VP (CanNm.SWS_CanNm_00150)
        - Check that after "Remote Sleep Indication" timer expired
          Nm_RemoteSleepIndication is called .
    09: VP (CanNm.SWS_CanNm_00153)
        - Check that after "Remote Sleep Indication" timer expired,
          function CanNm_CheckRemoteSleepIndication returns E_OK and the
          "Remote Status Indication" as set to TRUE.
    10: Release the network.
    11: VP (CanNm.SWS_CanNm_00153)
        - Check that function CanNm_CheckRemoteSleepIndication returns E_OK and
          "Remote Status Indication" as set to TRUE, while "Remote Status Indication"
          was detected in "Normal Operation State" and no Rx_Indication has been received.
    12: VP (CanNm.EB_Ref.SWS_CanNm_00151.2)
        - Check that after and Rx_indication has been received,
          function Nm_RemoteSleepCancellation is called.
    13: VP (CanNm.SWS_CanNm_00153)
        - Check that after Rx_Indication has been received
         the function CanNm_CheckRemoteSleepIndication
         returns status of "Remote Sleep Indication" as FALSE.
    14: Request the network.
    15: VP (CanNm.SWS_CanNm_00153)
        - Check that function CanNm_CheckRemoteSleepIndication
          returns the status of "Remote Sleep Indication" as FALSE.
    16: VP (CanNm.SWS_CanNm_00153)
        - Check that in "Normal Operation State" function CanNm_CheckRemoteSleepIndication
          returns E_OK and the "Remote Sleep Indication" is not set to TRUE
          (while "Remote Sleep Indication" timer has not expired
          after receiving the last Rx_indication).
    17: VP (CanNm.SWS_CanNm_00150)
        - Wait until "Remote Sleep Indication" timer expires and
          check that Nm_RemoteSleepIndication is called.
    18: VP (CanNm.EB_Ref.SWS_CanNm_00151.1, CanNm.EB.Dsn.StateDynamics.RX_INDICATION_NORMAL_OPERATION_REMOTE_SLEEP)
        -  Check that after Rx_Indication is received in "Normal Operation State"
           function Nm_RemoteSleepCancellation is called.
    19: VP (CanNm.SWS_CanNm_00153)
        - Check that CanNm_CheckRemoteSleepIndication returns E_OK and
          the "Remote Sleep Indication" status is set to FALSE.
    20: VP (CanNm.SWS_CanNm_00150)
        - Wait until "Remote Sleep Indication" timer expires and check that
          Nm_RemoteSleepIndication is called.
    21: VP (CanNm.SWS_CanNm_00153)
        - Check that CanNm_CheckRemoteSleepIndication returns E_OK and the
          "Remote Sleep Indication" status is set to TRUE.
    22: Release the network.
    23: VP (CanNm.SWS_CanNm_00153)
        - Check that function CanNm_CheckRemoteSleepIndication returns E_OK and
          "Remote Status Indication" as set to TRUE, while "Remote Status Indication"
          was detected in "Normal Operation State" and no Rx_Indication has been received.
    24: Request the network.
    25: VP (CanNm.SWS_CanNm_00153)
        - Check that even if a transition is done from "Ready Sleep State"
          to "Normal Operation State" and no Rx_indication is received,
          the function CanNm_CheckRemoteSleepIndication returns E_OK and
          the "Remote Sleep Indication" is set still set to TRUE.
    26: VP (CanNm.EB_Ref.SWS_CanNm_00151.1)
        - Check that after Rx_indication is received the function
          Nm_RemoteSleepCancellation is called.
    27: VP (CanNm.SWS_CanNm_00153)
        - Check that after Rx_Indication is received,
          function CanNm_CheckRemoteSleepIndication returns E_OK and the
          "Remote Sleep Indication" is set to FALSE.
    28: Release the network.
    29: VP (CanNm.SWS_CanNm_00153)
        - Check that in "Ready Sleep State" function CanNm_CheckRemoteSleepIndication
          returns E_OK and the "Remote Sleep Indication" status is set to FALSE.
    30: Reset the Nm timer by calling Rx_indication.
    31: Wait until the state machine goes into "Prepare Bus Sleep Mode"
    32: VP (CanNm.EB_Ref.SWS_CanNm_00154.2)
        - Check that in "Prepare Bus Sleep Mode" function CanNm_CheckRemoteSleepIndication
          returns E_NOT_OK.
    33: Wait until "Wait Bus Sleep" timer expires.
    34: VP: (CanNm.EB_Ref.SWS_CanNm_00154.1)
        - Check that in "Bus Sleep Mode" function CanNm_CheckRemoteSleepIndication
          returns E_NOT_OK.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00150</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>208</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00153</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>211</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00151.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>438</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00151.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>439</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00154.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>442</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00154.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>443</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00154.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>444</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.RX_INDICATION_NORMAL_OPERATION_REMOTE_SLEEP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1428</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1657</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TC_CANNM_0135</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_3/source/application/GetVersionInfo_test.c.m4</sourcefile>
      <sourceline>40</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: VersionInfoTests
Test Description: 
    To check whether CanNm_GetVersionInfo returns the expected version
    information of CanNM module.
  
Test Object: None.
Test Precondition: 
    "CanNmVersionInfoApi" is set to"true".
  
Test Execution: 
    01: Set the version information values to invalid value.
    02: Call CanNm_GetVersionInfo with a valid address.
    03: VP (CanNm.SWS_CanNm_00224, CanNm.ASR403.CANNM225, CanNm.ASR403.CANNM278):
        - The version parameters are set as expected.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00224</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>254</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM225</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM278</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1658</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_CanIf_Transmit_Check_5</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_30/source/application/CanNm_ConTest_30.c</sourcefile>
      <sourceline>61</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Test shall prove that in case CanNmPnHandleMultipleNetworkRequests is TRUE and
  CanNmImmediateNmTransmissions  is greater than 0
  and current state is normal operation state
  and CanNm_NetworkRequestis called in context of CanIf_Transmit, then the state machine
  switches to repeat message state and transmission does not get stuck.

Test Object: None.
Test Precondition: 

Test Execution: 
  01: Initialize stubs
  02: Initialize CanNm
  03: Go to normal operation state
  04: Check current state is normal operation
  05: Invoke main function till a message is about to be sent
  06: Simulate a CanNm_NetworkRequest request in context of CanIf_Transmit
  07: Reset CanIf_Transmit stub count to 0
  08: Call main function once
  09: VP(ECUC_CanNm_00073, CanNm.ECUC_CanNm_00056)
      Check that CanIf_Transmit stub count is 2 (one message from message timer cycle expire, and
      one from reentry to repeat message state) and reset it to 0, and
      check current state is repeat message state
  10: Invoke main function until more than 2 messages should be transmitted
  11: Check than the expected number of messages were transmitted

Test Input: 
  Call CanNm_NetworkRequest in context of CanIf_Transmit

Test Output: 
  Check that multiple messages are sent on the bus
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM073_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>5</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00056</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>112</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1659</internalId></specobject>
    <specobject>
      <id>TS_CanNm_CanIf_Transmit_Check_6</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_30/source/application/CanNm_ConTest_30.c</sourcefile>
      <sourceline>162</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Test shall prove that in case CanNmPnHandleMultipleNetworkRequests is TRUE and
  CanNmImmediateNmTransmissions  is greater than 0
  and current state is repeat message state
  and CanNm_NetworkRequestis called in context of CanIf_Transmit, then the state machine
  reneters repeat message state and transmission does not get stuck.

Test Object: None.
Test Precondition: 

Test Execution: 
  01: Initialize stubs
  02: Initialize CanNm
  03: Go to repeat message state
  04: Check current state is repeat message state
  05: Invoke main function till a message is about to be sent
  06: Simulate a CanNm_NetworkRequest request in context of CanIf_Transmit
  07: Reset CanIf_Transmit stub count to 0
  08: Call main function once
  09: VP(ECUC_CanNm_00073, CanNm.ECUC_CanNm_00056)
      Check that CanIf_Transmit stub count is 2 (one message from message timer cycle expire, and
      one from reentry to repeat message state) and reset it to 0, and
      check current state is repeat message state
  10: Invoke main function until more than 2 messages should be transmitted
  11: Check than the expected number of messages were transmitted

Test Input: 
  Call CanNm_NetworkRequest in context of CanIf_Transmit

Test Output: 
  Check that multiple messages are sent on the bus
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM073_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>5</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00056</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>112</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1660</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_Schm_Call_Channel_Multicore_DetCheck_ApplicationID</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_31_multicore/source/application/CanNm_ConTest_31.c.m4</sourcefile>
      <sourceline>62</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that a det error is reported if current application id doesn't match
    the channels configured application id.
  
Test Object: None.
Test Precondition: 
    Channel 0 is assigned to TST_APPL_ID_0 and channel 1 is assigned to TST_APPL_ID_1
  
Test Execution: 
    01: Initialize CanNm
    02: Set GetApplicationID_ReturnValue to TST_APPL_ID_1
    03: Reset Det_ReportError_Stub

    04: Call CanNm_PassiveStartUp with channel 1 as parameter and verify that no
        error is reported to Det.
    05: VP(CanNm.EB.CanNmChannelMultiCore.DetAppIDPassiveStartUp)
        Call CanNm_PassiveStartUp with channel 0 as parameter and verify that
        "CANNM_E_INVALID_OSAPPLICATION" is reported to Det.

    06: Call CanNm_NetworkRequest with channel 1 as parameter and verify that no
        error is reported to Det.
    07: VP(CanNm.EB.CanNmChannelMultiCore.DetAppIDNetworkRequest)
        Call CanNm_NetworkRequest with channel 0 as parameter and verify that
        "CANNM_E_INVALID_OSAPPLICATION" is reported to Det.

    08: Call CanNm_NetworkGwEraRequest with channel 1 as parameter and verify that no
        error is reported to Det.
    09: VP(CanNm.EB.CanNmChannelMultiCore.DetAppIDNetworkGwEraRequest)
        Call CanNm_NetworkGwEraRequest with channel 0 as parameter and verify that
        "CANNM_E_INVALID_OSAPPLICATION" is reported to Det.

    10: Call CanNm_NetworkRelease with channel 1 as parameter and verify that no
        error is reported to Det.
    11: VP(CanNm.EB.CanNmChannelMultiCore.DetAppIDNetworkRelease)
        Call CanNm_NetworkRelease with channel 0 as parameter and verify that
        "CANNM_E_INVALID_OSAPPLICATION" is reported to Det.

    12: Call CanNm_DisableCommunication with channel 1 as parameter and verify that no
        error is reported to Det.
    13: VP(CanNm.EB.CanNmChannelMultiCore.DetAppIDDisableCommunication)
        Call CanNm_DisableCommunication with channel 0 as parameter and verify that
        "CANNM_E_INVALID_OSAPPLICATION" is reported to Det.

    14: Call CanNm_EnableCommunication with channel 1 as parameter and verify that no
        error is reported to Det.
    15: VP(CanNm.EB.CanNmChannelMultiCore.DetAppIDEnableCommunication)
        Call CanNm_EnableCommunication with channel 0 as parameter and verify that
        "CANNM_E_INVALID_OSAPPLICATION" is reported to Det.

    16: Call CanNm_GetUserData with channel 1 as parameter and verify that no
        error is reported to Det.
    17: VP(CanNm.EB.CanNmChannelMultiCore.DetAppIDGetUserData)
        Call CanNm_GetUserData with channel 0 as parameter and verify that
        "CANNM_E_INVALID_OSAPPLICATION" is reported to Det.

    18: Call CanNm_GetNodeIdentifier with channel 1 as parameter and verify that no
        error is reported to Det.
    19: VP(CanNm.EB.CanNmChannelMultiCore.DetAppIDGetNodeIdentifier)
        Call CanNm_GetNodeIdentifier with channel 0 as parameter and verify that
        "CANNM_E_INVALID_OSAPPLICATION" is reported to Det.

    20: Call CanNm_GetLocalNodeIdentifier with channel 1 as parameter and verify that no
        error is reported to Det.
    21: VP(CanNm.EB.CanNmChannelMultiCore.DetAppIDGetLocalNodeIdentifier)
        Call CanNm_GetLocalNodeIdentifier with channel 0 as parameter and verify that
        "CANNM_E_INVALID_OSAPPLICATION" is reported to Det.

    22: Call CanNm_RepeatMessageRequest with channel 1 as parameter and verify that no
        error is reported to Det.
    23: VP(CanNm.EB.CanNmChannelMultiCore.DetAppIDRepeatMessageRequest)
        Call CanNm_RepeatMessageRequest with channel 0 as parameter and verify that
        "CANNM_E_INVALID_OSAPPLICATION" is reported to Det.

    24: Call CanNm_GetPduData with channel 1 as parameter and verify that no
        error is reported to Det.
    25: VP(CanNm.EB.CanNmChannelMultiCore.DetAppIDGetPduData)
        Call CanNm_GetPduData with channel 0 as parameter and verify that
        "CANNM_E_INVALID_OSAPPLICATION" is reported to Det.

    26: Call CanNm_GetState with channel 1 as parameter and verify that no
        error is reported to Det.
    27: VP(CanNm.EB.CanNmChannelMultiCore.DetAppIDGetState)
        Call CanNm_GetState with channel 0 as parameter and verify that
        "CANNM_E_INVALID_OSAPPLICATION" is reported to Det.

    28: Call CanNm_CheckRemoteSleepIndication with channel 1 as parameter and verify that no
        error is reported to Det.
    29: VP(CanNm.EB.CanNmChannelMultiCore.DetAppIDCheckRemoteSleepIndication)
        Call CanNm_CheckRemoteSleepIndication with channel 0 as parameter and verify that
        "CANNM_E_INVALID_OSAPPLICATION" is reported to Det.

    30: Call CanNm_TxConfirmation with channel 1 as parameter and verify that no
        error is reported to Det.
    31: VP(CanNm.EB.CanNmChannelMultiCore.DetAppIDTxConfirmation)
        Call CanNm_TxConfirmation with channel 0 as parameter and verify that
        "CANNM_E_INVALID_OSAPPLICATION" is reported to Det.

    32: Call CanNm_RxIndication with channel 1 as parameter and verify that no
        error is reported to Det.
    33: VP(CanNm.EB.CanNmChannelMultiCore.DetAppIDRxIndication)
        Call CanNm_RxIndication with channel 0 as parameter and verify that
        "CANNM_E_INVALID_OSAPPLICATION" is reported to Det.

    34: Call CanNm_Transmit with channel 1 as parameter and verify that no
        error is reported to Det.
    35: VP(CanNm.EB.CanNmChannelMultiCore.DetAppIDTransmit)
        Call CanNm_Transmit with channel 0 as parameter and verify that
        "CANNM_E_INVALID_OSAPPLICATION" is reported to Det.

    36: Call CanNm_ConfirmPnAvailability with channel 1 as parameter and verify that no
        error is reported to Det.
    37: VP(CanNm.EB.CanNmChannelMultiCore.DetAppIDConfirmPnAvailability)
        Call CanNm_ConfirmPnAvailability with channel 0 as parameter and verify that
        "CANNM_E_INVALID_OSAPPLICATION" is reported to Det.
  
Test Input: 
    CanNm multicore channel suport is enabled.
    Channels assigned to two different partitions.
    Function calls for each channel.
  
Test Output: 
    CANNM_E_INVALID_OSAPPLICATION error reported for non matching os application id.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDPassiveStartUp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>621</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDNetworkRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>622</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDNetworkGwEraRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>623</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDNetworkRelease</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>624</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDDisableCommunication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>625</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDEnableCommunication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>626</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDGetUserData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>628</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDGetNodeIdentifier</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>629</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDGetLocalNodeIdentifier</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>630</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDRepeatMessageRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>631</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDGetPduData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>632</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDGetState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>633</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDCheckRemoteSleepIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>634</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDTxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>635</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDRxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>636</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDTransmit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>637</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDConfirmPnAvailability</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>638</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1661</internalId></specobject>
    <specobject>
      <id>TS_CanNm_Schm_Call_Channel_Multicore_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_31_multicore/source/application/CanNm_ConTest_31.c.m4</sourcefile>
      <sourceline>369</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    Check Schm calls for data transfer from channel partitions to master partition and aggregation of EIRA data.
  
Test Object: None.
Test Precondition: 
    CanNm multicore channel suport is enabled.
    CanNmPnEiraCalcEnabled is set to TRUE.
    For permutation 0 test: one channel has CanNmPnEraCalcEnabled TRUE,
                            one channel has CanNmPnEraCalcEnabled FALSE.
    For permutation 1 test: all channels have CanNmPnEraCalcEnabled FALSE.
  
Test Execution: 
    01: Set buffer with valid PN info,
        set PduR_CanNmRxIndication_Stub callout function
    02: Initialize CanNm
    03: Call CanNm_PassiveStartUp
    04: Call channels main functions for transition to occur
    05: Check current state is NM_STATE_REPEAT_MESSAGE for all channels
    06: Call CanNm_NetworkRequest
    07: Call channels main functions until repeat message state timers expire for all channels
    08: Check current state is NM_STATE_NORMAL_OPERATION for all channels
    09: Reset stub buffers for data transmission between partitions
    10: Simulate reception of PN info data on all channels
    11: Resey PduR_CanNmRxIndication_Stub count
    12: Check no data was sent between channel partitions to PN aggregation partition
    13: VP (CanNm.EB.CanNm_MainFunction_X, CanNm.EB.CanNm_MainFunction_X.Enable):
        Call channel main functions independently from main function of PN aggregation partition
    14: Check data was sent to PN aggregation partition from all channels
    15: VP (CanNm.EB.CanNmChannelMultiCore.Receiver):
        Simulate reception of data on PN aggregation partition
    16: Check PduR_CanNmRxIndication_Stub count is equal to the number of channels that have CanNmPnEraCalcEnabled set to TRUE and reset PduR_CanNmRxIndication_Stub count
    17: Clear data on PduR buffer
    18: VP (CanNm.EB.CanNm_MainFunction_Main, CanNm.EB.CanNm_MainFunction_Main.Enable):
        - Call main function of PN aggregation partition
    19: Check PduR_CanNmRxIndication_Stub count is 1
    20: Check RxPduId of PduR_CanNmRxIndication_Stub is eira PDU id
    21: VP (CanNm.EB.CanNmChannelMultiCore.Sender.Rx, CanNm.EB.CanNmChannelMultiCore.Sender.Tx):
        - Check data was aggregated on PN aggregation partition
  
Test Input: 
    Simulated reception of eira data.
  
Test Output: 
    Received data is aggregated on main partition from all channels.
  </description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNm_MainFunction_Main</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>605</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNm_MainFunction_Main.Enable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>606</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNm_MainFunction_X</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>608</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNm_MainFunction_X.Enable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>610</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.Sender.Rx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>614</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.Sender.Tx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>615</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.Receiver</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>616</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1662</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_Schm_Call_Channel_Multicore_DetCheck_ApplicationID_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_32_multicore/source/application/CanNm_ConTest_32.c</sourcefile>
      <sourceline>70</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that a det error is reported if current application id doesn't match 
    the channels configured application id.
  
Test Object: None.
Test Precondition: 
    Channel 0 is assigned to TST_APPL_ID_0 and channel 1 is assigned to TST_APPL_ID_1
  
Test Execution: 
    01: Initialize CanNm
    02: Set GetApplicationID_ReturnValue to TST_APPL_ID_1
    03: Reset Det_ReportError_Stub
    
    04: Call CanNm_SetUserData with channel 1 as parameter and verify that no
        error is reported to Det.
    05: VP(CanNm.EB.CanNmChannelMultiCore.DetAppIDSetUserData)
        Call CanNm_SetUserData with channel 0 as parameter and verify that
        "CANNM_E_INVALID_OSAPPLICATION" is reported to Det.
  
Test Input: 
    CanNm multicore channel suport is enabled.
    Channels assigned to two different partitions.
    Function calls for each channel.
  
Test Output: 
    CANNM_E_INVALID_OSAPPLICATION error reported for non matching os application id.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDSetUserData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>627</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1663</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_State_Transitions_Multicore_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_33_multicore/source/application/CanNm_ConTest_33.c</sourcefile>
      <sourceline>55</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that when multicore per channel conditions are met, state transitions
    from Bus sleep state, to Repeat message state, to Normal operation state,
    to Ready Sleep State, to Bus sleep state occur for each channel on the 
    corresponding channels main function calls.
    Also check that generation is valid when a main PNC aggregation partition
    is not specified.
  
Test Object: None.
Test Precondition: 
    CanNm multicore per channel support is enabled.
    ComMMasterPNCEcuCPartitionRef is not set in ComM (PNC support is disabled).
  
Test Execution: 
    01: Initialize the CanNm module. Go to the Bus sleep state on each channel.

    02: Call CanNm_1_ChOsApp_App_Core0_MainFunction_0().
    03: Verify current state is Bus Sleep State for channel 0. 
    04: Call CanNm_1_ChOsApp_App_Core1_MainFunction_1().
    05: Verify current state is Bus Sleep State for channel 1. 

    06: Call CanNm_NetworkRequest for channel 0.
    07: Call CanNm_1_ChOsApp_App_Core0_MainFunction_0.
    08: VP (CanNm.SWS_CanNm_00314, CanNm.SWS_CanNm_00129, CanNm.EB.CanNm_MainFunction_X):
        - check that present state for channel 0 is Repeat message state
        - check that present state for channel 1 is Bus Sleep State

    09: Call CanNm_NetworkRequest for channel 1.
    10: Call CanNm_1_ChOsApp_App_Core1_MainFunction_1.
    11: VP (CanNm.SWS_CanNm_00314, CanNm.SWS_CanNm_00129, CanNm.EB.CanNm_MainFunction_X):
        - check that present state for channel 0 is Repeat message state
        - check that present state for channel 1 is Repeat message state

    12: Call CanNm_1_ChOsApp_App_Core0_MainFunction_0 for 
        (repeat message timer - 1) times.
    13: Check that present state for channel 0 is Repeat message state
    14: Check that present state for channel 1 is Repeat message state
    15: Call CanNm_1_ChOsApp_App_Core0_MainFunction_0
    16: VP (CanNm.SWS_CanNm_00102, CanNm.EB.CanNm_MainFunction_X):
        - check that present state for channel 0 is Normal operation state
        - check that present state for channel 1 is Repeat message state

    17: Call CanNm_1_ChOsApp_App_Core1_MainFunction_1 for 
        (repeat message timer - 1) times.
    18: Check that present state for channel 0 is Normal operation state
    19: Check that present state for channel 1 is Repeat message state
    20: Call CanNm_1_ChOsApp_App_Core1_MainFunction_1.
    21: VP (CanNm.SWS_CanNm_00102, CanNm.EB.CanNm_MainFunction_X):
        - check that present state for channel 0 is Normal operation state
        - check that present state for channel 1 is Normal operation state

    22: Call CanNm_NetworkRelease for channel 0.
    23: Call CanNm_1_ChOsApp_App_Core0_MainFunction_0.
    24: VP (CanNm.SWS_CanNm_00105, CanNm.EB.CanNm_MainFunction_X):
        - check that present state for channel 0 is Ready sleep state.
        - check that present state for channel 1 is Normal operation state

    25: Call CanNm_NetworkRelease for channel 1.
    26: Call CanNm_1_ChOsApp_App_Core1_MainFunction_1.
    27: VP (CanNm.SWS_CanNm_00105, CanNm.EB.CanNm_MainFunction_X):
        - check that present state for channel 0 is Ready sleep state.
        - check that present state for channel 1 is Ready sleep state.

    28: Call CanNm_1_ChOsApp_App_Core0_MainFunction_0 for 
        (CanNmTimeoutTime - 1) times.
    29: Check that present state for channel 0 is Ready sleep state.
    30: Check that present state for channel 1 is Ready sleep state.
    31: Call CanNm_1_ChOsApp_App_Core0_MainFunction_0
    32: VP (CanNm.SWS_CanNm_00109, CanNm.EB.CanNm_MainFunction_X):
        - check that present state for channel 0 is Prepare bus sleep state.
        - check that present state for channel 1 is Ready sleep state.

    33: Call CanNm_1_ChOsApp_App_Core1_MainFunction_1 for 
        (CanNmTimeoutTime - 1) times.
    34: Check that present state for channel 0 is Prepare bus sleep state.
    35: Check that present state for channel 1 is Ready sleep state.
    36: Call CanNm_1_ChOsApp_App_Core1_MainFunction_1.
    37: VP (CanNm.SWS_CanNm_00109, CanNm.EB.CanNm_MainFunction_X):
        - check that present state for channel 0 is Prepare bus sleep state.
        - check that present state for channel 1 is Prepare bus sleep state.

    38: Call CanNm_1_ChOsApp_App_Core0_MainFunction_0 for 
        (CANNM_WAIT_BUS_SLEEP_TIME - 1) times.
    39: Check that present state for channel 0 is Prepare bus sleep state.
    40: Check that present state for channel 1 is Prepare bus sleep state.
    41: Call CanNm_1_ChOsApp_App_Core0_MainFunction_0
    42: VP (CanNm.ASR403.CANNM115, CanNm.EB.CanNm_MainFunction_X):
        - check that present state for channel 0 is Bus sleep state.
        - check that present state for channel 1 is Prepare bus sleep state.

    43: Call CanNm_1_ChOsApp_App_Core1_MainFunction_1 for 
        (CANNM_WAIT_BUS_SLEEP_TIME - 1) times.
    44: Check that present state for channel 0 is Bus sleep state.
    45: Check that present state for channel 1 is Prepare bus sleep state.
    46: Call CanNm_1_ChOsApp_App_Core1_MainFunction_1.
    47: VP (CanNm.ASR403.CANNM115, CanNm.EB.CanNm_MainFunction_X):
        - check that present state for channel 0 is Bus sleep state.
        - check that present state for channel 1 is Bus sleep state.

  
Test Input: 
    Main function calls to trigger transitions on each channel.
  
Test Output: 
    Independent transitions from Bus sleep, Ready Sleep State, Normal operation,
    Ready sleep, Bus sleep states on each channel main function.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00314</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>301</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00129</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>196</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00102</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>170</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00105</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>173</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM115</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNm_MainFunction_X</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>608</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1664</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_State_Transitions_PassiveMode_Multicore_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_34_multicore/source/application/CanNm_ConTest_34.c</sourcefile>
      <sourceline>55</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that when multicore per channel conditions are met, state transition
    from Bus sleep state to Repeat message state due to a Passive startup occurs
    for each channel on the corresponding channels main function call.
    Also check that generation is valid when a main PNC aggregation partition
    is not specified and passive mode is enabled.
  
Test Object: None.
Test Precondition: 
    CanNm multicore per channel support is enabled.
    Passive mode is enabled for channels.
    ComMMasterPNCEcuCPartitionRef is not set in ComM (PNC support is disabled).
  
Test Execution: 
    01: Initialize the CanNm module. Go to the Bus sleep state on each channel.

    02: Call CanNm_1_ChOsApp_App_Core0_MainFunction_0().
    03: Verify current state is Bus Sleep State for channel 0. 
    04: Call CanNm_1_ChOsApp_App_Core1_MainFunction_1().
    05: Verify current state is Bus Sleep State for channel 1. 

    06: Call CanNm_PassiveStartUp for channel 0.
    07: Call CanNm_1_ChOsApp_App_Core0_MainFunction_0.
    08: VP (CanNm.EB_Ref.SWS_CanNm_00128.1, CanNm.EB.CanNm_MainFunction_X):
        - check that present state for channel 0 is Repeat message state
        - check that present state for channel 1 is Bus Sleep State

    09: Call CanNm_PassiveStartUp for channel 1.
    10: Call CanNm_1_ChOsApp_App_Core1_MainFunction_1.
    11: VP (CanNm.EB_Ref.SWS_CanNm_00128.1, CanNm.EB.CanNm_MainFunction_X):
        - check that present state for channel 0 is Repeat message state
        - check that present state for channel 1 is Repeat message state

  
Test Input: 
    Main function calls to trigger transitions on each channel.
  
Test Output: 
    Independent transitions from Bus sleep to Ready Sleep State states on each
    channel main function.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00128.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>477</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNm_MainFunction_X</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>608</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1665</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TC_CANNM_SynchronizedPncShutdown_DET</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_35/source/application/CanNm_ConTest_35.c</sourcefile>
      <sourceline>73</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check DET detection functionality for CanNm_RequestSynchronizedPncShutdown API.
  
Test Object: None.
Test Precondition: 
    dev error detect is enabled
  
Test Execution: 
    01: initialize stubs
    02: call CanNm_RequestSynchronizedPncShutdown while Can is not initialized
    03: VP (CanNm.ASR403.CANNM039,CanNm.EB_Ref.SWS_CanNm_00316.1, CanNm.ASR403.CANNM019)
        check det was reported with CANNM_E_NO_INIT as error
    04: initialize CanNm
    05: call CanNm_RequestSynchronizedPncShutdown with an invalid channel as parameter
    06: VP (CanNm.EB_Ref.SWS_CanNm_00316.2, CanNm.ASR403.CANNM019)
        check det was reported with CANNM_E_INVALID_CHANNEL as error
    07: call CanNm_RequestSynchronizedPncShutdown with an invalid channel as parameter
    08: VP (CanNm.EB_Ref.SWS_CanNm_00316.2, CanNm.ASR403.CANNM019)
        check det was reported with CANNM_E_INVALID_CHANNEL as error
    09: call CanNm_RequestSynchronizedPncShutdown with an invalid pnc ID as parameter
    10: VP (CanNm.EB.PnSyncShutdown.CanNm_RequestSynchronizedPncShutdown.InvalidPncId, CanNm.ASR403.CANNM019)
        check det was reported with CANNM_E_INVALID_FUNCTION_ARG as error
    11: call CanNm_RequestSynchronizedPncShutdown with an invalid pnc ID as parameter
    12: VP (CanNm.EB.PnSyncShutdown.CanNm_RequestSynchronizedPncShutdown.InvalidPncId, CanNm.ASR403.CANNM019)
        check det was reported with CANNM_E_INVALID_FUNCTION_ARG as error
  
Test Input: 
    invalid calls to CanNm_RequestSynchronizedPncShutdown
  
Test Output: 
    Det errors
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00316.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>482</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.PnSyncShutdown.CanNm_RequestSynchronizedPncShutdown.InvalidPncId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>597</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1666</internalId></specobject>
    <specobject>
      <id>TC_CANNM_SynchronizedPncShutdown_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_35/source/application/CanNm_ConTest_35.c</sourcefile>
      <sourceline>186</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that after calls to CanNm_RequestSynchronizedPncShutdown on an active channel
    when an immediate message is about to be sent, a nm message with PNSR bit and
    respective pncIds bits set is sent on the bus instead, and the immediate message
    is delayed by 1 cycle.
  
Test Object: None.
Test Precondition: 
    active channel is tested
  
Test Execution: 
    01: initialize stubs
    02: initialize CanNm
    03: go to repeat message state
    04: clear CanIf_Transmit stub count
    05: clear tx buffer
    06: VP(CanNm.ASRR2111.SWS_CanNm_91003, CanNm.ASRR2111.SWS_CanNm_00467)
        call CanNm_RequestSynchronizedPncShutdown for channel 2 with pncid for both pncs associated
    07: simulate retrieving of pn info from comm. Initialize user data in Com (via PduR stub)
    08: call main function to process requests from CanNm_RequestSynchronizedPncShutdown
    09: check a message was transmitted
    10: VP (CanNm.ASRR2111.SWS_CanNm_00045, CanNm.ASRR2111.SWS_CanNm_00506)
        check pnsr is set and pninfo bits are set on the nm message sent on the bus
        (a pn synchronize shutdown message was sent instead of an immediate message)
    11: simulate tx confirmation for sent message
    12: call main function once
    13: VP (CanNm.ASRR2111.SWS_CanNm_00460)
        check a message was transmitted
    14: VP (CanNm.ASRR2111.SWS_CanNm_00464)
        check pnsr and pninfo bits are unset on the nm message sent on the bus
  
Test Input: 
    calls to CanNm_RequestSynchronizedPncShutdown
  
Test Output: 
    message sent on bus
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_91003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>412</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00467</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>413</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00460</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>402</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00045</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>400</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00506</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>406</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00464</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>407</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1667</internalId></specobject>
    <specobject>
      <id>TC_CANNM_SynchronizedPncShutdown_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_35/source/application/CanNm_ConTest_35.c</sourcefile>
      <sourceline>316</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that after calls to CanNm_RequestSynchronizedPncShutdown on an active channel
    when an normal nm message is about to be sent, a nm message with PNSR bit and
    respective pncIds bits set is sent on the bus instead, and the normal nm message
    is delayed by 1 cycle.
  
Test Object: None.
Test Precondition: 
    active channel is tested
  
Test Execution: 
    01: initialize stubs
    02: initialize CanNm
    03: go to normal operation state
    04: clear CanIf_Transmit stub count
    05: clear tx buffer
    06: call main function until a normal message is sent
    07: call main function again until a normal message is about to be sent
    08: check the state is still normal operation
    09: VP (CanNm.ASRR2111.SWS_CanNm_91003)
        call CanNm_RequestSynchronizedPncShutdown for channel 2 with pncid for one pnc associated
    10: simulate retrieving of pn info from comm. Initialize user data in Com (via PduR stub)
    11: check no additional message was sent
    12: call main function to process requests from CanNm_RequestSynchronizedPncShutdown
    13: check a pn sync shutdown message was transmitted
    14: VP (CanNm.ASRR2111.SWS_CanNm_00045, CanNm.ASRR2111.SWS_CanNm_00506)
        check pnsr is set and pninfo bits are set on the nm message sent on the bus.
        (a pn synchronize shutdown message was sent instead of an immediate message)
    15: simulate tx confirmation for sent message
    16: call main function once
    17: VP (CanNm.ASRR2111.SWS_CanNm_00460)
        check a message was transmitted
    18: VP (CanNm.ASRR2111.SWS_CanNm_00464)
        check pnsr and pninfo bits are unset on the nm message sent on the bus
    19: check the state is still normal operation
  
Test Input: 
    calls to CanNm_RequestSynchronizedPncShutdown
  
Test Output: 
    message sent on bus
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_91003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>412</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00460</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>402</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00045</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>400</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00506</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>406</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00464</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>407</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1668</internalId></specobject>
    <specobject>
      <id>TC_CANNM_SynchronizedPncShutdown_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_35/source/application/CanNm_ConTest_35.c</sourcefile>
      <sourceline>476</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that after calls to CanNm_RequestSynchronizedPncShutdown on an active channel, a failure to transmit
    the pn sync shutdown message will trigger a retransmit on the next main function cycles until a successful
    transmission occurs, as long as the retransmission doesn't exceed the CanNmPnShutdownMessageRetransmissionDuration
    time window.
  
Test Object: None.
Test Precondition: 
    active channel is tested, and pn sync shutdown retransmission is &gt; 0
  
Test Execution: 
    01: initialize stubs
    02: initialize CanNm
    03: go to normal operation state
    04: VP (CanNm.ASRR2111.SWS_CanNm_91003)
        call CanNm_RequestSynchronizedPncShutdown for channel 2 with pncid for one pnc associated
    05: clear CanIf_Transmit stub count
    06: simulate a failure to transmit
    07: check transmission was attempted
    08: simulate recovery of communication
    09: clear tx buffer
    10: simulate retrieving of pn info from comm. Initialize user data in Com (via PduR stub)
    11: call main function once (still in time window of CanNmPnShutdownMessageRetransmissionDuration)
    12: VP (CanNm.EB.PnSyncShutdown.CanNm_TxConfirmation.Timeout, CanNm.ASRR2111.ECUC_CanNm_00098)
        check a message was transmitted
    13: VP (CanNm.ASRR2111.SWS_CanNm_00045, CanNm.ASRR2111.SWS_CanNm_00506)
        check pnsr is set and pninfo bits are set on the nm message sent on the bus
  
Test Input: 
    calls to CanNm_RequestSynchronizedPncShutdown
  
Test Output: 
    message sent on bus
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_91003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>412</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00045</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>400</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00506</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>406</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.PnSyncShutdown.CanNm_TxConfirmation.Timeout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>599</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.ECUC_CanNm_00098</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>415</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1669</internalId></specobject>
    <specobject>
      <id>TC_CANNM_SynchronizedPncShutdown_4</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_35/source/application/CanNm_ConTest_35.c</sourcefile>
      <sourceline>595</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that after calls to CanNm_RequestSynchronizedPncShutdown on an active channel, a failure to transmit
    the pn sync shutdown message will trigger a retransmit on the next main function cycles, and if
    retransmission time window exceeds CanNmPnShutdownMessageRetransmissionDuration duration, then
    retransmission stops.
  
Test Object: None.
Test Precondition: 
    CanNmPnShutdownMessageRetransmissionDuration &lt; CanNmMsgCycleTime
    active channel is tested, and pn sync shutdown retransmission is &gt; 0
  
Test Execution: 
    01: initialize stubs
    02: initialize CanNm
    03: go to normal operation state
    04: clear CanIf_Transmit stub count
    05: call main function until a normal nm message is transmitted
    06: check a normal nm message was transmitted
    07: check pnsr is not set and pninfo bits are not set on the nm message sent on the bus
    08: VP (CanNm.ASRR2111.SWS_CanNm_91003)
        call CanNm_RequestSynchronizedPncShutdown for channel 2 with pncid for one pnc associated
    09: simulate a failure to transmit
    10: VP (CanNm.EB.PnSyncShutdown.CanNm_TxConfirmation.Timeout, CanNm.ASRR2111.ECUC_CanNm_00098)
        check transmission was attempted
    11: call main function once
    12: VP (CanNm.EB.PnSyncShutdown.CanNm_TxConfirmation.Timeout, CanNm.ASRR2111.ECUC_CanNm_00098)
        check no message was transmitted (normal nor pn sync shutdown)
  
Test Input: 
    calls to CanNm_RequestSynchronizedPncShutdown
  
Test Output: 
    no pn sync message sent on bus
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_91003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>412</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.PnSyncShutdown.CanNm_TxConfirmation.Timeout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>599</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.ECUC_CanNm_00098</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>415</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1670</internalId></specobject>
    <specobject>
      <id>TC_CANNM_SynchronizedPncShutdown_5</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_35/source/application/CanNm_ConTest_35.c</sourcefile>
      <sourceline>719</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that when receiving a message with PNSR bit set to 1 on an active channel while in repeat message state
    and neither a normal nm message nor pn sync shutdown message are to be sent, then a message is transmitted
    with current pn info data from ComM.
  
Test Object: None.
Test Precondition: 
    active channel is tested
  
Test Execution: 
    01: initialize stubs
    02: initialize CanNm
    03: clear CanIf_Transmit stub count
    04: go to repeat message state
    05: check no transmits occured
    06: call main function MsgCycleOffset number of times to transmit an first immediate message
    07: check first immediate message was sent
    08: simulate reception of a message with pnsr bit set on active channel
    09: VP (CanNm.ASRR2111.SWS_CanNm_00461, CanNm.EB_Ref.SWS_CanNm_00317.3, CanNm.SWS_CanNm_00324)
        check CANNM_E_INVALID_PN_SYNC_SHUTDOWN_REQUEST runtime error was reported to Det
    10: call main function once
    11: VP (CanNm.ASRR2111.SWS_CanNm_00461, CanNm.ASRR2111.ECUC_CanNm_00096)
        check a message was sent on the bus
    12: call main function till MsgCycleTime time window expires
    13: check second immediate message was sent
  
Test Input: 
    reception of message with pnsr bit set
  
Test Output: 
    det runtime error
    normal NM message transmission
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00461</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>403</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.ECUC_CanNm_00096</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>416</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00317.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>486</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00324</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>303</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1671</internalId></specobject>
    <specobject>
      <id>TC_CANNM_SynchronizedPncShutdown_6</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_35/source/application/CanNm_ConTest_35.c</sourcefile>
      <sourceline>845</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that when receiving a message with PNSR bit set to 1 on an active channel while in repeat message state
    and a normal nm message is to be sent and no pnc sync shutdown message is to be sent, then a message is
    transmitted with current pn info data from ComM.
  
Test Object: None.
Test Precondition: 
    active channel is tested
  
Test Execution: 
    01: initialize stubs
    02: initialize CanNm
    03: clear CanIf_Transmit stub count
    04: go to repeat message state
    05: check no transmits occured
    06: call main function (MsgCycleOffset - 1) number of times just before first 
        immediate message is to be transmitted
    07: check no message was sent
    08: simulate reception of a message with pnsr bit set on active channel
    09: VP (CanNm.ASRR2111.SWS_CanNm_00461, CanNm.ASRR2111.ECUC_CanNm_00096, CanNm.EB_Ref.SWS_CanNm_00317.3)
        check CANNM_E_INVALID_PN_SYNC_SHUTDOWN_REQUEST runtime error was reported to Det
    10: call main function once
    11: VP (CanNm.ASRR2111.SWS_CanNm_00461)
        check a message was sent on the bus
    12: call main function till MsgCycleTime time window expires
    13: check immediate message is sent
  
Test Input: 
    reception of message with pnsr bit set
  
Test Output: 
    det runtime error
    normal NM message transmission
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00461</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>403</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.ECUC_CanNm_00096</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>416</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00317.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>488</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1672</internalId></specobject>
    <specobject>
      <id>TC_CANNM_SynchronizedPncShutdown_7</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_35/source/application/CanNm_ConTest_35.c</sourcefile>
      <sourceline>971</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that when receiving a message with PNSR bit set to 1 on an active channel while in normal operation state
    and neither a normal nm message nor pn sync shutdown message are to be sent, then a message is transmitted
    with current pn info data from ComM.
  
Test Object: None.
Test Precondition: 
    active channel is tested
  
Test Execution: 
    01: initialize stubs
    02: initialize CanNm
    03: go to normal operation state
    04: clear CanIf_Transmit stub count
    05: call main function till a message  is sent
    06: check a message was sent
    07: simulate reception of a message with pnsr bit set on active channel
    08: VP (CanNm.ASRR2111.SWS_CanNm_00461, CanNm.ASRR2111.ECUC_CanNm_00096, CanNm.EB_Ref.SWS_CanNm_00317.3)
        check CANNM_E_INVALID_PN_SYNC_SHUTDOWN_REQUEST runtime error was reported to Det
    09: call main function once
    10: VP (CanNm.ASRR2111.SWS_CanNm_00461)
        check a message was sent on the bus
    11: call main function till MsgCycleTime time window expires
    12: check a message was sent
  
Test Input: 
    reception of message with pnsr bit set
  
Test Output: 
    det runtime error
    normal NM message transmission
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00461</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>403</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.ECUC_CanNm_00096</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>416</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00317.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>486</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1673</internalId></specobject>
    <specobject>
      <id>TC_CANNM_SynchronizedPncShutdown_8</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_35/source/application/CanNm_ConTest_35.c</sourcefile>
      <sourceline>1091</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that when receiving a message with PNSR bit set to 1 on an active channel while in normal operation state
    and a normal nm message is to be sent and no pnc sync shutdown message is to be sent, then a message is
    transmitted with current pn info data from ComM.
  
Test Object: None.
Test Precondition: 
    active channel is tested
  
Test Execution: 
    01: initialize stubs
    02: initialize CanNm
    03: clear CanIf_Transmit stub count
    04: go to normal operation state
    05: check no transmits occured
    06: call main function (MsgCycleOffset - 1) number of times just before a message is to be transmitted
    07: check no message was sent
    08: simulate reception of a message with pnsr bit set on active channel
    09: VP (CanNm.ASRR2111.SWS_CanNm_00461, CanNm.ASRR2111.ECUC_CanNm_00096, CanNm.EB_Ref.SWS_CanNm_00317.3)
        check CANNM_E_INVALID_PN_SYNC_SHUTDOWN_REQUEST runtime error was reported to Det
    10: call main function once
    11: VP (CanNm.ASRR2111.SWS_CanNm_00461)
        check a message was sent on the bus
    12: call main function till MsgCycleTime time window expires
    13: check immediate message is sent
  
Test Input: 
    reception of message with pnsr bit set
  
Test Output: 
    det runtime error
    normal NM message transmission
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00461</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>403</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.ECUC_CanNm_00096</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>416</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00317.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>486</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1674</internalId></specobject>
    <specobject>
      <id>TC_CANNM_SynchronizedPncShutdown_9</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_35/source/application/CanNm_ConTest_35.c</sourcefile>
      <sourceline>1215</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that after a successful transmission of a pn sync shutdown message, the synchronize shutdown
    pn info bits stored are reset.
  
Test Object: None.
Test Precondition: 
    active channel is tested
  
Test Execution: 
    01: initialize stubs
    02: initialize CanNm
    03: go to normal operation state
    04: clear CanIf_Transmit stub count
    05: wait for a normal nm message to be sent
    06: VP (CanNm.ASRR2111.SWS_CanNm_91003)
        call CanNm_RequestSynchronizedPncShutdown for channel 2 with pncid for one pnc associated
    07: call main function once
    08: check a pn sync shutdown message was transmitted
    09: VP (CanNm.ASRR2111.SWS_CanNm_00045, CanNm.ASRR2111.SWS_CanNm_00506)
        check pnsr is set and pninfo bits are set on the nm message sent on the bus
    10: simulate TxConfirmation for the sent pn sync shutdown message
    11: wait till MsgCycleOffset and check no messages are sent in between
    12: VP (CanNm.ASRR2111.SWS_CanNm_00464)
        check a normal message was sent
  
Test Input: 
    pn sync shutdown message successfully sent
  
Test Output: 
    reset of pn sync shutdown aggregated bits
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_91003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>412</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00045</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>400</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00506</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>406</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00464</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>407</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1675</internalId></specobject>
    <specobject>
      <id>TC_CANNM_SynchronizedPncShutdown_12</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_35/source/application/CanNm_ConTest_35.c</sourcefile>
      <sourceline>1333</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that after call to CanNm_RequestSynchronizedPncShutdown on an active channel, and a
    pn sync shutdown fails to be transmitted, and a new call to CanNm_RequestSynchronizedPncShutdown
    before next cycle is made, then a new pn sync shutdown message will be sent next cycle with
    all pn info bits set for the respective pncIds of both CanNm_RequestSynchronizedPncShutdown
    calls.
  
Test Object: None.
Test Precondition: 
    active channel is tested
  
Test Execution: 
    01: reset PduRStub_Buffer
    02: initialize stubs
    03: initialize CanNm
    04: go to normal operation state
    05: clear CanIf_Transmit stub count
    06: wait for a normal nm message to be sent
    07: VP (CanNm.ASRR2111.SWS_CanNm_91003)
        call CanNm_RequestSynchronizedPncShutdown for channel 2 with pncid TST_PNCID_1
    08: simulate transmission failure
    09: call main function once
    10: VP (CanNm.EB.PnSyncShutdown.CanNm_TxConfirmation.Timeout, CanNm.ASRR2111.ECUC_CanNm_00098)
        check transmission of a pn sync shutdown message was attempted
    11: VP (CanNm.ASRR2111.SWS_CanNm_91003)
        call CanNm_RequestSynchronizedPncShutdown for channel 2 with pncid TST_PNCID_2
    12: simulate recovery of transmission
    13: call main function once
    14: VP (CanNm.EB.PnSyncShutdown.CanNm_TxConfirmation.Timeout, CanNm.ASRR2111.ECUC_CanNm_00098)
        check transmission of a pn sync shutdown message
    15: VP (CanNm.ASRR2111.SWS_CanNm_00045, CanNm.ASRR2111.SWS_CanNm_00506, CanNm.ASRR2111.SWS_CanNm_00462)
        check pnsr is set and pninfo bits are set on the nm message sent on the bus
  
Test Input: 
    calls to CanNm_RequestSynchronizedPncShutdown on different main function cycles
  
Test Output: 
    message sent on bus
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_91003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>412</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00045</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>400</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00506</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>406</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00462</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>405</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.PnSyncShutdown.CanNm_TxConfirmation.Timeout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>599</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.ECUC_CanNm_00098</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>415</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1676</internalId></specobject>
    <specobject>
      <id>TC_CANNM_SynchronizedPncShutdown_13</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_35/source/application/CanNm_ConTest_35.c</sourcefile>
      <sourceline>1471</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that when receiving a message with PNSR bit set to 1 on an passive channel then a call to
    Nm_ForwardSynchronizedPncShutdown is made, forwarding the pn info bits from the message to Nm.
  
Test Object: None.
Test Precondition: 
    passive channel is tested
  
Test Execution: 
    01: initialize stubs
    02: initialize CanNm
    03: go to normal operation state
    04: simulate reception of a message on bus requesting TST_PNCID_1 and TST_PNCID_2
        set pnsr bit to 0, and set pn info bits for pncids TST_PNCID_1, TST_PNCID_2 to 1 in pdu data
    05: simulate reception of pdu
    06: call main function once
    07: simulate reception of a message on bus requesting synchronize shutdown for TST_PNCID_1 pnc
        set pnsr bit to 1, and set pn info bits for pncids TST_PNCID_1 to 1 in pdu data
    08: simulate reception of pdu
    09: reset PduR_CanNmRxIndication call count
    10: reset Nm_ForwardSynchronizedPncShutdown call count
    11: call main function once
    12: check era timer was reset (call to PduR_CanNmRxIndication occurred)
    13: VP (CanNm.ASRR2111.SWS_CanNm_00504, CanNm.SWS_CanNm_00325)
        check Nm_ForwardSynchronizedPncShutdown was called
  
Test Input: 
    reception of message with pnsr bit set
  
Test Output: 
    Nm_ForwardSynchronizedPncShutdown calls
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00504</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>404</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00325</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>304</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1677</internalId></specobject>
    <specobject>
      <id>TC_CANNM_SynchronizedPncShutdown_17</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_35/source/application/CanNm_ConTest_35.c</sourcefile>
      <sourceline>1591</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that after receiving a TxConfirmation for a normal Nm message during one main function cycle,
    and a call to CanNm_RequestSynchronizedPncShutdown made on the next cycle for an active channel,
    then a pn sync shutdown request message is sent on the bus until a new TxConfirmation is received.
  
Test Object: None.
Test Precondition: 
    active channel is tested
  
Test Execution: 
    01: initialize stubs
    02: initialize CanNm
    03: go to normal operation state
    04: clear CanIf_Transmit stub count
    05: wait for a normal nm message to be sent
    06: simulate TxConfirmation for the sent normal message
    07: call main function once
    08: VP (CanNm.ASRR2111.SWS_CanNm_91003)
        call CanNm_RequestSynchronizedPncShutdown for channel 2 with pncid for one pnc associated
    09: call main function once
    10: check a pn sync shutdown message was transmitted
    11: VP (CanNm.ASRR2111.SWS_CanNm_00045, CanNm.ASRR2111.SWS_CanNm_00506)
        check pnsr is set and pninfo bits are set on the nm message sent on the bus
    12: call main function once
    13: check again that a pn sync shutdown message was transmitted
    14: check again that pnsr is set and pninfo bits are set on the nm message sent on the bus
    15: simulate TxConfirmation for the sent pn sync shutdown message
    16: wait till MsgCycleOffset expires and check no messages are sent in between
    17: VP (CanNm.ASRR2111.SWS_CanNm_00464, CanNm.ASRR2111.SWS_CanNm_00032)
        check a normal message was sent
  
Test Input: 
    calls to CanNm_RequestSynchronizedPncShutdown
  
Test Output: 
    message sent on bus
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_91003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>412</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00045</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>400</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00506</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>406</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00464</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>407</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00032</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>401</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1678</internalId></specobject>
    <specobject>
      <id>TC_CANNM_SynchronizedPncShutdown_18</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_35/source/application/CanNm_ConTest_35.c</sourcefile>
      <sourceline>1737</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that after calls to CanNm_RequestSynchronizedPncShutdown on an active channel
    when in ready sleep state, a nm message with PNSR bit and respective pncIds bits set
    is sent on the bus.
  
Test Object: None.
Test Precondition: 
    active channel is tested
  
Test Execution: 
    01: initialize stubs
    02: initialize CanNm
    03: go to ready sleep state
    04: clear CanIf_Transmit stub count
    05: clear tx buffer
    06: VP (CanNm.ASRR2111.SWS_CanNm_91003)
        call CanNm_RequestSynchronizedPncShutdown for channel 2 with pncid for both pncs associated
    07: simulate retrieving of pn info from comm. Initialize user data in Com (via PduR stub)
    08: call main function to process requests from CanNm_RequestSynchronizedPncShutdown
    09: check a message was transmitted
    10: VP (CanNm.ASRR2111.SWS_CanNm_00045, CanNm.ASRR2111.SWS_CanNm_00506)
        check pnsr is set and pninfo bits are set on the nm message sent on the bus
        (a pn synchronize shutdown message was sent instead of an immediate message)
    11: simulate tx confirmation for sent message
    12: call main function once
    13: VP (CanNm.ASRR2111.SWS_CanNm_00464)
        check no message was transmitted
  
Test Input: 
    calls to CanNm_RequestSynchronizedPncShutdown
  
Test Output: 
    message sent on bus
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_91003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>412</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00045</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>400</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00506</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>406</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00464</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>407</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1679</internalId></specobject>
    <specobject>
      <id>TC_CANNM_SynchronizedPncShutdown_19</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_35/source/application/CanNm_ConTest_35.c</sourcefile>
      <sourceline>1853</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that after calls to CanNm_RequestSynchronizedPncShutdown on a channel
    that does not have CanNmSynchronizedPncShutdownEnabled set, no pn sync shutdown
    message is sent on the bus.
  
Test Object: None.
Test Precondition: 
    active channel is tested
  
Test Execution: 
    01: initialize stubs
    02: initialize CanNm
    03: go to normal operation state
    04: clear CanIf_Transmit stub count
    05: clear tx buffer
    06: call main function until a normal message is sent
    07: check a message was sent
    08: check the state is still normal operation
    09: VP (CanNm.ASRR2111.SWS_CanNm_91003)
        call CanNm_RequestSynchronizedPncShutdown for channel 3 with pncid for one pnc associated
    10: call main function to process requests from CanNm_RequestSynchronizedPncShutdown
    11: check no additional message was sent
    12: call main function until another normal message is sent
    13: check a normal message was sent
    14: check pnsr is not set
  
Test Input: 
    calls to CanNm_RequestSynchronizedPncShutdown
  
Test Output: 
    no pn sync message sent on bus
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_91003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>412</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1680</internalId></specobject>
    <specobject>
      <id>TC_CANNM_SynchronizedPncShutdown_20</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_35/source/application/CanNm_ConTest_35.c</sourcefile>
      <sourceline>1975</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that when message cycle offset is 0, and in normal operation state,
    and receiving a message on the bus containing the repeat message request
    bit set, and in the same main function cycle a request to
    CanNm_RequestSynchronizedPncShutdown is made then a pn sync shutdown message
    is sent, and after a main function cycle an immediate message is sent.
  
Test Object: None.
Test Precondition: 
    active channel is tested
    Message Cycle Offest is 0 for tested channel.
  
Test Execution: 
    01: initialize stubs
    02: initialize CanNm
    03: got to normal operation state
    04: clear CanIf_Transmit stub count
    05: clear tx buffer
    06: simulate reception of pdu with repeat message request bit set
    07: VP (CanNm.ASRR2111.SWS_CanNm_91003)
        call CanNm_RequestSynchronizedPncShutdown for channel 0
    08: call main function once
    09: check current state is repeat message state
    10: check a pn sync shutdown message was transmitted
    11: VP (CanNm.ASRR2111.SWS_CanNm_00045, CanNm.ASRR2111.SWS_CanNm_00506)
        check pnsr is set and pninfo bits are set on the nm message sent on the bus
        (a pn synchronize shutdown message was sent instead of an immediate message)
    12: simulate tx confirmation for sent message
    13: call main function once
    14: VP (CanNm.ASRR2111.SWS_CanNm_00464, CanNm.ASRR2111.SWS_CanNm_00460)
        check a an immediate message was transmitted
  
Test Input: 
    calls to CanNm_RequestSynchronizedPncShutdown
  
Test Output: 
    message sent on bus
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_91003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>412</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00045</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>400</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00506</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>406</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00464</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>407</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00460</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>402</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1681</internalId></specobject>
    <specobject>
      <id>TC_CANNM_SynchronizedPncShutdown_21</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_35/source/application/CanNm_ConTest_35.c</sourcefile>
      <sourceline>2109</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that when sending a pn sync shutdown message on the bus on an active channel,
    the user data from the message is populated with user data from ComM.
  
Test Object: None.
Test Precondition: 
    active channel is tested
  
Test Execution: 
    01: initialize stubs
    02: initialize CanNm
    03: got to normal operation state
    04: clear CanIf_Transmit stub count
    05: clear tx buffer
    06: VP (CanNm.ASRR2111.SWS_CanNm_91003)
        call CanNm_RequestSynchronizedPncShutdown for channel 2 with pncid for one pnc associated
    07: initialize user data in Com (via PduR stub)
    08: call main function to process requests from CanNm_RequestSynchronizedPncShutdown
    09: check a pn sync shutdown message was transmitted
    10: VP (CanNm.ASRR2111.SWS_CanNm_00045, CanNm.ASRR2111.SWS_CanNm_00506)
        check user data is set, pnsr is set and pninfo bits are set on the nm message sent on the bus
  
Test Input: 
    call to CanNm_RequestSynchronizedPncShutdown
    user data from ComM
  
Test Output: 
    pn sync shutdown message
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_91003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>412</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00045</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>400</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00506</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>406</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1682</internalId></specobject>
    <specobject>
      <id>TC_CANNM_SynchronizedPncShutdown_22</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_35/source/application/CanNm_ConTest_35.c</sourcefile>
      <sourceline>2215</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that after failed attempts to send a pn sync shutdown message due to calls
    to CanNm_RequestSynchronizedPncShutdown on an active channel, and the
    CanNmPnShutdownMessageRetransmissionDuration timer expire then a runtime error is
    reported to det with error CANNM_E_TRANSMISSION_OF_PN_SHUTDOWN_MESSAGE_FAILED.
  
Test Object: None.
Test Precondition: 
    active channel is tested
  
Test Execution: 
    01: initialize stubs 
    02: initialize CanNm
    03: got to normal operation state
    04: clear CanIf_Transmit stub count
    05: clear tx buffer
    06: call main function until a normal nm message is transmitted
    07: check a a normal Nm message transmission occured
    08: call CanNm_RequestSynchronizedPncShutdown for channel 2 with pncid for one pnc associated
    09: call main function until CanNmPnShutdownMessageRetransmissionDuration expires
    10: check 2 pn sync shutdown message transmissions were attempted
    11: Vp (CanNm.ASRR2111.SWS_CanNm_00472, CanNm.EB_Ref.SWS_CanNm_00317.4)
        check det was reported
  
Test Input: 
    CanNmPnShutdownMessageRetransmissionDuration timer expire
  
Test Output: 
    det error
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00472</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>411</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00317.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>489</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1683</internalId></specobject>
    <specobject>
      <id>TC_CANNM_SynchronizedPncShutdown_23</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_35/source/application/CanNm_ConTest_35.c</sourcefile>
      <sourceline>2332</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that when pnc synchronize shutdown is enabled for an active channel,
    any calls to CanNm_Transmit will trigger a transmission on the bus only if
    no pn sync shutdown message is pending transmission.
  
Test Object: None.
Test Precondition: 
    active channel is tested
    CanNmComUserDataSupport is set to TRUE
  
Test Execution: 
    01: initialize stubs
    02: initialize CanNm
    03: got to normal operation state
    04: Clear CanIf_Transmit stub count
    05: clear tx buffer
    06: Initialize user data in Com (via PduR stub)
    07: call CanNm_RequestSynchronizedPncShutdown for channel 2 with pncid for one pnc associated
    08: call main function to process requests from CanNm_RequestSynchronizedPncShutdown
    09: check a pn sync shutdown message was transmitted
    10: check user data is set, pnsr is set and pninfo bits are set on the nm message sent on the bus
    11: set a pdu, different from com user data
    12: call CanNm_Transmit for TxPduId of the active channel
    13: VP (CanNm.EB.PnSyncShutdown.CanNm_Transmit)
        check no transmission occured
    14: check TxBuffer didn't change
    15: simulate tx confirmation for pn sync shutdown message
    16: call main function to process TxConfirmation of the pn sync shutdown message
    17: Clear CanIf_Transmit stub count
    18: call CanNm_Transmit for TxPduId of the active channel
    19: check a message was sent with data from pduInfo pdu
  
Test Input: 
    call to CanNm_RequestSynchronizedPncShutdown
    user data from ComM
    call to CanNm_Transmit
  
Test Output: 
    no message transmission from CanNm_Transmit while PNSR bit is set
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.PnSyncShutdown.CanNm_Transmit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>598</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1684</internalId></specobject>
    <specobject>
      <id>TC_CANNM_SynchronizedPncShutdown_24</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_35/source/application/CanNm_ConTest_35.c</sourcefile>
      <sourceline>2501</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that when message cycle offset is greater than 0, and in normal
    operation state, and receiving a message on the bus containing the repeat
    message request bit set, and in the same main function cycle a request to
    CanNm_RequestSynchronizedPncShutdown is made then a pn sync shutdown message
    is sent sent.
  
Test Object: None.
Test Precondition: 
    active channel is tested
    Message Cycle Offest is greater than 0 for tested channel.
  
Test Execution: 
    01: initialize stubs
    02: initialize CanNm
    03: got to normal operation state
    04: clear CanIf_Transmit stub count
    05: clear tx buffer
    06: simulate reception of pdu with repeat message request bit set
    07: VP (CanNm.ASRR2111.SWS_CanNm_91003)
        call CanNm_RequestSynchronizedPncShutdown for channel 0
    08: call main function once
    09: check current state is repeat message state
    10: check a pn sync shutdown message was transmitted
    11: VP (CanNm.ASRR2111.SWS_CanNm_00045, CanNm.ASRR2111.SWS_CanNm_00506)
        check pnsr is set and pninfo bits are set on the nm message sent on the bus
        (a pn synchronize shutdown message was sent)
  
Test Input: 
    calls to CanNm_RequestSynchronizedPncShutdown
  
Test Output: 
    message sent on bus
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_91003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>412</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00045</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>400</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00506</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>406</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1685</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TC_CANNM_SynchronizedPncShutdown_Multicore_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_36/source/application/CanNm_ConTest_36.c</sourcefile>
      <sourceline>74</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that when multicore is enabled and synchronized shutdown data is received from
    Nm partition then a pn synchronize shutdown message is sent on the bus.
  
Test Object: None.
Test Precondition: 
    active channel is tested
  
Test Execution: 
    01: initialize stubs
    02: initialize CanNm
    03: go to normal operation state
    04: clear tx buffer
    05: simulate retrieving of pn info from comm. Initialize user data in Com (via PduR stub)
    06: simulate data being sent from nm partition
    07: simulate failed data transfer from nm partition
    08: clear CanIf_Transmit stub count
    09: call main function once
    10: check a pn sync shutdown message was transmitted
    11: VP (CanNm.EB.PnSyncShutdown.CanNm_RequestSynchronizedPncShutdown.Multicore)
        check pnsr is set and pninfo bits are set on the nm message sent on the bus
  
Test Input: 
    pn sync shutdown data received from Nm partition
  
Test Output: 
    message sent on bus
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.PnSyncShutdown.CanNm_RequestSynchronizedPncShutdown.Multicore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>600</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1686</internalId></specobject>
    <specobject>
      <id>TC_CANNM_SynchronizedPncShutdown_Multicore_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_36/source/application/CanNm_ConTest_36.c</sourcefile>
      <sourceline>176</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that when multicore is enabled and a pn synchronized shutdown message is received
    on the bus then the pn info data, and the channel handle are sent to Nm partition, and
    no direct call is made to Nm_ForwardSynchronizedPncShutdown, and era timer is reset
    for the channel.
  
Test Object: None.
Test Precondition: 
    passive channel is tested
  
Test Execution: 
    01: initialize stubs
    02: initialize CanNm
    03: reset Nm_ForwardSynchronizedPncShutdown call count
    04: reset SchM_Send_CanNm_CanNm_ForwardSynchronizedPncShutdown_CanNm_To_Nm_DataSet call count, retval
    05: go to normal operation state
    06: simulate reception of a message on bus requesting TST_PNCID_1 and TST_PNCID_2
        set pnsr bit to 0, and set pn info bits for pncids TST_PNCID_1, TST_PNCID_2 to 1 in pdu data
    07: simulate reception of pdu
    08: call main function once
    09: simulate reception of a message on bus requesting synchronize shutdown for TST_PNCID_1 pnc
        set pnsr bit to 1, and set pn info bits for pncids TST_PNCID_1 to 1 in pdu data
    10: simulate reception of pdu
    11: reset PduR_CanNmRxIndication call count
    12: call main function once
    13: check era timer was reset (call to PduR_CanNmRxIndication occurred)
    14: check Nm_ForwardSynchronizedPncShutdown was not called
    15: VP (CanNm.EB.PnSyncShutdown.Nm_ForwardSynchronizedPncShutdown.Multicore)
        check data was sent to Nm
  
Test Input: 
    reception of message with pnsr bit set
  
Test Output: 
    pn sync shutdown data is sent to Nm partition
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.PnSyncShutdown.Nm_ForwardSynchronizedPncShutdown.Multicore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>601</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1687</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TC_CANNM_SynchronizedPncShutdown_MulticoreChannel_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_37_multicore/source/application/CanNm_ConTest_37.c</sourcefile>
      <sourceline>78</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that when multicore per channel is enabled and calls to
    CanNm_RequestSynchronizedPncShutdown are made then a pn sync shutdown
    message is sent on the bus and the pn info bits that are set on that
    message are also transmitted to the main partition for eira agregation.
  
Test Object: None.
Test Precondition: 
    multicore per channel conditions enabled
  
Test Execution: 
    01: set current os partition to the same one as that of current channel
    02: initialize CanNm
    03: passive startup request
    04: call main function for the transition to occur
    05: get the current state
    06: check current state is repeat message state
    07: clear CanIf_Transmit stub count
    08: VP (CanNm.ASRR2111.SWS_CanNm_91003)
        call CanNm_RequestSynchronizedPncShutdown for channel 2 with pncid for both pncs associated
    09: simulate retrieving of pn info from comm. Initialize user data in Com (via PduR stub)
    10: set the send functions call count to 0
    11: call main function to process requests from CanNm_RequestSynchronizedPncShutdown
    12: check a message was transmitted
    13: VP (CanNm.ASRR2111.SWS_CanNm_00045, CanNm.ASRR2111.SWS_CanNm_00506)
        check pnsr is set and pninfo bits are set on the nm message sent on the bus
        (a pn synchronize shutdown message was sent instead of an immediate message)
    14: check data was sent to main partition. 2 calls one from CanNm_HandlePNSyncShutdown, 
        and one from CanNm_HandlePnInfo that is sent each cycle
    15: VP (CanNm.EB.CanNmChannelMultiCore.Sender.Tx)
        check data sent fist time this cycle to nm partition (data sent by CanNm_HandlePNSyncShutdown)
  
Test Input: 
    calls to CanNm_RequestSynchronizedPncShutdown
  
Test Output: 
    data sent to aggregate partition
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_91003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>412</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00045</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>400</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00506</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>406</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.Sender.Tx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>615</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1688</internalId></specobject>
    <specobject>
      <id>TC_CANNM_SynchronizedPncShutdown_MulticoreChannel_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_37_multicore/source/application/CanNm_ConTest_37.c</sourcefile>
      <sourceline>219</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that when multicore per channel is enabled and a call to
    CanNm_RequestSynchronizedPncShutdown is made from a partition different than the
    preconfigured channel partition then a Det error is reported.
  
Test Object: None.
Test Precondition: 
    Channel 0 is assigned to TST_APPL_ID_0
  
Test Execution: 
    01: Reset Det_ReportError_Stub
    02: set current os partition to one different from current channel
    03: initialize CanNm
    04: call CanNm_RequestSynchronizedPncShutdown
    05: VP (CanNm.EB.CanNmChannelMultiCore.DetAppIDRequestSynchronizedPncShutdown)
        check a det error was reported
  
Test Input: 
    CanNm multicore channel suport is enabled.
    Channel assigned to different partition then os running partition. 
  
Test Output: 
    CANNM_E_INVALID_OSAPPLICATION error reported for non matching os application id. 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmChannelMultiCore.DetAppIDRequestSynchronizedPncShutdown</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>639</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1689</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TC_CANNM_SynchronizedPncShutdown_31</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_38/source/application/CanNm_ConTest_38.c</sourcefile>
      <sourceline>73</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that after calls to CanNm_RequestSynchronizedPncShutdown on an active channel
    when an immediate message is about to be sent, a nm message with PNSR bit and
    respective pncIds bits set is sent on the bus instead, and the immediate message
    is delayed by 1 cycle.
  
Test Object: None.
Test Precondition: 
    active channel is tested
  
Test Execution: 
    01: initialize stubs
    02: initialize CanNm
    03: go to repeat message state
    04: clear CanIf_Transmit stub count
    05: clear tx buffer
    06: VP(CanNm.ASRR2111.SWS_CanNm_91003, CanNm.ASRR2111.SWS_CanNm_00467)
        call CanNm_RequestSynchronizedPncShutdown for channel 0 with pncid TST_PNCID_1
    07: simulate retrieving of pn info from comm. Initialize user data in Com (via PduR stub)
    08: call main function to process requests from CanNm_RequestSynchronizedPncShutdown
    09: check a message was transmitted
    10: VP (CanNm.ASRR2111.SWS_CanNm_00045, CanNm.ASRR2111.SWS_CanNm_00506)
        check pnsr is set and pninfo bits are set on the nm message sent on the bus
        (a pn synchronize shutdown message was sent instead of an immediate message)
    11: simulate tx confirmation for sent message
    12: call main function once
    13: VP (CanNm.ASRR2111.SWS_CanNm_00460)
        check a message was transmitted
    14: VP (CanNm.ASRR2111.SWS_CanNm_00464)
        check pnsr and pninfo bits are unset on the nm message sent on the bus
  
Test Input: 
    calls to CanNm_RequestSynchronizedPncShutdown
  
Test Output: 
    message sent on bus
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_91003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>412</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00467</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>413</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00460</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>402</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00045</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>400</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00506</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>406</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00464</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>407</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1690</internalId></specobject>
    <specobject>
      <id>TC_CANNM_SynchronizedPncShutdown_32</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_38/source/application/CanNm_ConTest_38.c</sourcefile>
      <sourceline>198</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that after calls to CanNm_RequestSynchronizedPncShutdown on an active channel
    when an normal nm message is about to be sent, a nm message with PNSR bit and
    respective pncIds bits set is sent on the bus instead, and the normal nm message
    is delayed by 1 cycle.
  
Test Object: None.
Test Precondition: 
    active channel is tested
  
Test Execution: 
    01: initialize stubs
    02: initialize CanNm
    03: go to normal operation state
    04: clear CanIf_Transmit stub count
    05: clear tx buffer
    06: call main function until a normal message is sent
    07: call main function again until a normal message is about to be sent
    08: check the state is still normal operation
    09: VP (CanNm.ASRR2111.SWS_CanNm_91003)
        call CanNm_RequestSynchronizedPncShutdown for channel 0 with pncid for one pnc associated
    10: simulate retrieving of pn info from comm. Initialize user data in Com (via PduR stub)
    11: check no additional message was sent
    12: call main function to process requests from CanNm_RequestSynchronizedPncShutdown
    13: check a pn sync shutdown message was transmitted
    14: VP (CanNm.ASRR2111.SWS_CanNm_00045, CanNm.ASRR2111.SWS_CanNm_00506)
        check pnsr is set and pninfo bits are set on the nm message sent on the bus
        (a pn synchronize shutdown message was sent instead of an immediate message)
    15: simulate tx confirmation for sent message
    16: call main function once
    17: VP (CanNm.ASRR2111.SWS_CanNm_00460)
        check a message was transmitted
    18: VP (CanNm.ASRR2111.SWS_CanNm_00464)
        check pnsr and pninfo bits are unset on the nm message sent on the bus
    19: check the state is still normal operation
  
Test Input: 
    calls to CanNm_RequestSynchronizedPncShutdown
  
Test Output: 
    message sent on bus
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_91003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>412</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00460</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>402</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00045</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>400</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00506</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>406</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00464</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>407</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1691</internalId></specobject>
    <specobject>
      <id>TC_CANNM_SynchronizedPncShutdown_33</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_38/source/application/CanNm_ConTest_38.c</sourcefile>
      <sourceline>356</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that when receiving a message with PNSR bit set to 1 on an active channel while in repeat message state
    and a normal nm message is to be sent and no pnc sync shutdown message is to be sent, then a message is
    transmitted with current pn info data from ComM.
  
Test Object: None.
Test Precondition: 
    active channel is tested
  
Test Execution: 
    01: initialize stubs
    02: initialize CanNm
    03: clear CanIf_Transmit stub count
    04: go to repeat message state
    05: check no transmits occured
    06: call main function (MsgCycleOffset - 1) number of times just before first 
        immediate message is to be transmitted
    07: check no message was sent
    08: simulate reception of a message with pnsr bit set on active channel
    09: VP (CanNm.ASRR2111.SWS_CanNm_00461, CanNm.ASRR2111.ECUC_CanNm_00096, CanNm.EB_Ref.SWS_CanNm_00317.3)
        check CANNM_E_INVALID_PN_SYNC_SHUTDOWN_REQUEST runtime error was reported to Det
    10: call main function once
    11: VP (CanNm.ASRR2111.SWS_CanNm_00461)
        check a message was sent on the bus
    12: call main function till MsgCycleTime time window expires
    13: check immediate message is sent
  
Test Input: 
    reception of message with pnsr bit set
  
Test Output: 
    det runtime error
    normal NM message transmission
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00461</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>403</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.ECUC_CanNm_00096</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>416</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00317.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>488</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1692</internalId></specobject>
    <specobject>
      <id>TC_CANNM_SynchronizedPncShutdown_34</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_38/source/application/CanNm_ConTest_38.c</sourcefile>
      <sourceline>481</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that when receiving a message with PNSR bit set to 1 on an active channel while in normal operation state
    and neither a normal nm message nor pn sync shutdown message are to be sent, then a message is transmitted
    with current pn info data from ComM.
  
Test Object: None.
Test Precondition: 
    active channel is tested
  
Test Execution: 
    01: initialize stubs
    02: initialize CanNm
    03: go to normal operation state
    04: clear CanIf_Transmit stub count
    05: call main function till a message  is sent
    06: check a message was sent
    07: simulate reception of a message with pnsr bit set on active channel
    08: VP (CanNm.ASRR2111.SWS_CanNm_00461, CanNm.ASRR2111.ECUC_CanNm_00096, CanNm.EB_Ref.SWS_CanNm_00317.3)
        check CANNM_E_INVALID_PN_SYNC_SHUTDOWN_REQUEST runtime error was reported to Det
    09: call main function once
    10: VP (CanNm.ASRR2111.SWS_CanNm_00461)
        check a message was sent on the bus
    11: call main function till MsgCycleTime time window expires
    12: check a message was sent
  
Test Input: 
    reception of message with pnsr bit set
  
Test Output: 
    det runtime error
    normal NM message transmission
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00461</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>403</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.ECUC_CanNm_00096</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>416</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00317.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>488</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1693</internalId></specobject>
    <specobject>
      <id>TC_CANNM_SynchronizedPncShutdown_35</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_38/source/application/CanNm_ConTest_38.c</sourcefile>
      <sourceline>599</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that when receiving a message with PNSR bit set to 1 on an active channel while in normal operation state
    and a normal nm message is to be sent and no pnc sync shutdown message is to be sent, then a message is
    transmitted with current pn info data from ComM.
  
Test Object: None.
Test Precondition: 
    active channel is tested
  
Test Execution: 
    01: initialize stubs
    02: initialize CanNm
    03: clear CanIf_Transmit stub count
    04: go to normal operation state
    05: check no transmits occured
    06: call main function (MsgCycleOffset - 1) number of times just before a message is to be transmitted
    07: check no message was sent
    08: simulate reception of a message with pnsr bit set on active channel
    09: VP (CanNm.ASRR2111.SWS_CanNm_00461, CanNm.ASRR2111.ECUC_CanNm_00096, CanNm.EB_Ref.SWS_CanNm_00317.3)
        check CANNM_E_INVALID_PN_SYNC_SHUTDOWN_REQUEST runtime error was reported to Det
    10: call main function once
    11: VP (CanNm.ASRR2111.SWS_CanNm_00461)
        check a message was sent on the bus
    12: call main function till MsgCycleTime time window expires
    13: check immediate message is sent
  
Test Input: 
    reception of message with pnsr bit set
  
Test Output: 
    det runtime error
    normal NM message transmission
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00461</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>403</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.ECUC_CanNm_00096</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>416</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00317.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>488</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1694</internalId></specobject>
    <specobject>
      <id>TC_CANNM_SynchronizedPncShutdown_36</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_38/source/application/CanNm_ConTest_38.c</sourcefile>
      <sourceline>722</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that after a successful transmission of a pn sync shutdown message, the synchronize shutdown
    pn info bits stored are reset.
  
Test Object: None.
Test Precondition: 
    active channel is tested
  
Test Execution: 
    01: initialize stubs
    02: initialize CanNm
    03: go to normal operation state
    04: clear CanIf_Transmit stub count
    05: wait for a normal nm message to be sent
    06: VP (CanNm.ASRR2111.SWS_CanNm_91003)
        call CanNm_RequestSynchronizedPncShutdown for channel 0 with pncid for one pnc associated
    07: call main function once
    08: check a pn sync shutdown message was transmitted
    09: VP (CanNm.ASRR2111.SWS_CanNm_00045, CanNm.ASRR2111.SWS_CanNm_00506)
        check pnsr is set and pninfo bits are set on the nm message sent on the bus
    10: simulate TxConfirmation for the sent pn sync shutdown message
    11: wait till MsgCycleOffset and check no messages are sent in between
    12: VP (CanNm.ASRR2111.SWS_CanNm_00464)
        check a normal message was sent
  
Test Input: 
    pn sync shutdown message successfully sent
  
Test Output: 
    reset of pn sync shutdown aggregated bits
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_91003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>412</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00045</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>400</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00506</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>406</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00464</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>407</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1695</internalId></specobject>
    <specobject>
      <id>TC_CANNM_SynchronizedPncShutdown_37</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_38/source/application/CanNm_ConTest_38.c</sourcefile>
      <sourceline>840</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that after failed attempt to send a pn sync shutdown message due to a call
    to CanNm_RequestSynchronizedPncShutdown on an active channel, and the
    CanNmPnShutdownMessageRetransmissionDuration being 0 runtime error is
    reported to det with error CANNM_E_TRANSMISSION_OF_PN_SHUTDOWN_MESSAGE_FAILED.
  
Test Object: None.
Test Precondition: 
    active channel is tested
    CanNmPnShutdownMessageRetransmissionDuration is 0 or disabled
  
Test Execution: 
    01: initialize stubs
    02: initialize CanNm
    03: got to normal operation state
    04: clear CanIf_Transmit stub count
    05: clear tx buffer
    06: call CanNm_RequestSynchronizedPncShutdown for channel 2 with pncid for one pnc associated
    07: simulate transmission failure
    08: call main function once
    09: check a a pn sync shutdown message transmitions was attempted
    10: VP (SWS_CanNm_00471, CanNm.EB_Ref.SWS_CanNm_00317.4)
        check det was reported
  
Test Input: 
    failed pn sync shutdown message transmission
  
Test Output: 
    det error
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00471</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>410</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00317.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>489</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1696</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TC_CANNM_SynchronizedPncShutdown_51</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_39/source/application/CanNm_ConTest_39.c</sourcefile>
      <sourceline>73</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that when receiving a message with PNSR bit set to 1 on an passive channel then a call to
    Nm_ForwardSynchronizedPncShutdown is made, forwarding the pn info bits from the message to Nm.
  
Test Object: None.
Test Precondition: 
    passive channel is tested
  
Test Execution: 
    01: initialize stubs
    02: initialize CanNm
    03: go to normal operation state
    04: simulate reception of a message on bus requesting TST_PNCID_1
        set pnsr bit to 0, and set pn info bit for pncid TST_PNCID_1
    05: simulate reception of pdu
    06: call main function once
    07: simulate reception of a message on bus requesting synchronize shutdown for TST_PNCID_1 pnc
        set pnsr bit to 1, and set pn info bits for pncids TST_PNCID_1 to 1 in pdu data
    08: simulate reception of pdu
    09: reset PduR_CanNmRxIndication call count
    10: reset Nm_ForwardSynchronizedPncShutdown call count
    11: call main function once
    12: check era timer was reset (call to PduR_CanNmRxIndication occurred)
    13: VP (CanNm.ASRR2111.SWS_CanNm_00504)
        check Nm_ForwardSynchronizedPncShutdown was called
  
Test Input: 
    reception of message with pnsr bit set
  
Test Output: 
    Nm_ForwardSynchronizedPncShutdown calls
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00504</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>404</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1697</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_32037</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_4/source/application/CanNm_ConTest_4.c</sourcefile>
      <sourceline>43</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    To test the transition from NM_STATE_BUS_SLEEP to NM_STATE_REPEAT_MESSAGE,
    from NM_STATE_REPEAT_MESSAGE to NM_STATE_READY_SLEEP and from
    NM_STATE_READY_SLEEP to NM_STATE_REPEAT_MESSAGE.
    Reference - AUTOSAR CTSP Test case: TC_CANNM_0088
  
Test Object: None.
Test Precondition: 
    CanNmPassiveModeEnabled = false.
  
Test Execution: 
    01: Initialize CanNm.
    02: Verify whether the present state is bus sleep.
    03: Request the network using CanNm_NetworkRequest and call the
        CanNm_MainFunction once so that a transition occurs to
        Repeat message state.
    04: VP (CanNm.SWS_CanNm_00097):
        - Nm_NetworkMode is called.
        - The present state is repeat message state.
    05: Release the network using CanNm_NetworkRelease.
    06: Call CanNm_MainFunction for (CanNmRepeatMessageTime - 1) times.
    07: Verify whether the present state is still repeat message state.
    08: Receive NM PDU to restart the Nm timer.
    09: Call CanNm_MainFunction.
    10: VP (CanNm.SWS_CanNm_00106, CanNm.EB.Dsn.StateDynamics.RMS_TIMEOUT_READY_SLEEP_STATE):
        - The state is changed to ready sleep.
    11: Call CanNm_MainFunction one less than the remaining CanNmTimeoutTime.
    12: Verify the present state to ensure that state transaction does not
        occur before CanNmTimeoutTime elapses.
    13: Call CanNm_MainFunction once so that CanNmTimeoutTime elapses.
    14: VP (CanNm.SWS_CanNm_00109, CanNm.SWS_CanNm_00114, CanNm.ECUC_CanNm_00020):
        - Nm_PrepareBusSleepMode is called
        - The state is changed to prepare bus sleep.
    15: Request the network using CanNm_NetworkRequest and call the
        CanNm_MainFunction once so that a transition occurs to
        Repeat message state.
    16: VP (CanNm.SWS_CanNm_00097, CanNm.SWS_CanNm_00123):
        - Nm_NetworkMode is called
        - The present state is repeat message state.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00097</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>165</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00106</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>174</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00123</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>191</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00114</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>86</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.RMS_TIMEOUT_READY_SLEEP_STATE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1431</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1698</internalId></specobject>
    <specobject>
      <id>TS_CanNm_32038</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_4/source/application/CanNm_ConTest_4.c</sourcefile>
      <sourceline>237</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    To test the transition
    - from NM_STATE_REPEAT_MESSAGE to NM_STATE_NORMAL_OPERATION
    - from NM_STATE_NORMAL_OPERATION to NM_STATE_READY_SLEEP.
  
Test Object: None.
Test Precondition: 
    CanNmPassiveModeEnabled = false.
  
Test Execution: 
    01: Initialize CanNm.
    02: Verify whether the present state is bus sleep.
    03: Request the network using CanNm_NetworkRequest and call the
        CanNm_MainFunction once so that a transition occurs to
        Repeat message state.
    04: The state is changed to repeat message state.
    05: Call CanNm_MainFunction until the CanNmRepeatMessageTime expires.
    06: VP (CanNm.SWS_CanNm_00103, CanNm.EB.Dsn.StateDynamics.RMS_TIMEOUT_REPEAT_MESSAGE_STATE):
        - Verify whether The state is changed to normal operation state.
    07: Release the network using CanNm_NetworkRelease and call the
        CanNm_MainFunction once so that a transition occurs to
        NM_STATE_READY_SLEEP state.
    08: Verify whether the state is changed to ready sleep state.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00103</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>171</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.RMS_TIMEOUT_REPEAT_MESSAGE_STATE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1424</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1699</internalId></specobject>
    <specobject>
      <id>TC_CANNM_BUSLOAD_REDACTIVE_FALSE</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_4/source/application/CanNm_ConTest_4.c</sourcefile>
      <sourceline>338</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Repeat message test
Test Description: 
    To verify that when the Normal Operation State is entered from Repeat
    Message State or Ready Sleep State, the CanNm module shall not activate the
    BusLoadReduction feature for a particular channel when
    BusLoadReductionActive is set to FALSE, apart from BusLoadReductionEnabled
    is set to TRUE.
  
Test Object: None.
Test Precondition: 
    "CanNmBusLoadReductionEnabled" is set to "true"
    "CanNmPassiveModeEnabled" is set to "false".
    "CanNmBusLoadReductionActive" is set to "false".
  
Test Execution: 
    01: Invoke CanNm_Init().
    02: For each channel proceed the following step 3 to 21.
    03: Verify that CanNm bus load reduction feature (BusLoadReductionEnabled)
        is active.
    04: Verify the value of CanNm Repeat Message Time is non zero.
    05: Invoke CanNm_NetworkRequest() in bus sleep mode and verify that it
        returned "E_OK".
    06: Invoke CanNm_MainFunction().
        ==&gt; Deviation from CTSP: Check particularities below.
    07: Verify that the current state is Repeat Message state and current
        mode is "NM_MODE_NETWORK" by calling CanNm_GetState().
    08: Invoke CanNm_MainFunction until RMS timer gets expired.
    09: Verify that the current state is Normal Operation state and current
        mode is "NM_MODE_NETWORK" by calling CanNm_GetState().
    10: Invoke CanNm_RxIndication().
    11: Invoke CanNm_MainFunction() until Message Reduced time gets expired.
    12: VP (CanNm.EB_Ref.SWS_CanNm_00069):
        - CanIf_Transmit is not invoked since CanNmBusLoadReductionActive
          is disabled.
    13: Invoke CanNm_NetworkRelease().
    14: Invoke CanNm_MainFunction().
        ==&gt; Deviation from CTSP : Check particularities below.
    15: Verify that the current state is READY_SLEEP_STATE and current mode
        is "NM_MODE_NETWORK" by calling CanNm_GetState().
    16: Invoke CanNm_NetworkRequest().
    17: Invoke CanNm_MainFunction().
        ==&gt; Deviation from CTSP: Check particularities below.
    18: Verify that the current state is Normal Operation state and current mode
        is "NM_MODE_NETWORK" by calling CanNm_GetState().
    19: Invoke CanNm_RxIndication().
    20: Invoke CanNm_MainFunction() until Message Reduced time gets expired.
    21: VP (CanNm.EB_Ref.SWS_CanNm_00069):
        - CanIf_Transmit is not invoked since MessageReductionActive is
          disabled.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00069</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>464</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1700</internalId></specobject>
    <specobject>
      <id>TC_CANNM_ActiveWakeupBit_False</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_4/source/application/CanNm_ConTest_4.c</sourcefile>
      <sourceline>547</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that CanNm does not set the ActiveWakeupBit in the CBV upon the state
    change from BusSleep mode to Network Mode due to a call to
    CanNm_NetworkRequest() if the parameter "CanNmActiveWakeupBitEnabled" is set
    to FALSE.
  
Test Object: None.
Test Precondition: 
    CanNmActiveWakeupBitEnabled is FALSE.
  
Test Execution: 
    01: Invoke CanNm_Init().
    02: For each configured channel, execute steps 03-15.
    03: Invoke Network Request.
    04: Invoke Main Function once to process CanNm_NetworkRequest.
    05: Check if Repeat Message State is entered.
    06: If Message Cycle Offset is greater than zero, invoke Main Function
        in a loop until Message Cycle Offset elapses.
    07: VP (CanNm.EB_Ref.SWS_CanNm_00401.1):
        - ActiveWakeUp bit is not set in CBV.
    08: Goto Prepare Bus Sleep state.
    09: Invoke Network Request.
    10: Invoke Main Function once to process CanNm_NetworkRequest.
    11: Check if Repeat Message State is entered.
    12: If Message Cycle Offset is greater than zero, invoke Main Function
        in a loop until Message Cycle Offset elapses.
    13: VP (CanNm.EB_Ref.SWS_CanNm_00401.1):
        - ActiveWakeUp bit is not set in CBV.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00401.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>454</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1701</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TC_CANNM_CanNm_GetNodeIdentifier_E_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_40/source/application/CanNm_ConTest_40.c</sourcefile>
      <sourceline>41</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   Check that in case CanNmNodeIdEnabled is set to false for all channels CanNm_GetNodeIdentifier shall return E_NOT_OK
  
Test Object: None.
Test Precondition: 
    CanNmNodeIdEnabled shall be set to false on all channels
  
Test Execution: 
    01: Initialize stubs
    02: Initilize module
    03: Call CanNm_GetNodeIdentifier
  
Test Input: 
    Call CanNm_GetNodeIdentifier
  
Test Output: 
    CanNm_GetNodeIdentifier returns E_NOT_OK
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00219</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1702</internalId></specobject>
    <specobject>
      <id>TC_CANNM_CanNm_GetLocalNodeIdentifier_E_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_40/source/application/CanNm_ConTest_40.c</sourcefile>
      <sourceline>90</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
   Check that in case CanNmNodeIdEnabled is set to false for all channels CanNm_GetLocalNodeIdentifier shall return E_NOT_OK
  
Test Object: None.
Test Precondition: 
   CanNmNodeIdEnabled shall be set to false on all channels
  
Test Execution: 
    01: Initialize stubs
    02: Initilize module
    03: Call CanNm_GetNodeIdentifier
  
Test Input: 
    Call CanNm_GetLocalNodeIdentifier
  
Test Output: 
    CanNm_GetLocalNodeIdentifier returns E_NOT_OK
  </description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>250</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1703</internalId></specobject>
    <specobject>
      <id>TC_CANNM_CanNm_RepeatMessageRequest_E_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_40/source/application/CanNm_ConTest_40.c</sourcefile>
      <sourceline>139</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
   Check that in case CanNmNodeDetectionEnabled is set to false for all channels CanNm_RepeatMessageRequest shall return E_NOT_OK
  
Test Object: None.
Test Precondition: 
    CanNmNodeDetectionEnabled shall be set to false on all channels
  
Test Execution: 
    01: Initialize stubs
    02: Initilize module
    03: Call CanNm_RepeatMessageRequest
  
Test Input: 
    Call CanNm_RepeatMessageRequest
  
Test Output: 
    CanNm_RepeatMessageRequest returns E_NOT_OK
  </description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00221</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>251</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1704</internalId></specobject>
    <specobject>
      <id>TC_CANNM_CanNm_GetPduData_E_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_40/source/application/CanNm_ConTest_40.c</sourcefile>
      <sourceline>186</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   Check that in case CanNmNodeDetectionEnabled and CanNmNodeIdEnabled is set to false for all channels 
   and CanNmUserDataEnabled is set to false 
   CanNm_GetPduData shall return E_NOT_OK
  
Test Object: None.
Test Precondition: 
    CanNmNodeDetectionEnabled shall be set to false on all channels
    CanNmNodeIdEnabled shall be set to false on all channels
    CanNmUserDataEnabled is set to false
  
Test Execution: 
    01: Initialize stubs
    02: Initilize module
    03: Call CanNm_GetPduData
  
Test Input: 
    Call CanNm_GetPduData
  
Test Output: 
    CanNm_GetPduData returns E_NOT_OK
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00222</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>252</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1705</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_Schm_Call_Channel_Multicore_41</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_41_multicore/source/application/CanNm_ConTest_41.c</sourcefile>
      <sourceline>62</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    Check that era data is aggregated on channels when multicore per channel is enabled and eira is disabled.
  
Test Object: None.
Test Precondition: 
    CanNm multicore channel suport is enabled.
    CanNmPnEiraCalcEnabled is set to FALSE.
    One channel has CanNmPnEraCalcEnabled TRUE,
    One channel has CanNmPnEraCalcEnabled FALSE.
  
Test Execution: 
    01: Set buffer with valid PN info,
        set PduR_CanNmRxIndication_Stub callout function
    02: Initialize CanNm
    03: Call CanNm_PassiveStartUp
    04: Call channels main functions for transition to occur
    05: Check current state is NM_STATE_REPEAT_MESSAGE for all channels
    06: Call CanNm_NetworkRequest
    07: Call channels main functions until repeat message state timers expire for all channels
    08: Check current state is NM_STATE_NORMAL_OPERATION for all channels
    09: Reset stub buffers for data transmission between partitions
    10: Simulate reception of PN info data on all channels
    11: Reset PduR_CanNmRxIndication_Stub stub and Pdu buffer
    12: VP(CanNm.SWS_CanNm_00412, CanNm.ASR403.CANNM436, CanNm.SWS_CanNm_00437, CanNm.EB_Ref.SWS_CanNm_00443.1, CanNm.ASR403.CANNM434):
        Call main function for channel 0 and check:
          - no send functions calls occurred to master partition from channel 0
          - PduR_CanNmRxIndication was called once with Era PDU id as parameter
          - ERA data was aggregated for channel 0
    13: Call main function for channel 0 and check:
          - no send functions calls occurred to master partition from channel 1
          - PduR_CanNmRxIndication was not called
          - ERA data was not aggregated for channel 1
    14: Call main function that aggregates EIRA data
    15: Call all main functions till PN reset time expires and check:
          - no send functions calls occurred to master partition
          - PduR_CanNmRxIndication was not called
          - ERA Pdu buffer did not change
    16: VP (CanNm.SWS_CanNm_00442, CanNm.EB_Ref.SWS_CanNm_00443.2):
        Call main function for channel 0 and check:
        - PduR_CanNmRxIndication was called once with Era PDU id as parameter
        - ERA Pdu buffer data was reset to 0 after PN reset timer expired
    17: Call main function for channel 1 and check:
        - PduR_CanNmRxIndication was not called
        - ERA Pdu buffer did not change
    18: Call main function that aggregates EIRA data
    19: Check no send functions calls occurred to master partition.
  
Test Input: 
    Simulated reception of era data.
  
Test Output: 
    Received era data is aggregated on relevant channel.
  </description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00412</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>335</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM436</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>72</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00437</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>352</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00443.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>468</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM434</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00442</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>355</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00443.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>469</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1706</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TC_CANNM_ReliableTxConfirmation_001</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_42_ReliableTxConfirmation/source/application/CanNm_ConTest_42.c</sourcefile>
      <sourceline>42</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that if CanNmTxConfirmationReliableResultEnable is set to true and
    CanNm_TxConfirmation is called with result set to E_OK than the result is
    passed to PduR and the tx timeout time is reset.
  
Test Object: None.
Test Precondition: 
    CanNmGlobalPnSupport is set to TRUE.
  
Test Execution: 
    01: Initialize stubs.
    02: Initialize CanNm module.
    03: Reset Nm_TxTimeoutException stub count.
    04: Call main function once.
    05: Call CanNm_NetworkRequest for tested channel.
    06: Call main function once.
    07: Check current state is repeat message state.
    08: Wait till first NM message is about to be transmitted.
    09: Check no messages were transmitted.
    10: Call main function once to transmit first NM message.
    11: Check a NM message was transmitted.
    12: Simulate reception of a tx confirmation by calling CanNm_TxConfirmation with result set to E_OK.
    13: VP (CanNm.SWS_CanNm_00329)
        Check PduR_CanNmTxConfirmation was called and the result was set to E_OK.
    14: Call main function once to process the received tx confirmation.
    15: Check no nm timeout exception occurred (Nm_TxTimeoutException stub count is 0).
    16: Wait till a new NM message is about to be sent.
    17: Check no new message was sent.
    18: VP (CanNm.EB_Ref.SWS_CanNm_00065)
        Check Nm_TxTimeoutException stub count is still 0.
    19: Call main function once.
    20: Check a new NM message was transmitted.
    21: Check Nm_TxTimeoutException stub count is 0.
    22: Check PduR_CanNmTxConfirmation was not called since first NM message was transmitted.
    23: Wait till tx timeout time is about to expire.
    24: Check Nm_TxTimeoutException stub count is still 0.
    25: Call main function once.
    26: VP (CanNm.EB_Ref.SWS_CanNm_00065, CanNm.EB_Ref.SWS_CanNm_00066.1)
        Check a tx timeout occurred.
  
Test Input: 
    CanNm_TxConfirmation function calls.
  
Test Output: 
    Tx timeouts triggered or not triggered.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00329</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>308</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00065</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>492</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00066.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>490</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1707</internalId></specobject>
    <specobject>
      <id>TC_CANNM_ReliableTxConfirmation_002</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_42_ReliableTxConfirmation/source/application/CanNm_ConTest_42.c</sourcefile>
      <sourceline>207</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    Check that if any CanNm_TxConfirmation call that is made with result set
    to E_OK in the window starting to a NM message being transmitted and the
    tx timeout time (CanNmMsgTimeoutTime) will stop the tx timeout time.
  
Test Object: None.
Test Precondition: 
    CanNmGlobalPnSupport is set to TRUE.
  
Test Execution: 
    01: Initialize stubs.
    02: Initialize CanNm module.
    03: Reset Nm_TxTimeoutException stub count.
    04: Call main function once.
    05: Call CanNm_NetworkRequest for tested channel.
    06: Call main function once.
    07: Check current state is repeat message state.
    08: Wait till first NM message is about to be transmitted.
    09: Check no messages were transmitted.
    10: Call main function once to transmit first NM message.
    11: Check a NM message was transmitted.
    12: Wait one more cycle before simulating tx confirmation.
    13: Simulate reception of a tx confirmation by calling CanNm_TxConfirmation with result set to E_OK.
    14: Check PduR_CanNmTxConfirmation was called and the result was set to E_OK.
    15: Wait till next message cycle.
    16: Check a new NM message was transmitted.
    17: VP (CanNm.EB_Ref.SWS_CanNm_00065)
        Check no nm timeout exception occurred (Nm_TxTimeoutException stub count is 0).
    18: Wait till tx timeout is about to expire (last timeout timer cycle).
    19: Simulate reception of a tx confirmation by calling CanNm_TxConfirmation with result set to E_OK.
    20: Check PduR_CanNmTxConfirmation was called and the result was set to E_OK.
    21: Call main function once (this ends the timeout timer and also is on the same cycle as a CanNm_TxConfirmation call being handled).
    22: Check also timeout occurred (last cycle).
  
Test Input: 
    CanNm_TxConfirmation function calls.
  
Test Output: 
    Tx timeouts triggered or not triggered.
  </description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00065</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>492</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1708</internalId></specobject>
    <specobject>
      <id>TC_CANNM_ReliableTxConfirmation_003</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_42_ReliableTxConfirmation/source/application/CanNm_ConTest_42.c</sourcefile>
      <sourceline>354</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that if any CanNm_TxConfirmation call that is made with result set
    to E_NOT_OK in the window starting to a NM message being transmitted and
    the tx timeout time (CanNmMsgTimeoutTime) will stop the tx timeout time and
    will trigger a Nm_TxTimeoutException call.
  
Test Object: None.
Test Precondition: 
    CanNmGlobalPnSupport is set to TRUE.
  
Test Execution: 
    01: Initialize stubs.
    02: Initialize CanNm module.
    03: Reset Nm_TxTimeoutException stub count.
    04: Call main function once.
    05: Call CanNm_NetworkRequest for tested channel.
    06: Call main function once.
    07: Check current state is repeat message state.
    08: Wait till first NM message is about to be transmitted.
    09: Check no messages were transmitted.
    10: Call main function once to transmit first NM message.
    11: Check a NM message was transmitted.
    12: Simulate reception of a tx confirmation by calling CanNm_TxConfirmation with result set to E_NOT_OK.
    13: VP (CanNm.SWS_CanNm_00329)
        Check PduR_CanNmTxConfirmation was called and the result was set to E_NOT_OK.
    14: Check Nm_TxTimeoutException stub count is 0.
    15: Call main function once to process the tx confirmation recieved.
    16: VP (CanNm.EB_Ref.SWS_CanNm_00066.2)
        Check a tx timeout occurred and reset Nm_TxTimeoutException stub count.
    17: Wait till the next message cycle.
    18: Check one NM message was transmitted.
    19: Check Nm_TxTimeoutException stub count is 0.
    20: Wait one more cycle before simulating tx confirmation (middle of tx timeout window).
    21: Simulate reception of a tx confirmation by calling CanNm_TxConfirmation with result set to E_NOT_OK.
    22: VP (CanNm.SWS_CanNm_00329)
        Check PduR_CanNmTxConfirmation was called and the result was set to E_NOT_OK.
    23: Call main function once to process the tx confirmation recieved.
    24: VP (CanNm.EB_Ref.SWS_CanNm_00066.2)
        Check a tx timeout occurred and reset Nm_TxTimeoutException stub count.
    25: Wait till the next message cycle.
    26: Check one NM message was transmitted.
    27: Check Nm_TxTimeoutException stub count is 0.
    28: Wait till tx timeout is about to expire (last cycle of tx timeout window).
    29: Simulate reception of a tx confirmation by calling CanNm_TxConfirmation with result set to E_NOT_OK.
    30: VP (CanNm.SWS_CanNm_00329)
        Check PduR_CanNmTxConfirmation was called and the result was set to E_NOT_OK.
    31: Call main function once to process the tx confirmation recieved.
    32: VP (CanNm.EB_Ref.SWS_CanNm_00066.2)
        Check 2 tx exception occurred (one from negative TxConfirmation and one from NM Tx Timeout timer expiration).
  
Test Input: 
    CanNm_TxConfirmation function calls.
  
Test Output: 
    Tx timeouts triggered or not triggered.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00329</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>308</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00066.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>491</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1709</internalId></specobject>
    <specobject>
      <id>TC_CANNM_ReliableTxConfirmation_004</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_42_ReliableTxConfirmation/source/application/CanNm_ConTest_42.c</sourcefile>
      <sourceline>559</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    Check that for any NM message that does not receive a tx confirmation in
    CanNmMsgTimeoutTime then a Nm_TxTimeoutException call occurs.
  
Test Object: None.
Test Precondition: 
    CanNmGlobalPnSupport is set to TRUE.
  
Test Execution: 
    01: Initialize stubs.
    02: Initialize CanNm module.
    03: Reset Nm_TxTimeoutException stub count.
    04: Call main function once.
    05: Call CanNm_NetworkRequest for tested channel.
    06: Call main function once.
    07: Check current state is repeat message state.
    08: Wait till first NM message is about to be transmitted.
    09: Check no messages were transmitted.
    10: Call main function once to transmit first NM message.
    11: Check a NM message was transmitted.
    12: Call main function until the tx timeout time expires and check Nm_TxTimeoutException stub count is always 0.
    13: VP (CanNm.EB_Ref.SWS_CanNm_00066.1)
        Check a tx timeout occurred and reset Nm_TxTimeoutException stub count.
    14: Wait for just before next NM message cycle.
    15: Check no messages were transmitted.
    16: Call main function once.
    17: Check a NM message was transmitted.
    18: Call main function until the tx timeout time expires and check Nm_TxTimeoutException stub count is always 0.
    19: VP (CanNm.EB_Ref.SWS_CanNm_00066.1)
        Check a tx timeout occurred and reset Nm_TxTimeoutException stub count (two message cycles without a call to CanNm_TxConfirmation).
    20: Wait till CanNm enters normal operation state.
    21: Wait for a new message to be transmitted and reset tx timeouts stub counts.
    22: Check one NM message was transmitted.
    23: Wait till tx timeout timer expires.
    24: VP (CanNm.EB_Ref.SWS_CanNm_00066.1)
        Check a tx timeout occurred.
  
Test Input: 
    CanNm_TxConfirmation function calls.
  
Test Output: 
    Tx timeouts triggered or not triggered.
  </description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00066.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>490</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1710</internalId></specobject>
    <specobject>
      <id>TC_CANNM_ReliableTxConfirmation_005</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_42_ReliableTxConfirmation/source/application/CanNm_ConTest_42.c</sourcefile>
      <sourceline>748</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that if CanNm_TxConfirmation is called with result set to E_OK then
    CanNm timeout timer will be reset.
  
Test Object: None.
Test Precondition: 
    CanNmGlobalPnSupport is set to TRUE.
  
Test Execution: 
    01: Initialize stubs.
    02: Initialize CanNm module.
    03: Reset Nm_TxTimeoutException stub count.
    04: Call main function once.
    05: Call CanNm_NetworkRequest for tested channel.
    06: Wait till CanNm enters normal operation state.
    07: Wait till a NM message is transmitted.
    08: Check a NM message was transmitted.
    09: Simulate reception of a tx confirmation by calling CanNm_TxConfirmation with result set to E_OK.
    10: Check PduR_CanNmTxConfirmation was called and the result was set to E_OK.
    11: Release network.
    12: Call main function once.
    13: Check current state is ready sleep state.
    14: Wait till NM timeout timmer is about to expire.
    15: Check current state is still ready sleep state.
    16: Call main function once.
    17: VP (CanNm.EB_Ref.SWS_CanNm_00099.1)
        Check NM timeout timer expired by checking that CanNm entered prepare bus sleep state.
  
Test Input: 
    CanNm_TxConfirmation function calls.
  
Test Output: 
    Tx timeouts triggered or not triggered.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00099.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>465</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1711</internalId></specobject>
    <specobject>
      <id>TC_CANNM_ReliableTxConfirmation_006</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_42_ReliableTxConfirmation/source/application/CanNm_ConTest_42.c</sourcefile>
      <sourceline>884</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that if CanNm_TxConfirmation is called with result set to E_NOT_OK
    then CanNm timeout timer will be reset.
  
Test Object: None.
Test Precondition: 
    CanNmTxConfirmationReliableResultEnable is set to TRUE.
    CanNmGlobalPnSupport is set to TRUE.
  
Test Execution: 
    01: Initialize stubs.
    02: Initialize CanNm module.
    03: Reset Nm_TxTimeoutException stub count.
    04: Call main function once.
    05: Call CanNm_NetworkRequest for tested channel.
    06: Wait till CanNm enters normal operation state.
    07: Wait till a NM message is transmitted.
    08: Check a NM message was transmitted.
    09: Simulate reception of a tx confirmation by calling CanNm_TxConfirmation with result set to E_NOT_OK.
    10: Check PduR_CanNmTxConfirmation was called and the result was set to E_NOT_OK.
    11: Release network.
    12: Call main function once.
    13: Check current state is ready sleep state.
    14: Wait till NM timeout timmer is about to expire.
    15: Check current state is still ready sleep state.
    16: Call main function once.
    17: VP (CanNm.EB_Ref.SWS_CanNm_00099.1)
        Check NM timeout timer expired by checking that CanNm entered prepare bus sleep state.
  
Test Input: 
    CanNm_TxConfirmation function calls.
  
Test Output: 
    Tx timeouts triggered or not triggered.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00099.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>465</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1712</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TC_CANNM_ReliableTxConfirmation_ResultEOK_SyncPncShutdown</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_43_ReliableTxConfirmationPnSynncShutdown/source/application/CanNm_ConTest_43.c</sourcefile>
      <sourceline>73</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    Check that if a call to CanNm_RequestSynchronizedPncShutdown is made on an
    active channel and CanNm_TxConfirmation is called with result set to E_OK
    then pn sync shutdown retransmission timer is stopped.
  
Test Object: None.
Test Precondition: 
    CanNmSynchronizedPncShutdownEnabled is set to TRUE for tested channel.
    CanNmPnSyncShutdownErrorReactionEnabled is TRUE.
    CanNmPnShutdownMessageRetransmissionDuration is set to a value greater than 0.
  
Test Execution: 
    01: Initialize stubs.
    02: Initialize CanNm module.
    03: Go to state normal operation state.
    04: Wait for a NM message cycle to expire.
    05: Check a NM message was transmitted.
    06: Call CanNm_RequestSynchronizedPncShutdown for tested channel.
    07: Set CanNm_TxConfirmation to return E_NOT_OK (CanNm_TxConfirmation is called immediately in CanIf_Transmit stub function).
    08: Call main function once to process previous CanNm_TxConfirmation.
    09: VP (CanNm.ASRR2111.SWS_CanNm_00506)
        Check a PN sync shutdown message transmission was attempted.
    10: Set CanNm_TxConfirmation to return E_OK.
    11: Call main function once.
    12: Check a PN sync shutdown message was transmitted.
    13: Call main function once.
    14: VP (CanNm.ASRR2111.SWS_CanNm_00464)
        Check no message was tranmitted (no retransmission occured, CanNm_RequestSynchronizedPncShutdown request for TST_PNCID_1 was removed from internal buffer).
  
Test Input: 
    Calls to CanNm_RequestSynchronizedPncShutdown.
  
Test Output: 
    No retransmission of PN sync shutdown messages occured.
  </description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00506</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>406</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00464</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>407</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1713</internalId></specobject>
    <specobject>
      <id>TC_CANNM_ReliableTxConfirmation_ResultENOTOK_SyncPncShutdown</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_43_ReliableTxConfirmationPnSynncShutdown/source/application/CanNm_ConTest_43.c</sourcefile>
      <sourceline>199</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    Check that if a call to CanNm_RequestSynchronizedPncShutdown is made on an
    active channel and CanNm_TxConfirmation is called with result set to
    E_NOT_OK then pn sync shutdown will not stop retransmission timer.
  
Test Object: None.
Test Precondition: 
    CanNmSynchronizedPncShutdownEnabled is set to TRUE for tested channel.
    CanNmPnSyncShutdownErrorReactionEnabled is TRUE.
    CanNmPnShutdownMessageRetransmissionDuration is set to a value greater than 0.
  
Test Execution: 
    01: Initialize stubs.
    02: Initialize CanNm module.
    03: Go to state normal operation state.
    04: Wait for a NM message cycle to expire.
    05: Check a NM message was transmitted.
    06: Call CanNm_RequestSynchronizedPncShutdown for tested channel.
    07: Set CanNm_TxConfirmation to return E_NOT_OK (CanNm_TxConfirmation is called immediately in CanIf_Transmit stub function).
    08: Call main function until PN sync shutdown retransmission timer expires.
    09: Check at each main function call a PN sync shutdown message trasmission was attempted.
    10: Call main function once.
    11: VP (CanNm.ASRR2111.SWS_CanNm_00472)
        Check CANNM_E_TRANSMISSION_OF_PN_SHUTDOWN_MESSAGE_FAILED det error was reported.
    
Test Input: 
    Calls to CanNm_RequestSynchronizedPncShutdown.
  
Test Output: 
    Retransmission of PN sync shutdown messages occured.
  </description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASRR2111.SWS_CanNm_00472</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>411</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1714</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TC_CANNM_ReliableTxConfirmation_Schm_01</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_44_ReliableTxConfirmation_Schm/source/application/CanNm_ConTest_44.c</sourcefile>
      <sourceline>42</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Ensure that function calls are done via RTE SCHM mechanism.
  
Test Object: None.
Test Precondition: 
    CanNmMultiCoreSupport is set to TRUE.
  
Test Execution: 
    01: Reset stub counts.
    02: Initialize CanNm module.
    03: Request network for tested channel.
    04: Call main function until a message is transmitted.
    05: Simulate tx confirmation reception with result E_OK.
    06: Check no schm call to NM tx timeout exception occurred.
    07: Set stub schm call for NM tx timeout exception to return SCHM_E_OK.
    08: Call main function once.
    09: VP (CanNm.EB.SchM_Call_Nm_TxTimeoutException)
        Check schm call to NM tx timeout exception occurred.
    10: Check no det error is reported.
  
Test Input: 
    Tx confirmation E_OK for a NM message.
  
Test Output: 
    No schm call to NM tx timeout.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_TxTimeoutException</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>577</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1715</internalId></specobject>
    <specobject>
      <id>TC_CANNM_ReliableTxConfirmation_Schm_02</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_44_ReliableTxConfirmation_Schm/source/application/CanNm_ConTest_44.c</sourcefile>
      <sourceline>122</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Ensure that function calls are done via RTE SCHM mechanism.
  
Test Object: None.
Test Precondition: 
    CanNmMultiCoreSupport is set to TRUE.
  
Test Execution: 
    01: Reset stub counts.
    02: Initialize CanNm module.
    03: Request network for tested channel.
    04: Call main function until a message is transmitted.
    05: Simulate tx confirmation reception with result E_OK.
    06: Check no schm call to NM tx timeout exception occurred.
    07: Set stub schm call for NM tx timeout exception to return SCHM_E_NOT_OK.
    08: Call main function once.
    09: VP (CanNm.EB.SchM_Call_Nm_TxTimeoutException)
        Check schm call to NM tx timeout exception occurred.
    10: VP (CanNm.EB.SchM_Call_DET)
        Check det error is reported.
  
Test Input: 
    Tx confirmation E_NOT_OK for a NM message.
  
Test Output: 
    Schm call to NM tx timeout.
    Det error.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_Nm_TxTimeoutException</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>577</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.SchM_Call_DET</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1716</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TC_CANNM_CanNm_MultipleNetworkOperations_01</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_45_MultipleNetworkOperation_01_Schm/source/application/CanNm_ConTest_45.c</sourcefile>
      <sourceline>41</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Ensure that correct function is called when CanNm_MultipleNetworkOperations
    is called with parameter for PassiveStartup
  
Test Object: None.
Test Precondition: 
    CanNmMultiCoreSupport is set to True.
    CanNmMultiCoreUseSingleCS is set to true 
    Passive mode is set to false
  
Test Execution: 
    01: Initialize stubs and module
    02: Call CanNm_MultipleNetworkOperations
    03: Check that the correct state is ready sleep state
  
Test Input: 
    CanNm_MultipleNetworkOperations with operation for Passive Startup
  
Test Output: 
    Passive startup is executed
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmMultiCoreUseSingleCS.PassiveStartup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>649</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmMultiCoreUseSingleCS.CanNm_MultipleNetworkOperations</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>647</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1717</internalId></specobject>
    <specobject>
      <id>TC_CANNM_CanNm_MultipleNetworkOperations_02</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_45_MultipleNetworkOperation_01_Schm/source/application/CanNm_ConTest_45.c</sourcefile>
      <sourceline>97</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Ensure that correct function is called when CanNm_MultipleNetworkOperations
    is called with parameter for NetworkRequest and NetworkRelease
  
Test Object: None.
Test Precondition: 
    CanNmMultiCoreSupport is set to True.
    CanNmMultiCoreUseSingleCS is set to true 
    Passive mode is set to false
  
Test Execution: 
    01: Initialize stubs and module
    02: Call CanNm_MultipleNetworkOperations
    03: Check current state is Normal operation state
    04: Check active wakeup bit is set
    05: Call CanNm_MultipleNetworkOperations
    06: Check current state is Ready Sleep state
  
Test Input: 
    CanNm_MultipleNetworkOperations with operation for Network Request
    CanNm_MultipleNetworkOperations with operation for Network Release
  
Test Output: 
    Active wakeup bit is set
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmMultiCoreUseSingleCS.NetworkRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>650</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmMultiCoreUseSingleCS.NetworkRelease</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>651</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmMultiCoreUseSingleCS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>646</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmMultiCoreUseSingleCS.CanNm_MultipleNetworkOperations</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>647</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1718</internalId></specobject>
    <specobject>
      <id>TC_CANNM_CanNm_MultipleNetworkOperations_03</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_45_MultipleNetworkOperation_01_Schm/source/application/CanNm_ConTest_45.c</sourcefile>
      <sourceline>177</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Ensure that correct function is called when CanNm_MultipleNetworkOperations
    is called with parameter for NetworkGwEraRequest
  
Test Object: None.
Test Precondition: 
    CanNmMultiCoreSupport is set to True.
    CanNmMultiCoreUseSingleCS is set to true 
    Passive mode is set to false
  
Test Execution: 
    01: Initialize stubs and module
    02: Call CanNm_MultipleNetworkOperations
    03: Check current state is Normal operation state
    04: Check active wakeup bit is not set
  
Test Input: 
    CanNm_MultipleNetworkOperations with operation for Network Gw Era Request
  
Test Output: 
    Active wakeup bit is not set
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmMultiCoreUseSingleCS.NetworkGwEraRequest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>652</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmMultiCoreUseSingleCS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>646</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmMultiCoreUseSingleCS.CanNm_MultipleNetworkOperations</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>647</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1719</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TC_CANNM_CanNm_MultipleNetworkOperations_04</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_46_MultipleNetworkOperation_02_Schm/source/application/CanNm_ConTest_46.c</sourcefile>
      <sourceline>36</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Ensure that correct function is called when CanNm_MultipleNetworkOperations
    is called with parameter for PassiveStartup
  
Test Object: None.
Test Precondition: 
    CanNmMultiCoreSupport is set to True.
    CanNmMultiCoreUseSingleCS is set to true 
    Passive mode is set to true
  
Test Execution: 
    01: Initialize stubs and module
    02: Call CanNm_MultipleNetworkOperations
    03: Check that the correct state is ready sleep state
  
Test Input: 
    CanNm_MultipleNetworkOperations with operation for Passive Startup
  
Test Output: 
    Passive startup is executed
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmMultiCoreUseSingleCS.PassiveStartup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>649</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmMultiCoreUseSingleCS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>646</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmMultiCoreUseSingleCS.CanNm_MultipleNetworkOperations</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>647</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1720</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TC_CANNM_CanNm_GetLocalNodeIdentifier_ParameterUnused</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_47_Coverage/source/application/CanNm_ConTest_47.c</sourcefile>
      <sourceline>46</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that in case only one CanNm channel is configured, and
    CanNmNodeIdEnabled is set to TRUE, and CanNmDevErrorDetect is set to FALSE,
    and CanNmNodeIdCallback is enabled, then CanNm_GetLocalNodeIdentifier
    shall return node identifier configured for the local node in the
    nmNodeIdPtr parameter.
  
Test Object: None.
Test Precondition: 
    one CanNm channel is configured.
    CanNmNodeIdEnabled set to TRUE.
    CanNmDevErrorDetect is set to FALSE.
    CanNmNodeIdCallback is enabled and set.
  
Test Execution: 
    01: Initilize CanNm.
    02: Call main function once.
    03: VP (CanNm.SWS_CanNm_00220)
        Call CanNm_GetNodeIdentifier and check it returns E_NOT_OK.
    04: Check node identifier returned is local node identifier for the tested channel.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>250</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1721</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TC_CANNM_CanNm_PrepareBusSleep_To_RepeatMessage_Coverage</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_48_Coverage/source/application/CanNm_ConTest_48.c</sourcefile>
      <sourceline>43</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that receiving a rx indication in prepare bus sleep state will
    transition to repeat message state. (Coverage test in case
    CanNmPduRxIndicationEnabled is false)
  
Test Object: None.
Test Precondition: 
    More than one cannm channels are configured
    CanNmPassiveModeEnabled is set to false
    CanNmPduRxIndicationEnabled is set to false
  
Test Execution: 
    01: Initialize CanNm.
    02: Go to prepare bus sleep state.
    03: Simulate rx indication.
    04: Call main function once.
    05: VP (CanNm.SWS_CanNm_00124, CanNm.EB.Dsn.StateDynamics.RX_INDICATION_PREPARE_BUS_SLEEP_MODE)
        Check current state is repeat message state.
  
Test Input: 
    Rx indication while in prepare bus sleep state
  
Test Output: 
    State change from prepare bus sleep to repeat message states
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00124</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>192</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.RX_INDICATION_PREPARE_BUS_SLEEP_MODE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1440</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1722</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TC_CANNM_TRANSMIT_PASSIVE</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_5/source/application/CanNm_ConTest_5.c</sourcefile>
      <sourceline>42</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Passive Start up test
Test Description: 
    Verify that in case passive mode is enabled
    CanNm_Transmit returns E_NOT_OK
  
Test Object: None.
Test Precondition: None.
Test Execution: 
    01: Initialize CanNm
    02: VP (CanNm.ASR403.CANNM330):
        - Call CanNm_Transmit
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM330</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1723</internalId></specobject>
    <specobject>
      <id>TC_CANNM_PassiveStartup_RMSTimeExpire</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_5/source/application/CanNm_ConTest_5.c</sourcefile>
      <sourceline>83</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Passive Start up test
Test Description: 
    Verify that in case passive mode is enabled, and a passive startup occurs,
    and RMS time expires, then CanNM enters bus sleep mode.
  
Test Object: None.
Test Precondition: 
    CanNmPassiveModeEnabled is set to TRUE.
    More than one channel are configured.
  
Test Execution: 
    01: Initialize CanNm
    02: Call CanNm_PassiveStartUp.
    03: Call main function till RMS timer is about to expire.
    04: Check current mode is network mode and state is repeat message state.
    05: Call main function once.
    06: VP(CanNm.SWS_CanNm_00106)
        Check current mode is prepare bus sleep mode and state is 
        prepare bus sleep state.
  
Test Input: 
    RMS timer expiration after CanNm_PassiveStartUp call
  
Test Output: 
    Exit from sending submode transition .
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00106</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>174</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1724</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CANNM_CanNmPnInfo_504PNCs</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_504PNCs/source/application/EbTests.c</sourcefile>
      <sourceline>42</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    &lt;para&gt;
      Verify CanNm partial networking functionality when the sum
      (CanNmPnInfoLength + CanNmPnInfoOffset) is greater than 31 and
      the data provided are correct.
    &lt;/para&gt;
  
Test Object: None.
Test Precondition: 
    Partial networking is enabled (CanNmPnEnabled)
  
Test Execution: 
    01. Initialize Stubs.
    02. Initialize CanNm.
    03. Set all PN request bits in the NM-Pdu.
    04. Call CanNm_ConfirmPnAvailability to enable Pn filtering.
    05. Clear PduR_CanNmRxIndication stub count.
    06. Invoke RxIndication.
    07. Call main function once.
    08. VP(CanNm.EB.CanNmPnInfo): PduR_CanNmRxIndication is called.
    09. EIRA data provided by COM module is valid.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmPnInfo</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>580</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00061</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>116</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00060</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00063</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1725</internalId></specobject>
    <specobject>
      <id>TS_CANNM_CanNmPnResetTime_504PNCs</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_504PNCs/source/application/EbTests.c</sourcefile>
      <sourceline>134</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    &lt;para&gt;
      Verify CanNm partial networking functionality when the sum
      (CanNmPnInfoLength + CanNmPnInfoOffset) is greater than 31 and
      the data provided are correct.
      When the EIRA reset timers expires, then the PN request bit shall be set to 0.
    &lt;/para&gt;
  
Test Object: None.
Test Precondition: 
    Partial networking is enabled (CanNmPnEnabled)
  
Test Execution: 
    01. Initialize Stubs.
    02. Initialize CanNm.
    03. Set all PN request bits in the NM-Pdu.
    04. Call CanNm_ConfirmPnAvailability to enable Pn filtering.
    05. Clear PduR_CanNmRxIndication stub count.
    06. Invoke CanNm_RxIndication.
    07. Call main function once.
    08. VP(CanNm.EB.CanNmPnInfo): PduR_CanNmRxIndication is called.
    09. EIRA data provided by COM module is valid.
    10. Invoke CanNm_RxIndication.
    11. Call main function once.
    12. VP(CanNm.SWS_CanNm_00412, CanNm.EB_Ref.SWS_CanNm_00432.1): PduR_CanNmRxIndication is not Invoked as
        there was no change in the PN info received.
    13. Invoke Main Function continuously for one cycle time less than
        what is required for PN Reset Timer expiry.
    14. VP: PduR_CanNmRxIndication is not invoked and the respective bits in the EIRA value are not cleared.
    15. Invoke Main Function once so that PN Reset Time elapses.
    16: VP (CanNm.SWS_CanNm_00442, CanNm.EB_Ref.SWS_CanNm_00432.3, CanNm.SWS_CanNm_00325): PduR_CanNmRxIndication is
        invoked and the respective bits in the EIRA value are cleared.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmPnInfo</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>580</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00061</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>116</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00060</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00063</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00412</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>335</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00432.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>449</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00442</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>355</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00432.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>451</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00325</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>304</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1726</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TC_CANNM_0082</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>74</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: State Transition
Test Description: 
    Verify that if Repeat Message State is entered from Bus-Sleep Mode,
    CanNm deactivates the bus load reduction.
  
Test Object: None.
Test Precondition: 
    "CanNmPassiveModeEnabled" is set to FALSE.
    "CanNmBusLoadReductionActive" is set to TRUE.
  
Test Execution: 
    01: Call CanNm_Init().
    02: For each configured CanNm Channel execute the following.
    03: Verify whether the value of CanNmBusLoadReductionActive is true.
    04: Verify whether the value of CanNm repeat message time is greater than 0.
    05: Verify that message cycle offset time is greater than
        message reduced time.
    06: Call CanNm_GetState() to verify whether the current state is
        NM_STATE_BUS_SLEEP and current mode is NM_MODE_BUS_SLEEP.
    07: Call CanNm_NetworkRequest() in bus sleep mode and verify that it
        returned "E_OK".
    08: Call CanNm_MainFunction()
    09: Verify whether the current state is "NM_STATE_REPEAT_MESSAGE".
    10: Receive a Nm PDU.
    11: Call CanNm_MainFunction() one count less than message cycle offset time.
    12: VP (CanNm.SWS_CanNm_00023, CanNm.EB_Ref.SWS_CanNm_00156.1):
        - CanIf_Transmit() is not invoked (Message Cycle Offset is greater than
          Message Reduced Time. NM-PDU is not sent now bacause Message Reduced
          Time is not in effect).
    13: Call CanNm_MainFunction() so that message cycle offset time expires.
    14: Verify that CanIf_Transmit() is invoked.
    15: Release current channel and wait until it goes to sleep
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00156.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>432</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00023</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>137</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1727</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0083</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>212</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: State transition test 
Test Description: 
    Verify that when Repeat Message State is entered from Prepare Bus-Sleep Mode
    CanNm deactivates bus load reduction.
  
Test Object: None.
Test Precondition: 
    "CanNmPassiveModeEnabled" is set to FALSE.
    "CanNmBusLoadReductionEnabled" is set to TRUE.
  
Test Execution: 
    01: Call CanNm_Init().
    02: For each configured CanNm Channel, execute the steps 03 to 18.
    03: Make sure that CanNmBusLoadReductionActive is true.
    04: Make sure that CanNm repeat message time is greater than 0.
    05: Verify that message cycle offset time is greater than
        message reduced time.
    06: Call CanNm_NetworkRequest() in bus sleep mode and verify that it
        returned "E_OK".
    07: Call CanNm_MainFunction() so that the state changes to repeat message
        state.
    08: Call CanNm_NetworkRelease() in repeat message state and verify that it
        returned "E_OK".
    09: Call CanNm_MainFunction() in a loop until the CanNm Repeat Message Time
        and remaining CanNm Timeout Time expires.
    10: Call CanNm_GetState() in prepare bus sleep state and verify that the
        state is NM_STATE_PREPARE_BUS_SLEEP.
    11: Call CanNm_NetworkRequest() in prepare bus sleep state and verify that.
        it returns "E_OK".
    12: Call CanNm_MainFunction().
    13: Verify whether the current state is "NM_STATE_REPEAT_MESSAGE".
        and current mode is "NM_MODE_NETWORK".
    14: Call CanNm_RxIndication().
    15: Call CanNm_MainFunction() in a loop one count less than message cycle
        offset time.
    16: VP (CanNm.EB_Ref.SWS_CanNm_00156.2):
        - CanIf_Transmit() is not invoked (Message Cycle Offset is greater than
          Message Reduced Time. NM-PDU is not sent now because Message Reduced
          Time is not in effect).
    17: Call CanNm_MainFunction() to expire message cycle offset time.
    18: Verify that CanIf_Transmit() is invoked.
    19: Release current channel and wait until it goes to sleep
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00156.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>433</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1728</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0084</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>371</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: State transition test 
Test Description: 
    Verify the behavior of CanNm when the network has been requested in the
    Prepare Bus Sleep Mode.
  
Test Object: None.
Test Precondition: 
    "CanNmImmediateRestartEnabled" is set to TRUE.
    "CanNmPassiveModeEnabled" is set to FALSE.
  
Test Execution: 
    01:  Initialize CanNm and stubs.
    02:  Execute steps 03-12 for each configured channel.
    03:  Call CanNm_NetworkRequest() in bus sleep state and invoke
         CanNm_MainFunction() to process the request.
    04:  Verify that the current state is "NM_STATE_REPEAT_MESSAGE" and
         the current mode is "NM_MODE_NETWORK".
    05:  Call CanNm_NetworkRelease() in repeat message state.
    06:  Call CanNm_MainFunction() in a loop until CanNm Repeat Message Time
         elapses.
    07:  Verify that the current state is "NM_STATE_READY_SLEEP" and
         the current mode is "NM_MODE_NETWORK".
    08:  Call CanNm_MainFunction() in a loop until CanNm Timeout Time elapses.
    09:  Verify that the current state is "NM_STATE_PREPARE_BUS_SLEEP" and
         the current mode is "NM_MODE_PREPARE_BUS_SLEEP".
    10:  Call CanNm_NetworkRequest() in prepare bus sleep state and invoke
         CanNm_MainFunction() to process the request.
    11:  VP (CanNm.SWS_CanNm_00122, CanNm.EB.Dsn.StateDynamics.NET_REQ_STATUS_CHANGED_PREPARE_BUS_SLEEP_MODE):
          - CanIf_Transmit() is invoked.
    12:  Verify that the current state is "NM_STATE_REPEAT_MESSAGE" and
         the current mode is "NM_MODE_NETWORK".
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00122</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>190</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.NET_REQ_STATUS_CHANGED_PREPARE_BUS_SLEEP_MODE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1439</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1729</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0105</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>512</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: State transition test 
Test Description: 
    Verify that the CanNm module stops transmission of Network Management PDUs,
    when Ready Sleep State is entered from Normal Operation State
    Verify that the CanNm module starts transmission of Network Management PDUs
    when Normal Operation State is entered from Ready Sleep State.
  
Test Object: None.
Test Precondition: 
    "CanNmPassiveModeEnabled" is set to FALSE.
  
Test Execution: 
    01: Call CanNm_Init().
    02: Execute steps 03-16 for each configured channel.
    03: Bring the state to "NM_STATE_NORMAL_OPERATION".
    04: Call CanNm_NetworkRelease() in normal operation state and verify
        that CanNm_NetworkRelease() returns "E_OK".
    05: Call CanNm_MainFunction().
    06: Verify that that the current state is "NM_STATE_READY_SLEEP".
    07: Call CanNm_RxIndication().
    08: Call CanNm_MainFunction() until one count less than message
        cycle time elapses.
    09: Call CanNm_RxIndication().
    10: Call CanNm_MainFunction().
    11: VP (CanNm.EB_Ref.SWS_CanNm_00108.2):
        - CanIf_Transmit() is not invoked. (Ready sleep state was entered from
          Normal operation state and Main function was called until
          message cycle time elapses. CanIf_Transmit had not been invoked
          indicates that CanNm module stopped the transmission of NM PDUs).
    12: Call CanNm_NetworkRequest and verify that it returns "E_OK".
    13: Call the CanNm_MainFunction().
    14: Verify that the current state is "NM_STATE_NORMAL_OPERATION".
    15: Call CanNm_MainFunction() in a loop until the message cycle offset time
        elapses.
    16: VP (CanNm.SWS_CanNm_00116, CanNm.EB.Dsn.StateDynamics.NET_REQ_STATUS_CHANGED_READY_SLEEP_STATE):
        - CanIf_Transmit() is invoked. (Normal operation state was entered from
          Ready sleep state and Main function was called until
          message cycle offset time elapses. CanIf_Transmit has been invoked
          indicates that CanNm module started the transmission of NM PDUs)
    17: Release current channel and wait until it goes to sleep
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00116</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00108.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>429</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.NET_REQ_STATUS_CHANGED_READY_SLEEP_STATE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1436</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1730</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0136</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>691</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: State transition test 
Test Description: 
    Verify the behavior of CanNm when Repeat Message State is entered from
    Bus-Sleep Mode.
  
Test Object: None.
Test Precondition: 
    "CanNmPassiveModeEnabled" is set to FALSE.
  
Test Execution: 
    01: Call CanNm_Init().
    02: Execute steps 03-09 for each configured channel.
    03: Call CanNm_NetworkRequest() in bus sleep state and invoke
        CanNm_MainFunction() so that the state changes to repeat message.
    04: Verify that the current state is "NM_STATE_REPEAT_MESSAGE" and
        the current mode is "NM_MODE_NETWORK".
    05: Call CanNm_MainFunction() in a loop until the CanNm Message Cycle Offset
        time elapses.
    06: VP (CanNm.EB_Ref.CANNM100.1):
        - CanIf_Transmit() is invoked.
    07: Release current channel and wait until it goes to sleep
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM100.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>421</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1731</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0137</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>783</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: State transition test 
Test Description: 
    Verify that when the Repeat Message State is entered from Prepare Bus Sleep
    Mode, the CanNm module starts transmission of Network Management PDUs.
  
Test Object: None.
Test Precondition: 
    "CanNmPassiveModeEnabled" is set to "false".
  
Test Execution: 
    &lt;execution&gt;
      01: Call CanNm_Init().
      02: For each configured CanNm Channel execute the following.
      03: Bring the current state to prepare bus sleep state.
      04: Call CanNm_NetworkRequest() in prepare bus sleep state.
      05: Call CanNm_MainFunction() to handle the state change.
      06: VP (CanNm.SWS_CanNm_00234):
          - The current state is "NM_STATE_REPEAT_MESSAGE" and current mode
            is "NM_MODE_NETWORK".
      07: Call CanNm_MainFunction() in a loop until CanNm Message Cycle Offset
          time expires.
      08: VP (CanNm.EB_Ref.CANNM100.2, CanNm.SWS_CanNm_00325):
          - CanIf_Transmit() is invoked for transmitting NM PDUs.
      09: Release current channel and wait until it goes to sleep
    
Test Input: None.
Test Output: 
    &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM100.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>422</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00234</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>259</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00325</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>304</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1732</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0144</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>899</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: State transition test 
Test Description: 
  Verify that all changes of the AUTOSAR CanNm states shall be notified to the
  upper layer by calling Nm_StateChangeNotification().
  This test case checks for the following state changes
   1. Bus Sleep State to Repeat Message State
   2. Repeat Message State to Ready Sleep State
   3. Ready Sleep State to Prepare Bus-Sleep State
   4. Prepare Bus-Sleep State to Bus Sleep State

Test Object: None.
Test Precondition: 
  "CanNmPassiveModeEnabled" is set to "false".
  "CanNmStateChangeIndEnabled" is set to "true".

Test Execution: 
  01: Call CanNm_Init().
  02: For each configured CanNm Channel execute the steps 03 to 18.
  03: Verify that the value of CanNm repeat message time is greater than 0.
  04: Verify that the current state is "NM_STATE_BUS_SLEEP" and the current
      mode is "NM_MODE_BUS_SLEEP".
  05: Call CanNm_NetworkRequest() in bus sleep state and verify that it
      returns "E_OK".
  06: Call CanNm_MainFunction().
  07: VP (CanNm.SWS_CanNm_00166, CanNm.SWS_CanNm_00325):
      - Nm_StateChangeNotification() is invoked to notify repeat message state.
  08: Verify that the current state is
      "NM_STATE_REPEAT_MESSAGE" and the current mode is "NM_MODE_NETWORK".
  09: Call CanNm_NetworkRelease() and verify that it returns "E_OK".
  10: Call CanNm_MainFunction() in a loop until CanNm Repeat Message Time
      expires
  11: VP (CanNm.SWS_CanNm_00166, CanNm.SWS_CanNm_00325):
      - Nm_StateChangeNotification() is invoked to notify ready sleep state.
  12: Verify that the current state is
      "NM_STATE_READY_SLEEP" and the current mode is "NM_MODE_NETWORK".
  13: Call CanNm_MainFunction() in a loop until CanNm Timeout Time expires.
  14: VP (CanNm.SWS_CanNm_00166, CanNm.SWS_CanNm_00325):
      - Nm_StateChangeNotification() is invoked to notify prepare
      bus sleep state.
  15: Verify that the current state is
      "NM_STATE_PREPARE_BUS_SLEEP" and the current mode is
      "NM_MODE_PREPARE_BUS_SLEEP".
  16: Call CanNm_MainFunction() in a loop until CanNm Wait Bus Sleep Time
      expires.
  17: VP (CanNm.SWS_CanNm_00166, CanNm.SWS_CanNm_00325):
      - Nm_StateChangeNotification() is invoked to notify bus sleep state.
  18: Verify that the current state is
      "NM_STATE_ BUS_SLEEP" and the current mode is "NM_MODE_ BUS_SLEEP".

Test Input: None.
Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00166</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00325</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>304</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1733</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0145</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>1106</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: State transition test 
Test Description: 
  Verify that all changes of the AUTOSAR CanNm states shall be notified to the
  upper layer by calling Nm_StateChangeNotification.
  This test case checks for the following state changes
   1. Prepare Bus-Sleep State to Repeat Message State
   2. Repeat Message State to Normal Operation State
   3. Normal Operation State to Ready Sleep State
   4. Ready Sleep State to Repeat Message State

Test Object: None.
Test Precondition: 
  "CanNmPassiveModeEnabled" is set to "false".
  "CanNmNodeDetectionEnabled" is set to "true".
  "CanNmStateChangeIndEnabled" is set to "true".

Test Execution: 
  01: Call CanNm_Init().
  02: For each configured CanNm Channel execute the steps from 03 to 29.
  03: Verify that the current state is "NM_STATE_BUS_SLEEP" and the current mode
      is "NM_MODE_BUS_SLEEP".
  04: Call CanNm_NetworkRequest() in bus sleep state.
  05: Call CanNm_MainFunction().
  06: VP (CanNm.SWS_CanNm_00166, CanNm.SWS_CanNm_00325):
      - Nm_StateChangeNotification() is invoked to notify
        NM_STATE_REPEAT_MESSAGE state.
  07: Verify that the current state is
      "NM_STATE_REPEAT_MESSAGE" and current mode is "NM_MODE_NETWORK".
  08: Call CanNm_NetworkRelease().
  09: Call CanNm_MainFunction() in a loop until CanNm Repeat Message Time
      expires.
  10: VP (CanNm.SWS_CanNm_00166, CanNm.SWS_CanNm_00325):
      - Nm_StateChangeNotification() is invoked to notify ready sleep state.
  11: Verify that the current state is "NM_STATE_READY_SLEEP" and the current
      mode is "NM_MODE_NETWORK"
  12: Call CanNm_MainFunction() in a loop until CanNm Timeout Time expires.
  13: VP (CanNm.SWS_CanNm_00166, CanNm.SWS_CanNm_00325):
      - Nm_StateChangeNotification() is invoked to notify prepare
        bus sleep state.
  14: Verify that the current state is
      "NM_STATE_PREPARE_BUS_SLEEP" and the current mode is
      "NM_MODE_PREPARE_BUS_SLEEP".
  15: Call CanNm_NetworkRequest() in prepare bus sleep state.
  16: Call CanNm_MainFunction().
  17: VP (CanNm.SWS_CanNm_00166, CanNm.SWS_CanNm_00325):
      - Nm_StateChangeNotification() is invoked to notify repeat
      message state.
  18: Call CanNm_GetState() in repeat message state and verify that the current
      state is "NM_STATE_REPEAT_MESSAGE" and current mode is "NM_MODE_NETWORK".
  19: Invoke CanNm_MainFunction() in a loop until CanNm Repeat
      Message Time expires.
  20: VP (CanNm.SWS_CanNm_00166, CanNm.SWS_CanNm_00325):
      - Nm_StateChangeNotification() is invoked to notify normal
        operation state.
  21: Call CanNm_GetState() in normal operation state and verify that the
      current state is "NM_STATE_NORMAL_OPERATION" and the current mode is
      "NM_MODE_NETWORK".
  22: Call CanNm_NetworkRelease() in normal operation state.
  23: Call CanNm_MainFunction().
  24: VP (CanNm.SWS_CanNm_00166, CanNm.SWS_CanNm_00325):
      - Nm_StateChangeNotification() is invoked to notify ready sleep state.
  25: Verify that the current state is "NM_STATE_READY_SLEEP" and the current
      mode is "NM_MODE_NETWORK".
  26: Call CanNm_RepeatMessageRequest() in ready sleep state.
  27: Call CanNm_MainFunction().
  28: VP (CanNm.SWS_CanNm_00166, CanNm.SWS_CanNm_00325):
      - Nm_StateChangeNotification() is invoked to notify repeat message state.
  29: Verify that the current state is
      "NM_STATE_REPEAT_MESSAGE" and the current mode is "NM_MODE_NETWORK".
  30: Release current channel and wait until it goes to sleep

Test Input: None.
Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00166</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00325</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>304</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1734</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0146</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>1400</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: State transition test 
Test Description: 
  Verify that all changes of the AUTOSAR CanNm states shall be notified to the
  upper layer by calling Nm_StateChangeNotification().
  This test case checks for the following state changes.
   1. Ready Sleep State to Normal Operation State.
   2. Normal Operation State to Repeat Message State.

Test Object: None.
Test Precondition: 
  "CanNmPassiveModeEnabled" is set to"false".
  "CanNmNodeDetectionEnabled" is set to"true".
  "CanNmStateChangeIndEnabled" is set to"true".

Test Execution: 
  01: Call CanNm_Init().
  02: For each configured CanNm Channel execute the following.
  03: Verify that the value of CanNm repeat message time is greater than 0.
  04: Verify that the current state is "NM_STATE_BUS_SLEEP" and the current
      mode is "NM_MODE_BUS_SLEEP".
  05: Call CanNm_NetworkRequest() in bus sleep state.
  06: Call CanNm_MainFunction().
  07: VP (CanNm.SWS_CanNm_00166):
      - Nm_StateChangeNotification() is invoked to notify repeat message state.
  08: Verify that the current state is
      "NM_STATE_REPEAT_MESSAGE" and the current mode is "NM_MODE_NETWORK".
  09: Call CanNm_NetworkRelease() and verify that it returns "E_OK".
  10: Call CanNm_MainFunction() in a loop until CanNm Repeat Message Time
      expires.
  11: VP (CanNm.SWS_CanNm_00166):
      - Nm_StateChangeNotification() is invoked to notify ready sleep state.
  12: Verify that the current state is "NM_STATE_READY_SLEEP" and the current
      mode is "NM_MODE_NETWORK"
  13: Call CanNm_NetworkRequest() in ready sleep state and verify that it
      returns "E_OK".
  14: Call CanNm_MainFunction().
  15: VP (CanNm.SWS_CanNm_00166):
      - Nm_StateChangeNotification() is invoked to notify normal operation
        state.
  16: Call CanNm_GetState() in ready sleep state and verify that the
      current state is "NM_STATE_NORMAL_OPERATION" and the current mode is
      "NM_MODE_NETWORK".
  17: Verify that CanNm_RepeatMessageRequest() in normal operation state
      returns "E_OK".
  18: Call CanNm_MainFunction().
  19: VP (CanNm.SWS_CanNm_00166):
      - Nm_StateChangeNotification() is invoked to notify repeat message
      state.
  20: Call CanNm_GetState() in repeat message state and verify that
      the current state is "NM_STATE_REPEAT_MESSAGE".
  21: Release current channel and wait until it goes to sleep

Test Input: None.
Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00166</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1735</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0114</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>1607</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Enable Disable communication
Test Description: 
    Verify the functionality of CanNm_EnableCommunication and
    CanNm_DisableCommunication.
  
Test Object: None.
Test Precondition: 
    "CanNmPassiveModeEnabled" is set to "false".
    "CanNmComControlEnabled" is set to "true".
  
Test Execution: 
    01: Invoke CanNm_Init().
    02: For each configured CanNm Channel execute the steps from 03 to 12.
    03: Call CanNm_NetworkRequest() in bus sleep mode and verify that it
        returns "E_OK".
    04: Call CanNm_MainFunction().
    05: Call CanNm_DisableCommunication() when CanNm is in network mode and
        verify that it returns "E_OK".
    06: Call CanNm_MainFunction() in a loop until CanNm Message Cycle Time
        expires.
    07: VP (CanNm.SWS_CanNm_00051, CanNm.SWS_CanNm_00173):
        - CanIf_Transmit() is not invoked (CanNm.SWS_CanNm_00173: CanNm Message Cycle
          timer should be stopped, so that CanIf_Transmit has not been invoked).
    08: VP (CanNm.EB.SWS_CanNm_00177_Implicit):
        - CanNm_DisableCommunication () returns "E_NOT_OK".
    09: VP (CanNm.SWS_CanNm_00216):
        - CanNm_EnableCommunication returns "E_OK" in network mode.
    10: Call CanNm_MainFunction() in a loop until CanNm Message Cycle
        Offset expires.
    11: VP (CanNm.SWS_CanNm_00176, CanNm.ASR403.CANNM178):
        - CanIf_Transmit() is invoked (CanNm.ASR403.CANNM178:CanNm Message Cycle Timer
          was started with CANNM_MSG_CYCLE_OFFSET, so that NM Pdu is
          transmitted).
    12: VP (CanNm.SWS_CanNm_00177):
        - CanNm_EnableCommunication () returns "E_NOT_OK".
    13: Release current channel and wait until it goes to sleep
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>246</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00173</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00176</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>225</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00177</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM178</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00051</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.SWS_CanNm_00177_Implicit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>504</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1736</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0115</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>1724</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Enable disable communication
Test Description: 
  To test the behavior of CanNm_DisableCommunication() and
  CanNm_EnableCommunication in Prepare Bus Sleep Mode.

Test Object: None.
Test Precondition: 
  "CanNmPassiveModeEnabled" is set to "false".
  "CanNmComControlEnabled" is set to "true".

Test Execution: 
  01: Call CanNm_Init().
  02: For each configured CanNm Channel execute the following.
  03: Bring the channel to prepare bus sleep state.
  04: VP (CanNm.SWS_CanNm_00172):
      - CanNm_DisableCommunication() returns "E_NOT_OK" in
        prepare bus sleep mode.
  05: VP (CanNm.SWS_CanNm_00295):
      - CanNm_EnableCommunication() returns "E_NOT_OK" in
        prepare bus sleep mode .

Test Input: None.
Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00172</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00295</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>295</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1737</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0116</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>1848</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Enable disable communication
Test Description: 
  Test the functionality of CanNm_DisableCommunication() and to verify the
  behavior of CanNm_NetworkRelease() when PDU transmission ability is disabled.

Test Object: None.
Test Precondition: 
  "CanNmPassiveModeEnabled" is set to "false".
  "CanNmComControlEnabled" is set to "true".

Test Execution: 
   01: Invoke CanNm_Init().
   02: For each configured CanNm Channel execute the following.
   03: Call CanNm_NetworkRequest() in bus sleep mode and verify that it
       returns "E_OK".
   04: Call CanNm_MainFunction() to change the state to repeat message
   05: Call CanNm_MainFunction until message cycle offset time expires.
   06: Verify that CanIf_Transmit() is invoked to transmit PDU.
   07: CanNm_DisableCommunication() returns E_OK.
   08: Call CanNm_MainFunction() in a loop until CanNm Message Cycle Time
       expires.
   09: VP (CanNm.SWS_CanNm_00170, CanNm.SWS_CanNm_00215, CanNm.SWS_CanNm_00173):
       - CanIf_Transmit() is not invoked.

Test Input: None.
Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00170</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00173</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00215</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1738</internalId></specobject>
    <specobject>
      <id>TC_CANNM_NMTimeOutTimerCOMControl</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>1935</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Enable disable communication
Test Description: 
    To verify that NM-Timeout Timer is stopped by CanNm module when
    Network Management PDU transmission ability is disabled due to a
    call of CanNm_DisableCommunication().
  
Test Object: NM-Timeout Timer
Test Precondition: 
    * Important configuration details:
      * "CanNmPassiveModeEnabled" is set to "false".
      * "CanNmComControlEnabled" is set to "true".
    * Module State:
      * CanNm is initialized
      * CanNm is in Bus sleep mode
  
Test Execution: 
    01: Prepare test case preconditions.
    02: Execute steps 03-12 for each configured CanNm Channel.
    03: Go to "Ready-sleep" state.
    04: Call CanNm_DisableCommunication().
    05: Call CanNm_MainFunction() in a loop until NM-Timeout Time expires.
    06: VP (CanNm.SWS_CanNm_00174):
        - CanNm is still in "network mode", as NM-Timeout time
        has been stopped.
    07: Call CanNm_EnableCommunication().
    08: Process the change in Communication capability, so that the stopped
        timers (e.g. NM-Timeout timer) shall be restarted.
    09: Call CanNm_MainFunction() in a loop in such a way that NM-Timeout Time
        doesn't expire.
    10: Ensure that CanNm is still in "network mode".
    11: Call CanNm_MainFunction() once, so that NM-Timeout time expires.
    12: VP (CanNm.SWS_CanNm_00179):
        - CanNm has transited to "Prepare-Bus-Sleep" mode, as a result of
          expiry of NM-Timeout timer.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>223</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00179</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>228</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1739</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0085</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>2072</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: RemoteSleepTests
Test Description: 
  Verify the behavior of CanNm_CheckRemoteSleepIndication in the
  prepare bus sleep mode.

Test Object: None.
Test Precondition: 
  "CanNmPassiveModeEnabled" is set to "false".
  "CanNmRemoteSleepIndEnabled " is set to "true".

Test Execution: 
  01: Call CanNm_Init().
  02: For each configured CanNm Channel execute the steps from 03 to .
  03: Bring the state to prepare bus sleep.
  04: VP (CanNm.EB_Ref.SWS_CanNm_00154.2):
      - CanNm_CheckRemoteSleepIndication() returns "E_NOT_OK".

Test Input: None.
Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00154.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>443</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1740</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0100</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>2193</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: RemoteSleepTests
Test Description: 
  To test the behavior of CanNm when no Network Management PDUs are received
  in Normal Operation State also to test the functionality of
  CanNm_CheckRemoteSleepIndication().

Test Object: None.
Test Precondition: 
  "CanNmPassiveModeEnabled" is set to "false".
  "CanNmRemoteSleepIndEnabled" is set to "true".

Test Execution: 
  01: Invoke CanNm_Init().
  02: For each configured CanNm Channel execute the following steps.
  03: Invoke CanNm_NetworkRequest() in bus sleep state and verify that it
      returns "E_OK".
  04: Call CanNm_MainFunction() so that the state changes to repeat message.
  05: Invoke CanNm_MainFunction() in a loop until the CanNm repeat message
      time expires.
  06: Verify that the current state is
      "NM_STATE_NORMAL_OPERATION" and the current mode is "NM_MODE_NETWORK".
  07: Invoke CanNm_MainFunction() in a loop until the CanNm remote sleep
      indication time expires.
  08: VP (CanNm.SWS_CanNm_00150, CanNm.ECUC_CanNm_00023, CanNm.SWS_CanNm_00325):
      - Nm_RemoteSleepIndication() is invoked.
  09: Call CanNm_CheckRemoteSleepIndication() and verify that it returns E_OK.
  10: VP (CanNm.SWS_CanNm_00153, CanNm.SWS_CanNm_00227):
      - The value of Nm Remote Sleep Indication Pointer is TRUE.
  11: Invoke CanNm_RxIndication().
  12: Call CanNm_MainFunction().
  13: VP (CanNm.EB_Ref.SWS_CanNm_00151.1, CanNm.SWS_CanNm_00325):
      - Nm_RemoteSleepCancellation() is invoked.
  14: Call CanNm_CheckRemoteSleepIndication() and verify that it returns "E_OK".
  15: VP (CanNm.SWS_CanNm_00153, CanNm.SWS_CanNm_00227):
      - The value of Nm Remote Sleep Indication Pointer is FALSE.
  16: Release current channel and wait until it goes to sleep


Test Input: None.
Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00150</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>208</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00151.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>438</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00153</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>211</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00227</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>256</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00023</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>89</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00325</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>304</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1741</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0101</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>2344</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: RemoteSleepTests
Test Description: 
  Test the behavior of CanNm_CheckRemoteSleepIndication() in the Bus-Sleep Mode.

Test Object: None.
Test Precondition: 
  "CanNmRemoteSleepIndEnabled" is set to "true".

Test Execution: 
  01: Call CanNm_Init().
  02: For each configured CanNm Channel execute the following steps.
  03: Call CanNm_CheckRemoteSleepIndication() in bus sleep mode.
  04: VP (CanNm.EB_Ref.SWS_CanNm_00154.1):
      - CanNm_CheckRemoteSleepIndication() returns "E_NOT_OK".

Test Input: None.
Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00154.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>442</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1742</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0102</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>2406</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Remote Sleep Test
Test Description: 
  Test the behavior of CanNm_CheckRemoteSleepIndication in the Repeat
  Message State.

Test Object: None.
Test Precondition: 
  "CanNmPassiveModeEnabled" is set to "false".
  "CanNmRemoteSleepIndEnabled" is set to "true".

Test Execution: 
  01: Call CanNm_Init().
  02: For each configured CanNm Channel execute the following steps.
  03: Go to repeat message state.
  04: VP (CanNm.EB_Ref.SWS_CanNm_00154.3):
      - CanNm_CheckRemoteSleepIndication() returns E_NOT_OK.

Test Input: None.
Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00154.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>444</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1743</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0127</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>2488</sourceline>
      <version>1</version>
      <description>Test Synopsis: RemoteSleepTests
Test Description: 
  Verify that, if Remote Sleep Indication has been previously detected and
  if a Network Management PDU is received through CanNm_RxIndication in the
  Ready Sleep State again, CanNm invokes Nm_RemoteSleepCancellation.

Test Object: None.
Test Precondition: 
  "CanNmPassiveModeEnabled" is set to "false".
  "CanNmRemoteSleepIndEnabled" is set to "true".

Test Execution: 
  01: Invoke CanNm_Init().
  02: For each configured CanNm Channel execute the following.
  03: Invoke CanNm_NetworkRequest() in bus sleep state and verify that it
      returned "E_OK".
  04: Call CanNm_MainFunction().
  05: Invoke CanNm_MainFunction() in a loop until the CanNm repeat message
      time expires.
  06: Verify that the current state
      is "NM_STATE_NORMAL_OPERATION" and the current mode is "NM_MODE_NETWORK".
  07: Invoke CanNm_MainFunction() in a loop until the CanNm Remote Sleep
      Indication Time expires.
  08: VP (CanNm.SWS_CanNm_00325):
      - Nm_RemoteSleepIndication is invoked.
  09: Call CanNm_NetworkRelease() in normal operation state and verify that it
      returned "E_OK".
  10: Call CanNm_MainFunction()
  11: Verify that the current state is "NM_STATE_READY_SLEEP" and
      the current mode is "NM_MODE_NETWORK".
  12: Call CanNm_RxIndication().
  13: Call CanNm_MainFunction()
  14: VP (CanNm.EB_Ref.SWS_CanNm_00151.2, CanNm.SWS_CanNm_00325, CanNm.EB.Dsn.StateDynamics.RX_INDICATION_READY_SLEEP_STATE):
      - Nm_RemoteSleepCancellation() is invoked.
 
Test Input: None.
Test Output: 
</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00151.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>439</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.RX_INDICATION_READY_SLEEP_STATE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1437</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00325</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>304</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1744</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0147</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>2639</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: RemoteSleepTests
Test Description: 
  Verify the behavior of Remote Sleep Indication Timer when the Network
  Management PDU transmission ability is enabled and disabled.
 
Test Object: None.
Test Precondition: 
  "CanNmPassiveModeEnabled" is set to "false".
  "CanNmRemoteSleepIndEnabled" is set to "true".
  "CanNmComControlEnabled" is set to "true".

Test Execution: 
  01: Invoke CanNm_Init().
  02: For each configured CanNm Channel execute steps from 03 to 12.
  03: Invoke CanNm_NetworkRequest() in bus sleep state and verify that it
      returned "E_OK".
  04: Call CanNm_MainFunction().
  05: Call CanNm_MainFunction() until repeat message time expires.
  06: Call CanNm_GetState()and verify that the current state is
      "NM_STATE_NORMAL_OPERATION" and current mode is "NM_MODE_NETWORK".
  07: Call CanNm_DisableCommunication() in normal operation state and verify
      that it returns "E_OK".
  08: Invoke CanNm_MainFunction() in a loop until the CanNm Remote Sleep
      Indication Time expires.
  09: VP (CanNm.SWS_CanNm_00175):
      - Nm remote sleep indication is not invoked.
  10: Call CanNm_EnableCommunication() in normal operation state and verify
      that it returns "E_OK".
  11: Invoke CanNm_MainFunction() in a loop until the CanNm Remote Sleep
      Indication Time expires.
  12: VP (CanNm.EB_Ref.SWS_CanNm_00180):
      - Nm remote sleep indication is invoked.
 
Test Input: None.
Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00175</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>224</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00180</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>462</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1745</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0078</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>2759</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: TxRX Test
Test Description: 
  Verify the behavior of CanNm_RequestBusSynchronization() in Bus Sleep Mode
  and Network Mode.

Test Object: None.
Test Precondition: 
  "CanNmPassiveModeEnabled" is set to "false".
  "CanNmBusSynchronizationEnabled" is set to "true".

Test Execution: 
  01: Call CanNm_Init().
  02: For each configured CanNm Channel execute the following steps.
  03: VP (CanNm.EB_Ref.SWS_CanNm_00187.1, CanNm.SWS_CanNm_00226):
      - CanNm_RequestBusSynchronization() returns E_NOT_OK in bus sleep mode.
  04: Call CanNm_NetworkRequest() in bus sleep mode and verify that
      CanNm_NetworkRequest() returns "E_OK".
  05: Invoke CanNm_MainFunction().
  06: VP (CanNm.SWS_CanNm_00226):
      - CanNm_RequestBusSynchronization() returns "E_OK" in repeat message
        state.

Test Input: None.
Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00187.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>475</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00226</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>255</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1746</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0080</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>2831</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: TxRX Test
Test Description: 
  Verify the behavior of CanNm_RequestBusSynchronization() in Prepare
  Bus Sleep Mode.

Test Object: None.
Test Precondition: 
  "CanNmPassiveModeEnabled" is set to "false".
  "CanNmBusSynchronizationEnabled" is set to "true".

Test Execution: 
  01: Call CanNm_Init().
  02: For each configured CanNm Channel execute the following.
  03: Verify that the value of CanNm repeat message time is greater than 0.
  04: Call CanNm_NetworkRequest() in bus sleep state and verify that it
      returned "E_OK".
  05: Call CanNm_MainFunction().
  06: Verify that Nm_NetworkMode() is invoked.
  07: Verify that the current state is
      "NM_STATE_REPEAT_MESSAGE" and the current mode is "NM_MODE_NETWORK".
  08: Call CanNm_NetworkRelease() in repeat message state and verify that
      it returned E_OK.
  09: Call CanNm_MainFunction() in a loop until the CanNm Repeat
      Message Time expires.
  10: Verify that the current state is
      "NM_STATE_READY_SLEEP" and the current mode is "NM_MODE_NETWORK".
  11: Call CanNm_MainFunction() in a loop until the CanNm Timeout Time expires.
  12: Verify that the current state is "NM_STATE_PREPARE_BUS_SLEEP" and
      the current mode is "NM_MODE_PREPARE_BUS_SLEEP".
  13: VP (CanNm.EB_Ref.SWS_CanNm_00187.2):
      - CanNm_RequestBusSynchronization() returns "E_NOT_OK".

Test Input: None.
Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00187.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>476</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1747</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0081</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>2963</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: TxRX Test
Test Description: 
  Verify that upon reception of CanNm_RxIndication, CanNm invokes
  Nm_PduRxIndication.

Test Object: None.
Test Precondition: 
  "CanNmPassiveModeEnabled" is set to "false".
  "CanNmPduRxIndicationEnabled" is set to "true".

Test Execution: 
  01: Call CanNm_Init().
  02: For each configured CanNm channel execute the following steps.
  03: Call CanNm_NetworkRequest() in bus sleep mode and verify that it
      returned "E_OK".
  04: Call CanNm_MainFunction().
  05: Call CanNm_RxIndication().
  06: Call CanNm_MainFunction().
  07: VP (CanNm.SWS_CanNm_00037):
      - Nm_PduRxIndication() is invoked with correct parameters.

Test Input: None.
Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1748</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0092</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>3042</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: TxRX Test
Test Description: 
  Verify the behavior of CanNm_RxIndication in Bus-Sleep Mode.

Test Object: None.
Test Precondition: 
  "CanNmPassiveModeEnabled" is set to "false".

Test Execution: 
  01: Call CanNm_Init().
  02: For each configured CanNm Channel execute the following steps.
  03: Call CanNm_RxIndication() in bus sleep mode.
  04: Call CanNm_MainFunction().
  05: VP (CanNm.SWS_CanNm_00127, CanNm.SWS_CanNm_00324, CanNm.EB.Dsn.StateDynamics.Internal_Transition_BUS_SLEEP_MODE):
      - Nm_NetworkStartIndication() is invoked.

Test Input: None.
Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00127</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>194</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00324</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>303</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.Internal_Transition_BUS_SLEEP_MODE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1421</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1749</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0096</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>3115</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: PduDataTests
Test Description: 
  Verify that CanNm module sets the source node identifier with the
  configuration parameter CANNM_NODE_ID.

Test Object: None.
Test Precondition: 
  "CanNmPassiveModeEnabled" is set to "false".
  "CanNmNodeDetectionEnabled" is set to "true".
  "CanNmPduNidPosition" is not set to "OFF".

Test Execution: 
  01: Invoke CanNm_Init().
  02: For each configured CanNm Channel, execute the following steps.
  03: VP (CanNm.ECUC_CanNm_00025):
      - The value of CanNm Pdu Node identifier Position is not set
        to "CANNM_PDU_OFF".
  04: Call CanNm_NetworkRequest() in bus sleep mode.
  05: Call CanNm_MainFunction in a loop until CanNm Message Cycle Offset
      Timer expires.
  06: Verify that CanIf_Transmit() is invoked.
  07: VP (CanNm.SWS_CanNm_00013):
      - The node identifier in the transmitted data is same as
        the configured one.
  08: Release current channel and wait until it goes to sleep

Test Input: None.
Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>135</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00025</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>90</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1750</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0097</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>3209</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: PduDataTests
Test Description: 
  Verify the functionality of CanNm_GetNodeIdentifier().

Test Object: None.
Test Precondition: 
  "CanNmPassiveModeEnabled" is set to "false".
  "CanNmNodeDetectionEnabled" is set to "true".

Test Execution: 
  01: Invoke CanNm_Init().
  02: For each configured CanNm Channel, execute the following steps.
  03: Verify that the value of CanNm Pdu Node identifier Position is not
      CANNM_PDU_OFF.
  04: Call CanNm_NetworkRequest() in bus sleep mode and verify that it returned
      "E_OK".
  05: Call CanNm_MainFunction() so that the state changes to repeat message.
  06: Call CanNm_RxIndication() in repeat message state.
  07: Call CanNm_MainFunction().
  08: Call CanNm_RxIndication() with a different node identifier value.
  09: Call CanNm_MainFunction().
  10: CanNm_GetNodeIdentifier() returns E_OK.
  11: VP (CanNm.SWS_CanNm_00219, CanNm.SWS_CanNm_00132):
      - The value of Node Id pointer is the same as the node Id value
        in the latest PDU received.

Test Input: None.
Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00219</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00132</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>198</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1751</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0098</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>3318</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: PduDataTests
Test Description: 
  Verify the functionality of CanNm_GetLocalNodeIdentifier().

Test Object: None.
Test Precondition: 
  "CanNmNodeDetectionEnabled" is set to "true".

Test Execution: 
  01: Invoke CanNm_Init().
  02: For each configured CanNm Channel, execute the following steps.
  03: Verify that the value of CanNm Pdu Node identifier Position is not
      CANNM_PDU_OFF
  04: Call CanNm_GetLocalNodeIdentifier() in bus sleep mode and verify that
      it returned "E_OK".
  05: VP (CanNm.SWS_CanNm_00220, CanNm.SWS_CanNm_00133):
      - The value set in the of Node Id Pointer is same as the configured one.

Test Input: None.
Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>250</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00133</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1752</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0099</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>3390</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: PduDataTests
Test Description: 
    Verify the functionality of CanNm_GetPduData().
  
Test Object: None.
Test Precondition: 
    "CanNmPassiveModeEnabled" is set to "false".
    "CanNmNodeDetectionEnabled" is set to "true" or
    "CanNmUserDataEnabled" is set to "true".
  
Test Execution: 
    01: Invoke CanNm_Init().
    02: For each configured CanNm Channel, execute the following steps.
    03: Call CanNm_NetworkRequest() in bus sleep mode and verify that it
        returns "E_OK".
    04: Call CanNm_MainFunction().
    05: Call CanNm_MainFunction() until CanNm message cycle offset time expires.
    06: Call CanNm_RxIndication() in repeat message state.
    07: Call CanNm_MainFunction().
    08: Call CanNm_RxIndication() with a different data.
    09: Call CanNm_MainFunction().
    10: Call CanNm_GetPduData() and verify that CanNm_GetPduData() returns E_OK.
    11: VP (CanNm.SWS_CanNm_00035, CanNm.SWS_CanNm_00222, CanNm.SWS_CanNm_00138):
        - The value of Pdu data pointer is same as the data last received.
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00222</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>252</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00138</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00035</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>140</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1753</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0103</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>3505</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: PduDataTests
Test Description: 
  Verify the functionality of CanNm_SetUserData() and CanNm_GetUserData().

Test Object: None.
Test Precondition: 
  "CanNmPassiveModeEnabled" is set to "false".
  "CanNmUserDataEnabled" is set to "true".

Test Execution: 
  01: Invoke CanNm_Init().
  02: For each configured CanNm Channel, execute the following steps.
  03: Call CanNm_NetworkRequest() in bus sleep mode and verify that it returns
     "E_OK".
  04: Call CanNm_MainFunction() so that the state changes to repeat message.
  05: Call CanNm_SetUserData() in repeat message state and verify that it
      returned E_OK.
  06: Call CanNm_MainFunction() in a loop until Message Cycle Offset time expires.
  07: Verify that CanIf_Transmit() is invoked.
  08: VP (CanNm.SWS_CanNm_00159, CanNm.ASR403.CANNM217):
      - The transmitted data is same as that set by CanNm_SetUserData().
  09: Call CanNm_RxIndication().
  10: Call CanNm_MainFunction() in a loop until Message Cycle time expires.
  11: Call CanNm_RxIndication() with a different user data.
  12: Call CanNm_MainFunction().
  13: Call CanNm_GetUserData() and verify that it returned "E_OK".
  14: VP (CanNm.SWS_CanNm_00160, CanNm.SWS_CanNm_00218):
      - The value of User Data Pointer is same as that last received.
  15: Release current channel and wait until it goes to sleep

Test Input: None.
Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00159</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
        <provcov>
          <linksto>CanNm.ASR403.CANNM217</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00160</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>217</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00218</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>248</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1754</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0090</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>3659</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Repeat message test
Test Description: 
  Verify the behavior of CanNm_RepeatMessageRequest() in the
  Prepare Bus-Sleep Mode.

Test Object: None.
Test Precondition: 
  "CanNmPassiveModeEnabled" is set to "false".
  "CanNmNodeDetectionEnabled " is set to "true".

Test Execution: 
  01: Call CanNm_Init().
  02: For each configured CanNm Channel execute the following.
  03: Bring the channel to prepare bus sleep state.
  04: VP (CanNm.EB_Ref.SWS_CanNm_00137.2):
      - CanNm_RepeatMessageRequest() returns E_NOT_OK in prepare bus sleep mode

Test Input: None.
Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00137.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>426</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1755</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0117</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>3769</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Repeat message test
Test Description: 
  Verify that when Repeat Message State is entered from Ready Sleep State,
  the CanNm module deactivates the bus load reduction.

Test Object: None.
Test Precondition: 
  "CanNmPassiveModeEnabled" is set to "false".
  "CanNmBusLoadReductionEnabled" is set to "true".
  "CanNmNodeDetectionEnabled" is set to "true".
  "CanNmImmediateNmTransmissions" is set to value "0".

Test Execution: 
  01: Call CanNm_Init().
  02: For each configured CanNm Channel execute the following steps.
  03: Verify whether the value of CanNm Bus Load Reduction Active is enabled.
  04: Bring the channel to ready sleep state.
  05: Call CanNm_RepeatMessageRequest() in ready sleep state.
  06: Call CanNm_MainFunction().
  07: Call CanNm_GetState()and verify that the current state is
      "NM_STATE_REPEAT_MESSAGE" and the current mode is "NM_MODE_NETWORK".
  08: Call CanNm_RxIndication().
  09: Call CanNm_MainFunction() in a loop one count less than message cycle
      offset time.
  10: VP (CanNm.EB_Ref.SWS_CanNm_00156.4):
      - CanIf_Transmit() is not invoked (Message Cycle Offset is greater than
        Message Reduced Time. NM-PDU is not sent now because Message Reduced
        Time is not in effect).
  11: Call CanNm_MainFunction().
  12: VP (CanNm.SWS_CanNm_00005):
      - CanIf_Transmit() is invoked (Repeat Message state was entered
        from Ready Sleep state; main function was called
        only message cycle offset time and CanIf_Transmit has been invoked
        indicates that CanNm module delayed the transmission of NM PDU by message
        cycle offset time).

Test Input: None.
Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00156.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>435</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1756</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0139</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>3922</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Repeat message test
Test Description: 
  Verify the behavior of CanNm_RepeatMessageRequest() in the Ready Sleep State.

Test Object: None.
Test Precondition: 
  "CanNmPassiveModeEnabled" is set to "false".
  "CanNmNodeDetectionEnabled" is set to "true"

Test Execution: 
  01: Call CanNm_Init()
  02: For each configured CanNm Channel execute the following steps.
  03: Bring the channel to ready sleep state.
  04: Call CanNm_RepeatMessageRequest() in ready sleep state and verify that
      it returns "E_OK".
  05: Call CanNm_MainFunction().
  06: VP (CanNm.SWS_CanNm_00112, CanNm.EB.Dsn.StateDynamics.REPEAT_MESSAGE_REASON_READY_SLEEP_STATE_1):
      - The current state is "NM_STATE_REPEAT_MESSAGE" and the current mode
        is "NM_MODE_NETWORK".
  07: Call CanNm_MainFunction() in a loop until message cycle offset time expires.
  08: VP (CanNm.EB_Ref.CANNM100.4):
      - CanIf_Transmit() is invoked.
  09: VP (CanNm.SWS_CanNm_00113, CanNm.ECUC_CanNm_00026):
      - Repeat Message Bit in control bit vector is set.

Test Input: None.
Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM100.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>424</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00112</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.REPEAT_MESSAGE_REASON_READY_SLEEP_STATE_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1433</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00113</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>91</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1757</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0118_EB</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>4054</sourceline>
      <version>1</version>
      <description>Test Synopsis: Repeat message test
Test Description: 
  Verify the behavior of CanNm module when Repeat Message State is entered from
  Normal Operation state.

Test Object: None.
Test Precondition: 
  "CanNmPassiveModeEnabled" is set to "false".
  "CanNmBusLoadReductionEnabled" is set to "true".

Test Execution: 
  01: Call CanNm_Init()
  02: For each configured CanNm Channel execute the following steps.
  03: Verify the value of CanNm Bus Load Reduction Active is enabled.
  04: Verify that message cycle offset time is greater than
      message reduced time.
  05: Bring the channel to normal operation state.
  06: Call CanNm_RxIndication() with repeat message bit set in the user data.
  07: Call CanNm_MainFunction().
  08: Call CanNm_MainFunction in a loop until message cycle timer expires.
  09: VP (CanNm.SWS_CanNm_00119, CanNm.EB_Ref.CANNM135.1, CanNm.EB.Dsn.StateDynamics.REPEAT_MESSAGE_REASON_NORMAL_OPERATION_REMOTE_ACTIVITY_2):
      - The current state is "NM_STATE_REPEAT_MESSAGE" and current mode
        is "NM_MODE_NETWORK".
  10: Call CanNm_RxIndication().
  11: Call CanNm_MainFunction in a loop until message reduced time expires.
  12: VP (CanNm.EB_Ref.SWS_CanNm_00156.3):
      - CanIf_Transmit() is not invoked.

Test Input: None.
Test Output: 
</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00156.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>434</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00119</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>187</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM135.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>470</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.REPEAT_MESSAGE_REASON_NORMAL_OPERATION_REMOTE_ACTIVITY_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1430</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1758</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0142</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>4217</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Repeat message test
Test Description: 
  Verify that when the Repeat Message State is entered from Normal Operation
  State, the CanNm module starts transmission of Network Management PDUs.

Test Object: None.
Test Precondition: 
  "CanNmPassiveModeEnabled" is set to "false".
  "CanNmNodeDetectionEnabled" is set to "true".

Test Execution: 
  01: Call CanNm_Init().
  02: For each configured CanNm Channel execute the following steps.
  03: Bring the channel to normal operation state.
  04: Call CanNm_RepeatMessageRequest() and verify that it returns "E_OK".
  05: Call CanNm_MainFunction().
  06: Call CanNm_GetState() in repeat message state and verify that the current
      state is "NM_STATE_REPEAT_MESSAGE".
  07: Call CanNm_MainFunction() in a loop until message offset time expires.
  08: VP (CanNm.EB_Ref.CANNM100.3):
      - CanIf_Transmit() is invoked to transmit NM PDUs.
  09: Release current channel and wait until it goes to sleep

Test Input: None.
Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM100.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>423</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1759</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0119</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>4332</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Repeat message test
Test Description: 
  Verify the behavior of CanNm Channel when changes from Repeat Message State
  to Ready Sleep State and then to Normal Operation.

Test Object: None.
Test Precondition: 
  "CanNmPassiveModeEnabled" is set to "false".
  "CanNmNodeDetectionEnabled" must be "true".

Test Execution: 
  01: Call CanNm_Init().
  02: For each configured CanNm Channel execute the following steps.
  03: Verify that CanNm Timeout Time is greater than CanNm Msg Cycle Time.
  04: Bring the channel to repeat message state.
  05: Call CanNm_MainFunction() in a loop until the message cycle offset
      time expires.
  06: Verify that CanIf_Transmit() is invoked and Repeat Message Bit is set
      in the control bit vector of the transmitted PDU.
  07: Call CanNm_NetworkRelease() in repeat message state and verify that
      it returns "E_OK".
  08: Call CanNm_MainFunction() in a loop until remaining repeat message time
      expires.
  09: VP (CANNM223):
      - The current state is "NM_STATE_READY_SLEEP" and current mode
        is "NM_MODE_NETWORK".
  10: Call CanNm_RxIndication().
  11: Call CanNm_MainFunction() in a loop until the message cycle time expires.
  12: VP (CanNm.EB_Ref.SWS_CanNm_00108.1):
      - CanIf_Transmit() is not invoked.
  13: Call CanNm_NetworkRequest() and verify that it returns "E_OK".
  14: Call CanNm_MainFunction() in a loop until the message cycle offset
      time expires.
  15: Verify that CanIf_Transmit() is invoked.
  16: Verify that repeat Message Bit in control bit vector, which is defined in
      the position given by CanNmPduCbvPosition, is cleared.
  17: Release current channel and wait until it goes to sleep

Test Input: None.
Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00108.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>428</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1760</internalId></specobject>
    <specobject>
      <id>TC_CANNM_Nm_RepeatMsgIndication_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>4499</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Repeat message test
Test Description: 
  Verify that CanNm module invokes Nm_RepeatMessageIndication()
  for each reception of CanNm_RxIndication with the
  Repeat Message Request bit is set.

Test Object: None.
Test Precondition: 
  "CanNmPassiveModeEnabled" is set to "false".
  "CanNmRepeatMsgIndEnabled" must be "true"
  "CanNmNodeDetectionEnabled" must be "true"

Test Execution: 
  01: Call CanNm_Init()
  02: For each configured CanNm Channel execute the following steps.
  03: Verify that the value of CanNm Pdu Control bit vector is
      not set to CANNM_PDU_OFF.
  04: Verify the value of CanNm Repeat Message Time is greater than 0.
  05: Call CanNm_NetworkRequest() and verify that it returns "E_OK".
  06: Call CanNm_MainFunction() in a loop until the CanNm message cycle
      Time expires.
  07: Invoke CanNm_RxIndication() with repeat message bit set.
  08: Call CanNm_MainFunction().
  09: VP (SWS_CanNm_00014, CanNm.SWS_CanNm_00325):
      - Nm_RepeatMessageIndication() is invoked.
  10: Call CanNm_MainFunction() in a loop until the CanNm message cycle
      Time expires.
  11: Invoke CanNm_RxIndication() with repeat message bit set.
  12: Call CanNm_MainFunction().
  13: VP (SWS_CanNm_00014, CanNm.SWS_CanNm_00325):
      - Nm_RepeatMessageIndication() is invoked.

Test Input: None.
Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00325</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>304</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1761</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0123</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>4621</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Repeat message test
Test Description: 
  When the NM-Timeout Timer expires in the Repeat Message State,
  CanNm shall report the error CANNM_E_NETWORK_TIMEOUT to DET.

Test Object: None.
Test Precondition: 
  "CanNmPassiveModeEnabled" is set to "false".

Test Execution: 
  01: Call CanNm_Init()
  02: For each configured CanNm Channel execute the following steps.
  03: Bring the channel to repeat message state.
  04: Call CanNm_MainFunction() in a loop one count less than CanNm Timeout Time.
  05: Verify that no Det error is reported.
  06: Call CanNm_MainFunction() to expire CanNm Timeout Time.
  07: VP (CanNm.SWS_CanNm_00193):
      - DET error CANNM_E_NETWORK_TIMEOUT is invoked.

Test Input: None.
Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00193</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>236</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1762</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0125</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>4718</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Repeat message test
Test Description: 
  On Repeat Message Request Bit Indication in the Ready Sleep State,
  the CanNm module shall enter the Repeat Message State.

Test Object: None.
Test Precondition: 
  "CanNmPassiveModeEnabled" is set to "false".

Test Execution: 
  01: Call CanNm_Init()
  02: For each configured CanNm Channel execute the following steps.
  03: Verify that the value of CanNm control bit vector position is not
      CANNM_PDU_OFF.
  04: Bring the channel to ready sleep state.
  05: Call CanNm_RxIndication() with Repeat Message Request Bit is set.
  06: Call CanNm_MainFunction().
  07: VP (CanNm.SWS_CanNm_00111, CanNm.EB.Dsn.StateDynamics.REPEAT_MESSAGE_REASON_READY_SLEEP_STATE_2):
      - The state is changed to "NM_STATE_REPEAT_MESSAGE".

Test Input: None.
Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>179</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.REPEAT_MESSAGE_REASON_READY_SLEEP_STATE_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1434</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1763</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0126</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>4827</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Repeat message test
Test Description: 
  Verify that when the Normal Operation State is entered from Repeat Message
  State or Ready Sleep State the CanNm module activates the bus load reduction.

Test Object: None.
Test Precondition: 
  "CanNmPassiveModeEnabled" is set to "false".
  "CanNMBusloadReductionEnabled" is set to "true".

Test Execution: 
  01: Call CanNm_Init().
  02: For each configured CanNm Channel execute the following steps.
  03: Verify that CanNm bus load reduction is active.
  04: Call CanNm_NetworkRequest() and verify that it returned "E_OK".
  05: Call CanNm_MainFunction().
  06: Verify that the current state is "NM_STATE_REPEAT_MESSAGE".
  07: Call CanNm_MainFunction() in a loop until repeat message time expires.
  08: Verify that the current state is "NM_STATE_NORMAL_OPERATION".
  09: Call CanNm_RxIndication() in normal operation state.
  10: Call CanNm_MainFunction().
  11: Call CanNm_MainFunction() in a loop until CanNm Message Reduced Time expires.
  12: VP (CanNm.EB_Ref.SWS_CanNm_00157.2, CanNm.SWS_CanNm_00325, CanNm.ECUC_CanNm_00043):
      - CanIf_Transmit() is invoked to transmit NM PDU.
  13: Call CanNm_NetworkRelease() in normal operation state.
  14: Call CanNm_MainFunction().
  15: Verify that the current state is "NM_STATE_READY_SLEEP".
  16: Call CanNm_NetworkRequest() in ready sleep state.
  17: Verify that the current state is "NM_STATE_NORMAL_OPERATION".
  18: Call CanNm_RxIndication() in normal operation state.
  19: Call CanNm_MainFunction().
  20: Call CanNm_MainFunction() in a loop until CanNm Message Reduced Time expires.
  21: VP (CanNm.EB_Ref.SWS_CanNm_00157.1, CanNm.SWS_CanNm_00325, CanNm.SWS_CanNm_00238, CanNm.ECUC_CanNm_00043):
      - CanIf_Transmit() is invoked to transmit NM PDU.
  21: Release current channel and wait until it goes to sleep

Test Input: None.
Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00157.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>436</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00157.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>437</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00325</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>304</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>104</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00238</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>261</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1764</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0128</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>5009</sourceline>
      <version>1</version>
      <description>Test Synopsis: Repeat message test
Test Description: 
  Verify the behavior of CanNm, when Repeat Message State is entered from
  Ready Sleep State after Remote Sleep Indication has been detected.

Test Object: None.
Test Precondition: 
  "CanNmPassiveModeEnabled" is set to "false".
  "CanNmNodeDetectionEnabled" is set to "true".
  "CanNmRemoteSleepIndEnabled" is set to "true".

Test Execution: 
  01: Call CanNm_Init().
  02: For each configured CanNm Channel execute the following steps.
  03: Bring the channel to normal operation state.
  04: Invoke CanNm_MainFunction() in a loop until CanNm remote sleep
      indication time elapses.
  05: VP (CanNm.ECUC_CanNm_00023):
      - Verify that Nm_RemoteSleepIndication() is invoked.
  06: Release the network and invoke CanNm_MainFunction() once.
  07: Verify that the current state is "NM_STATE_READY_SLEEP" and
      the current mode is "NM_MODE_NETWORK".
  08: Call CanNm_RepeatMessageRequest() in ready sleep state and verify
      that it returns "E_OK".
  09: Call CanNm_MainFunction().
  10: Verify that the current state is "NM_STATE_REPEAT_MESSAGE" and
      the current mode is "NM_MODE_NETWORK".
  11: VP (CanNm.EB_Ref.SWS_CanNm_00152.2, CanNm.SWS_CanNm_00325, CanNm.EB.Dsn.StateDynamics.REPEAT_MESSAGE_REASON_READY_SLEEP_STATE):
      - Nm_RemoteSleepCancellation() is invoked.

Test Input: None.
Test Output: 
</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00152.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>441</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.REPEAT_MESSAGE_REASON_READY_SLEEP_STATE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1432</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00023</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>89</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00325</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>304</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1765</internalId></specobject>
    <specobject>
      <id>TC_CANNM_0132</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>5145</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Repeat message test
Test Description: 
  Verify the functionality of CanNm_RepeatMessageRequest()
  in Normal Operation State.

Test Object: None.
Test Precondition: 
  "CanNmPassiveModeEnabled" is set to "false".
  "CanNmNodeDetectionEnabled" is set to "true".

Test Execution: 
  01: Call CanNm_Init().
  02: For each configured CanNm Channel execute the following steps.
  03: Verify that the value of CanNm control bit vector Position is not
      CANNM_PDU_OFF.
  04: Bring the channel to normal operation state.
  05: VP (CanNm.SWS_CanNm_00221):
      - Call CanNm_RepeatMessageRequest() in normal operation state and verify
      that it returns "E_OK".
  06: Call CanNm_MainFunction.
  07: VP (CanNm.SWS_CanNm_00120, CanNm.EB.Dsn.StateDynamics.REPEAT_MESSAGE_REASON_NORMAL_OPERATION_REMOTE_ACTIVITY_1):
      - Verify that the current state is "NM_STATE_REPEAT_MESSAGE" and
        the current mode is "NM_MODE_NETWORK".
  08: Call CanNm_MainFunction() until message cycle offset time expires.
  09: Verify that CanIf_Transmit() is invoked.
  10: VP (CanNm.SWS_CanNm_00121):
      - The transmitted PDU contains repeat message bit set in
        the control bit vector.
  11: Call CanNm_MainFunction() a number of times so that the remaining
      duration of Message Cycle Time elapses.
  12: Verify that the current state is "NM_STATE_NORMAL_OPERATION" and
      the current mode is "NM_MODE_NETWORK".
  13: Call CanNm_MainFunction() until message cycle offset time expires.
  14: Verify that CanIf_Transmit() is invoked.
  15: VP (CanNm.SWS_CanNm_00107):
      - Repeat Message Bit in control bit vector is cleared.
  16: Release current channel and wait until it goes to sleep

Test Input: None.
Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00120</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00221</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>251</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00121</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>189</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00107</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.REPEAT_MESSAGE_REASON_NORMAL_OPERATION_REMOTE_ACTIVITY_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1429</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1766</internalId></specobject>
    <specobject>
      <id>TC_CANNM_NmTimeOut_Restart_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>5308</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  - Verify that the NM-Timeout Timer is restarted when it expires
    in the Repeat Message and Normal Operation states.

  - Verify also that the NM-Timeout Timer is reset every time it
    is started or restarted.

Test Object: None.
Test Precondition: 
  * NmTimeout time must be less than Repeat Message time and
    Repeat Message time must not be a multiple of NmTimeout time.
  * "CanNmPassiveModeEnabled" is set to "false".

Test Execution: 
  01: Initialize stubs.
  02. Invoke CanNm_Init().
  03: Execute steps 04 - 24 for each configured CanNmChannel.
  04: Invoke Network Request.
  05: Invoke Main Function once to process CanNm_NetworkRequest.
  06: Check if Repeat Message State is entered.
  07: Invoke Network Release.
  08: Invoke Main Function in a loop till time equivalent of
      Repeat Message Time elapses.
  09: Check if Ready Sleep state is reached.
  10: Invoke Main Function in a loop till 'remaining time of NM-Timeout' - 1
      elapses.
  11: Check if module is still in Ready Sleep State.
  12: Invoke Main function once.
  13: VP (CanNm.SWS_CanNm_00096, CanNm.SWS_CanNm_00101, CanNm.SWS_CanNm_00206):
      - Prepare Bus Sleep sate is entered.
  14: Invoke Network Request again and call the Main Function once to
      process the request.
  15: Check if Repeat Message State is entered.
  16: Invoke Main Function in a loop until Repeat Message Time elapses.
  17: Check if normal operation state is reached.
  18: Invoke Main Function in a loop till remaining time for NM-Timeout
      elapses.
  19: Invoke Main Function in a loop till the time equivalent of two
      and a half of the NM timeouts elapses.
  20: Release the network.
  21: Invoke Main Function continuously for one cycle less than what
      is required for the remaining time for the NM timeouts elapses.
  22: VP (CanNm.SWS_CanNm_00117, CanNm.SWS_CanNm_00206):
      - Ready sleep state is not yet left. (This ensures that the NM Timeout
        timer has been restarted in Normal operation state; Had it not been
        restarted, the Ready sleep state would be left by now.)
  23: Invoke Main function once.
  24: VP (CanNm.SWS_CanNm_00117, CanNm.SWS_CanNm_00206):
      - Ready sleep state is left and Prepare Bus Sleep sate is entered.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00096</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00101</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>169</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00206</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>240</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00117</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1767</internalId></specobject>
    <specobject>
      <id>TC_CANNM_NmTimeOut_Restart_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>5528</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  Verify that the NM-Timeout Timer is restarted at the successful reception
  or transmission of a Network Management PDU in the Network Mode.

Test Object: None.
Test Precondition: 
  * NmTimeout time must be greater than Message Cycle Offset time.
  * "CanNmPassiveModeEnabled" is set to "false".

Test Execution: 
  01: Initialize stubs.
  02. Invoke CanNm_Init().
  03: Execute steps 04 - 13 for each configured CanNmChannel.
  04: Invoke Network Request and call the Main Function once to process
      the request.
  05: Verify that Repeat Message State is entered.
  06: Invoke Main Function in a loop till Message Cycle Offset time
      elapses and verify that an NM-PDU is transmitted.
  07: Invoke Main Function in a loop till the Message Cycle time elapses.
  08: Simulate the reception of an NM-PDU (which should reset the NM-Timeout
      Timer).
  09: Release the network.
  10: Invoke Main Function in a loop till the remaining time of RMS Time
      elapses.
  11: Verify that Ready Sleep State is entered.
  12: Invoke Main Function in a loop till the remaining time required for
      the NM-timeout is just about to elapse.
      (calculated as "NM Timeout Time - RMS Time - Total Elapsed Time - 1")
  13: VP (CanNm.EB_Ref.SWS_CanNm_00099.1, CanNm.EB_Ref.SWS_CanNm_00098, CanNm.EB.Dsn.StateDynamics.Internal_Transition_NETWORK_MODE_2):
        - Ready sleep state is not yet left. (This ensures that the NM Timeout
          timer had been restarted in repeat message state each time an NM-PDU
          is transmitted or received; Had it not been restarted, the Ready sleep
          state would be left by now.)
  14: Invoke main function once.
  15: VP (CanNm.EB_Ref.SWS_CanNm_00099.1, CanNm.EB_Ref.SWS_CanNm_00098,CanNm.EB.Dsn.StateDynamics.Internal_Transition_NETWORK_MODE_2):
      - Prepare Bus Sleep sate is entered.
  16: Invoke Network Request again and call the Main Function once to
      process the request.
  17: Check if Repeat Message State is entered.
  18: Invoke Main Function in a loop until Repeat Message Time elapses.
  19: Check if normal operation state is reached.
  20: Invoke Main Function in a loop till the Message Cycle time elapses
      and verify that an NM-PDU is transmitted.
  21: Invoke Main Function in a loop till the time equivalent of two
      and a half of the NM timeouts elapses (to windup the NM Timeout Timer).
  22: Simulate the reception of an NM-PDU (which should reset the NM-Timeout
      Timer).
  23: Release the network.
  24: Invoke Main Function continuously for one cycle less than what
      is required for the remaining time for the NM timeout to elapse.
  25: VP (CanNm.EB_Ref.SWS_CanNm_00099.1, CanNm.EB_Ref.SWS_CanNm_00098,CanNm.EB.Dsn.StateDynamics.Internal_Transition_NETWORK_MODE_2):
      - Ready sleep state is not yet left. (This ensures that the NM Timeout
        timer has been restarted in Normal operation state each time an NM-PDU
        is transmitted or received; Had it not been restarted, the Ready sleep
        state would be left by now.)
  23: Invoke Main function once.
  24: VP (CanNm.EB_Ref.SWS_CanNm_00099.1, CanNm.EB_Ref.SWS_CanNm_00098, CanNm.EB.Dsn.StateDynamics.Internal_Transition_NETWORK_MODE_2):
      - Ready sleep state is left and Prepare Bus Sleep sate is entered.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00098</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>463</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.Internal_Transition_NETWORK_MODE_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1444</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00099.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>465</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1768</internalId></specobject>
    <specobject>
      <id>TS_CanNm_RepeatMsgReqCommDisable</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>5777</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    When the communication is disabled and CanNm_RepeatMessageRequest() is
    called, CanNm shall:
    - transit to "Repeat Message" state
    - set "Repeat Message" bit
    - not transmit NM PDUs
  
Test Object: None.
Test Precondition: 
    * Important configuration details:
      - "CanNmPassiveModeEnabled" is set to "false".
      - "CanNmNodeDetectionEnabled" is set to "true".
      - "CanNmComControlEnabled" is set to "true".
    * Module state:
      - CanNm must be in an initialized state
    * Misc.:
      - As for the CanIf stub TX confirmation must be enabled.
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.CANNM100.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>423</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00120</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00121</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>189</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00221</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>251</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.REPEAT_MESSAGE_REASON_NORMAL_OPERATION_REMOTE_ACTIVITY_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1429</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1769</internalId></specobject>
    <specobject>
      <id>TC_CANNM_MsgCycleOffset_RMS</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>5910</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    When Repeat Message State is entered from Ready Sleep state or Bus Sleep
    state, the transmission of the first NM PDU shall be delayed by
    CanNmMsgCycleOffset (if CanNmImmediateNmTransmissions is zero).
  
Test Object: None.
Test Precondition: 
    "CanNmPassiveModeEnabled" is set to "false".
    "CanNmImmediateNmTransmissions" is set to value "0".
  
Test Execution: 
    01: Prepare preconditions:
        - Initialize CanNm, stubs and stub callouts.
    02: Execute steps 03-18 for each configured CanNm Channel.
    03: Verify the current state of the channel is "Bus Sleep".
    04: Request the network and call CanNm_MainFunction() to process
        the request.
    05: Verify that the channel switches to Repeat Message state.
    06: Execute CanNm_MainFunction() continuously until one more cycle will
        cause the Message Cycle Offset time to elapse.
    07: VP (CanNm.SWS_CanNm_00005):
        - CanIf_Transmit() is not invoked (Message Cycle Offset is not yet
          elapsed).
    08: Call CanNm_MainFunction() once.
    09: VP (CanNm.SWS_CanNm_00005):
        - CanIf_Transmit() is invoked (i.e., transmission of the first NM PDU
          has been delayed by message cycle offset time).
    10: Release the network and call CanNm_MainFunction() to process
        the request.
    11: Execute CanNm_MainFunction() continuously until the RMS timer elapses.
    12: Verify the current state of the channel is "Ready-sleep".
    13: Request Repeat Message state and call CanNm_MainFunction() to process
        the request.
    14: Verify that the channel switches to Repeat Message state.
    15: Execute CanNm_MainFunction() continuously until one more cycle will
        cause the Message Cycle Offset time to elapse.
    16: VP (CanNm.SWS_CanNm_00005):
        - CanIf_Transmit() is not invoked (Message Cycle Offset is not yet
          elapsed).
    17: Call CanNm_MainFunction() once.
    18: VP (CanNm.SWS_CanNm_00005):
        - CanIf_Transmit() is invoked (i.e., transmission of the first NM PDU
          has been delayed by message cycle offset time).
    19: Release current channel and wait until it goes to sleep
  
Test Input: None.
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1770</internalId></specobject>
    <specobject>
      <id>TC_CANNM_SendingSubMode_NMTimeout_Timer</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_6/source/application/CanNm_ConTest_6.c</sourcefile>
      <sourceline>6079</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify when the NM-Timeout Timer expires, in SendingSubMode,
    the CanNm module start the NM-Timeout Timer.

Test Object: None.
Test Precondition: 
  * NmTimeout time must be less than Repeat Message time and
    Repeat Message time must not be a multiple of NmTimeout time.
  * "CanNmPassiveModeEnabled" is set to "false".

Test Execution: 
  01: Initialize stubs.
  02. Invoke CanNm_Init().
  03: Invoke Network Request.
  04: Invoke Main Function once to process CanNm_NetworkRequest.
  05: Wait NmTimeout timer to expire.
  06: Invoke Network Release.
  07: Verify the current state Ready Sleep State.
  08: Invoke Main Function.
  09: VP(CanNm.EB.Dsn.StateDynamics.Internal_Transition_SENDING_SUB_MODE_3):
      - Check if module is in Prepare Bus Sleep.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.Internal_Transition_SENDING_SUB_MODE_3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1450</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1771</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TC_CANNM_Transmit</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_7/source/application/CanNm_ConTest_7.c</sourcefile>
      <sourceline>42</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    To verify the functionality of CanNm_Transmit.
  
Test Object: CanNm_Transmit
Test Precondition: 
    "CanNmComUserDataSupport" is set to "true".
    Channel0 is configured with Rx and Tx UserData Pdu.
  
Test Execution: 
    01: Initialize stubs and call CanNm_Init
    02: Check that in case CanNm is not initialized CanNm_Transmit returns E_NOT_OK
    03: Initialize CanNm
    04: VP (CanNm.SWS_CanNm_00331, CanNm.ASR403.CANNM330):
        - Check that in case CanNm_Transmit is called with a wrong PDUID the function returns E_NOT_OK
    05: VP (CanNm.SWS_CanNm_00331):
        - Check that in case CanNm_Transmit is called with a NULL_PTR the function returns E_NOT_OK
    06: VP (CanNm.SWS_CanNm_00331, CanNm.ASR403.CANNM330):
        - Check that in case CanNm_Transmit is called with a NULL_PTR as SduDatPtr the function returns E_NOT_OK
    07: Check that DET is reported
    08: Check that in case the UserPduInfoGlobal has wrong length E_NOT_OK is returned
    09: Check that in case SduLength is greater than PduLength configgured in CanNm function returns E_NOT_OK
    10: Check That DET is reported
    11: Set correct PduLength
    12: Initialize stub buffer with 0xFF
    13: Check that the current state is Bus Sleep Mode
    14: VP (CanNm.SWS_CanNm_00331, CanNm.ASR403.CANNM330):
        - In Case CanNm_Transmit is called in BUS_SLEEP_MODE function returns E_NOT_OK
    15: Request the network
    16: Check that the current state is Repeat Message State
    17: VP(CanNm.EB_Ref.SWS_CanNm_00333.1)
        - In case State Machine is Repeat Message State CanIf_Transmit is called
    18: Wait until state machine goes to Normal Operation State
    19: Check that the current state is Normal Opeartion State
    20: Initialize stub buffer with 0xFF
    21: VP(CanNm.EB_Ref.SWS_CanNm_00333.2)
        - In case State Machine is Normal Operation State CanIf_Transmit is called
    22: Release the network
    23: Check that the current state is Ready Sleep State
    24: VP (CanNm.SWS_CanNm_00331, CanNm.ASR403.CANNM330):
        - In case State Machine is Ready Sleep State CanNm_Transmit returns E_NOT_OK
    25: Wait until state machine goes to Prepare Bus Sleep Mode
    26: Check that the current state is Prepare Bus Sleep Mode
    27: Wait until state machine goes to Bus Sleep Mode
    28: Check that the current state is Bus Sleep Mode
    29: Request the network
    30: VP (CanNm.SWS_CanNm_00331, CanNm.ASR403.CANNM330):
        - Check that in Case CanIf_Transmit returns E_NOT_OK CanNm_Transmit also returns E_NOT_OK
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM330</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00331</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>310</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00333.1</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>419</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00333.2</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>420</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1772</internalId></specobject>
    <specobject>
      <id>TC_CANNM_BusSynchronization</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_7/source/application/CanNm_ConTest_7.c</sourcefile>
      <sourceline>292</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: State Transition
Test Description: 
  Verify CanNm_RequestBusSynchronization calls PduR_CanNmTriggerTransmit()
  function correctly and passes the parameters correctly to CanIf_Transmit().

Test Object: None.
Test Precondition: 
  "CanNmComUserDataSupport" is set to "true".
  Channel0 is configured with Rx and Tx UserData Pdu.
  Channel1 is configured with no user data.

Test Execution: 
  01: Call CanNm_Init().
  02: Call CanNm_NetworkRequest for Channel0 and
      CanNm_MainFunction to change the state to repeat message state.
  03: Call CanNm_RequestBusSynchronization.
  04: VP (CanNm.SWS_CanNm_00328, CanNm.SWS_CanNm_00325):
      - PduR_CanNmTriggerTransmit &amp; CanIf_Transmit is invoked once each.
  05: VP (CanNm.SWS_CanNm_00328):
      - The Userdata passed to CanIf_Transmit is the same as the data
        received by PduR_CanNmTriggerTransmit().
      - The received user data is combined with the further NM bytes
        before being passed to CanIf_Transmit().
  06: Set TriggerTransmit callout parameter with return parameter as E_NOT_OK.
  07: call CanNm_RequestBusSynchronization.
  08: VP (CanNm.SWS_CanNm_00328, CanNm.SWS_CanNm_00325):
      - PduR_CanNmTriggerTransmit &amp; CanIf_Transmit is invoked once each.
  09: Verify Userdata transferred to CanIf_Transmit is same as previous data
  10: Call CanNm_NetworkRequest for second configured channel and
      CanNm_MainFunction to change the state to repeat message state.
  11: Call CanNm_RequestBusSynchronization for Channel1 where
      Userdata Length is 0.
  12: VP (CanNm.SWS_CanNm_00325, CanNm.EB.ComUserDataSupport.PduRCallsNoUserData.1):
      - PduR_CanNmTriggerTransmit is not called and CanIf_Transmit is called.

Test Input: None.
Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00328</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>307</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00325</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>304</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.ComUserDataSupport.PduRCallsNoUserData.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>500</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1773</internalId></specobject>
    <specobject>
      <id>TC_CANNM_TriggerTransmit</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_7/source/application/CanNm_ConTest_7.c</sourcefile>
      <sourceline>448</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  To verify that, API functions PduR_CanNmTriggerTransmit() and
  PduR_CanNmTxConfirmation() are invoked with correct parameters.

Test Object: None.
Test Precondition: 
  * "CanNmComUserDataSupport" is set to "true".
  * Channel0 is configured with Rx and Tx UserData Pdu.
  * Pdu reference in CanNmTxUserDataPduRef matches the same in PduRDestPduRef.
  * Channel1 is configured with no user data.
  * Stubs, test data buffer and CanNm module are initialized.

Test Execution: 
  01. Prepare preconditions
  02. Call CanNm_NetworkRequest()
  03. Call CanNm_MainFunction() until message cycle offset time expires
  04. VP (CanNm.SWS_CanNm_00328, CanNm.EB.ComUserDataSupport.PduRCallsNoUserData.1):
      - PduR_CanNmTriggerTransmit has been invoked for Channel0 and has not
        been invoked for Channel1.
      - The correct UserData passed from PduR_CanNmTriggerTransmit is sent to
        CanIf_Transmit.
  05. VP (CanNm.EB.PduRAPIs.TxPduId_2, CanNm.SWS_CanNm_00325):
      - PduR_CanNmTriggerTransmit() has been invoked with correct "TxPduId".
  06. Verify that CanIf_Transmit() has been invoked.
  07. Call CanNm_TxConfirmation with TxConfirmation PduId.
  08. VP (CanNm.SWS_CanNm_00329, CanNm.EB.ComUserDataSupport.PduRCallsNoUserData.3):
      - PduR_CanNmTxConfirmation has been invoked for Channel0 and has not
        been invoked for Channel1.
  09. VP (CanNm.EB.PduRAPIs.TxPduId_1, CanNm.SWS_CanNm_00325):
      - PduR_CanNmTxConfirmation has been invoked with correct 'TxPduId'.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00328</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>307</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00329</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>308</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.ComUserDataSupport.PduRCallsNoUserData.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>500</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.ComUserDataSupport.PduRCallsNoUserData.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>502</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.PduRAPIs.TxPduId_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>515</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.PduRAPIs.TxPduId_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>516</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1774</internalId></specobject>
    <specobject>
      <id>TC_CANNM_RxIndication</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_7/source/application/CanNm_ConTest_7.c</sourcefile>
      <sourceline>602</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test to verify CanNm_RxIndication function and the respective call to
    PduR_CanNmRxIndication function.
  
Test Object: None.
Test Precondition: 
    "CanNmComUserDataSupport" is set to "true".
    Channel0 is configured with Rx and Tx UserData Pdu.
    Channel1 is configured with no user data.
  
Test Execution: 
    01: Call CanNm_Init.
    02: Call CanNm_RxIndication for Channel0.
    03: VP (CanNm.SWS_CanNm_00231, CanNm.EB.ComUserDataSupport.CanNmUserDataRxIndication, CanNm.EB.PDULENGTHTYPE001):
        - PduR_CanNmRxIndication is invoked.
    04: Verify that the UserData received in CanNm_RxIndication is correctly
        passed to PduR_CanNmRxIndication().
    05: Call CanNm_RxIndication for Channel1 whose UserDataLength is 0.
    06: VP (CanNm.SWS_CanNm_00231, CanNm.EB.ComUserDataSupport.PduRCallsNoUserData.2):
        - PduR_CanNmRxIndication is not invoked.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00231</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>258</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.PDULENGTHTYPE001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>670</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.ComUserDataSupport.CanNmUserDataRxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>496</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.ComUserDataSupport.PduRCallsNoUserData.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>501</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1775</internalId></specobject>
    <specobject>
      <id>TC_CANNM_GetUserdataDet</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_7/source/application/CanNm_ConTest_7.c</sourcefile>
      <sourceline>696</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Testing CanNm_GetUserData function when Com Support is enabled and
  UserData length is 0.

Test Object: None.
Test Precondition: 
  "CanNmComUserDataSupport" is set to "true".
  Channel0 is configured with Rx and Tx UserData Pdu.
  Channel1 is configured with no user data.

Test Execution: 
  01: Call CanNm_Init.
  02: Call CanNm_GetUserData for Second configured Channel where
      UserDataLength is 0.
  03: VP (CanNm.EB.ComUserDataSupport.SetGetUserDataNoUserData):
      - Verify whether DET error CANNM_E_INVALID_FUNCTION_ARG is reported.

Test Input: None.
Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.ComUserDataSupport.SetGetUserDataNoUserData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>499</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1776</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_ImmediateNmTrans_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_8/source/application/CanNm_ConTest_8.c</sourcefile>
      <sourceline>37</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Verify that if Repeat Message State is entered from Prepare Bus Sleep state
  with Active Request, the configured number of Nm messages are sent with first
  one immediately and remaining with a delay of CanNmImmediateNmCycleTime.

Test Object: None.
Test Precondition: 
  CanNmImmediateNmTransmissions &gt; 1
  CanNmImmediateNmCycleTime &lt; CanNmMsgCycleOffset
  CanNmPassiveModeEnabled == false
  CanNmImmediateRestartEnabled == false

Test Execution: 
  01: Initialize the stubs.
  02: Invoke CanNm_Init().
  03: Execute the following for every channel.
  04: Go to Prepare Bus Sleep State.
  05: Invoke Network_Request().
  06: Invoke Main function once to make the transition.
  07: Check if the channel entered in Repeat Message state.
  08: VP (CanNm.EB_Ref.SWS_CanNm_00334.2, CanNm.ECUC_CanNm_00056):
      - First Nm Message is sent immediately after entering into
        Repeat Message State and remaining in a gap of Nm Immediate Cycle time.
  09: Invoke Main Function in a loop until Message Cycle Time expires.
  10: VP (CanNm.SWS_CanNm_00335):
      - If Nm Message is sent after expiration of Message Cycle Time.
  11: Invoke Main Function in a loop until Message Cycle Time expires.
  12: VP (CanNm.SWS_CanNm_00335):
      - If Nm Message is sent after expiration of Message Cycle Time.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00335</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>314</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00334.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>431</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00056</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>112</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1777</internalId></specobject>
    <specobject>
      <id>TS_CanNm_ImmediateNmTrans_4</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_8/source/application/CanNm_ConTest_8.c</sourcefile>
      <sourceline>151</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Verify that if Repeat Message State entered from Normal Operation state with
  Repeat Message Request ,then Nm Message will not sent immediately.
  Verify that if Repeat Message State entered from Ready Sleep state with
  active Request, then Nm Message will not sent immediately.

Test Object: None.
Test Precondition: 
  CanNmImmediateNmTransmissions &gt; 1
  CanNmImmediateNmCycleTime &lt; CanNmMsgCycleOffset
  CanNmPassiveModeEnabled == false
  CanNmImmediateRestartEnabled == false

Test Execution: 
  01: Initialize the stubs.
  02: Invoke CanNm_Init().
  03: Execute the following for every channel
  04: Go to Normal Operation State.
  05: Invoke RepeatMessage_Request().
  06: Invoke Main function once to make the transition.
  07: Check if entered in Repeat Message state.
  08: VP (CanNm.EB_Ref.SWS_CanNm_00334.1, CanNm.EB_Ref.SWS_CanNm_00334.2):
      - Nm Message is not sent immediately after entering into Repeat
        Message State.
  09: Invoke Main Function in a loop until Message Cycle Offset expires.
  10: Nm Message is Sent after expiration of Message Cycle Offset.
  11: Invoke Main Function in a loop until Message Cycle Time expires.
  12: Nm Message is Sent after expiration of Message Cycle Time.
  13: Invoke Network_Release().
  14: Invoke Main Function in a loop till remaining Repeat Message cycle time
      expires to make the transition to Ready Sleep State.
  15: Check if entered in Ready Sleep state.
  16: Invoke RepeatMessage_Request().
  17: Invoke Main function once to make the transition.
  18: Check if entered in Repeat Message state.
  19: VP (CanNm.EB_Ref.SWS_CanNm_00334.1, CanNm.EB_Ref.SWS_CanNm_00334.2):
      - Nm Message is not sent immediately after entering into Repeat
        Message State.
  20: Invoke Main Function in a loop until Message Cycle Offset expires.
  21: Nm Message is Sent after expiration of Message Cycle Offset.
  22: Invoke Main Function in a loop until Message Cycle Time expires.
  23: Nm Message is Sent after expiration of Message Cycle Time.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00334.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>431</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00334.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>430</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1778</internalId></specobject>
    <specobject>
      <id>TS_CanNm_ImmediateNmTrans_5</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_8/source/application/CanNm_ConTest_8.c</sourcefile>
      <sourceline>328</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if Nm Immediate message transmission is aborted, the remaining
    Immediate messages are not sent when communication resumes.
    Verify also that NM messages are not transmitted if communication ability
    is already disabled when Normal operation state is entered (CanNm.SWS_CanNm_00170).
  
Test Object: None.
Test Precondition: 
    - Important test configuration details
      - CanNmImmediateNmTransmissions &gt; 1
      - CanNmImmediateNmCycleTime &lt; CanNmMsgCycleOffset
      - CanNmPassiveModeEnabled = false
      - CanNmImmediateRestartEnabled = false
  
Test Execution: 
    01: Intialize stub invocation couners, and CanNm.
    02: Execute the steps 03-22 for each channel.
    03: Request the network.
    04: Invoke main function once to process the request.
    05: Verify that CanNm enters Repeat Message state.
    06: VP(CanNm.EB_Ref.SWS_CanNm_00334.1):
        - First Nm Message is sent immediately after entering Repeat
          Message State and remaining messages after a gap of
          Nm Immediate Cycle time.
    07: Disable the communication ability before the completion of all the
        Immediate Nm message transmission and invoke main function once.
    08: Enable the communication ability and invoke main function once.
    09: Invoke main function in a loop until Immediate Nm Transmission cycle
        time elapses.
    10: VP(CanNm.EB.SWS_CanNm_00178_ImmediateNmTransmissions):
        - Nm Messages are not sent.
    11: Invoke main function in a loop until Message Cycle Offset time elapses.
    12: One Nm Message is sent.
    13: Release the network.
    14: Invoke main function in a loop until the remaining Repeat Message cycle
        time elapses to make the transition to Ready Sleep State.
    15: Disable communication ability and invoke main function once.
    16: Request the network and invoke main function once.
    17: Verify that CanNm enters Normal operation state.
    18: Invoke main function until Message Cycle time elapses.
    19: VP (CanNm.SWS_CanNm_00170):
        - NM message is not transmitted as communication ability is disbaled.
    20: Enable communication ability and invoke main function once.
    21: Release the network
    22: Invoke main function in a loop until the remaining Repeat Message cycle
        time elapses to make the transition to Ready Sleep State.
        Note: This step is performed just to make the test case bit easier
        when having multiple channels, staying in repeat message state or
        normal operation state allows transmission for the first channel during
        the evaluation of the second channel.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SWS_CanNm_00178_ImmediateNmTransmissions</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>503</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00334.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>430</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00170</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1779</internalId></specobject>
    <specobject>
      <id>TC_CANNM_CanIf_Not_Ok_8_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_8/source/application/CanNm_ConTest_8.c</sourcefile>
      <sourceline>541</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that the SM transits from state BUS_SLEEP to REPEAT_MESSAGE state
    the SM stays in REPEAT_MESSAGE state until the NM timer and RMS timer expires.
    The tests also checks if CanIf_Transmit return E_NOT_OK the RMS timer is reloaded.
    The test checks the functionality in case that "immediate" messages are turned on.
    The CanIf_Transmit should be called at least ImmediateNmTransmissions times until the
    SM is in REPEAT_MESSAGE mode
  
Test Object: None.
Test Precondition: 
    CANNM_IMMEDIATE_TRANSMISSION == STD_ON
  
Test Execution: 
    01: Initialize the stubs
    02: Set CanIf_Transmit return value to E_NOT_OK
    03: Check that the current state is BUS_SLEEP mode
    04: Request the network
    05: Check that the current state is REPEAT_MESSAGE, and one CanIf_Transmit was called and,
        then reset CanIf_Transmit stub counter
    06: Wait until CanNmTimer expires
    07: Until the CanNmTimer expires CanIf_Transmit should be called on each cycle
        and rms timer shall be extended by one cycle
    08: Wait until RMS timer expires
    09: Until the RMS timer expires CanIf_Transmit should be called on each cycle
        without further extending the rms timer
    10: After RMS timer expired the SM state should be NORMAL_OPERATION
    11: VP (CanNm.EB.CanNmRetryFirstMessageRequest),
           (CanNm.EB.CanNmRetryFirstMessageRequestRepeatMessageState):
        - Wait until CanNmTimer resets (10 is used here as a reasonable number of cycles)
    12: Release the network
    13: The SM should go into READY_SLEEP state
    14: Wait until CanNmTimer expires
    15: The SM should be in PREPARE_BUS_SLEEP mode
    16: Wait until RSI timer expires
    17: The SM should be in state BUS_SLEEP mode
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmRetryFirstMessageRequest</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>520</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmRetryFirstMessageRequestRepeatMessageState</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>521</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1780</internalId></specobject>
    <specobject>
      <id>TC_CANNM_CanIf_Not_Ok_8_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_8/source/application/CanNm_ConTest_8.c</sourcefile>
      <sourceline>666</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that the SM transits from state BUS_SLEEP to REPEAT_MESSAGE state
    the SM stays in REPEAT_MESSAGE state until the NM timer and RMS timer expires.
    The tests also checks if CanIf_Transmit return E_NOT_OK the RMS timer is reloaded.
    The test checks the functionality in case that "immediate" messages are turned on.
    The RMS is reloaded until CanIf_Transmit returns E_OK.
    The CanIf_Transmit should be called at least ImmediateNmTransmissions times until the
    SM is in REPEAT_MESSAGE mode
  
Test Object: None.
Test Precondition: 
    CANNM_IMMEDIATE_TRANSMISSION == STD_ON
  
Test Execution: 
    01: Initialize the stubs
    02: Set CanIf_Transmit return value to E_NOT_OK
    03: Check that the current state is BUS_SLEEP
    04: Request the network
    05: Check that the SM state is REPEAT_MESSAGE
    06: Wait a couple of cycles to check if CanIf_Transmit returns E_NOT_OK
        CanIf_Transmit will be called on each cycle
    07: VP (CanNm.EB.CanNmRetryFirstMessageRequest),
           (CanNm.EB.CanNmRetryFirstMessageRequestRepeatMessageState):
        - CanIf_Transmit shall be called on each cycle
    08: Set CanIf_Transmit return value to E_OK
    09: Wait until RMS time. Because the RMS was reloaded as RMS + 1
        only on the next cycle it will go into NORMAL_OPERATION state
    10: CanIf_Transmit should be called for ImmediateNmTransmissions times
    11: Check the SM is in REPEAT_MESSAGE state
    12: Check the SM is in NORMAL_OPERATION mode
    13: Release the network
    14: Check the SM is in READY_SLEEP state
    15: Wait a few cycles (5 is used here as a reasonable number of cycles)
    16: Check the SM is in PREPARE_BUS_SLEEP mode
    17: Wait RSI time
    18: Check that SM is in BUS_SLEEP mode
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmRetryFirstMessageRequest</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>520</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmRetryFirstMessageRequestRepeatMessageState</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>521</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1781</internalId></specobject>
    <specobject>
      <id>TC_CANNM_CanIf_Not_Ok_8_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_8/source/application/CanNm_ConTest_8.c</sourcefile>
      <sourceline>797</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that in case of passive start-up and CanIf_Transmit returns E_NOT_OK
    the RMS timer is reloaded an on each cycle the message is tried to be resent.
    In case the SM goes into Prepare BusSleepMode and CanNm_RxIndication is received,
    the SM goes to RepeatMessageState ,RMS timer is reloaded and Message is tried to
    be resent on each cycle.
  
Test Object: None.
Test Precondition: 
    CANNM_IMMEDIATE_TRANSMISSION == STD_ON
  
Test Execution: 
    01: Initialize stubs
    02: Set CanIf_Transmit return value to E_NOT_OK
    03: Check that the current state is BUS_SLEEP
    04: Do a passive startup
    05: Goto Repeat Message state
    06: Wait until MessageCycleOffset expires.
        While it does not expired no CanIf_Transmit should be called.
    07: Wait 10 Cycles
    08: VP (CanNm.EB.CanNmRetryFirstMessageRequest),
           (CanNm.EB.CanNmRetryFirstMessageRequestRepeatMessageState):
        - Check that on each cycle the CanIf_Transmit is called
    09: Set CanIf_Transmit to E_OK
    10: Wait until SM goes into PreapreBusSleepMode
    11: Set CanIf_Transmit return value to E_NOT_OK
    12: Call CanNm_RxIndication
    13: Check SM Goes into RepeatMessage State
    14: Wait until MessageCycleOffset expires.
        While it does not expired no CanIf_Transmit should be called.
    15: Wait 10 Cycles
    16: Check that on each cycle the CanIf_Transmit is called
    17: Set CanIf_Transmit_Stub.RetVal to E_OK
    18: Wait until RmsTimerExpires
    19: Check that the current state is still REPEAT_MESSAGE_STATE
    20: SM should go to ReadySleepState
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmRetryFirstMessageRequest</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>520</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmRetryFirstMessageRequestRepeatMessageState</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>521</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1782</internalId></specobject>
    <specobject>
      <id>TC_CANNM_CanIf_Not_Ok_8_5</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_8/source/application/CanNm_ConTest_8.c</sourcefile>
      <sourceline>932</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    The test covers the case when the first immediate is not transmitted(CanIf_Transmit
    return E_NOT_OK). Starting with the second PDU CanIf_Transmit returns E_OK.
    A transition to NM_STATE_NORMAL_OPERATION will occur after RMS + 1 calls of main function.
  
Test Object: None.
Test Precondition: 
    CANNM_IMMEDIATE_TRANSMISSION == STD_ON
    CanNmRetryFirstMessageRequest == true
  
Test Execution: 
    01: Intialize the module
        Set CanIf_Transmit return value to E_NOT_OK
    02: Check that the current state is NM_STATE_BUS_SLEEP
    03: Request the network
    04: Call the main function to trigger the transition to Repeat Message State
    05: Set the CanIf_Transmit return value to E_OK and call the main function RMS Times
        Check if the state machine is in NM_STATE_REPEAT_MESSAGE
    06: Call main function one more time
    07:  VP (CanNm.EB.CanNmRetryFirstMessageRequest),
            (CanNm.EB.CanNmRetryFirstMessageRequestRepeatMessageState):
         - Check that CanIf_Transmit is called 6 times
    08: Check if the current state is NM_STATE_NORMAL_OPERATION
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.CanNmRetryFirstMessageRequest</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>520</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.CanNmRetryFirstMessageRequestRepeatMessageState</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>521</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1783</internalId></specobject>
    <specobject>
      <id>TC_CANNM_CanIf_Not_Ok_8_9</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_8/source/application/CanNm_ConTest_8.c</sourcefile>
      <sourceline>1026</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that when messages fail to be transmitted (CanIf_Transmit return E_NOT_OK) while in repeat
    message state then retransmission tries occur each cycle, and after entering normal operation
    message transmission attempts occur every message cycle time.
  
Test Object: None.
Test Precondition: 
    CANNM_IMMEDIATE_TRANSMISSION == STD_ON
    CanNmRetryFirstMessageRequest == true
  
Test Execution: 
    01: Intialize the module
        Set CanIf_Transmit return value to E_NOT_OK
    02: Check that the current state is NM_STATE_BUS_SLEEP
    03: Request the network
    04: Call the main function to trigger the transition to Repeat Message State
    05: Check that the current state is REPEAT_MESSAGE, and one CanIf_Transmit was called and
        then reset CanIf_Transmit stub counter
    06: Wait until CanNmTimer expires
    07: Check CanIf_Transmit was called on each cycle, and reset stub counter
    08: Wait until RMS timer expires
    09: VP(CanNm.EB.SWS_CanNm_00335)
        Check CanIf_Transmit was called on each cycle, and reset stub counter
    10: Check current state is NORMAL_OPERATION
    11: Wait until 7 times the message cycle time expires
    12: Check CanIf_Transmit was 7 times
  
Test Input: 
    Messages not being successfully transmitted
  
Test Output: 
    Count of message tranmission tries.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SWS_CanNm_00335</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>595</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1784</internalId></specobject>
    <specobject>
      <id>TC_CANNM_CanIf_Not_Ok_8_10</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_8/source/application/CanNm_ConTest_8.c</sourcefile>
      <sourceline>1126</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that when one of the immediate messages other than the first and last immediate messages fails
    to be transmitted then a retransmission attempt is made on the next cycle, and if succsessful
    the next immediate message is transmitted after immediate message cycle time.
  
Test Object: None.
Test Precondition: 
    CANNM_IMMEDIATE_TRANSMISSION == STD_ON
    CanNmRetryFirstMessageRequest == true
  
Test Execution: 
    01: Intialize the module
        Set CanIf_Transmit return value to E_OK
    02: Check that the current state is NM_STATE_BUS_SLEEP
    03: Request the network
    04: Call the main function to trigger the transition to Repeat Message State
    05: Check that the current state is REPEAT_MESSAGE, and  one CanIf_Transmit was called, and
        then reset CanIf_Transmit stub counter
    06: Call main function until the immediate message cycle timer is about to expire
    07: Set CanIf_Transmit return value to E_NOT_OK
    08: Call main function once
    09: Check CanIf_Transmit stub counter is one and reset it
    10: Set CanIf_Transmit return value to E_OK
    11: Call main function once
    12: VP(CanNm.EB.SWS_CanNm_00335)
        Check CanIf_Transmit stub counter is one and reset it
    13: Call main function until immediate message cycle timer expires
    14: Check CanIf_Transmit stub counter is one and reset it
  
Test Input: 
    Messages not being successfully trasnmitted
  
Test Output: 
    Count of message tranmissions.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SWS_CanNm_00335</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>595</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1785</internalId></specobject>
    <specobject>
      <id>TC_CANNM_CanIf_Not_Ok_8_11</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_8/source/application/CanNm_ConTest_8.c</sourcefile>
      <sourceline>1233</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check that when the last immediate message fails to be transmitted then a retransmission
    attempt is made on the next cycle, and if succsessful the next immediate message is 
    transmitted after message cycle time.
  
Test Object: None.
Test Precondition: 
    CANNM_IMMEDIATE_TRANSMISSION == STD_ON
  
Test Execution: 
    01: Intialize the module
        Set CanIf_Transmit return value to E_OK
    02: Check that the current state is NM_STATE_BUS_SLEEP
    03: Request the network
    04: Call the main function to trigger the transition to Repeat Message State
    05: Check that the current state is REPEAT_MESSAGE
    06: Call main function until the last immediate message cycle timer is about to expire
    07: Check CanIf_Transmit stub count is equal to configured nummber of immediate
        messages - 1, and reset it to 0
    08: Set CanIf_Transmit return value to E_NOT_OK
    09: Call main function once
    10: Check CanIf_Transmit stub counter is 1 and reset it
    11: Set CanIf_Transmit return value to E_OK
    12: Call main function once
    13: VP(CanNm.EB.SWS_CanNm_00335)
        Check CanIf_Transmit stub counter is one and reset it
    14: Call main function until message cycle timer expires
    15: Check CanIf_Transmit stub counter is one and reset it
  
Test Input: 
    Messages not being successfully trasnmitted
  
Test Output: 
    Count of message tranmissions.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.EB.SWS_CanNm_00335</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>595</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1786</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_CanNm_ImmediateNmTrans_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_9/source/application/CanNm_ConTest_9.c</sourcefile>
      <sourceline>37</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Verify that if Repeat Message State entered from Bus Sleep state with Active
  Request then Nm Message will be sent immediately.

Test Object: None.
Test Precondition: 
  CanNmImmediateNmTransmissions = 1
  CanNmPassiveModeEnabled == false
  CanNmImmediateRestartEnabled == false

Test Execution: 
  01: Initialize the stubs.
  02: Invoke CanNm_Init().
  03: Execute the following for every channel
  04: Invoke Network_Request().
  05: Invoke Main function once to make the transition.
  06: Check if entered in Repeat Message state.
  07: VP (CanNm.EB_Ref.SWS_CanNm_00334.1, CanNm.SWS_CanNm_00005):
      - Nm Message is sent immediately after entering into Repeat Message
      State.
  08: VP (CanNm.ECUC_CanNm_00028):
      - Invoke Main Function continuously for the duration of one cycle
      less than the Message Cycle time.
  09: VP (CanNm.SWS_CanNm_00335):
      - Nm Message is not sent.
  10: Invoke Main Function once so that the Message Cycle Offset time elapses.
  11: Nm Message is sent after expiration of Message Cycle Offset.
  12: Invoke Main Function continuously for the duration of one cycle
      less than the Message Cycle Time.
  13: Nm Message is not sent.
  14: Invoke Main Function once so that the Message Cycle Time elapses.
  15: Nm Message is sent after expiration of Message Cycle Time.
  16: Invoke Network Release.
  17: Invoke Main function in a loop until remaining Repeat message time expires
      to make the transition to ready sleep state. Note: This step is performed
      just to make the test case bit easier when having multiple channels,
      staying in repeat message state or normal operation state allows
      transmission for the first channel during the evaluation of second
      channel.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00335</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>314</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00334.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>430</internalId></provcov>
        <provcov>
          <linksto>CanNm.ECUC_CanNm_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1787</internalId></specobject>
    <specobject>
      <id>TS_CanNm_ImmediateNmTrans_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_9/source/application/CanNm_ConTest_9.c</sourcefile>
      <sourceline>170</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Verify that if Repeat Message State entered from Bus Sleep state with Passive
  Request then Nm Message will not be sent immediately.

Test Object: None.
Test Precondition: 
  CanNmImmediateNmTransmissions = 1
  CanNmPassiveModeEnabled == false
  CanNmImmediateRestartEnabled == false

Test Execution: 
  01: Initialize the stubs.
  02: Invoke CanNm_Init().
  03: Execute the following for every channel
  04: Invoke Passive_StartUp().
  05: Invoke Main function once to make the transition.
  06: Check if entered in Repeat Message state.
  07: VP (CanNm.EB_Ref.SWS_CanNm_00334.1, CanNm.SWS_CanNm_00005):
      - Nm Message is not sent immediately after entering into Repeat
        Message State.
  08: Invoke Main Function continuously for the duration of one cycle
      less than the Message Cycle Offset time.
  09: Nm Message is not sent.
  10: Invoke Main Function once so that the Message Cycle Offset time elapses.
  11: Nm Message is Sent after expiration of Message Cycle Offset.
  12: Invoke Main Function continuously for the duration of one cycle
      less than the Message Cycle time.
  13: Nm Message is not sent.
  14: Invoke Main Function once so that the Message Cycle time elapses.
  15: Nm Message is Sent after expiration of Message Cycle Time.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB_Ref.SWS_CanNm_00334.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>430</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1788</internalId></specobject>
    <specobject>
      <id>TC_CANNM_Nm_RepeatMsgIndication_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_9/source/application/CanNm_ConTest_9.c</sourcefile>
      <sourceline>280</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Repeat message test
Test Description: 
  Verify that CanNm module invokes Nm_RepeatMessageIndication() for each
  reception of CanNm_RxIndication with the Repeat Message Request bit is set.

Test Object: None.
Test Precondition: 
  "CanNmPassiveModeEnabled" is set to "false".
  "CanNmRepeatMsgIndEnabled" must be "true"
  "CanNmNodeDetectionEnabled" must be "true"

Test Execution: 
  01: Call CanNm_Init()
  02: For each configured CanNm Channel execute the following.
  03: Verify the value of CanNm PDU Control bit vector is not set to
      "CANNM_PDU_OFF".
  04: Verify the value of CanNm Repeat Message Time is greater than zero.
  05: Call CanNm_NetworkRequest() in bus sleep mode.
  06: Verify that CanNm_NetworkRequest() return "E_OK".
  07: Call CanNm_MainFunction() in a loop until the CanNm message cycle Time
      expires.
  08: Invoke CanNm_RxIndication() with repeat message bit set.
  09: Call CanNm_MainFunction()
  10: VP (SWS_CanNm_00014):
      - Nm_RepeatMessageIndication() is invoked.
  11: Call CanNm_MainFunction() in a loop until the CanNm message cycle Time
      expires.
  12: Invoke CanNm_RxIndication() with repeat message bit set.
  13: Call CanNm_MainFunction()
  14: VP (SWS_CanNm_00014):
      - Nm_RepeatMessageIndication() is invoked.

Test Input: None.
Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.ASR403.CANNM014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1789</internalId></specobject>
    <specobject>
      <id>TC_CANNM_NmTimeOut_Start</id>
      <status>approved</status>
      <source>EB test case specification (asc_CanNm)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_CanNm/test/ts5/Conformance/IN/CanNm_ConTest_9/source/application/CanNm_ConTest_9.c</sourcefile>
      <sourceline>399</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    When the Network Mode is entered, the CanNm module shall start
    the NM-Timeout Timer.
  
Test Object: None.
Test Precondition: 
    * NmTimeout time is greater than the Repeat Message time.
    * "CanNmPassiveModeEnabled" is set to "false".
  
Test Execution: 
    01: Initialize stubs.
    02. Invoke CanNm_Init().
    03: Execute steps 04 - 19 for each configured CanNmChannel.
    04: Request the Network and call Main Function once to process
        the request.
    05: Verify that Repeat Message State is entered.
    06: Release the Network.
    07: Invoke Main Function in a loop till the time equivalent of
        'NM-Timeout' - 1 elapses.
    08: Check if module is still in Ready Sleep State.
    09: Invoke the Main function once.
    10: VP (CanNm.SWS_CanNm_00096, CanNm.SWS_CanNm_00109, CanNm.EB.Dsn.StateDynamics.NM_TIMEOUT_READY_SLEEP_STATE):
        - Prepare Bus Sleep sate is entered.
    11: Invoke Network Request again and call the Main Function once to
        process the request.
    12: Check if Repeat Message State is entered.
    13: Invoke Main Function in a loop until Repeat Message Time elapses.
    14: Check if normal operation state is reached.
    15: Release the network.
    16: Invoke Main Function in a loop until one more cycle will cause
        the remaining time for NM-Timeout to elapse.
    17: VP (CanNm.SWS_CanNm_00096, CanNm.SWS_CanNm_00109, CanNm.EB.Dsn.StateDynamics.NM_TIMEOUT_READY_SLEEP_STATE):
        - Ready sleep state is not yet left. (This ensures that the NM Timeout
          timer has been started in Normal Operation State; If the NM Timeout
          had it not been started, the Ready Sleep State would be left by now.)
    18: Invoke Main function once.
    19: VP (CanNm.SWS_CanNm_00096, CanNm.SWS_CanNm_00109, CanNm.EB.Dsn.StateDynamics.NM_TIMEOUT_READY_SLEEP_STATE):
        - Ready sleep state is left and Prepare Bus Sleep sate is entered.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00096</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
        <provcov>
          <linksto>CanNm.SWS_CanNm_00109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
        <provcov>
          <linksto>CanNm.EB.Dsn.StateDynamics.NM_TIMEOUT_READY_SLEEP_STATE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swdd</linkdestdoctype><linkerror/><internalId>1438</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1790</internalId></specobject>
  </specobjects>
  </specdocument>
  <violations/>
  <oreqmViolations/>
</tracingresults>
