<?xml version="1.0" encoding="UTF-8"?>
<tracingresults>
  <environment>
    <toolname>ReqM2</toolname>
    <toolversion>1.30.0 (stable)</toolversion>
    <toolcopyright>Copyright 2010 - 2018 Elektrobit Automotive GmbH</toolcopyright>
    <libxmlversion>2.0207</libxmlversion>
    <libxml2compileversion>2.9.10</libxml2compileversion>
    <libxml2runtimeversion>20912</libxml2runtimeversion>
    <perlversion>v5.32.1</perlversion>
    <perlptrsize>64</perlptrsize>
    <commandline>-t -q -o asc_SoAd_tracing_cmdb.oreqm -O /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements -c /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules_RMP4_0.xml -s approved,rejected --wfatal WDUPLICATEID,WDUPLICATEIDANDVER /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/ReqM2_Native/asc_SoAd_public_modulereference_integration_req.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/ReqM2_Native/asc_SoAd_requirements_AUTOSAR_SWS_SoAd_4_2_2.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/ReqM2_Native/asc_SoAd_requirements_AUTOSAR_SWS_SoAd_R20-11.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/ReqM2_Native/asc_SoAd_requirements_AUTOSAR_SWS_SoAd_RefinedRequirements.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/ReqM2_Native/asc_SoAd_requirements_SoAd_EB_Requirements.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/common_req/SoAd_DbgInst_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/common_req/SoAd_PbcfgM_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/common_req/SoAd_PduLengthType_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/common_req/SoAd_PostBuildSelectable_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/common_req/SoAd_VerifyStub_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/ReqM2_GenericImporter/reqm_DEV.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/ReqM2_GenericImporter/reqm_IMPL.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/ReqM2_GenericImporter/reqm_IMPLXML.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/ReqM2_DocBookImporter/reqm_SWDD.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/ReqM2_GenericImporter/reqm_SWUTS.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/ReqM2_OldCImporter/reqm_SWUTS_LEGACY.reqm</commandline>
    <timestamp>Mon Jun 17 21:02:42 2024</timestamp>
  </environment>
  <cmdline>
    <cmdparam>
      <name>I</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>O</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>c</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules_RMP4_0.xml</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>o</name>
      <values>
        <value>asc_SoAd_tracing_cmdb.oreqm</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>q</name>
    </cmdparam>
    <cmdparam>
      <name>s</name>
      <values>
        <value>approved</value>
        <value>rejected</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>t</name>
    </cmdparam>
    <cmdparam>
      <name>wfatal</name>
      <values>
        <value>WDUPLICATEID</value>
        <value>WDUPLICATEIDANDVER</value>
      </values>
    </cmdparam>
  </cmdline>
  <inputfiles>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/ReqM2_Native/asc_SoAd_public_modulereference_integration_req.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/ReqM2_Native/asc_SoAd_requirements_AUTOSAR_SWS_SoAd_4_2_2.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/ReqM2_Native/asc_SoAd_requirements_AUTOSAR_SWS_SoAd_R20-11.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/ReqM2_Native/asc_SoAd_requirements_AUTOSAR_SWS_SoAd_RefinedRequirements.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/ReqM2_Native/asc_SoAd_requirements_SoAd_EB_Requirements.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/common_req/SoAd_DbgInst_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/common_req/SoAd_PbcfgM_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/common_req/SoAd_PduLengthType_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/common_req/SoAd_PostBuildSelectable_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/common_req/SoAd_VerifyStub_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/ReqM2_GenericImporter/reqm_DEV.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/ReqM2_GenericImporter/reqm_IMPL.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/ReqM2_GenericImporter/reqm_IMPLXML.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/ReqM2_DocBookImporter/reqm_SWDD.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/ReqM2_GenericImporter/reqm_SWUTS.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/ReqM2_OldCImporter/reqm_SWUTS_LEGACY.reqm</inputfile>
  </inputfiles>
  <configuration>
    <doctypes>
    <regexs>
      <!-- external level -->
      <regex>creq</regex>       <!-- since 10/1018: introduced for updated tracing model-->

      <!-- product line level -->
      <regex>fea</regex>
      <regex>swpad</regex>      <!-- since 10/1018: introduced for updated tracing model-->
      <regex>swts</regex>

      <!-- bundle level -->
      <regex>swrs</regex>
      <regex>swad</regex>
      <regex>swintts</regex>

      <!-- module level -->
      <regex>swdd</regex>
      <regex>swurs</regex>      <!-- since 10/1018: introduced for updated tracing model-->
      <regex>swmts</regex>      <!-- since 01/1010: introduced for updated tracing model RMP4.0-->
      <regex>swuts</regex>
      <regex>impl</regex>

      <!-- legacy items -->
      <regex>dev</regex>
      <regex>man</regex>
      <regex>lim</regex>
    </regexs>
  </doctypes>
    <rules>
    <!-- The Ruleset for RMP4.0 is currently identical to the previous rule set. This rule is
        intoduce to show that the right file is uses. It will be removed when the RMP4.0 rule set is
    reworked -->
    <rule>
      <name>INFO.Rule set RMP4.0</name>
      <description>This rules indicates that RMP4.0 rule set is used.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status!='approved') and (./status!='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>WRN.general.doctypes</name>
      <description>The used doctype is not part of the tracing model</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobjects/@doctype</applyto>
          <condition>((. != 'creq') or (. != 'fea') or (. != 'swpad') or (. != 'swts') or (. != 'swrs') or (. !='swad') or (. != 'swintts') or (.!= 'swdd') or (. != 'swurs') or (. != 'swmts') or (. != 'swuts') or (. != 'impl') or (. != 'dev') or (. != 'man') or (. != 'lim'))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.status</name>
      <description>All specification objects must be either in status=approved or in status=rejected. Other
        statuses are not allowed. How to fix: Set status to rejected or approved.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status!='approved') and (./status!='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.rejected</name>
      <description>Status status=rejected is only allowed for requirements. How to fix: set to approved for specification object that are not requirements.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype!='swrs')  and (../@doctype!='swmrs') and (../@doctype!='swurs') and (./status='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.comment</name>
      <description>Specification objects with status=rejected shall have a comment or rationale that
        starts with on of the following texts: "This requirement is informational only", "This requirement is not applicable".
        How to fix: Add some text starting with "This requirement is informational only"
        or "This requirement is not applicable" to either the comment or to the rationale.
        Comment: Implementation of check checks for contains instead of starts-with since there is
        no trim function in the used XPATH engine.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>contains(./comment,"This requirement is informational only") or contains(./rationale,"This requirement is informational only") or contains(./comment,"This requirement is not applicable") or contains(./rationale,"This requirement is not applicable")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.rejected.coverage</name>
      <description>Specification objects with status=rejected shall not need coverage. How to fix: remove need for coverage.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>count(./needscoverage)=0</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swurs.needscoverage.count</name>
      <description>Unit requirements with status=approved need to be covered, exceptions from
      this rule: configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") and requirements with
      a comment starting with "The adherence to this requirement is ensured by the following
      release check (URL to the checklist template plus ID of the check):".
      How to fix: Provide a needsobj element for those specobjects or comment according to the rule.
      </description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swurs') and (./status='approved') and count(./needscoverage/needsobj)=0 and count(./fulfilledby/ffbObj)=0]</applyto>
          <!--This condition is false if the id of a specification object does not end with '_Conf' or '_CONF' or does not start with ECUC_ -->
          <condition>substring-after(./id,"ECUC_")!="" or substring-before(./id,"_Conf")!="" or substring-before(./id,"_CONF")!="" or contains(./comment,"The adherence to this requirement is ensured by the following release check (URL to the checklist template plus ID of the check):")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swurs.needscoverage.rationale</name>
      <description>Requirements with status=approved and without coverage needs that are
        configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") shall have a comment or rationale
        with the following text: "This is a configuration parameter requirement without functional
        specification.". How to fix: Add some text starting with "This is a configuration parameter
        requirements without functional specification" to either the comment or to the rationale.</description>
      <regexchecks>
        <regexcheck>
          <applyto>//specobject[(../@doctype='swurs') and (./status='approved') and count(./needscoverage/needsobj)=0 and (substring-after(./id,"ECUC_")!="" or substring-before(./id,"_CONF")!="" or substring-before(./id,"_Conf")!="")]</applyto>
          <regex>This is a configuration parameter requirement without functional specification.</regex>
        </regexcheck>
      </regexchecks>
    </rule>

    <rule>
      <name>ERR.swrs.needscoverage.rationale</name>
      <description>Requirements with status=approved and without coverage needs that are
        configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") shall have a comment or rationale
        with the following text: "This is a configuration parameter requirement without functional
        specification.". How to fix: Add some text starting with "This is a configuration parameter
        requirements without functional specification" to either the comment or to the rationale.</description>
      <regexchecks>
        <regexcheck>
          <applyto>//specobject[(../@doctype='swrs') and (./status='approved') and count(./needscoverage/needsobj)=0 and (substring-after(./id,"ECUC_")!="" or substring-before(./id,"_CONF")!="" or substring-before(./id,"_Conf")!="")]</applyto>
          <regex>This is a configuration parameter requirement without functional specification.</regex>
        </regexcheck>
      </regexchecks>
    </rule>

    <rule>
      <name>ERR.swurs.releases</name>
      <description>Requirements which originates from AUTOSAR (source tag contains term 'AUTOSAR_SWS', 'AUTOSAR_TPS',
        'AUTOSAR_ASWS' or 'AUTOSAR_TR') shall have their release tag set to 'AUTOSAR {major}.{minor}.{patch}' (e.g. 'AUTOSAR 4.3.0').
        Other requirements (including refinements of AUTOSAR requirements) must not contain any of the listed prefixes as
        part of the source tag.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swurs') and (contains(./source,'AUTOSAR_SWS') or contains(./source,'AUTOSAR_TPS') or contains(./source,'AUTOSAR_ASWS') or contains(./source,'AUTOSAR_TR'))]</applyto>
          <condition>contains(./releases/release,'AUTOSAR')</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swrs.releases</name>
      <description>Requirements which originates from AUTOSAR (source tag contains term 'AUTOSAR_SWS', 'AUTOSAR_TPS',
        'AUTOSAR_ASWS' or 'AUTOSAR_TR') shall have their release tag set to 'AUTOSAR {major}.{minor}.{patch}' (e.g. 'AUTOSAR 4.3.0').
        Other requirements (including refinements of AUTOSAR requirements) must not contain any of the listed prefixes as
        part of the source tag.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swrs') and (contains(./source,'AUTOSAR_SWS') or contains(./source,'AUTOSAR_TPS') or contains(./source,'AUTOSAR_ASWS') or contains(./source,'AUTOSAR_TR'))]</applyto>
          <condition>contains(./releases/release,'AUTOSAR')</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swdd.needscoverage.count</name>
      <description>Design elements with status=approved need to be covered.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swdd') and (./status='approved') and count(./needscoverage/needsobj)=0]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swurs.needscoverage.doctypes</name>
      <description>Requirements can be covered only by swurs, swad, dev, lim, swdd, impl, swuts, swmts, or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swurs')]</applyto>
          <condition>(./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="swad" or ./needscoverage/needsobj="dev" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swmts" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swrs.needscoverage.doctypes</name>
      <description>Requirements of type swrs can be covered only by swrs, swurs, swad, swintts or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swrs')]</applyto>
          <condition>(./needscoverage/needsobj="swrs" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="swad" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swintts" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swdd.needscoverage.doctypes</name>
      <description>Design elements of type swdd can only be covered by swdd, swurs, impl, swuts, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swdd')]</applyto>
          <condition>(./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swmts" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dev.needscoverage.count</name>
      <description>Deviations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dev')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swuts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swuts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swmts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swmts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swintts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swintts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.needscoverage.count</name>
      <description>Manual test cases shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.impl.needscoverage.count</name>
      <description>Source code shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='impl')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.lim.needscoverage.count</name>
      <description>Limitations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='lim')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.fea.needscoverage.test</name>
      <description>Features shall be tested by software test ('swts') or manuel test ('man'). If no test is planned a justification shall be given.
                   A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>(
               ./needscoverage/needsobj="swts" or ./needscoverage/needsobj="man" or ./fulfilledby/ffbObj/ffbType="swts" or ./fulfilledby/ffbObj/ffbType="man" or contains(./furtherinfo,"fea.needscoverage.test") or contains(./furtherinfo,"fea.needscoverage.doctypes"))</condition>
        </conditioncheck>
      </conditionchecks>
          </rule>

    <rule>
      <name>WRN.fea.needscoverage.impl</name>
      <description>Features shall be covered by implementation fea, swrs, swad, swpad, swurs, man and swts. For lagacy features a justification is acceppted. A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>( ./needscoverage/needsobj="swrs" or ./fulfilledby/ffbObj/ffbType="swrs" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swpad" or ./fulfilledby/ffbObj/ffbType="swpad" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="fea" or ./fulfilledby/ffbObj/ffbType="fea" or contains(./furtherinfo,"fea.needscoverage.impl"))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>


    <rule>
      <name>ERR.swad.fulfilledby.doctypes</name>
      <description>Architectural design objects of type swad can only be covered by swurs, swad, swdd, swintts, man, otherwise they should be refined with swrs</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swad')]</applyto>
          <condition>(./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="req" or ./needscoverage/needsobj="req" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swad" or ./fulfilledby/ffbObj/ffbType="swdd" or ./fulfilledby/ffbObj/ffbType="swintts" or ./needscoverage/needsobj="swintts" or ./fulfilledby/ffbObj/ffbType="man" or ./needscoverage/needsobj="man") </condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swmts.providescoverage.doctypes</name>
      <description>Test case specifications (tcs) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='tcs')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.providescoverage.doctypes</name>
      <description>Manual test case specification (man) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swuts.providescoverage.doctypes</name>
      <description>Software unit test case specification (swuts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swuts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swintts.providescoverage.doctypes</name>
      <description>Software integration test case specification (swintts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swintts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swts.providescoverage.doctypes</name>
      <description>Software test case specification (swts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

  </rules>
    <oreqmRules>

        <rule>
            <name>WRN.swts.needscoverage.count</name>
            <description>Violated if there are more than 10 swts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
        <rule>
            <name>WRN.man.needscoverage.count</name>
            <description>Violated if there are more than 10 man specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='man']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='man']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>man.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
        <rule>
            <name>WRN.swintts.needscoverage.count</name>
            <description>Violated if there are more than 10 swintts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swintts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swintts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swintts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
        <rule>
            <name>WRN.swmts.needscoverage.count</name>
            <description>Violated if there are more than 10 swmts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swmts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swmts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swmts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swuts.needscoverage.count</name>
            <description>Violated if there are more than 10 swuts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swuts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swuts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swuts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swpad.needscoverage.count</name>
            <description>Violated if there are more than 10 swpad specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swpad']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swpad']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swpad.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swrs.needscoverage.count</name>
            <description>Violated if there are more than 10 swrs specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swrs']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swrs']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swrs.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swad.needscoverage.count</name>
            <description>Violated if there are more than 10 swad specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swad']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swad']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swad.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swurs.needscoverage.count</name>
            <description>Violated if there are more than 10 swurs specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swurs']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swurs']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swurs.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swdd.needscoverage.count</name>
            <description>Violated if there are more than 10 swdd specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swdd']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swdd']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swdd.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.impl.needscoverage.count</name>
            <description>Violated if there are more than 10 impl specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='impl']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='impl']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>impl.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swrs.fulfilledby.count</name>
            <description>Violated if there are more than 10 swrs specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swrs'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swrs'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swrs.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swad.fulfilledby.count</name>
            <description>Violated if there are more than 10 swad specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swad'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swad'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swad.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swurs.fulfilledby.count</name>
            <description>Violated if there are more than 10 swurs specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swurs'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swurs'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swurs.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swdd.fulfilledby.count</name>
            <description>Violated if there are more than 10 swdd specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swdd'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swdd'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swdd.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
  </oreqmRules>
  </configuration>
  <specdocument>
    <specobjects doctype="lim">
    <specobject>
      <id>SoAd.EB_INTREQ_SoAd_0001</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>2</version>
      <description>The integrator must ensure that SoAd lower layer functions and
          SoAd main functions do not preempt each other.
          List of SoAd lower layer functions:
        <ul>
          <li>SoAd_RxIndication()</li>
          <li>SoAd_TxConfirmation()</li>
          <li>SoAd_TcpAccepted()</li>
          <li>SoAd_TcpConnected()</li>
          <li>SoAd_TcpIpEvent()</li>
          <li>SoAd_LocalIpAddrAssignmentChg()</li>
        </ul>
          List of SoAd main functions:
          <ul>
          <li>SoAd_MainFunction()</li>
          <li>SoAd_MainFunctionTx()</li>
        </ul>
          This can be achieved by setting EthIf and Eth driver in polling mode, e.g.
          by disabling of:
          <ul>
          <li>EthIfEnableRxInterrupt</li>
          <li>EthCtrlEnableRxInterrupt</li>
          <li>EthIfEnableTxInterrupt</li>
          <li>EthCtrlEnableTxInterrupt</li>
        </ul>
          to enforce that lower layer APIs are called only in the
          context of main functions. In addition, all Eth stack main functions, e.g.:
          <ul>
          <li>EthIf_MainFunctionRx()</li>
          <li>EthIf_MainFunctionTx()</li>
          <li>EthIf_MainFunctionState()</li>
          <li>TcpIp_MainFunction()</li>
          <li>TcpIp_MainFunctionTx()</li>
          <li>EthSM_MainFunction()</li>
          </ul>
          must be in the same Os task or have the same task priority to eliminate preemption.
        <pre/>
          Exception: SoAd_CopyTxData() can be called in the context of
          SoAd_IfTransmit() and is therefore excluded from this integration requirement.
        <pre/>This integration requirement also applies to possible other not listed SoAd
          lower layer functions.
      </description>
      <rationale>
        This limitation reduces code size and execution time by eliminating the need for extensive
        use of exclusive areas.
      </rationale>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>0</internalId></specobject>

    <!-- Integration requirement INTREQ_SoAd_0002 is not required anymore -->

    <!-- Requirement also necessary due to ASCSOAD-1199 -->
    <specobject>
      <id>SoAd.EB_INTREQ_SoAd_0003</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>2</version>
      <description>The integrator must ensure that the following SoAd upper layer functions shall
          not preempt or be preempted by each other or the functions defined in
          lim.SoAd.EB_INTREQ_SoAd_0001.
          List of SoAd upper layer functions:
          <ul>
          <li>SoAd_SetRemoteAddr()</li>
          <li>SoAd_SetUniqueRemoteAddr()</li>
          <li>SoAd_ReleaseRemoteAddr()</li>
          <li>SoAd_IfRoutingGroupTransmit()</li>
          <li>SoAd_IfSpecificRoutingGroupTransmit()</li>
          <li>SoAd_GetSoConId()</li>
          <li>SoAd_CloseSoCon()</li>
          <li>SoAd_OpenSoCon()</li>
          <li>SoAd_RequestIpAddrAssignment()</li>
          <li>SoAd_ReleaseIpAddrAssignment()</li>
          <li>SoAd_GetLocalAddr()</li>
          <li>SoAd_GetPhysAddr()</li>
          <li>SoAd_GetRemoteAddr()</li>
          <li>SoAd_EnableRouting()</li>
          <li>SoAd_EnableSpecificRouting()</li>
          <li>SoAd_DisableRouting()</li>
          <li>SoAd_DisableSpecificRouting()</li>
          <li>SoAd_TpChangeParameter()</li>
          <li>SoAd_ReadDhcpHostNameOption()</li>
          <li>SoAd_WriteDhcpHostNameOption()</li>
          <li>SoAd_GetSoConMode()</li>
          <li>SoAd_ChangeParameter()</li>
          <li>SoAd_IsConnectionReady()</li>
          </ul>
          Exception: The following functions are excluded:
          <ul>
          <li>SoAd_IfTransmit()</li>
          <li>SoAd_TpTransmit()</li>
          <li>SoAd_TpCancelTransmit()</li>
          <li>SoAd_TpCancelReceive()</li>
          </ul>
          Exception: A preemption of SoAd upper layer functions with
          SoAd upper layer functions might be possible if the call occurs in the same
          context. Example: SoAd_TxConfirmation() calls UL_TxConfirmation(),
          which calls SoAd_ReleaseRemoteAddr() causing a preemption of
          SoAd_TxConfirmation() in the same call context.
        <pre/>
          This integration requirement also applies to possible other not listed SoAd
          upper layer functions.
      </description>
      <rationale>
        This limitation reduces code size and execution time by eliminating the need for extensive
        use of exclusive areas.
      </rationale>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1</internalId></specobject>

    <specobject>
      <id>SoAd.EB_INTREQ_SoAd_0004</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        The reinitialization process shall not interrupt other module functions.
        If reinitialization of the module is required, the call of
        SoAd_Init() shall not interrupt other module functions.
      </description>
      <rationale>
        The reinitialization process resets all internal variables. Continuing an interrupted
        module function after reinitialization can lead to undefined module behavior.
      </rationale>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>2</internalId></specobject>

    <!-- Integration requirement INTREQ_SoAd_0005 is not required anymore -->

    <specobject>
      <id>SoAd.EB_INTREQ_SoAd_0006</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        If SoAd_IfTransmit() with SduDataPtr = NULL_PTR is called for a UDP connection, the
        optional header and payload to be transmitted must fit into a single UDP frame. It must
        be ensured that IP fragmentation does not occur. Otherwise a Det error is reported.
      </description>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>3</internalId></specobject>

    <!-- Integration requirement INTREQ_SoAd_0007 is not required anymore -->

    <specobject>
      <id>SoAd.EB_INTREQ_SoAd_0008</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        If SoAd_SetUniqueRemoteAddr() is called, it must be assured that SoAd_ReleaseRemoteAddr()
        is called as often for the same SoConId before the remote address is released.
      </description>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>4</internalId></specobject>

    <specobject>
      <id>SoAd.EB_INTREQ_SoAd_0009</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        If SoAd_SetUniqueRemoteAddr() is called and returns a socket connection set with
        SoAd_SetRemoteAddr(), it must be assured that SoAd_ReleaseRemoteAddr() is called as often
        for the same SoConId before the remote address can be set with SoAd_SetRemoteAddr() again.
      </description>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>5</internalId></specobject>

    <specobject>
      <id>SoAd.EB_INTREQ_SoAd_0010</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        SoAd performs transmission over a TCP connection as a data stream.
        If a TP PDU transmission using this TCP connection gets aborted, the TCP connection will be
        closed.
        An ongoing transmission for a TP PDU can be aborted either via
        SoAd_TpCancelTransmit() or by returning BUFREQ_E_NOT_OK
        for UL_SoAdTpCopyTxData() when requesting available data which will be called before
        requesting the actual data.
      </description>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>6</internalId></specobject>

    <specobject>
      <id>SoAd.EB_INTREQ_SoAd_0011</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        SoAd does not support time-out supervision of upper layer TP transmission data provision.
        If data are not immediately available, the upper layer must ensure that the call of
        UL_SoAdTpCopyTxData() does not return BUFREQ_E_OK with available data
        equal to 0 or BUFREQ_E_BUSY for an infinite time.
      </description>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>7</internalId></specobject>

    <specobject>
      <id>SoAd.EB_INTREQ_SoAd_0012</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        The SoAd_IfTransmit() API must be called in a context with priority that is equal to or 
        higher than the priority of the SoAd_MainFunction() OS task.
      </description>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>8</internalId></specobject>

    <specobject>
      <id>SoAd.EB_INTREQ_SoAd_0013</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        The integrator must ensure for
        SoAdSocketRoutes and SoAdPduRoutes referring a SoAdSocketConnectionGroup and refer to
        multiple SoAdRoutingGroups that either all of these SoAdRoutingGroups are only referred
        by SoAdSocketRoutes and SoAdPduRoutes referring the same SoAdSocketConnectionGroup
        and can be controlled via SoAd_EnableSpecificRouting() and SoAd_DisableSpecificRouting() and
        therefore called specific SoAdRoutingGroups
        or all of these SoAdRoutingGroups are only referred SoAdSocketRoutes and SoAdPduRoutes
        referring to different SoAdSocketConnectionGroup or SoAdSocketConnection within each
        SoAdRoutingGroup and can be controlled by SoAd_EnableRouting() and SoAd_DisableRouting()
        and therefore called global SoAdRoutingGroups.
        It must be ensured that a SoAdSocketRoutes or SoAdPduRoutes does not refer to a mixture of
        specific and global SoAdRoutingGroups.
      </description>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>9</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>SoAd.ASR42.ECUC_SoAd_00067</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_4_2_2.xml</source>
      <version>1</version>
      <description>
        Name: SoAdResourceManagementEnable
        Parameter Type: Boolean
        Parent Containers: SoAdSocketConnectionGroup,
        Description: Enables the resource management option for this socket.
        Introduction: May not be activated for UDP sockets in receive.
        TRUE: resource management option enabled
        FALSE: resource management option disabled
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>10</internalId></specobject>
    <specobject>
      <id>SoAd.ASR42.SWS_SoAd_00072</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_4_2_2.xml</source>
      <version>1</version>
      <description>
        The SoAd module shall provide the following H-files:
        SoAd.h (for declaration of provided interface functions)
        SoAd_Types.h (for public types defined by SoAd)
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/SoAd.h_30</srcid><srcstatus/><internalId>791</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SoAd_Int_05_TxTp.c_29</srcid><srcstatus/><internalId>812</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_50</srcid><srcstatus/><internalId>820</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SoAd_Int_07_Rx.c_60</srcid><srcstatus/><internalId>857</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_53</srcid><srcstatus/><internalId>882</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>11</internalId></specobject>
    <specobject>
      <id>SoAd.ASR42.SWS_SoAd_00073</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_4_2_2.xml</source>
      <version>1</version>
      <description>
        The SoAd module shall include the following H-files of other modules:
        TcpIp.h - header file of the AUTOSAR TCP/IP stack
        ComStack_Types.h [REF]
        UL&gt;_Cbk.h (for callback functions of the SoAd upper layer modules)
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/SoAd.h_26</srcid><srcstatus/><internalId>790</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SoAd_Int_05_TxTp.c_27</srcid><srcstatus/><internalId>811</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SoAd_Int_05_TxTp.c_35</srcid><srcstatus/><internalId>813</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_48</srcid><srcstatus/><internalId>819</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_56</srcid><srcstatus/><internalId>821</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SoAd_Int_07_Rx.c_58</srcid><srcstatus/><internalId>856</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SoAd_Int_07_Rx.c_66</srcid><srcstatus/><internalId>858</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_51</srcid><srcstatus/><internalId>881</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_59</srcid><srcstatus/><internalId>883</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>12</internalId></specobject>
    <specobject>
      <id>SoAd.ASR42.SWS_SoAd_00629</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_4_2_2.xml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_TpChangeParameter() shall check that the 
        service SoAd_Init was previously called. If the check fails, SoAd_TpChangeParameter() shall 
        raise the development error SOAD_E_NOTINIT.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_TpChangeParameter_Uninit</srcid><srcstatus/><internalId>1631</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>13</internalId></specobject>
    <specobject>
      <id>SoAd.ASR42.SWS_SoAd_00630</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_4_2_2.xml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_TpChangeParameter() shall check parameter 
        parameter for being valid. If the check fails, SoAd_TpChangeParameter() shall raise the 
        development error SOAD_E_INV_ARG.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.ChangeParameter</srcid><srcstatus/><internalId>755</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>14</internalId></specobject>
    <specobject>
      <id>SoAd.ASR42.SWS_SoAd_00631</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_4_2_2.xml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_TpChangeParameter() shall check parameter id 
        for being valid. If the check fails, SoAd_TpChangeParameter() shall raise the development error 
        SOAD_E_INV_ARG.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.ChangeParameter</srcid><srcstatus/><internalId>755</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>15</internalId></specobject>
    <specobject>
      <id>SoAd.ASR42.SWS_SoAd_00725</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SoAd_4_2_2.xml</source>
      <version>1</version>
      <description>
        VARIANT-PRE-COMPILE: All configuration parameters shall be configurable at pre-compile time. 
        Use case: Source code optimization.
      </description>
      <comment>
        This requirement is informational only.
       Rationale:
       This requirement just explains the word VARIANT-PRE-COMPILE.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>16</internalId></specobject>
    <specobject>
      <id>SoAd.ASR42.SWS_SoAd_00726</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SoAd_4_2_2.xml</source>
      <version>1</version>
      <description>
        VARIANT-LINK-TIME: All configuration parameters of the container SoAdGeneral related to enable 
        or disable an optional feature shall be configurable at pre-compile time; the remaining 
        configuration parameters shall be configurable at link time. Use case: Object code.
      </description>
      <comment>
        This requirement is informational only.
       Rationale:
       This requirement just explains the word VARIANT-LINK-TIME.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>17</internalId></specobject>
    <specobject>
      <id>SoAd.ASR42.SWS_SoAd_00727</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SoAd_4_2_2.xml</source>
      <version>1</version>
      <description>
        VARIANT-POST-BUILD: Most parameters contained in SoAdConfig are configurable at post-build time.
        The parameters contained in SoAdGeneral are configurable at pre-compile time Use case: ECU 
        configuration can be flashed (L) and selected during initialization phase (M)
      </description>
      <comment>
        This requirement is informational only.
       Rationale:
       This requirement just explains the word VARIANT-LINK-TIME.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>18</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>SoAd.ECUC_SoAd_00002</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdDevErrorDetect
        Parameter Type: Boolean
        Parent Containers: SoAdGeneral,
        Description: Switches the development error detection and notification on or off.
        Introduction: * true: detection and notification is enabled. * false: detection and
        notification is disabled.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>19</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00003</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdGeneral
        Container Type: Container
        Sub-Containers: SoAdSecurityEventRefs
        Description: This container contains all global configuration parameters of SoAd.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>20</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00004</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdVersionInfoApi
        Parameter Type: Boolean
        Parent Containers: SoAdGeneral,
        Description: Activates the SoAd_GetVersionInfo() API.
        Introduction: TRUE: Enables the SoAd_GetVersionInfo() API. FALSE: SoAd_GetVersionInfo() API is
        not included.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>21</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00007</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdPduRoute
        Container Type: Sub-Container
        Parent Containers: SoAdConfig,
        Sub-Containers: SoAdPduRouteDest
        Description: Describes the path of a PDU from an upper layer of the SoAd to the socket in the
        TCP/IP stack for transmission. This PDU can consume meta data items of type
        SOCKET_CONNECTION_ID_16.
        Lower Multiplicity: 0
        infinite
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>22</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00008</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketRoute
        Container Type: Sub-Container
        Parent Containers: SoAdConfig,
        Sub-Containers: SoAdSocketRouteDest
        Description: Describes the path of a PDU from a socket in the TCP/IP stack to an upper layer of
        the SoAd after reception in the TCP/IP Stack.
        Lower Multiplicity: 0
        infinite
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR R19-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_19_UDP_EnableServiceInstance</srcid><srcstatus/><internalId>1776</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>23</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00009</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketConnection
        Container Type: Sub-Container
        Parent Containers: SoAdSocketConnectionGroup,
        Sub-Containers: SoAdSocketRemoteAddress
        Description: Specifies the socket connection (Id and remote address information)
        Introduction: Note: Parameters which are common to all socket connections of a socket
        connection group are specified directly at the group.
        Lower Multiplicity: 1
        infinite
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>24</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00016</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketId
        Parameter Type: Integer
        Parent Containers: SoAdSocketConnection,
        Description: Socket connection identifier used as SoConId in the interaction with upper layers.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: true
        Max-Value: 65535 (Type:
        Min-Value: 0 (Type:
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_06_SymbolicNames</srcid><srcstatus/><internalId>1218</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>25</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00017</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketLocalAddressRef
        Parameter Type: Reference
        Parent Containers: SoAdSocketConnectionGroup,
        Description: Local IP address and interface used for this connection.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/TcpIp/TcpIpConfig/TcpIpLocalAddr
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>26</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00018</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketLocalPort
        Parameter Type: Integer
        Parent Containers: SoAdSocketConnectionGroup,
        Description: Local UDP or TCP port used for this connection. If this parameter set to 0 SoAd
        requests TcpIp to select an ephemeral port.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 65535 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>27</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00019</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketRemoteIpAddress
        Parameter Type: StringParameter
        Parent Containers: SoAdSocketRemoteAddress,
        Description: IP address of remote node. The configured address must be of the same
        TcpIpDomainType (i.e. IPv4 or IPv6) as the TcpIpLocalAddr referred by SoAdSocketLocalAddressRef
        Introduction: To accept any remote IP address, set SoAdSocketRemoteIpAddress to "ANY". See
        message acceptance policy for more details.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        String Param Def Condition: Default Value: , Max-Length: , Min-Length: , Regular-Expression:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>28</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00020</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketRemotePort
        Parameter Type: Integer
        Parent Containers: SoAdSocketRemoteAddress,
        Description: Remote UDP or TCP port used for this connection.
        Introduction: To accept any remote port, set SoAdSocketRemotePort to 0. See message acceptance
        policy for more details.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 65535 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>29</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00022</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketTcpInitiate
        Parameter Type: Boolean
        Parent Containers: SoAdSocketTcp,
        Description: Specifies the initiator for this TCP connection. It will not be defined for UDP
        sockets.
        Introduction: TRUE: This TCP connection is initiated by this module. FALSE: This TCP connection
        is to be initiated in the listen mode.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>30</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00023</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketTcpNoDelay
        Parameter Type: Boolean
        Parent Containers: SoAdSocketTcp,
        Description: Specifies not to use the congestion control mechanism for this connection. It will
        not be defined for UDP sockets.
        Introduction: TRUE: This TCP connection will NOT use congestion control. FALSE: This TCP
        connection will use congestion control. If the optional parameter is not enabled, the default
        behavior configured for TcpIp via the parameter TcpIpTcpNagleEnabled is applied. Note: This
        parameter must not be set to FALSE if TcpIpTcpNagleEnabled is set to FALSE.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>31</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00024</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketUdpListenOnly
        Parameter Type: Boolean
        Parent Containers: SoAdSocketUdp,
        Description: Specifies if the socket connection group is only used for reception (TRUE) or used
        for both reception and transmission (FALSE)
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>32</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00030</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdTxPduRef
        Parameter Type: Reference
        Parent Containers: SoAdPduRoute,
        Description: Reference to the global PDU structure
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/EcuC/EcucConfigSet/EcucPduCollection/Pdu
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>33</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00031</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdTxPduId
        Parameter Type: Integer
        Parent Containers: SoAdPduRoute,
        Description: Tx PDU ID of the PDU coming from the PDU Router.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: true
        Max-Value: 65535 (Type:
        Min-Value: 0 (Type:
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_06_SymbolicNames</srcid><srcstatus/><internalId>1218</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>34</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00034</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        See"SoAd_x_Container_x_SoAdPduRouteDest_x_Parameter_x_SoAdTxSocketConnOrSocketConnBundleRef"
        Name | SoAdTxSocketConnOrSocketConnBundleRefSoAdPduRouteDest.
        SoAdTxSocketConnOrSocketConnBundleRef
        Parent Container | SoAdPduRouteDest
        Description | Choice Reference to a SocketConnection or to a SocketConnectionGroup on which the
        PDU is to be sent on. The reference to a SocketConnectionGroup shall only be used for upper
        layers with IF API.
        Multiplicity | 1
        Type | Choice reference to [ SoAdSocketConnection, SoAdSocketConnectionGroup
        Post-Build Variant Value | true
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME
        Post-build time | X | VARIANT-POST-BUILD
        Scope / Dependency | scope: local dependency: SoAdTxUpperLayerType
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>35</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00035</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        See"SoAd_x_Container_x_SoAdSocketRoute_x_Parameter_x_SoAdRxSocketConnOrSocketConnBundleRef"
        Name | SoAdRxSocketConnOrSocketConnBundleRefSoAdSocketRoute.
        SoAdRxSocketConnOrSocketConnBundleRef
        Parent Container | SoAdSocketRoute
        Description | Choice Reference to a SocketConnection or to a SocketConnectionGroup on which the
        PDU was received. The reference to a SocketConnectionGroup shall only be used for upper layers
        with IF API.
        Multiplicity | 1
        Type | Choice reference to [ SoAdSocketConnection, SoAdSocketConnectionGroup
        Post-Build Variant Value | true
        Value Configuration Class | Pre-compile time | X | VARIANT-PRE-COMPILE
        Link time | X | VARIANT-LINK-TIME
        Post-build time | X | VARIANT-POST-BUILD
        Scope / Dependency | scope: local dependency: SoAdRxUpperLayerType
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>36</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00036</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdRxPduHeaderId
        Parameter Type: Integer
        Parent Containers: SoAdSocketRoute,
        Description: ID contained in the packet received on the TCP/IP connection if the PDU header
        option is enabled.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 4294967296 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>37</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00038</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdRxPduRef
        Parameter Type: Reference
        Parent Containers: SoAdSocketRouteDest,
        Description: Reference to the global PDU structure
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/EcuC/EcucConfigSet/EcucPduCollection/Pdu
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>38</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00039</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdIPv6AddressEnabled
        Parameter Type: Boolean
        Parent Containers: SoAdGeneral,
        Description: Allows for increased memory allocation to store IPv6 addresses.
        Introduction: TRUE: Enables support for IPv6 addresses FALSE: Only IPv4 addresses are supported
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>39</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00062</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdMainFunctionPeriod
        Parameter Type: FloatValue
        Parent Containers: SoAdGeneral,
        Description: Determines the frequency at which the SoAd_MainFunction() is called in [s]
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: INF (Type: OPEN)
        Min-Value: 0 (Type: OPEN)
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>40</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00001</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        All configuration items shall be located outside the kernel of the module.
      </description>
      <comment>
        This requirement is informational only.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>41</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00091</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_IfTransmit
        Syntax
        Std_ReturnType SoAd_IfTransmit (PduIdType TxPduId, const PduInfoType* PduInfoPtr)
        Service ID [hex] | 0x49
        Sync/Async | Synchronous
        Reentrancy | Reentrant for different PduIds. Non reentrant for the same PduId.
        Parameters (in) | TxPduId | Identifier of the PDU to be transmitted
        PduInfoPtr | Length of and pointer to the PDU data and pointer to MetaData.
        Parameters (inout) | None
        Parameters (out) | None
        Return value | Std_ReturnType | E_OK: Transmit request has been accepted.E_NOT_OK: Transmit
        request has not been accepted.
        Description | Requests transmission of a PDU.
        Available via | SoAd.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_ComTest_02_MultipleGenUL</srcid><srcstatus/><internalId>1214</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00091.ServiceId</srcid><srcstatus/><internalId>504</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.ServiceID</srcid><srcstatus/><internalId>776</internalId></linkedfrom><linkedfrom><srcid>dev.SoAd.ParameterNames</srcid><srcstatus/><internalId>777</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>42</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00093</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_Init
        Syntax
        void SoAd_Init (const SoAd_ConfigType* SoAdConfigPtr)
        Service ID [hex] | 0x01
        Sync/Async | Synchronous
        Reentrancy | Non Reentrant
        Parameters (in) | SoAdConfigPtr | Pointer to the configuration data of the SoAd module.
        Parameters (inout) | None
        Parameters (out) | None
        Return value | None
        Description | Initializes the Socket Adaptor.
        Available via | SoAd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_ComTest_02_MultipleGenUL</srcid><srcstatus/><internalId>1214</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00093.ServiceId</srcid><srcstatus/><internalId>503</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>43</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00096</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_GetVersionInfo
        Syntax
        void SoAd_GetVersionInfo (Std_VersionInfoType* versioninfo)
        Service ID [hex] | 0x02
        Sync/Async | Synchronous
        Reentrancy | Reentrant
        Parameters (in) | None
        Parameters (inout) | None
        Parameters (out) | versioninfo | Pointer to where to store the version information of this
        module.
        Return value | None
        Description | Returns the version information.
        Available via | SoAd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_ComTest_02_MultipleGenUL</srcid><srcstatus/><internalId>1214</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00096.ServiceId</srcid><srcstatus/><internalId>502</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>44</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00097</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_RxIndication
        Syntax
        void SoAd_RxIndication (TcpIp_SocketIdType SocketId, const TcpIp_SockAddrType* RemoteAddrPtr,
        const uint8* BufPtr, uint16 Length)
        Service ID [hex] | 0x12
        Sync/Async | Synchronous
        Reentrancy | Reentrant for different SocketIds. Non reentrant for the same SocketId.
        Parameters (in) | SocketId | Socket identifier of the related local socket resource.
        RemoteAddrPtr | Pointer to memory containing IP address and port of the remote host which sent
        the data.
        BufPtr | Pointer to the received data.
        Length | Data length of the received TCP segment or UDP datagram.
        Parameters (inout) | None
        Parameters (out) | None
        Return value | None
        Description | The TCP/IP stack calls this primitive after the reception of data on a socket.
        The socket identifier along with configuration information determines which module is to be
        called.
        Available via | SoAd.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_ComTest_02_MultipleGenUL</srcid><srcstatus/><internalId>1214</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00097.ServiceId</srcid><srcstatus/><internalId>533</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.SWS_SoAd_00097.DomainInvalid</srcid><srcstatus/><internalId>1046</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>45</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00098</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_TxConfirmation
        Syntax
        void SoAd_TxConfirmation (TcpIp_SocketIdType SocketId, uint16 Length)
        Service ID [hex] | 0x14
        Sync/Async | Synchronous
        Reentrancy | Reentrant for different SocketIds. Non reentrant for the same SocketId.
        Parameters (in) | SocketId | Socket identifier of the related local socket resource.
        Length | Number of transmitted data bytes.
        Parameters (inout) | None
        Parameters (out) | None
        Return value | None
        Description | The TCP/IP stack calls this function after the data has been acknowledged by the
        peer for TCP. Caveats: The upper layer might not be able to determine exactly which data bytes
        have been confirmed.
        Available via | SoAd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_ComTest_02_MultipleGenUL</srcid><srcstatus/><internalId>1214</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00098.ServiceId</srcid><srcstatus/><internalId>535</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>46</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00099</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_TcpAccepted
        Syntax
        Std_ReturnType SoAd_TcpAccepted (TcpIp_SocketIdType SocketId, TcpIp_SocketIdType
        SocketIdConnected, const TcpIp_SockAddrType* RemoteAddrPtr)
        Service ID [hex] | 0x15
        Sync/Async | Synchronous
        Reentrancy | Non Reentrant
        Parameters (in) | SocketId | Socket identifier of the related local socket resource which has
        been used at TcpIp_Bind(
        SocketIdConnected | Socket identifier of the local socket resource used for the established
        connection.
        RemoteAddrPtr | IP address and port of the remote host.
        Parameters (inout) | None
        Parameters (out) | None
        Return value | Std_ReturnType | Result of operationE_OK upper layer accepts the established
        connectionE_NOT_OK upper layer refuses the established connection, TcpIp stack shall close the
        connection.
        Description | This service gets called if the stack put a socket into the listen mode before (
        as server) and a peer connected to it (as client). In detail: The TCP/IP stack calls this
        function after a socket was set into the listen state with TcpIp_TcpListen() and a TCP
        connection is requested by the peer.
        Available via | SoAd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_ComTest_02_MultipleGenUL</srcid><srcstatus/><internalId>1214</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00099.ServiceId</srcid><srcstatus/><internalId>536</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.SWS_SoAd_00099.DomainInvalid</srcid><srcstatus/><internalId>1043</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>47</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00100</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_TcpConnected
        Syntax
        void SoAd_TcpConnected (TcpIp_SocketIdType SocketId)
        Service ID [hex] | 0x16
        Sync/Async | Synchronous
        Reentrancy | Non Reentrant
        Parameters (in) | SocketId | Socket identifier of the related local socket resource.
        Parameters (inout) | None
        Parameters (out) | None
        Return value | None
        Description | This service gets called if the stack initiated a TCP connection before (as
        client) and the peer (the server) acknowledged the connection set up. In detail: The TCP/IP
        stack calls this function after a socket was requested to connect with TcpIp_TcpConnect() and a
        TCP connection is confirmed by the peer. The parameter value of SocketId equals the SocketId
        value of the preceeding TcpIp_TcpConnect() call.
        Available via | SoAd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_ComTest_02_MultipleGenUL</srcid><srcstatus/><internalId>1214</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00100.ServiceId</srcid><srcstatus/><internalId>537</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>48</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00101</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Type of error | Related error code | Error value
        API service called before initializing the module | SOAD_E_UNINITSoAd.SOAD_E_UNINIT | 0x01
        API service called with NULL pointer | SOAD_E_PARAM_POINTERSoAd.SOAD_E_PARAM_POINTER | 0x02
        Invalid argument | SOAD_E_INV_ARGSoAd.SOAD_E_INV_ARG | 0x03
        Invalid PDU ID | SOAD_E_INV_PDUIDSoAd.SOAD_E_INV_PDUID | 0x06
        Invalid socket address | SOAD_E_INV_SOCKETIDSoAd.SOAD_E_INV_SOCKETID | 0x07
        Invalid configuration set selection | SOAD_E_INIT_FAILEDSoAd.SOAD_E_INIT_FAILED | 0x08
        Invalid meta data | SOAD_E_INV_METADATASoAd.SOAD_E_INV_METADATA | 0x09
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00692</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>292</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>49</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00105</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_TpTransmit
        Syntax
        Std_ReturnType SoAd_TpTransmit (PduIdType TxPduId, const PduInfoType* PduInfoPtr)
        Service ID [hex] | 0x53
        Sync/Async | Synchronous
        Reentrancy | Reentrant for different PduIds. Non reentrant for the same PduId.
        Parameters (in) | TxPduId | Identifier of the PDU to be transmitted
        PduInfoPtr | Length of and pointer to the PDU data and pointer to MetaData.
        Parameters (inout) | None
        Parameters (out) | None
        Return value | Std_ReturnType | E_OK: Transmit request has been accepted.E_NOT_OK: Transmit
        request has not been accepted.
        Description | Requests transmission of a PDU.
        Available via | SoAd.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_ComTest_02_MultipleGenUL</srcid><srcstatus/><internalId>1214</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00105.ServiceId</srcid><srcstatus/><internalId>507</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.ServiceID</srcid><srcstatus/><internalId>776</internalId></linkedfrom><linkedfrom><srcid>dev.SoAd.ParameterNames</srcid><srcstatus/><internalId>777</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>50</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00106</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | &lt;Up&gt;_[SoAd][If]RxIndication
        Syntax
        void &lt;Up&gt;_[SoAd][If]RxIndication (PduIdType RxPduId, const PduInfoType* PduInfoPtr)
        Sync/Async | Synchronous
        Reentrancy | Reentrant for different PduIds. Non reentrant for the same PduId.
        Parameters (in) | RxPduId | ID of the received PDU.
        PduInfoPtr | Contains the length (SduLength) of the received PDU, a pointer to a buffer (
        SduDataPtr) containing the PDU, and the MetaData related to this PDU.
        Parameters (inout) | None
        Parameters (out) | None
        Return value | None
        Description | Indication of a received PDU from a lower layer communication interface module.
        Available via | &lt;none&gt;
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_08_MultipleUL_Func</srcid><srcstatus/><internalId>1228</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00538</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>51</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00107</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | &lt;Up&gt;_[SoAd][If]TxConfirmation
        Syntax
        void &lt;Up&gt;_[SoAd][If]TxConfirmation (PduIdType TxPduId, Std_ReturnType result)
        Sync/Async | Synchronous
        Reentrancy | Reentrant for different PduIds. Non reentrant for the same PduId.
        Parameters (in) | TxPduId | ID of the PDU that has been transmitted.
        result | E_OK: The PDU was transmitted. E_NOT_OK: Transmission of the PDU failed.
        Parameters (inout) | None
        Parameters (out) | None
        Return value | None
        Description | The lower layer communication interface module confirms the transmission of a PDU,
        or the failure to transmit a PDU.
        Available via | &lt;none&gt;
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_08_MultipleUL_Func</srcid><srcstatus/><internalId>1228</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.IfTxConfirmationResult</srcid><srcstatus/><internalId>779</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00538</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>52</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00121</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_MainFunction
        Syntax
        void SoAd_MainFunction (void)
        Service ID [hex] | 0x19
        Description | Schedules the Socket Adaptor. (Entry point for scheduling)
        Available via | SchM_SoAd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_ComTest_02_MultipleGenUL</srcid><srcstatus/><internalId>1214</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00121.ServiceId</srcid><srcstatus/><internalId>540</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>53</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00131</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        The main function for scheduling the SoAd (Entry point for scheduling) shall be called by the
        Schedule Manager according to the configured call period.
      </description>
      <comment>
        This requirement is informational only.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>54</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00137</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | &lt;Up&gt;_[SoAd][Tp]CopyTxData
        Syntax
        BufReq_ReturnType &lt;Up&gt;_[SoAd][Tp]CopyTxData (PduIdType id, const PduInfoType* info, const
        RetryInfoType* retry, PduLengthType* availableDataPtr)
        Sync/Async | Synchronous
        Reentrancy | Reentrant
        Parameters (in) | id | Identification of the transmitted I-PDU.
        info | Provides the destination buffer (SduDataPtr) and the number of bytes to be copied (
        SduLength). If not enough transmit data is available, no data is copied by the upper layer
        module and BUFREQ_E_BUSY is returned. The lower layer module may retry the call. An SduLength
        of 0 can be used to indicate state changes in the retry parameter or to query the current
        amount of available data in the upper layer module. In this case, the SduDataPtr may be a
        NULL_PTR.
        retry | This parameter is used to acknowledge transmitted data or to retransmit data after
        transmission problems. If the retry parameter is a NULL_PTR, it indicates that the transmit
        data can be removed from the buffer immediately after it has been copied. Otherwise, the retry
        parameter must point to a valid RetryInfoType element. If TpDataState indicates TP_CONFPENDING,
        the previously copied data must remain in the TP buffer to be available for error recovery.
        TP_DATACONF indicates that all data that has been copied before this call is confirmed and can
        be removed from the TP buffer. Data copied by this API call is excluded and will be confirmed
        later. TP_DATARETRY indicates that this API call shall copy previously copied data in order to
        recover from an error. In this case TxTpDataCnt specifies the offset in bytes from the current
        data copy position.
        Parameters (inout) | None
        Parameters (out) | availableDataPtr | Indicates the remaining number of bytes that are
        available in the upper layer module's Tx buffer. availableDataPtr can be used by TP modules
        that support dynamic payload lengths (e.g. FrIsoTp) to determine the size of the following CFs.
        Return value | BufReq_ReturnType | BUFREQ_OK: Data has been copied to the transmit buffer
        completely as requested.BUFREQ_E_BUSY: Request could not be fulfilled, because the required
        amount of Tx data is not available. The lower layer module may retry this call later on. No
        data has been copied.BUFREQ_E_NOT_OK: Data has not been copied. Request failed.
        Description | This function is called to acquire the transmit data of an I-PDU segment (N-PDU)
        Each call to this function provides the next part of the I-PDU data unless retry-&gt;TpDataState
        is TP_DATARETRY. In this case the function restarts to copy the data beginning at the offset
        from the current position indicated by retry-&gt;TxTpDataCnt. The size of the remaining data is
        written to the position indicated by availableDataPtr.
        Available via | &lt;none&gt;
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_08_MultipleUL_Func</srcid><srcstatus/><internalId>1228</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.CopyTxDataParameters</srcid><srcstatus/><internalId>778</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00538</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>55</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00138</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | &lt;Up&gt;_[SoAd][Tp]StartOfReception
        Syntax
        BufReq_ReturnType &lt;Up&gt;_[SoAd][Tp]StartOfReception (PduIdType id, const PduInfoType* info,
        PduLengthType TpSduLength, PduLengthType* bufferSizePtr)
        Sync/Async | Synchronous
        Reentrancy | Reentrant
        Parameters (in) | id | Identification of the I-PDU.
        info | Pointer to a PduInfoType structure containing the payload data (without protocol
        information) and payload length of the first frame or single frame of a transport protocol I-
        PDU reception, and the MetaData related to this PDU. If neither first/single frame data nor
        MetaData are available, this parameter is set to NULL_PTR.
        TpSduLength | Total length of the N-SDU to be received.
        Parameters (inout) | None
        Parameters (out) | bufferSizePtr | Available receive buffer in the receiving module. This
        parameter will be used to compute the Block Size (BS) in the transport protocol module.
        Return value | BufReq_ReturnType | BUFREQ_OK: Connection has been accepted. bufferSizePtr
        indicates the available receive buffer; reception is continued. If no buffer of the requested
        size is available, a receive buffer size of 0 shall be indicated by bufferSizePtr.
        BUFREQ_E_NOT_OK: Connection has been rejected; reception is aborted. bufferSizePtr remains
        unchanged.BUFREQ_E_OVFL: No buffer of the required length can be provided; reception is aborted.
        bufferSizePtr remains unchanged.
        Description | This function is called at the start of receiving an N-SDU. The N-SDU might be
        fragmented into multiple N-PDUs (FF with one or more following CFs) or might consist of a
        single N-PDU (SF). The service shall provide the currently available maximum buffer size when
        invoked with TpSduLength equal to 0.
        Available via | &lt;none&gt;
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_08_MultipleUL_Func</srcid><srcstatus/><internalId>1228</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.StartOfReception</srcid><srcstatus/><internalId>753</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00538</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>56</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00139</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | &lt;Up&gt;_[SoAd][Tp]CopyRxData
        Syntax
        BufReq_ReturnType &lt;Up&gt;_[SoAd][Tp]CopyRxData (PduIdType id, const PduInfoType* info,
        PduLengthType* bufferSizePtr)
        Sync/Async | Synchronous
        Reentrancy | Reentrant
        Parameters (in) | id | Identification of the received I-PDU.
        info | Provides the source buffer (SduDataPtr) and the number of bytes to be copied (SduLength)
        An SduLength of 0 can be used to query the current amount of available buffer in the upper
        layer module. In this case, the SduDataPtr may be a NULL_PTR.
        Parameters (inout) | None
        Parameters (out) | bufferSizePtr | Available receive buffer after data has been copied.
        Return value | BufReq_ReturnType | BUFREQ_OK: Data copied successfullyBUFREQ_E_NOT_OK: Data was
        not copied because an error occurred.
        Description | This function is called to provide the received data of an I-PDU segment (N-PDU)
        to the upper layer. Each call to this function provides the next part of the I-PDU data. The
        size of the remaining buffer is written to the position indicated by bufferSizePtr.
        Available via | &lt;none&gt;
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_08_MultipleUL_Func</srcid><srcstatus/><internalId>1228</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00538</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>57</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00146</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_TcpIpEvent
        Syntax
        void SoAd_TcpIpEvent (TcpIp_SocketIdType SocketId, TcpIp_EventType Event)
        Service ID [hex] | 0x17
        Sync/Async | Synchronous
        Reentrancy | Non Reentrant
        Parameters (in) | SocketId | Socket identifier of the related local socket resource.
        Event | This parameter contains a description of the event just encountered.
        Parameters (inout) | None
        Parameters (out) | None
        Return value | None
        Description | This service gets called if the stack encounters a condition described by the
        values in Event.
        Available via | SoAd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_ComTest_02_MultipleGenUL</srcid><srcstatus/><internalId>1214</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00146.ServiceId</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>58</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00176</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        The call period of the SoAd_MainFunction() shall be determined by configuration parameter
        SOAD_MainFunction_Period.
      </description>
      <comment>
        This requirement is informational only.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>59</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00180</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | &lt;Up&gt;_[SoAd][Tp]TpRxIndication
        Syntax
        void &lt;Up&gt;_[SoAd][Tp]TpRxIndication (PduIdType id, Std_ReturnType result)
        Sync/Async | Synchronous
        Reentrancy | Reentrant
        Parameters (in) | id | Identification of the received I-PDU.
        result | Result of the reception.
        Parameters (inout) | None
        Parameters (out) | None
        Return value | None
        Description | Called after an I-PDU has been received via the TP API, the result indicates
        whether the transmission was successful or not.
        Available via | &lt;none&gt;
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_08_MultipleUL_Func</srcid><srcstatus/><internalId>1228</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.ParameterNames</srcid><srcstatus/><internalId>777</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00538</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>60</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00181</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | &lt;Up&gt;_[SoAd][Tp]TpTxConfirmation
        Syntax
        void &lt;Up&gt;_[SoAd][Tp]TpTxConfirmation (PduIdType id, Std_ReturnType result)
        Sync/Async | Synchronous
        Reentrancy | Reentrant
        Parameters (in) | id | Identification of the transmitted I-PDU.
        result | Result of the transmission of the I-PDU.
        Parameters (inout) | None
        Parameters (out) | None
        Return value | None
        Description | This function is called after the I-PDU has been transmitted on its network, the
        result indicates whether the transmission was successful or not.
        Available via | &lt;none&gt;
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_08_MultipleUL_Func</srcid><srcstatus/><internalId>1228</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.ParameterNames</srcid><srcstatus/><internalId>777</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00538</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>61</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00197</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In case PDU header option is enabled (SoAdPduHeaderEnable is TRUE) for a socket connection and
        PDU transmission, SoAd shall insert the PDU Header with the configured HeaderId and the actual
        PDU length directly before the PDU data, i.e. TcpIp_UdpTransmit() or TcpIp_TcpTransmit() shall
        be called with a TotalLength or AvailableLength increased by the PDU Header length, the PDU
        Header shall be copied before the PDU data to a SoAd UDP transmit buffer (if any) and a memory
        specified by TcpIp within SoAd_CopyTxData() requesting the begin of the PDU data.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Ts_SoAd_IfTransmit_PduR_Tcp_Client_MultipleCopyTxData</srcid><srcstatus/><internalId>1239</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_03_nPduUdpTx_Last_Is_Best_Remaining_Length</srcid><srcstatus/><internalId>1514</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_05_Udp_Con11_Tp_Transmit_Segmented_WithHeader</srcid><srcstatus/><internalId>1705</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>62</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00198</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        The SoAd PDU header shall consist of a 4 byte ID field for unique identification of the PDU at
        the receiver and a 4 byte length field specifying the data length of the PDU. Both in BigEndian
        byte order.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_62_nPduUdpTx_IndividualTimers</srcid><srcstatus/><internalId>1473</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>63</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00208</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        All timing parameters given as EcucFloatParamDef in unit seconds in the configuration, shall be
        converted to integer multiples of the parameter SoAdMainFunctionPeriod.
      </description>
      <comment>
        This requirement is informational only.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>64</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00209</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_LocalIpAddrAssignmentChg
        Syntax
        void SoAd_LocalIpAddrAssignmentChg (TcpIp_LocalAddrIdType IpAddrId, TcpIp_IpAddrStateType State)
        Service ID [hex] | 0x18
        Sync/Async | Synchronous
        Reentrancy | Non Reentrant
        Parameters (in) | IpAddrId | IP address Identifier, representing an IP address specified in the
        TcpIp module configuraiton (e.g. static IPv4 address on EthIf controller 0)
        State | state of IP address assignment
        Parameters (inout) | None
        Parameters (out) | None
        Return value | None
        Description | This service gets called by the TCP/IP stack if an IP address assignment changes
        i.e. new address assigned or assigned address becomes invalid)
        Available via | SoAd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_ComTest_02_MultipleGenUL</srcid><srcstatus/><internalId>1214</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00209.ServiceId</srcid><srcstatus/><internalId>539</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>65</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00210</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | SoAd_ConfigType
        Kind | Structure
        Elements | implementation specific
        Type
        Comment | The content of the configuration data structure is implementation specific.
        Description | Configuration data structure of the SoAd module.
        Available via | SoAd.h
      </description>
      <comment>
        This requirement is informational only.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>66</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00211</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd_Init shall store the access to the configuration structure for subsequent API calls.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_446</srcid><srcstatus/><internalId>884</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>67</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00213</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_IfTransmit() shall check that the service
        SoAd_Init was previously called. If the check fails, SoAd_IfTransmit() shall raise the
        development error SOAD_E_UNINIT.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_IfTransmit_NoInit</srcid><srcstatus/><internalId>1275</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.DevError_UNINIT</srcid><srcstatus/><internalId>780</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>68</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00214</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_IfTransmit() shall check parameter TxPduId for
        being valid. If the check fails, SoAd_IfTransmit() shall raise the development error
        SOAD_E_INV_PDUID.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_IfTransmit_InvalPduId</srcid><srcstatus/><internalId>1334</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_03_IfTransmit_UL_TP</srcid><srcstatus/><internalId>1645</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.ParameterNames</srcid><srcstatus/><internalId>777</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>69</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00216</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_Init() shall check the parameter SoAdConfigPtr
        for containing a valid configuration. If the check fails, SoAd_Init() shall raise the
        development error SOAD_E_INIT_FAILED.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.PBcfgCheck</srcid><srcstatus/><internalId>752</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>70</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00224</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_TpTransmit() shall check that the service
        SoAd_Init was previously called. If the check fails, SoAd_TpTransmit() shall raise the
        development error SOAD_E_UNINIT.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_TpTransmit_NoInit</srcid><srcstatus/><internalId>1257</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.DevError_UNINIT</srcid><srcstatus/><internalId>780</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>71</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00237</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_TpTransmit() shall check parameter TxPduId for
        being valid. If the check fails, SoAd_TpTransmit() shall raise the development error
        SOAD_E_INV_PDUID.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_TpTransmit_ParamInvalid</srcid><srcstatus/><internalId>1312</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_00_TpTransmit_InvalPduId</srcid><srcstatus/><internalId>1335</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.ParameterNames</srcid><srcstatus/><internalId>777</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>72</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00264</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_RxIndication() shall check that the service
        SoAd_Init was previously called. If the check fails, SoAd_RxIndication() shall raise the
        development error SOAD_E_UNINIT.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_RxIndication_NoInit</srcid><srcstatus/><internalId>1274</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.DevError_UNINIT</srcid><srcstatus/><internalId>780</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>73</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00267</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_RxIndication() shall check parameter SocketId
        for being valid. If the check fails, SoAd_RxIndication() shall raise the development error
        SOAD_E_INV_SOCKETID.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_RxIndication_SocketIdInval</srcid><srcstatus/><internalId>1329</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>74</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00268</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_RxIndication() shall check parameter
        RemoteAddrPtr for being valid. If the check fails, SoAd_RxIndication() shall raise the
        development error SOAD_E_INV_ARG.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_RxIndication_ParamNull</srcid><srcstatus/><internalId>1296</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_00_RxIndication_SourceInvalid</srcid><srcstatus/><internalId>1331</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.RxIndication.Det.RemotAddr</srcid><srcstatus/><internalId>759</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>75</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00269</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_TxConfirmation() shall check that the service
        SoAd_Init was previously called. If the check fails, SoAd_TxConfirmation() shall raise the
        development error SOAD_E_UNINIT.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_TxConfirmation_NoInit</srcid><srcstatus/><internalId>1266</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.DevError_UNINIT</srcid><srcstatus/><internalId>780</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>76</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00270</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_TxConfirmation() shall check parameter SocketId
        for being valid. If the check fails, SoAd_TxConfirmation() shall raise the development error
        SOAD_E_INV_SOCKETID.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_TxConfirmation_ParamInvalid</srcid><srcstatus/><internalId>1319</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_00_TxConfirmation_ReadonlySoCon</srcid><srcstatus/><internalId>1343</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_00_TxConfirmation_UdpSoCon</srcid><srcstatus/><internalId>1344</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_88_TcpIpEvent_While_Tx</srcid><srcstatus/><internalId>1497</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>77</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00271</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_TxConfirmation() shall check parameter Length
        for being valid. If the check fails, SoAd_TxConfirmation() shall raise the development error
        SOAD_E_INV_ARG.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_67_TxConfirmation_OversizedLength</srcid><srcstatus/><internalId>1477</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>78</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00272</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_TcpAccepted() shall check that the service
        SoAd_Init was previously called. If the check fails, SoAd_TcpAccepted() shall raise the
        development error SOAD_E_UNINIT.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_TcpAccepted_NoInit</srcid><srcstatus/><internalId>1267</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.DevError_UNINIT</srcid><srcstatus/><internalId>780</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>79</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00273</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_TcpAccepted() shall check parameter SocketId
        for being valid. If the check fails, SoAd_TcpAccepted() shall raise the development error
        SOAD_E_INV_SOCKETID.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_TcpAccepted_InvalidSocketId</srcid><srcstatus/><internalId>1317</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>80</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00274</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_TcpConnected() shall check that the service
        SoAd_Init was previously called. If the check fails, SoAd_TcpConnected() shall raise the
        development error SOAD_E_UNINIT.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_TcpConnected_NoInit</srcid><srcstatus/><internalId>1268</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.DevError_UNINIT</srcid><srcstatus/><internalId>780</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>81</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00275</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_TcpConnected() shall check parameter SocketId
        for being valid. If the check fails, SoAd_TcpConnected() shall raise the development error
        SOAD_E_INV_SOCKETID.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_TcpConnected_ParamInvalid</srcid><srcstatus/><internalId>1316</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>82</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00276</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_TcpIpEvent() shall check that the service
        SoAd_Init was previously called. If the check fails, SoAd_TcpIpEvent() shall raise the
        development error SOAD_E_UNINIT.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_TcpIpEvent_NoInit</srcid><srcstatus/><internalId>1264</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.DevError_UNINIT</srcid><srcstatus/><internalId>780</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>83</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00277</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_TcpIpEvent() shall check parameter SocketId for
        being valid. If the check fails, SoAd_TcpIpEvent() shall raise the development error
        SOAD_E_INV_SOCKETID.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.TcpIpEvent.Det.UnkownSocketId</srcid><srcstatus/><internalId>775</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>84</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00278</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_TcpIpEvent() shall check parameter Event for
        being valid. If the check fails, SoAd_TcpIpEvent() shall raise the development error
        SOAD_E_INV_ARG.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
          <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.dsn.SWS_SoAd_00278.InvalidEvent</srcid><srcstatus/><internalId>1047</internalId></linkedfrom></coveredby></needscov>
          <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.SoAd_TcpIpEvent.InvalidEvent</srcid><srcstatus/><internalId>765</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>85</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00279</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_LocalIpAddrAssignmentChg() shall check that the
        service SoAd_Init was previously called. If the check fails, SoAd_LocalIpAddrAssignmentChg()
        shall raise the development error SOAD_E_UNINIT.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_LocalIpAddrAssignmentChg_NoInit</srcid><srcstatus/><internalId>1251</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.DevError_UNINIT</srcid><srcstatus/><internalId>780</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>86</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00296</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        These requirements are not applicable to this specification.
      </description>
      <comment>
        This requirement is informational only.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>87</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00102</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdBswModules
        Container Type: Container
        Description: Each container describes a specific BSW module that the SoAd shall interface to.
        Lower Multiplicity: 0
        infinite
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>88</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00103</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdConfig
        Container Type: Container
        Sub-Containers: SoAdPduRoute SoAdRoutingGroup SoAdSocketConnectionGroup SoAdSocketRoute
        Description: This container contains the configuration parameters and sub containers of the
        AUTOSAR SoAd module.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>89</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00104</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdIf
        Parameter Type: Boolean
        Parent Containers: SoAdBswModules,
        Description: Specifies if the BSW module supports the Communication Interface APIs or not.
        Value true means that the APIs are supported. A module can have both Communication Interface
        APIs and Transport Protocol APIs (e.g. the PduR module)
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>90</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00105</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdTp
        Parameter Type: Boolean
        Parent Containers: SoAdBswModules,
        Description: Specifies if the BSW module supports the TransportProtocol APIs or not. Value true
        means that the APIs are supported. A module can have both Communication Interface APIs and
        Transport Protocol APIs (e.g. the PduR module)
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>91</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00106</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdIfTxConfirmation
        Parameter Type: Boolean
        Parent Containers: SoAdBswModules,
        Description: Specifies if the BSW module supports the TxConfirmation API or not. Value true
        means that the API is supported.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>92</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00107</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSoConModeChg
        Parameter Type: Boolean
        Parent Containers: SoAdBswModules,
        Description: Specifies if the BSW module supports the SoConModeChg API or not. Value true means
        that the API is supported.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>93</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00109</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdRoutingGroup
        Container Type: Sub-Container
        Parent Containers: SoAdConfig,
        Description: Each container describes a specific routing group which can be enabled or disabled.
        A routing group consists of PDUs. Routing of PDUs can either be forwarding of PDUs from the
        upper layer to a TCP or UDP socket of the TCP/IP stack specified by a SoAdPduRoute or the other
        way around specified by a SoAdSocketRoute.
        Lower Multiplicity: 0
        infinite
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>94</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00110</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketAutomaticSoConSetup
        Parameter Type: Boolean
        Parent Containers: SoAdSocketConnectionGroup,
        Description: Specifies if the setup of the socket connection shall be done automatically (TRUE)
        or manually (FALSE) via SoAd_OpenSoCon() and SoAd_CloseSoCon(
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>95</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00111</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketSoConModeChgNotification
        Parameter Type: Boolean
        Parent Containers: SoAdSocketConnectionGroup,
        Description: Specifies if the SoCon mode change notification callback function of the upper
        layer shall be called in case of SoCon mode change.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>96</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00113</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketRemoteAddress
        Container Type: Sub-Container
        Parent Containers: SoAdSocketConnection,
        Description: Subcontainer of SoAdSocketConnection to specify the remote address (IP address and
        port) for a socket connection.
        Introduction: If SoAdSocketRemoteAddress is not specified the remote address has to be set by
        the upper layer via SoAd_SetRemoteAddr(
        Lower Multiplicity: 0
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>97</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00114</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketRouteDest
        Container Type: Sub-Container
        Parent Containers: SoAdSocketRoute,
        Description: Describes the upper layer destination PDU for a message received on a TcpIp socket.
        This PDU can produce meta data items of type SOCKET_CONNECTION_ID_16.
        Introduction: Multiple socket route destinations in the SoAdSocketRoute can only be used for
        upper layers of interface type (IF) and only for SoAdSocketRoute referring a
        SocketConnectionGroup. In this case SoAdRoutingGroups shall be used to map each
        SoAdSocketRouteDest uniquely to different socket connections of the SocketConnectionGroup.
        Lower Multiplicity: 1
        infinite
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>98</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00115</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdRxUpperLayerType
        Parameter Type: Enumeration
        Parent Containers: SoAdSocketRouteDest,
        Description: Specifies the upper layer interface type (must be "IF" in case of multiple RxPdus)
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Enumeration Literal: IF, AUTOSAR_ECUC
        Enumeration Literal: TP, AUTOSAR_ECUC
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>99</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00116</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdRxPduId
        Parameter Type: Integer
        Parent Containers: SoAdSocketRouteDest,
        Description: This unique identifier is used for a receive cancellation request from an upper
        layer of the SoAd.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 65535 (Type:
        Min-Value: 0 (Type:
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_06_SymbolicNames</srcid><srcstatus/><internalId>1218</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>100</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00117</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdRxRoutingGroupRef
        Parameter Type: Reference
        Parent Containers: SoAdSocketRouteDest,
        Description: Reference to the routing group. Mandatory if the parent SoAdSocketRoute contains
        more than one SoAdSocketRouteDest.
        Lower Multiplicity: 0
        infinite
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/SoAd/SoAdConfig/SoAdRoutingGroup
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR R19-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01026_MultiplePSI_SameRoutingGroupRef</srcid><srcstatus/><internalId>1905</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>101</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00118</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdTxUpperLayerType
        Parameter Type: Enumeration
        Parent Containers: SoAdPduRoute,
        Description: Specifies the upper layer interface type (must be "IF" in case of multiple
        PduRoutes)
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Enumeration Literal: IF, AUTOSAR_ECUC
        Enumeration Literal: TP, AUTOSAR_ECUC
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>102</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00119</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdPduRouteDest
        Container Type: Sub-Container
        Parent Containers: SoAdPduRoute,
        Description: Specifies the PDU route destination.
        Lower Multiplicity: 1
        infinite
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>103</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00120</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdTxPduHeaderId
        Parameter Type: Integer
        Parent Containers: SoAdPduRouteDest,
        Description: ID to be sent on the TCP/IP connection if the PDU header option is enabled.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 4294967296 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>104</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00121</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdRoutingGroupId
        Parameter Type: Integer
        Parent Containers: SoAdRoutingGroup,
        Description: Unique ID of Routing Group
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: true
        Max-Value: 65535 (Type:
        Min-Value: 0 (Type:
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_06_SymbolicNames</srcid><srcstatus/><internalId>1218</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>105</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00122</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdRoutingGroupIsEnabledAtInit
        Parameter Type: Boolean
        Parent Containers: SoAdRoutingGroup,
        Description: If set to true this routing group will be enabled after initializing the SoAd
        module (i.e. enabled in the SoAd_Init function)
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>106</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00123</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdTxRoutingGroupRef
        Parameter Type: Reference
        Parent Containers: SoAdPduRouteDest,
        Description: Reference to the routing group.
        Lower Multiplicity: 0
        infinite
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/SoAd/SoAdConfig/SoAdRoutingGroup
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>107</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00126</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSoConMax
        Parameter Type: Integer
        Parent Containers: SoAdGeneral,
        Description: Specifies the maximum number of SoAd socket connections.
        Introduction: Furthermore it defines the platform type used for SoAd_SoConIdType. If
        SoAdSoConMax is not greater than 256, a uint8 is used, otherwise uint16.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 65535 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.ConfigMaxValues</srcid><srcstatus/><internalId>758</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>108</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00127</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdRoutingGroupMax
        Parameter Type: Integer
        Parent Containers: SoAdGeneral,
        Description: Specifies the maximum number of SoAd routing groups. Furthermore it defines the
        platform type used for RoutingGroupIdType. If SoAdRoutingGroupMax is not greater than 256, a
        uint8 is used,
        Introduction: otherwise a uint16.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 65535 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.ConfigMaxValues</srcid><srcstatus/><internalId>758</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>109</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00128</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdUseCallerInfix
        Parameter Type: Boolean
        Parent Containers: SoAdBswModules,
        Description: Specifies if SoAd shall use (TRUE) the infix "SoAd" when calling an upper layer
        module function or not (FALSE). E.g. if SoAdUseCallerInfix is TRUE for the upper layer "ABC"
        then SoAd will call ABC_SoAdIfRxIndication() otherwise SoAd would call ABC_IfRxIndication(
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>110</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00129</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdUseTypeInfix
        Parameter Type: Boolean
        Parent Containers: SoAdBswModules,
        Description: Specifies if SoAd shall use (TRUE) the API type infix "Tp" or "If" when calling an
        upper layer module function or not (FALSE). E.g. if SoAdUseTypeInfix is TRUE for the upper
        layer "ABC" then SoAd will call ABC_IfRxIndication(), otherwise SoAd would call
        ABC_RxIndication(
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>111</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00130</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketConnectionGroup
        Container Type: Sub-Container
        Parent Containers: SoAdConfig,
        Sub-Containers: SoAdSocketConnection SoAdSocketProtocol
        Description: Specifies the configuration of a socket connection group, i.e. specifies the
        socket connections belonging to the group and the parameters which are common for all socket
        connections of the group. A socket connection specifies how data can be received and transmited
        via a TCP or UDP socket.
        Lower Multiplicity: 1
        infinite
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>112</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00131</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdPduHeaderEnable
        Parameter Type: Boolean
        Parent Containers: SoAdSocketConnectionGroup,
        Description: Enables the transmission of the PDU header (ID, length) on this socket connection.
        Introduction: TRUE: add SoAd PDU header before PDU data FALSE: No SoAd PDU header is used
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>113</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00133</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketUdpTriggerTimeout
        Parameter Type: FloatValue
        Parent Containers: SoAdSocketUdp,
        Description: Specifies the timeout in [s] a nPduUdpTxBuffer is waiting for a PDU with
        TriggerMode = TRIGGER_ALWAYS, i.e. when the timeout expires the nPduUdpTxBuffer is transmitted.
        Timer is reset after each UDP transmission. This optional parameter is only relevant if a
        nPduUdpTxBuffer is used.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: INF (Type: CLOSED)
        Min-Value: 0 (Type: CLOSED)
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>114</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00134</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketTpRxBufferMin
        Parameter Type: Integer
        Parent Containers: SoAdSocketConnectionGroup,
        Description: Specifies the amount of data in bytes (PDU data for the upper layer and PDU Header
        if used) the SoAd shall at least be able to buffer for data reception via each socket
        connection of the socket connection group and using an upper layer with TP.
        Introduction: Note: in case of a TCP socket where PduHeaderMode is used and an upper layer with
        IF-API, the required buffer size can be determined automatically.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 65535 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>115</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00135</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketnPduUdpTxBufferMin
        Parameter Type: Integer
        Parent Containers: SoAdSocketUdp,
        Description: Specifies the amount of data in bytes (PDU data provided by the upper layer and
        PDU Header if used) the SoAd shall be able to buffer for data transmission via this socket
        connection in case the UDP message shall be buffered for transmission of multiple PDUs per UDP.
        Introduction: Note: in case of a UDP socket and an upper layer with TP API is configured, the
        required buffer size can be determined automatically. This optional parameter is only relevant
        if a nPduUdpTxBuffer is used.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 65535 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>116</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00136</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdTxUdpTriggerMode
        Parameter Type: Enumeration
        Parent Containers: SoAdPduRouteDest,
        Description: Specifies whether a PDU triggers the transmission of the nPduUdpTxBuffer.
        Introduction: If this parameter is set to TRIGGER_NEVER, SoAd shall use an nPduUdpTxBuffer for
        the related socket connection. nPduUdpTxBuffer can only be used for upper layers with IF API, i.
        e. this parameter shall only be set to TRIGGER_NEVER if all upper layers belonging to the
        related socket connection have SoAdTxUpperLayerType set to "IF". This parameter is only
        relevant for UDP connections.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Enumeration Literal: TRIGGER_ALWAYS, AUTOSAR_ECUC
        Enumeration Literal: TRIGGER_NEVER, AUTOSAR_ECUC
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>117</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00137</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketMsgAcceptanceFilterEnabled
        Parameter Type: Boolean
        Parent Containers: SoAdSocketConnectionGroup,
        Description: Specifies if the message acceptance filter is enabled (TRUE) or not (FALSE)
        Introduction: Note: if a wildcard is used in SoAdSocketRemoteAddress AND
        SoAdSocketUdpListenOnly is FALSE, this parameter must be TRUE. Note: if multiple
        SoAdSocketConnections are configured for one SoAdSocketConnectionGroup, this parameter must be
        TRUE.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>118</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00138</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketFramePriority
        Parameter Type: Integer
        Parent Containers: SoAdSocketConnectionGroup,
        Description: Specifies the priority of the Ethernet frame.
        Introduction: If IEEE 802.1Q VLAN Tags are used, the specified priority will be used in the
        VLAN Tag PCP filed. If this optional parameter is not available the default priority specified
        in the TcpIp module is used.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 7 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>119</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00139</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketProtocol
        Container Type: Choice-Container
        Parent Containers: SoAdSocketConnectionGroup,
        Choices: SoAdSocketTcp SoAdSocketUdp
        Description: Specifies the transport protocol and transport protocol specific parameters used
        for the socket connections of the socket connection group.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>120</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00140</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketUdp
        Container Type: Choice-Container
        Parent Containers: SoAdSocketProtocol,
        Description: Specifies that UDP is used as transport protocol for the socket connection group
        and parameters only related to UDP socket connections.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>121</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00141</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketTcp
        Container Type: Choice-Container
        Parent Containers: SoAdSocketProtocol,
        Description: Specifies that TCP is used as transport protocol for the socket connection group
        and parameters only related to TCP socket connections.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>122</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00142</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketTcpTxQuota
        Parameter Type: Integer
        Parent Containers: SoAdSocketTcp,
        Description: Specifies the maximum amount of bytes (PDU data provided by the upper layer and
        PDU Header if used) the SoAd may queue for transmission via TCP at the TcpIp module for each
        socket connection of this socket connection group.
        Introduction: Rationale: prohibits that a socket connection consumes all available transmit
        buffers at the TcpIp and blocks transmissions via other socket connections. If the optional
        parameter is not enabled, the amount of data is not limited.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 4294967295 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>123</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00143</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdLocalIpAddrAssigmentChg
        Parameter Type: Boolean
        Parent Containers: SoAdBswModules,
        Description: Specifies if the BSW module supports the LocalIpAddrAssigmentChg API or not. Value
        true means that the API is supported.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>124</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00145</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdIfTriggerTransmit
        Parameter Type: Boolean
        Parent Containers: SoAdBswModules,
        Description: Specifies if the BSW module supports the TriggerTransmit API or not. Value true
        means that the API is supported.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>125</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00146</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdRoutingGroupTxTriggerable
        Parameter Type: Boolean
        Parent Containers: SoAdRoutingGroup,
        Description: Specifies if the If-TxPDUs related to the PduRouteDest containers
        Introduction: referenced by this routing group can be triggered via SoAd_IfRoutingGroupTransmit
        TRUE) or not (FALSE)
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>126</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00147</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketTcpImmediateTpTxConfirmation
        Parameter Type: Boolean
        Parent Containers: SoAdSocketTcp,
        Description: If set to FALSE, SoAd notifies the TP upper layer via transmit confirmation after
        a Tcp Ack has been received. If set to TRUE, SoAd notifies the TP upper layer via transmit
        confirmation immediately after transmit has been accepted by TcpIp.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>127</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00148</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketTcpKeepAlive
        Parameter Type: Boolean
        Parent Containers: SoAdSocketTcp,
        Description: Specifies to use the keep-alive mechanism for this connection. It will not be
        defined for UDP sockets.
        Introduction: TRUE: This TCP connection will use the keep-alive mechanism. FALSE: This TCP
        connection will not use the keep-alive mechanism. Note: This parameter must not be set to TRUE
        if TcpIpTcpKeepAliveEnabled is set to FALSE.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>128</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00503</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Module | Header File | Imported Type
        ComStack_Types | ComStack_Types.h | BufReq_ReturnType
        ComStack_Types.h | PduIdType
        ComStack_Types.h | PduInfoType
        ComStack_Types.h | PduLengthType
        ComStack_Types.h | RetryInfoType
        ComStack_Types.h | TPParameterType
        ComStack_Types.h | TpDataStateType
        IdsM | IdsM_Types.h | IdsM_SecurityEventIdType
        Std | Std_Types.h | Std_ReturnType
        Std_Types.h | Std_VersionInfoType
        TcpIp | TcpIp.h | TcpIp_DomainType
        TcpIp.h | TcpIp_EventType
        TcpIp.h | TcpIp_IpAddrAssignmentType
        TcpIp.h | TcpIp_IpAddrStateType
        TcpIp.h | TcpIp_LocalAddrIdType
        TcpIp.h | TcpIp_ParamIdType
        TcpIp.h | TcpIp_ProtocolType
        TcpIp.h | TcpIp_ReturnType
        TcpIp.h | TcpIp_SockAddrType
        TcpIp.h | TcpIp_SocketIdType
        TcpIp.h | TcpIp_StateType
      </description>
      <comment>
        This requirement is informational only.
        Rationale:
        The required types are defined by the syntax of external module APIs. This requirement is
        therefore redundant.
      AUTOSAR R20-11 comment: Requirement is rejected.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>129</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00504</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        API Function | Header File | Description
        Det_ReportRuntimeError | Det.h | Service to report runtime errors. If a callout has been
        configured then this callout shall be called.
        TcpIp_Bind | TcpIp.h | By this API service the TCP/IP stack is requested to bind a UDP or TCP
        socket to a local resource.
        TcpIp_ChangeParameter | TcpIp.h | By this API service the TCP/IP stack is requested to change a
        parameter of a socket. E.g. the Nagle algorithm may be controlled by this API.
        TcpIp_Close | TcpIp.h | By this API service the TCP/IP stack is requested to close the socket
        and release all related resources.
        TcpIp_GetCtrlIdx | TcpIp.h | TcpIp_GetCtrlIdx returns the index of the controller related to
        LocalAddrId.
        TcpIp_GetIpAddr | TcpIp.h | Obtains the local IP address actually used by LocalAddrId, the
        netmask and default router
        TcpIp_GetPhysAddr | TcpIp.h | Obtains the physical source address used by the EthIf controller
        implicitly specified via LocalAddrId.
        TcpIp_GetRemotePhysAddr | TcpIp.h | TcpIp_GetRemotePhysAddr queries the IP/physical address
        translation table specified by CtrlIdx and returns the physical address related to the IP
        address specified by IpAddrPtr. In case no physical address can be retrieved and parameter
        initRes is TRUE, address resolution for the specified IP address is initiated on the local
        network.
        TcpIp_ReleaseIpAddrAssignment | TcpIp.h | By this API service the local IP address assignment
        for the IP address specified by LocalAddrId shall be released.
        TcpIp_RequestComMode | TcpIp.h | By this API service the TCP/IP stack is requested to change
        the TcpIp state of the communication network identified by EthIf controller index.
        TcpIp_RequestIpAddrAssignment | TcpIp.h | By this API service the local IP address assignment
        for the IP address specified by LocalAddrId shall be initiated.
        TcpIp_GetSocket | TcpIp.h | By this API service the TCP/IP stack is requested to allocate a new
        socket. Note: Each accepted incoming TCP connection also allocates a socket resource.
        TcpIp_TcpConnect | TcpIp.h | By this API service the TCP/IP stack is requested to establish a
        TCP connection to the configured peer.
        TcpIp_TcpListen | TcpIp.h | By this API service the TCP/IP stack is requested to listen on the
        TCP socket specified by the socket identifier.
        TcpIp_TcpReceived | TcpIp.h | By this API service the reception of socket data is confirmed to
        the TCP/IP stack.
        TcpIp_TcpTransmit | TcpIp.h | This service requests transmission of data via TCP to a remote
        node. The transmission of the data is decoupled. Note: The TCP segment(s) are sent dependent on
        runtime factors (e.g. receive window) and configuration parameter (e.g. Nagle algorithm)
        TcpIp_UdpTransmit | TcpIp.h | This service transmits data via UDP to a remote node. The
        transmission of the data is immediately performed with this function call by forwarding it to
        EthIf.
      </description>
      <comment>
        This requirement is informational only.
      AUTOSAR R20-11 comment: Requirement is rejected.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>130</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00505</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        The SoAd shall provide sufficient buffers to store received data which can't be forwarded to
        the upper layer within the context of SoAd_RxIndication as well as buffers for data which can (
        or should) not be forwarded to TcpIp.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00547</srcid><srcstatus/><internalId>167</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00548</srcid><srcstatus/><internalId>168</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>131</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00506</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_GetLocalAddr
        Syntax
        Std_ReturnType SoAd_GetLocalAddr (SoAd_SoConIdType SoConId, TcpIp_SockAddrType* LocalAddrPtr,
        uint8* NetmaskPtr, TcpIp_SockAddrType* DefaultRouterPtr)
        Service ID [hex] | 0x0C
        Sync/Async | Synchronous
        Reentrancy | Reentrant
        Parameters (in) | SoConId | socket connection index representing the SoAd socket connection for
        which the actual local IP address shall be obtained.
        Parameters (inout) | LocalAddrPtr | Pointer to a struct where the local address (IP address and
        port) is stored. The struct member domain shall be set by the caller of the API to the desired
        TcpIp_DomainType and it shall be ensured by the caller that the struct is large enough to store
        an address of the selected type (INET or INET6)
        DefaultRouterPtr | Pointer to struct where the IP address of the default router (gateway) is
        stored (struct member "port" is not used and of arbitrary value). The struct must be of the
        same type and size as LocalAddrPtr.
        Parameters (out) | NetmaskPtr | Pointer to memory where Network mask of IPv4 address or address
        prefix of IPv6 address in CIDR Notation is stored
        Return value | Std_ReturnType | Result of operationE_OK The request was successfulE_NOT_OK The
        request was not successful.
        Description | Retrieves the local address (IP address and port) actually used for the SoAd
        socket connection specified by SoConId, the netmask and default router
        Available via | SoAd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_ComTest_02_MultipleGenUL</srcid><srcstatus/><internalId>1214</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_204_Close_and_Reopen_TCP_Server</srcid><srcstatus/><internalId>1628</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00506.ServiceId</srcid><srcstatus/><internalId>515</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>132</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00507</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_GetPhysAddr
        Syntax
        Std_ReturnType SoAd_GetPhysAddr (SoAd_SoConIdType SoConId, uint8* PhysAddrPtr)
        Service ID [hex] | 0x0D
        Sync/Async | Synchronous
        Reentrancy | Reentrant
        Parameters (in) | SoConId | socket connection index representing the SoAd socket connection for
        which the physical source address of the related EthIf controller shall be obtained.
        Parameters (inout) | None
        Parameters (out) | PhysAddrPtr | Pointer to the memory where the physical source address (MAC
        address) in network byte order is stored
        Return value | Std_ReturnType | Result of operationE_OK The request was successfulE_NOT_OK The
        request was not successful.
        Description | Retrieves the physical source address of the EthIf controller used by the SoAd
        socket connection specified by SoConId.
        Available via | SoAd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_ComTest_02_MultipleGenUL</srcid><srcstatus/><internalId>1214</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00507.ServiceId</srcid><srcstatus/><internalId>516</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>133</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00508</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_TpChangeParameter
        Syntax
        Std_ReturnType SoAd_TpChangeParameter (PduIdType id, TPParameterType parameter, uint16 value)
        Service ID [hex] | 0x4b
        Sync/Async | Synchronous
        Reentrancy | Non Reentrant
        Parameters (in) | id | Identification of the PDU which the parameter change shall affect.
        parameter | ID of the parameter that shall be changed.
        value | The new value of the parameter.
        Parameters (inout) | None
        Parameters (out) | None
        Return value | Std_ReturnType | E_OK: The parameter was changed successfully.E_NOT_OK: The
        parameter change was rejected.
        Description | Request to change a specific transport protocol parameter (e.g. block size)
        Available via | SoAd.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_ComTest_02_MultipleGenUL</srcid><srcstatus/><internalId>1214</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00508.ServiceId</srcid><srcstatus/><internalId>530</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.ChangeParameter</srcid><srcstatus/><internalId>755</internalId></linkedfrom><linkedfrom><srcid>dev.SoAd.ServiceID</srcid><srcstatus/><internalId>776</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>134</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00509</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_GetSoConId
        Syntax
        Std_ReturnType SoAd_GetSoConId (PduIdType TxPduId, SoAd_SoConIdType* SoConIdPtr)
        Service ID [hex] | 0x07
        Sync/Async | Synchronous
        Reentrancy | Reentrant
        Parameters (in) | TxPduId | Transmit PduId specifying the SoAd socket connection for which the
        socket connection index shall be returned.
        Parameters (inout) | None
        Parameters (out) | SoConIdPtr | Pointer to memory receiving the socket connection index asked
        for.
        Return value | Std_ReturnType | Result of operationE_OK The request was successfulE_NOT_OK The
        request was not successful
        Description | Returns socket connection index related to the specified TxPduId.
        Available via | SoAd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_ComTest_02_MultipleGenUL</srcid><srcstatus/><internalId>1214</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00509.ServiceId</srcid><srcstatus/><internalId>510</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>135</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00510</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_OpenSoCon
        Syntax
        Std_ReturnType SoAd_OpenSoCon (SoAd_SoConIdType SoConId)
        Service ID [hex] | 0x08
        Sync/Async | Asynchronous
        Reentrancy | Reentrant
        Parameters (in) | SoConId | socket connection index specifying the socket connection which
        shall be opened
        Parameters (inout) | None
        Parameters (out) | None
        Return value | Std_ReturnType | Result of operationE_OK The request was successfulE_NOT_OK The
        request was not successful.
        Description | This service opens the socket connection specified by SoConId.
        Available via | SoAd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_ComTest_02_MultipleGenUL</srcid><srcstatus/><internalId>1214</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00510.ServiceId</srcid><srcstatus/><internalId>511</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>136</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00511</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_CloseSoCon
        Syntax
        Std_ReturnType SoAd_CloseSoCon (SoAd_SoConIdType SoConId, boolean abort)
        Service ID [hex] | 0x09
        Sync/Async | Asynchronous
        Reentrancy | Reentrant
        Parameters (in) | SoConId | socket connection index specifying the socket connection which
        shall be closed
        abort | TRUE: socket connection will immediately be terminated. FALSE: socket connection will
        be terminated if no other upper layer is using this socket connection.
        Parameters (inout) | None
        Parameters (out) | None
        Return value | Std_ReturnType | Result of operationE_OK The request was successfulE_NOT_OK The
        request was not successful.
        Description | This service closes the socket connection specified by SoConId.
        Available via | SoAd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_ComTest_02_MultipleGenUL</srcid><srcstatus/><internalId>1214</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_Tcp_UL_SoAdTpRxIndication_Call_On_CloseConnection</srcid><srcstatus/><internalId>1701</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00511.ServiceId</srcid><srcstatus/><internalId>512</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>137</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00512</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | SoAd_SoConModeType
        Kind | Enumeration
        Range | SOAD_SOCON_ONLINE
        SOAD_SOCON_RECONNECT
        SOAD_SOCON_OFFLINE
        Description | type to specify the state of a SoAd socket connection.
        Available via | SoAd.h
      </description>
      <comment>
        The type is extended with SOAD_SOCON_WAITOFFLINE.
        AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_191_Leave_ONLINE_immediatly_UDP</srcid><srcstatus/><internalId>1615</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_192_Leave_ONLINE_immediatly_TCP</srcid><srcstatus/><internalId>1616</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_193_Call_SoAd_CloseSoCon_CONNECTING_UDP</srcid><srcstatus/><internalId>1617</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_194_Call_SoAd_CloseSoCon_CONNECTING_TCP</srcid><srcstatus/><internalId>1618</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_195_Transition_WAITOFFLINE_CLOSED_TCP</srcid><srcstatus/><internalId>1619</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_196_Transition_WAITOFFLINE_CLOSED_UDP</srcid><srcstatus/><internalId>1620</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_197_No_redundant_TcpIp_Close_TCP</srcid><srcstatus/><internalId>1621</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_198_Tcp_FLAG_CLOSE_SOCON_in_ONLINE</srcid><srcstatus/><internalId>1622</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_199_Udp_FLAG_CLOSE_SOCON_in_ONLINE</srcid><srcstatus/><internalId>1623</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_471</srcid><srcstatus/><internalId>771</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>138</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00513</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | &lt;Up&gt;_LocalIpAddrAssignmentChg
        Syntax
        void &lt;Up&gt;_LocalIpAddrAssignmentChg (SoAd_SoConIdType SoConId, TcpIp_IpAddrStateType State)
        Sync/Async | Synchronous
        Reentrancy | Reentrant for different SoConIds. Non reentrant for the same SoConId.
        Parameters (in) | SoConId | socket connection index specifying the socket connection where the
        IP address assigment has changed
        State | state of IP address assignment
        Parameters (inout) | None
        Parameters (out) | None
        Return value | None
        Description | This function gets called by the SoAd if an IP address assignment related to a
        socket connection changes (i.e. new address assigned or assigned address becomes invalid)
        Available via | &lt;none&gt;
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_08_MultipleUL_Func</srcid><srcstatus/><internalId>1228</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00538</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>139</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00514</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | &lt;Up&gt;_SoConModeChg
        Syntax
        void &lt;Up&gt;_SoConModeChg (SoAd_SoConIdType SoConId, SoAd_SoConModeType Mode)
        Sync/Async | Synchronous
        Reentrancy | Reentrant for different SoConIds. Non reentrant for the same SoConId.
        Parameters (in) | SoConId | socket connection index specifying the socket connection with the
        mode change.
        Mode | new socket connection mode
        Parameters (inout) | None
        Parameters (out) | None
        Return value | None
        Description | Notification about a SoAd socket connection state change, e.g. socket connection
        gets online
        Available via | &lt;none&gt;
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_08_MultipleUL_Func</srcid><srcstatus/><internalId>1228</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00538</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>140</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00515</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_SetRemoteAddr
        Syntax
        Std_ReturnType SoAd_SetRemoteAddr (SoAd_SoConIdType SoConId, const TcpIp_SockAddrType*
        RemoteAddrPtr)
        Service ID [hex] | 0x10
        Sync/Async | Synchronous
        Reentrancy | Reentrant for different SoConIds. Non reentrant for the same SoConId.
        Parameters (in) | SoConId | socket connection index specifying the socket connection for which
        the remote address shall be set
        RemoteAddrPtr | Struct containint the IP address and port to be set.
        Parameters (inout) | None
        Parameters (out) | None
        Return value | Std_ReturnType | E_OK: The request has been accepted E_NOT_OK: The request has
        not been accepted
        Description | By this API service the remote address (IP address and port) of the specified
        socket connection shall be set.
        Available via | SoAd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_ComTest_02_MultipleGenUL</srcid><srcstatus/><internalId>1214</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00515.ServiceId</srcid><srcstatus/><internalId>522</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>141</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00516</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_EnableRouting
        Syntax
        Std_ReturnType SoAd_EnableRouting (SoAd_RoutingGroupIdType id)
        Service ID [hex] | 0x0E
        Sync/Async | Synchronous
        Reentrancy | Reentrant
        Parameters (in) | id | routing group identifier specifying the routing group to be enabled
        Parameters (inout) | None
        Parameters (out) | None
        Return value | Std_ReturnType | Result of operationE_OK The request was successfulE_NOT_OK The
        request was not successful.
        Description | Enables routing of a group of PDUs in the SoAd related to the RoutingGroup
        specified by parameter id. Routing of PDUs can be either forwarding of PDUs from the upper
        layer to a TCP or UDP socket of the TCP/IP stack specified by a PduRoute or the other way
        around specified by a SocketRoute.
        Available via | SoAd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_ComTest_02_MultipleGenUL</srcid><srcstatus/><internalId>1214</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00516.ServiceId</srcid><srcstatus/><internalId>518</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>142</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00517</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_DisableRouting
        Syntax
        Std_ReturnType SoAd_DisableRouting (SoAd_RoutingGroupIdType id)
        Service ID [hex] | 0x0F
        Sync/Async | Synchronous
        Reentrancy | Reentrant
        Parameters (in) | id | routing group identifier specifying the routing group to be disabled
        Parameters (inout) | None
        Parameters (out) | None
        Return value | Std_ReturnType | Result of operationE_OK The request was successfulE_NOT_OK The
        request was not successful.
        Description | Disables routing of a group of PDUs in the SoAd related to the RoutingGroup
        specified by parameter id. Routing of PDUs can be either forwarding of PDUs from the upper
        layer to a TCP or UDP socket of the TCP/IP stack specified by a PduRoute or the other way
        around specified by a SocketRoute.
        Available via | SoAd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_ComTest_02_MultipleGenUL</srcid><srcstatus/><internalId>1214</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00517.ServiceId</srcid><srcstatus/><internalId>520</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>143</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00518</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | SoAd_SoConIdType
        Kind | Type
        Derived from | Basetype | Variation
        uint16
        uint8
        Range | 0..&lt;SoAdSoConMax&gt; | 0..&lt;SoAdSoConMax&gt; | Zero-based integer number
        Description | SoCon identifier type for unique identification of a SoAd socket connection. The
        size of this type depends on the maximum number of socket connections which is specified by
        configuration parameter SoAdSoConMax.
        Available via | SoAd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_07_GeneratorCheck_0</srcid><srcstatus/><internalId>1219</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.ConfigMaxValues</srcid><srcstatus/><internalId>758</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>144</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00519</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | SoAd_RoutingGroupIdType
        Kind | Type
        Derived from | Basetype | Variation
        uint16
        uint8
        Range | 0..&lt;SoAdRoutingGroupMax&gt; | 0..&lt;SoAdRoutingGroupMax&gt; | Zero-based integer number
        Description | RoutingGroup identifier type for unique identification of a SoAd routing group.
        The size of this type depends on the maximum number of routing groups which is specified by
        configuration parameter SoAdRoutingGroupMax.
        Available via | SoAd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.ConfigMaxValues</srcid><srcstatus/><internalId>758</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_07_GeneratorCheck_0</srcid><srcstatus/><internalId>1219</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>145</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00520</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_RequestIpAddrAssignment
        Syntax
        Std_ReturnType SoAd_RequestIpAddrAssignment (SoAd_SoConIdType SoConId,
        TcpIp_IpAddrAssignmentType Type, const TcpIp_SockAddrType* LocalIpAddrPtr, uint8 Netmask, const
        TcpIp_SockAddrType* DefaultRouterPtr)
        Service ID [hex] | 0x0A
        Sync/Async | Asynchronous
        Reentrancy | Reentrant for different SoConIds. Non reentrant for the same SoConId.
        Parameters (in) | SoConId | Socket connection index specifying the socket connection for which
        the IP address shall be set
        Type | Type of IP address assignment which shall be initiated.
        LocalIpAddrPtr | Pointer to structure containing the IP address which shall be assigned to the
        EthIf controller indirectly specified via SoConId. Note: This parameter is only used in case
        the parameter Type is set to TCPIP_IPADDR_ASSIGNMENT_STATIC, can be set to NULL_PTR otherwise.
        Netmask | Network mask of IPv4 address or address prefix of IPv6 address in CIDR Notation. Note:
        This parameter is only used in case the parameter Type is set to TCPIP_IPADDR_ASSIGNMENT_STATIC.
        DefaultRouterPtr | Pointer to structure containing the IP address of the default router (
        gateway) which shall be assigned. Note: This parameter is only used in case the parameter Type
        is set to TCPIP_IPADDR_ASSIGNMENT_STATIC, can be set to NULL_PTR otherwise.
        Parameters (inout) | None
        Parameters (out) | None
        Return value | Std_ReturnType | E_OK: The request has been accepted E_NOT_OK: The request has
        not been accepted
        Description | By this API service the local IP address assignment which shall be used for the
        socket connection specified by SoConId is initiated.
        Available via | SoAd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_ComTest_02_MultipleGenUL</srcid><srcstatus/><internalId>1214</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.RequestIpAddrAssignment_Syntax</srcid><srcstatus/><internalId>754</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00520.ServiceId</srcid><srcstatus/><internalId>513</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>146</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00521</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_TpCancelReceive
        Syntax
        Std_ReturnType SoAd_TpCancelReceive (PduIdType RxPduId)
        Service ID [hex] | 0x4c
        Sync/Async | Synchronous
        Reentrancy | Non Reentrant
        Parameters (in) | RxPduId | Identification of the PDU to be cancelled.
        Parameters (inout) | None
        Parameters (out) | None
        Return value | Std_ReturnType | E_OK: Cancellation was executed successfully by the destination
        module.E_NOT_OK: Cancellation was rejected by the destination module.
        Description | Requests cancellation of an ongoing reception of a PDU in a lower layer transport
        protocol module.
        Available via | SoAd.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_ComTest_02_MultipleGenUL</srcid><srcstatus/><internalId>1214</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00521.ServiceId</srcid><srcstatus/><internalId>509</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.ServiceID</srcid><srcstatus/><internalId>776</internalId></linkedfrom><linkedfrom><srcid>dev.SoAd.ParameterNames</srcid><srcstatus/><internalId>777</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>147</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00522</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_TpCancelTransmit
        Syntax
        Std_ReturnType SoAd_TpCancelTransmit (PduIdType TxPduId)
        Service ID [hex] | 0x54
        Sync/Async | Synchronous
        Reentrancy | Reentrant for different PduIds. Non reentrant for the same PduId.
        Parameters (in) | TxPduId | Identification of the PDU to be cancelled.
        Parameters (inout) | None
        Parameters (out) | None
        Return value | Std_ReturnType | E_OK: Cancellation was executed successfully by the destination
        module.E_NOT_OK: Cancellation was rejected by the destination module.
        Description | Requests cancellation of an ongoing transmission of a PDU in a lower layer
        communication module.
        Available via | SoAd.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_ComTest_02_MultipleGenUL</srcid><srcstatus/><internalId>1214</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00522.ServiceId</srcid><srcstatus/><internalId>508</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.ServiceID</srcid><srcstatus/><internalId>776</internalId></linkedfrom><linkedfrom><srcid>dev.SoAd.ParameterNames</srcid><srcstatus/><internalId>777</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>148</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00523</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_CopyTxData
        Syntax
        BufReq_ReturnType SoAd_CopyTxData (TcpIp_SocketIdType SocketId, uint8* BufPtr, uint16 BufLength)
        Service ID [hex] | 0x13
        Sync/Async | Synchronous
        Reentrancy | Reentrant for different SocketIds. Non reentrant for the same SocketId.
        Parameters (in) | SocketId | Socket identifier of the related local socket resource.
        BufLength | Length of provided data buffer.
        Parameters (inout) | None
        Parameters (out) | BufPtr | Pointer to buffer for transmission data.
        Return value | BufReq_ReturnType | BUFREQ_OK: Data has been copied to the transmit buffer
        completely as requested. BUFREQ_E_NOT_OK: Data has not been copied. Request failed. (No further
        action for TcpIp required. Later the upper layer might either close the socket or retry the
        transmit request)
        Description | This service requests to copy data for transmission to the buffer indicated. This
        call is triggered by TcpIp_Transmit(). Note: The call to &lt;Up&gt;_CopyTxData() may happen in the
        context of TcpIp_Transmit(
        Available via | SoAd.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_ComTest_02_MultipleGenUL</srcid><srcstatus/><internalId>1214</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00523.ServiceId</srcid><srcstatus/><internalId>534</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>149</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00524</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If SoAdSocketMsgAcceptanceFilterEnabled is TRUE, SoAd shall only accept TCP connections or UDP
        datagrams from remote nodes with a source address that matches the remote address specified in
        the socket connection (either via configuration parameters SoAdSocketRemoteIpAddress and
        SoAdSocketRemotePort or set online with SoAd_SetRemoteAddr() API)
      </description>
      <comment>
        Note: If SoAdSocketMsgAcceptanceFilterEnabled is TRUE and the remote address
        is not specified by the configuration or not yet set via SoAd_SetRemoteAddr() no
        message is accepted via the socket connection.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_31_UdpTp_RxInd_DisblRoutGroup_Header</srcid><srcstatus/><internalId>1437</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>150</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00525</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        A remote address matches if both IP address and port match. The IP addresses match if they are
        identical or if the specified IP address is set to TCPIP_IPADDR_ANY (TCPIP_IP6ADDR_ANY). The
        port matches if they are identical or if the specified port is set to TCPIP_PORT_ANY.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00680</srcid><srcstatus/><internalId>282</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>151</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00527</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd shall reset the remote address to the configured remote address (or unset the remote
        address in case no remote address has been configured) within SoAd_MainFunction() when a socket
        connection is closed.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_33_UdpAlive_Supervision</srcid><srcstatus/><internalId>1441</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>152</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00528</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: In case SoAd_OpenSoCon() is called for a socket
        connection with configuration parameter SoAdSocketAutomaticSoConSetup set to "TRUE" the
        development error SOAD_E_INV_ARG shall be raised.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_OpenSoCon_NotManually</srcid><srcstatus/><internalId>1326</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>153</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00529</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: In case SoAd_CloseSoCon() is called for a socket
        connection with configuration parameter SoAdSocketAutomaticSoConSetup set to "TRUE" the
        development error SOAD_E_INV_ARG shall be raised.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_CloseSoCon_NotManually</srcid><srcstatus/><internalId>1327</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>154</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00531</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled and SoConId refers to a socket connection with
        configuration parameter SoAdSocketAutomaticSoConSetup set to TRUE, the function
        SoAd_SetRemoteAddr() shall raise the development error SOAD_E_INV_ARG.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_SetRemoteAddr_InvalidSoConId</srcid><srcstatus/><internalId>1320</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_00_SetRemoteAddr_AutomaticSoConSetup</srcid><srcstatus/><internalId>1322</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>155</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00532</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        The function SoAd_SetRemoteAddr() shall only proceed if SoConId refers to a socket connection
        which is not currently locked by the SoAd. If it is locked, the request shall be rejected and
        E_NOT_OK shall be returned.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00532.1</srcid><srcstatus/><internalId>523</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00532.2</srcid><srcstatus/><internalId>524</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>156</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00533</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        The function SoAd_SetRemoteAddr() shall set the remote address of the socket connection
        referred by parameter SoConId according to the IP address and port specified by parameter
        RemoteAddrPtr.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con9_SetRemoteAddr_Offline</srcid><srcstatus/><internalId>1368</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con3_SetRemoteAddr_Offline</srcid><srcstatus/><internalId>1375</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con3_SetRemoteAddr_Online</srcid><srcstatus/><internalId>1377</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con7_SetRemoteAddr_Offline</srcid><srcstatus/><internalId>1381</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con7_SetRemoteAddr_Online</srcid><srcstatus/><internalId>1384</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_71_AssignRemoteAddr_IPv6</srcid><srcstatus/><internalId>1481</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>157</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00536</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_ReleaseIpAddrAssignment
        Syntax
        Std_ReturnType SoAd_ReleaseIpAddrAssignment (SoAd_SoConIdType SoConId)
        Service ID [hex] | 0x0B
        Sync/Async | Asynchronous
        Reentrancy | Reentrant
        Parameters (in) | SoConId | socket connection index specifying the socket connection for which
        the IP address shall be released
        Parameters (inout) | None
        Parameters (out) | None
        Return value | Std_ReturnType | E_OK: The request has been accepted E_NOT_OK: The request has
        not been accepted
        Description | By this API service the local IP address assignment used for the socket
        connection specified by SoConId is released.
        Available via | SoAd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_ComTest_02_MultipleGenUL</srcid><srcstatus/><internalId>1214</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00536.ServiceId</srcid><srcstatus/><internalId>514</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>158</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00538</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        For each configurable interface SoAd shall determine the function name by replacing the tag &lt;Up&gt;
        with the module name abbreviation of the related upper layer module (as specified in the
        SoAdBSWModules container using the SoAdBswModuleRef reference parameter) and using the two
        infix according to the configuration parameters SoAdUseCallerInfix and SoAdUseTypeInfix.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00106</srcid><srcstatus/><internalId>51</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00107</srcid><srcstatus/><internalId>52</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00137</srcid><srcstatus/><internalId>55</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00138</srcid><srcstatus/><internalId>56</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00139</srcid><srcstatus/><internalId>57</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00180</srcid><srcstatus/><internalId>60</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00181</srcid><srcstatus/><internalId>61</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00513</srcid><srcstatus/><internalId>139</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00514</srcid><srcstatus/><internalId>140</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00663</srcid><srcstatus/><internalId>269</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>159</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00539</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        For the transmission of a PDU requested by an upper layer using the IF-API, the SoAd shall
        Identify the related socket connection and PDU route by using the TxPduId provided at
        SoAd_IfTransmit(
        Call the related TcpIp transmit function depending on the connection type if the PDU length &gt; 0
        or SoAdPduHeaderEnable is TRUE, otherwise SoAd shall Skip further processing and return with
        E_NOT_OK.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00539.1</srcid><srcstatus/><internalId>440</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00539.2</srcid><srcstatus/><internalId>441</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>160</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00540</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In case of a UDP socket connection the SoAd shall (if not specified otherwise) call
        TcpIp_UdpTransmit() with SocketId and remote address specified in the SocketConnection and the
        PDU length specified in the SoAd_IfTransmit()call as TotalLength.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Ts_SoAd_IfTransmit_PduR_Udp</srcid><srcstatus/><internalId>1244</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_IfTransmit_PduR_Udp_NoHeader</srcid><srcstatus/><internalId>1246</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_IfTransmit_PduR_Udp_NoHeader_IPv6</srcid><srcstatus/><internalId>1247</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>161</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00542</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In case of a TCP socket connection the SoAd shall call TcpIp_TcpTransmit() with SocketId
        specified in the SocketConnection, the PDU length specified in the SoAd_IfTransmit() call, as
        AvailableLength and ForceRetrieve set to TRUE.
      </description>
      <comment>
        Note: SoAdSrcPduId identifies a SoAdPduRoute in the SoAd configuration which
        contains one or more SoAdPduRouteDest container which references to a
        SoAdSocketConnection
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Ts_SoAd_IfTransmit_PduR_Tcp_Client_MultipleCopyTxData</srcid><srcstatus/><internalId>1239</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_IfTransmit_PduR_Tcp_Client_NoHeader</srcid><srcstatus/><internalId>1240</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>162</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00543</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        The TcpIp module will retrieve the PDU data within the context of the TcpIp transmit call by
        using SoAd_CopyTxData() where the SoAd shall copy (the requested part of) the PDU to the memory
        specified by parameter BufPtr.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Ts_SoAd_IfTransmit_PduR_Tcp_Client_MultipleCopyTxData</srcid><srcstatus/><internalId>1239</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00543_UDP_IF_Tx_nPDU_IPFrag</srcid><srcstatus/><internalId>442</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00543_UDP_IF_Tx_LastIsBest_IPFrag</srcid><srcstatus/><internalId>443</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00543_UDP_IF_Tx_IPFrag</srcid><srcstatus/><internalId>444</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>163</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00544</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In case of a UDP socket connection the SoAd shall call the upper layer with the configured
        transmit confirmation function (&lt;Up&gt;_[SoAd][If]TxConfirmation&gt;()) with result set to E_OK
        within the next SoAd_MainFunction() after the latest TcpIp_UdpTransmit() call returning
        successfully.
      </description>
      <furtherinfo>WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.</furtherinfo>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Ts_SoAd_IfTransmit_PduR_Udp</srcid><srcstatus/><internalId>1244</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_IfTransmit_PduR_Udp_NoHeader</srcid><srcstatus/><internalId>1246</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_09_UdpOneTxFailsForSoConGroup</srcid><srcstatus/><internalId>1749</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_13_01_IfRoutingGroupTransmit_SinglePduRouteDest</srcid><srcstatus/><internalId>1839</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_13_01_IfRoutingGroupTransmit_MultiplePduRouteDest</srcid><srcstatus/><internalId>1840</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_nPduUdpTx_TRIGGER_ALWAYS_PDU</srcid><srcstatus/><internalId>1845</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_nPduUdpTx_TRIGGER_NEVER_PDU_TIMEOUT</srcid><srcstatus/><internalId>1846</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_nPduUdpTx_TRIGGER_NEVER_PDU_BUFFER_OVERFLOW</srcid><srcstatus/><internalId>1847</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_nPduUdpTx_TRIGGER_ALWAYS_PDU_BUFFER_OVERFLOW</srcid><srcstatus/><internalId>1848</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_nPduUdpTx_NEVER_ALWAYS_PDU</srcid><srcstatus/><internalId>1851</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_nPduUdpTx_TRIGGER_NEVER_PDU_CAPACITY_OVERFLOW</srcid><srcstatus/><internalId>1852</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>164</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00545</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In case of a TCP socket connection the SoAd shall call the upper layer with the configured
        transmit confirmation function (&lt;Up&gt;_[SoAd][If]TxConfirmation&gt;()) with result set to E_OK
        within the SoAd_TxConfirmation() callback function after all PDU data (from one or multiple
        transmit requests) have been confirmed for transmission.
      </description>
      <comment>
        Note: there is only a single confirmation even in case of multiple transmit requests for
        the same PDU, i.e. in case a further transmit is requested for the same PDU on a
        TCP socket connection before the last request is completed, there is no separate
        confirmation for the last request, but only a final confirmation for all PDU data.
        7.2.2 PDU Transmission via IF-API and nPduUdpTxBuffer
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Ts_SoAd_IfTransmit_PduR_Tcp_Client</srcid><srcstatus/><internalId>1237</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_IfTransmit_PduR_Tcp_Client_MultipleCopyTxData</srcid><srcstatus/><internalId>1239</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_IfTransmit_PduR_Tcp_Client_NoHeader</srcid><srcstatus/><internalId>1240</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_IfTransmit_PduR_Tcp_Server</srcid><srcstatus/><internalId>1242</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_66_Tcp_Transmit_Wildcard</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_13_01_IfRoutingGroupTransmit_MultiplePduRouteDest</srcid><srcstatus/><internalId>1840</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>165</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00546</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In case SoAdTxUdpTriggerMode is set to TRIGGER_NEVER for any PDU route (SoAdPduRouteDest)
        related to a socket connection and all upper layers belonging to the related socket connection
        have SoAdTxUpperLayerType set to "IF", SoAd shall use the nPdu feature for this socket
        connection.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_nPduUdpTx_TRIGGER_ALWAYS_PDU</srcid><srcstatus/><internalId>1845</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_nPduUdpTx_NEVER_ALWAYS_PDU</srcid><srcstatus/><internalId>1851</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>166</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00547</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In case the nPdu feature is used for a socket connection and TriggerMode is set to
        TRIGGER_NEVER for the actual PDU (SoAdPduRouteDest), SoAd shall store the PDU for the socket
        connection (instead of calling TcpIp_UdpTransmit(
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_60_nPduUdpTx_StopSpecificTimer</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_nPduUdpTx_TRIGGER_ALWAYS_PDU</srcid><srcstatus/><internalId>1845</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_nPduUdpTx_TRIGGER_NEVER_PDU_TIMEOUT</srcid><srcstatus/><internalId>1846</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_nPduUdpTx_TRIGGER_NEVER_PDU_BUFFER_OVERFLOW</srcid><srcstatus/><internalId>1847</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_nPduUdpTx_TRIGGER_ALWAYS_PDU_BUFFER_OVERFLOW</srcid><srcstatus/><internalId>1848</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_nPduUdpTx_NEVER_ALWAYS_PDU</srcid><srcstatus/><internalId>1851</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_nPduUdpTx_TRIGGER_NEVER_PDU_CAPACITY_OVERFLOW</srcid><srcstatus/><internalId>1852</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00547_RefToSoConGroup</srcid><srcstatus/><internalId>445</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00599</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00505</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>167</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00548</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In case the nPdu feature is used for a socket connection and TriggerMode is set to
        TRIGGER_ALWAYS for the current PDU (SoAdPduRouteDest) and the resulting PDU data and headers
        don't exceed SoAdSocketnPduUdpTxBufferMin, SoAd shall transmit all PDUs stored for the socket
        connection (if any) and the current PDU by calling TcpIp_UdpTransmit(
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_60_nPduUdpTx_StopSpecificTimer</srcid><srcstatus/><internalId>1471</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_nPduUdpTx_TRIGGER_ALWAYS_PDU</srcid><srcstatus/><internalId>1845</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_nPduUdpTx_NEVER_ALWAYS_PDU</srcid><srcstatus/><internalId>1851</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00599</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00505</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>168</internalId></specobject>
      <specobject>
         <id>SoAd.SWS_SoAd_00685</id>
         <status>approved</status>
         <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
         <version>1</version>
         <description>
            In case the nPdu feature is used for a socket connection and
            TriggerMode is set to TRIGGER_ALWAYS for the current PDU (SoAdPduRouteDest)
            and the resulting PDU data and headers would exceed
            SoAdSocketnPduUdpTxBufferMin, SoAd shall first transmit all PDUs stored for the
            socket connection (if any) by calling TcpIp_UdpTransmit() and then the current
            PDU by calling TcpIp_UdpTransmit() once more.
      </description>
         <comment/>
         <releases>
            <release>AUTOSAR R20-11</release>
            <release>AUTOSAR 4.2.2</release>
         </releases>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_nPduUdpTx_TRIGGER_ALWAYS_PDU_BUFFER_OVERFLOW</srcid><srcstatus/><internalId>1848</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>169</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00549</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In case the nPdu feature is used for a socket connection and TriggerMode is set to
        TRIGGER_NEVER for the current PDU (SoAdPduRouteDest) and the resulting PDU data and headers
        would exceed SoAdSocketnPduUdpTxBufferMin, SoAd shall first transmit all PDUs stored for the
        socket connection by calling TcpIp_UdpTransmit() and then store the PDU for the socket
        connection.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_nPduUdpTx_TRIGGER_NEVER_PDU_BUFFER_OVERFLOW</srcid><srcstatus/><internalId>1847</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_nPduUdpTx_TRIGGER_NEVER_PDU_CAPACITY_OVERFLOW</srcid><srcstatus/><internalId>1852</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>170</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00550</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Within SoAd_MainFunction() SoAd shall transmit all PDUs stored for a socket connection (if any)
        by calling TcpIp_UdpTransmit() if the nPdu specific timer expired.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_nPduUdpTx_TRIGGER_NEVER_PDU_TIMEOUT</srcid><srcstatus/><internalId>1846</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_nPduUdpTx_TRIGGER_NEVER_PDU_BUFFER_OVERFLOW</srcid><srcstatus/><internalId>1847</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_nPduUdpTx_TRIGGER_NEVER_PDU_CAPACITY_OVERFLOW</srcid><srcstatus/><internalId>1852</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>171</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00551</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        For the transmission of a PDU requested by an upper layer using the TP-API, the SoAd shall
        Skip further processing and return with E_NOT_OK if the PDU length is 0.
        Identify the related socket connection and PDU route by using the TxPduId provided at
        SoAd_TpTransmit(
        Store the TP transmission request for further processing in the SoAd_MainFunction(
      </description>
      <comment>
        Note: SoAdSrcPduId identifies a SoAdPduRoute in the SoAd configuration which
        contains one or more SoAdPduRouteDest container which references to a
        SoAdSocketConnection
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00551.1</srcid><srcstatus/><internalId>449</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00551.2</srcid><srcstatus/><internalId>450</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00551.3</srcid><srcstatus/><internalId>451</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>172</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00552</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In the SoAd_MainFunction() the SoAd shall check for pending TP transmission requests and
        process a pending request as specified below:
        Query the available amount of data at the upper layer by calling the configurable callback
        function &lt;Up&gt;_[SoAd][Tp]CopyTxData() with PduInfoType.SduLength = 0.
        Depending on the connection type: retrieve data and call the related TcpIp transmit function.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00552.1</srcid><srcstatus/><internalId>452</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00552.2</srcid><srcstatus/><internalId>453</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>173</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00553</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In case of a UDP socket connection the SoAd shall
        retrieve all available data from the upper layer to a SoAd TP transmit buffer via the
        configurable callback function &lt;Up&gt;_[SoAd][Tp]CopyTxData() with PduInfoType.SduLength set to
        the value returned by availableDataPtr of the previous call and
        call TcpIp_UdpTransmit() with SocketId and remote address specified in the SocketConnection and
        the PDU length specified in the SoAd_TpTransmit() call as TotalLength after all data have been
        successfully retrieved within one or multiple SoAd main function execution cycles.
      </description>
      <comment>
        Note: The required TP buffer size for a socket connection can be derived from the
        length of the related TP PDU(s).
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00553.1</srcid><srcstatus/><internalId>454</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00553.2</srcid><srcstatus/><internalId>455</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>174</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00554</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In case of a TCP socket connection the SoAd shall call TcpIp_TcpTransmit() with SocketId
        specified in the SocketConnection, the PDU length set to the value returned by availableDataPtr
        of the previous call to &lt;Up&gt;_[SoAd][Tp]CopyTxData() as AvailableLength and ForceRetrieve set to
        FALSE.
      </description>
      <comment>
        Note: The TcpIp module will retrieve PDU data from SoAd within the context of the TcpIp
        transmit call by using SoAd_CopyTxData().
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_05_Tcp_Con12_Tp_Transmit_NoHeader</srcid><srcstatus/><internalId>1706</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_05_Tcp_Con13_Tp_Transmit_WithHeader</srcid><srcstatus/><internalId>1710</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>175</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00555</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In case of a UDP socket connection the SoAd shall copy (the requested part of) the PDU from the
        SoAd TP transmit buffer to the memory specified by parameter BufPtr within SoAd_CopyTxData(
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_05_Udp_Con10_Tp_Transmit_NoHeader</srcid><srcstatus/><internalId>1702</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_05_Udp_Con11_Tp_Transmit_WithHeader</srcid><srcstatus/><internalId>1703</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_05_Udp_Con10_Tp_Transmit_Segmented_NoHeader</srcid><srcstatus/><internalId>1704</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_05_Udp_Con11_Tp_Transmit_Segmented_WithHeader</srcid><srcstatus/><internalId>1705</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>176</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00556</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In case of a TCP socket connection the SoAd shall forward the request to the related upper
        layer by calling &lt;Up&gt;_[SoAd][Tp]CopyTxData() to copy (the requested part of) the PDU to the
        memory specified by parameter BufPtr within SoAd_CopyTxData(
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_05_Tcp_Con12_Tp_Transmit_NoHeader</srcid><srcstatus/><internalId>1706</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_05_Tcp_Con13_Tp_Transmit_WithHeader</srcid><srcstatus/><internalId>1710</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>177</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00557</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In case of a UDP socket connection the SoAd shall call the upper layer with the configured
        transmit confirmation function (&lt;Up&gt;_[SoAd][Tp]TxConfirmation&gt;()) and E_OK as result within the
        SoAd_MainFunction() after TcpIp_UdpTransmit() returns with TCPIP_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_49_Tp_UdpRetry_UdpTxFails</srcid><srcstatus/><internalId>1459</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_05_Udp_Con10_Tp_Transmit_NoHeader</srcid><srcstatus/><internalId>1702</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_05_Udp_Con11_Tp_Transmit_WithHeader</srcid><srcstatus/><internalId>1703</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_05_Udp_Con11_Tp_Transmit_Segmented_WithHeader</srcid><srcstatus/><internalId>1705</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>178</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00558</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In case of a TCP socket connection configured with SoAdSocketTcpImmediateTpTxConfirmation set
        to FALSE the SoAd shall call the upper layer with the configured transmit confirmation function
        Up&gt;_[SoAd][Tp]TxConfirmation&gt;()) and E_OK as result within the SoAd_TxConfirmation() callback
        function after all TP PDU data have been confirmed for transmission.
      </description>
      <comment>
        Note: SoAd_TpTransmit() for a new TP session with the same PDU can be called
        within Up_[SoAd][Tp]TxConfirmation().
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_68_TxConfirmation_FragmentedConf</srcid><srcstatus/><internalId>1478</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_05_Tcp_Con12_Tp_Transmit_NoHeader</srcid><srcstatus/><internalId>1706</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_05_Tcp_Con13_Tp_Transmit_WithHeader</srcid><srcstatus/><internalId>1710</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>179</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00559</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In case PDU header option is enabled (SoAdPduHeaderEnable is TRUE) for a socket connection,
        SoAd shall convert the message into a PDU within SoAd_RxIndication() according to the following:
        assemble the PDU Header into a SoAd receive buffer if it is fragmented in multiple TCP segments
        extract the PDU Header from the received message
        select the related socket route according to the received PDU Header ID (SoAdRxPduHeaderId); if
        no socket route can be found, simply discard the PDU and raise the runtime error
        SOAD_E_INV_PDUHEADER_ID.
        use the length field of the PDU Header to identify the length of the actual PDU and the start
        of the next PDU to proceed with (2) until the end of the message is reached. If the remainder
        is smaller than a PDU Header or the indicated length within the header SoAd shall stop
        processing and ignore the rest of the message.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00559.1</srcid><srcstatus/><internalId>463</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00559.2</srcid><srcstatus/><internalId>464</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00559.3</srcid><srcstatus/><internalId>465</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00559.4</srcid><srcstatus/><internalId>466</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>180</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00560</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If SoAd_IfTransmit() is called with TxPduId specifying a SoAdPduRouteDest which belongs only to
        inactive RoutingGroups, SoAd shall always skip the transmission for this SoAdPduRouteDest and
        shall consider the transmission as successful unless all SoAdPduRouteDest of a SoAdPduRoute
        belong only to inactive RoutingGroups. In the latter case SoAd shall return E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_97_nPdu_DisblRoutGroup</srcid><srcstatus/><internalId>1506</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_13_00_RoutingGroup_EnabledAtInit_Tx</srcid><srcstatus/><internalId>1820</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.ParameterNames</srcid><srcstatus/><internalId>777</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>181</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00561</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If SoAd_TpTransmit() is called with TxPduId specifying a SoAdPduRouteDest which belongs only to
        inactive RoutingGroups, SoAd shall always skip the transmission for this SoAdPduRouteDest and
        shall consider the transmission as successful unless all SoAdPduRouteDest of a SoAdPduRoute
        belong only to inactive RoutingGroups. In the latter case SoAd shall return E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.FanOut.TP</srcid><srcstatus/><internalId>760</internalId></linkedfrom><linkedfrom><srcid>dev.SoAd.ParameterNames</srcid><srcstatus/><internalId>777</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>182</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00562</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        For the reception of a message from an UDP or TCP socket and forwarding of the received data as
        PDU to the related upper layer the SoAd shall
        Identify the related socket connection and socket routes by using the SocketId provided at
        SoAd_RxIndication(
        Filter messages according to the message acceptance policy
        Convert the message into a PDU
        Skip further processing if PDU length is 0 and (SoAdPduHeaderEnable is FALSE or
        SoAdRxUpperLayerType is TP)
        Call the upper layer type related reception functions of the configured upper layer module
        depending on the SoAdRxUpperLayerType specified in SocketRouteDest configuration
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00562.1</srcid><srcstatus/><internalId>456</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00562.2</srcid><srcstatus/><internalId>457</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00562.3</srcid><srcstatus/><internalId>458</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00562.4_TP</srcid><srcstatus/><internalId>459</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00562.4_IF_Header</srcid><srcstatus/><internalId>460</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00562.4_IF_NoHeader</srcid><srcstatus/><internalId>461</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00562.5</srcid><srcstatus/><internalId>462</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>183</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00563</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In case PDU header option is disabled (SoAdPduHeaderEnable is FALSE) for a socket connection,
        SoAd shall convert the received UDP or TCP message 1:1 into a PDU within SoAd_RxIndication(), i.
        e. each TCP segment and UDP message forms a separate PDU.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_418</srcid><srcstatus/><internalId>767</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Client_NoHeader</srcid><srcstatus/><internalId>1870</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Udp_NoHeader</srcid><srcstatus/><internalId>1881</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>184</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00564</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In case of a TCP socket connection the SoAd shall confirm the reception of all data either
        forwarded to the upper layer or finally handled by SoAd (e.g. discarded data or processed PDU
        Header) by calling TcpIp_TcpReceived() within SoAd_RxIndication() or SoAd_MainFunction()
        respectively.
      </description>
      <furtherinfo>WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.</furtherinfo>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_04_Tcp_Con13_Tp_RxInd_WithHeader_Seg</srcid><srcstatus/><internalId>1690</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_Tcp_Con13_Tp_RxInd_WithHeader_SegInHeader</srcid><srcstatus/><internalId>1691</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_Udp_Con10_Tp_RepeatedCopyRxData</srcid><srcstatus/><internalId>1699</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_06_CancelRx_Tcp_DiscardData_NoHeader</srcid><srcstatus/><internalId>1727</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_12_HeaderMode_MultiplePdus_Tcp_Buffered</srcid><srcstatus/><internalId>1762</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_12_HeaderMode_MultiplePdus_IF_TP_Tcp_Buffered_Segmented</srcid><srcstatus/><internalId>1763</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_12_HeaderMode_OversizedIfPdu_Tcp_Segmented</srcid><srcstatus/><internalId>1764</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_12_HeaderMode_SegmentedPdu_Tcp_Buffered</srcid><srcstatus/><internalId>1765</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Client</srcid><srcstatus/><internalId>1866</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Client_Split_Header</srcid><srcstatus/><internalId>1867</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Client_Split_Payload</srcid><srcstatus/><internalId>1868</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Client_NoHeader</srcid><srcstatus/><internalId>1870</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Server</srcid><srcstatus/><internalId>1871</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Server_Split_Header</srcid><srcstatus/><internalId>1872</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Server_Split_Payload</srcid><srcstatus/><internalId>1873</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Server_Multi</srcid><srcstatus/><internalId>1874</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Server_Multi_UnknownPduHeaderId_Split</srcid><srcstatus/><internalId>1875</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>185</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00565</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd shall process TP- and IF-PDUs independently and within each type according to the received
        order per socket connection.
      </description>
      <comment>
        Note: an ongoing TP reception on a socket connection blocks further TP receptions
        on the same socket connection, but does not block any reception of IF-PDUs.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_41_Tcp_RxInd_MixIfTpPdu_SegTp</srcid><srcstatus/><internalId>1449</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>186</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00566</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd shall preserve the order of received data when using a SoAd receive buffer
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_12_HeaderMode_MultiplePdus_Udp_Buffered</srcid><srcstatus/><internalId>1761</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_12_HeaderMode_MultiplePdus_Tcp_Buffered</srcid><srcstatus/><internalId>1762</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_12_HeaderMode_MultiplePdus_IF_TP_Tcp_Buffered_Segmented</srcid><srcstatus/><internalId>1763</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_12_HeaderMode_SegmentedPdu_Tcp_Buffered</srcid><srcstatus/><internalId>1765</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Server_Multi</srcid><srcstatus/><internalId>1874</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Udp_Multi</srcid><srcstatus/><internalId>1878</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_WrapAroundRingbuffer_NoHeader</srcid><srcstatus/><internalId>1969</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>187</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00567</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd shall perform the following further actions within the SoAd_RxIndication() function for
        reception of a PDU to an upper layer using the IF-API:
        assemble all data of a fragmented IF-PDU into a SoAd receive buffer if PDU Header is used
        call &lt;Up&gt;_[SoAd][If]RxIndication() of the related upper layer module (with RxPduId set to the
        ID specified by the upper layer module for the PDU referenced by SoAdRxPduRef) for each
        completely received PDU
        dispatch the next IF-PDU (if any) if PDU Header mode is used
      </description>
      <comment>
        Note: IF-PDU fragmentation is only supported for TCP socket connections with PDU
        Header mode enabled as UDP does not guarantee the message order and TCP
        segments are considered as separate PDUs if PDU Header mode is disabled.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00567.1</srcid><srcstatus/><internalId>467</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00567.2</srcid><srcstatus/><internalId>468</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00567.3</srcid><srcstatus/><internalId>469</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>188</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00568</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd shall perform the following further actions within the SoAd_RxIndication() function for
        reception of a PDU from a socket connection with PDU Header mode disabled to an upper layer
        using the TP-API:
        if the SoAd receive buffer does not contain any TP data for this socket connection
        Query the available amount of data at the upper layer by calling the configurable callback
        function &lt;Up&gt;_[SoAd][Tp]CopyRxData() with PduInfoType.SduLength = 0.
        If not all data can be processed (i.e. forwarded to an upper layer or stored in a SoAd receive
        buffer), discard all received data and skip further processing.
        Copy all received data which can be accepted by the upper layer module determined at (a) to the
        upper layer by calling &lt;Up&gt;_[SoAd][Tp]CopyRxData(
        Copy all remaining data (i.e. data which are received but not delivered to the upper layer) to
        a SoAd receive buffer for later processing by SoAd_MainFunction(
        if the SoAd receive buffer already contains TP data for this socket connection and is able to
        store all (newley) received data: copy all received data to the SoAd receive buffer for later
        processing by SoAd_MainFunction
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00568.1a</srcid><srcstatus/><internalId>470</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00568.1b</srcid><srcstatus/><internalId>471</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00568.1c</srcid><srcstatus/><internalId>472</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00568.1d</srcid><srcstatus/><internalId>473</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00568.2</srcid><srcstatus/><internalId>474</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>189</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00569</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In the SoAd_MainFunction() the SoAd shall process as specified below if the SoAd receive buffer
        contains TP data for a socket connection with PDU Header mode disabled:
        Query the available amount of data at the upper layer by calling the configurable callback
        function &lt;Up&gt;_[SoAd][Tp]CopyRxData() with PduInfoType.SduLength = 0.
        Copy all data belonging to this socket connection from the SoAd receive buffer which can be
        accepted by the upper layer module determined at (1) to the upper layer by calling &lt;Up&gt;_[SoAd][
        Tp]CopyRxData
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00569.1</srcid><srcstatus/><internalId>475</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00569.2</srcid><srcstatus/><internalId>476</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>190</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00570</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If &lt;Up&gt;_[SoAd][Tp]StartOfReception()or &lt;Up&gt;_[SoAd][Tp]CopyRxData() return with BUFREQ_E_NOT_OK
        for a socket connection with PDU Header mode disabled, SoAd shall (a) disable further
        transmission or reception for this socket connection (i.e. new transmit requests shall be
        rejected with E_NOT_OK and received messages shall simply be discarded) and (b) close the
        socket connection in the next SoAd_MainFunction(
      </description>
      <comment>
        Note: SoAd will call User_SoAdTpRxIndication with E_NOT_OK in case the socket
        connection is disconnected while an active TP reception.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00570.a</srcid><srcstatus/><internalId>477</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00570.b</srcid><srcstatus/><internalId>478</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>191</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00571</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd shall perform the following further actions within the SoAd_RxIndication() function for
        reception of a PDU from a socket connection with PDU Header mode enabled to an upper layer
        using the TP-API:
        if no TP reception is in progress for the related socket connection
        After reception of a complete PDU Header, call &lt;Up&gt;_[SoAd][Tp]StartOfReception() of the related
        upper layer module with RxPduId set to the ID specified by the upper layer module for the PDU
        referenced by SoAdRxPduRef, set TpSduLength to the length specified in the PDU Header, and set
        PduInfoType.SduDataPtr and PduInfoType.SduLength to provide already received PDU data to the
        upper layer.
        if not all data can be processed (i.e. forwarded to an upper layer or stored in a SoAd receive
        buffer), discard all received data, call &lt;Up&gt;_[SoAd][Tp]RxIndication()with the same RxPduId as
        used at &lt;Up&gt;_[SoAd][Tp]StartOfReception() and result set to E_NOT_OK and skip further
        processing
        call &lt;Up&gt;_[SoAd][Tp]CopyRxData() of the related upper layer module with the same RxPduId as
        used at &lt;Up&gt;_[SoAd][Tp]StartOfReception() and PduInfoType.SduDataPtr pointing to the PDU data
        provided by SoAd_RxIndication() and PduInfoType.SduLength set to minimum of the received PDU
        data and the available receive buffer in the upper layer module specified by bufferSizePtr at &lt;
        Up&gt;_[SoAd][Tp]StartOfReception(
        call &lt;Up&gt;_[SoAd][Tp]RxIndication() if the complete PDU has been forwarded to the upper layer,
        otherwise copy all received data which could not be forwarded to the upper layer to a SoAd
        receive buffer for later processing by SoAd_MainFunction(
        if a TP reception is in progress for the related socket connection and the related SoAd receive
        buffer is able to store all received data: copy all received data to the related SoAd receive
        buffer for later processing by SoAd_MainFunction
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00571.1a</srcid><srcstatus/><internalId>479</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00571.1b</srcid><srcstatus/><internalId>480</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00571.1c</srcid><srcstatus/><internalId>481</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00571.1d</srcid><srcstatus/><internalId>482</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00571.2</srcid><srcstatus/><internalId>483</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>192</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00572</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If &lt;Up&gt;_[SoAd][Tp]StartOfReception() does not return BUFREQ_OK for a socket connection with PDU
        Header mode enabled, SoAd shall simply discard all data of the PDU.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_04_StartofReceptionNotOk</srcid><srcstatus/><internalId>1696</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_11_Udp_Tp_RxInd_NoBuffer_HM_StartRx_NotOk</srcid><srcstatus/><internalId>1757</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>193</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00573</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If &lt;Up&gt;_[SoAd][Tp]CopyRxData() does not return BUFREQ_OK for a socket connection with PDU
        Header mode enabled, SoAd shall terminate the TP receive session, simply discard all data of
        the PDU and call &lt;Up&gt;_[SoAd][Tp]RxIndication() with E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_04_RxUdpRxRingBufferCopyRxDataRejects</srcid><srcstatus/><internalId>1685</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_11_Udp_Tp_RxInd_NoBuffer_HM_CopyRx_Busy</srcid><srcstatus/><internalId>1758</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_11_Udp_Tp_RxInd_NoBuffer_HM_CopyRx_NotOk</srcid><srcstatus/><internalId>1759</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>194</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00574</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In the SoAd_Mainfunction() the SoAd shall process as specified below if a TP reception is in
        progress for a socket connection with PDU Header mode enabled:
        Query the available amount of data at the upper layer by calling the configurable callback
        function &lt;Up&gt;_[SoAd][Tp]CopyRxData() with PduInfoType.SduLength = 0.
        Copy all data belonging to this socket connection from the SoAd receive buffer which can be
        accepted by the upper layer module determined at (1) to the upper layer by calling &lt;Up&gt;_[SoAd][
        Tp]CopyRxData(
        call &lt;Up&gt;_[SoAd][Tp]RxIndication() if the complete PDU has been forwarded to the upper layer
        and dispatch the next TP-PDU (if any)
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00574.1</srcid><srcstatus/><internalId>484</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00574.2</srcid><srcstatus/><internalId>485</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00574.3</srcid><srcstatus/><internalId>486</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>195</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00575</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd shall store a cancellation request when called with SoAd_TpCancelReceive() and
        SoAd_TpCancelTransmit(), but handle the request only in the SoAd_MainFunction() respecting the
        connection loss and recovery policy.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_06_CancelTx_Tcp_PendingRxTx</srcid><srcstatus/><internalId>1738</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_06_CancelTx_Tcp_PendingRxOngoingTx</srcid><srcstatus/><internalId>1739</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>196</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00576</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If SoAd_TpCancelReceive() or SoAd_TpCancelTransmit() is called for a PDU where TP reception or
        TP transmission is not in progress, SoAd shall ignore the request and return E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00576_Receive</srcid><srcstatus/><internalId>497</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00576_Transmit</srcid><srcstatus/><internalId>498</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>197</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00577</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Within SoAd_MainFunction(), SoAd shall close the socket connection for any communication
        cancelation request related to an active TP transmission.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_06_CancelTx_Tcp_PendingRxTx</srcid><srcstatus/><internalId>1738</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_06_CancelTx_Tcp_PendingRxOngoingTx</srcid><srcstatus/><internalId>1739</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>198</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00581</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Within SoAd_MainFunction(), SoAd shall close the socket connection for any communication
        cancelation request related to an active TP reception.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_06_CancelRx_Tcp_PendingRx_NoHeader</srcid><srcstatus/><internalId>1724</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_06_CancelRx_Tcp_PendingRxTx_NoHeader</srcid><srcstatus/><internalId>1725</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_06_CancelRx_Tcp_PendingRxOngoingTx_NoHeader</srcid><srcstatus/><internalId>1726</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_06_CancelRx_Udp_PendingRx_NoHeader</srcid><srcstatus/><internalId>1729</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_06_CancelRx_Udp_PendingRxTx_NoHeader</srcid><srcstatus/><internalId>1730</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_06_CancelRx_Udp_PendingRxOngoingTx_NoHeader</srcid><srcstatus/><internalId>1731</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_06_CancelRx_Tcp_OngoingRxOngoingTx_WithHeader</srcid><srcstatus/><internalId>1735</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>199</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00582</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        For a UDP socket connection of type automatic (i.e. configuration parameter
        SoAdSocketAutomaticSoConSetup set to TRUE) which uses a wildcard in the configured remote
        address (i.e. an ANY-String for IP address or port), SoAd shall (a) change the state of the
        socket connection to SOAD_SOCON_RECONNECT and (b) reset the remote address to the configured
        remote address after a PDU transmission, directly before the related transmit confirmation
        function is called (or would be called if such a function is not configured)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00582.a</srcid><srcstatus/><internalId>493</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00582.b</srcid><srcstatus/><internalId>494</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>200</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00586</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd shall automatically reestablish a socket connection which is in the connection state
        SOAD_SOCON_RECONNECT within SoAd_MainFunction() - independent of the configuration parameter
        SoAdSocketAutomaticSoConSetup, i.e. connection shall be reestablished even if the parameter is
        set to FALSE. Reconnection shall be done by considering configuration parameter
        SoAdSocketTcpInitiate.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Ts_SoAd_IfTransmit_PduR_Tcp_Server_Reconnect</srcid><srcstatus/><internalId>1243</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con10_Reopen</srcid><srcstatus/><internalId>1390</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_Tcp_Con43_Tp_RxInd_WithHeader_Reconnect</srcid><srcstatus/><internalId>1695</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>201</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00587</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd shall return E_NOT_OK for TP-PDU Tx requests received at SoAd_TpTransmit() within
        connection reestablishment.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_90_Transmit_RECONNECT</srcid><srcstatus/><internalId>1499</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>202</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00588</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd shall store a request to open or close a socket connection when called with SoAd_OpenSoCon(
        and SoAd_CloseSoCon() respectively, but handle the request only in the SoAd_MainFunction()
        respecting the connection setup and shutdown policy.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00604</srcid><srcstatus/><internalId>217</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00589.a</srcid><srcstatus/><internalId>390</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_TcpClient_Close_OFFLINE_SoCon</srcid><srcstatus/><internalId>1675</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_472</srcid><srcstatus/><internalId>772</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>203</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00589</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In the SoAd_MainFunction(), SoAd shall try to open each socket connection which fulfills all of
        the following criterias:
        No TcpIp socket is assigned to the socket connection
        Open is either (a) explicitly requested by a previous SoAd_OpenSoCon() call which has not been
        revoked by a following SoAd_CloseSoCon() call or (b) implicitly requested when
        SoAdSocketAutomaticSoConSetup is TRUE
        remote address is set (either specified by configuration or set via the function
        SoAd_SetRemoteAddr(
        local IP address is assigned, i.e. SoAd_LocalIpAddrAssignmentChg() has been called with the
        related LocalAddrId and TCPIP_IPADDR_STATE_ASSIGNED as State.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00589.a</srcid><srcstatus/><internalId>390</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00589.b</srcid><srcstatus/><internalId>391</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_TcpClient_Close_OFFLINE_SoCon</srcid><srcstatus/><internalId>1675</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>204</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00590</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd shall perform the following actions within SoAd_MainFunction() to open either a UDP socket
        connection which is part of a socket connection group containing a single socket connection (i.
        e. there is only one socket connection in the socket connection group configuration container)
        or a TCP socket connection with SoAdSocketTcpInitiate set to TRUE:
        Get an appropriate socket from TcpIp by calling TcpIp_SoAdGetSocket() with the TcpIp_DomainType
        implicitly specified by SoAdSocketLocalAddressRef, and the protocol type specified by
        SoAdSocketProtocol.
        Change the socket specific parameters according to [SWS_SoAd_00689]
        Bind the socket to the local address and port by calling TcpIp_Bind() with the local address
        identifier specified by SoAdSocketLocalAddressRef and local port specified by
        SoAdSocketLocalPort.
        In case of a TCP socket initiate the TCP connection by calling TcpIp_TcpConnect(
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00590.1</srcid><srcstatus/><internalId>392</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00590.2</srcid><srcstatus/><internalId>393</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00590.3</srcid><srcstatus/><internalId>394</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00590.4</srcid><srcstatus/><internalId>395</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>205</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00591</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Within SoAd_MainFunction() and after successfully performing the open actions, SoAd shall
        change the state of the socket connection to SOAD_SOCON_ONLINE in case of a UDP socket and
        either SoAdSocketUdpListenOnly is set to TRUE or a remote address is set by a value that does
        not contain any wildcards.
      </description>
      <comment>
        Based on the deviation, SoAd will first change to SOAD_SOCON_RECONNECT and then to
        SOAD_SOCON_ONLINE. In this case SoAd informs the upper layer twice.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.OfflineReconnectOnline</srcid><srcstatus/><internalId>756</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con2_OpenSoCon</srcid><srcstatus/><internalId>1395</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>206</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00592</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Within SoAd_RxIndication() and before analyzing or forwarding of any message data, SoAd shall (
        a) overwrite the remote address parts specified with wildcards (e.g. remote IP address set to
        TCPIP_IPADDR_ANY) with the related source address parts of the received message and (b) change
        the state of the socket connection to SOAD_SOCON_ONLINE in case all of the following conditions
        are true:
        Current connection state is not SOAD_SOCON_ONLINE
        UDP socket
        SoAdSocketUdpListenOnly is set to FALSE
        SoAdSocketMsgAcceptanceFilterEnabled is set to TRUE
        Remote address is set, but contains wildcards
        Received message is accepted according to the message acceptance policy
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con7_RxIndication</srcid><srcstatus/><internalId>1383</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>207</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00593</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Within SoAd_TcpConnected() SoAd shall change the state of the socket connection to
        SOAD_SOCON_ONLINE in case all of the following conditions are true:
        Current connection state is not SOAD_SOCON_ONLINE
        TCP socket
        SoAdSocketTcpInitiate is set to TRUE
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_TCP_Connect_NotOK</srcid><srcstatus/><internalId>1664</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>208</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00594</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        At SoAd_TcpAccepted(), SoAd shall perform the following actions if the TCP
        SoAdSocketConnectionGroup related to SocketId has SoAdSocketTcpInitiate set to FALSE:
        choose one of the socket connections using the best match algorithm (see [SWS_SoAd_00680]), and
        either proceed with the selected socket connection or skip further processing and return with
        E_NOT_OK if no match can be found
        overwrite the remote address parts specified with wildcards (e.g. remote IP address set to
        TCPIP_IPADDR_ANY) with the related source address parts of the received message if the remote
        address set for the socket connection contains wildcards
        assign the TcpIp socket used for the established connection and provided as parameter
        SocketIdConnected to the chosen socket connection,
        change the state of this socket connection to SOAD_SOCON_ONLINE and return E_OK
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00594.Match</srcid><srcstatus/><internalId>418</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00594.NoMatch</srcid><srcstatus/><internalId>419</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>209</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00595</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        For socket connection with PDU Header mode disabled (SoAdPduHeaderEnable = FALSE) and an upper
        layer with TP-API, SoAd shall call &lt;Up&gt;_[SoAd][Tp]StartOfReception() with TpSduLength = 0 at
        the end of the connection setup.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_06_CancelRx_Tcp_PendingRx_NoHeader</srcid><srcstatus/><internalId>1724</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>210</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00597</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Each time a socket connection state changes, SoAd shall notify the upper layer of a socket
        connection state change with the configured upper layer notification function &lt;Up&gt;_SoConModeChg(
        and the new state if SoAdSocketSoConModeChgNotification is set to TRUE for the socket
        connection.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_473</srcid><srcstatus/><internalId>773</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_07_Accept_Multiple_Cons</srcid><srcstatus/><internalId>1809</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>211</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00598</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Each time the IP address assignment related to a socket connection changes, SoAd shall notify
        the upper layer of the IP address assignment change with the configured upper layer
        notification function &lt;Up&gt;_LocalIpAddrAssignmentChg() and the new address state if
        SoAdSocketIpAddrAssignmentChgNotification is set to TRUE for the socket connection.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con9_AddrAssignmentChg</srcid><srcstatus/><internalId>1366</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con3_AddrAssignmentChg</srcid><srcstatus/><internalId>1374</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con7_AddrAssignmentChg</srcid><srcstatus/><internalId>1380</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con10_Open</srcid><srcstatus/><internalId>1388</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con2_AddrAssignmentChg</srcid><srcstatus/><internalId>1394</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>212</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00599</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        The SoAd shall provide sufficient buffers to store data which temporarily can't be forwarded to
        TcpIp, e.g. SoAd UDP TP transmit buffers or UdpTxBuffer, nPduUdpTxBuffer.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00547</srcid><srcstatus/><internalId>167</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00548</srcid><srcstatus/><internalId>168</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>213</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00600</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If a PDU is received according to SoAdSocketRouteDest which belongs only to inactive
        RoutingGroups, SoAd shall simply discard the PDU.
      </description>
      <comment>
        Note: activation/deactivation of a routing group only affects new PDUs, i.e. PDUs
        which are already in an active reception or transmission process by an upper layer
        (e.g. long TP-PDU which is received via a multiple CopyRxData calls) are not affected.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_31_UdpTp_RxInd_DisblRoutGroup_Header</srcid><srcstatus/><internalId>1437</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_56_TcpTp_RxInd_DisblRoutGroup_Header</srcid><srcstatus/><internalId>1467</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_57_UdpTp_RxInd_DisblRoutGroup_NoHeader</srcid><srcstatus/><internalId>1468</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_81_RxInd_MultipleRoutingGroups</srcid><srcstatus/><internalId>1490</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_82_UdpIf_RxInd_DisblRoutGroup_NoHeader</srcid><srcstatus/><internalId>1491</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_96_TcpTp_RxInd_DisblRoutGroup_OngoingRx</srcid><srcstatus/><internalId>1505</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_13_00_RoutingGroup_EnabledAtInit_Rx</srcid><srcstatus/><internalId>1821</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_13_00_RoutingGroup_EnableRouting_Rx</srcid><srcstatus/><internalId>1824</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_13_00_RoutingGroup_DisabledAtInit_Rx</srcid><srcstatus/><internalId>1829</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.TcpStream.HeaderMode.DiscardSegementedPdu</srcid><srcstatus/><internalId>770</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>214</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00601</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd shall maintain the state of each configured routing group and activate or deactivate the
        state at initialization depending on the configuration parameter
        SoAdRoutingGroupIsEnabledAtInit.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_13_00_RoutingGroup_EnabledAtInit_Tx</srcid><srcstatus/><internalId>1820</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_13_00_RoutingGroup_DisableRouting_Tx</srcid><srcstatus/><internalId>1822</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_13_00_RoutingGroup_DisableRouting_Tx_Blocked_By_Active_Group</srcid><srcstatus/><internalId>1823</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>215</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00602</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd shall support more than one SoAdPduRouteDest per SoAdPduRoute for upper layers of If-type,
        i.e. a single IF-PDU can be transmitted via multiple socket connections.
      </description>
      <comment>
        Note: It is intended to make this behavior symmetrical and allow for more than one
        SoAdSocketRouteDest per SoAdSocketRoute for upper layers of If-type, i.e. one single PDU
        received from one socket connection can be forwarded as multiple IF-PDUs in the future.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_TxPduFanOut_Udp</srcid><srcstatus/><internalId>1812</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_TxPduFanOut_Tcp</srcid><srcstatus/><internalId>1813</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_TxPduFanOut_NotOk</srcid><srcstatus/><internalId>1814</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_TxPduFanOut_OK_if_one_Success_Tcp</srcid><srcstatus/><internalId>1816</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00722</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>328</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>216</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00604</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In the SoAd_MainFunction(), SoAd shall close each socket connection which fulfills all of the
        following criteria:
        Current connection state is not SOAD_SOCON_OFFLINE
        Close is explicitly requested by a previous SoAd_CloseSoCon() call
        No upper layer requested to keep the socket connection open at the time of the SoAd_CloseSoCon(
        call (i.e. SoAd_CloseSoCon() has been called as often as SoAd_OpenSoCon()) or SoAd_CloseSoCon(
        has been called with abort set to TRUE.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_ListenSocket_Close</srcid><srcstatus/><internalId>1643</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00588</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>203</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>217</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00605</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_TpCancelTransmit() shall check that the service
        SoAd_Init was previously called. If the check fails, SoAd_TpCancelTransmit() shall raise the
        development error SOAD_E_UNINIT.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_CancelTransmit_NoInit</srcid><srcstatus/><internalId>1254</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.DevError_UNINIT</srcid><srcstatus/><internalId>780</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>218</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00606</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_TpCancelTransmit() shall check parameter
        TxPduId for being valid. If the check fails, SoAd_TpCancelTransmit() shall raise the
        development error SOAD_E_INV_PDUID.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_CancelTransmit_ParamInvalid_1</srcid><srcstatus/><internalId>1324</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_00_CancelTransmit_ParamInvalid_2</srcid><srcstatus/><internalId>1325</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_06_CancelTx_NotTP</srcid><srcstatus/><internalId>1737</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.ParameterNames</srcid><srcstatus/><internalId>777</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>219</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00607</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_TpCancelReceive() shall check that the service
        SoAd_Init was previously called. If the check fails, SoAd_TpCancelReceive() shall raise the
        development error SOAD_E_UNINIT.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_CancelReceive_NoInit</srcid><srcstatus/><internalId>1256</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.DevError_UNINIT</srcid><srcstatus/><internalId>780</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>220</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00608</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_TpCancelReceive() shall check parameter RxPduId
        for being valid. If the check fails, SoAd_TpCancelReceive() shall raise the development error
        SOAD_E_INV_PDUID.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_CancelReceive_ParamInvalid</srcid><srcstatus/><internalId>1323</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.ParameterNames</srcid><srcstatus/><internalId>777</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>221</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00609</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_GetSoConId() shall check that the service
        SoAd_Init was previously called. If the check fails, SoAd_GetSoConId() shall raise the
        development error SOAD_E_UNINIT.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_GetSoConId_NoInit</srcid><srcstatus/><internalId>1248</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.DevError_UNINIT</srcid><srcstatus/><internalId>780</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>222</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00610</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_GetSoConId() shall check parameter TxPduId for
        being valid. If the check fails, SoAd_GetSoConId() shall raise the development error
        SOAD_E_INV_PDUID.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_GetSoConId_ParamInvalid</srcid><srcstatus/><internalId>1299</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>223</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00611</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_OpenSoCon() shall check parameter SoConId for
        being valid. If the check fails, SoAd_OpenSoCon() shall raise the development error
        SOAD_E_INV_ARG.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_OpenSoCon_ParamInvalid</srcid><srcstatus/><internalId>1300</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>224</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00612</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_CloseSoCon() shall check parameter SoConId for
        being valid. If the check fails, SoAd_CloseSoCon() shall raise the development error
        SOAD_E_INV_ARG.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_CloseSoCon_Param1Invalid</srcid><srcstatus/><internalId>1303</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>225</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00613</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_RequestIpAddrAssignment() shall check that the
        service SoAd_Init was previously called. If the check fails, SoAd_RequestIpAddrAssignment()
        shall raise the development error SOAD_E_UNINIT.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_RequestIpAddrAssignment_NoInit</srcid><srcstatus/><internalId>1252</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.DevError_UNINIT</srcid><srcstatus/><internalId>780</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>226</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00615</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_OpenSoCon() shall check that the service
        SoAd_Init was previously called. If the check fails, SoAd_OpenSoCon() shall raise the
        development error SOAD_E_UNINIT.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_OpenSoCon_NoInit</srcid><srcstatus/><internalId>1249</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.DevError_UNINIT</srcid><srcstatus/><internalId>780</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>227</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00616</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_CloseSoCon() shall check that the service
        SoAd_Init was previously called. If the check fails, SoAd_CloseSoCon() shall raise the
        development error SOAD_E_UNINIT.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_CloseSoCon_NoInit</srcid><srcstatus/><internalId>1250</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.DevError_UNINIT</srcid><srcstatus/><internalId>780</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>228</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00617</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled, SoAd_RequestIpAddrAssignment() shall check parameter
        SoConId for being valid. If the check fails, SoAd_RequestIpAddrAssignment() shall raise the
        development error SOAD_E_INV_ARG.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_RequestIpAddrAssignment_Param1Invalid</srcid><srcstatus/><internalId>1305</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>229</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00618</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_ReleaseIpAddrAssignment() shall check that the
        service SoAd_Init was previously called. If the check fails, SoAd_ReleaseIpAddrAssignment()
        shall raise the development error SOAD_E_UNINIT.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_ReleaseIpAddrAssignment_NoInit</srcid><srcstatus/><internalId>1253</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.DevError_UNINIT</srcid><srcstatus/><internalId>780</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>230</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00619</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_ReleaseIpAddrAssignment() shall check parameter
        SoConId for being valid. If the check fails, SoAd_ReleaseIpAddrAssignment() shall raise the
        development error SOAD_E_INV_ARG.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_ReleaseIpAddrAssignment_ParamInvalid</srcid><srcstatus/><internalId>1306</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>231</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00620</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_GetLocalAddr() shall check parameter SoConId
        for being valid. If the check fails, SoAd_GetLocalAddr() shall raise the development error
        SOAD_E_INV_ARG.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_GetLocalAddr_ParamInvalid</srcid><srcstatus/><internalId>1310</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>232</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00621</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_GetLocalAddr() shall check that the service
        SoAd_Init was previously called. If the check fails, SoAd_GetLocalAddr() shall raise the
        development error SOAD_E_UNINIT.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_GetLocalAddr_NoInit</srcid><srcstatus/><internalId>1262</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.DevError_UNINIT</srcid><srcstatus/><internalId>780</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>233</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00622</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_GetPhysAddr() shall check parameter SoConId for
        being valid. If the check fails, SoAd_GetPhysAddr() shall raise the development error
        SOAD_E_INV_ARG.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_GetPhysAddr_ParamInvalid</srcid><srcstatus/><internalId>1311</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>234</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00623</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_GetPhysAddr() shall check that the service
        SoAd_Init was previously called. If the check fails, SoAd_GetPhysAddr() shall raise the
        development error SOAD_E_UNINIT.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_GetPhysAddr_NoInit</srcid><srcstatus/><internalId>1263</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.DevError_UNINIT</srcid><srcstatus/><internalId>780</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>235</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00624</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_EnableRouting() shall check that the service
        SoAd_Init was previously called. If the check fails, SoAd_EnableRouting() shall raise the
        development error SOAD_E_UNINIT.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_EnableRouting_NoInit</srcid><srcstatus/><internalId>1261</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.DevError_UNINIT</srcid><srcstatus/><internalId>780</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>236</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00625</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_EnableRouting() shall check parameter id for
        being valid. If the check fails, SoAd_EnableRouting() shall raise the development error
        SOAD_E_INV_ARG.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_EnableRouting_ParamInvalid</srcid><srcstatus/><internalId>1309</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>237</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00626</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_DisableRouting() shall check parameter id for
        being valid. If the check fails, SoAd_DisableRouting() shall raise the development error
        SOAD_E_INV_ARG.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_DisableRouting_ParamInvalid</srcid><srcstatus/><internalId>1308</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>238</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00627</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_DisableRouting() shall check that the service
        SoAd_Init was previously called. If the check fails, SoAd_DisableRouting() shall raise the
        development error SOAD_E_UNINIT.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_DisableRouting_NoInit</srcid><srcstatus/><internalId>1260</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.DevError_UNINIT</srcid><srcstatus/><internalId>780</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>239</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00628</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_SetRemoteAddr() shall check that the service
        SoAd_Init was previously called. If the check fails, SoAd_SetRemoteAddr() shall raise the
        development error SOAD_E_UNINIT.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_SetRemoteAddr_NoInit</srcid><srcstatus/><internalId>1265</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.DevError_UNINIT</srcid><srcstatus/><internalId>780</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>240</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00632</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_CopyTxData() shall check that the service
        SoAd_Init was previously called. If the check fails, SoAd_CopyTxData() shall raise the
        development error SOAD_E_UNINIT.
      </description>
      <comment>
        BUFREQ_E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_CopyTxData_NoInit</srcid><srcstatus/><internalId>1259</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.DevError_UNINIT</srcid><srcstatus/><internalId>780</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>241</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00633</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_CopyTxData() shall check parameter SocketId for
        being valid. If the check fails, SoAd_CopyTxData() shall raise the development error
        SOAD_E_INV_SOCKETID.
      </description>
      <comment>
        BUFREQ_E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_CopyTxData_ParamInvalid</srcid><srcstatus/><internalId>1318</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_00_CopyTxData_ReadonlySoCon</srcid><srcstatus/><internalId>1345</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>242</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00635</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If SoAdSocketMsgAcceptanceFilterEnabled is FALSE, SoAd shall accept all TCP connection or UDP
        datagrams from remote nodes.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_08_Msg_Acceptance_Filter_Off</srcid><srcstatus/><internalId>1740</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>243</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00636</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        At SoAd_TcpAccepted(), SoAd shall perform the following actions if the TCP
        SoAdSocketConnectionGroup related to SocketId has both SoAdSocketTcpInitiate and
        SoAdSocketMsgAcceptanceFilterEnabled set to FALSE and is not online (i.e. current connection
        state not SOAD_SOCON_ONLINE)
        assign the TcpIp socket used for the established connection and provided as parameter
        SocketIdConnected to the socket connection and
        change the state of the socket connection to SOAD_SOCON_ONLINE and return E_OK.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00636.1</srcid><srcstatus/><internalId>420</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00636.2</srcid><srcstatus/><internalId>421</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>244</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00637</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd shall perform the following actions within SoAd_MainFunction() to close a socket
        connection:
        Terminate active TP sessions (if any) and notify the upper layer about the termination
        Disable further transmission or reception for this socket connection, i.e. new transmit
        requests shall be rejected with E_NOT_OK and received messages shall simply be discarded.
        Close related TcpIp sockets
        Change the state of the socket connection to SOAD_SOCON_OFFLINE if closing of the socket
        connection results from a SoAd_CloseSoCon() request or to SOAD_SOCON_RECONNECT otherwise.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00637.1</srcid><srcstatus/><internalId>422</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00637.2</srcid><srcstatus/><internalId>423</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00637.3</srcid><srcstatus/><internalId>424</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00637.4</srcid><srcstatus/><internalId>425</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>245</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00638</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd shall perform the following actions within SoAd_MainFunction() to open a TCP socket
        connection with SoAdSocketTcpInitiate set to FALSE:
        In case no Listen-Socket is assigned to the socket connection:
        Get an appropriate socket from TcpIp by calling TcpIp_SoAdGetSocket() with the TcpIp_DomainType
        implicitly specified by SoAdSocketLocalAddressRef, and the protocol type specified by
        SoAdSocketProtocol.
        Change the socket specific parameters according to [SWS_SoAd_00689]
        Bind the socket to the local address and port by calling TcpIp_Bind() with the local address
        identifier specified by SoAdSocketLocalAddressRef and local port specified by
        SoAdSocketLocalPort.
        Assign the Listen-Socket to the socket connection group
        Activate the socket connection to accept connections from remote nodes
        Listen for a remote connection requests on the Listen-Socket by calling TcpIp_TcpListen() with
        MaxChannels set to the number of socket connections that are part of the TCP socket connection
        group
        In case the Listen-Socket is already assigned to the socket connection:
        Activate the socket connection to accept connections from remote nodes
      </description>
      <comment>
        Note: all socket connections of a TCP socket connection group (and SoAdSocket-
        TcpInitiate set to FALSE) share one TcpIp socket for incoming connection requests
        ("Listen-Socket"), but use a separate TcpIp socket created by the TcpIp module and
        provided via SoAd_TcpAccepted() after the connection has been establishment.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00638.1a</srcid><srcstatus/><internalId>396</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00638.1b</srcid><srcstatus/><internalId>397</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00638.1c</srcid><srcstatus/><internalId>398</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00638.1d</srcid><srcstatus/><internalId>399</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00638.1e</srcid><srcstatus/><internalId>400</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00638.1f</srcid><srcstatus/><internalId>401</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00638.2a</srcid><srcstatus/><internalId>402</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>246</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00639</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd shall perform the following actions within SoAd_MainFunction() to open a UDP socket
        connection which is part of a socket connection group containing multiple socket connections (i.
        e. there is more than one socket connection in the socket connection group configuration
        container)
        In case no UDP socket is assigned to the socket connection group:
        Get an appropriate socket from TcpIp by calling TcpIp_SoAdGetSocket() with the domain type
        implicitly specified by SoAdSocketLocalAddressRef, and the protocol type specified by
        SoAdSocketProtocol.
        Change the socket specific parameters according to [SWS_SoAd_00689]
        Bind the socket to the local address and port by calling TcpIp_Bind() with the local address
        identifier specified by SoAdSocketLocalAddressRef and local port specified by
        SoAdSocketLocalPort.
        Assign the UDP socket to the socket connection group
        Activate the socket connection for communication via the shared UDP socket of the socket
        connection group
        In case the UDP socket is already assigned to the socket connection group:
        Activate the socket connection for communication via the shared UDP socket of the socket
        connection group
      </description>
      <comment>
        Note: all socket connections of a UDP socket connection group share the same TcpIp socket.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00639.1a</srcid><srcstatus/><internalId>403</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00639.1b</srcid><srcstatus/><internalId>404</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00639.1c</srcid><srcstatus/><internalId>405</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00639.1d</srcid><srcstatus/><internalId>406</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00639.1e</srcid><srcstatus/><internalId>407</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00639.2a</srcid><srcstatus/><internalId>408</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>247</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00640</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        To notify the upper layer about the termination of an active TP transmission on closing a
        socket connection within SoAd_MainFunction(), SoAd shall call &lt;Up&gt;_[SoAd][Tp]TxConfirmation()
        with parameter result set to
        E_OK if disconnect is caused by SoAd_CloseSoCon() and all data was correctly transmitted, and
        E_NOT_OK for any other cause.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00640.1</srcid><srcstatus/><internalId>426</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00640.2</srcid><srcstatus/><internalId>427</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>248</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00641</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        To notify the upper layer about the termination of an active TP reception on closing a socket
        connection within SoAd_MainFunction(), SoAd shall call &lt;Up&gt;_[SoAd][Tp]RxIndication()with
        parameter result set to
        E_OK if disconnection is caused by SoAd_CloseSoCon() and all received data was correctly
        delivered to the upper layer, and
        E_NOT_OK for any other cause.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00641.1</srcid><srcstatus/><internalId>428</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00641.2</srcid><srcstatus/><internalId>429</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>249</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00642</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        To close related TcpIp sockets on closing a socket connection within SoAd_MainFunction(), SoAd
        shall perform the following actions:
        In case of a TCP socket connection:
        Close the related socket by calling TcpIp_CloseSocket() with parameter abort set to the same
        value as provided by SoAd_CloseSoCon()or set to FALSE in case closing was not initiated by
        SoAd_CloseSoCon(
        If all socket connections of a TCP socket connection group have been closed by SoAd_CloseSoCon(
        Close the related Listen-Socket by calling TcpIp_CloseSocket() with parameter abort set to the
        same value as provided by SoAd_CloseSoCon()or set to FALSE in case closing was not initiated by
        SoAd_CloseSoCon(
        In case of a UDP socket connection:
        If the socket connection is NOT part of a socket connection group (i.e. there is only one
        socket connection in the socket connection group configuration container): Close the related
        socket by calling TcpIp_CloseSocket() with parameter abort set to the same value as provided by
        SoAd_CloseSoCon()or set to FALSE in case closing was not initiated by SoAd_CloseSoCon(
        If all socket connections of a UDP socket connection group have been closed by SoAd_CloseSoCon(
        Close the related UDP socket by calling TcpIp_CloseSocket() with parameter abort set to the
        same value as provided by SoAd_CloseSoCon()or set to FALSE in case closing was not initiated by
        SoAd_CloseSoCon(
      </description>
      <comment>
        Note: Two requirements have been removed.
        They were not defined correctly and are already covered by other requirements.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00642.a.TCP</srcid><srcstatus/><internalId>430</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00642.b.TCP</srcid><srcstatus/><internalId>431</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00642.a.TCP_2</srcid><srcstatus/><internalId>432</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00642.a.UDP</srcid><srcstatus/><internalId>433</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00642.b.UDP</srcid><srcstatus/><internalId>434</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00642.a.UDP_2</srcid><srcstatus/><internalId>435</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>250</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00643</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Within SoAd_TcpIpEvent() with Event set to TCPIP_UDP_CLOSED, SoAd shall
        remove the assignment of the TcpIp socket identified by SocketId from the related UDP socket
        connection group and
        close all socket connections of the related socket connection group that are in
        SOAD_SOCON_ONLINE (i.e. perform the specified closing actions with the exception of closing
        related TcpIp sockets)
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00643.1</srcid><srcstatus/><internalId>436</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00643.2</srcid><srcstatus/><internalId>437</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>251</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00644</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        For a TCP socket connection of type automatic (i.e. configuration parameter
        SoAdSocketAutomaticSoConSetup set to TRUE) which uses a wildcard in the configured remote
        address (i.e. an ANY-String for IP address or port), SoAd shall (a) disable further
        transmission or reception for this socket connection (i.e. new transmit requests shall be
        rejected with E_NOT_OK and received messages shall simply be discarded) after a PDU
        transmission, directly before the related transmit confirmation function is called (or would be
        called if such a function is not configured) and (b) close the socket connection in the next
        SoAd_MainFunction(
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00644.a</srcid><srcstatus/><internalId>495</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00644.b</srcid><srcstatus/><internalId>496</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>252</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00645</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Within SoAd_TcpIpEvent() with Event set to TCPIP_TCP_CLOSED for a Listen-Socket, SoAd shall
        remove the assignment of the TcpIp socket identified by SocketId from the related TCP socket
        connection group.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_54_TcpIpEvent_ListenSocket</srcid><srcstatus/><internalId>1465</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_03_Restart_After_CloseSoCon_And_TCPIP_TCP_CLOSED_TCP</srcid><srcstatus/><internalId>1674</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>253</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00646</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Within SoAd_TcpIpEvent() with Event set to TCPIP_TCP_CLOSED or TCPIP_TCP_RESET, SoAd shall
        remove the assignment of the TcpIp socket identified by SocketId from the related socket
        connection and
        close the socket connection if it is in SOAD_SOCON_ONLINE (i.e. perform the specified closing
        actions with the exception of closing related TcpIp socket)
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00646.1</srcid><srcstatus/><internalId>438</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00646.2</srcid><srcstatus/><internalId>439</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>254</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00647</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In case of multiple socket connections, SoAd shall call the upper layer with the configured
        transmit confirmation function (&lt;Up&gt;_[SoAd][If]TxConfirmation&gt;()) with result set to E_OK only
        once after transmission on all related socket connections succeded.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_TxPduFanOut_Udp</srcid><srcstatus/><internalId>1812</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_TxPduFanOut_Tcp</srcid><srcstatus/><internalId>1813</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_TxPduFanOut_NotOk</srcid><srcstatus/><internalId>1814</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_TxPduFanOut_OK_if_one_Success_Tcp</srcid><srcstatus/><internalId>1816</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>255</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00648</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If a transmit request on any of multiple socket connections returns E_NOT_OK, SoAd shall return
        E_NOT_OK at SoAd_IfTransmit(
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_TxPduFanOut_NotOk</srcid><srcstatus/><internalId>1814</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>256</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00650</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        The service SoAd_TpTransmit() shall skip the transmit request and return E_NOT_OK if there is
        already an IF or TP transmission ongoing on the related socket identified by TxPduId.
      </description>
      <comment>
        Note: No TxConfirmation is required when SoAd_TpTransmit() failed.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_17_TpTransmit_InProg</srcid><srcstatus/><internalId>1426</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.ParameterNames</srcid><srcstatus/><internalId>777</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>257</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00651</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If &lt;Up&gt;_[SoAd][Tp]CopyTxData() return with BUFREQ_E_NOT_OK for a TCP socket connection, SoAd
        shall (a) disable further transmission or reception for this socket connection (i.e. new
        transmit requests shall be rejected with E_NOT_OK and received messages shall simply be
        discarded) and (b) close the socket connection in the next SoAd_MainFunction(
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.dsn.Func0140.TcpTpErrorHandling</srcid><srcstatus/><internalId>957</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>258</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00652</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If &lt;Up&gt;_[SoAd][Tp]CopyTxData() return with BUFREQ_E_NOT_OK for a UDP socket connection, SoAd
        shall immediately terminate the TP transmit session and notify the upper layer with the
        configured transmit confirmation function (&lt;Up&gt;_[SoAd][Tp]TxConfirmation&gt;()) with E_NOT_OK as
        result. (Note: the related socket connection is not closed in this case.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_52_Up_TpCopyTxData_BUFFER_NOT_AVAIL</srcid><srcstatus/><internalId>1462</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_05_ULCopyTxData_NOT_OK_UDP</srcid><srcstatus/><internalId>1711</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>259</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00653</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        The service SoAd_IfTransmit() shall skip the transmit request and return E_NOT_OK if there is
        already an IF or TP transmission ongoing on the related socket identified by TxPduId.
      </description>
      <comment>
        Note: An IF transmission is considered as ongoing until SoAd_IfTransmit returns. A
        TP transmission is considered as ongoing until SoAd calls
        Up_[SoAd][Tp]TxConfirmation.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Con16002_IfTransmit_TxWhileTxing</srcid><srcstatus/><internalId>1233</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_98_IfTransmit_OngoingTx</srcid><srcstatus/><internalId>1507</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.ParameterNames</srcid><srcstatus/><internalId>777</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>260</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00655</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_GetRemoteAddr
        Syntax
        Std_ReturnType SoAd_GetRemoteAddr (SoAd_SoConIdType SoConId, TcpIp_SockAddrType* IpAddrPtr)
        Service ID [hex] | 0x1C
        Sync/Async | Synchronous
        Reentrancy | Reentrant
        Parameters (in) | SoConId | socket connection index representing the SoAd socket connection for
        which the actually specified remote address shall be obtained.
        Parameters (inout) | None
        Parameters (out) | IpAddrPtr | Pointer to a struct where the retrieved remote address (IP
        address and port) is stored.
        Return value | Std_ReturnType | Result of operationE_OK The request was successfulE_NOT_OK The
        request was not successful.
        Description | Retrieves the remote address (IP address and port) actually used for the SoAd
        socket connection specified by SoConId
        Available via | SoAd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00655.ServiceId</srcid><srcstatus/><internalId>517</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>261</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00656</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_IfRoutingGroupTransmit
        Syntax
        Std_ReturnType SoAd_IfRoutingGroupTransmit (SoAd_RoutingGroupIdType id)
        Service ID [hex] | 0x1D
        Sync/Async | Asynchronous
        Reentrancy | Reentrant
        Parameters (in) | id | routing group identifier indirectly specifying PDUs to be transmitted (
        after requesting the newest data from the related upper layer)
        Parameters (inout) | None
        Parameters (out) | None
        Return value | Std_ReturnType | Result of operationE_OK The request was successfulE_NOT_OK The
        request was not successful.
        Description | Triggers the transmission of all If-TxPDUs identified by the parameter id after
        requesting the data from the related upper layer.
        Available via | SoAd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_ComTest_02_MultipleGenUL</srcid><srcstatus/><internalId>1214</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00656.ServiceId</srcid><srcstatus/><internalId>505</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>262</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00657</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In case more than one socket connection belongs to a UDP socket connection group, a UDP socket
        is shared between all socket connections of the group and the related socket connection shall
        be selected according to the best match algorithm (see [SWS_SoAd_00680]
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_06_SetUniqueRemoteAddr_AddrMatch_PortWild</srcid><srcstatus/><internalId>1415</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_07_SetUniqueRemoteAddr_PortMatch_AddrWild</srcid><srcstatus/><internalId>1416</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>263</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00658</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_IfRoutingGroupTransmit() shall check parameter
        id for being valid (i.e. id refers a routing group that has configuration parameter
        SoAdRoutingGroupTxTriggerable set to TRUE). If the check fails, SoAd_IfRoutingGroupTransmit()
        shall raise the development error SOAD_E_INV_ARG.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_IfRoutingGroupTransmit_InvId</srcid><srcstatus/><internalId>1356</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_13_01_IfRoutingGroupTransmit_WrongRoutingGrId</srcid><srcstatus/><internalId>1842</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>264</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00659</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_GetRemoteAddr() shall check that the service
        SoAd_Init was previously called. If the check fails, SoAd_GetRemoteAddr() shall raise the
        development error SOAD_E_UNINIT.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_GetRemoteAddr_NoInit</srcid><srcstatus/><internalId>1276</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.DevError_UNINIT</srcid><srcstatus/><internalId>780</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>265</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00660</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_GetRemoteAddr() shall check parameter SoConId
        for being valid. If the check fails, SoAd_GetRemoteAddr() shall raise the development error
        SOAD_E_INV_ARG.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_GetRemoteAddr_InvalidSoConId</srcid><srcstatus/><internalId>1338</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>266</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00661</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_IfRoutingGroupTransmit() shall check that the
        service SoAd_Init was previously called. If the check fails, SoAd_IfRoutingGroupTransmit()
        shall raise the development error SOAD_E_UNINIT.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_IfRoutingGroupTransmit_NoInit</srcid><srcstatus/><internalId>1283</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.DevError_UNINIT</srcid><srcstatus/><internalId>780</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>267</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00662</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        At SoAd_IfRoutingGroupTransmit() SoAd shall store a trigger transmit request for each
        SoAdPduRouteDest that contains a reference to the routing group identified by the parameter id
        for transmission in the SoAd_MainFunction(
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_13_01_IfRoutingGroupTransmit_SinglePduRouteDest</srcid><srcstatus/><internalId>1839</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_13_01_IfRoutingGroupTransmit_MultiplePduRouteDest</srcid><srcstatus/><internalId>1840</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_13_01_IfRoutingGroupTransmit_SduLength_Bigger</srcid><srcstatus/><internalId>1844</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>268</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00663</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | &lt;Up&gt;_[SoAd][If]TriggerTransmit
        Syntax
        Std_ReturnType &lt;Up&gt;_[SoAd][If]TriggerTransmit (PduIdType TxPduId, PduInfoType* PduInfoPtr)
        Sync/Async | Synchronous
        Reentrancy | Reentrant for different PduIds. Non reentrant for the same PduId.
        Parameters (in) | TxPduId | ID of the SDU that is requested to be transmitted.
        Parameters (inout) | PduInfoPtr | Contains a pointer to a buffer (SduDataPtr) to where the SDU
        data shall be copied, and the available buffer size in SduLengh. On return, the service will
        indicate the length of the copied SDU data in SduLength.
        Parameters (out) | None
        Return value | Std_ReturnType | E_OK: SDU has been copied and SduLength indicates the number of
        copied bytes.E_NOT_OK: No SDU data has been copied. PduInfoPtr must not be used since it may
        contain a NULL pointer or point to invalid data.
        Description | Within this API, the upper layer module (called module) shall check whether the
        available data fits into the buffer size reported by PduInfoPtr-&gt;SduLength. If it fits, it
        shall copy its data into the buffer provided by PduInfoPtr-&gt;SduDataPtr and update the length of
        the actual copied data in PduInfoPtr-&gt;SduLength. If not, it returns E_NOT_OK without changing
        PduInfoPtr.
        Available via | &lt;none&gt;
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_08_MultipleUL_Func</srcid><srcstatus/><internalId>1228</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00538</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>269</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00664</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        At SoAd_GetRemoteAddr() SoAd shall retrieve the remote address (IP address and port) actually
        used for the socket connection specified by parameter SoConId.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_71_AssignRemoteAddr_IPv6</srcid><srcstatus/><internalId>1481</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>270</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00665</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In the SoAd_MainFunction() the SoAd shall check for pending triggered transmit request for
        SoAdPduRouteDest and identify all related IF-PDUs. For each identified IF-PDU SoAd shall
        process as specified below:
        retrieve the data from the related upper layer by calling &lt;Up&gt;_[SoAd][If]TriggerTransmit()and
        transmit the data via the related socket connection.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00665.1</srcid><srcstatus/><internalId>446</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00665.2</srcid><srcstatus/><internalId>447</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00665.3</srcid><srcstatus/><internalId>448</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>271</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00666</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd_GetRemoteAddr() shall immediately return E_NOT_OK if the remote address of the socket
        connection specified by parameter ‎SoConId is not set.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_GetRemoteAddr_NotSet</srcid><srcstatus/><internalId>1367</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>272</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00667</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In case of a TCP socket connection configured with SoAdSocketTcpImmediateTpTxConfirmation set
        to TRUE the SoAd shall call the upper layer with the configured transmit confirmation function
        Up&gt;_[SoAd][Tp]TxConfirmation&gt;()) and E_OK as result within the SoAd_MainFunction() after
        TcpIp_TcpTransmit() returns E_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_05_Tcp_Con28_Transmit_TpTxConfirmation</srcid><srcstatus/><internalId>1716</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>273</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00670</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In case of a TCP socket connection the SoAd shall call the upper layer with the configured
        transmit confirmation function (&lt;Up&gt;_[SoAd][Tp]TxConfirmation&gt;()) and E_NOT_OK as result within
        the SoAd_MainFunction() after TcpIp_TcpTransmit() returns with E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_46_Tcp_TcpTransmit_NOK</srcid><srcstatus/><internalId>1456</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_95_CopyTxData_TpTcp_BUF_NOK</srcid><srcstatus/><internalId>1504</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_177_CopyTxData_TpTcp_BUF_NOK_Data_Sent_TCP_Closed</srcid><srcstatus/><internalId>1600</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_178_CopyTxData_TpTcp_BUF_NOK_TCP_NOK</srcid><srcstatus/><internalId>1601</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>274</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00671</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_SetUniqueRemoteAddr
        Syntax
        Std_ReturnType SoAd_SetUniqueRemoteAddr (SoAd_SoConIdType SoConId, const TcpIp_SockAddrType*
        RemoteAddrPtr, SoAd_SoConIdType* AssignedSoConIdPtr)
        Service ID [hex] | 0x1e
        Sync/Async | Synchronous
        Reentrancy | Reentrant for different SoConIds. Non reentrant for the same SoConId.
        Parameters (in) | SoConId | Index of any socket connection that is part of the
        SoAdSocketConnectionGroup.
        RemoteAddrPtr | Pointer to the structure containing the requested remote IP address and port.
        Parameters (inout) | None
        Parameters (out) | AssignedSoConIdPtr | Pointer to the SoAd_SoConIdType where the index of the
        socket connection configured with the remote address (RemoteAddrPtr) shall be stored.
        Return value | Std_ReturnType | E_OK: The request was accepted.E_NOT_OK: The request was
        rejected, AssignedSoConIdPtr remains unchanged.
        Description | This API service shall either return the socket connection index of the
        SoAdSocketConnectionGroup where the specified remote address (IP address and port) is set or
        assign the remote address to an unused socket connection from the same
        SoAdSocketConnectionGroup.
        Available via | SoAd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00671.ServiceId</srcid><srcstatus/><internalId>525</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>275</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00672</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_SetUniqueRemoteAddr() shall check that the
        service SoAd_Init() was previously called. If the check fails, SoAd_SetUniqueRemoteAddr() shall
        raise the development error SOAD_E_UNINIT.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_SetUniqueRemoteAddr_NoInit</srcid><srcstatus/><internalId>1277</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.DevError_UNINIT</srcid><srcstatus/><internalId>780</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>276</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00673</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_SetUniqueRemoteAddr() shall check parameter
        SoConId for being valid. If the check fails, SoAd_SetUniqueRemoteAddr() shall raise the
        development error SOAD_E_INV_ARG
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_SetUniqueRemoteAddr_InvalidSoConId</srcid><srcstatus/><internalId>1340</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>277</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00675</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        The function SoAd_SetUniqueRemoteAddr() shall check if one of the socket connections of the
        socket connection group, identified by SoConId, is already configured with the address
        specified by RemoteAddrPtr. In this case, it shall return the socket connection index via
        AssignedSoConIdPtr and return E_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_06_SetUniqueRemoteAddr_AddrMatch_PortWild</srcid><srcstatus/><internalId>1415</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_94_SetUniqueRemoteAddr_Ipv6</srcid><srcstatus/><internalId>1503</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>278</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00676</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If no socket connection is already configured with the address specified by RemoteAddrPtr,
        SoAd_SetUniqueRemoteAddr() shall:
        choose an unused socket connection using the best match algorithm described in [SWS_SoAd_00680]
        set it to the remote address specified by RemoteAddrPtr
        set AssignedSoConIdPtr to the index of the chosen socket connection and
        return E_OK.
        A socket connection is "unused" if its actual remote address has an IP address wildcard and/or
        port wildcard.
      </description>
      <comment>
        A socket connection is "unused" if its actual remote address has an IP address
        wildcard and/or port wildcard.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00676.1</srcid><srcstatus/><internalId>526</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00676.2</srcid><srcstatus/><internalId>527</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00676.3</srcid><srcstatus/><internalId>528</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00676.4</srcid><srcstatus/><internalId>529</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>279</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00678</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd_SetUniqueRemoteAddr() shall reject the request and return E_NOT_OK if there are no unused
        socket connections within the socket connection group identified by SoConId.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_89_SetUniqueRemoteAddr</srcid><srcstatus/><internalId>1498</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>280</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00679</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_WriteDhcpHostNameOption
        Syntax
        Std_ReturnType SoAd_WriteDhcpHostNameOption (SoAd_SoConIdType SoConId, uint8 length, const
        uint8* data)
        Service ID [hex] | 0x1B
        Sync/Async | Synchronous
        Reentrancy | Reentrant for different SoConIds. Non reentrant for the same SoConId.
        Parameters (in) | SoConId | socket connection index specifying the socket connection for which
        the hostname shall be changed
        length | Length of hostname to be set.
        data | Pointer to memory containing the hostname, i.e. the Fully Qualified Domain Name (FQDN)
        according to IETF RFC 4702/IETF RFC 4704.
        Parameters (inout) | None
        Parameters (out) | None
        Return value | Std_ReturnType | E_OK: The request has been acceptedE_NOT_OK: The request has
        not been accepted
        Description | By this API service an upper layer of the SoAd can set the hostname, i.e. FQDN
        option in the DHCP submodule of the TCP/IP stack.
        Available via | SoAd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_ComTest_02_MultipleGenUL</srcid><srcstatus/><internalId>1214</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00679.ServiceId</srcid><srcstatus/><internalId>532</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>281</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00680</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd shall use the following best match algorithm to select a socket connection of a socket
        connection group based on a provided (specific) remote address:
        socket connections that have no (specific or wildcard) remote address set shall be ignored
        the remote address of the remaining socket connections shall be compared with the provided
        remote address and the socket connection with the best match according to the following ordered
        list (item listed earlier has higher priority towards items listed later) shall be selected:
        IP address and port match
        IP address match (and wildcard set for port)
        Port match (and wildcard set for IP address)
        Wildcards are used for both IP address and port
        No match (i.e. no socket connections can be selected)
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00680.1</srcid><srcstatus/><internalId>487</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00680.2a</srcid><srcstatus/><internalId>488</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00680.2b</srcid><srcstatus/><internalId>489</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00680.2c</srcid><srcstatus/><internalId>490</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00680.2d</srcid><srcstatus/><internalId>491</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00680.2e</srcid><srcstatus/><internalId>492</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00676.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00525</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.Func0143.SoAd_DtlsConnectionStateChg.Dtls.Connecting.Match</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1132</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>282</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00681</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_ReadDhcpHostNameOption
        Syntax
        Std_ReturnType SoAd_ReadDhcpHostNameOption (SoAd_SoConIdType SoConId, uint8* length, uint8*
        data)
        Service ID [hex] | 0x1A
        Sync/Async | Synchronous
        Reentrancy | Reentrant for different SoConIds. Non reentrant for the same SoConId.
        Parameters (in) | SoConId | socket connection index specifying the socket connection for which
        the hostname shall be read
        Parameters (inout) | length | As input parameter, contains the length of the provided data
        buffer. Will be overwritten with the length of the actual data.
        Parameters (out) | data | Pointer to provided memory buffer the hostname, i.e. the Fully
        Qualified Domain Name (FQDN) according to IETF RFC 4702/IETF RFC 4704 will be copied to.
        Return value | Std_ReturnType | E_OK: The request has been acceptedE_NOT_OK: The request has
        not been accepted
        Description | By this API service an upper layer of the SoAd can read the currently configured
        hostname, i.e. FQDN option in the DHCP submodule of the TCP/IP stack.
        Available via | SoAd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_ComTest_02_MultipleGenUL</srcid><srcstatus/><internalId>1214</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00681.ServiceId</srcid><srcstatus/><internalId>531</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>283</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00683</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If a PDU with TriggerMode set to TRIGGER_NEVER without a specific SoAdTxUdpTriggerTimeout get
        buffered SoAd shall set the the nPdu specific timer to the value of SoAdSocketUdpTriggerTimeout
        if the timer is not running or if it is lower than the current nPdu specific timer value.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_28_nPduTimeouts</srcid><srcstatus/><internalId>1435</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>284</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00684</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd shall stop the nPdu specific timer when the PDUs stored for the socket connection have
        been sent
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_60_nPduUdpTx_StopSpecificTimer</srcid><srcstatus/><internalId>1471</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>285</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00686</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Within SoAd_MainFunction() and after successfully performing the open actions, SoAd shall
        change the state of the socket connection to SOAD_SOCON_RECONNECT in case of
        a TCP socket connection or
        a UDP socket connection that is configured with a remote address containing wildcards.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00686.1</srcid><srcstatus/><internalId>416</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00686.2</srcid><srcstatus/><internalId>417</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>286</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00687</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the function SoAd_SetRemoteAddr() is used to set the remote address of a socket connection
        that is in the mode SOAD_SOCON_ONLINE to a value that contains wildcards, SoAd shall change the
        mode of the socket connection to SOAD_SOCON_RECONNECT.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_78_SetRemoteAddr_Wild</srcid><srcstatus/><internalId>1488</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>287</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00688</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Within SoAd_TcpIpEvent() with Event set to TCPIP_TCP_FIN_RECEIVED SoAd shall close the related
        socket by calling TcpIp_Close() with parameter abort set FALSE.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_04_Tcp_Con12_Tp_RxInd_NoHeader</srcid><srcstatus/><internalId>1687</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>288</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00689</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In case socket related parameters shall be changed as part of allocating a new socket, SoAd
        shall change the parameters according to the configuration of the associated socket connection
        by calling TcpIp_ChangeParameter() with ParameterId and ParameterValue for each related clause
        as specified below:
        In case of a TCP socket: TCPIP_PARAMID_TCP_RXWND_MAX and the value specified by
        SoAdSocketTpRxBufferMin if the optional parameter is enabled
        TCPIP_PARAMID_FRAMEPRIO and the value specified by SoAdSocketFramePriority if the optional
        parameter is enabled
        In case of a TCP socket: TCPIP_PARAMID_TCP_NAGLE and the value 0x01 if the related optional
        parameter SoAdSocketTcpNoDelay is set to FALSE or 0x00 if the parameter is set to TRUE.
        In case of a TCP socket: TCPIP_PARAMID_TCP_KEEPALIVE and the value specified by
        SoAdSocketTcpKeepAlive
        In case of a TCP socket: TCPIP_PARAMID_TCP_KEEPALIVE_TIME and the value specified by
        SoAdSocketTcpKeepAliveTime if the optional parameter is enabled
        In case of a TCP socket: TCPIP_PARAMID_TCP_KEEPALIVE_PROBES_MAX and the value specified by
        SoAdSocketTcpKeepAliveProbesMax if the optional parameter is enabled
        In case of a TCP socket: TCPIP_PARAMID_TCP_KEEPALIVE_INTERVAL and the value specified by
        SoAdSocketTcpKeepAliveInterval if the optional parameter is enabled.
        In case of a TCP socket: TCPIP_PARAMID_TCP_OPTIONFILTER and the value of
        TcpIpTcpConfigOptionFilterId specified in TcpIpTcpConfigOptionFilter referenced by
        SoAdSocketTCPOptionFilterRef if the optional parameter is enabled.
        TCPIP_PARAMID_PATHMTU_ENABLE and the value specified by SoAdSocketPathMTUEnable if
        the optional parameter is enabled.
        TCPIP_PARAMID_FLOWLABEL and the value specified by SoAdSocketFlowLabel if the optional
        parameter is enabled.
        TCPIP_PARAMID_DSCP and the value specified by SoAdSocketDifferentiatedServicesField if
        the optional parameter is enabled.
        In case of a UDP socket: TCPIP_PARAMID_UDP_CHECKSUM and the value of
        SoAdSocketUDPChecksumEnabled. ()
        In case of a TCP socket: If SoAdSocketTcpTlsConnectionRef is defined the function shall
        be called with the parameter IDTCPIP_PARAMID_TLS_CONNECTION_ASSIGNMENT and the value from
        this reference as the parameter value to assign a TLS connection to this socket.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00689.1</srcid><srcstatus/><internalId>409</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00689.2</srcid><srcstatus/><internalId>410</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00689.3</srcid><srcstatus/><internalId>411</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00689.4</srcid><srcstatus/><internalId>412</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00689.5</srcid><srcstatus/><internalId>413</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00689.6</srcid><srcstatus/><internalId>414</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00689.7</srcid><srcstatus/><internalId>415</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.SoAdSocketTCPOptionFilterRef</srcid><srcstatus/><internalId>783</internalId></linkedfrom><linkedfrom><srcid>dev.SoAd.SocketPathMTUEnable</srcid><srcstatus/><internalId>784</internalId></linkedfrom><linkedfrom><srcid>dev.SoAd.SocketFlowLabel</srcid><srcstatus/><internalId>785</internalId></linkedfrom><linkedfrom><srcid>dev.SoAd.SocketDifferentiatedServicesField</srcid><srcstatus/><internalId>786</internalId></linkedfrom><linkedfrom><srcid>dev.SoAd.UdpChecksumEnabled</srcid><srcstatus/><internalId>787</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00590.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>393</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00638.1b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>397</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00639.1b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>404</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>289</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00690</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd shall preserve the order of PDUs transmitted via a socket connection that uses the nPdu
        feature. Pdus collected on the sender side first shall be extracted and indicated to the
        receivers on the receiving side first as well.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_59_nPduUdpTx_PduTimeout_FIFO</srcid><srcstatus/><internalId>1470</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>290</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00691</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In case the nPdu feature is used for a socket connection and and all PDUs are configured with
        SoAdTxPduCollectionSemantics set to SOAD_COLLECT_QUEUED, SoAd shall transmit all PDUs
        individually, also PDUs with the same PduId.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_61_nPduUdpTx_IndividualPdus</srcid><srcstatus/><internalId>1472</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>291</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00692</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        API Function | Header File | Description
        Det_ReportError | Det.h | Service to report development errors.
        IdsM_SetSecurityEvent IdsM.h This API is the application interface to report security events
        to the IdsM.
        IdsM_SetSecurityEventWithContextData | IdsM.h | This API is the application interface to
        report security events with contextdata to the IdsM.
        PduR_SoAdTpCopyRxData | PduR_SoAd.h | This function is called to provide the received data
        of an I-PDU segment (N-PDU) to the upper layer. Each call to this function provides the next
        part of the I-PDU data. The size of the remaining buffer is written to the position indicated
        by bufferSizePtr.
        PduR_SoAdTpCopyTxData |PduR_SoAd.h | This function is called to acquire the transmit data of
        an I-PDU segment (N-PDU). Each call to this function provides the next part of the I-PDU data
        unless retry-&gt;TpDataState is TP_DATARETRY. In this case the function restarts to copy the data
        beginning at the offset from the current position indicated by retry-&gt;TxTpDataCnt. The size of
        the remaining data is written to the position indicated by availableDataPtr.
        TcpIp_DhcpReadOption | TcpIp.h | By this API service the TCP/IP stack retrieves DHCP option data
        identified by parameter option for already received DHCP options.
        TcpIp_DhcpV6ReadOption | TcpIp.h | By this API service the TCP/IP stack retrieves DHCPv6 option
        data identified by parameter option for already received DHCPv6 options.
        TcpIp_DhcpV6WriteOption | TcpIp.h | By this API service the TCP/IP stack writes the DHCPv6 option data
        identified by parameter option.
        TcpIp_DhcpWriteOption | TcpIp.h | By this API service the TCP/IP stack writes the DHCP option data
        identified by parameter option.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00101</srcid><srcstatus/><internalId>49</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0145.SecurityEventReporting</srcid><srcstatus/><internalId>962</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.optionalInterfaces</srcid><srcstatus/><internalId>781</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>292</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00149</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketUdpAliveSupervisionTimeout
        Parameter Type: FloatValue
        Parent Containers: SoAdSocketUdp,
        Description: Specifies the time in [s] a UDP socket connection remains in the mode
        SOAD_SOCON_ONLINE after the latest reception of a frame from the remote peer specified by the
        remote address. If this optional parameter is not enabled UDP Alive Supervision is deactivated
        for the related socket connection group.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: INF (Type: CLOSED)
        Min-Value: 0 (Type: CLOSED)
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>293</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00150</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdTxUdpTriggerTimeout
        Parameter Type: FloatValue
        Parent Containers: SoAdPduRouteDest,
        Description: Specifies the timeout in [s] the nPduUdpTxBuffer shall be transmitted at the
        latest after this PDU is put into the buffer. This optional parameter is only relevant if
        SoAdTxUdpTriggerMode is TRIGGER_NEVER.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: INF (Type: CLOSED)
        Min-Value: 0 (Type: CLOSED)
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>294</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00151</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketTcpKeepAliveProbesMax
        Parameter Type: Integer
        Parent Containers: SoAdSocketTcp,
        Description: Maximum number of times that TCP retransmits an individual data segment before
        aborting the connection.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 65535 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>295</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00152</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketTcpKeepAliveInterval
        Parameter Type: FloatValue
        Parent Containers: SoAdSocketTcp,
        Description: Specifies the interval in seconds between subsequent keepalive probes.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: INF (Type: CLOSED)
        Min-Value: 0 (Type: CLOSED)
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>296</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00153</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketTcpKeepAliveTime
        Parameter Type: FloatValue
        Parent Containers: SoAdSocketTcp,
        Description: Specifies the time in seconds between the last data packet sent and the first
        keepalive probe.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: INF (Type: CLOSED)
        Min-Value: 0 (Type: CLOSED)
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>297</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00154</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketUdpStrictHeaderLenCheckEnabled
        Parameter Type: Boolean
        Parent Containers: SoAdSocketUdp,
        Description: Specifies if UDP messages shall be dropped (TRUE) if the length of all contained
        PDUs does not match the length of the whole message or not (FALSE). Shall only be set to TRUE
        if SoAdPduHeaderEnable is also set to TRUE.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>298</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00693</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Whenever a PDU or a part of a PDU is received, that has to be stored in a SoAd receive buffer,
        is larger than the remaining available buffer size SoAd shall shall raise the runtime error
        SOAD_E_NOBUFS.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_04_Udp_Con10_Tp_RxInd_NoHeader_Discard</srcid><srcstatus/><internalId>1692</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_Tcp_Con12_Tp_RxInd_NoHeader_Discard</srcid><srcstatus/><internalId>1693</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_Udp_Con11_Tp_RxInd_WithHeader_Discard</srcid><srcstatus/><internalId>1694</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.RuntimeError</srcid><srcstatus/><internalId>782</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>299</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00694</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If a UDP socket connection is configured with a SoAdSocketUdpAliveSupervisionTimeout and the
        remote address was overwritten, as described in [SWS_SoAd_00592], the alive supervision timer
        for this socket connection shall be started with the value specified by the configuration
        parameter SoAdSocketUdpAliveSupervisionTimeout.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_07_Rx.c_1626</srcid><srcstatus/><internalId>868</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_33_UdpAlive_Supervision</srcid><srcstatus/><internalId>1441</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_58_UdpAlive_Supervision_Timer</srcid><srcstatus/><internalId>1469</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>300</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00695</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If a UDP socket connection is configured with a SoAdSocketUdpAliveSupervisionTimeout, the alive
        supervision timer runs out and the remote address was not set by the upper layer, SoAd shall
        change the state of the socket connection to SOAD_SOCON_RECONNECT,
        deactive the alive supervision timer and
        reset the remote address to the configured remote address at SoAd_MainFunction(
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00695.a</srcid><srcstatus/><internalId>499</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00695.b</srcid><srcstatus/><internalId>500</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00695.c</srcid><srcstatus/><internalId>501</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>301</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00696</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd shall maintain a nPdu specific timer for each socket connection using the nPdu feature.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_62_nPduUdpTx_IndividualTimers</srcid><srcstatus/><internalId>1473</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>302</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00697</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If a PDU with TriggerMode set to TRIGGER_NEVER with a specific SoAdTxUdpTriggerTimeout get
        buffered SoAd shall set the nPdu specific timer to the value of SoAdTxUdpTriggerTimeout if the
        timer is not running or if it is lower than the current nPdu specific timer value.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_59_nPduUdpTx_PduTimeout_FIFO</srcid><srcstatus/><internalId>1470</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>303</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00698</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd_GetRemoteAddr() shall refuse the request if the ‎domain set in IpAddrPtr does not match
        the TcpIp_DomainType of the local ‎address related to the socket connection identified by
        SoConId and return ‎E_NOT_OK. If development error detection is enabled, the service ‎
        SoAd_GetRemoteAddr() shall also raise the development error ‎SOAD_E_INV_ARG.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_93_GetRemoteAddr_Ipv6</srcid><srcstatus/><internalId>1502</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_GetRemoteAddr_DomainNotMatch</srcid><srcstatus/><internalId>1880</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>304</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00699</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd_SetRemoteAddr() shall refuse the request if the domain set in RemoteAddrPtr does not match
        the TcpIp_DomainType of the local ‎address related to the socket connection identified by
        SoConId and return ‎E_NOT_OK. If development error detection is enabled, the service ‎
        SoAd_SetRemoteAddr() shall also raise the development error ‎SOAD_E_INV_ARG.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_SetRemoteAddr_Ipv6</srcid><srcstatus/><internalId>1351</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_00_SetRemoteAddr_Ipv4</srcid><srcstatus/><internalId>1353</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>305</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00700</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd_SetUniqueRemoteAddr() shall refuse the request if ‎the domain set in RemoteAddrPtr does
        not match the TcpIp_DomainType of the ‎local address related to the socket connection
        identified by SoConId and return ‎E_NOT_OK. If development error detection is enabled, the
        service ‎SoAd_SetUniqueRemoteAddr() shall also raise the development error ‎SOAD_E_INV_ARG.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_SetUniqueRemoteAddr_Ipv6</srcid><srcstatus/><internalId>1352</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_00_SetUniqueRemoteAddr_Ipv4</srcid><srcstatus/><internalId>1354</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>306</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00701</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: ‎SoAd_ReadDhcpHostNameOption() shall check that the
        service SoAd_Init was ‎previously called. If the check fails, SoAd_ReadDhcpHostNameOption()
        shall raise ‎the development error SOAD_E_UNINIT.
      </description>
      <comment>
        E_NOT_OK will be returned.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_ReadDhcpHostName_NoInit</srcid><srcstatus/><internalId>1271</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.DevError_UNINIT</srcid><srcstatus/><internalId>780</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>307</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00702</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: ‎SoAd_ReadDhcpHostNameOption() shall check parameter
        SoConId for being valid. ‎If the check fails, SoAd_ReadDhcpHostNameOption() shall raise the
        development ‎error SOAD_E_INV_ARG.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_ReadDhcpHostName_InvalidSoConId</srcid><srcstatus/><internalId>1314</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>308</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00703</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        The service SoAd_ReadDhcpHostNameOption() shall forward ‎the call to TcpIp_DhcpReadOption()
        with the parameter Option set to the option code ‎‎81 according to IETF RFC 4702, if the socket
        connection identified by SoConId is ‎related to a local address of the TcpIp_DomainType
        TCPIP_AF_INET.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_91_ReadDhcp_Ipv4</srcid><srcstatus/><internalId>1500</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_03_ReadDhcpHostName_OK</srcid><srcstatus/><internalId>1646</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>309</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00704</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        The service SoAd_ReadDhcpHostNameOption() shall forward ‎the call to TcpIp_DhcpV6ReadOption()
        with the parameter Option set to the option ‎code 39 according to IETF RFC 4704, if the socket
        connection identified by SoConId ‎is related to a local address of the TcpIp_DomainType
        TCPIP_AF_INET6.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_74_ReadDhcp_Ipv6</srcid><srcstatus/><internalId>1484</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>310</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00705</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: ‎SoAd_WriteDhcpHostNameOption() shall check that the
        service SoAd_Init was ‎previously called. If the check fails, SoAd_WriteDhcpHostNameOption()
        shall raise ‎the development error SOAD_E_UNINIT.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_WriteDhcpHostName_NoInit</srcid><srcstatus/><internalId>1272</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.DevError_UNINIT</srcid><srcstatus/><internalId>780</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>311</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00706</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: ‎SoAd_WriteDhcpHostNameOption() shall check
        parameter SoConId for being valid. ‎If the check fails, SoAd_WriteDhcpHostNameOption() shall
        raise the development ‎error SOAD_E_INV_ARG.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_WriteDhcpHostName_ParamInvalid</srcid><srcstatus/><internalId>1313</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>312</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00707</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        The service SoAd_WriteDhcpHostNameOption() shall forward ‎the call to TcpIp_DhcpWriteOption()
        with the parameter Option set to the option code ‎81 according to IETF RFC 4702, if the socket
        connection identified by SoConId is ‎related to a local address of the TcpIp_DomainType
        TCPIP_AF_INET.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_92_WriteDhcp_Ipv4</srcid><srcstatus/><internalId>1501</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_03_WriteDhcpHostNameOption_OK</srcid><srcstatus/><internalId>1647</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>313</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00708</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        The service SoAd_WriteDhcpHostNameOption() shall forward ‎the call to TcpIp_DhcpV6WriteOption(
        with the parameter Option set to the option ‎code 39 according to IETF RFC 4704, if the socket
        connection identified by SoConId ‎is related to a local address of the TcpIp_DomainType
        TCPIP_AF_INET6.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_75_WriteDhcp_Ipv6</srcid><srcstatus/><internalId>1485</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>314</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00709</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If SoAdSocketUdpStrictHeaderLenCheckEnabled is enabled SoAd shall check if the length of the
        received UDP message does match the accumulated length of all PDUs including their PDU headers
        prior to forwarding any data to an upper layer. If the their lengths are different SoAd shall
        silently drop the whole message without forwarding any data.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_76_UdpStrictHeaderLenCheck</srcid><srcstatus/><internalId>1486</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>315</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00710</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In case no valid PDU data was forwarded to an upper layer and the remote address of the socket
        connection was overwritten according to [SWS_SoAd_00592] in context of the same
        SoAd_RxIndication(), SoAd shall revert the remote address change and set the state of the
        socket connection back to SOAD_SOCON_RECONNECT.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_77_RevertRemoteAddr</srcid><srcstatus/><internalId>1487</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>316</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00711</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_IfSpecificRoutingGroupTransmit
        Syntax
        Std_ReturnType SoAd_IfSpecificRoutingGroupTransmit (SoAd_RoutingGroupIdType id,
        SoAd_SoConIdType SoConId)
        Service ID [hex] | 0x1f
        Sync/Async | Asynchronous
        Reentrancy | Reentrant
        Parameters (in) | id | routing group identifier indirectly specifying PDUs to be transmitted (
        after requesting the newest data from the related upper layer)
        SoConId | socket connection index specifying the socket connection on which the PDUs shall be
        transmitted
        Parameters (inout) | None
        Parameters (out) | None
        Return value | Std_ReturnType | E_OK The request was successful.E_NOT_OK The request was not
        successful.
        Description | Triggers the transmission of all If-TxPDUs identified by the parameter id on the
        socket connection specified by SoConId after requesting the data from the related upper layer.
        Available via | SoAd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00711.ServiceId</srcid><srcstatus/><internalId>506</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>317</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00712</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_IfSpecificRoutingGroupTransmit() shall check
        that the service SoAd_Init was previously called. If the check fails,
        SoAd_IfSpecificRoutingGroupTransmit() shall raise the development error SOAD_E_UNINIT.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_IfSpecificRoutingGroupTransmit_NoInit</srcid><srcstatus/><internalId>1280</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.DevError_UNINIT</srcid><srcstatus/><internalId>780</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>318</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00713</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_IfSpecificRoutingGroupTransmit() shall check
        parameter id for being valid (i.e. id refers a routing group that has configuration parameter
        SoAdRoutingGroupTxTriggerable set to TRUE). If the check fails,
        SoAd_IfSpecificRoutingGroupTransmit() shall raise the development error SOAD_E_INV_ARG.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_IfSpecificRoutingGroupTransmit_NotTrigg</srcid><srcstatus/><internalId>1357</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>319</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00714</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_EnableSpecificRouting
        Syntax
        Std_ReturnType SoAd_EnableSpecificRouting (SoAd_RoutingGroupIdType id, SoAd_SoConIdType SoConId)
        Service ID [hex] | 0x20
        Sync/Async | Synchronous
        Reentrancy | Reentrant
        Parameters (in) | id | routing group identifier specifying the routing group to be enabled
        SoConId | socket connection index specifying the socket connection on which the routing group
        shall be enabled
        Parameters (inout) | None
        Parameters (out) | None
        Return value | Std_ReturnType | E_OK The request was successful.E_NOT_OK The request was not
        successful.
        Description | Enables routing of a group of PDUs in the SoAd related to the RoutingGroup
        specified by parameter id only on the socket connection identified by SoConId.
        Available via | SoAd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00714.ServiceId</srcid><srcstatus/><internalId>519</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>320</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00715</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_EnableSpecificRouting() shall check that the
        service SoAd_Init was previously called. If the check fails, SoAd_EnableSpecificRouting() shall
        raise the development error SOAD_E_UNINIT.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_EnableSpecificRouting_NoInit</srcid><srcstatus/><internalId>1282</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.DevError_UNINIT</srcid><srcstatus/><internalId>780</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>321</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00716</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_EnableSpecificRouting() shall check parameter
        id for being valid. If the check fails, SoAd_EnableSpecificRouting() shall raise the
        development error SOAD_E_INV_ARG.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_EnableSpecificRouting_InvId</srcid><srcstatus/><internalId>1355</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_13_00_EnableSpecificRouting_InvRoutingGroup</srcid><srcstatus/><internalId>1833</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>322</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00717</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_DisableSpecificRouting
        Syntax
        Std_ReturnType SoAd_DisableSpecificRouting (SoAd_RoutingGroupIdType id, SoAd_SoConIdType
        SoConId)
        Service ID [hex] | 0x21
        Sync/Async | Synchronous
        Reentrancy | Reentrant
        Parameters (in) | id | routing group identifier specifying the routing group to be disabled
        SoConId | socket connection index specifying the socket connection on which the routing group
        shall be disabled
        Parameters (inout) | None
        Parameters (out) | None
        Return value | Std_ReturnType | E_OK The request was successful.E_NOT_OK The request was not
        successful.
        Description | Disables routing of a group of PDUs in the SoAd related to the RoutingGroup
        specified by parameter id only on the socket connection identified by SoConId.
        Available via | SoAd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00717.ServiceId</srcid><srcstatus/><internalId>521</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>323</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00718</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_DisableSpecificRouting() shall check that the
        service SoAd_Init was previously called. If the check fails, SoAd_DisableSpecificRouting()
        shall raise the development error SOAD_E_UNINIT.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_DisableSpecificRouting_NoInit</srcid><srcstatus/><internalId>1281</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.DevError_UNINIT</srcid><srcstatus/><internalId>780</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>324</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00719</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_DisableSpecificRouting() shall check parameter
        id for being valid. If the check fails, SoAd_DisableSpecificRouting() shall raise the
        development error SOAD_E_INV_ARG.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_DisableSpecificRouting_InvalidID</srcid><srcstatus/><internalId>1347</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>325</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00720</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        At SoAd_IfSpecificRoutingGroupTransmit() SoAd shall store a trigger transmit request for each
        SoAdPduRouteDest that contains a reference to the routing group identified by the parameter id
        for transmission on the socket connection identified by the parameter SoConId in the
        SoAd_MainFunction(
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_One_RoutingGroup</srcid><srcstatus/><internalId>1808</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_13_00_SpecificRoutingGroup_Disabled_Trigger_Tx</srcid><srcstatus/><internalId>1830</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_13_00_SpecificRouting_Trigger_Tx</srcid><srcstatus/><internalId>1831</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_13_00_GenUL_noTriggerTransmitFlag</srcid><srcstatus/><internalId>1832</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>326</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00721</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        For RoutingGroups that are referenced by a SoAdPduRouteDest that refers to a
        SocketConnectionGroup SoAd shall maintain independent states for each SocketConnection that is
        part of the referenced SocketConnectionGroup and handle them as if they were separate
        RoutingGroups.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_07_GeneratorCheck_ExtToIntMap_Specific_PduRoute</srcid><srcstatus/><internalId>1220</internalId></linkedfrom><linkedfrom><srcid>SoAd_ComTest_07_GeneratorCheck_ExtToIntMap_Specific_SocketRoute</srcid><srcstatus/><internalId>1221</internalId></linkedfrom><linkedfrom><srcid>SoAd_ComTest_07_GeneratorCheck_ExtToIntMap_Specific_SameSoConGroup</srcid><srcstatus/><internalId>1222</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>327</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00722</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd shall handle SoAdPduRoutes with SoAdPduRouteDests refering to a SocketConnectionGroup as
        if they were separate SoAdPduRouteDests refering to each SocketConnection of this Group.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00602</srcid><srcstatus/><internalId>216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>328</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00112</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketIpAddrAssignmentChgNotification
        Parameter Type: Boolean
        Parent Containers: SoAdSocketConnectionGroup,
        Description: Specifies if the local IP address assignment change notification callback function
        of the upper layer shall be called if the assignment of the local IP address used by this
        socket connection changes.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>329</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00723</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd_Init() initializes all global variables of a Socket Adaptor instance and puts all socket
        connections into the state SOAD_SOCON_OFFLINE.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_447</srcid><srcstatus/><internalId>885</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>330</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00724</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In case SoAd_GetSoConId() is called with a TxPduId related to a SoAdPduRoute with a fan-out (i.
        e. multiple SoAdPduRouteDest specified), SoAd_GetSoConId() shall skip further processings and
        return E_NOT_OK.
      </description>
      <comment>
        E_NOT_OK will be returned.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_TxPduFanOut_GetSoConId</srcid><srcstatus/><internalId>1817</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>331</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00728</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        To trigger PDU data from an upper layer SoAd shall set PduInfoType.SduDataPtr to the location
        of the buffer where the data shall be copied, set PduInfoType.SduDataLength to the length of
        this buffer and then call &lt;Up&gt;_[SoAd][If]-TriggerTransmit(
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_13_01_IfRoutingGroupTransmit_SinglePduRouteDest</srcid><srcstatus/><internalId>1839</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>332</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00155</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketTCPOptionFilterRef
        Parameter Type: Reference
        Parent Containers: SoAdSocketTcp,
        Description: Specifies which TCP option filter shall be applied on the related socket.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/TcpIp/TcpIpConfig/TcpIpTcpConfig/TcpIpTcpConfigOptionFilter
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.SoAdSocketTCPOptionFilterRef</srcid><srcstatus/><internalId>783</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>333</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00156</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketPathMTUEnable
        Parameter Type: Boolean
        Parent Containers: SoAdSocketConnectionGroup,
        Description: Specifies if path MTU discovery shall be performed for this connection. If this
        optional parameter is not available the default behavior configured for the controller in the
        TcpIp module via the parameter TcpIpIpV4PathMtuEnabled or TcpIpIpV6PathMtuEnabled is applied.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.SocketPathMTUEnable</srcid><srcstatus/><internalId>784</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>334</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00157</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketFlowLabel
        Parameter Type: Integer
        Parent Containers: SoAdSocketConnectionGroup,
        Description: The 20-bit Flow Label field in the IPv6 header may be used by a source to label
        sequences of packets for which it requests special handling by the IPv6 routers, such as non-
        default quality of service. If not set a Flow Label of zero is used to indicate packets that
        have not been labeled.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 1048575 (Type:
        Min-Value: 0 (Type:
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.SocketFlowLabel</srcid><srcstatus/><internalId>785</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>335</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00158</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketDifferentiatedServicesField
        Parameter Type: Integer
        Parent Containers: SoAdSocketConnectionGroup,
        Description: The 6-bit Differentiated Service Field in the IP headers may be used for
        classifying network traffic. If not set a value of zero is used to indicate packets that have
        not been classified.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: true
        Post-Build-Variant-Value: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: 63 (Type:
        Min-Value: 0 (Type:
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.SocketDifferentiatedServicesField</srcid><srcstatus/><internalId>786</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>336</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00159</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketUdpChecksumEnabled
        Parameter Type: Boolean
        Parent Containers: SoAdSocketUdp,
        Description: Specifies if UDP checksum calculation shall be enabled (TRUE) or skipped (FALSE)
        on the related socket. FALSE implies that the upper layer of the socket connection is either
        capable to handle malformed messages or applies a checksum mechanism itself.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.UdpChecksumEnabled</srcid><srcstatus/><internalId>787</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>337</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00160</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdTxPduCollectionSemantics
        Parameter Type: Enumeration
        Parent Containers: SoAdPduRoute,
        Description: Specifies if this PDU shall be collected using a queued or last-is-best semantics.
        This parameter is only relevant if the PDU collection feature is enabled. Shall only be set to
        SOAD_COLLECT_LAST_IS_BEST if the related upper layer is configured with SoAdIfTriggerTransmit
        set to TRUE.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Enumeration Literal: SOAD_COLLECT_LAST_IS_BEST, AUTOSAR_ECUC
        Enumeration Literal: SOAD_COLLECT_QUEUED, AUTOSAR_ECUC
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_01_nPduUdpTx_Last_Is_Best</srcid><srcstatus/><internalId>1509</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>338</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00161</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketSoConModeChgNotifUpperLayerRef
        Parameter Type: Reference
        Parent Containers: SoAdSocketConnectionGroup,
        Description: Reference to an additional upper layer that shall receive socket connection state
        changes (although it is not a direct upper layer of the socket connection)
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: false
        Post-Build-Variant-Value: false
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/SoAd/SoAdBswModules
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.SocketSoConModeChgNotifUpperLayer</srcid><srcstatus/><internalId>788</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>339</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00162</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdGetAndResetMeasurementDataApi
        Parameter Type: Boolean
        Parent Containers: SoAdGeneral,
        Description: Enables / Disables the Get and Reset Measurement Data API
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.GetAndResetMeasurementData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>949</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>340</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00010</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_GetAndResetMeasurementData
        Syntax
        Std_ReturnType SoAd_GetAndResetMeasurementData (SoAd_MeasurementIdxType MeasurementIdx, boolean
        MeasurementResetNeeded, uint32* MeasurementDataPtr)
        Service ID [hex] | 0x45
        Sync/Async | Synchronous
        Reentrancy | Reentrant
        Parameters (in) | MeasurementIdx | Data index of measurement data
        MeasurementResetNeeded | Flag to trigger a reset of the measurement data
        Parameters (inout) | None
        Parameters (out) | MeasurementDataPtr | Reference to data buffer, where to copy measurement
        data
        Return value | Std_ReturnType | E_OK: successfulE_NOT_OK: failed
        Description | Allows to read and reset detailed measurement data for diagnostic purposes. Get
        all MeasurementIdx's at once is not supported. SOAD_MEAS_ALL shall only be used to reset all
        MeasurementIdx's at once. A NULL_PTR shall be provided for MeasurementDataPtr in this case.
        Available via | SoAd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.GetAndResetMeasurementData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>949</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>341</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00729</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If SoAd_LocalIpAddrAssignmentChg() is called with the parameter IpAddrId set to a local address
        which is not referenced by any SoAdSocketConnectionGroup, SoAd shall ignore the notification
        and return without any further action.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_LocalIpAddrAssignmentChg_InvalidIpAddr</srcid><srcstatus/><internalId>1315</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>342</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00730</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd_TpChangeParameter() shall always reject requests by returning E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_1453</srcid><srcstatus/><internalId>887</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_TpChangeParameter_Uninit</srcid><srcstatus/><internalId>1631</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>343</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00731</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If SoAd_IfTransmit was called with PduInfoPtr-&gt;SduDataPtr set to NULL_PTR, SoAd shall use &lt;Up&gt;_[
        SoAd][If]TriggerTransmit&gt;() to retrieve the PDU data from the upper layer.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_124_IfTransmit_NullSduDataPtr_NoHeader</srcid><srcstatus/><internalId>1542</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_151_Udp_IfTransmit_NoTxCopy</srcid><srcstatus/><internalId>1568</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_IfTransmit_NullSduDataPtr_TriggerTransmit</srcid><srcstatus/><internalId>1819</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_3030</srcid><srcstatus/><internalId>845</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.Dsn.Func0101.Udp.IfTransmit.NullPtr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>947</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>344</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00732</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd shall only consider PduInfoPtr-&gt;SduDataPtr set to NULL_PTR as valid if
        SoAdIfTriggerTransmit is set to TRUE for the respective upper layer.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_126_IfTransmit_NullPtr_SoAdIfTriggerT_FALSE</srcid><srcstatus/><internalId>1544</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_3089</srcid><srcstatus/><internalId>849</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.Dsn.Func0101.Udp.IfTransmit.NullPtr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>947</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>345</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00733</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_ReleaseRemoteAddr
        Syntax
        void SoAd_ReleaseRemoteAddr (SoAd_SoConIdType SoConId)
        Service ID [hex] | 0x23
        Sync/Async | Synchronous
        Reentrancy | Reentrant for different SoConIds. Non reentrant for the same SoConId.
        Parameters (in) | SoConId | Index of the socket connection for which the remote address shall
        be released.
        Parameters (inout) | None
        Parameters (out) | None
        Return value | None
        Description | By this API service the remote address (IP address and port) of the specified
        socket connection shall be released, i.e. set back to the configured remote address setting.
        Available via | SoAd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_01_Con03_Udp_SoCon0_ReleaseRemoteAddress_TCP_OFFLINE</srcid><srcstatus/><internalId>1405</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.ASR43.SWS_SoAd_00733.ServiceId</srcid><srcstatus/><internalId>541</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>346</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00734</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In case the nPdu feature is used for a socket connection, the related PDU parameter
        SoAdTxPduCollectionSemantics is set to SOAD_COLLECT_LAST_IS_BEST and the upper layer doesn't
        provide all the requested data via &lt;Up&gt;_[SoAd][If]TriggerTransmit() in the context of
        SoAd_CopyTxData, SoAd shall abort the transmission and return E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_04_nPduUdpTx_NotEnoughBytes</srcid><srcstatus/><internalId>1515</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>347</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00735</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In case the nPdu feature is used for a socket connection and all PDUs are configured with
        SoAdTxPduCollectionSemantics set to SOAD_COLLECT_LAST_IS_BEST, SoAd shall only transmit the
        last instance of each PDU with the same PduId in the sequence their first instances were
        requested for transmission.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_01_nPduUdpTx_Last_Is_Best</srcid><srcstatus/><internalId>1509</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_01_nPduUdpTx_Last_Is_Best_2</srcid><srcstatus/><internalId>1510</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_02_nPduUdpTx_Last_Is_Best_ALWAYS</srcid><srcstatus/><internalId>1511</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>348</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00736</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd shall reject configurations in which the transmit properties (see
        SoAdTxPduCollectionSemantics) of the PDUs which are assigned to a socket connection are mixed.
        Furthermore all socket connnections of a socket connection group shall either be refered solely
        by PDUs with SOAD_COLLECT_LAST_IS_BEST or solely by PDUs with SOAD_COLLECT_QUEUED semantic.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_01_nPduUdpTx_Last_Is_Best</srcid><srcstatus/><internalId>1509</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_01_nPduUdpTx_Last_Is_Best_2</srcid><srcstatus/><internalId>1510</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>349</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00737</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        For all PDUs that have been stored for a socket connection using the nPdu feature, SoAd shall
        call the upper layer with the related transmit confirmation function (&lt;Up&gt;_[SoAd][If]
        TxConfirmation&gt;()) within the context of the SoAd_MainFunction() and with result set to
        E_OK if the related TcpIp_UdpTransmit() call was successful,
        E_NOT_OK if the transmission was not successful or cancelled for any other reason.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.IfTxConfirmationResult</srcid><srcstatus/><internalId>779</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>350</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00738</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: In case of a transmit request for a SoAdPduRoute
        that refers to a global PDU structure configured with a MetaDataItem of the type
        SOCKET_CONNECTION_ID_16 and the contained SoAdPduRouteDest refers to a socket connection group,
        SoAd shall raise the development error SOAD_E_INV_METADATA, if the socket connection identified
        by PduInfoType.MetaDataPtr is not part of the socket connection group of the related
        SoAdPduRouteDest.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.dsn.Func.MetaDataHandling</srcid><srcstatus/><internalId>946</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>351</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00739</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In case of a transmit request for a SoAdPduRoute that refers to a global PDU structure
        configured with a MetaDataItem of the type SOCKET_CONNECTION_ID_16 and the contained
        SoAdPduRouteDest refers to a socket connection group, SoAd shall only perform the transmission
        on the socket connection identified by PduInfoType.MetaDataPtr instead of the whole group.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.dsn.Func.MetaDataHandling</srcid><srcstatus/><internalId>946</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>352</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00740</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In case of a reception related to a SoAdSocketRouteDest, that refers to a global PDU structure
        configured with a MetaDataItem of the type SOCKET_CONNECTION_ID_16, which is contained in a
        SoAdSocketRoute that refers to a socket connection group, SoAd shall use PduInfoType.MetaDataPtr
        to provide the socket connection identifier (SoConId) where the PDU was received
        with &lt;Up&gt;_[SoAd][If]RxIndication().
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.dsn.Metadata.Tp.Tx_IncorrectSoConId</srcid><srcstatus/><internalId>1068</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Metadata.If.Tx.IncorrectSoConId</srcid><srcstatus/><internalId>1069</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>353</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00741</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Each time a socket connection state changes, SoAd shall notify the upper layer specified by
        SoAdSocketSoConModeChgNotifUpperLayerRef with the configured upper layer notification function
        Up&gt;_SoConModeChg() and the new state if the optional reference is set for the socket connection.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.SOAD_SOCON_WAITOFFLINE</srcid><srcstatus/><internalId>774</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>354</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00742</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If a UDP socket connection is configured with a SoAdSocketUdpAliveSupervisionTimeout and a
        datagram is received that passes the message acceptance filter, the timer shall be restarted
        with the value specified by the configuration parameter SoAdSocketUdpAliveSupervisionTimeout.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_07_Rx.c_1638</srcid><srcstatus/><internalId>869</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_34_UdpAlive_Supervision_Reset_Timer</srcid><srcstatus/><internalId>1442</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_162_RxIndication_Start_UdpAlive_ExactMatch</srcid><srcstatus/><internalId>1590</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>355</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00743</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd shall lock the remote address during the following situations:
        TCP socket connections not in state SOAD_SOCON_OFFLINE,
        active receptions,
        pending receptions of TP-PDUs,
        active transmissions,
        pending transmissions of the nPdu feature,
        pending transmissions initiated via SoAd_IfRoutingGroupTransmit() or
        SoAd_IfSpecificRoutingGroupTransmit(
        A locked remote address can't be modified by upper layers.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.dsn.RemoteAddressHandling.SetRemoteAddr.Udp.LockState</srcid><srcstatus/><internalId>1097</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>356</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00744</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled and SoConId refers to a socket connection with
        configuration parameter SoAdSocketAutomaticSoConSetup set to TRUE, the function
        SoAd_ReleaseRemoteAddr() shall raise the development error SOAD_E_INV_ARG.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_ReleaseRemoteAddr_NotManually</srcid><srcstatus/><internalId>1328</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>357</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00745</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        The function SoAd_ReleaseRemoteAddr() shall only immediately proceed if the SoConId refers to a
        socket connection which is not currently locked by the SoAd. If it is locked, the request shall
        be postponed to the SoAd_MainFunction() and executed once the lock is released.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_128_MainDuringSending_RemoteAddressReleased_Exact</srcid><srcstatus/><internalId>1579</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>358</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00746</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        The function SoAd_ReleaseRemoteAddr() shall reset the remote address of the socket connection
        referred by parameter SoConId to the configured remote address setting.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_02_100_ReleaseRemoteAddr_TCP</srcid><srcstatus/><internalId>1512</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_159_SetUniqueRemoteAddr_SoConGroup_Multiple_RemoteAny</srcid><srcstatus/><internalId>1587</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>359</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00747</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        In case the nPdu feature is used for a socket connection and the related PDU parameter
        SoAdTxPduCollectionSemantics is set to SOAD_COLLECT_LAST_IS_BEST, SoAd shall only store the
        transmission request instead of the PDU data. When SoAd needs to provide the PDU data, SoAd
        shall retrieve the data from the upper layer by calling &lt;Up&gt;_[SoAd][If]TriggerTransmit(
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_01_nPduUdpTx_Last_Is_Best</srcid><srcstatus/><internalId>1509</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_01_nPduUdpTx_Last_Is_Best_2</srcid><srcstatus/><internalId>1510</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_02_nPduUdpTx_Last_Is_Best_ALWAYS</srcid><srcstatus/><internalId>1511</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_03_nPduUdpTx_Last_Is_Best_Remaining_Length</srcid><srcstatus/><internalId>1514</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>360</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00748</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd_GetAndResetMeasurementData() shall return measurement data for selected measurement index.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_18_UDP_Inv_Port</srcid><srcstatus/><internalId>1769</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_18_UDP_Inv_Port_Reporting_OFF</srcid><srcstatus/><internalId>1770</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_18_TCP_Inv_Port</srcid><srcstatus/><internalId>1771</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.GetAndResetMeasurementData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>949</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>361</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00749</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        For measurement index SOAD_MEAS_DROP_TCP SoAd_GetAndResetMeasurementData() shall return the
        number of dropped TCP-Port PDUs.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_18_TCP_Inv_Port</srcid><srcstatus/><internalId>1771</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.GetAndResetMeasurementData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>949</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>362</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00750</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        For measurement index SOAD_MEAS_DROP_UDP SoAd_GetAndResetMeasurementData() shall return the
        number of dropped UDP-Port PDUs.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_18_UDP_Inv_Port</srcid><srcstatus/><internalId>1769</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_18_UDP_Inv_Port_Reporting_OFF</srcid><srcstatus/><internalId>1770</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.GetAndResetMeasurementData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>949</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>363</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00751</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd_GetAndResetMeasurementData() shall return E_NOT_OK if the requested measurement index is
        not supported.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_18_UDP_Inv_Port</srcid><srcstatus/><internalId>1769</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_18_UDP_Inv_Port_Reporting_OFF</srcid><srcstatus/><internalId>1770</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_18_TCP_Inv_Port</srcid><srcstatus/><internalId>1771</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.GetAndResetMeasurementData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>949</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>364</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00752</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd_GetAndResetMeasurementData() shall additionally reset the measurement data to 0 if the
        MeasurementResetNeeded is true. The reset shall be applied after measurement data has been read.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_18_UDP_Inv_Port</srcid><srcstatus/><internalId>1769</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_18_UDP_Inv_Port_Reporting_OFF</srcid><srcstatus/><internalId>1770</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_18_TCP_Inv_Port</srcid><srcstatus/><internalId>1771</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.GetAndResetMeasurementData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>949</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>365</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00753</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd_GetAndResetMeasurementData() shall reset all existing measurement data to 0, if
        MeasurementResetNeeded is true and measurement index is set to SOAD_MEAS_ALL.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_18_UDP_Inv_Port</srcid><srcstatus/><internalId>1769</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_18_UDP_Inv_Port_Reporting_OFF</srcid><srcstatus/><internalId>1770</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_18_TCP_Inv_Port</srcid><srcstatus/><internalId>1771</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.GetAndResetMeasurementData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>949</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>366</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00754</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        All measurement data which counts data shall not overrun.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_07_Rx.c_3431</srcid><srcstatus/><internalId>870</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SoAd_Int_07_Rx.c_4143</srcid><srcstatus/><internalId>878</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_18_UDP_MaxCounterValue</srcid><srcstatus/><internalId>1772</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_18_UDP_MaxCounterValue_Reporting_OFF</srcid><srcstatus/><internalId>1773</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_18_TCP_MaxCounterValue</srcid><srcstatus/><internalId>1774</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.GetAndResetMeasurementData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>949</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>367</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00755</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        SoAd_GetAndResetMeasurementData() shall accept MeasurementDataPtr set to NULL_PTR. In this case
        the measurement data shall not be copied.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_18_UDP_Inv_Port</srcid><srcstatus/><internalId>1769</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_18_UDP_Inv_Port_Reporting_OFF</srcid><srcstatus/><internalId>1770</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_18_TCP_Inv_Port</srcid><srcstatus/><internalId>1771</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.GetAndResetMeasurementData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>949</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>368</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00756</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_GetAndResetMeasurementData() shall check that
        the service SoAd_Init() was previously called. If the check fails,
        SoAd_GetAndResetMeasurementData() shall raise the development error SOAD_E_UNINIT.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_GetAndResetMeasurementData_NoInit</srcid><srcstatus/><internalId>1284</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.DevError_UNINIT</srcid><srcstatus/><internalId>780</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.GetAndResetMeasurementData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>949</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>369</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00757</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        The function SoAd_GetAndResetMeasurementData() shall be pre compile time configurable On/Off by
        the configuration parameter: SoAdGetAndResetMeasurementDataApi.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.GetAndResetMeasurementData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>949</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>370</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00758</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the measurement data is enabled (see SoAdGetAndResetMeasurementDataApi), SoAd shall
        increment the corresponding measurement data whenever a received PDU is discarded.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con7_RxIndication</srcid><srcstatus/><internalId>1383</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_66_Tcp_Transmit_Wildcard</srcid><srcstatus/><internalId>1476</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_18_UDP_Inv_Port</srcid><srcstatus/><internalId>1769</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_18_UDP_Inv_Port_Reporting_OFF</srcid><srcstatus/><internalId>1770</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_18_TCP_Inv_Port</srcid><srcstatus/><internalId>1771</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.GetAndResetMeasurementData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>949</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>371</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_91001</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SoAd_GetSoConMode
        Syntax
        void SoAd_GetSoConMode (SoAd_SoConIdType SoConId, SoAd_SoConModeType* ModePtr)
        Service ID [hex] | 0x22
        Sync/Async | Synchronous
        Reentrancy | Reentrant
        Parameters (in) | SoConId | socket connection index specifying the socket connection for which
        the state shall be returned.
        Parameters (inout) | None
        Parameters (out) | ModePtr | Pointer to memory where the socket connection state shall be
        stored.
        Return value | None
        Description | Returns current state of the socket connection specified by SoConId.
        Available via | SoAd.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.EB.GetSoConMode.ServiceId</srcid><srcstatus/><internalId>583</internalId></linkedfrom><linkedfrom><srcid>SoAd.EB.GetSoConMode.Uninit</srcid><srcstatus/><internalId>584</internalId></linkedfrom><linkedfrom><srcid>SoAd.EB.GetSoConMode.InvalidSoConId</srcid><srcstatus/><internalId>585</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.ServiceID</srcid><srcstatus/><internalId>776</internalId></linkedfrom><linkedfrom><srcid>dev.SoAd.ParameterNames</srcid><srcstatus/><internalId>777</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>372</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_91010</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | SoAd_MeasurementIdxType
        Kind | Type
        Derived from | uint8
        Range | SOAD_MEAS_DROP_TCP | 0x01 | Measurement index of dropped PDUs caused by invalid
        destination TCP-Port
        SOAD_MEAS_DROP_UDP | 0x02 | Measurement index of dropped PDUs caused by invalid destination UDP-
        Port
        SOAD_MEAS_RESERVED_1 | 0x03-0x7F | reserved by AUTOSAR
        SOAD_MEAS_RESERVED_2 | 0x80-0xEF | Vendor specific range
        SOAD_MEAS_RESERVED_3 | 0xF0-0xFE | reserved by AUTOSAR (future use)
        SOAD_MEAS_ALL | 0xFF | represents all measurement indexes
        Description | Index to select specific measurement data
        Available via | SoAd.h
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_18_TCP_Inv_Port</srcid><srcstatus/><internalId>1771</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.GetAndResetMeasurementData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>949</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>373</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00759</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Type of error | Related error code | Error value
        No buffer space available | SOAD_E_NOBUFSSoAd.SOAD_E_NOBUFS | 0x04
        Unknown PduHeader ID | SOAD_E_INV_PDUHEADER_IDSoAd.SOAD_E_INV_PDUHEADER_ID | 0x05
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.RuntimeError</srcid><srcstatus/><internalId>782</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>374</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00163</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSocketTcpTlsConnectionRef
        Parameter Type: Reference
        Parent Containers: SoAdSocketTcp,
        Description: If set the TCP socket is assigned to a TLS connection. The SoAd need to call
        Tcpip_ChangeParameter with the reference to the TLS connection as the parameter.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: false
        Post-Build-Variant-Value: false
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/TcpIp/TcpIpConfig/TcpIpTlsConfig/TcpIpTlsConnection
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.SoAdSocketTcpTlsConnectionRef</srcid><srcstatus/><internalId>789</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>375</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00001</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        See"SoAd_x_Module"
        Module Name | SoAdSoAd
        Module Description | Configuration of the SoAd (Socket Adaptor) module.
        Post-Build Variant Support | true
        Supported Config Variants | VARIANT-LINK-TIME, VARIANT-POST-BUILD, VARIANT-PRE-COMPILE
        Included containers: "SoAd_x_Included_Containers"
        Included Containers
        Container Name | Multiplicity | Scope / Dependency
        SoAdBswModules | 0..* | Each container describes a specific BSW module that the SoAd shall
        interface to.
        SoAdConfig | 1 | This container contains the configuration parameters and sub containers of the
        AUTOSAR SoAd module.
        SoAdGeneral | 1 | This container contains all global configuration parameters of SoAd.
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>376</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00124</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        See"SoAd_x_Container_x_SoAdBswModules_x_Parameter_x_SoAdBswModuleRef"
        Name | SoAdBswModuleRefSoAdBswModules.SoAdBswModuleRef
        Parent Container | SoAdBswModules
        Description | This is a reference to one BSW module's configuration (i.e. not the ECUC
        parameter definition template).Example, there could be several configurations of PduR and this
        reference selects one of them. SoAd has to figure out from the structure of the referenced BSW
        module's configuration, what kind of upper layer he deals with.In case of a CDD SoAd expects UL-
        APIs in form of _SoAd&lt;If|Tp&gt;&lt;function&gt; and expects CDD Pdu configuration structures according
        to the Ecu Configuration specification (chapter CDD module\Socket Adaptor).In case it is one of
        the standardized AUTOSAR BSW modules, the configuration structures and API names for
        interaction with SoAd are defined in the corresponding SWS.
        Multiplicity | 1
        Type | Foreign reference to [ ECUC-MODULE-CONFIGURATION-VALUES
        Post-Build Variant Value | false
        Value Configuration Class | Pre-compile time | X | All Variants
        Link time
        Post-build time
        Scope / Dependency | scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>377</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00760</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        For SoAdRoutingGroups that are referenced by a SoAdSocketRouteDest that belongs to a
        SoAdSocketRoute referring to a SocketConnectionGroup, SoAd shall maintain independent states
        for each socket connection that is part of the referenced SoAdSocketConnectionGroup and handle
        them as if they were separate SoAdRoutingGroups.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR R19-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_19_UDP_OnInit</srcid><srcstatus/><internalId>1775</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_19_UDP_EnableServiceInstance</srcid><srcstatus/><internalId>1776</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_19_UDP_EnableServiceInstanceTwice</srcid><srcstatus/><internalId>1777</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_19_UDP_DisableInactiveServiceInstance</srcid><srcstatus/><internalId>1778</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_19_UDP_SwitchServiceInstance</srcid><srcstatus/><internalId>1779</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_19_UDP_ParallelServiceInstance</srcid><srcstatus/><internalId>1780</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_19_UDP_EnableTwoRoutingGroupsDisableOne</srcid><srcstatus/><internalId>1783</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.dsn.Func0130.Rx.Udp.If.EnableServiceInstance</srcid><srcstatus/><internalId>1117</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>378</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00761</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If SoAd_EnableSpecificRouting() is called with SoConId belonging to a SocketConnectionGroup and
        for a SoAdRoutingGroup that is referenced by a SoAdSocketRouteDest that belongs to a
        SoAdSocketRoute referring to the same SocketConnectionGroup and that contains more than one
        SoAdSocketRouteDest, SoAd shall only enable the independent state for the socket connection if:
        the same SoAdSocketRouteDest is not active for any other socket connection of the same
        SocketConnectionGroup (i.e. SoAdSocketRouteDest is not already mapped to another socket
        connection) and
        no SoAdRoutingGroup is enabled on the socket connection which is referenced by another
        SoAdSocketRouteDest of the same SoAdSocketRoute (i.e. the socket connection is not mapped to
        another SoAdSocketRouteDest of the same SoAdSocketRoute)
        Otherwise, E_NOT_OK shall be returned.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR R19-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_19_UDP_TwoSoconSamePdu</srcid><srcstatus/><internalId>1781</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_19_UDP_TwoPdusForSameSoCon</srcid><srcstatus/><internalId>1782</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.dsn.Func0130.Rx.Udp.If.TwoPdusForSameSoCon</srcid><srcstatus/><internalId>1035</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0130.Rx.Udp.If.TwoSoConSamePdu</srcid><srcstatus/><internalId>1036</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0130.Rx.Udp.If.SwitchServiceInstance</srcid><srcstatus/><internalId>1119</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>379</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00164</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdEnableSecurityEventReporting
        Parameter Type: Boolean
        Parent Containers: SoAdGeneral,
        Description: Switches the reporting of security events to the IdsM: Tags: atp.Status=draft
        Introduction: - true: reporting is enabled. - false: reporting is disabled.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: ECU
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <furtherinfo>
        WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.
      </furtherinfo>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_TCP_Reporting_ON</srcid><srcstatus/><internalId>1784</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_TCP_Reporting_OFF</srcid><srcstatus/><internalId>1785</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_TCP_2_Reporting_ON</srcid><srcstatus/><internalId>1786</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_TCP_2_Reporting_OFF</srcid><srcstatus/><internalId>1787</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_TCP_3_Reporting_ON</srcid><srcstatus/><internalId>1788</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_TCP_3_Reporting_OFF</srcid><srcstatus/><internalId>1789</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_TCP_4_Reporting_ON</srcid><srcstatus/><internalId>1790</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_TCP_4_Reporting_OFF</srcid><srcstatus/><internalId>1791</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_UDP_Reporting_ON</srcid><srcstatus/><internalId>1792</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_UDP_Reporting_OFF</srcid><srcstatus/><internalId>1793</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_UDP_2_Reporting_ON</srcid><srcstatus/><internalId>1794</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_UDP_2_Reporting_OFF</srcid><srcstatus/><internalId>1795</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_UDP_3_Reporting_ON</srcid><srcstatus/><internalId>1796</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_UDP_3_Reporting_OFF</srcid><srcstatus/><internalId>1797</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_UDP_4_Reporting_ON</srcid><srcstatus/><internalId>1798</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_UDP_4_Reporting_OFF</srcid><srcstatus/><internalId>1799</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_MSG_RX_UDP_LENGTH_Reporting_ON</srcid><srcstatus/><internalId>1800</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_MSG_RX_UDP_LENGTH_Reporting_OFF</srcid><srcstatus/><internalId>1801</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_MSG_RX_UDP_LENGTH_2_Reporting_ON</srcid><srcstatus/><internalId>1802</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_MSG_RX_UDP_LENGTH_2_Reporting_OFF</srcid><srcstatus/><internalId>1803</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_MSG_RX_UDP_SOCKET_Reporting_ON</srcid><srcstatus/><internalId>1804</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_MSG_RX_UDP_SOCKET_Reporting_OFF</srcid><srcstatus/><internalId>1805</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_REJECTED_TCP_CONNECTION_Reporting_ON</srcid><srcstatus/><internalId>1806</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_REJECTED_TCP_CONNECTION_Reporting_OFF</srcid><srcstatus/><internalId>1807</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SoAd.xdm.m4_236</srcid><srcstatus/><internalId>913</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/SoAd_Extension.xdm.m4_93</srcid><srcstatus/><internalId>926</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0145.SecurityEventReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>962</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>380</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00165</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SoAdSecurityEventRefs
        Container Type: Sub-Container
        Parent Containers: SoAdGeneral,
        Description: Container for the references to IdsMEvent elements representing the security
        events that the SoAd module shall report to the IdsM in case the coresponding security related
        event occurs (and if SoAdEnableSecurityEventReporting is set to "true"). The standardized
        security events in this container can be extended by vendor-specific security events. Tags: atp.
        Status=draft
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Post-Build-Variant-Multiplicity: false
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SoAd.xdm.m4_244</srcid><srcstatus/><internalId>914</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/SoAd_Extension.xdm.m4_105</srcid><srcstatus/><internalId>927</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0145.SecurityEventReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>962</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>381</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00166</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SOAD_SEV_DROP_PDU_RX_TCP
        Parameter Type: Reference
        Parent Containers: SoAdSecurityEventRefs,
        Description: SoAd dropped a PDU. The PDU violates stack configuration and was received via a
        TCP socket. Tags: atp.Status=draft
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: false
        Post-Build-Variant-Value: false
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/IdsM/IdsMConfiguration/IdsMEvent
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_07_Rx.c_4120</srcid><srcstatus/><internalId>876</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/SoAd.xdm.m4_247</srcid><srcstatus/><internalId>915</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/SoAd_Extension.xdm.m4_127</srcid><srcstatus/><internalId>928</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_TCP_Reporting_ON</srcid><srcstatus/><internalId>1784</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_TCP_Reporting_OFF</srcid><srcstatus/><internalId>1785</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_TCP_2_Reporting_ON</srcid><srcstatus/><internalId>1786</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_TCP_2_Reporting_OFF</srcid><srcstatus/><internalId>1787</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_TCP_3_Reporting_ON</srcid><srcstatus/><internalId>1788</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_TCP_3_Reporting_OFF</srcid><srcstatus/><internalId>1789</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_TCP_4_Reporting_ON</srcid><srcstatus/><internalId>1790</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_TCP_4_Reporting_OFF</srcid><srcstatus/><internalId>1791</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00764</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>389</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.Func0145.SecurityEventReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>962</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>382</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00167</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SOAD_SEV_DROP_PDU_RX_UDP
        Parameter Type: Reference
        Parent Containers: SoAdSecurityEventRefs,
        Description: SoAd dropped a PDU. The PDU violates stack configuration and was received via a
        UDP socket. Tags: atp.Status=draft
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: false
        Post-Build-Variant-Value: false
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/IdsM/IdsMConfiguration/IdsMEvent
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_07_Rx.c_4108</srcid><srcstatus/><internalId>875</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/SoAd.xdm.m4_264</srcid><srcstatus/><internalId>916</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/SoAd_Extension.xdm.m4_150</srcid><srcstatus/><internalId>929</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_UDP_Reporting_ON</srcid><srcstatus/><internalId>1792</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_UDP_Reporting_OFF</srcid><srcstatus/><internalId>1793</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_UDP_2_Reporting_ON</srcid><srcstatus/><internalId>1794</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_UDP_2_Reporting_OFF</srcid><srcstatus/><internalId>1795</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_UDP_3_Reporting_ON</srcid><srcstatus/><internalId>1796</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_UDP_3_Reporting_OFF</srcid><srcstatus/><internalId>1797</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_UDP_4_Reporting_ON</srcid><srcstatus/><internalId>1798</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_UDP_4_Reporting_OFF</srcid><srcstatus/><internalId>1799</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00764</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>389</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.Func0145.SecurityEventReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>962</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>383</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00168</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SOAD_SEV_DROP_MSG_RX_UDP_LENGTH
        Parameter Type: Reference
        Parent Containers: SoAdSecurityEventRefs,
        Description: SoAd dropped a message. The message contains at least one PDU which violates stack
        configuration and was received via a UDP socket . Tags: atp.Status=draft
        Introduction: The violation relates to the length of the PDUs compared to the overall length of
        the message.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: false
        Post-Build-Variant-Value: false
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/IdsM/IdsMConfiguration/IdsMEvent
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_07_Rx.c_4167</srcid><srcstatus/><internalId>880</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/SoAd.xdm.m4_281</srcid><srcstatus/><internalId>917</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/SoAd_Extension.xdm.m4_173</srcid><srcstatus/><internalId>930</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_MSG_RX_UDP_LENGTH_Reporting_ON</srcid><srcstatus/><internalId>1800</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_MSG_RX_UDP_LENGTH_Reporting_OFF</srcid><srcstatus/><internalId>1801</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_MSG_RX_UDP_LENGTH_2_Reporting_ON</srcid><srcstatus/><internalId>1802</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_MSG_RX_UDP_LENGTH_2_Reporting_OFF</srcid><srcstatus/><internalId>1803</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00764</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>389</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.Func0145.SecurityEventReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>962</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>384</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00169</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SOAD_SEV_DROP_MSG_RX_UDP_SOCKET
        Parameter Type: Reference
        Parent Containers: SoAdSecurityEventRefs,
        Description: SoAd received a UDP message which violates stack configuration and was dropped.
        Tags: atp.Status=draft
        Introduction: No suitable socket connection matching to configuration was found.
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: false
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/IdsM/IdsMConfiguration/IdsMEvent
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_07_Rx.c_4155</srcid><srcstatus/><internalId>879</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/SoAd.xdm.m4_298</srcid><srcstatus/><internalId>918</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/SoAd_Extension.xdm.m4_199</srcid><srcstatus/><internalId>931</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_MSG_RX_UDP_SOCKET_Reporting_ON</srcid><srcstatus/><internalId>1804</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_MSG_RX_UDP_SOCKET_Reporting_OFF</srcid><srcstatus/><internalId>1805</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00764</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>389</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.Func0145.SecurityEventReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>962</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>385</internalId></specobject>
    <specobject>
      <id>SoAd.ECUC_SoAd_00170</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SOAD_SEV_REJECTED_TCP_CONNECTION
        Parameter Type: Reference
        Parent Containers: SoAdSecurityEventRefs,
        Description: SoAd rejected a TCP connection. The connection request violates stack
        configuration. Tags: atp.Status=draft
        Lower Multiplicity: 0
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Multiplicity: false
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/IdsM/IdsMConfiguration/IdsMEvent
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_07_Rx.c_4132</srcid><srcstatus/><internalId>877</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/SoAd.xdm.m4_315</srcid><srcstatus/><internalId>919</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/SoAd_Extension.xdm.m4_223</srcid><srcstatus/><internalId>932</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_REJECTED_TCP_CONNECTION_Reporting_ON</srcid><srcstatus/><internalId>1806</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_REJECTED_TCP_CONNECTION_Reporting_OFF</srcid><srcstatus/><internalId>1807</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00764</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>389</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.Func0145.SecurityEventReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>962</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>386</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00762</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the function SoAd_ReleaseRemoteAddr() resets the remote address of a socket connection to a
        configured remote address containing wildcards and socket connection is in mode
        SOAD_SOCON_ONLINE, SoAd shall change the mode of the socket connection to SOAD_SOCON_RECONNECT.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.Udp.RemoteAddrAndPort_WildCards</srcid><srcstatus/><internalId>1094</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>387</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00763</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        If security event reporting has been enabled for the SoAd module (
        SoAdEnableSecurityEventReporting = true) the respective security events shall be reported to
        the IdsM via the interfaces defined in AUTOSAR_SWS_BSWGeneral [REF]
      </description>
      <furtherinfo>
        WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.
      </furtherinfo>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_TCP_Reporting_ON</srcid><srcstatus/><internalId>1784</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_TCP_Reporting_OFF</srcid><srcstatus/><internalId>1785</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_TCP_2_Reporting_ON</srcid><srcstatus/><internalId>1786</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_TCP_2_Reporting_OFF</srcid><srcstatus/><internalId>1787</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_TCP_3_Reporting_ON</srcid><srcstatus/><internalId>1788</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_TCP_3_Reporting_OFF</srcid><srcstatus/><internalId>1789</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_TCP_4_Reporting_ON</srcid><srcstatus/><internalId>1790</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_TCP_4_Reporting_OFF</srcid><srcstatus/><internalId>1791</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_UDP_Reporting_ON</srcid><srcstatus/><internalId>1792</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_UDP_Reporting_OFF</srcid><srcstatus/><internalId>1793</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_UDP_2_Reporting_ON</srcid><srcstatus/><internalId>1794</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_UDP_2_Reporting_OFF</srcid><srcstatus/><internalId>1795</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_UDP_3_Reporting_ON</srcid><srcstatus/><internalId>1796</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_UDP_3_Reporting_OFF</srcid><srcstatus/><internalId>1797</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_UDP_4_Reporting_ON</srcid><srcstatus/><internalId>1798</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_UDP_4_Reporting_OFF</srcid><srcstatus/><internalId>1799</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_MSG_RX_UDP_LENGTH_Reporting_ON</srcid><srcstatus/><internalId>1800</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_MSG_RX_UDP_LENGTH_Reporting_OFF</srcid><srcstatus/><internalId>1801</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_MSG_RX_UDP_LENGTH_2_Reporting_ON</srcid><srcstatus/><internalId>1802</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_MSG_RX_UDP_LENGTH_2_Reporting_OFF</srcid><srcstatus/><internalId>1803</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_MSG_RX_UDP_SOCKET_Reporting_ON</srcid><srcstatus/><internalId>1804</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_DROP_MSG_RX_UDP_SOCKET_Reporting_OFF</srcid><srcstatus/><internalId>1805</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_REJECTED_TCP_CONNECTION_Reporting_ON</srcid><srcstatus/><internalId>1806</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_20_SOAD_SEV_REJECTED_TCP_CONNECTION_Reporting_OFF</srcid><srcstatus/><internalId>1807</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0145.SecurityEventReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>962</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>388</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00764</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SoAd_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | Description | ID
        SOAD_SEV_DROP_PDU_RX_TCP | SoAd dropped a PDU. The PDU violates stack configuration and was
        received via a TCP socket. | 5
        SOAD_SEV_DROP_PDU_RX_UDP | SoAd dropped a PDU. The PDU violates stack configuration and was
        received via a UDP socket. | 6
        SOAD_SEV_DROP_MSG_RX_UDP_LENGTH | SoAd dropped a message. The message contains at least one PDU
        which violates stack configuration and was received via a UDP socket. The violation relates to
        the length of the PDUs compared to the overall length of the message. | 7
        SOAD_SEV_DROP_MSG_RX_UDP_SOCKET | SoAd received a UDP message which violates stack
        configuration and was dropped. No suitable socket connection matching to configuration was
        found. | 8
        SOAD_SEV_REJECTED_TCP_CONNECTION | SoAd rejected a TCP connection. The connection request
        violates stack configuration. | 9
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.ECUC_SoAd_00166</srcid><srcstatus/><internalId>382</internalId></linkedfrom><linkedfrom><srcid>SoAd.ECUC_SoAd_00167</srcid><srcstatus/><internalId>383</internalId></linkedfrom><linkedfrom><srcid>SoAd.ECUC_SoAd_00168</srcid><srcstatus/><internalId>384</internalId></linkedfrom><linkedfrom><srcid>SoAd.ECUC_SoAd_00169</srcid><srcstatus/><internalId>385</internalId></linkedfrom><linkedfrom><srcid>SoAd.ECUC_SoAd_00170</srcid><srcstatus/><internalId>386</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0145.SecurityEventReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>962</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>389</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>SoAd.SWS_SoAd_00589.a</id>
      <status>approved</status>
      <version>1</version>
      <description>In the SoAd_MainFunction, SoAd shall try to open each
        socket connection which fulfills all of the following criterias:
        (1) No TcpIp socket is assigned to the socket connection
        (2) Open is
            (a) explicitly requested by a previous SoAd_OpenSoCon() call
                which has not been revoked by a following SoAd_CloseSoCon() call
        (3) remote address is set (either specified by configuration or set via the function
            SoAd_SetRemoteAddr())
        (4) local IP address is assigned, i.e. SoAd_LocalIpAddrAssignmentChg()
            has been called with the related LocalAddrId and TCPIP_IPADDR_STATE_-
            ASSIGNED as State.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con9_OpenSoCon</srcid><srcstatus/><internalId>1369</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con3_OpenSoCon</srcid><srcstatus/><internalId>1376</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con7_OpenSoCon</srcid><srcstatus/><internalId>1382</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con2_OpenSoCon</srcid><srcstatus/><internalId>1395</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00589</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>204</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00588</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>203</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>390</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00589.b</id>
      <status>approved</status>
      <version>1</version>
      <description>In the SoAd_MainFunction, SoAd shall try to open each
        socket connection which fulfills all of the following criterias:
        (1) No TcpIp socket is assigned to the socket connection
        (2) Open is
            (b) implicitly requested when SoAdSocketAutomaticSoConSetup is TRUE
        (3) remote address is set (either specified by configuration or set via the function
            SoAd_SetRemoteAddr())
        (4) local IP address is assigned, i.e. SoAd_LocalIpAddrAssignmentChg()
            has been called with the related LocalAddrId and TCPIP_IPADDR_STATE_-
            ASSIGNED as State.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con10_Open</srcid><srcstatus/><internalId>1388</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_08_Msg_Acceptance_Filter_Off</srcid><srcstatus/><internalId>1740</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_07_Accept_Multiple_Cons</srcid><srcstatus/><internalId>1809</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00589</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>204</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>391</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00590.1</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall perform the following actions within
        SoAd_MainFunction() to open either a UDP socket connection which is part of a
        socket connection group containing a single socket connection (i.e. there is only one
        socket connection in the socket connection group configuration container) or a TCP
        socket connection with SoAdSocketTcpInitiate set to TRUE:
        (1) Get an appropriate socket from TcpIp by calling TcpIp_SoAdGetSocket()
            with the TcpIp_DomainType implicitly specified by
            SoAdSocketLocalAddressRef, and the protocol type specified by
            SoAdSocketProtocol.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_08_Msg_Acceptance_Filter_Off</srcid><srcstatus/><internalId>1740</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_07_Accept_Multiple_Cons</srcid><srcstatus/><internalId>1809</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00590</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>392</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00590.2</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall perform the following actions within
        SoAd_MainFunction() to open either a UDP socket connection which is part of a
        socket connection group containing a single socket connection (i.e. there is only one
        socket connection in the socket connection group configuration container) or a TCP
        socket connection with SoAdSocketTcpInitiate set to TRUE:
        (2) Change the socket specific parameters according to [SWS_SoAd_00689].</description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00689</srcid><srcstatus/><internalId>289</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00590</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>393</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00590.3</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall perform the following actions within
        SoAd_MainFunction() to open either a UDP socket connection which is part of a
        socket connection group containing a single socket connection (i.e. there is only one
        socket connection in the socket connection group configuration container) or a TCP
        socket connection with SoAdSocketTcpInitiate set to TRUE:
        (3) Bind the socket to the local address and port by calling TcpIp_Bind() with
            the local address identifier specified by SoAdSocketLocalAddressRef and
            local port specified by SoAdSocketLocalPort.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_08_Msg_Acceptance_Filter_Off</srcid><srcstatus/><internalId>1740</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_07_Accept_Multiple_Cons</srcid><srcstatus/><internalId>1809</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00590</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>394</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00590.4</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall perform the following actions within
        SoAd_MainFunction() to open either a UDP socket connection which is part of a
        socket connection group containing a single socket connection (i.e. there is only one
        socket connection in the socket connection group configuration container) or a TCP
        socket connection with SoAdSocketTcpInitiate set to TRUE:
        (4) In case of a TCP socket initiate the TCP connection by calling
            TcpIp_TcpConnect().</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_TCP_Connect_NotOK</srcid><srcstatus/><internalId>1664</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00590</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>395</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00638.1a</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall perform the following actions within
        SoAd_MainFunction() to open a TCP socket connection with SoAdSocketTcpInitiate set to FALSE:
        (1) In case no Listen-Socket is assigned to the socket connection:
            (a) Get an appropriate socket from TcpIp by calling
                TcpIp_SoAdGetSocket() with the TcpIp_DomainType implicitly
                specified by SoAdSocketLocalAddressRef, and the protocol type
                specified by SoAdSocketProtocol.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_01_Tcp_MultipleSocketConnections_Match</srcid><srcstatus/><internalId>1410</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_02_Tcp_MultipleSocketConnections_NoMatch</srcid><srcstatus/><internalId>1411</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_03_ListenSocket_Close</srcid><srcstatus/><internalId>1643</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00638</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>246</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>396</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00638.1b</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall perform the following actions within
        SoAd_MainFunction() to open a TCP socket connection with SoAdSocketTcpInitiate set to FALSE:
        (1) In case no Listen-Socket is assigned to the socket connection:
            (b) Change the socket specific parameters according to [SWS_SoAd_00689].</description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00689</srcid><srcstatus/><internalId>289</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00638</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>246</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>397</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00638.1c</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall perform the following actions within
        SoAd_MainFunction() to open a TCP socket connection with SoAdSocketTcpInitiate set to FALSE:
        (1) In case no Listen-Socket is assigned to the socket connection:
            (c) Bind the socket to the local address and port by calling TcpIp_Bind()
                with the local address identifier specified by SoAdSocketLocalAddressRef
                and local port specified by SoAdSocketLocalPort.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_01_Tcp_MultipleSocketConnections_Match</srcid><srcstatus/><internalId>1410</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_02_Tcp_MultipleSocketConnections_NoMatch</srcid><srcstatus/><internalId>1411</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_03_ListenSocket_Close</srcid><srcstatus/><internalId>1643</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00638</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>246</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>398</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00638.1d</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall perform the following actions within
        SoAd_MainFunction() to open a TCP socket connection with SoAdSocketTcpInitiate set to FALSE:
        (1) In case no Listen-Socket is assigned to the socket connection:
            (d) Assign the Listen-Socket to the socket connection group.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_01_Tcp_MultipleSocketConnections_Match</srcid><srcstatus/><internalId>1410</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_02_Tcp_MultipleSocketConnections_NoMatch</srcid><srcstatus/><internalId>1411</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00638</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>246</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>399</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00638.1e</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall perform the following actions within
        SoAd_MainFunction() to open a TCP socket connection with SoAdSocketTcpInitiate set to FALSE:
        (1) In case no Listen-Socket is assigned to the socket connection:
            (e) Activate the socket connection to accept connections from remote nodes.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_01_Tcp_MultipleSocketConnections_Match</srcid><srcstatus/><internalId>1410</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_02_Tcp_MultipleSocketConnections_NoMatch</srcid><srcstatus/><internalId>1411</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00638</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>246</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>400</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00638.1f</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall perform the following actions within
        SoAd_MainFunction() to open a TCP socket connection with SoAdSocketTcpInitiate set to FALSE:
        (1) In case no Listen-Socket is assigned to the socket connection:
            (f) Listen for a remote connection requests on the Listen-Socket by calling
                TcpIp_TcpListen() with MaxChannels set to the number of socket
                connections that are part of the TCP socket connection group.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_ListenSocket_Close</srcid><srcstatus/><internalId>1643</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00638</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>246</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>401</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00638.2a</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall perform the following actions within
        SoAd_MainFunction() to open a TCP socket connection with SoAdSocketTcpInitiate set to FALSE:
        (2) In case the Listen-Socket is already assigned to the socket connection:
            (a) Activate the socket connection to accept connections from remote nodes.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_12_Tcp_OpenedListenSocket</srcid><srcstatus/><internalId>1421</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00638</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>246</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>402</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00639.1a</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall perform the following actions within
        SoAd_MainFunction() to open a UDP socket connection which is part of a socket
        connection group containing multiple socket connections (i.e. there is more than one
        socket connection in the socket connection group configuration container):
        (1) In case no UDP socket is assigned to the socket connection group:
            (a) Get an appropriate socket from TcpIp by calling
                TcpIp_SoAdGetSocket() with the domain type implicitly specified by
                SoAdSocketLocalAddressRef, and the protocol type specified by
                SoAdSocketProtocol.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_00_Udp_MultipleSocketConnections</srcid><srcstatus/><internalId>1409</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00639</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>247</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>403</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00639.1b</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall perform the following actions within
        SoAd_MainFunction() to open a UDP socket connection which is part of a socket
        connection group containing multiple socket connections (i.e. there is more than one
        socket connection in the socket connection group configuration container):
        (1) In case no UDP socket is assigned to the socket connection group:
            (b) Change the socket specific parameters according to [SWS_SoAd_00689].</description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00689</srcid><srcstatus/><internalId>289</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00639</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>247</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>404</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00639.1c</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall perform the following actions within
        SoAd_MainFunction() to open a UDP socket connection which is part of a socket
        connection group containing multiple socket connections (i.e. there is more than one
        socket connection in the socket connection group configuration container):
        (1) In case no UDP socket is assigned to the socket connection group:
            (c) Bind the socket to the local address and port by calling TcpIp_Bind()
                with the local address identifier specified by SoAdSocketLocalAddressRef
                and local port specified by SoAdSocketLocalPort.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_00_Udp_MultipleSocketConnections</srcid><srcstatus/><internalId>1409</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00639</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>247</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>405</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00639.1d</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall perform the following actions within
        SoAd_MainFunction() to open a UDP socket connection which is part of a socket
        connection group containing multiple socket connections (i.e. there is more than one
        socket connection in the socket connection group configuration container):
        (1) In case no UDP socket is assigned to the socket connection group:
            (d) Assign the UDP socket to the socket connection group.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_00_Udp_MultipleSocketConnections</srcid><srcstatus/><internalId>1409</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00639</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>247</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>406</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00639.1e</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall perform the following actions within
        SoAd_MainFunction() to open a UDP socket connection which is part of a socket
        connection group containing multiple socket connections (i.e. there is more than one
        socket connection in the socket connection group configuration container):
        (1) In case no UDP socket is assigned to the socket connection group:
            (e) Activate the socket connection for communication via the shared UDP
                socket of the socket connection group.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_00_Udp_MultipleSocketConnections</srcid><srcstatus/><internalId>1409</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00639</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>247</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>407</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00639.2a</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall perform the following actions within
        SoAd_MainFunction() to open a UDP socket connection which is part of a socket
        connection group containing multiple socket connections (i.e. there is more than one
        socket connection in the socket connection group configuration container):
        (2) In case the UDP socket is already assigned to the socket connection group:
            (a) Activate the socket connection for communication via the shared UDP socket of
                the socket connection group.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_00_Udp_MultipleSocketConnections</srcid><srcstatus/><internalId>1409</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00639</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>247</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>408</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00689.1</id>
      <status>approved</status>
      <version>1</version>
      <description>In case socket related parameters shall be changed as part
        of allocating a new socket, SoAd shall change the parameters according to the
        configuration of the associated socket connection by calling
        TcpIp_ChangeParameter() with ParameterId and ParameterValue for each
        related clause as specified below:
        (1) In case of a TCP socket: TCPIP_PARAMID_TCP_RXWND_MAX and the
            value specified by SoAdSocketTpRxBufferMin if the optional parameter is
            enabled.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_ListenSocket_Close</srcid><srcstatus/><internalId>1643</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_03_KeepAliveEnabled</srcid><srcstatus/><internalId>1644</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00689</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>289</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>409</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00689.2</id>
      <status>approved</status>
      <version>1</version>
      <description>In case socket related parameters shall be changed as part
        of allocating a new socket, SoAd shall change the parameters according to the
        configuration of the associated socket connection by calling
        TcpIp_ChangeParameter() with ParameterId and ParameterValue for each
        related clause as specified below:
        (2) TCPIP_PARAMID_FRAMEPRIO and the value specified by
            SoAdSocketFramePriority if the optional parameter is enabled.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con9_OpenSoCon</srcid><srcstatus/><internalId>1369</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00689</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>289</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>410</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00689.3</id>
      <status>approved</status>
      <version>1</version>
      <description>In case socket related parameters shall be changed as part
        of allocating a new socket, SoAd shall change the parameters according to the
        configuration of the associated socket connection by calling
        TcpIp_ChangeParameter() with ParameterId and ParameterValue for each
        related clause as specified below:
        (3) In case of a TCP socket: TCPIP_PARAMID_TCP_NAGLE and the value 0x01
            if the related optional parameter SoAdSocketTcpNoDelay is set to FALSE or
            0x00 if the parameter is set to TRUE.</description>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.TcpIp_ChangeParameter</srcid><srcstatus/><internalId>757</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00689</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>289</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>411</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00689.4</id>
      <status>approved</status>
      <version>1</version>
      <description>In case socket related parameters shall be changed as part
        of allocating a new socket, SoAd shall change the parameters according to the
        configuration of the associated socket connection by calling
        TcpIp_ChangeParameter() with ParameterId and ParameterValue for each
        related clause as specified below:
        (4) In case of a TCP socket: TCPIP_PARAMID_TCP_KEEPALIVE and the value
            specified by SoAdSocketTcpKeepAlive.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_ListenSocket_Close</srcid><srcstatus/><internalId>1643</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_03_KeepAliveEnabled</srcid><srcstatus/><internalId>1644</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00689</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>289</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>412</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00689.5</id>
      <status>approved</status>
      <version>1</version>
      <description>In case socket related parameters shall be changed as part
        of allocating a new socket, SoAd shall change the parameters according to the
        configuration of the associated socket connection by calling
        TcpIp_ChangeParameter() with ParameterId and ParameterValue for each
        related clause as specified below:
        (5) In case of a TCP socket: TCPIP_PARAMID_TCP_KEEPALIVE_TIME and the
            value specified by SoAdSocketTcpKeepAliveTime if the optional parameter is enabled.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_KeepAliveEnabled</srcid><srcstatus/><internalId>1644</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00689</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>289</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>413</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00689.6</id>
      <status>approved</status>
      <version>1</version>
      <description>In case socket related parameters shall be changed as part
        of allocating a new socket, SoAd shall change the parameters according to the
        configuration of the associated socket connection by calling
        TcpIp_ChangeParameter() with ParameterId and ParameterValue for each
        related clause as specified below:
        (6) In case of a TCP socket:
            TCPIP_PARAMID_TCP_KEEPALIVE_PROBES_MAX and the value specified
            by SoAdSocketTcpKeepAliveProbesMax if the optional parameter is enabled.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_KeepAliveEnabled</srcid><srcstatus/><internalId>1644</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00689</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>289</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>414</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00689.7</id>
      <status>approved</status>
      <version>1</version>
      <description>In case socket related parameters shall be changed as part
        of allocating a new socket, SoAd shall change the parameters according to the
        configuration of the associated socket connection by calling
        TcpIp_ChangeParameter() with ParameterId and ParameterValue for each
        related clause as specified below:
        (7) In case of a TCP socket: TCPIP_PARAMID_TCP_KEEPALIVE_INTERVAL
            and the value specified by SoAdSocketTcpKeepAliveInterval if the optional
            parameter is enabled.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_KeepAliveEnabled</srcid><srcstatus/><internalId>1644</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00689</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>289</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>415</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00686.1</id>
      <status>approved</status>
      <version>1</version>
      <description>Within SoAd_MainFunction and after successfully
        performing the open actions, SoAd shall change the state of the socket connection to
        SOAD_SOCON_RECONNECT in case of
        (1) a TCP socket connection.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_128_Tcp_SetUniqueRemoteAddr_Wildcard</srcid><srcstatus/><internalId>1546</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_17_ReceiveOnSocketGroup</srcid><srcstatus/><internalId>1767</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00686</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>286</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>416</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00686.2</id>
      <status>approved</status>
      <version>1</version>
      <description>Within SoAd_MainFunction and after successfully
        performing the open actions, SoAd shall change the state of the socket connection to
        SOAD_SOCON_RECONNECT in case of
        (2) a UDP socket connection that is configured with a remote address containing wildcards.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con7_OpenSoCon</srcid><srcstatus/><internalId>1382</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00686</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>286</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>417</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00594.Match</id>
      <status>approved</status>
      <version>1</version>
      <description>At SoAd_TcpAccepted, SoAd shall perform the following
        actions if the TCP SoAdSocketConnectionGroup related to SocketId has
        SoAdSocketTcpInitiate set to FALSE:
        (1) choose one of the socket connections using the best match algorithm (see
            [SWS_SoAd_00680]), and proceed with the selected socket connection
        (2) overwrite the remote address parts specified with wildcards (e.g. remote IP
            address set to TCPIP_IPADDR_ANY) with the related source address parts of
            the received message if the remote address set for the socket connection
            contains wildcards
        (3) assign the TcpIp socket used for the established connection and provided as
            parameter SocketIdConnected to the chosen socket connection,
        (4) change the state of this socket connection to SOAD_SOCON_ONLINE and
            return E_OK.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_01_Tcp_MultipleSocketConnections_Match</srcid><srcstatus/><internalId>1410</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00594</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>418</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00594.NoMatch</id>
      <status>approved</status>
      <version>1</version>
      <description>At SoAd_TcpAccepted, SoAd shall perform the following actions if the TCP
        SoAdSocketConnectionGroup related to SocketId has SoAdSocketTcpInitiate set to FALSE:
          - Choose one of the socket connections using the best match algorithm (see
          [SWS_SoAd_00680]) and skip further processing and return with E_NOT_OK
          if no match can be found.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_02_Tcp_MultipleSocketConnections_NoMatch</srcid><srcstatus/><internalId>1411</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_08_Tcp_MultipleSocketConnections_NoMatch</srcid><srcstatus/><internalId>1417</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00594</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>419</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00636.1</id>
      <status>approved</status>
      <version>1</version>
      <description>At SoAd_TcpAccepted, SoAd shall perform the following
        actions if the TCP SoAdSocketConnectionGroup related to SocketId has both
        SoAdSocketTcpInitiate and SoAdSocketMsgAcceptanceFilterEnabled set to FALSE
        and is not online (i.e. current connection state not SOAD_SOCON_ONLINE):
        (1) assign the TcpIp socket used for the established connection and provided as
            parameter SocketIdConnected to the socket connection.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_09_Tcp_MsgFilterOff_Accepted</srcid><srcstatus/><internalId>1418</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00636</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>244</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>420</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00636.2</id>
      <status>approved</status>
      <version>1</version>
      <description>At SoAd_TcpAccepted, SoAd shall perform the following
        actions if the TCP SoAdSocketConnectionGroup related to SocketId has both
        SoAdSocketTcpInitiate and SoAdSocketMsgAcceptanceFilterEnabled set to FALSE
        and is not online (i.e. current connection state not SOAD_SOCON_ONLINE):
        (2) change the state of the socket connection to SOAD_SOCON_ONLINE and return E_OK.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_09_Tcp_MsgFilterOff_Accepted</srcid><srcstatus/><internalId>1418</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00636</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>244</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>421</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00637.1</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall perform the following actions within SoAd_MainFunction() to close a
        socket connection:
        Terminate active TP sessions (if any) and notify the upper layer about the termination.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_06_CancelRx_Udp_DiscardData_NoHeader</srcid><srcstatus/><internalId>1732</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00637</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>422</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00637.2</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall perform the following actions within SoAd_MainFunction() to close a
        socket connection:
        Disable further transmission or reception for this socket connection, i.e. new
        transmit requests shall be rejected with E_NOT_OK and received messages
        shall simply be discarded.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_06_CancelRx_Tcp_DiscardData_NoHeader</srcid><srcstatus/><internalId>1727</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_06_CancelRx_Udp_DiscardData_NoHeader</srcid><srcstatus/><internalId>1732</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00637</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>423</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00637.3</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall perform the following actions within SoAd_MainFunction() to close a
        socket connection: Close related TcpIp sockets.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_06_CancelRx_Udp_DiscardData_NoHeader</srcid><srcstatus/><internalId>1732</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00637</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>424</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00637.4</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall perform the following actions within SoAd_MainFunction() to close a
        socket connection:
        Change the state of the socket connection to SOAD_SOCON_OFFLINE if closing of the socket
        connection results from a SoAd_CloseSoCon() request or to SOAD_SOCON_RECONNECT otherwise.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_06_CancelRx_Udp_DiscardData_NoHeader</srcid><srcstatus/><internalId>1732</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00637</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>425</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00640.1</id>
      <status>approved</status>
      <version>1</version>
      <description>To notify the upper layer about the termination of an active
        TP transmission on closing a socket connection within SoAd_MainFunction(),
        SoAd shall call Up_[SoAd][Tp]TxConfirmation() with parameter result set to E_OK if
        disconnect is caused by SoAd_CloseSoCon() and all data was correctly transmitted.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_06_CancelRx_Tcp_DiscardData_NoHeader</srcid><srcstatus/><internalId>1727</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00640</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>248</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>426</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00640.2</id>
      <status>approved</status>
      <version>1</version>
      <description>To notify the upper layer about the termination of an active
        TP transmission on closing a socket connection within SoAd_MainFunction(),
        SoAd shall call Up_[SoAd][Tp]TxConfirmation() with parameter result set to E_NOT_OK for any
        other cause.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_06_CancelRx_Tcp_PendingRxTx_NoHeader</srcid><srcstatus/><internalId>1725</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_06_CancelRx_Tcp_PendingRxOngoingTx_NoHeader</srcid><srcstatus/><internalId>1726</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_06_CancelRx_Udp_PendingRxTx_NoHeader</srcid><srcstatus/><internalId>1730</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_06_CancelRx_Udp_PendingRxOngoingTx_NoHeader</srcid><srcstatus/><internalId>1731</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_06_CancelRx_Tcp_OngoingRxOngoingTx_WithHeader</srcid><srcstatus/><internalId>1735</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00640</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>248</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>427</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00641.1</id>
      <status>approved</status>
      <version>1</version>
      <description>To notify the upper layer about the termination of an active TP reception on closing a
        socket connection within SoAd_MainFunction(), SoAd shall call Up_[SoAd][Tp]RxIndication()
        with parameter result set to E_OK if disconnection is caused by SoAd_CloseSoCon() and all
        received data was correctly delivered to the upper layer.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_39_RxInd_CloseSoCon</srcid><srcstatus/><internalId>1447</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00641</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>428</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00641.2</id>
      <status>approved</status>
      <version>1</version>
      <description>To notify the upper layer about the termination of an active TP reception on closing a
        socket connection within SoAd_MainFunction(), SoAd shall call Up_[SoAd][Tp]RxIndication()
        with parameter result set to E_NOT_OK for any other cause.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_06_CancelRx_Tcp_PendingRx_NoHeader</srcid><srcstatus/><internalId>1724</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_06_CancelRx_Tcp_PendingRxTx_NoHeader</srcid><srcstatus/><internalId>1725</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_06_CancelRx_Tcp_PendingRxOngoingTx_NoHeader</srcid><srcstatus/><internalId>1726</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_06_CancelRx_Udp_PendingRx_NoHeader</srcid><srcstatus/><internalId>1729</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_06_CancelRx_Udp_PendingRxTx_NoHeader</srcid><srcstatus/><internalId>1730</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_06_CancelRx_Udp_PendingRxOngoingTx_NoHeader</srcid><srcstatus/><internalId>1731</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_06_CancelRx_Tcp_OngoingRxOngoingTx_WithHeader</srcid><srcstatus/><internalId>1735</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00641</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>429</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00642.a.TCP</id>
      <status>approved</status>
      <version>1</version>
      <description>To close related TcpIp sockets on closing a TCP socket connection within
        SoAd_MainFunction(), SoAd shall perform the following actions:
        (a) Close the related socket by calling TcpIp_Close() with
            parameter abort set to the same value as provided by SoAd_CloseSoCon().</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_16_CloseSoCon_FALSE</srcid><srcstatus/><internalId>1425</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_Tcp_Con12_Tp_RxInd_NoHeader_Discard</srcid><srcstatus/><internalId>1693</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00642</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>250</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>430</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00642.b.TCP</id>
      <status>approved</status>
      <version>1</version>
      <description>To close related TcpIp sockets on closing a TCP socket connection within
        SoAd_MainFunction(), SoAd shall perform the following actions:
        (b) If all socket connections of a TCP socket connection group have been
            closed by SoAd_CloseSoCon(): Close the related Listen-Socket by
            calling TcpIp_Close() with parameter abort set to the same
            value as provided by SoAd_CloseSoCon().</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_16_CloseSoCon_FALSE</srcid><srcstatus/><internalId>1425</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_13_00_RoutingGroup_DisabledAtInit_Rx</srcid><srcstatus/><internalId>1829</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00642</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>250</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>431</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00642.a.TCP_2</id>
      <status>approved</status>
      <version>1</version>
      <description>To close related TcpIp sockets on closing a TCP socket connection within
        SoAd_MainFunction(), SoAd shall perform the following actions:
        (a) Close the related socket by calling TcpIp_Close() with
            parameter abort set to FALSE in case closing was not initiated by SoAd_CloseSoCon().</description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.EB.TcpSM_CONNECTING_LoClosing</srcid><srcstatus/><internalId>1006</internalId></linkedfrom><linkedfrom><srcid>SoAd.EB.TcpSM_ONLINE_LoClosing</srcid><srcstatus/><internalId>1014</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00642</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>250</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>432</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00642.a.UDP</id>
      <status>approved</status>
      <version>1</version>
      <description>To close related TcpIp sockets on closing a UDP socket connection within
        SoAd_MainFunction(), SoAd shall perform the following actions:
        (a) If the socket connection is NOT part of a socket connection group (i.e.
            there is only one socket connection in the socket connection group
            configuration container): Close the related socket by calling
            TcpIp_Close() with parameter abort set to the same value as
            provided by SoAd_CloseSoCon().</description>
      <comment>Abort shall always be set to FALSE for UDP. See deviation dev.SoAd.Udp.TcpIpCloseAbort.</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con9_CloseImmediate</srcid><srcstatus/><internalId>1392</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_304</srcid><srcstatus/><internalId>762</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00642</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>250</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>433</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00642.b.UDP</id>
      <status>approved</status>
      <version>1</version>
      <description>To close related TcpIp sockets on closing a UDP socket connection within
        SoAd_MainFunction(), SoAd shall perform the following actions:
        (b) If all socket connections of a UDP socket connection group have been
            closed by SoAd_CloseSoCon(): Close the related UDP socket by
            calling TcpIp_Close() with parameter abort set to the same
            value as provided by SoAd_CloseSoCon().</description>
      <comment>Abort shall always be set to FALSE for UDP. See deviation dev.SoAd.Udp.TcpIpCloseAbort.</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_53_CloseMultipleSockets</srcid><srcstatus/><internalId>1463</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.Udp.TcpIpCloseAbort</srcid><srcstatus/><internalId>763</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00642</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>250</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>434</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00642.a.UDP_2</id>
      <status>approved</status>
      <version>1</version>
      <description>To close related TcpIp sockets on closing a UDP socket connection within
        SoAd_MainFunction(), SoAd shall perform the following actions:
        (a) If the socket connection is NOT part of a socket connection group (i.e.
            there is only one socket connection in the socket connection group
            configuration container): Close the related socket by calling
            TcpIp_Close() with parameter abort set to FALSE in case closing was
            not initiated by SoAd_CloseSoCon().</description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.EB.UdpSM_CONNECTING_Error</srcid><srcstatus/><internalId>981</internalId></linkedfrom><linkedfrom><srcid>SoAd.EB.UdpSM_ONLINE_Error</srcid><srcstatus/><internalId>989</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00642</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>250</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>435</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00643.1</id>
      <status>approved</status>
      <version>1</version>
      <description>Within SoAd_TcpIpEvent with Event set to TCPIP_UDP_CLOSED, SoAd shall:
        (1) remove the assignment of the TcpIp socket identified by SocketId from the
            related UDP socket connection group.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_152_SetUniqueRemoteAddr_RESTART</srcid><srcstatus/><internalId>1581</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_153_SetUniqueRemoteAddr_SetRemoteAddr_RESTART</srcid><srcstatus/><internalId>1582</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_154_SetRemoteAddr_RemoteAddr_Set_RESTART</srcid><srcstatus/><internalId>1583</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_155_SetUniqueRemoteAddr_RemoteAddr_Unset_RESTART</srcid><srcstatus/><internalId>1584</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_156_SetRemoteAddr_SetUniqueRemoteAddr_CLOSE</srcid><srcstatus/><internalId>1585</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_157_SetRemoteAddr_CLOSE</srcid><srcstatus/><internalId>1586</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_160_RxIndication_CLOSE</srcid><srcstatus/><internalId>1588</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_161_RxIndication_RESTART</srcid><srcstatus/><internalId>1589</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00643</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>251</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>436</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00643.2</id>
      <status>approved</status>
      <version>1</version>
      <description>Within SoAd_TcpIpEvent with Event set to TCPIP_UDP_CLOSED, SoAd shall:
        (2) close all socket connections of the related socket connection group that are in
            SOAD_SOCON_ONLINE (i.e. perform the specified closing actions with the
            exception of closing related TcpIp sockets).</description>
      <furtherinfo>WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.</furtherinfo>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con9_TcpIpEvent</srcid><srcstatus/><internalId>1372</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con7_TcpIpEvent</srcid><srcstatus/><internalId>1386</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con10_Close</srcid><srcstatus/><internalId>1389</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con10_Reclose</srcid><srcstatus/><internalId>1391</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con2_TcpIpEvent</srcid><srcstatus/><internalId>1397</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_152_SetUniqueRemoteAddr_RESTART</srcid><srcstatus/><internalId>1581</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_153_SetUniqueRemoteAddr_SetRemoteAddr_RESTART</srcid><srcstatus/><internalId>1582</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_154_SetRemoteAddr_RemoteAddr_Set_RESTART</srcid><srcstatus/><internalId>1583</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_155_SetUniqueRemoteAddr_RemoteAddr_Unset_RESTART</srcid><srcstatus/><internalId>1584</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_156_SetRemoteAddr_SetUniqueRemoteAddr_CLOSE</srcid><srcstatus/><internalId>1585</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_157_SetRemoteAddr_CLOSE</srcid><srcstatus/><internalId>1586</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_160_RxIndication_CLOSE</srcid><srcstatus/><internalId>1588</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_161_RxIndication_RESTART</srcid><srcstatus/><internalId>1589</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00643</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>251</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>437</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00646.1</id>
      <status>approved</status>
      <version>1</version>
      <description>Within SoAd_TcpIpEvent with Event set to
        TCPIP_TCP_CLOSED or TCPIP_TCP_RESET, SoAd shall
        (1) remove the assignment of the TcpIp socket identified by SocketId from the
            related socket connection.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_03_Tcp_TcpIpEvent_CLOSED</srcid><srcstatus/><internalId>1412</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_04_Tcp_TcpIpEvent_RESET</srcid><srcstatus/><internalId>1413</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00646</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>254</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>438</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00646.2</id>
      <status>approved</status>
      <version>1</version>
      <description>Within SoAd_TcpIpEvent with Event set to
        TCPIP_TCP_CLOSED or TCPIP_TCP_RESET, SoAd shall
        (2) close the socket connection if it is in SOAD_SOCON_ONLINE (i.e. perform the
            specified closing actions with the exception of closing related TcpIp socket).</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_03_Tcp_TcpIpEvent_CLOSED</srcid><srcstatus/><internalId>1412</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_04_Tcp_TcpIpEvent_RESET</srcid><srcstatus/><internalId>1413</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00646</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>254</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>439</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00539.1</id>
      <status>approved</status>
      <version>1</version>
      <description>For the transmission of a PDU requested by an upper layer
        using the IF-API, the SoAd shall
        (1) Identify the related socket connection and PDU route by using the
            SoAdSrcPduId provided at SoAd_IfTransmit().</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Ts_SoAd_IfTransmit_PduR_Tcp_Client</srcid><srcstatus/><internalId>1237</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_IfTransmit_PduR_Tcp_Server</srcid><srcstatus/><internalId>1242</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_IfTransmit_PduR_Udp</srcid><srcstatus/><internalId>1244</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_IfTransmit_PduR_Udp_NoHeader</srcid><srcstatus/><internalId>1246</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_IfTransmit_PduR_Udp_NoHeader_IPv6</srcid><srcstatus/><internalId>1247</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00539</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>160</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>440</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00539.2</id>
      <status>approved</status>
      <version>1</version>
      <description>For the transmission of a PDU requested by an upper layer
        using the IF-API, the SoAd shall
        (2) Call the related TcpIp transmit function depending on the connection type if
            the PDU length &gt; 0 or SoAdPduHeaderEnable is TRUE, otherwise SoAd shall
            Skip further processing and return with E_NOT_OK.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Ts_SoAd_IfTransmit_PduR_Tcp_Client</srcid><srcstatus/><internalId>1237</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_IfTransmit_PduR_Tcp_Client_MultipleCopyTxData</srcid><srcstatus/><internalId>1239</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_IfTransmit_PduR_Tcp_Server</srcid><srcstatus/><internalId>1242</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_IfTransmit_PduR_Udp</srcid><srcstatus/><internalId>1244</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_IfTransmit_PduR_Udp_NoHeader</srcid><srcstatus/><internalId>1246</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_IfTransmit_PduR_Udp_NoHeader_IPv6</srcid><srcstatus/><internalId>1247</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00539</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>160</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>441</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00543_UDP_IF_Tx_nPDU_IPFrag</id>
      <status>approved</status>
      <version>1</version>
      <description>The TcpIp module will retrieve the PDU data within the
        context of the TcpIp transmit call by using SoAd_CopyTxData() where the SoAd
        shall copy (the requested part of) the PDU to the memory specified by parameter BufPtr.
        
        If SoAd_IfTransmit() is called and multiple PDUs are stored in the nPDU buffer,
        TCP shall be able to retrieve the buffer with multiple calls to SoAd_CopyTxData().

        Use case: If IP fragmentation is used, TCP reserves and splits multiple data into multiple
        IP frames. For each frame TCP calls SoAd_CopyTxData() in context of TcpIp_UdpTransmit call.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_118_UDP_IF_Tx_nPDU_IPFrag</srcid><srcstatus/><internalId>1536</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_3133</srcid><srcstatus/><internalId>850</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00543</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>163</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>442</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00543_UDP_IF_Tx_LastIsBest_IPFrag</id>
      <status>approved</status>
      <version>1</version>
      <description>The TcpIp module will retrieve the PDU data within the
        context of the TcpIp transmit call by using SoAd_CopyTxData() where the SoAd
        shall copy (the requested part of) the PDU to the memory specified by parameter BufPtr.

        If SoAd_IfTransmit() is called, SoAdTxPduCollectionSemantics is last is best and multiple
        PDUs are stored in the nPDU buffer, TCP shall be able to retrieve the buffer
        with multiple calls to SoAd_CopyTxData().

        Use case: If IP fragmentation is used, TCP reserves and splits multiple data into multiple
        IP frames. For each frame TCP calls SoAd_CopyTxData() in context of TcpIp_UdpTransmit call.</description>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.IPFrag.LastIsBest</srcid><srcstatus/><internalId>761</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00543</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>163</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>443</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00543_UDP_IF_Tx_IPFrag</id>
      <status>approved</status>
      <version>1</version>
      <description>The TcpIp module will retrieve the PDU data within the
        context of the TcpIp transmit call by using SoAd_CopyTxData() where the SoAd
        shall copy (the requested part of) the PDU to the memory specified by parameter BufPtr.

        If SoAd_IfTransmit() is called and the PDU does not fit into an IP frame, TCP shall be
        able to retrieve the buffer with multiple calls to SoAd_CopyTxData().

        Use case: If IP fragmentation is used, TCP reserves and splits multiple data into multiple
        IP frames. For each frame TCP calls SoAd_CopyTxData() in context of TcpIp_UdpTransmit call.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_118_UDP_IF_Tx_nPDU_IPFrag</srcid><srcstatus/><internalId>1536</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_3035</srcid><srcstatus/><internalId>847</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00543</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>163</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>444</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00547_RefToSoConGroup</id>
      <status>approved</status>
      <version>1</version>
      <description>In case SoAdPduRouteDest uses TriggerMode TRIGGER_NEVER and refers to a socket connection
        group, SoAd shall copy the PDU to the socket specific
        nPduUdpTxBuffer (instead of calling TcpIp_UdpTransmit()).</description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.2.2</release>
      </releases>      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_09_IfTransmit_NEVER_SoConGroup</srcid><srcstatus/><internalId>1750</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_09_PostBuild_Selectable_SoAdTxUdpTriggerMode</srcid><srcstatus/><internalId>1751</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00547</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>445</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00665.1</id>
      <status>approved</status>
      <version>1</version>
      <description>In the SoAd_MainFunction the SoAd shall check for
        pending triggered transmit request for SoAdPduRouteDest and identify all related IF-
        PDUs. For each identified IF-PDU SoAd shall process as specified below:
        (1) retrieve the data from the related upper layer by calling Up_[SoAd][If]-
            TriggerTransmit().</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_13_00_SpecificRoutingGroup_Disabled_Trigger_Tx</srcid><srcstatus/><internalId>1830</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_13_01_IfRoutingGroupTransmit_SinglePduRouteDest</srcid><srcstatus/><internalId>1839</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_13_01_IfRoutingGroupTransmit_MultiplePduRouteDest</srcid><srcstatus/><internalId>1840</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00665</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>271</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>446</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00665.2</id>
      <status>approved</status>
      <version>1</version>
      <description>In the SoAd_MainFunction the SoAd shall check for
        pending triggered transmit request for SoAdPduRouteDest and identify all related IF-
        PDUs. For each identified IF-PDU SoAd shall process as specified below:
        (2) transmit the data via the related socket connection.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_One_RoutingGroup</srcid><srcstatus/><internalId>1808</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_13_00_SpecificRoutingGroup_Disabled_Trigger_Tx</srcid><srcstatus/><internalId>1830</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_13_00_SpecificRouting_Trigger_Tx</srcid><srcstatus/><internalId>1831</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_13_01_IfRoutingGroupTransmit_SinglePduRouteDest</srcid><srcstatus/><internalId>1839</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_13_01_IfRoutingGroupTransmit_MultiplePduRouteDest</srcid><srcstatus/><internalId>1840</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00665</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>271</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>447</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00665.3</id>
      <status>approved</status>
      <version>1</version>
      <description>If SoAdIfTriggerTransmit flag is not enabled in upper layer SoAd shall not call 
        Up_[SoAd][If]-TriggerTransmit() in the SoAd_MainFunction for pending triggered transmit 
        requests for SoAdPduRouteDest.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_13_00_GenUL_noTriggerTransmitFlag</srcid><srcstatus/><internalId>1832</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00665</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>271</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>448</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00551.1</id>
      <status>approved</status>
      <version>1</version>
      <description>For the transmission of a PDU requested by an upper layer
        using the TP-API, the SoAd shall
        (1) Skip further processing and return with E_NOT_OK if the PDU length is 0.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_10_Tcp_PduLen_0</srcid><srcstatus/><internalId>1419</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00551</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>449</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00551.2</id>
      <status>approved</status>
      <version>1</version>
      <description>For the transmission of a PDU requested by an upper layer
        using the TP-API, the SoAd shall
        (2) Identify the related socket connection and PDU route by using the
        SoAdSrcPduId provided at SoAd_TpTransmit().</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_05_Udp_Con10_Tp_Transmit_NoHeader</srcid><srcstatus/><internalId>1702</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_05_Udp_Con11_Tp_Transmit_WithHeader</srcid><srcstatus/><internalId>1703</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_05_Udp_Con10_Tp_Transmit_Segmented_NoHeader</srcid><srcstatus/><internalId>1704</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00551</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>450</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00551.3</id>
      <status>approved</status>
      <version>1</version>
      <description>For the transmission of a PDU requested by an upper layer
        using the TP-API, the SoAd shall
        (3) Store the TP transmission request for further processing in the SoAd_MainFunction().</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_05_Udp_Con10_Tp_Transmit_NoHeader</srcid><srcstatus/><internalId>1702</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_05_Udp_Con11_Tp_Transmit_WithHeader</srcid><srcstatus/><internalId>1703</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_05_Udp_Con10_Tp_Transmit_Segmented_NoHeader</srcid><srcstatus/><internalId>1704</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00551</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>451</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00552.1</id>
      <status>approved</status>
      <version>1</version>
      <description>In the SoAd_MainFunction the SoAd shall check for
        pending TP transmission requests and process a pending request as specified
        below:
        (1) Query the available amount of data at the upper layer by calling the
            configurable callback function Up_[SoAd][Tp]CopyTxData() with
            PduInfoType.SduLength = 0.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_05_Udp_Con10_Tp_Transmit_NoHeader</srcid><srcstatus/><internalId>1702</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_05_Udp_Con11_Tp_Transmit_WithHeader</srcid><srcstatus/><internalId>1703</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_05_Udp_Con10_Tp_Transmit_Segmented_NoHeader</srcid><srcstatus/><internalId>1704</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00552</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>173</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>452</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00552.2</id>
      <status>approved</status>
      <version>1</version>
      <description>In the SoAd_MainFunction the SoAd shall check for
        pending TP transmission requests and process a pending request as specified
        below:
        (2) Depending on the connection type: retrieve data and call the related TcpIp
            transmit function.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_05_Udp_Con10_Tp_Transmit_NoHeader</srcid><srcstatus/><internalId>1702</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_05_Udp_Con11_Tp_Transmit_WithHeader</srcid><srcstatus/><internalId>1703</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_05_Udp_Con10_Tp_Transmit_Segmented_NoHeader</srcid><srcstatus/><internalId>1704</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00552</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>173</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>453</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00553.1</id>
      <status>approved</status>
      <version>1</version>
      <description>In case of a UDP socket connection the SoAd shall
        (1) retrieve all available data from the upper layer to a SoAd TP transmit buffer via
            the configurable callback function Up_[SoAd][Tp]CopyTxData() with
            PduInfoType.SduLength set to the value returned by availableDataPtr of the
            previous call.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_17_TpTransmit_InProg</srcid><srcstatus/><internalId>1426</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00553</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>174</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>454</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00553.2</id>
      <status>approved</status>
      <version>1</version>
      <description>In case of a UDP socket connection the SoAd shall
        (2) call TcpIp_UdpTransmit() with SocketId and remote address specified in
            the SocketConnection and the PDU length specified in the
            SoAd_TpTransmit() call as TotalLength after all data have been
            successfully retrieved within one or multiple SoAd main function execution
            cycles.</description>

      <!-- <verifycrit>Remote address shall be tested for IPv4 and IPv6.</verifycrit> -->      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_05_Udp_Con10_Tp_Transmit_Segmented_NoHeader</srcid><srcstatus/><internalId>1704</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00553</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>174</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>455</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00562.1</id>
      <status>approved</status>
      <version>1</version>
      <description>For the reception of a message from an UDP or TCP socket
        and forwarding of the received data as PDU to the related upper layer the SoAd shall
        (1) Identify the related socket connection and socket routes by using the SocketId
            provided at SoAd_RxIndication().</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_04_Tcp_Con12_Tp_RxInd_NoHeader</srcid><srcstatus/><internalId>1687</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_08_Msg_Acceptance_Filter_Off</srcid><srcstatus/><internalId>1740</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_RxIndication_Specific_RoutingGroup</srcid><srcstatus/><internalId>1818</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_13_01_RxIndication_RoutingGroup</srcid><srcstatus/><internalId>1843</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00562</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>456</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00562.2</id>
      <status>approved</status>
      <version>1</version>
      <description>For the reception of a message from an UDP or TCP socket
        and forwarding of the received data as PDU to the related upper layer the SoAd shall
        (2) Filter messages according to the message acceptance policy.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_04_Tcp_Con12_Tp_RxInd_NoHeader</srcid><srcstatus/><internalId>1687</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_08_Msg_Acceptance_Filter_Off</srcid><srcstatus/><internalId>1740</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_RxIndication_Specific_RoutingGroup</srcid><srcstatus/><internalId>1818</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_13_01_RxIndication_RoutingGroup</srcid><srcstatus/><internalId>1843</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00562</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>457</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00562.3</id>
      <status>approved</status>
      <version>1</version>
      <description>For the reception of a message from an UDP or TCP socket
        and forwarding of the received data as PDU to the related upper layer the SoAd shall
        (3) Convert the message into a PDU.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_04_Tcp_Con12_Tp_RxInd_NoHeader</srcid><srcstatus/><internalId>1687</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_08_Msg_Acceptance_Filter_Off</srcid><srcstatus/><internalId>1740</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00562</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>458</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00562.4_TP</id>
      <status>approved</status>
      <version>1</version>
      <description>For the reception of a message from an UDP or TCP socket
        and forwarding of the received data as PDU to the related upper layer the SoAd shall
        (4) Skip further processing if PDU length is 0 and SoAdRxUpperLayerType is TP.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_13_PduLength_0_TP</srcid><srcstatus/><internalId>1422</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00562</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>459</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00562.4_IF_Header</id>
      <status>approved</status>
      <version>1</version>
      <description>For the reception of a message from an UDP or TCP socket
        and forwarding of the received data as PDU to the related upper layer the SoAd shall
        (4) Continue further processing if PDU length is 0 and SoAdPduHeaderEnable is
            TRUE and SoAdRxUpperLayerType is IF.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_37_PduLength_0_IF_Header</srcid><srcstatus/><internalId>1445</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00562</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>460</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00562.4_IF_NoHeader</id>
      <status>approved</status>
      <version>1</version>
      <description>For the reception of a message from an UDP or TCP socket
        and forwarding of the received data as PDU to the related upper layer the SoAd shall
        (4) Skip further processing if PDU length is 0 and SoAdPduHeaderEnable is
            FALSE or SoAdRxUpperLayerType is IF.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_14_PduLength_0_Header</srcid><srcstatus/><internalId>1423</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00562</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>461</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00562.5</id>
      <status>approved</status>
      <version>1</version>
      <description>For the reception of a message from an UDP or TCP socket
        and forwarding of the received data as PDU to the related upper layer the SoAd shall
        (5) Call the upper layer type related reception functions of the configured upper
            layer module depending on the SoAdRxUpperLayerType specified in
            SocketRouteDest configuration.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_04_Tcp_Con12_Tp_RxInd_NoHeader</srcid><srcstatus/><internalId>1687</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_08_Msg_Acceptance_Filter_Off</srcid><srcstatus/><internalId>1740</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_RxIndication_Specific_RoutingGroup</srcid><srcstatus/><internalId>1818</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_13_01_RxIndication_RoutingGroup</srcid><srcstatus/><internalId>1843</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00562</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>462</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00559.1</id>
      <status>approved</status>
      <version>1</version>
      <description>In case PDU header option is enabled
        (SoAdPduHeaderEnable is TRUE) for a socket connection, SoAd shall convert the
        message into a PDU within SoAd_RxIndication() according to the following:
        (1) assemble the PDU Header into a SoAd receive buffer if it is fragmented in
            multiple TCP segments.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Client_Split_Header</srcid><srcstatus/><internalId>1867</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Server_Split_Header</srcid><srcstatus/><internalId>1872</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00559</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>463</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00559.2</id>
      <status>approved</status>
      <version>1</version>
      <description>In case PDU header option is enabled
        (SoAdPduHeaderEnable is TRUE) for a socket connection, SoAd shall convert the
        message into a PDU within SoAd_RxIndication() according to the following:
        (2) extract the PDU Header from the received message.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Client_Split_Header</srcid><srcstatus/><internalId>1867</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Server_Split_Header</srcid><srcstatus/><internalId>1872</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00559</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>464</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00559.3</id>
      <status>approved</status>
      <version>1</version>
      <description>In case PDU header option is enabled
        (SoAdPduHeaderEnable is TRUE) for a socket connection, SoAd shall convert the
        message into a PDU within SoAd_RxIndication() according to the following:
        (3) select the related socket route according to the received PDU Header ID
            (SoAdRxPduHeaderId); if no socket route can be found, simply discard the
            PDU and if development error detection is enabled: raise the error
            SOAD_E_INV_PDUHEADER_ID.</description>
      <furtherinfo>WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.</furtherinfo>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_25_RxInd_WriteOnlyUdpSocket_Header</srcid><srcstatus/><internalId>1432</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_26_RxInd_WriteOnlyTcpSocket_Header</srcid><srcstatus/><internalId>1433</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_203_Report_INV_PDUHEADER_ID</srcid><srcstatus/><internalId>1627</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_17_ReceiveOnSocketGroup</srcid><srcstatus/><internalId>1767</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Client_Split_Header</srcid><srcstatus/><internalId>1867</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Server</srcid><srcstatus/><internalId>1871</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Server_Split_Header</srcid><srcstatus/><internalId>1872</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Server_Multi</srcid><srcstatus/><internalId>1874</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Udp</srcid><srcstatus/><internalId>1876</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Udp_BinarySearch_UnderflowProtection</srcid><srcstatus/><internalId>1877</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Udp_Multi</srcid><srcstatus/><internalId>1878</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Udp_Multi_UnknownPduHeaderId</srcid><srcstatus/><internalId>1879</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_441</srcid><srcstatus/><internalId>769</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00559</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.SOAD_E_INV_PDUHEADER_ID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>566</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>465</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00559.4</id>
      <status>approved</status>
      <version>1</version>
      <description>In case PDU header option is enabled
        (SoAdPduHeaderEnable is TRUE) for a socket connection, SoAd shall convert the
        message into a PDU within SoAd_RxIndication() according to the following:
        (4) use the length field of the PDU Header to identify the length of the actual PDU
            and the start of the next PDU to proceed with (2) until the end of the message is
            reached. If the remainder is smaller than a PDU Header or the indicated length
            within the header SoAd shall stop processing and ignore the rest of the message.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_32_Udp_RxIndication_IncompletePdu</srcid><srcstatus/><internalId>1438</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_86_Udp_RxIndication_IncompleteHeader</srcid><srcstatus/><internalId>1495</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Client_Split_Header</srcid><srcstatus/><internalId>1867</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Server</srcid><srcstatus/><internalId>1871</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Server_Split_Header</srcid><srcstatus/><internalId>1872</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Server_Multi</srcid><srcstatus/><internalId>1874</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Udp</srcid><srcstatus/><internalId>1876</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Udp_Multi</srcid><srcstatus/><internalId>1878</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Udp_Multi_UnknownPduHeaderId</srcid><srcstatus/><internalId>1879</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.TcpStream.HeaderMode</srcid><srcstatus/><internalId>766</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00559</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>466</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00567.1</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall perform the following further actions within the
        SoAd_RxIndication() function for reception of a PDU to an upper layer using the IF-API:
          Assemble all data of a fragmented IF-PDU into a SoAd receive buffer if PDU Header is used.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Client_Split_Payload</srcid><srcstatus/><internalId>1868</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Server_Split_Payload</srcid><srcstatus/><internalId>1873</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Server_Multi_UnknownPduHeaderId_Split</srcid><srcstatus/><internalId>1875</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00567</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>467</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00567.2</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall perform the following further actions within the
        SoAd_RxIndication() function for reception of a PDU to an upper layer using the IF-API:
          Call Up_[SoAd][If]RxIndication() of the related upper layer module (with RxPduId set to
          the ID specified by the upper layer module for the PDU referenced by SoAdRxPduRef)
          for each completely received PDU.</description>
      <furtherinfo>WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.</furtherinfo>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_08_Msg_Acceptance_Filter_Off</srcid><srcstatus/><internalId>1740</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_07_Accept_Multiple_Cons</srcid><srcstatus/><internalId>1809</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_13_01_RxIndication_RoutingGroup</srcid><srcstatus/><internalId>1843</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Client</srcid><srcstatus/><internalId>1866</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Client_Split_Header</srcid><srcstatus/><internalId>1867</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Client_Split_Payload</srcid><srcstatus/><internalId>1868</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Client_Multi</srcid><srcstatus/><internalId>1869</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Client_NoHeader</srcid><srcstatus/><internalId>1870</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Server</srcid><srcstatus/><internalId>1871</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Server_Split_Header</srcid><srcstatus/><internalId>1872</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Server_Split_Payload</srcid><srcstatus/><internalId>1873</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Server_Multi</srcid><srcstatus/><internalId>1874</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Server_Multi_UnknownPduHeaderId_Split</srcid><srcstatus/><internalId>1875</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Udp</srcid><srcstatus/><internalId>1876</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Udp_Multi</srcid><srcstatus/><internalId>1878</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Udp_Multi_UnknownPduHeaderId</srcid><srcstatus/><internalId>1879</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Udp_NoHeader</srcid><srcstatus/><internalId>1881</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00567</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>468</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00567.3</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall perform the following further actions within the
        SoAd_RxIndication() function for reception of a PDU to an upper layer using the IF-API:
          Dispatch the next IF-PDU (if any) if PDU Header mode is used.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Client_Multi</srcid><srcstatus/><internalId>1869</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Tcp_Server_Multi</srcid><srcstatus/><internalId>1874</internalId></linkedfrom><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Udp_Multi</srcid><srcstatus/><internalId>1878</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00567</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>469</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00568.1a</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall perform the following further actions within the
        SoAd_RxIndication() function for reception of a PDU from a socket connection
        with PDU Header mode disabled to an upper layer using the TP-API:
          If the SoAd receive buffer does not contain any TP data for this socket connection:
            Query the available amount of data at the upper layer by calling the configurable
            callback function Up_[SoAd][Tp]CopyRxData() with PduInfoType.SduLength = 0.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_04_Udp_Con10_Tp_RxInd_NoHeader</srcid><srcstatus/><internalId>1677</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_Udp_Con10_Tp_RxInd_Segmented_NoHeader</srcid><srcstatus/><internalId>1679</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_Tcp_Con12_Tp_RxInd_NoHeader</srcid><srcstatus/><internalId>1687</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_Udp_Con10_Tp_RxInd_NoHeader_Discard</srcid><srcstatus/><internalId>1692</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_Tcp_Con12_Tp_RxInd_NoHeader_Discard</srcid><srcstatus/><internalId>1693</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_11_Udp_Tp_RxInd_NoBuffer_NHM_Rx_Ok</srcid><srcstatus/><internalId>1752</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_11_Udp_Tp_RxInd_NoBuffer_NHM_CopyRx_Insuff</srcid><srcstatus/><internalId>1754</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_11_Udp_Tp_RxInd_NoBuffer_NHM_CopyRx_NotOk</srcid><srcstatus/><internalId>1755</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_WrapAroundRingbuffer_NoHeader</srcid><srcstatus/><internalId>1969</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00568</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>189</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>470</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00568.1b</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall perform the following further actions within the
        SoAd_RxIndication() function for reception of a PDU from a socket connection
        with PDU Header mode disabled to an upper layer using the TP-API:
          If the SoAd receive buffer does not contain any TP data for this socket connection:
            If not all data can be processed (i.e. forwarded to an upper layer or stored
            in a SoAd receive buffer), discard all received data and skip further processing.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_04_Udp_Con10_Tp_RxInd_NoHeader_Discard</srcid><srcstatus/><internalId>1692</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_Tcp_Con12_Tp_RxInd_NoHeader_Discard</srcid><srcstatus/><internalId>1693</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_11_Udp_Tp_RxInd_NoBuffer_NHM_CopyRx_Insuff</srcid><srcstatus/><internalId>1754</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.TcpStream.NonHeaderMode</srcid><srcstatus/><internalId>768</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00568</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>189</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>471</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00568.1c</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall perform the following further actions within the
        SoAd_RxIndication() function for reception of a PDU from a socket connection
        with PDU Header mode disabled to an upper layer using the TP-API:
          If the SoAd receive buffer does not contain any TP data for this socket connection:
            Copy all received data which can be accepted by the upper layer module
            determined at (a) to the upper layer by calling Up_[SoAd][Tp]CopyRxData().</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_04_Udp_Con10_Tp_RxInd_NoHeader</srcid><srcstatus/><internalId>1677</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_Udp_Con10_Tp_RxInd_Segmented_NoHeader</srcid><srcstatus/><internalId>1679</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_Tcp_Con12_Tp_RxInd_NoHeader</srcid><srcstatus/><internalId>1687</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_11_Udp_Tp_RxInd_NoBuffer_NHM_Rx_Ok</srcid><srcstatus/><internalId>1752</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_WrapAroundRingbuffer_NoHeader</srcid><srcstatus/><internalId>1969</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00568</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>189</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>472</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00568.1d</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall perform the following further actions within the
        SoAd_RxIndication() function for reception of a PDU from a socket connection
        with PDU Header mode disabled to an upper layer using the TP-API:
          If the SoAd receive buffer does not contain any TP data for this socket connection:
            Copy all remaining data (i.e. data which are received but not delivered to the upper
            layer) to a SoAd receive buffer for later processing by SoAd_MainFunction().</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_WrapAroundRingbuffer_NoHeader</srcid><srcstatus/><internalId>1969</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00568</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>189</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>473</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00568.2</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall perform the following further actions within the
        SoAd_RxIndication() function for reception of a PDU from a socket connection
        with PDU Header mode disabled to an upper layer using the TP-API:
          If the SoAd receive buffer already contains TP data for this socket connection
          and is able to store all (newly) received data: copy all received data to the
          SoAd receive buffer for later processing by SoAd_MainFunction().</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_38_RxInd_NoHeader_DataInBuffer</srcid><srcstatus/><internalId>1446</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00568</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>189</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>474</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00569.1</id>
      <status>approved</status>
      <version>1</version>
      <description>In the SoAd_MainFunction the SoAd shall process as
        specified below if the SoAd receive buffer contains TP data for a socket connection
        with PDU Header mode disabled:
          Query the available amount of data at the upper layer by calling the
          configurable callback function Up_[SoAd][Tp]CopyRxData() with PduInfoType.SduLength = 0.</description>
      <!-- <verifycrit>EC valid:
        *  Upper Layer provides 0 available data after all data are passed 
        *  Upper Layer provides available data &gt; 0 after alle data are passed
      </verifycrit> -->
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_04_Tcp_Tp_RxInd_NoHeader_DataFromBuffer</srcid><srcstatus/><internalId>1688</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_WrapAroundRingbuffer_NoHeader</srcid><srcstatus/><internalId>1969</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00569</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>190</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>475</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00569.2</id>
      <status>approved</status>
      <version>1</version>
      <description>In the SoAd_MainFunction the SoAd shall process as
        specified below if the SoAd receive buffer contains TP data for a socket connection
        with PDU Header mode disabled:
          Copy all data belonging to this socket connection from the SoAd receive buffer
          which can be accepted by the upper layer module determined at (1) to the
          upper layer by calling Up_[SoAd][Tp]CopyRxData().</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_WrapAroundRingbuffer_NoHeader</srcid><srcstatus/><internalId>1969</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00569</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>190</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>476</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00570.a</id>
      <status>approved</status>
      <version>1</version>
      <description>If Up_SoAdTpStartOfReception or
        Up_[SoAd][Tp]CopyRxData() return with BUFREQ_E_NOT_OK for a socket
        connection with PDU Header mode disabled, SoAd shall:
          Disable further transmission or reception for this socket connection (i.e. new transmit
          requests shall be rejected with E_NOT_OK and received messages shall simply be discarded).</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_72_RxInd_NoHeader_CopyRxDataNotOk</srcid><srcstatus/><internalId>1482</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_CopyRxDataNotOk</srcid><srcstatus/><internalId>1697</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_11_Udp_Tp_RxInd_NoBuffer_NHM_CopyRx_NotOk</srcid><srcstatus/><internalId>1755</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00570</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>191</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>477</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00570.b</id>
      <status>approved</status>
      <version>1</version>
      <description>If Up_SoAdTpStartOfReception or
        Up_[SoAd][Tp]CopyRxData() return with BUFREQ_E_NOT_OK for a socket
        connection with PDU Header mode disabled, SoAd shall:
          Close the socket connection in the next SoAd_MainFunction().</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_72_RxInd_NoHeader_CopyRxDataNotOk</srcid><srcstatus/><internalId>1482</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_CopyRxDataNotOk</srcid><srcstatus/><internalId>1697</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_11_Udp_Tp_RxInd_NoBuffer_NHM_CopyRx_NotOk</srcid><srcstatus/><internalId>1755</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00570</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>191</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>478</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00571.1a</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall perform the following further actions within the
        SoAd_RxIndication() function for reception of a PDU from a socket connection
        with PDU Header mode enabled to an upper layer using the TP-API:
          If no TP reception is in progress for the related socket connection:
            After reception of a complete PDU Header, call Up_[SoAd][Tp]StartOfReception() of the
            related upper layer module with RxPduId set to the ID specified by the upper layer
            module for the PDU referenced by SoAdRxPduRef, set TpSduLength to the length
            specified in the PDU Header, and set PduInfoType.SduDataPtr and
            PduInfoType.SduLength to provide already received PDU data to the upper layer.</description>
      <furtherinfo>WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.</furtherinfo>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_04_Udp_Con11_Tp_RxInd_WithHeader</srcid><srcstatus/><internalId>1678</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_Udp_Con11_Tp_RxInd_Segmented_WithHeader</srcid><srcstatus/><internalId>1680</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_Tcp_Con13_Tp_RxInd_WithHeader</srcid><srcstatus/><internalId>1689</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_Tcp_Con13_Tp_RxInd_WithHeader_Seg</srcid><srcstatus/><internalId>1690</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_Tcp_Con13_Tp_RxInd_WithHeader_SegInHeader</srcid><srcstatus/><internalId>1691</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_Udp_Con11_Tp_RxInd_WithHeader_Discard</srcid><srcstatus/><internalId>1694</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_Udp_Con10_Tp_RepeatedCopyRxData</srcid><srcstatus/><internalId>1699</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_11_Udp_Tp_RxInd_NoBuffer_HM_Rx_Ok</srcid><srcstatus/><internalId>1753</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_11_Udp_Tp_RxInd_NoBuffer_HM_StartRx_Insuff</srcid><srcstatus/><internalId>1756</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_11_Udp_Tp_RxInd_NoBuffer_HM_StartRx_NotOk</srcid><srcstatus/><internalId>1757</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_11_Udp_Tp_RxInd_NoBuffer_HM_CopyRx_Busy</srcid><srcstatus/><internalId>1758</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_11_Udp_Tp_RxInd_NoBuffer_HM_CopyRx_NotOk</srcid><srcstatus/><internalId>1759</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_12_HeaderMode_MultiplePdus_Udp_Buffered</srcid><srcstatus/><internalId>1761</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_12_HeaderMode_MultiplePdus_Tcp_Buffered</srcid><srcstatus/><internalId>1762</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_12_HeaderMode_MultiplePdus_IF_TP_Tcp_Buffered_Segmented</srcid><srcstatus/><internalId>1763</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_12_HeaderMode_SegmentedPdu_Tcp_Buffered</srcid><srcstatus/><internalId>1765</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_WrapAroundRingbuffer</srcid><srcstatus/><internalId>1968</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>192</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>479</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00571.1b</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall perform the following further actions within the
        SoAd_RxIndication() function for reception of a PDU from a socket connection
        with PDU Header mode enabled to an upper layer using the TP-API:
          If no TP reception is in progress for the related socket connection:
            If not all data can be processed (i.e. forwarded to an upper layer or stored
            in a SoAd receive buffer), discard all received data, call
            Up_[SoAd][Tp]RxIndication() with the same RxPduId as used at
            Up_[SoAd][Tp]StartOfReception() and result set to E_NOT_OK and skip further processing.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_04_Partial_RxUdpTpAPI_WithHeader_Ringbuffer</srcid><srcstatus/><internalId>1681</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_Udp_Con11_Tp_RxInd_WithHeader_Discard</srcid><srcstatus/><internalId>1694</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_11_Udp_Tp_RxInd_NoBuffer_HM_StartRx_Insuff</srcid><srcstatus/><internalId>1756</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_11_Udp_Tp_RxInd_NoBuffer_HM_CopyRx_Busy</srcid><srcstatus/><internalId>1758</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_11_Udp_Tp_RxInd_NoBuffer_HM_CopyRx_NotOk</srcid><srcstatus/><internalId>1759</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>192</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>480</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00571.1c</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall perform the following further actions within the
        SoAd_RxIndication() function for reception of a PDU from a socket connection
        with PDU Header mode enabled to an upper layer using the TP-API:
          If no TP reception is in progress for the related socket connection:
            Call Up_[SoAd][Tp]CopyRxData() of the related upper layer module
            with the same RxPduId as used at Up_[SoAd][Tp]StartOfReception() and
            PduInfoType.SduDataPtr pointing to the PDU data provided by SoAd_RxIndication()
            and PduInfoType.SduLength set to minimum of the received PDU data and the available
            receive buffer in the upper layer module specified by bufferSizePtr
            at Up_[SoAd][Tp]StartOfReception().</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_35_Tcp_RxIndication_PduSplit</srcid><srcstatus/><internalId>1443</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_Udp_Con11_Tp_RxInd_WithHeader</srcid><srcstatus/><internalId>1678</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_Udp_Con11_Tp_RxInd_Segmented_WithHeader</srcid><srcstatus/><internalId>1680</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_Tcp_Con13_Tp_RxInd_WithHeader</srcid><srcstatus/><internalId>1689</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_Tcp_Con13_Tp_RxInd_WithHeader_Seg</srcid><srcstatus/><internalId>1690</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_Tcp_Con13_Tp_RxInd_WithHeader_SegInHeader</srcid><srcstatus/><internalId>1691</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_Udp_Con10_Tp_RepeatedCopyRxData</srcid><srcstatus/><internalId>1699</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_11_Udp_Tp_RxInd_NoBuffer_HM_Rx_Ok</srcid><srcstatus/><internalId>1753</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_11_Udp_Tp_RxInd_NoBuffer_HM_CopyRx_Busy</srcid><srcstatus/><internalId>1758</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_11_Udp_Tp_RxInd_NoBuffer_HM_CopyRx_NotOk</srcid><srcstatus/><internalId>1759</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>192</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>481</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00571.1d</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall perform the following further actions within the
        SoAd_RxIndication() function for reception of a PDU from a socket connection
        with PDU Header mode enabled to an upper layer using the TP-API:
          If no TP reception is in progress for the related socket connection:
            Call Up_[SoAd][Tp]RxIndication() if the complete PDU has been forwarded to the upper
            layer, otherwise copy all received data which could not be forwarded to the upper layer
            to a SoAd receive buffer for later processing by SoAd_MainFunction().</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_04_Partial_RxUdpTpAPI_WithHeader_Ringbuffer</srcid><srcstatus/><internalId>1681</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_RxUdpTp_WithHeader_Ringbuffer_NotContinuous</srcid><srcstatus/><internalId>1686</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_Tcp_Con13_Tp_RxInd_WithHeader</srcid><srcstatus/><internalId>1689</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_Tcp_Con13_Tp_RxInd_WithHeader_Seg</srcid><srcstatus/><internalId>1690</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_Tcp_Con13_Tp_RxInd_WithHeader_SegInHeader</srcid><srcstatus/><internalId>1691</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_Udp_Con10_Tp_RepeatedCopyRxData</srcid><srcstatus/><internalId>1699</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_11_Udp_Tp_RxInd_NoBuffer_HM_Rx_Ok</srcid><srcstatus/><internalId>1753</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_WrapAroundRingbuffer</srcid><srcstatus/><internalId>1968</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>192</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>482</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00571.2</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall perform the following further actions within the
        SoAd_RxIndication() function for reception of a PDU from a socket connection
        with PDU Header mode enabled to an upper layer using the TP-API:
          If a TP reception is in progress for the related socket connection and the
          related SoAd receive buffer is able to store all received data: copy all received
          data to the related SoAd receive buffer for later processing by SoAd_MainFunction().</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_04_Partial_RxUdpTpAPI_WithHeader_Ringbuffer</srcid><srcstatus/><internalId>1681</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_12_HeaderMode_MultiplePdus_Udp_Buffered</srcid><srcstatus/><internalId>1761</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_12_HeaderMode_MultiplePdus_Tcp_Buffered</srcid><srcstatus/><internalId>1762</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_12_HeaderMode_SegmentedPdu_Tcp_Buffered</srcid><srcstatus/><internalId>1765</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>192</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>483</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00574.1</id>
      <status>approved</status>
      <version>1</version>
      <description>In the SoAd_Mainfunction the SoAd shall process as specified below if a TP reception is
        in progress for a socket connection with PDU Header mode enabled:
          Query the available amount of data at the upper layer by calling the configurable
          callback function Up_[SoAd][Tp]CopyRxData() with PduInfoType.SduLength = 0.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_70_SegTpPdu_BUFREQ_E_BUSY</srcid><srcstatus/><internalId>1480</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_12_HeaderMode_MultiplePdus_Udp_Buffered</srcid><srcstatus/><internalId>1761</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_12_HeaderMode_MultiplePdus_Tcp_Buffered</srcid><srcstatus/><internalId>1762</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_12_HeaderMode_MultiplePdus_IF_TP_Tcp_Buffered_Segmented</srcid><srcstatus/><internalId>1763</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_12_HeaderMode_SegmentedPdu_Tcp_Buffered</srcid><srcstatus/><internalId>1765</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_WrapAroundRingbuffer</srcid><srcstatus/><internalId>1968</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00574</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>484</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00574.2</id>
      <status>approved</status>
      <version>1</version>
      <description>In the SoAd_Mainfunction the SoAd shall process as specified below if a TP reception is
        in progress for a socket connection with PDU Header mode enabled:
          Copy all data belonging to this socket connection from the SoAd receive buffer
          which can be accepted by the upper layer module determined at (1) to the
          upper layer by calling Up_[SoAd][Tp]CopyRxData().</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_35_Tcp_RxIndication_PduSplit</srcid><srcstatus/><internalId>1443</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_70_SegTpPdu_BUFREQ_E_BUSY</srcid><srcstatus/><internalId>1480</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_12_HeaderMode_MultiplePdus_Udp_Buffered</srcid><srcstatus/><internalId>1761</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_12_HeaderMode_MultiplePdus_Tcp_Buffered</srcid><srcstatus/><internalId>1762</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_12_HeaderMode_MultiplePdus_IF_TP_Tcp_Buffered_Segmented</srcid><srcstatus/><internalId>1763</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_12_HeaderMode_SegmentedPdu_Tcp_Buffered</srcid><srcstatus/><internalId>1765</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_WrapAroundRingbuffer</srcid><srcstatus/><internalId>1968</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00574</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>485</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00574.3</id>
      <status>approved</status>
      <version>1</version>
      <description>In the SoAd_Mainfunction the SoAd shall process as specified below if a TP reception is
        in progress for a socket connection with PDU Header mode enabled:
          Call Up_[SoAd][Tp]RxIndication() if the complete PDU has been
          forwarded to the upper layer and dispatch the next TP-PDU (if any).</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_70_SegTpPdu_BUFREQ_E_BUSY</srcid><srcstatus/><internalId>1480</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_12_HeaderMode_MultiplePdus_Udp_Buffered</srcid><srcstatus/><internalId>1761</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_12_HeaderMode_MultiplePdus_Tcp_Buffered</srcid><srcstatus/><internalId>1762</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_12_HeaderMode_MultiplePdus_IF_TP_Tcp_Buffered_Segmented</srcid><srcstatus/><internalId>1763</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_12_HeaderMode_SegmentedPdu_Tcp_Buffered</srcid><srcstatus/><internalId>1765</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_WrapAroundRingbuffer</srcid><srcstatus/><internalId>1968</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00574</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>486</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00680.1</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall use the following best match algorithm to select a
        socket connection of a socket connection group based on a provided (specific)
        remote address:
        (1) socket connections that have no (specific or wildcard) remote address set shall
            be ignored.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_05_SetUniqueRemoteAddr_AddrPort_NotSet</srcid><srcstatus/><internalId>1414</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_03_SoAd_DtlsConnectionStateChg_NoMatch</srcid><srcstatus/><internalId>1656</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00680</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>282</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>487</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00680.2a</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall use the following best match algorithm to select a
        socket connection of a socket connection group based on a provided (specific)
        remote address:
        (2) the remote address of the remaining socket connections shall be compared with
            the provided remote address and the socket connection with the best match
            according to the following ordered list (item listed earlier has higher priority
            towards items listed later) shall be selected:
            (a) IP address and port match</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_SetUniqueRemoteAddr_ExactMatch</srcid><srcstatus/><internalId>1650</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_03_SoAd_DtlsConnectionStateChg_IpV6</srcid><srcstatus/><internalId>1655</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00680</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>282</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>488</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00680.2b</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall use the following best match algorithm to select a
        socket connection of a socket connection group based on a provided (specific)
        remote address:
        (2) the remote address of the remaining socket connections shall be compared with
            the provided remote address and the socket connection with the best match
            according to the following ordered list (item listed earlier has higher priority
            towards items listed later) shall be selected:
            (b) IP address match (and wildcard set for port)</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_06_SetUniqueRemoteAddr_AddrMatch_PortWild</srcid><srcstatus/><internalId>1415</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_03_SoAd_DtlsConnectionStateChg_IpAddrMatch</srcid><srcstatus/><internalId>1653</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00680</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>282</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>489</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00680.2c</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall use the following best match algorithm to select a
        socket connection of a socket connection group based on a provided (specific)
        remote address:
        (2) the remote address of the remaining socket connections shall be compared with
            the provided remote address and the socket connection with the best match
            according to the following ordered list (item listed earlier has higher priority
            towards items listed later) shall be selected:
            (c) Port match (and wildcard set for IP address)</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_07_SetUniqueRemoteAddr_PortMatch_AddrWild</srcid><srcstatus/><internalId>1416</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00680</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>282</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>490</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00680.2d</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall use the following best match algorithm to select a
        socket connection of a socket connection group based on a provided (specific)
        remote address:
        (2) the remote address of the remaining socket connections shall be compared with
            the provided remote address and the socket connection with the best match
            according to the following ordered list (item listed earlier has higher priority
            towards items listed later) shall be selected:
            (d) Wildcards are used for both IP address and port</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_SetUniqueRemoteAddr_ClosedSocket</srcid><srcstatus/><internalId>1648</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_03_SetUniqueRemoteAddr_Wildcard</srcid><srcstatus/><internalId>1651</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_03_SoAd_DtlsConnectionStateChg_Wildcard</srcid><srcstatus/><internalId>1652</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00680</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>282</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>491</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00680.2e</id>
      <status>approved</status>
      <version>1</version>
      <description>SoAd shall use the following best match algorithm to select a
        socket connection of a socket connection group based on a provided (specific)
        remote address:
        (2) the remote address of the remaining socket connections shall be compared with
            the provided remote address and the socket connection with the best match
            according to the following ordered list (item listed earlier has higher priority
            towards items listed later) shall be selected:
            (e) No match (i.e. no socket connections can be selected)</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_SetUniqueRemoteAddr_NoMatch</srcid><srcstatus/><internalId>1649</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00680</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>282</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>492</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00582.a</id>
      <status>approved</status>
      <version>1</version>
      <description>For a UDP socket connection of type automatic i.e.
        configuration parameter SoAdSocketAutomaticSoConSetup set to TRUE) which uses
        a wildcard in the configured remote address (i.e. an ANY-String for IP address or
        port), SoAd shall
        (a) change the state of the socket connection to SOAD_SOCON_RECONNECT.</description>
      <comment>State transition is handled in next SoAd_MainFunction.
           See deviation dev.SoAd.Udp.AutoSoConSetupTxConf.</comment>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.Udp.AutoSoConSetupTxConf</srcid><srcstatus/><internalId>764</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_58_UdpAlive_Supervision_Timer</srcid><srcstatus/><internalId>1469</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_180_UdpIfTxConf_AutoSetup</srcid><srcstatus/><internalId>1603</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_181_UdpTpTxConf_AutoSetup</srcid><srcstatus/><internalId>1604</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00582</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>493</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00582.b</id>
      <status>approved</status>
      <version>1</version>
      <description>For a UDP socket connection of type automatic i.e.
        configuration parameter SoAdSocketAutomaticSoConSetup set to TRUE) which uses
        a wildcard in the configured remote address (i.e. an ANY-String for IP address or
        port), SoAd shall
        (b) reset the remote address to the configured
            remote address after a PDU transmission, directly before the related transmit
            confirmation function is called (or would be called if such a function is not
            configured).</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_58_UdpAlive_Supervision_Timer</srcid><srcstatus/><internalId>1469</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_180_UdpIfTxConf_AutoSetup</srcid><srcstatus/><internalId>1603</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_181_UdpTpTxConf_AutoSetup</srcid><srcstatus/><internalId>1604</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00582</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>494</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00644.a</id>
      <status>approved</status>
      <version>1</version>
      <description>For a TCP socket connection of type automatic i.e.
        configuration parameter SoAdSocketAutomaticSoConSetup set to TRUE) which uses
        a wildcard in the configured remote address (i.e. an ANY-String for IP address or
        port), SoAd shall
        (a) disable further transmission or reception for this socket
            connection (i.e. new transmit requests shall be rejected with E_NOT_OK and
            received messages shall simply be discarded) after a PDU transmission, directly
            before the related transmit confirmation function is called (or would be called if such
            a function is not configured).</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_15_TcpTransmit_Auto</srcid><srcstatus/><internalId>1424</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00644</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>252</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>495</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00644.b</id>
      <status>approved</status>
      <version>1</version>
      <description>For a TCP socket connection of type automatic i.e.
        configuration parameter SoAdSocketAutomaticSoConSetup set to TRUE) which uses
        a wildcard in the configured remote address (i.e. an ANY-String for IP address or
        port), SoAd shall
        (b) close the socket connection in the next SoAd_MainFunction().</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_15_TcpTransmit_Auto</srcid><srcstatus/><internalId>1424</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00644</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>252</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>496</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00576_Receive</id>
      <status>approved</status>
      <version>1</version>
      <description>If SoAd_TpCancelReceive() is called for a PDU where TP reception is not
        in progress, SoAd shall ignore the request and return E_NOT_OK.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_06_CancelRx_Tcp_Discarded_NoHeader</srcid><srcstatus/><internalId>1723</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_06_CancelRx_Udp_Discarded_NoHeader</srcid><srcstatus/><internalId>1728</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_06_CancelRx_Tcp_Discarded_WithHeader</srcid><srcstatus/><internalId>1733</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_06_CancelRx_Tcp_NoRx_PendingTx_WithHeader</srcid><srcstatus/><internalId>1734</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00576</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>497</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00576_Transmit</id>
      <status>approved</status>
      <version>1</version>
      <description>If SoAd_TpCancelTransmit() is called for a PDU where TP transmission is not
        in progress, SoAd shall ignore the request and return E_NOT_OK.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_06_CancelTx_NoPreviousRequest</srcid><srcstatus/><internalId>1736</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00576</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>498</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00695.a</id>
      <status>approved</status>
      <version>1</version>
      <description>If a UDP socket connection is configured with a
        SoAdSocketUdpAliveSupervisionTimeout and the alive supervision timer runs
        out, SoAd shall
        (a) change the state of the socket connection to SOAD_SOCON_RECONNECT.</description>
      <furtherinfo>WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.</furtherinfo>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_33_UdpAlive_Supervision</srcid><srcstatus/><internalId>1441</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_34_UdpAlive_Supervision_Reset_Timer</srcid><srcstatus/><internalId>1442</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_58_UdpAlive_Supervision_Timer</srcid><srcstatus/><internalId>1469</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_142_UdpAlive_Supervision_NextUdpAliveTimeout_1</srcid><srcstatus/><internalId>1559</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_143_UdpAlive_Supervision_NextUdpAliveTimeout_2</srcid><srcstatus/><internalId>1560</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_144_UdpAlive_Supervision_NextUdpAliveTimeout_3</srcid><srcstatus/><internalId>1561</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_145_UdpAlive_Supervision_NextUdpAliveTimeout_4</srcid><srcstatus/><internalId>1562</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_146_UdpAlive_Supervision_NextUdpAliveTimeout_5</srcid><srcstatus/><internalId>1563</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_147_UdpAlive_Supervision_NextUdpAliveTimeout_6</srcid><srcstatus/><internalId>1564</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_148_UdpAlive_Supervision_NextUdpAliveTimeout_7</srcid><srcstatus/><internalId>1565</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_149_UdpAlive_Supervision_NextUdpAliveTimeout_8</srcid><srcstatus/><internalId>1566</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_150_UdpAlive_Supervision_NextUdpAliveTimeout_9</srcid><srcstatus/><internalId>1567</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00695</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>301</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>499</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00695.b</id>
      <status>approved</status>
      <version>1</version>
      <description>If a UDP socket connection is configured with a
        SoAdSocketUdpAliveSupervisionTimeout and the alive supervision timer runs
        out, SoAd shall
        (b) deactivate the alive supervision timer.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_33_UdpAlive_Supervision</srcid><srcstatus/><internalId>1441</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_34_UdpAlive_Supervision_Reset_Timer</srcid><srcstatus/><internalId>1442</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_58_UdpAlive_Supervision_Timer</srcid><srcstatus/><internalId>1469</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00695</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>301</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>500</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00695.c</id>
      <status>approved</status>
      <version>1</version>
      <description>If a UDP socket connection is configured with a
        SoAdSocketUdpAliveSupervisionTimeout and the alive supervision timer runs
        out, SoAd shall
        (c) reset the remote address to the configured remote address at
        SoAd_MainFunction(). (SRS_Eth_00085)</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_33_UdpAlive_Supervision</srcid><srcstatus/><internalId>1441</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_34_UdpAlive_Supervision_Reset_Timer</srcid><srcstatus/><internalId>1442</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_58_UdpAlive_Supervision_Timer</srcid><srcstatus/><internalId>1469</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00695</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>301</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>501</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00096.ServiceId</id>
      <status>approved</status>
      <version>1</version>
      <description>The macro SOAD_GETVERSIONINFO_SVCID shall have the value: Service ID[hex]: 0x02.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00096</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>502</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00093.ServiceId</id>
      <status>approved</status>
      <version>1</version>
      <description>The macro SOAD_INIT_SVCID shall have the value: Service ID[hex]: 0x01.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00093</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>503</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00091.ServiceId</id>
      <status>approved</status>
      <version>1</version>
      <description>The macro SOAD_IFTRANSMIT_SVCID shall have the value: Service ID[hex]: 0x03.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00091</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>504</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00656.ServiceId</id>
      <status>approved</status>
      <version>1</version>
      <description>The macro SOAD_IFROUTINGGROUPTRANSMIT_SVCID shall have the value: Service ID[hex]: 0x1D.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00656</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>505</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00711.ServiceId</id>
      <status>approved</status>
      <version>1</version>
      <description>The macro SOAD_IFSPECIFICROUTINGGROUPTRANSMIT_SVCID shall have the value:
        Service ID[hex]: 0x1F.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00711</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>317</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>506</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00105.ServiceId</id>
      <status>approved</status>
      <version>1</version>
      <description>The macro SOAD_TPTRANSMIT_SVCID shall have the value: Service ID[hex]: 0x04.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00105</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>507</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00522.ServiceId</id>
      <status>approved</status>
      <version>1</version>
      <description>The macro SOAD_TPCANCELTRANSMIT_SVCID shall have the value: Service ID[hex]: 0x05.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00522</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>508</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00521.ServiceId</id>
      <status>approved</status>
      <version>1</version>
      <description>The macro SOAD_TPCANCELRECEIVE_SVCID shall have the value: Service ID[hex]: 0x06.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00521</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>509</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00509.ServiceId</id>
      <status>approved</status>
      <version>1</version>
      <description>The macro SOAD_GETSOCONID_SVCID shall have the value: Service ID[hex]: 0x07.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00509</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>135</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>510</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00510.ServiceId</id>
      <status>approved</status>
      <version>1</version>
      <description>The macro SOAD_OPENSOCON_SVCID shall have the value: Service ID[hex]: 0x08.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00510</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>511</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00511.ServiceId</id>
      <status>approved</status>
      <version>1</version>
      <description>The macro SOAD_CLOSESOCON_SVCID shall have the value: Service ID[hex]: 0x09.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00511</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>137</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>512</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00520.ServiceId</id>
      <status>approved</status>
      <version>1</version>
      <description>The macro SOAD_REQUESTIPADDRASSIGNMENT_SVCID shall have the value: Service ID[hex]: 0x0A.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00520</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>146</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>513</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00536.ServiceId</id>
      <status>approved</status>
      <version>1</version>
      <description>The macro SOAD_RELEASEIPADDRASSIGNMENT_SVCID shall have the value: Service ID[hex]: 0x0B.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00536</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>514</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00506.ServiceId</id>
      <status>approved</status>
      <version>1</version>
      <description>The macro SOAD_GETLOCALADDR_SVCID shall have the value: Service ID[hex]: 0x0C.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00506</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>515</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00507.ServiceId</id>
      <status>approved</status>
      <version>1</version>
      <description>The macro SOAD_GETPHYSADDR_SVCID shall have the value: Service ID[hex]: 0x0D.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00507</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>516</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00655.ServiceId</id>
      <status>approved</status>
      <version>1</version>
      <description>The macro SOAD_GETREMOTEADDR_SVCID shall have the value: Service ID[hex]: 0x1C.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00655</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>261</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>517</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00516.ServiceId</id>
      <status>approved</status>
      <version>1</version>
      <description>The macro SOAD_ENABLEROUTING_SVCID shall have the value: Service ID[hex]: 0x0E.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00516</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>518</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00714.ServiceId</id>
      <status>approved</status>
      <version>1</version>
      <description>The macro SOAD_ENABLESPECIFICROUTING_SVCID shall have the value: Service ID[hex]: 0x20.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00714</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>320</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>519</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00517.ServiceId</id>
      <status>approved</status>
      <version>1</version>
      <description>The macro SOAD_DISABLEROUTING_SVCID shall have the value: Service ID[hex]: 0x0F.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00517</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>520</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00717.ServiceId</id>
      <status>approved</status>
      <version>1</version>
      <description>The macro SOAD_DISABLESPECIFICROUTING_SVCID shall have the value: Service ID[hex]: 0x21.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00717</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>323</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>521</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00515.ServiceId</id>
      <status>approved</status>
      <version>1</version>
      <description>The macro SOAD_SETREMOTEADDR_SVCID shall have the value: Service ID[hex]: 0x10.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00515</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>522</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00532.1</id>
      <status>approved</status>
      <version>1</version>
      <description>The function SoAd_SetRemoteAddr() shall only proceed if
        SoConId refers to a socket connection that is in the mode SOAD_SOCON_OFFLINE.
        Otherwise the request shall be rejected and return with E_NOT_OK.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_11_SetRemoteAddr_ONLINE</srcid><srcstatus/><internalId>1420</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00532</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>156</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>523</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00532.2</id>
      <status>approved</status>
      <version>1</version>
      <description>The function SoAd_SetRemoteAddr() shall only proceed if
        SoConId refers to a UDP socket connection that has no active TP session
        (i.e. no reception or transmission via the TP-API ongoing).
        Otherwise the request shall be rejected and return with E_NOT_OK.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con9_SetRemoteAddr_Online</srcid><srcstatus/><internalId>1370</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00532</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>156</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>524</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00671.ServiceId</id>
      <status>approved</status>
      <version>1</version>
      <description>The macro SOAD_SETUNIQUEREMOTEADDR_SVCID shall have the value: Service ID[hex]: 0x1E.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00671</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>275</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>525</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00676.1</id>
      <status>approved</status>
      <version>1</version>
      <description>If no socket connection is already configured with the address
        specified by RemoteAddrPtr, SoAd_SetUniqueRemoteAddr() shall:
        (1) choose an unused socket connection using the best match algorithm
            described in [SWS_SoAd_00680].</description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00680</srcid><srcstatus/><internalId>282</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00676</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>279</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>526</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00676.2</id>
      <status>approved</status>
      <version>1</version>
      <description>If no socket connection is already configured with the address
        specified by RemoteAddrPtr, SoAd_SetUniqueRemoteAddr() shall:
        (2) set it to the remote address specified by RemoteAddrPtr.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_06_SetUniqueRemoteAddr_AddrMatch_PortWild</srcid><srcstatus/><internalId>1415</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_07_SetUniqueRemoteAddr_PortMatch_AddrWild</srcid><srcstatus/><internalId>1416</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00676</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>279</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>527</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00676.3</id>
      <status>approved</status>
      <version>1</version>
      <description>If no socket connection is already configured with the address
        specified by RemoteAddrPtr, SoAd_SetUniqueRemoteAddr() shall:
        (3) set AssignedSoConIdPtr to the index of the chosen socket connection.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_06_SetUniqueRemoteAddr_AddrMatch_PortWild</srcid><srcstatus/><internalId>1415</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_07_SetUniqueRemoteAddr_PortMatch_AddrWild</srcid><srcstatus/><internalId>1416</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_03_SetUniqueRemoteAddr_ClosedSocket</srcid><srcstatus/><internalId>1648</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_03_SetUniqueRemoteAddr_ExactMatch</srcid><srcstatus/><internalId>1650</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00676</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>279</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>528</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00676.4</id>
      <status>approved</status>
      <version>1</version>
      <description>If no socket connection is already configured with the address
        specified by RemoteAddrPtr, SoAd_SetUniqueRemoteAddr() shall:
        (4) return E_OK.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_06_SetUniqueRemoteAddr_AddrMatch_PortWild</srcid><srcstatus/><internalId>1415</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_07_SetUniqueRemoteAddr_PortMatch_AddrWild</srcid><srcstatus/><internalId>1416</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_128_Tcp_SetUniqueRemoteAddr_Wildcard</srcid><srcstatus/><internalId>1546</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_03_SetUniqueRemoteAddr_ClosedSocket</srcid><srcstatus/><internalId>1648</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_03_SetUniqueRemoteAddr_ExactMatch</srcid><srcstatus/><internalId>1650</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00676</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>279</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>529</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00508.ServiceId</id>
      <status>approved</status>
      <version>1</version>
      <description>The macro SOAD_TPCHANGEPARAMETER_SVCID shall have the value: Service ID[hex]: 0x11.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00508</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>530</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00681.ServiceId</id>
      <status>approved</status>
      <version>1</version>
      <description>The macro SOAD_READDHCPHOSTNAMEOPTION_SVCID shall have the value: Service ID[hex]: 0x1A.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00681</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>283</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>531</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00679.ServiceId</id>
      <status>approved</status>
      <version>1</version>
      <description>The macro SOAD_WRITEDHCPHOSTNAMEOPTION_SVCID shall have the value: Service ID[hex]: 0x1B.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00679</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>281</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>532</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00097.ServiceId</id>
      <status>approved</status>
      <version>1</version>
      <description>The macro SOAD_RXINDICATION_SVCID shall have the value: Service ID[hex]: 0x12.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00097</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>533</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00523.ServiceId</id>
      <status>approved</status>
      <version>1</version>
      <description>The macro SOAD_COPYTXDATA_SVCID shall have the value: Service ID[hex]: 0x13.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00523</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>149</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>534</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00098.ServiceId</id>
      <status>approved</status>
      <version>1</version>
      <description>The macro SOAD_TXCONFIRMATION_SVCID shall have the value: Service ID[hex]: 0x14.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00098</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>535</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00099.ServiceId</id>
      <status>approved</status>
      <version>1</version>
      <description>The macro SOAD_TCPACCEPTED_SVCID shall have the value: Service ID[hex]: 0x15.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00099</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>536</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00100.ServiceId</id>
      <status>approved</status>
      <version>1</version>
      <description>The macro SOAD_TCPCONNECTED_SVCID shall have the value: Service ID[hex]: 0x16.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00100</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>537</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00146.ServiceId</id>
      <status>approved</status>
      <version>1</version>
      <description>The macro SOAD_TCPIPEVENT_SVCID shall have the value: Service ID[hex]: 0x17.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00146</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>538</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00209.ServiceId</id>
      <status>approved</status>
      <version>1</version>
      <description>The macro SOAD_LOCALIPADDRASSIGNMENTCHG_SVCID shall have the value: Service ID[hex]: 0x18.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00209</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>65</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>539</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_SoAd_00121.ServiceId</id>
      <status>approved</status>
      <version>1</version>
      <description>The macro SOAD_MAINFUNCTION_SVCID shall have the value: Service ID[hex]: 0x19.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00121</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>540</internalId></specobject>
    <specobject>
      <id>SoAd.ASR43.SWS_SoAd_00733.ServiceId</id>
      <status>approved</status>
      <version>1</version>
      <description>The macro SOAD_RELEASEREMOTEADDR_SVCID shall have the value: Service ID[hex]: 0x23.</description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00733</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>346</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>541</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_BSW_00212.VersionInfo</id>
      <status>approved</status>
      <version>1</version>
      <description>If development error detection is enabled and if the argument versioninfo is a
        NULL pointer, SoAd_GetVersionInfo() shall raise SOAD_E_PARAM_POINTER and
        return without any action.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_GetVersionInfo_ParamNull</srcid><srcstatus/><internalId>1291</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>542</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_BSW_00212.IfTransmit</id>
      <status>approved</status>
      <version>1</version>
      <description>If development error detection is enabled: SoAd_IfTransmit() shall check parameter
        SoAdSrcPduInfoPtr for being a NULL_PTR. If this is TRUE, the function
        shall raise the development error SOAD_E_PARAM_POINTER and return E_NOT_OK.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_IfTransmit_NullPdu</srcid><srcstatus/><internalId>1332</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>543</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_BSW_00212.TpTransmit</id>
      <status>approved</status>
      <version>1</version>
      <description>If development error detection is enabled: SoAd_TpTransmit() shall check parameter
        SoAdSrcPduInfoPtr for being a NULL_PTR. If this is TRUE, the function
        shall raise the development error SOAD_E_PARAM_POINTER and return E_NOT_OK.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_TpTransmit_ParamNull</srcid><srcstatus/><internalId>1289</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>544</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_BSW_00212.ReadDhcpHostNameOption</id>
      <status>approved</status>
      <version>1</version>
      <description>If development error detection is enabled: SoAd_ReadDhcpHostNameOption() shall check
        all pointer parameters for being a NULL_PTR. If this is TRUE, the function shall
        raise the development error SOAD_E_PARAM_POINTER and return E_NOT_OK.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_ReadDhcpHostName_NullLength</srcid><srcstatus/><internalId>1293</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_00_ReadDhcpHostName_NullData</srcid><srcstatus/><internalId>1294</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>545</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_BSW_00212.WriteDhcpHostNameOption</id>
      <status>approved</status>
      <version>1</version>
      <description>If development error detection is enabled: SoAd_WriteDhcpHostNameOption() shall
        check all pointer parameters for being a NULL_PTR. If this is TRUE, the function shall
        raise the development error SOAD_E_PARAM_POINTER and return E_NOT_OK.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_WriteDhcpHostName_ParamNull</srcid><srcstatus/><internalId>1292</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>546</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_BSW_00212.RxIndication</id>
      <status>approved</status>
      <version>1</version>
      <description>If development error detection is enabled: SoAd_RxIndication() shall check parameter
        BufPtr for being a NULL_PTR. If this is TRUE, the function shall raise
        the development error SOAD_E_PARAM_POINTER and return E_NOT_OK.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_RxIndication_NullBuffr</srcid><srcstatus/><internalId>1330</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>547</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_BSW_00212.Init</id>
      <status>approved</status>
      <version>1</version>
      <description>If development error detection is enabled: SoAd_Init() shall check parameter
        SoAdConfigPtr for being a NULL_PTR. If this is TRUE, the function shall raise
        the development error SOAD_E_PARAM_POINTER.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_Init_ParamNull</srcid><srcstatus/><internalId>1286</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_00_Init_NullConfig</srcid><srcstatus/><internalId>1333</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>548</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_BSW_00212.GetSoConId</id>
      <status>approved</status>
      <version>1</version>
      <description>If development error detection is enabled: SoAd_GetSoConId() shall check parameter
        SoConIdPtr for being a NULL_PTR. If this is TRUE, the function shall raise
        the development error SOAD_E_PARAM_POINTER and return E_NOT_OK.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_GetSoConId_ParamNull</srcid><srcstatus/><internalId>1288</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>549</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_BSW_00212.GetSoConMode</id>
      <status>approved</status>
      <version>1</version>
      <description>If development error detection is enabled: SoAd_GetSoConMode() shall check parameter
        ModePtr for being a NULL_PTR. If this is TRUE, the function shall raise
        the development error SOAD_E_PARAM_POINTER and return E_NOT_OK.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_GetSoConMode_NullPtr</srcid><srcstatus/><internalId>1341</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>550</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_BSW_00212.SetRemoteAddr</id>
      <status>approved</status>
      <version>1</version>
      <description>If development error detection is enabled: SoAd_SetRemoteAddr() shall check parameter
        IpAddrPtr for being a NULL_PTR. If this is TRUE, the function shall raise
        the development error SOAD_E_PARAM_POINTER and return E_NOT_OK.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_SetRemoteAddr_ParamNull</srcid><srcstatus/><internalId>1297</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>551</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_BSW_00212.SetUniqueRemoteAddr</id>
      <status>approved</status>
      <version>1</version>
      <description>If development error detection is enabled: SoAd_SetUniqueRemoteAddr() shall check
        parameters RemoteAddrPtr and AssignedSoConIdPtr for being a NULL_PTR. If this is TRUE,
        the function shall raise the development error SOAD_E_PARAM_POINTER and return E_NOT_OK.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_SetUniqueRemoteAddr_NullPtr</srcid><srcstatus/><internalId>1339</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_00_SetUniqueRemoteAddr_AssignedSoConId_NULLPTR</srcid><srcstatus/><internalId>1349</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>552</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_BSW_00212.GetRemoteAddr</id>
      <status>approved</status>
      <version>1</version>
      <description>If development error detection is enabled: SoAd_GetRemoteAddr() shall check parameter
        IpAddrPtr for being a NULL_PTR. If this is TRUE, the function shall raise
        the development error SOAD_E_PARAM_POINTER and return E_NOT_OK.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_GetRemoteAddr_NullPtr</srcid><srcstatus/><internalId>1337</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>553</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_BSW_00212.CopyTxData</id>
      <status>approved</status>
      <version>1</version>
      <description>If development error detection is enabled: SoAd_CopyTxData() shall check parameter
        BufPtr for being a NULL_PTR. If this is TRUE, the function shall raise
        the development error SOAD_E_PARAM_POINTER and return BUFREQ_E_NOT_OK.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_CopyTxData_ParamNull</srcid><srcstatus/><internalId>1290</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>554</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_BSW_00212.TcpAccepted</id>
      <status>approved</status>
      <version>1</version>
      <description>If development error detection is enabled: SoAd_TcpAccepted() shall check parameter
        RemoteAddrPtr for being a NULL_PTR. If this is TRUE, the function shall raise
        the development error SOAD_E_PARAM_POINTER and return E_NOT_OK.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_TcpAccepted_ParamNull</srcid><srcstatus/><internalId>1295</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>555</internalId></specobject>
    <specobject>
      <id>SoAd.SWS_BSW_00212.GetLocalAddr</id>
      <status>approved</status>
      <version>1</version>
      <description>If development error detection is enabled: SoAd_GetLocalAddr() shall check parameter
        LocalAddrPtr for being a NULL_PTR. If this is TRUE, the function shall raise
        the development error SOAD_E_PARAM_POINTER and return E_NOT_OK.</description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_GetLocalAddr_ParamNull</srcid><srcstatus/><internalId>1298</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>556</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>SoAd.EB.BSWMDGeneration_1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The SoAd module's generator shall generate a basic software
        module description (BSWMD) based on the SoAd module's
        configuration containing information on the exclusive areas
        required by the SoAd module's implementation.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_03_SchM</srcid><srcstatus/><internalId>1215</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>557</internalId></specobject>

    <specobject>
      <id>SoAd.EB.BSWMDGeneration_2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The SoAd module's generator shall generate a basic software
        module description (BSWMD) based on the SoAd module's
        configuration containing information on the scheduled
        MainFunctions together with the scheduling period.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_03_SchM</srcid><srcstatus/><internalId>1215</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>558</internalId></specobject>

    <specobject>
      <id>SoAd.EB.BSWMDGeneration_3</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The SoAd module's BSWMD shall be generated using a generator
        mode named "generate_swcd".
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_03_SchM</srcid><srcstatus/><internalId>1215</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>559</internalId></specobject>

    <specobject>
      <id>SoAd.EB.MainFunction.InitCheck</id>
      <status>approved</status>
      <source>EB: ASCCCB-1403</source>
      <version>1</version>
      <description>
        If a Main function of a un-initialized module is called from the
        BSW Scheduler, then it shall return immediately without
        performing any functionality and without raising any errors.
      </description>
      <comment>
        Rationale:
        Main Function processing of an un-initialized Module may result
        in undesired and non defined behaviour.
    
        Rationale for the deviation list: The SchM module may schedule
        the modules main function before the module is initialized.
        This would result in lots of Det errors during start up.
        Therefore the modules main function does not throw a Det error
        if the module is not yet initialized and simply returns in this
        case.
    
        EB requirement is in line with the AUTOSAR 4.0 General SRS
        requirement BSW00450.
        https://issue.ebgroup.elektrobit.com/browse/ASCCCB-1403
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_MainFunction_NoInit</srcid><srcstatus/><internalId>1269</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>560</internalId></specobject>

    <specobject>
      <id>SoAd.EB.MainFunctionTx.InitCheck</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If Main function Tx of a un-initialized module is called from the
        BSW Scheduler, then it shall return immediately without
        performing any functionality and without raising any errors.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_MainFunctionTx_NoInit</srcid><srcstatus/><internalId>1270</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>561</internalId></specobject>

    <specobject>
      <id>SoAd.EB.HandleIdGenerator</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The module shall support the correct automatic calculation of
        the handle IDs for the following parameters:
        - SoAdRoutingGroupId
        - SoAdRxPduId
        - SoAdSocketId
        - SoAdTxPduId
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_05_HandleIdGenerator</srcid><srcstatus/><internalId>1217</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>562</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PublishedInformation</id>
      <status>approved</status>
      <source>AUTOSAR_SRS_BSWGeneral.pdf, V3.2.0</source>
      <version>2</version>
      <description>
        The following version numbers shall be defined in the header file according to [BSW00402]
        and [BSW00318] (General Requirements on Basic Software Modules of ASR V3.2.0 R4.0 Rev 3).
        * SOAD_VENDOR_ID
        * SOAD_MODULE_ID
        * SOAD_AR_RELEASE_MAJOR_VERSION
        * SOAD_AR_RELEASE_MINOR_VERSION
        * SOAD_AR_RELEASE_REVISION_VERSION
        * SOAD_SW_MAJOR_VERSION
        * SOAD_SW_MINOR_VERSION
        * SOAD_SW_PATCH_VERSION
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_PublishedInformation</srcid><srcstatus/><internalId>1629</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>563</internalId></specobject>

    <specobject>
      <id>SoAd.EB.MCG.UnitTests</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There may be unit tests for the MCG, but these are not required.
      </description>
      <furtherinfo>
        WRN.swuts.needscoverage.count - Short-term solution, detailed analysis pending.
      </furtherinfo>
      <comment>
        Rationale:
        Unit tests are helpful with implementing software; however, since they test only
        small units, they cannot guarantee the correctness of the tested code in the greater
        context.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.soad.test.SoAdCodeGeneratorTest.testMainFuncPeriodExceedsTxUdpTrgTO</srcid><srcstatus/><internalId>1167</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.soad.test.SoAdCodeGeneratorTest.testPduHeaderIdInsertedBeforePduTransmittedP0</srcid><srcstatus/><internalId>1168</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.soad.test.SoAdCodeGeneratorTest.testPduHeaderIdInsertedBeforePduTransmittedP1</srcid><srcstatus/><internalId>1169</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.soad.test.SoAdCodeGeneratorTest.testNonNaturalSortingOfPduHeaderIdForSoAdRxPduHeaderId</srcid><srcstatus/><internalId>1171</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.soad.test.SoAdCodeGeneratorTest.testMetaDataTypePayloadType16</srcid><srcstatus/><internalId>1172</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.soad.test.tools.AuxiliaryMethodsTest.testGetAddInfixShallInsertAnInfixAfterFirstOccurrenceOfTheSeparator</srcid><srcstatus/><internalId>1181</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.soad.test.tools.AuxiliaryMethodsTest.testGetAddInfixShallDoNothingIfANullStringIsPassedAsAnInput</srcid><srcstatus/><internalId>1182</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.soad.test.tools.AuxiliaryMethodsTest.testGetAddInfixShallDoNothingIfAnEmptyStringIsPassedAsAnInput</srcid><srcstatus/><internalId>1183</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.soad.test.tools.AuxiliaryMethodsTest.testGetAddInfixShallDoNothingIfAnEmptyInfixIsPassed</srcid><srcstatus/><internalId>1184</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.soad.test.tools.AuxiliaryMethodsTest.testGetAddInfixShallDoNothingIfANullInfixIsPassed</srcid><srcstatus/><internalId>1185</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.soad.test.tools.AuxiliaryMethodsTest.testGetAddInfixShallDoNothingIfANullSeparatorIsPassed</srcid><srcstatus/><internalId>1186</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.soad.test.unit.input.ConverterTest.testStringToLongConversion</srcid><srcstatus/><internalId>1195</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.soad.test.unit.input.ConverterTest.testStringToLongConversionInvalid</srcid><srcstatus/><internalId>1196</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.soad.test.unit.input.Factory_Test.test_newCollection</srcid><srcstatus/><internalId>1197</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.soad.test.unit.input.Factory_Test.test_newObject_fromDataContext</srcid><srcstatus/><internalId>1198</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.soad.test.unit.input.Factory_Test.test_newObject_fromDataRoot</srcid><srcstatus/><internalId>1199</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.soad.test.unit.input.Factory_Test.test_newReference</srcid><srcstatus/><internalId>1200</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.soad.test.unit.xpath.XPathFunctionTest.testXPathFunctionsIsSpecificRG</srcid><srcstatus/><internalId>1201</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.soad.test.unit.xpath.XPathFunctionTest.testXPathFunctionsGetSoAdRoutesForPdu</srcid><srcstatus/><internalId>1202</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.soad.test.unit.xpath.XPathFunctionTest.testXPathFunctionsGetSoAdRoutesForRoutingGroup</srcid><srcstatus/><internalId>1203</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.soad.test.unit.xpath.XPathFunctionTest.testXPathFunctionsGetSoAdSocketConnectionGroupsOfSoAdRoutes</srcid><srcstatus/><internalId>1204</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.soad.test.unit.xpath.XPathFunctionTest.testXPathFunctionGetInvalidHeaderIdRoutesOfService</srcid><srcstatus/><internalId>1205</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>564</internalId></specobject>

    <specobject>
      <id>SoAd.EB.MCG.UnitTests.FileSectionComparison</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There may be unit tests for the File Section Comparison of the MCG. 
      </description>
      <comment>
        Rationale:
        The File Section Comparison of the MCG is used to regulate the Reference Tests of the MCG. 
    The Unit Tests therefore secure the functionality of these reference Tests.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.soad.test.comparator.FileSectionComparisonTest.testValidationErrors</srcid><srcstatus/><internalId>1173</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.soad.test.comparator.FileSectionComparisonTest.testValidationPasses</srcid><srcstatus/><internalId>1174</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.soad.test.comparator.FileSectionComparisonTest.testFoundSingleSection</srcid><srcstatus/><internalId>1175</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.soad.test.comparator.FileSectionComparisonTest.testFailToFindSingleSection</srcid><srcstatus/><internalId>1176</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.soad.test.comparator.FileSectionComparisonTest.testFoundTwoSections</srcid><srcstatus/><internalId>1177</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.soad.test.comparator.FileSectionComparisonTest.testFailToFindBothSections</srcid><srcstatus/><internalId>1178</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.soad.test.comparator.FileSectionComparisonTest.testComparisonFromFileSystemPass</srcid><srcstatus/><internalId>1179</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.soad.test.comparator.FileSectionComparisonTest.testComparisonFromFileSystemFail</srcid><srcstatus/><internalId>1180</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>565</internalId></specobject>
  
    <specobject>
      <id>SoAd.EB.SOAD_E_INV_PDUHEADER_ID</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Name SoAdReportInvPDUHeaderIdToDetEnable {SOAD_REPORT_SOAD_E_INV_PDUHEADER_ID}
        Description:
        Enables the reporting of SOAD_E_INV_PDUHEADER_ID to DET whenever
        an invalid PDU header ID is received and DET reporting is enabled
        (i.e. SoAdDevErrorDetect = TRUE)
        Multiplicity 1
        Type EcucBooleanParamDef
        Default value true
        Configuration Class
        Pre-compile time X All Variants
        Link time -
        Post-build time -
        Scope / Dependency scope: ECU
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00559.3</srcid><srcstatus/><internalId>465</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>566</internalId></specobject>

    <specobject>
      <id>SoAd.EB.IfTransmit_NotOnline</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAd_IfTransmit() is called for a socket connection which is not online, the module shall
        stop processing and return E_NOT_OK.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Con16000_IfTransmit_NotOnline</srcid><srcstatus/><internalId>1231</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>567</internalId></specobject>

    <specobject>
      <id>SoAd.EB.IfTransmit_SocketClosed</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAd_IfTransmit() is called for a closed TcpIp socket, the module shall
        stop processing and return E_NOT_OK.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Con16001_IfTransmit_SocketClosed</srcid><srcstatus/><internalId>1232</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>568</internalId></specobject>

    <specobject>
      <id>SoAd.EB.IfTransmit_Preemption</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAd_IfTransmit() preempts another call of SoAd_IfTransmit() using the same socket
        connection, the module shall stop processing and return E_NOT_OK.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Con16002_IfTransmit_TxWhileTxing</srcid><srcstatus/><internalId>1233</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>569</internalId></specobject>

    <specobject>
      <id>SoAd.EB.UnexpectedTxConfirmation</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If PDU route already in use (transmit in progress) and UL did not wait for 
        TxConfirmation or an unexpected Tx confirmation occurred, confirmation will be discarded. 
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_101_UlNotWaitingForTxConfirmation</srcid><srcstatus/><internalId>1513</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_127_ReleaseDuringSending</srcid><srcstatus/><internalId>1578</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_163_MainFunctionDuringSending</srcid><srcstatus/><internalId>1591</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_164_MainFunctionDuringIfTransmit</srcid><srcstatus/><internalId>1592</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>570</internalId></specobject>

    <specobject>
      <id>SoAd.EB.CopyTxData_BiggerBuffer</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAd_CopyTxData() is called with a buffer size bigger than the Pdu length given at
        SoAd_IfTransmit(), SoAd_CopyTxData() shall return BUFREQ_E_NOT_OK.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Con16005_CopyTxData_BigBuffer</srcid><srcstatus/><internalId>1236</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>571</internalId></specobject>

    <specobject>
      <id>SoAd.EB.Up_SoAdTpStartOfReception_BUFREQ_E_BUSY</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If [UL]_SoAdTpStartOfReception() returns BUFREQ_E_BUSY SoAd will try to store data in
        internal buffer, which is processed within a next SoAd_MainFunction() call.
      </description>
      <comment>
        Backward compatibility feature - the use case is PDU Router Wrapper in AUTOSAR 3.2. 
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_70_SegTpPdu_BUFREQ_E_BUSY</srcid><srcstatus/><internalId>1480</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>572</internalId></specobject>

    <specobject>
      <id>SoAd.EB.Up_TpCopyTxData_BUFREQ_E_BUSY</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If Up_SoAdTpCopyTxData() returns BUFREQ_E_BUSY no data will be sent and SoAd 
        should retry the request in a subsequent SoAd_MainFunction() call.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_47_Tcp_CopyTxData_Busy</srcid><srcstatus/><internalId>1457</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_52_Up_TpCopyTxData_BUFFER_NOT_AVAIL</srcid><srcstatus/><internalId>1462</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>573</internalId></specobject>

    <specobject>
      <id>SoAd.EB.Up_TpCopyTxData_BUFREQ_E_OVFL</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If Up_SoAdTpCopyTxData() returns with BUFREQ_E_OVFL for a UDP socket connection, 
        SoAd shall immediately terminate the TP transmit session and notify the upper layer with
        the configured transmit confirmation function (Up_[SoAd][Tp]TxConfirmation()) with
        E_NOT_OK as result. (Note: the related socket connection is not closed in this case.)
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_52_Up_TpCopyTxData_BUFFER_NOT_AVAIL</srcid><srcstatus/><internalId>1462</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>574</internalId></specobject>

    <specobject>
      <id>SoAd.EB.Buffer.TcpSegmentation</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SoAd shall maintain a dedicated buffer for every TCP socket connection related to
        SocketRoutes to If-API upper layers for the reception of segmented SoAdPduHeaders
        and If-PDUs.
        * The buffer shall be able to store one SoAdPduHeader plus the largest If-PDU
        related to this socket connection.
        * SoAd shall use this buffer to assemble segmented SoAdPduHeaders.
        * SoAd shall use this buffer to assemble segmented IfPdus.
        * SoAd shall discard segmented IfPDUs that are larger than the buffer capacity.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.EB.Buffer.TcpSegmentation.Size</srcid><srcstatus/><internalId>576</internalId></linkedfrom><linkedfrom><srcid>SoAd.EB.Buffer.TcpSegmentation.PduHeader</srcid><srcstatus/><internalId>577</internalId></linkedfrom><linkedfrom><srcid>SoAd.EB.Buffer.TcpSegmentation.IfPdu</srcid><srcstatus/><internalId>578</internalId></linkedfrom><linkedfrom><srcid>SoAd.EB.Buffer.TcpSegmentation.OversizedIfPdu</srcid><srcstatus/><internalId>579</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>575</internalId></specobject>

    <specobject>
      <id>SoAd.EB.Buffer.TcpSegmentation.Size</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        TCP socket buffer:
        The buffer shall be able to store one SoAdPduHeader plus the largest If-PDU
        related to this socket connection.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_12_HeaderMode_OversizedIfPdu_Tcp_Segmented</srcid><srcstatus/><internalId>1764</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.Buffer.TcpSegmentation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>575</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>576</internalId></specobject>

    <specobject>
      <id>SoAd.EB.Buffer.TcpSegmentation.PduHeader</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        TCP socket buffer:
        SoAd shall use this buffer to assemble segmented SoAdPduHeaders.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_41_Tcp_RxInd_IfPdu_Seg_Over255Bytes</srcid><srcstatus/><internalId>1450</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_41_Tcp_RxInd_IfPdu_Seg_PduLengthInHeader_MaxOfPduLengthType</srcid><srcstatus/><internalId>1451</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_12_HeaderMode_MultiplePdus_IF_TP_Tcp_Buffered_Segmented</srcid><srcstatus/><internalId>1763</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.Buffer.TcpSegmentation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>575</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>577</internalId></specobject>

    <specobject>
      <id>SoAd.EB.Buffer.TcpSegmentation.IfPdu</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        TCP socket buffer:
        SoAd shall use this buffer to assemble segmented IfPdus.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_41_Tcp_RxInd_IfPdu_Seg_Over255Bytes</srcid><srcstatus/><internalId>1450</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_41_Tcp_RxInd_IfPdu_Seg_PduLengthInHeader_MaxOfPduLengthType</srcid><srcstatus/><internalId>1451</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_12_HeaderMode_MultiplePdus_IF_TP_Tcp_Buffered_Segmented</srcid><srcstatus/><internalId>1763</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.Buffer.TcpSegmentation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>575</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>578</internalId></specobject>

    <specobject>
      <id>SoAd.EB.Buffer.TcpSegmentation.OversizedIfPdu</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        TCP socket buffer:
        SoAd shall discard segmented IfPDUs that are larger than the buffer capacity.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_12_HeaderMode_OversizedIfPdu_Tcp_Segmented</srcid><srcstatus/><internalId>1764</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.Buffer.TcpSegmentation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>575</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>579</internalId></specobject>

    <specobject>
      <id>SoAd.EB.ListenSocket</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAdSocketConnectionGroup has only one configured SoAdSocketConnection
        and SoAdSocketTcpInitiate is false:
        - if a socket belonging to a SocketConnection is closed by the remote
        node and reopened, SoAd will not allocate a new listen socket.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_ListenSocket</srcid><srcstatus/><internalId>1642</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>580</internalId></specobject>

    <specobject>
      <id>SoAd.EB.ChangeParameter</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Service name: SoAd_ChangeParameter
        Syntax: Std_ReturnType SoAd_ChangeParameter(
        SoAd_SoConIdType SoConId,
        uint8 ParameterId,
        uint8* ParameterValuePtr
        )
        Service ID[hex]: 0xF1
        Sync/Async: Synchronous
        Reentrancy: Reentrant for different SoConIds. Non reentrant for the same SoConId.
        Parameters (in):
        SoConId
        Socket connection index specifying the socket connection for which
        the parameter shall be changed.
        ParameterId
        Identifier of the parameter to be changed
        ParameterValuePtr
        Pointer to memory containing the new parameter value.
        Parameters (inout): None
        Parameters (out): None
        Return value:
        Std_ReturnType
        E_OK: The request has been accepted
        E_NOT_OK: The request has not been accepted
        Description:
        By this API service the SoAd or TCP/IP stack is requested to change a connection
        parameter. E.g. the Nagle algorithm may be controlled by this API.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.EB.ChangeParameter.ServiceId</srcid><srcstatus/><internalId>582</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>581</internalId></specobject>

    <specobject>
      <id>SoAd.EB.ChangeParameter.ServiceId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The macro SOAD_CHANGEPARAMETER_SVCID shall have the value: Service ID[hex]: 0xF1.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.ChangeParameter</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>581</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>582</internalId></specobject>

    <specobject>
      <id>SoAd.EB.GetSoConMode.ServiceId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The macro SOAD_GETSOCONMODE_SVCID shall have the value: Service ID[hex]: 0xF0.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_91001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>372</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>583</internalId></specobject>

    <specobject>
      <id>SoAd.EB.GetSoConMode.Uninit</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_GetSoConMode() shall check that
        the service SoAd_Init() was previously called. If the check fails,
        SoAd_GetSoConMode() shall raise the development error SOAD_E_NOTINIT and return E_NOT_OK.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_GetSoConMode_NoInit</srcid><srcstatus/><internalId>1278</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_91001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>372</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>584</internalId></specobject>

    <specobject>
      <id>SoAd.EB.GetSoConMode.InvalidSoConId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_GetSoConMode() shall check that
        the SoConId used is valid. If the check fails,
        SoAd_GetSoConMode() shall raise the development error SOAD_E_INV_ARG and return E_NOT_OK.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_GetSoConMode_InvalidSoConId</srcid><srcstatus/><internalId>1342</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_91001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>372</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>585</internalId></specobject>

    <specobject>
      <id>SoAd.EB.SetRemoteAddr.ImmediateOnline</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        A UDP socket connection in the socket connection state CONNECTING (reported state
        SOAD_SOCON_RECONNECT) shall immediately change its state to SOAD_SOCON_ONLINE
        if SoAd_SetRemoteAddr() is called with a valid (non wildcard) remote address.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_01_Con03_Udp_SoCon7_SetRemoteAddr_ImmediateOnline</srcid><srcstatus/><internalId>1398</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_01_Con03_Udp_SoCon7_ReleaseRemoteAddress_No_RemoteAdress</srcid><srcstatus/><internalId>1402</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_01_Con03_Udp_SoCon7_ReleaseRemoteAddress_RemoteAdress_And_Port_Set</srcid><srcstatus/><internalId>1403</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_01_Con03_Tcp_SoCon14_Release_SetRemoteAddr_Used_NOK</srcid><srcstatus/><internalId>1406</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>586</internalId></specobject>

    <!-- Global/Specific PDU routes requirements =================================================== -->

    <specobject>
      <id>SoAd.EB.SpecificEnable_GlobalRoutingGroup</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error detection is enabled: if SoAd_EnableSpecificRouting() is called for a
        global SoAdRoutingGroup, SOAD_E_INV_ARG shall be reported to DET and E_NOT_OK returned.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_13_00_SpecificEnable_GlobalRoutingGroup</srcid><srcstatus/><internalId>1825</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>587</internalId></specobject>

    <specobject>
      <id>SoAd.EB.SpecificRoutingGroup_Enable_Tx_If</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The API SoAd_EnableSpecificRouting() shall enable a specific socket connection of the
        specific routing group defined by the API parameters.
        A call of SoAd_IfTransmit() for the enabled socket connection shall send a frame and return
        E_OK.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_13_00_SpecificRoutingGroup_Enabled_If_Tx</srcid><srcstatus/><internalId>1826</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>588</internalId></specobject>

    <specobject>
      <id>SoAd.EB.SpecificRoutingGroup_Disable_Tx_If</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The API SoAd_DisableSpecificRouting() shall disable a specific socket connection of the
        specific routing group defined by the API parameters.
        A call of SoAd_IfTransmit() for the disabled socket connection discard the frame and return
        E_NOT_OK.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_13_00_SpecificRoutingGroup_Disabled_If_Tx</srcid><srcstatus/><internalId>1828</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>589</internalId></specobject>

    <specobject>
      <id>SoAd.EB.SpecificRoutingGroup_InitDisable_Tx_If</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAdRoutingGroupIsEnabledAtInit is set to false, the related socket connections of the
        specific routing group are disabled after SoAd_Init().
        A call of SoAd_IfTransmit() for the disabled socket connection discard the frame and return
        E_NOT_OK.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_13_00_SpecificRoutingGroup_InitDisabled_If_Tx</srcid><srcstatus/><internalId>1827</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>590</internalId></specobject>

    <specobject>
      <id>SoAd.EB.SpecificRoutingGroup_Enable_Rx_If</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The API SoAd_EnableSpecificRouting() shall enable a specific socket connection and its
        socket route destinations of the specific routing group defined by the API parameters.
        Frames received via SoAd_RxIndication() for the enabled socket connection shall be passed
        to the suitable enabled socket route destination.
      </description>
      <comment>
      </comment>
      <verifycrit>
        This requirement shall be tested for:
        * SoAdSocketRoute with a single destination referencing socket connection group.
          SoAd_ConTest_13_00_SpecificRoutingGroup_Enabled_If_Rx
        * The socket connection under test shall have the value 0 to enable algorithm with lower
          boarder of index values.
          SoAd_ConTest_13_00_SpecificRoutingGroup_Enabled_If_Rx_2
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_13_00_SpecificRoutingGroup_Enabled_If_Rx</srcid><srcstatus/><internalId>1834</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_13_00_SpecificRoutingGroup_Enabled_If_Rx_2</srcid><srcstatus/><internalId>1835</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_13_00_SpecificRoutingGroup_Enabled_If_Rx_No_SocketRoute</srcid><srcstatus/><internalId>1836</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_13_00_SpecificRoutingGroup_Single_SocketRouteDest_Multi_RoutingGroup</srcid><srcstatus/><internalId>1837</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_13_00_GlobalRoutingGroup_Single_SocketRouteDest_Multi_RoutingGroup</srcid><srcstatus/><internalId>1838</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>591</internalId></specobject>

    <specobject>
      <id>SoAd.EB.GlobalRoutingGroup</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        For RoutingGroups that are referenced by a SoAdPduRouteDest or SoAdSocketRoute which
        DO NOT refer to a single SocketConnectionGroup are global and shall have only a single
        state.
      </description>
      <comment>This requirement is the counter part of SWS_SoAd_00721.</comment>
      <verifycrit>
        This requirement shall be tested for:
        * SoAdPduRouteDest or SoAdSocketRoute referencing to single SocketConnection.
        * SoAdPduRouteDest or SoAdSocketRoute referencing to multiple SocketConnection.
        * SoAdPduRouteDest or SoAdSocketRoute referencing to SocketConnection and a single
        SocketConnectionGroup.
        * SoAdPduRouteDest or SoAdSocketRoute referencing to multiple SocketConnectionGroup.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_07_GeneratorCheck_ExtToIntMap_Global_SingleSoCon</srcid><srcstatus/><internalId>1223</internalId></linkedfrom><linkedfrom><srcid>SoAd_ComTest_07_GeneratorCheck_ExtToIntMap_Global_Mixed</srcid><srcstatus/><internalId>1224</internalId></linkedfrom><linkedfrom><srcid>SoAd_ComTest_07_GeneratorCheck_ExtToIntMap_Global_2SoConGroups</srcid><srcstatus/><internalId>1225</internalId></linkedfrom><linkedfrom><srcid>SoAd_ComTest_07_GeneratorCheck_ExtToIntMap_Global_MultiSoCon</srcid><srcstatus/><internalId>1226</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>592</internalId></specobject>

    <!-- MCG Output Requirements =================================================================== -->

    <specobject>
      <id>SoAd.EB.MCG.RoutingGroupExtToIntIdMap.ValidSoConGroupId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The generated map RoutingGroupExtToIntIdMap shall contain the SoConGroupId for specific
        routing groups.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_07_GeneratorCheck_ExtToIntMap_ValidSoConGroupId</srcid><srcstatus/><internalId>1227</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>593</internalId></specobject>

    <!-- Missing SWS requirements ================================================================== -->

    <specobject>
      <id>SoAd.EB.TcpIpEvent_ListenSocket</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The call of SoAd_TcpIpEvent() for a listen socket, with event parameter set to a value
        different that TCPIP_TCP_CLOSED, will not affect the listen socket.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_55_TcpIpEvent_ListenSocket_RESET</srcid><srcstatus/><internalId>1466</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>594</internalId></specobject>

    <specobject>
      <id>SoAd.EB.GetVersionInfo</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The call of SoAd_GetVersionInfo() shall return the module version independent if the
        module is initialized or not.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_ReturnVersionInformation</srcid><srcstatus/><internalId>1630</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>595</internalId></specobject>

    <specobject>
      <id>SoAd.EB.RequestIpAddrAssignment_ForwardCall</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        On invocation of SoAd_RequestIpAddrAssignment() the SoAd module shall forward the
        SoConId, Type and LocalIpAddrPtr to the TcpIp via TcpIp_RequestIpAddrAssignment().
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_RequestIpAddrAssignment</srcid><srcstatus/><internalId>1632</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>596</internalId></specobject>

    <specobject>
      <id>SoAd.EB.ReleaseIpAddrAssignment_ForwardCall</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        On invocation of SoAd_ReleaseIpAddrAssignment() the SoAd module shall forward the
        SoConId to the TcpIp via TcpIp_ReleaseIpAddrAssignment().
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_ReleaseIpAddrAssignment</srcid><srcstatus/><internalId>1633</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>597</internalId></specobject>

    <specobject>
      <id>SoAd.EB.GetLocalAddr_ForwardCall</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        On invocation of SoAd_GetLocalAddr() the SoAd module shall
        call TcpIp_GetIpAddr() with correct LocalAddrId and shall
        return local address, domain, netmask and default router address as
        configured in TcpIp as well as local port as configured in SoAd.
      </description>
      <comment/>
      <verifycrit>
        This requirement shall be tested for:
        * IPv4
        * IPv6
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Con16003_GetLocalAddr_IPv4</srcid><srcstatus/><internalId>1234</internalId></linkedfrom><linkedfrom><srcid>SoAd_Con16004_GetLocalAddr_IPv6</srcid><srcstatus/><internalId>1235</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_03_GetLocalAddr</srcid><srcstatus/><internalId>1635</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>598</internalId></specobject>

    <specobject>
      <id>SoAd.EB.GetPhysAddr_ForwardCall</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        On invocation of SoAd_GetPhysAddr() the SoAd module shall forward the
        SoConId and PhysAddrPtr to the TcpIp via TcpIp_GetPhysAddr().
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_GetPhysAddr</srcid><srcstatus/><internalId>1639</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>599</internalId></specobject>

    <specobject>
      <id>SoAd.EB.ChangeParameter_ForwardCall</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        On invocation of SoAd_ChangeParameter() the SoAd module shall forward the
        SoConId, ParameterId and ParameterValuePtr to the TcpIp via TcpIp_ChangeParameter().
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_ChangeParameter</srcid><srcstatus/><internalId>1640</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>600</internalId></specobject>

    <specobject>
      <id>SoAd.EB.SoAdIfTriggerTransmit_NOT_OK</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If on invocation of SoAd_IfRoutingGroupTransmit(), PduR_SoAdIfTriggerTransmit() returns
        other value than E_OK, SoAd will discard the request and there will be no retry in the next
        SoAd_MainFunction().
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_13_01_IfRoutingGroupTransmit_TriggerTransmit_NOT_OK</srcid><srcstatus/><internalId>1841</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>601</internalId></specobject>

    <specobject>
      <id>SoAd.EB.SoAd_00541</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If TcpIp_UdpTransmit() returns with TCPIP_E_PHYS_ADDR_MISS and
        SoAdSocketUdpRetryEnabled is set to TRUE, SoAd shall copy the data
        provided by SoAd_IfTransmit() to a socket connection specific UdpTxBuffer
        and retry the transmission once per SoAd_MainFunction() call until
        TcpIp_UdpTransmit() for this socket connection returns with an value
        other than TCPIP_E_PHYS_ADDR_MISS.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_49_Tp_UdpRetry_UdpTxFails</srcid><srcstatus/><internalId>1459</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_09_Udp_NoRetry</srcid><srcstatus/><internalId>1741</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_09_Udp_Retry</srcid><srcstatus/><internalId>1742</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_09_Udp_NoRetryOnOtherErrors</srcid><srcstatus/><internalId>1743</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_09_Udp_RetryMultipleTx</srcid><srcstatus/><internalId>1744</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>602</internalId></specobject>

    <specobject>
      <id>SoAd.EB.SoAd_UdpRetry_MultipleTx_BufferOverflow</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If TcpIp_UdpTransmit() returns with TCPIP_E_PHYS_ADDR_MISS and a socket parameter
        SoAdSocketUdpRetryEnabled is set to TRUE, and a socket connection specific UdpTxBuffer
        already contains data from previous unsuccessful TcpIp_UdpTransmit() call, then old data
        in a buffer should be discarded and a new data should be stored in a buffer.
        Retransmission of that data should occur during subsequent call SoAd_MainFunction().
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_09_Udp_RetryMultipleTx_BufferOverflow</srcid><srcstatus/><internalId>1746</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>603</internalId></specobject>

    <specobject>
      <id>SoAd.EB.SoAd_UdpRetry_RefToSoConGroup_Buffering</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAdSocketUdpRetryEnabled is set to TRUE:
        If a SoAdPduRouteDest refers to a socket connection group, SoAd shall store
        the UDP frames for all TcpIp_UdpTransmit() returning TCPIP_E_PHYS_ADDR_MISS in a
        socket connection specific UdpTxBuffer and perform the retry in the next main function.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_09_UdpRetryForSoConGroup</srcid><srcstatus/><internalId>1747</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>604</internalId></specobject>

    <specobject>
      <id>SoAd.EB.ECUC_SoAd_00132</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Name SoAdSocketUdpRetryEnabled  {SOAD_SOCKET_UDP_RETRY_ENABLED} Description
        Specifies if an UdpTxBuffer shall be used (TRUE) to retry an UDP
        transmission in case of TCPIP_E_PHYS_ADDR_MISS or not (FALSE).
        Multiplicity 1 Type EcucBooleanParamDef Default value false
        ConfigurationClass Pre-compile time X VARIANT-PRE-COMPILE  Link time X
        VARIANT-LINK-TIME  Post-build time X VARIANT-POST-BUILD Scope /
        Dependency scope: local  dependency: SoAdSocketProtocol
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>605</internalId></specobject>

    <specobject>
      <id>SoAd.EB.UdpRetry_PayloadTooBig</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAdSocketUdpRetryEnabled is set to TRUE:
        If SoAd_IfTransmit() is called with PDU size bigger as the configured PduLength in EcuC for
        the PDU (bigger than the socket connection specific UdpTxBuffer) and
        TcpIp_UdpTransmit() returns with TCPIP_E_PHYS_ADDR_MISS, the module shall
        discard the PDU and return E_NOT_OK.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_09_Udp_Retry_PayloadTooBig</srcid><srcstatus/><internalId>1745</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>606</internalId></specobject>

    <specobject>
      <id>SoAd.EB.SoAd_UdpTransmitFailsWhenUdpRetryDisabled</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If TcpIp_UdpTransmit() fails (returns with TCPIP_E_PHYS_ADDR_MISS or TCPIP_E_NOT_OK) for a 
        socket connection with SoAdSocketUdpRetryEnabled set to FALSE, SoAd shall discard the data.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_50_Tp_NoUdpRetry_UdpTxFails</srcid><srcstatus/><internalId>1460</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_51_nPdu_UdpTxFails</srcid><srcstatus/><internalId>1461</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>607</internalId></specobject>

    <specobject>
      <id>SoAd.EB.SoAd_ChangeParameter_NOTINIT</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error detection is enabled
        SoAd_ChangeParameter() shall check that the service SoAd_Init() was
        previously called. If the check fails, SoAd_ChangeParameter() shall raise the
        development error SOAD_E_NOTINIT.
      </description>
      <comment>E_NOT_OK will be returned.</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_ChangeParameter_NoInit</srcid><srcstatus/><internalId>1258</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>608</internalId></specobject>

    <specobject>
      <id>SoAd.EB.TxTriggerable_RoutingGroups</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        All SoAdRoutingGroups that are triggerable (i.e. configured with
        SoAdRoutingGroupTxTriggerable = 'true') shall be listed before other SoAdRoutingGroups.
      </description>
      <comment>
        Requirement added for bug fixed with ticket ASCSOAD-335.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>609</internalId></specobject>

    <specobject>
      <id>SoAd.EB.LocalIpAddrAssignmentChg_InvalidState</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAd_LocalIpAddrAssignmentChg() is called with a State other than:
        ASSIGNED, ONHOLD or UNASSIGNED, SOAD_E_INV_ARG will be reported to DET.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_LocalIpAddrAssignmentChg_ParamInvalid</srcid><srcstatus/><internalId>1304</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>610</internalId></specobject>

    <specobject>
      <id>SoAd.EB.LocalIpAddrAssignmentChg</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAd_LocalIpAddrAssignmentChg() is called with valid state and local address, the
        LocalIpAddrState will be changed and, if upper layer notification is enabled,
        SoAdGenUL_LocalIpAddrAssignmentChg() will be called.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con9_AddrAssignmentChg</srcid><srcstatus/><internalId>1366</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con3_AddrAssignmentChg</srcid><srcstatus/><internalId>1374</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con7_AddrAssignmentChg</srcid><srcstatus/><internalId>1380</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con10_Open</srcid><srcstatus/><internalId>1388</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con2_AddrAssignmentChg</srcid><srcstatus/><internalId>1394</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>611</internalId></specobject>

    <specobject>
      <id>SoAd.EB.Bind_NOK</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If TcpIp_Bind() returns other value than E_OK during socket opening process,
        TcpIp_Close() will be called, the socket will enter RESTART state and try to
        be opened again in the next main function until the maximum numbers of state
        machine repetitions is reached.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_TCP_Bind_NotOK</srcid><srcstatus/><internalId>1662</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_Bind_NotOk</srcid><srcstatus/><internalId>1698</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>612</internalId></specobject>

    <specobject>
      <id>SoAd.EB.TcpListen_NOK</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If TcpIp_TcpListen() returns other value than E_OK during socket opening process,
        TcpIp_Close() will be called, the socket will enter RESTART state and try to
        be opened again in the next main function until the maximum numbers of state
        machine repetitions is reached.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_TCP_Listen_NotOK</srcid><srcstatus/><internalId>1663</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>613</internalId></specobject>

    <specobject>
      <id>SoAd.EB.TcpConnect_NOK</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If TcpIp_TcpConnect() returns other value than E_OK during socket opening process,
        TcpIp_Close() will be called, the socket will enter RESTART state and try to
        be opened again in the same main function until the maximum numbers of state
        machine repetitions is reached.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_TCP_Connect_NotOK</srcid><srcstatus/><internalId>1664</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>614</internalId></specobject>

    <specobject>
      <id>SoAd.EB.TcpTxQuota</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAd_IfTransmit() is called with a PDU length greater than the configured
        SoAdSocketTcpTxQuota, transmission will be denied(E_NOT_OK will be returned).
        Transmission is allowed only for PDU with length equal or smaller than
        SoAdSocketTcpTxQuota.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Ts_SoAd_IfTransmit_PduR_Tcp_Client_TxQuota</srcid><srcstatus/><internalId>1241</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>615</internalId></specobject>

    <specobject>
      <id>SoAd.EB.IfTransmit_TcpTransmit_NOT_OK</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If TcpIp_TcpTransmit() returns E_NOT_OK then SoAd_IfTransmit() will return E_NOT_OK.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_24_IfTransmit_TcpTransmit_NOT_OK</srcid><srcstatus/><internalId>1431</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_85_IfTransmit_SetBusyCnt</srcid><srcstatus/><internalId>1494</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>616</internalId></specobject>

    <specobject>
      <id>SoAd.EB.IfTransmit_UdpTransmit_NOT_OK</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SoAd_IfTransmit() will return E_NOT_OK in case it is called for a UDP socket, 
        and TcpIp_UdpTransmit() returns E_NOT_OK.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_87_IfTransmit_UdpTransmit_NOT_OK</srcid><srcstatus/><internalId>1496</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>617</internalId></specobject>

    <!-- Xdm checks ============================================================================ -->

    <specobject>
      <id>SoAd.EB.XdmCheck.RefToRam</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAdDataMemSize is greater than 65536, SoAdDataMemSizeExtension shall be set to
        true.
      </description>
      <comment>
        If SoAdDataMemSizeExtension isn't set to true and SoAdDataMemSize is greater than 65536
        the generator shall report an error message.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01012_RefToRam</srcid><srcstatus/><internalId>1891</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>618</internalId></specobject>

    <specobject>
      <id>SoAd.EB.XdmCheck.NoEcuCpdu</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If Upper layer contains a reference to an inexistent EcuC pdu , SoAd generator will
        ignore it.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>619</internalId></specobject>

    <specobject>
      <id>SoAd.EB.XdmCheck.LastIsBest</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Socket connection has only PduRoutes of either SOAD_COLLECT_QUEUED or SOAD_COLLECT_LAST_IS_BEST
        and shall raise an error if a socket connection have mixed PduRoutes. 
      </description>
      <comment>
        SoAd shall reject configurations in which the transmit properties of the PDUs which are assigned 
        to a socket connection are mixed.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01013_LastIsBest</srcid><srcstatus/><internalId>1892</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>620</internalId></specobject>

    <specobject>
      <id>SoAd.EB.XdmCheck.LastIsBestULTriggerTransmitEnabled</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If exist at least one PduRoute with SoAdTxPduCollectionSemantics set to
        SOAD_COLLECT_LAST_IS_BEST, the generator shall check that the PduRoute belongs
        to an upper layer with TriggerTransmit enabled, if not, 
        the generator shall raise an error message.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01014_LastIsBest</srcid><srcstatus/><internalId>1893</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>621</internalId></specobject>

    <specobject>
      <id>SoAd.EB.XdmCheck.IPv6</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If configuration parameter SoAdIPv6AddressEnabled is set to false and there is at least
        one referenced local IP address of type IPv6, the generator shall raise an error message.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01011_Ipv6</srcid><srcstatus/><internalId>1890</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>622</internalId></specobject>

    <specobject>
      <id>SoAd.EB.XdmCheck.MaxUdpIPv6</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the number of SoAd UDP Ipv6 Socket Connection exceeds the number of TcpIp UDP Ipv6
        Sockets(TcpIpUdpV6SocketMax), the generator shall raise an error message.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01017_MaxUdpIpv6</srcid><srcstatus/><internalId>1896</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>623</internalId></specobject>

    <specobject>
      <id>SoAd.EB.XdmCheck.MaxTcpIPv6</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the number of SoAd TCP Ipv6 Socket Connection exceeds the number of TcpIp TCP Ipv6
        Sockets(TcpIpTcpV6SocketMax), the generator shall raise an error message.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01018_MaxTcpIpv6</srcid><srcstatus/><internalId>1897</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>624</internalId></specobject>

    <specobject>
      <id>SoAd.EB.XdmCheck.SoAdBswModules.Name</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If configuration parameter SoAdBswModules doesn't have the same name as the upper layer
        module they represent (e.g. PduR or Sd) the generator shall raise an error message.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01003_BswModules_InvalidName</srcid><srcstatus/><internalId>1882</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>625</internalId></specobject>

    <specobject>
      <id>SoAd.EB.XdmCheck.SocketConnection.Tcp.Ip_Port</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If configuration parameters SoAdSocketTcpInitiate and SoAdSocketAutomaticSoConSetup are
        set to true and the SocketConnection has the SoAdSocketRemoteIpAddress configured to "ANY"
        or "0.0.0.0" or has the SoAdSocketRemotePort configured to "0" the generator shall raise
        an error message.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01004_Tcp_1</srcid><srcstatus/><internalId>1883</internalId></linkedfrom><linkedfrom><srcid>SoAd_GenTest01005_Tcp_2</srcid><srcstatus/><internalId>1884</internalId></linkedfrom><linkedfrom><srcid>SoAd_GenTest01006_Tcp_3</srcid><srcstatus/><internalId>1885</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>626</internalId></specobject>

    <specobject>
      <id>SoAd.EB.XdmCheck.SocketConnection.Udp.Ip_Port</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If configuration parameters SoAdSocketMsgAcceptanceFilterEnabled and
        SoAdSocketUdpListenOnly are set to false and the SocketConnection has the
        SoAdSocketRemoteIpAddress configured to "ANY" or "0.0.0.0" or has the SoAdSocketRemotePort
        configured to "0" the generator shall raise an error message.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01007_Udp_1</srcid><srcstatus/><internalId>1886</internalId></linkedfrom><linkedfrom><srcid>SoAd_GenTest01008_Udp_2</srcid><srcstatus/><internalId>1887</internalId></linkedfrom><linkedfrom><srcid>SoAd_GenTest01009_Udp_3</srcid><srcstatus/><internalId>1888</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>627</internalId></specobject>

    <specobject>
      <id>SoAd.EB.XdmCheck.UnreferencedRoutingGroup</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If a configured routing group is not referenced by any SoAdSocketRoute or SoAdPduRoute,
        the generator shall raise an error message stating its ID.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01010_UnreferencedRoutingGroup</srcid><srcstatus/><internalId>1889</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>628</internalId></specobject>

    <specobject>
      <id>SoAd.EB.XdmCheck.NoTpFanOut</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If a configured PduRoute is using Tp API and has multiple destinations,
        the generator shall raise an error message.
      </description>
      <comment>See chapter 7.10 of AUTOSAR SWS 4.3.0</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01015_NoTpFanOut</srcid><srcstatus/><internalId>1894</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>629</internalId></specobject>

    <specobject>
      <id>SoAd.EB.XdmCheck.N2MConfigNotAllowed</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If a global ECUC PDU reference more than one SoAdPduRoute
        generator shall raise an error message.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01016_N2MConfigNotAllowed</srcid><srcstatus/><internalId>1895</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>630</internalId></specobject>

    <specobject>
      <id>SoAd.EB.XdmCheck.ECUC_SoAd_00034</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SoAdTxSocketConnOrSocketConnBundleRef:
        The reference to a SocketConnectionGroup shall only be used for
        upper layers with IF API.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01019_SoAdTxSocketConnOrSocketConnBundleRef</srcid><srcstatus/><internalId>1898</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>631</internalId></specobject>

    <specobject>
      <id>SoAd.EB.XdmCheck.ECUC_SoAd_00035</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SoAdRxSocketConnOrSocketConnBundleRef:
        The reference to a SocketConnectionGroup shall only be used for
        upper layers with IF API.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01020_SoAdRxSocketConnOrSocketConnBundleRef</srcid><srcstatus/><internalId>1899</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>632</internalId></specobject>

      <specobject>
        <id>SoAd.EB.XdmCheck.ECUC_SoAd_00150</id>
        <status>approved</status>
        <source>EB</source>
        <version>1</version>
        <description>
        SoAdTxUdpTriggerTimeout:
        SoAdSocketUdpTriggerTimeout shall not be smaller than SoAdMainFunctionPeriod.
      </description>
         <comment/>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01021_SoAdSocketUdpTriggerTimeoutLtSoAdMainFunctionPeriod</srcid><srcstatus/><internalId>1900</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>633</internalId></specobject>
    <!-- === === Missing SWS requirements === === -->
    <specobject>
      <id>SoAd.EB.GetSoConId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The call of SoAd_GetSoConId() with valid TxPduId shall return the corresponding configured
        SoConId and E_OK.
      </description>
      <comment>
        Note: If a socket connection group is configured, the SoConId of the first socket connection
        is returned.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con9_GetSoConId</srcid><srcstatus/><internalId>1365</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con7_GetSoConId</srcid><srcstatus/><internalId>1379</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con10_GetSoConId</srcid><srcstatus/><internalId>1387</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>634</internalId></specobject>

    <specobject>
      <id>SoAd.EB.GetSoConId.Fan</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The call of SoAd_GetSoConId() with valid TxPduId of a socket connection that is fan-out,
        shall return E_NOT_OK.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con3_GetSoConId</srcid><srcstatus/><internalId>1373</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>635</internalId></specobject>

    <specobject>
      <id>SoAd.EB.TpTransmit_UL_IF</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error detection is enabled: If SoAd_TpTransmit() is called with a
        SoAdSrcPduId which is configured to have the upper layer as IF, SOAD_E_INV_PDUID will
        be reported to DET and E_NOT_OK will be returned.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_TpTransmit_UL_IF</srcid><srcstatus/><internalId>1346</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>636</internalId></specobject>

    <specobject>
      <id>SoAd.EB.SetUniqueRemoteAddr_Auto</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error detection is enabled and SoAd_SetUniqueRemoteAddr() is called
        with a socket connection configured with SoAdSocketAutomaticSoConSetup set to TRUE
        E_NOT_OK will be returned and SOAD_E_INV_ARG reported to Det.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_SetUniqueRemoteAddr_AutoSetup</srcid><srcstatus/><internalId>1348</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>637</internalId></specobject>

    <specobject>
      <id>SoAd.EB.CloseSoCon_OfflineState</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If socket connection is in SOAD_SOCON_OFFLINE state and SoAd_CloseSoCon() is called,
        E_OK will be returned and no action shall be performed.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_01_CloseSoCon_OFFLINE</srcid><srcstatus/><internalId>1399</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>638</internalId></specobject>

    <specobject>
      <id>SoAd.EB.CloseSoCon</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If socket connection is in SOAD_SOCON_ONLINE state and SoAd_CloseSoCon() is called, E_OK
        will be returned and the state will not be changed until SoAd_MainFunction() is called.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con9_CloseSoCon</srcid><srcstatus/><internalId>1371</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con3_CloseSoCon</srcid><srcstatus/><internalId>1378</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con7_CloseSoCon</srcid><srcstatus/><internalId>1385</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con2_CloseSoCon</srcid><srcstatus/><internalId>1396</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>639</internalId></specobject>

    <specobject>
      <id>SoAd.EB.TpTransmit_Offline</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SoAd_TpTransmit shall skip the transmit request and return E_NOT_OK if the
        socket connection is in state OFFLINE.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_05_TpTransmit_Offline</srcid><srcstatus/><internalId>1714</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>640</internalId></specobject>

    <specobject>
      <id>SoAd.EB.TpTransmit_Disabled</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SoAd_TpTransmit() shall skip the transmit request and return E_NOT_OK if the
        routing is disabled.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_05_TpTransmit_RouteDisabled</srcid><srcstatus/><internalId>1715</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>641</internalId></specobject>

    <specobject>
      <id>SoAd.EB.TpTransmit.Udp.SduLengthTooBig</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SoAd_TpTransmit() shall skip the transmit request and return E_NOT_OK for a UDP socket
        connection if SduLength is greater as available Tx buffer.
      </description>
      <comment>
        For UDP and TP API, SoAd needs to retrieve all data from UL and store it in a buffer before
        transmission can be performed.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_18_TpTransmit_SmallerBuff</srcid><srcstatus/><internalId>1427</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>642</internalId></specobject>

    <specobject>
      <id>SoAd.EB.TpTransmit.Tcp.CancelTx_InvalidPdu</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SoAd_TpCancelTransmit() shall return E_NOT_OK and reject closing socket connection in the 
        case that two PduRouts (TP interface) reference the same socket connection (TCP),
        and there is an ongoing transmission on one of them, and SoAd_TpCancelTransmit() is called
        for the other PDU (with no ongoing transmission).
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_27_CancelTx_Tcp_InvalidPdu</srcid><srcstatus/><internalId>1434</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>643</internalId></specobject>

    <specobject>
      <id>SoAd.EB.TransmitPduSize256</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAd_TpTransmit() is called to transmit PDU of a size 256 bytes, on a socket connection
        that has SoAdPduHeaderEnable enabled, it shall call TcpIp_TcpTransmit() with the correct 
        header and a payload. 
      </description>
      <comment>
        Requirement added for bug fixed with ticket ASCSOAD-502.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_36_TransmitPduSize256</srcid><srcstatus/><internalId>1444</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>644</internalId></specobject>

    <specobject>
      <id>SoAd.EB.GetIpAddr_NOTOK</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If on SoAd_GetLocalAddr() invocation, TcpIp_GetIpAddr() returns E_NOT_OK, the same
        shall be returned for SoAd_GetLocalAddr().
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_GetLocalAddr_NOK</srcid><srcstatus/><internalId>1638</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>645</internalId></specobject>

    <specobject>
      <id>SoAd.EB.ChangeParameter_InvalidSocketId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAd_ChangeParameter() is called with an invalid socket id, the call will not
        be forwarded to TcpIp_ChangeParameter().
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_ChangeParameter_Invalid_SocketId</srcid><srcstatus/><internalId>1641</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>646</internalId></specobject>

    <specobject>
      <id>SoAd.EB.ChangeParameter_InvalidSoConId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error detection is enabled
        SoAd_ChangeParameter() shall check parameter id for being valid. If the
        check fails, SoAd_ChangeParameter() shall raise the development error
        SOAD_E_INV_ARG.
      </description>
      <comment>E_NOT_OK will be returned.</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_ChangeParameter_ParamInvalid</srcid><srcstatus/><internalId>1307</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>647</internalId></specobject>

    <specobject>
      <id>SoAd.EB.SetUniqueRemoteAddr_ClosedSockets</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAd_SetUniqueRemoteAddr() is called, it shall consider closed, as well as open socket
        connections when selecting the best match, with no preference for one over the other.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_SetUniqueRemoteAddr_ClosedSocket</srcid><srcstatus/><internalId>1648</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>648</internalId></specobject>

    <specobject>
      <id>SoAd.EB.SetUniqueRemoteAddr_NoMatch</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAd_SetUniqueRemoteAddr() is called and the remote address was no match,
        E_NOT_OK will be returned.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_SetUniqueRemoteAddr_NoMatch</srcid><srcstatus/><internalId>1649</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>649</internalId></specobject>

    <specobject>
      <id>SoAd.EB.SetUniqueRemoteAddr_ExactMatch</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAd_SetUniqueRemoteAddr() is called and the remote address and port were an exact
        match, E_OK will be returned and the SoConId where the match was found.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_SetUniqueRemoteAddr_ExactMatch</srcid><srcstatus/><internalId>1650</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>650</internalId></specobject>

    <specobject>
      <id>SoAd.EB.SetRemoteAddr_InactiveTP</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAd_SetRemoteAddr() is called for a UDP socket connection which does
        not have an active TP session, the remote address will be set.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_11_SetRemoteAddr_Tcp_Offline</srcid><srcstatus/><internalId>1760</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_07_SetRemoteAddr_Udp_Offline</srcid><srcstatus/><internalId>1811</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>651</internalId></specobject>

    <specobject>
      <id>SoAd.EB.CloseSoCon_ServerWaitingClient</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAd_CloseSoCon() is called for a server socket connection while waiting
        for a client to connect, TcpIp_Close() will be called once, to close the opened
        listen socket.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_CloseSoCon_Waiting_Client</srcid><srcstatus/><internalId>1666</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>652</internalId></specobject>

    <specobject>
      <id>SoAd.EB.CloseSoCon_TcpIpEvent</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the call of SoAd_CloseSoCon() and SoAd_TcpIpEvent(TCPIP_TCP_CLOSED/TCPIP_UDP_CLOSED),
        for the same socket connection, are performed in the same main function period,
        TcpIp_Close() will not be called and the socket will be in OFFLINE mode.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_01_CloseSoCon_TcpIpEvent_UDP</srcid><srcstatus/><internalId>1393</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_03_CloseSoCon_TcpIpEvent_TCP</srcid><srcstatus/><internalId>1665</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>653</internalId></specobject>

    <specobject>
      <id>SoAd.EB.TcpIpClose_Fail</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the call of TcpIp_Close() fails(E_NOT_OK is returned) while trying to close a socket
        connection, the respective connection shall be considered closed.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_73_TcpIpClose_E_NOT_OK</srcid><srcstatus/><internalId>1483</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>654</internalId></specobject>

    <specobject>
      <id>SoAd.EB.Init_ValidConfig</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAd is initialized with valid SoAdConfigPtr, and DET error is enabled, the module will
        be initialized and no DET will be reported to DET.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_Init_ValidConfig</srcid><srcstatus/><internalId>1287</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>655</internalId></specobject>

    <specobject>
      <id>SoAd.EB.NewListenSocket</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If there is an opened socket and the assigned listen socket is closed, 
        during the process of opening a new socket, TcpIp_GetSocket(), TcpIp_Bind() and
        TcpIp_TcpListen() will be called to open a new listen socket.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_12_Tcp_OpenedListenSocket</srcid><srcstatus/><internalId>1421</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>656</internalId></specobject>

    <!-- === === TxConfirmation Requirements === === -->

    <specobject>
      <id>SoAd.EB.TxConfirmation_TX_TP_CANCELED</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAd_TpCancelTransmit() is called for an ongoing TP transmission,
        call to SoAd_TxConfirmation() will not generate call to upper layer 
        Up_[SoAd][Tp]TxConfirmation() callback function.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_19_TxConfirmation_TX_TP_CANCELED</srcid><srcstatus/><internalId>1428</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>657</internalId></specobject>

    <specobject>
      <id>SoAd.EB.TpCancelTransmit_UpTxConfirmation_NotOk</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAd_TpCancelTransmit() is called for an ongoing TP transmission,
        the next call to SoAd_MainFunction() shall generate the call to Up_[SoAd][Tp]TxConfirmation()
        with the parameter Result E_NOT_OK.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_19_TxConfirmation_TX_TP_CANCELED</srcid><srcstatus/><internalId>1428</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>658</internalId></specobject>

    <specobject>
      <id>SoAd.EB.TxConfirmation_CLOSE_SOCON</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAd_CloseSoCon() is called for an ongoing TP transmission, call to
        SoAd_TxConfirmation() will not generate call to upper layer
        Up_[SoAd][Tp]TxConfirmation() callback function.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_20_TxConfirmation_CLOSE_SOCON</srcid><srcstatus/><internalId>1429</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>659</internalId></specobject>

    <specobject>
      <id>SoAd.EB.CloseSoCon_UpTxConfirmation_NotOk</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAd_CloseSoCon() is called for an ongoing TP transmission, the next call to
        SoAd_MainFunction() shall generate the call to Up_[SoAd][Tp]TxConfirmation()
        with the parameter Result E_NOT_OK.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_20_TxConfirmation_CLOSE_SOCON</srcid><srcstatus/><internalId>1429</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>660</internalId></specobject>

    <specobject>
      <id>SoAd.EB.TxConfirmation_TCP_IP_SOCKET_CLOSED</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAd_TcpIpEvent() with an event TCPIP_TCP_CLOSED is called for an ongoing TP
        transmission, call to SoAd_TxConfirmation() will not generate call to upper layer
        Up_[SoAd][Tp]TxConfirmation() callback function.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_88_TcpIpEvent_While_Tx</srcid><srcstatus/><internalId>1497</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>661</internalId></specobject>

    <specobject>
      <id>SoAd.EB.SoAd_TcpIpEvent_TCPIP_TCP_CLOSED_UpTxConfirmation_NotOk</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAd_TcpIpEvent() is called with an event TCPIP_TCP_CLOSED for an ongoing TP 
        transmission, the next call to SoAd_MainFunction() shall generate the call to 
        Up_[SoAd][Tp]TxConfirmation() with the parameter Result E_NOT_OK.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_88_TcpIpEvent_While_Tx</srcid><srcstatus/><internalId>1497</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>662</internalId></specobject>

    <specobject>
      <id>SoAd.EB.TxConfirmation_ReadOnlySocket</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In case of a read-only socket call to SoAd_TxConfirmation() will not generate call to upper
        layer Up_[SoAd][Tp]TxConfirmation() callback function and SOAD_INVALID_SOCON_ID is 
        reported to DET.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_22_TxConfirmation_ReadOnlySocket</srcid><srcstatus/><internalId>1430</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>663</internalId></specobject>

    <specobject>
      <id>SoAd.EB.TxConfirmation_UdpTransmit_NotOk</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In case TcpIp_UdpTransmit() returns E_NOT_OK SoAd shall call the upper layer confirmation 
        function (Up_[SoAd][Tp]TxConfirmation()) with E_NOT_OK in case such notification is 
        configured.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_49_Tp_UdpRetry_UdpTxFails</srcid><srcstatus/><internalId>1459</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_50_Tp_NoUdpRetry_UdpTxFails</srcid><srcstatus/><internalId>1460</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>664</internalId></specobject>

    <specobject>
      <id>SoAd.EB.TxConfirmation_TxInProgress</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In case SoAd_TxConfirmation() is called for a socket where PDU transmission is in progress
        confirmation request shall be ignored, and Up_[SoAd][Tp]TxConfirmation() shall not be
        propagated to upper layer.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_69_TxConfirmation_TxInProgress</srcid><srcstatus/><internalId>1479</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>665</internalId></specobject>

    <!-- === === UDP Rx === === -->

    <specobject>
      <id>SoAd.EB.Udp.Rx.SocketRoute_for_SoConGroup</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        For UDP and SoAdRxSocketConnOrSocketConnBundleRef of a SoAdSocketRoute refer to a
        SoAdSocketConnectionGroup (and not to SoAdSocketConnection):
        Frames shall be received for this socket route on any socket connection of the socket
        connection group.
      </description>
      <comment>
        The socket connection is chosen based on the remote address using best match algorithm.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_07_Rx_SocketRoute_SoConGroup</srcid><srcstatus/><internalId>1810</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>666</internalId></specobject>

    <specobject>
      <id>SoAd.EB.Udp.RxIndication_NotOnlineOrConnecting</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In case that SoAd_RxIndication() is called for a valid socket connection that is not in
        the state ONLINE or CONNECTING, the incoming request will be ignored (no call to upper
        layer [Up]_SoAdIfRxIndication() callback function).
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_29_Udp_RxInd_NotOnlineOrConnecting</srcid><srcstatus/><internalId>1436</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>667</internalId></specobject>

    <specobject>
      <id>SoAd.EB.Udp.RxIndication_MixedIfTpPdus</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In case that SoAd_RxIndication() is called with a data frame consisting of a mixed TP and 
        IF PDUs, data should be correctly extracted and forwarded to the upper layer.
        Additionally for TCP socket connections PDUs can be segmented over subsequent data
        frames.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_40_Tcp_RxInd_MixIfTpPdu</srcid><srcstatus/><internalId>1448</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_41_Tcp_RxInd_MixIfTpPdu_SegTp</srcid><srcstatus/><internalId>1449</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_42_Tcp_RxInd_MixIfTpPdu_SegIf</srcid><srcstatus/><internalId>1452</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_43_Tcp_RxInd_MixIfTpPdu_SegIfTp</srcid><srcstatus/><internalId>1453</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_44_Udp_RxInd_MixIfTpPdu</srcid><srcstatus/><internalId>1454</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>668</internalId></specobject>

    <specobject>
      <id>SoAd.EB.RxIndication_WriteOnlySocket_NoHeader</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In case that SoAd_RxIndication() is called for a socket connection with PDU header disabled,
        and only TX side configured, received PDUs will be silently dropped. 
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_79_RxInd_WriteOnlyUdpSocket_NoHeader</srcid><srcstatus/><internalId>1489</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_84_RxInd_WriteOnlyTcpSocket_NoHeader</srcid><srcstatus/><internalId>1493</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>669</internalId></specobject>

    <specobject>
      <id>SoAd.EB.Up_TpCopyRxData_BUFREQ_E_BUSY_no_available_buffer</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If Up_[SoAd][Tp]CopyTxData() returns BUFREQ_E_BUSY and SoAd has no available buffer then
        BUFREQ_E_BUSY can be treated as BUFREQ_OK with no available buffer and SoAd shall discard 
        all data of the PDU in a subsequent SoAd_MainFunction() call. 
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_48_Tp_CopyRxData_SduLength0</srcid><srcstatus/><internalId>1458</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_109_RxInd_NoHeader_CopyRxDataBusy</srcid><srcstatus/><internalId>1523</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>670</internalId></specobject>

    <specobject>
      <id>SoAd.EB.SoAdIfTxConfirmation_flag_disabled</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAdIfTxConfirmation flag is not set for SoAd Upper layer module then TxConfirmation API
        is not supported. 
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_13_00_RoutingGroup_EnabledAtInit_Tx</srcid><srcstatus/><internalId>1820</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>671</internalId></specobject>

    <specobject>
      <id>SoAd.EB.SoAdLocalIpAddrAssigmentChg_flag_disabled</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAdLocalIpAddrAssigmentChg flag is not set for SoAd Upper layer module then 
        LocalIpAddrAssigmentChg API is not supported. 
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_17_LocalIpAddrAssigmentChg_flag_disabled</srcid><srcstatus/><internalId>1768</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>672</internalId></specobject>

    <specobject>
      <id>SoAd.EB.SoAd_TpTransmit_noData</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAd_TpTransmit() if called to transmit PDU with no data, the next
        SoAd_MainFunction() shall call Up_[SoAd][Tp]CopyTxData() function with no data transmitted.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_45_Tcp_Tx_NoData</srcid><srcstatus/><internalId>1455</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>673</internalId></specobject>

    <specobject>
      <id>SoAd.EB.SoAd_TriggeredRoutingGroups_SduLengthBigger</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the upper layer exceeds the configured max PDU size, i.e. the available buffer,
        a development error SOAD_E_TRIGGERTXBUF shall be reported.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_13_01_IfRoutingGroupTransmit_SduLength_Bigger</srcid><srcstatus/><internalId>1844</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>674</internalId></specobject>

    <specobject>
      <id>SoAd.EB.SoAd_CloseTcpSoConFromSoConGroup</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In case that SoAd_CloseSoCon() is called with Abort = FALSE for one TCP socket which is part
        of socket connection group, this socket will go to state SOAD_SOCON_OFFLINE, but 
        TcpIp_Close(FALSE) will not be called to close the listen or accepted sockets if they are
        still used by other sockets from this group.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_83_CloseTcpSoConFromSoConGroup</srcid><srcstatus/><internalId>1492</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>675</internalId></specobject>

    <specobject>
      <id>SoAd.EB.TpTransmit.OngoingTransmissionInGroup</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In case that SoAd_TpTransmit() is called while there is an ongoing transmission on any of
        the socket connections in a group where the specified socket connection belongs, E_NOT_OK
        will be returned and the transmission will be skipped.
      </description>
      <comment>
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_63_TpTransmit_OngoingTxInGroup</srcid><srcstatus/><internalId>1474</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>676</internalId></specobject>

    <specobject>
      <id>SoAd.EB.IfTransmit_UdpWildcardAddr</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In case of a UDP socket with automatic connection setup and remote address set to ANY (0),
        SoAd_IfTransmit() API, when called with valid data, shall return E_OK, pass the data to 
        TcpIp and send TxConfirmation to the UL. 
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_65_Udp_Transmit_Wildcard</srcid><srcstatus/><internalId>1475</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>677</internalId></specobject>

    <specobject>
      <id>SoAd.EB.IfTransmit_TcpWildcardAddr</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In case of a TCP socket with automatic connection setup and remote address set to ANY (0),
        SoAd_IfTransmit() API, when called with valid data, shall return E_OK and pass the data to 
        TcpIp.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_66_Tcp_Transmit_Wildcard</srcid><srcstatus/><internalId>1476</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>678</internalId></specobject>

    <specobject>
      <id>SoAd.EB.IfTransmit_noSoAdTxUdpTriggerTimeout</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If a PDU with TriggerMode set to TRIGGER_NEVER and without SoAdTxUdpTriggerTimeout
        configured is transmitted over the socket connection where SoAdSocketUdpTriggerTimeout is 
        also not configured, then SoAd shall leave specific nPduUdpTxBuffer unchanged.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_99_nPduTimeout_Inv</srcid><srcstatus/><internalId>1508</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>679</internalId></specobject>

      <specobject>
         <id>SoAd.EB.IfTransmit_TxUdpTrigTout_lt_MainFunctionPeriod</id>
         <status>approved</status>
         <source>EB</source>
         <version>1</version>
         <description>
          If a PduRouteDest with TriggerMode set to TRIGGER_NEVER and with SoAdTxUdpTriggerTimeout
          smaller than SoAdMainFunctionPeriod, the behaviour will change to TRIGGER_ALWAYS.
      </description>
         <comment/>
         <needscoverage>
            <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_108_TxUdpTrigToutLtMainFunctionPeriod</srcid><srcstatus/><internalId>1522</internalId></linkedfrom></coveredby></needscov>
         <containerCovstatus>covered</containerCovstatus></needscoverage>
      <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>680</internalId></specobject>

    <specobject>
      <id>SoAd.EB.GetLocalAddr_TCPIP_AF_UNSPEC_IPv4</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAd_GetLocalAddr() is called with LocalAddrPtr-&gt;domain set to TCPIP_AF_UNSPEC and the
        corresponding socket connection uses IPv4, the function shall return E_OK and set
        LocalAddrPtr-&gt;domain to TCPIP_AF_INET.
      </description>
      <comment>
        This feature allows the upper layer to retrieve the address family for a certain socket
        connection. No check to the other parameters shall be performed.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_GetLocalAddr_RetrieveIPv4</srcid><srcstatus/><internalId>1636</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>681</internalId></specobject>

    <specobject>
      <id>SoAd.EB.GetLocalAddr_TCPIP_AF_UNSPEC_IPv6</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAd_GetLocalAddr() is called with LocalAddrPtr-&gt;domain set to TCPIP_AF_UNSPEC and the
        corresponding socket connection uses IPv6, the function shall return E_OK and set
        LocalAddrPtr-&gt;domain to TCPIP_AF_INET6.
      </description>
      <comment>
        This feature allows the upper layer to retrieve the address family for a certain socket
        connection. No check to the other parameters shall be performed.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_GetLocalAddr_RetrieveIPv6</srcid><srcstatus/><internalId>1637</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>682</internalId></specobject>

    <specobject>
      <id>SoAd.EB.SoAd_TpTransmit_1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAd_TpTransmit() is called in the context of Up_[SoAd][Tp]TxConfirmation,
        a TCP socket connection is used and SoAdSocketTcpImmediateTpTxConfirmation set to FALSE,
        E_OK shall be returned and the transmission shall be processed in the next SoAd_MainFunction().
      </description>
      <comment>
        Note: A TP transmission is considered as ongoing until SoAd calls
        Up_[SoAd][Tp]TxConfirmation.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_05_Udp_Con10_TpConfirmation</srcid><srcstatus/><internalId>1709</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_05_PostBuild_Selectable_SoAdTxPduRef</srcid><srcstatus/><internalId>1719</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>683</internalId></specobject>

    <specobject>
      <id>SoAd.EB.SoAd_TpTransmit_2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAd_TpTransmit() is called in the context of Up_[SoAd][Tp]TxConfirmation,
        and a UDP socket connection is used, E_OK shall be returned and the transmission shall
        be processed in the next SoAd_MainFunction().
      </description>
      <comment>
        Note: A TP transmission is considered as ongoing until SoAd calls
        Up_[SoAd][Tp]TxConfirmation.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_05_Tcp_Con13_TpConfirmation</srcid><srcstatus/><internalId>1708</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>684</internalId></specobject>

    <specobject>
      <id>SoAd.EB.SoAd_TpTransmit_3</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAd_TpTransmit() is called in the context of Up_[SoAd][Tp]TxConfirmation,
        a TCP socket connection is used and SoAdSocketTcpImmediateTpTxConfirmation set to TRUE,
        E_OK shall be returned and the transmission shall be processed in the next SoAd_MainFunction().
      </description>
      <comment>
        Note: A TP transmission is considered as ongoing until SoAd calls
        Up_[SoAd][Tp]TxConfirmation.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_05_Tcp_Con12_TpConfirmation</srcid><srcstatus/><internalId>1707</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>685</internalId></specobject>
    <specobject>
      <id>SoAd.EB.AllowNtoOneRouting</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If multiple ECUC PDUs are referencing to the same PDURoute, SoAd shall treat it as reference
        to the first ECUC PDU.
      </description>
      <comment>
        This feature allows N:1 routing.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_05_Tcp_Con28_Transmit_AllowNtoOneRouting</srcid><srcstatus/><internalId>1717</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>686</internalId></specobject>

    <specobject>
      <id>SoAd.EB.TcpIpUdpTransmitDataPtr2NullPtr</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SoAdTxPduCollectionSemantics is set to SOAD_COLLECT_LAST_IS_BEST, SoAd shall use
        TcpIp_UdpTransmit() with DataPtr set to NULL_PTR to trigger the call of SoAd_CopyTxData().
      </description>
      <comment>
        Rationale:
        Last is best PDUs only store the transmit request in the buffer and SoAd retrieves the latest data
        in the context of SoAd_CopyTxData().
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_01_nPduUdpTx_Last_Is_Best</srcid><srcstatus/><internalId>1509</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>687</internalId></specobject>

    <specobject>
      <id>SoAd.EB.OngoingTx_TransitionRequested</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In case there is an ongoing transmission(no upper layer confirmation yet) and
        a transition is requested, SoAd_MainFunction() shall have no effect and the transition
        shall continue without interruption.
      </description>
      <comment/>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_10_Tcp_PduLen_0</srcid><srcstatus/><internalId>1419</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>688</internalId></specobject>

    <specobject>
      <id>SoAd.EB.SoAdEnableMainFunctionTx</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist a configuration parameter 'SoAdEnableMainFunctionTx' which enables or disables
        support for extern usage of SoAd_MainFunctionTx. This allows the upper layer to transmit data
        immediately without any mainfunction period delay.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_Tp_Transmit_MainfunctionTx_00_05_111</srcid><srcstatus/><internalId>1718</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>689</internalId></specobject>

    <specobject>
      <id>SoAd.EB.RelocatablePBCfg</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In order to support post-build-time configuration data handled by relative offsets to
        the configuration start address, the container SoAdPublicCfg must be extended by
        the configuration parameter SoAdRelocatableCfgEnable.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Test_PBcfgM_Off</srcid><srcstatus/><internalId>1209</internalId></linkedfrom><linkedfrom><srcid>SoAd_Test_PBcfgM_On</srcid><srcstatus/><internalId>1210</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>690</internalId></specobject>

    <specobject>
      <id>SoAd.EB.CompileConfigTime</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        An invalid xdm check shall only read the value of a config parameter with the same or
        a lower configuration class e.g. post-build -&gt; post-build (allowed),
        post-build -&gt; pre-compile (allowed), pre-compile -&gt; post-build (not allowed) .
      </description>
      <comment>
        This can be verified by enabling config Time check in the preference.xdm file
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_12_PB_ConfigTime</srcid><srcstatus/><internalId>1230</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>691</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdTxPduRef</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdTxPduRef' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_05_Udp_Con10_TpConfirmation</srcid><srcstatus/><internalId>1709</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_05_PostBuild_Selectable_SoAdTxPduRef</srcid><srcstatus/><internalId>1719</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>692</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdTxUpperLayerType</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdTxUpperLayerType' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_05_PostBuild_Selectable_SoAdTxUpperLayerType</srcid><srcstatus/><internalId>1720</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>693</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdTxPduCollectionSemantics</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdTxPduCollectionSemantics' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_01_nPduUdpTx_Last_Is_Best</srcid><srcstatus/><internalId>1509</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_123_PostBuild_Selectable_TxPduCollectionSemantics</srcid><srcstatus/><internalId>1541</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>694</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdTxPduHeaderId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdTxPduHeaderId' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_05_Tcp_Con13_Tp_Transmit_WithHeader</srcid><srcstatus/><internalId>1710</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_05_PostBuild_Selectable_SoAdSocketTcpTxQuota</srcid><srcstatus/><internalId>1722</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>695</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdTxSocketConnOrSocketConnBundleRef</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdTxSocketConnOrSocketConnBundleRef' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_20_TxConfirmation_CLOSE_SOCON</srcid><srcstatus/><internalId>1429</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>696</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdTxRoutingGroupRef</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdTxRoutingGroupRef' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_10_Tcp_PduLen_0</srcid><srcstatus/><internalId>1419</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>697</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdTxUdpTriggerMode</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdTxUdpTriggerMode' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_09_IfTransmit_NEVER_SoConGroup</srcid><srcstatus/><internalId>1750</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_09_PostBuild_Selectable_SoAdTxUdpTriggerMode</srcid><srcstatus/><internalId>1751</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>698</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdTxUdpTriggerTimeout</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdTxUdpTriggerTimeout' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_51_nPdu_UdpTxFails</srcid><srcstatus/><internalId>1461</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>699</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdPduHeaderEnable</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdPduHeaderEnable' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_36_TransmitPduSize256</srcid><srcstatus/><internalId>1444</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>700</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdSocketLocalAddressRef</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdSocketLocalAddressRef' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_GetPhysAddr</srcid><srcstatus/><internalId>1639</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>701</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdSocketLocalPort</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdSocketLocalPort' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_12_HeaderMode_MultiplePdus_Udp_Buffered</srcid><srcstatus/><internalId>1761</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>702</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdSocketAutomaticSoConSetup</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdSocketAutomaticSoConSetup' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_09_Tcp_MsgFilterOff_Accepted</srcid><srcstatus/><internalId>1418</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>703</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdSocketIpAddrAssignmentChgNotification</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdSocketIpAddrAssignmentChgNotification' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_04_Bind_NotOk</srcid><srcstatus/><internalId>1698</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>704</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdSocketTpRxBufferMin</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdSocketTpRxBufferMin' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_04_PostBuild_Selectable_SocketTpRxBufferMin</srcid><srcstatus/><internalId>1700</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>705</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdSocketMsgAcceptanceFilterEnabled</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdSocketMsgAcceptanceFilterEnabled' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_120_PostBuild_Selectable_SocketMsgAcceptanceFilter</srcid><srcstatus/><internalId>1538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>706</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdSocketFramePriority</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdSocketFramePriority' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Con9_OpenSoCon</srcid><srcstatus/><internalId>1369</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>707</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdSocketRemoteIpAddress</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdSocketRemoteIpAddress' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_04_Bind_NotOk</srcid><srcstatus/><internalId>1698</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>708</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdSocketRemotePort</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdSocketRemotePort' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_04_Bind_NotOk</srcid><srcstatus/><internalId>1698</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>709</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdSocketUdpAliveSupervisionTimeout</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdSocketUdpAliveSupervisionTimeout' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_33_UdpAlive_Supervision</srcid><srcstatus/><internalId>1441</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>710</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdSocketUdpListenOnly</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdSocketUdpListenOnly' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_127_PostBuild_Selectable_SoAdSocketUdpListenOnly</srcid><srcstatus/><internalId>1545</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>711</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdSocketUdpStrictHeaderLenCheckEnabled</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdSocketUdpStrictHeaderLenCheckEnabled' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_122_PostBuild_Selectable_UdpStrictHeaderLenCheck</srcid><srcstatus/><internalId>1540</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>712</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdSocketUdpTriggerTimeout</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdSocketUdpTriggerTimeout' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_28_nPduTimeouts</srcid><srcstatus/><internalId>1435</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>713</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdSocketnPduUdpTxBufferMin</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdSocketnPduUdpTxBufferMin' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_28_nPduTimeouts</srcid><srcstatus/><internalId>1435</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>714</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdSocketTcpImmediateTpTxConfirmation</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdSocketTcpImmediateTpTxConfirmation' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_05_Tcp_Con12_TpConfirmation</srcid><srcstatus/><internalId>1707</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>715</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdSocketTcpInitiate</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdSocketTcpInitiate' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_05_PostBuild_Selectable_SoAdSocketTcpInitiate</srcid><srcstatus/><internalId>1721</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>716</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdSocketTcpKeepAlive</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdSocketTcpKeepAlive' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_09_Tcp_MsgFilterOff_Accepted</srcid><srcstatus/><internalId>1418</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>717</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdSocketTcpKeepAliveInterval</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdSocketTcpKeepAliveInterval' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_KeepAliveEnabled</srcid><srcstatus/><internalId>1644</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>718</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdSocketTcpKeepAliveProbesMax</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdSocketTcpKeepAliveProbesMax' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_KeepAliveEnabled</srcid><srcstatus/><internalId>1644</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>719</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdSocketTcpKeepAliveTime</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdSocketTcpKeepAliveTime' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_KeepAliveEnabled</srcid><srcstatus/><internalId>1644</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>720</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdSocketTcpNoDelay</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdSocketTcpNoDelay' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SoAd.TcpIp_ChangeParameter</srcid><srcstatus/><internalId>757</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>721</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdSocketTcpTxQuota</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdSocketTcpTxQuota' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_05_Tcp_Con13_Tp_Transmit_WithHeader</srcid><srcstatus/><internalId>1710</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_05_PostBuild_Selectable_SoAdSocketTcpTxQuota</srcid><srcstatus/><internalId>1722</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>722</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdRxPduHeaderId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdRxPduHeaderId' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_76_UdpStrictHeaderLenCheck</srcid><srcstatus/><internalId>1486</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_122_PostBuild_Selectable_UdpStrictHeaderLenCheck</srcid><srcstatus/><internalId>1540</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>723</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdRxSocketConnOrSocketConnBundleRef</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdRxSocketConnOrSocketConnBundleRef' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_17_ReceiveOnSocketGroup</srcid><srcstatus/><internalId>1767</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>724</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdRxPduRef</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdRxPduRef' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_12_HeaderMode_OversizedIfPdu_Tcp_Segmented</srcid><srcstatus/><internalId>1764</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>725</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdRxPduId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdRxPduId' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_ListenSocket</srcid><srcstatus/><internalId>1642</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>726</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdRxUpperLayerType</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdRxUpperLayerType' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_119_PostBuild_Selectable_SoAdRxUpperLayerType</srcid><srcstatus/><internalId>1537</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>727</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdRxRoutingGroupRef</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdRxRoutingGroupRef' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_31_UdpTp_RxInd_DisblRoutGroup_Header</srcid><srcstatus/><internalId>1437</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>728</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbVariantSupport.SoAdRoutingGroupIsEnabledAtInit</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        'SoAdRoutingGroupIsEnabledAtInit' shall support multiple selectable variants
      </description>
      <tags>
        <tag>Unit:None</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_121_PostBuild_Selectable_RoutingGroupIsEnabledAtInit</srcid><srcstatus/><internalId>1539</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>729</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>SoAd.EB.DBGINST001</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Every public API of the module shall have debug instrumentation.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SoAd_DBGINST_001</srcid><srcstatus/><internalId>1206</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>730</internalId></specobject>

    <specobject>
      <id>SoAd.EB.DBGINST002</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The parameter of a API shall be available in the entry instrumentation.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SoAd_DBGINST_001</srcid><srcstatus/><internalId>1206</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>731</internalId></specobject>

    <specobject>
      <id>SoAd.EB.DBGINST003</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The parameter of a API shall be available in the exit instrumentation.
        If the API has a return value, the very first parameter of the macro shall contain the expected return value.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SoAd_DBGINST_001</srcid><srcstatus/><internalId>1206</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>732</internalId></specobject>

    <specobject>
      <id>SoAd.EB.DBGINST004</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The default implementation of the debug instrumentation shall be an empty macro.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SoAd_DBGINST_001</srcid><srcstatus/><internalId>1206</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>733</internalId></specobject>

    <specobject>
      <id>SoAd.EB.DBGINST005</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The module shall include the header files Base_Dbg.h in order to allow changing the default implementation of the debug instrumentation.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SoAd_DBGINST_001</srcid><srcstatus/><internalId>1206</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>734</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>SoAd.EB.PBCFGM101</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Service name: SoAd_IsValidConfig
        Syntax: Std_ReturnType SoAd_IsValidConfig( void* ConfigPtr )
        Sync/Async: Synchronous
        Reentrancy: Reentrant
        Parameters (in): ConfigPtr, post build configuration manager
        configuration.
        Parameters (inout): None
        Parameters (out): None
        Return value: Returns E_OK if the SoAd configuration is valid otherwise E_NOT_OK. A
        null pointer is interpreted as invalid configuration.
        Description: This function determines if the SoAd configuration is valid. This
        function can be called also before the SoAd is initialized. No error reporting
        is necessary within this function.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Test_IsValidConfig</srcid><srcstatus/><internalId>1207</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>735</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PBCFGM102</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        A configuration is valid
        - if the platform signature in the post build configuration equals the value
          determined by the macro TS_PlatformSigIsValid.
        - if the link time signature in the post build configuration equals the link time
          signature in the link time configuration file.
        - if the compile time signature in the post build configuration equals the value of
          the macro SOAD_CFG_SIGNATURE.
        - if the compile time signature of Published information in the post build configuration
          equals the value of the macro SOAD_PUBLIC_INFO_SIGNATURE.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Test_IsValidConfig</srcid><srcstatus/><internalId>1207</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>736</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PBCFGM104</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        For generalized consistency of the post build configuration versus the compile time
        configuration:
        - the post build configuration structure shall contain the uint32 value
          CfgSignature.
        - the SoAd_Cfg.h file shall contain the macro
          SOAD_CFG_SIGNATURE.
        - the MCG shall generate this signature value of compile time parameters. The x-path
          function asc:getConfigSignature(nodeset) shall be used to determine the signature out
          of a list of parameters. The list of compile time parameters shall determined with the
          function asc:getConfigClassNodeList(cassString).
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Test_IsValidConfig</srcid><srcstatus/><internalId>1207</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>737</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PBCFGM104_1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        For generalized consistency of the post build configuration versus the compile time
        configuration:
        - the post build configuration structure shall contain the uint32 value
          PublicInfoSignature.
        - the SoAd_Cfg.h file shall contain the macro
          SOAD_PUBLIC_INFO_SIGNATURE.
        - The MCG shall generate this signature value from the list of parameters of
          configuration class 'PublishedInformation' except 'Release'. The XPath function
          asc:getConfigSignature(nodeset) shall be used to determine the signature out of the
          list of parameters. The list of parameters shall be determined with the function
          asc:getConfigClassNodeList(cassString).
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Test_IsValidConfig</srcid><srcstatus/><internalId>1207</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>738</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PBCFGM105</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        For generalized consistency of the post build configuration versus the link time
        configuration:
        - the post build configuration structure shall contain the uint32 value
          LcfgSignature.
        - the link time configuration shall contain the uint32 value
          SoAd_LcfgSignature.
        - the MCG shall generate this signature value of link time parameters. The x-path
          function asc:getConfigSignature(nodeset) shall be used to determine the signature out
          of a list of parameters. The list of link time parameters shall determined with the
          function asc:getConfigClassNodeList(cassString).
      </description>
      <comment>
        See also:
        https://infohub.automotive.elektrobit.com/display/PRJEBTRESOS/PostBuild#PostBuild-Consistencypostbuildconfig
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Test_IsValidConfig</srcid><srcstatus/><internalId>1207</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>739</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PBCFGM106</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        For Platform verification:
        - the SoAd post build configuration structure shall contain the value
          uint32 PlatformSignature. This uint32 must be the first value of the post build
          configuration structure to guarantee the correct access not disturbed by any padding
          bytes.
        - the MCG shall generate this signature for the selected target. The generator shall
          use the x-path function asc:getPlatformSignature() to determine this value.
      </description>
      <comment>
        See also:
        https://infohub.automotive.elektrobit.com/display/PRJEBTRESOS/PostBuild#PostBuild-Consistencypostbuildconfig
        https://issue.ebgroup.elektrobit.com/browse/ASCBASE-1485
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Test_IsValidConfig</srcid><srcstatus/><internalId>1207</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>740</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PBCFGM107</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The PbcfgM support shall be enabled or disabled via the macro
        SOAD_PBCFGM_SUPPORT_ENABLED defined in the file
        SoAd_Cfg.h.
        If the PbcfgM configuration references the SoAd configuration
        the macro is set to STD_ON otherwise, or if no PbcfgM configuration is
        available it is set to STD_OFF.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Test_IsValidConfig</srcid><srcstatus/><internalId>1207</internalId></linkedfrom><linkedfrom><srcid>SoAd_Test_PBcfgM_Off</srcid><srcstatus/><internalId>1209</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>741</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PBCFGM108</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the SoAd is referenced by the PbcfgM, the parameter regarding the
        relocatable feature, shall not be editable and the MCG shall use the configuration of
        the PbcfgM.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Test_PBcfgM_Off</srcid><srcstatus/><internalId>1209</internalId></linkedfrom><linkedfrom><srcid>SoAd_Test_PBcfgM_On</srcid><srcstatus/><internalId>1210</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SoAd_EBParameters.xdm.m4_133</srcid><srcstatus/><internalId>920</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>742</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PBCFGM110</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The SoAd_Init() function must be extended to enable the PbcgfM
        features.
        The initialization function shall obtain the SoAd configuration
        from the PbcfgM if the PbcfgM support is enabled within this SoAd
        and the initialization function is called with a null pointer.
        The validity of the configuration shall be checked by the function
        SoAd_IsValidConfig(). The validity shall be check regardless the PbcfgM
        support is enabled or not.
        If no valid configuration can be obtained the initialization function shall
        return, leaving the SoAd uninitialized.
        In the case error reporting is enabled and no valid configuration can be obtained
        an erroneous parameter shall be indicated.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Test_VerifyInitWithPcfgM</srcid><srcstatus/><internalId>1208</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>743</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PostBuild_1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The SoAd module shall compile and build an executable even in the absence
        of a post build configuration, i.e. without any post build generated .c and .h files
        available.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_Gen_PBcfgM_00000_OnlyPbCfg</srcid><srcstatus/><internalId>1211</internalId></linkedfrom><linkedfrom><srcid>SoAd_ComTest_NoPBCfg</srcid><srcstatus/><internalId>1229</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>744</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbcfgM_General_3</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The SoAd shall provide the following macros in the header file
        SoAd_Cfg.h:
        - SOAD_RELOCATABLE_CFG_ENABLE which is set to STD_ON
          if relocatable config shall be enabled, otherwise it's set to STD_OFF.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Test_PBcfgM_On</srcid><srcstatus/><internalId>1210</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>745</internalId></specobject>

    <specobject>
      <id>SoAd.EB.PbcfgM_General_6</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If PbcfgM support is enabled SoAd shall define the following macros in
        SoAd_PBCfg.c:
        - TS_PB_CFG_LAYOUT_TYPE: Shall expand to the type definition of the Postbuild
          configuration layout type (e.g. SoAd_ConstConfigLayoutType)
        - TS_PB_CFG_NAME: Shall expand to the name of the structure defining the Postbuild
          configuration layout (e.g. SoAd_ConfigLayout)
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Test_PBcfgM_Off</srcid><srcstatus/><internalId>1209</internalId></linkedfrom><linkedfrom><srcid>SoAd_Test_PBcfgM_On</srcid><srcstatus/><internalId>1210</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>746</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>SoAd.EB.PDULENGTHTYPE001</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The SoAd module shall support the following values of PduLengthType:
        [UINT32, UINT16]
      </description>
      <verifycrit>
        Use case 1 - Modules not capable of handling more than 64 kbytes of data:
          - use PduLengthType value 'UINT32' with conformance test
          - verify successful test run, verify absence of metric violations
            (MISRA-C:2012, static code analysis, compiler warnings)
        Use case 2 - Modules capable of handling more than 64 kbytes of data:
          - use conformance test which handles more than 64 kbytes of data
          - apply "boundary" tests using data length of:
            [&lt;&lt;65535,65535, 65536, &gt;131072][bytes]
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_UdpIfTransmit_64kb</srcid><srcstatus/><internalId>1861</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_TcpTpTransmit_64kb</srcid><srcstatus/><internalId>1862</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_TcpIfTransmit_64kb</srcid><srcstatus/><internalId>1863</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_TcpIfReceive_64kb</srcid><srcstatus/><internalId>1864</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_UdpTpTransmit_64kb</srcid><srcstatus/><internalId>1865</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>747</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>SoAd.EB.PBSelectable.FileName</id>
       <status>approved</status>
       <source>EB</source>
       <version>1</version>
       <description>
        If postBuildVariant returns a non-empty string, the module's post-build-time
        configuration file names shall be changed in the following way:
        &lt;Mod&gt;[_*]_PBcfg.* to &lt;Mod&gt;_&lt;postBuildVariant&gt;[_*]_PBcfg.*
       </description>
       <needscoverage>
          <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_12_PB_MCG_filename_typename_master</srcid><srcstatus/><internalId>1766</internalId></linkedfrom></coveredby></needscov>
       <containerCovstatus>covered</containerCovstatus></needscoverage>
       
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>748</internalId></specobject>

    <specobject>
       <id>SoAd.EB.PBSelectable.TypeName</id>
       <status>approved</status>
       <source>EB</source>
       <version>1</version>
       <description>
        If postBuildVariant returns a non-empty string, the module's post-build-time
        configuration type/variable names shall be changed in the following way:
        - SoAd_[Const]ConfigLayoutType to SoAd_&lt;postBuildVariant&gt;_[Const]ConfigLayoutType
       </description>
       <needscoverage>
          <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_12_PB_MCG_filename_typename_master</srcid><srcstatus/><internalId>1766</internalId></linkedfrom></coveredby></needscov>
       <containerCovstatus>covered</containerCovstatus></needscoverage>
       
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>749</internalId></specobject>

    <specobject>
       <id>SoAd.EB.PBSelectable.Master</id>
       <status>approved</status>
       <source>EB</source>
       <version>1</version>
       <description>
        If postBuildVariant returns a non-empty string, the module shall generate a post-build-time
        configuration file SoAd_PBcfg.h/c which includes all the variants specific 
        post-build-time configurations (SoAd_&lt;postBuildVariant&gt;[_*]_PBcfg.h/c).
       </description>
       <needscoverage>
          <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_12_PB_MCG_filename_typename_master</srcid><srcstatus/><internalId>1766</internalId></linkedfrom></coveredby></needscov>
       <containerCovstatus>covered</containerCovstatus></needscoverage>
       
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>750</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>SoAd.EB.Interface.Consistency</id>
       <status>approved</status>
       <source>EB</source>
       <version>1</version>
       <description>
        The module shall provide a mechanism to guarantee consistency of interfaces and
        types between its implementation and its code stub.
       </description>
       <comment>
        The code stub of a module shall provide the same external view than the module itself.
        This is mandatory because unit test of modules test against the code stubs of
        adjacent modules. Inconsistent stubs may result in the situation that incompatible
        interfaces are not detected as unit test stage.
       </comment>
       <verifycrit>
        Create a compile test with two permutations that call all interfaces of a module
        (in both permutations).
        p0: Behave like a regular compile test; call the module generator and compile against
        the implementation of the module.
        p1: Do not generate module code and do not compile the implementation of the module.
        Instead the module shall be replaced with its own code stub.
       </verifycrit>
       <needscoverage>
          <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SoAd_VerifyCodeStub</srcid><srcstatus/><internalId>1212</internalId></linkedfrom></coveredby></needscov>
       <containerCovstatus>covered</containerCovstatus></needscoverage>
       
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>751</internalId></specobject>

  </specobjects>
    <specobjects doctype="dev">
    <specobject>
      <id>dev.SoAd.PBcfgCheck</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>59</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>70</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>752</internalId></specobject>
    <specobject>
      <id>dev.SoAd.StartOfReception</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>103</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00138</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>753</internalId></specobject>
    <specobject>
      <id>dev.SoAd.RequestIpAddrAssignment_Syntax</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>129</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00520</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>146</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>754</internalId></specobject>
    <specobject>
      <id>dev.SoAd.ChangeParameter</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>148</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00508</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
        <provcov>
          <linksto>SoAd.ASR42.SWS_SoAd_00630</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>14</internalId></provcov>
        <provcov>
          <linksto>SoAd.ASR42.SWS_SoAd_00631</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>755</internalId></specobject>
    <specobject>
      <id>dev.SoAd.OfflineReconnectOnline</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>179</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00591</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>206</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>756</internalId></specobject>
    <specobject>
      <id>dev.SoAd.TcpIp_ChangeParameter</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>198</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00689.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>411</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdSocketTcpNoDelay</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>721</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>757</internalId></specobject>
    <specobject>
      <id>dev.SoAd.ConfigMaxValues</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>224</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00127</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00126</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00518</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00519</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>758</internalId></specobject>
    <specobject>
      <id>dev.SoAd.RxIndication.Det.RemotAddr</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>243</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00268</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>759</internalId></specobject>
    <specobject>
      <id>dev.SoAd.FanOut.TP</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>259</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00561</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>760</internalId></specobject>
    <specobject>
      <id>dev.SoAd.IPFrag.LastIsBest</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>275</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00543_UDP_IF_Tx_LastIsBest_IPFrag</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>443</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>761</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_304</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>304</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00642.a.UDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>433</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>762</internalId></specobject>
    <specobject>
      <id>dev.SoAd.Udp.TcpIpCloseAbort</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>305</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00642.b.UDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>434</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>763</internalId></specobject>
    <specobject>
      <id>dev.SoAd.Udp.AutoSoConSetupTxConf</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>336</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00582.a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>764</internalId></specobject>
    <specobject>
      <id>dev.SoAd.SoAd_TcpIpEvent.InvalidEvent</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>359</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00278</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>85</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>765</internalId></specobject>
    <specobject>
      <id>dev.SoAd.TcpStream.HeaderMode</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>385</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00559.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>466</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>766</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_418</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>418</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00563</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>767</internalId></specobject>
    <specobject>
      <id>dev.SoAd.TcpStream.NonHeaderMode</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>419</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00568.1b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>471</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>768</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_441</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>441</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00559.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>465</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>769</internalId></specobject>
    <specobject>
      <id>dev.SoAd.TcpStream.HeaderMode.DiscardSegementedPdu</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>442</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00600</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>214</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>770</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_471</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>471</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00512</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>771</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_472</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>472</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00588</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>203</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>772</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_473</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>473</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00597</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>211</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>773</internalId></specobject>
    <specobject>
      <id>dev.SoAd.SOAD_SOCON_WAITOFFLINE</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>474</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00741</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>354</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>774</internalId></specobject>
    <specobject>
      <id>dev.SoAd.TcpIpEvent.Det.UnkownSocketId</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>503</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00277</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>84</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>775</internalId></specobject>
    <specobject>
      <id>dev.SoAd.ServiceID</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>520</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00091</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00105</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00508</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00521</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00522</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_91001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>372</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>776</internalId></specobject>
    <specobject>
      <id>dev.SoAd.ParameterNames</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>543</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00214</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>69</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00653</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>260</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00560</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00091</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00180</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00105</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00237</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>72</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00650</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>257</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00561</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00181</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>61</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00521</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00608</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00522</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00606</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_91001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>372</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>777</internalId></specobject>
    <specobject>
      <id>dev.SoAd.CopyTxDataParameters</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>575</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00137</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>778</internalId></specobject>
    <specobject>
      <id>dev.SoAd.IfTxConfirmationResult</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>596</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00107</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00737</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>350</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>779</internalId></specobject>
    <specobject>
      <id>dev.SoAd.DevError_UNINIT</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>618</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00272</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00274</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00269</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00621</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00224</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00623</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>235</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00661</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>267</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00264</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00607</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00628</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>240</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00705</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>311</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00609</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00624</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>236</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00701</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>307</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00605</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00627</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>239</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00632</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>241</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00213</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00279</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>86</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00276</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00672</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>276</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00618</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00718</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>324</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00613</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00712</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>318</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00756</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>369</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00616</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>228</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00715</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>321</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00615</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>227</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00659</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>780</internalId></specobject>
    <specobject>
      <id>dev.SoAd.optionalInterfaces</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>665</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00692</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>292</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>781</internalId></specobject>
    <specobject>
      <id>dev.SoAd.RuntimeError</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>684</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00693</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>299</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00759</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>374</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>782</internalId></specobject>
    <specobject>
      <id>dev.SoAd.SoAdSocketTCPOptionFilterRef</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>700</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00155</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>333</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00689</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>289</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>783</internalId></specobject>
    <specobject>
      <id>dev.SoAd.SocketPathMTUEnable</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>716</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00156</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>334</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00689</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>289</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>784</internalId></specobject>
    <specobject>
      <id>dev.SoAd.SocketFlowLabel</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>732</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00157</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>335</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00689</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>289</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>785</internalId></specobject>
    <specobject>
      <id>dev.SoAd.SocketDifferentiatedServicesField</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>748</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00158</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>336</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00689</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>289</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>786</internalId></specobject>
    <specobject>
      <id>dev.SoAd.UdpChecksumEnabled</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>764</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00159</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>337</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00689</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>289</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>787</internalId></specobject>
    <specobject>
      <id>dev.SoAd.SocketSoConModeChgNotifUpperLayer</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>781</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00161</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>339</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>788</internalId></specobject>
    <specobject>
      <id>dev.SoAd.SoAdSocketTcpTlsConnectionRef</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>804</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00163</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>375</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>789</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/include/SoAd.h_26</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/include/SoAd.h</sourcefile>
      <sourceline>26</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ASR42.SWS_SoAd_00073</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>790</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/SoAd.h_30</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/include/SoAd.h</sourcefile>
      <sourceline>30</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ASR42.SWS_SoAd_00072</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>791</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/SoAd_01_UdpSM.c_190</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_01_UdpSM.c</sourcefile>
      <sourceline>190</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UdpSM_PREPAREOFFLINE_InvalidTriggers</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>994</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>792</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_01_UdpSM.c_259</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_01_UdpSM.c</sourcefile>
      <sourceline>259</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UdpSM_PREPAREOFFLINE_Closed</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>993</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>793</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_01_UdpSM.c_310</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_01_UdpSM.c</sourcefile>
      <sourceline>310</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UdpSM_PREPAREOFFLINE_InvalidTriggers</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>994</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>794</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_01_UdpSM.c_363</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_01_UdpSM.c</sourcefile>
      <sourceline>363</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UdpSM_PREPAREOFFLINE_InvalidTriggers</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>994</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>795</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_01_UdpSM.c_400</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_01_UdpSM.c</sourcefile>
      <sourceline>400</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UdpSM_PREPAREOFFLINE_UpClosing</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>992</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>796</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_01_UdpSM.c_467</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_01_UdpSM.c</sourcefile>
      <sourceline>467</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UdpSM_ONLINE_UpClosingPre</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>991</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>797</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_01_UdpSM.c_473</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_01_UdpSM.c</sourcefile>
      <sourceline>473</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UdpSM_PREPAREOFFLINE_InvalidTriggers</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>994</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>798</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_01_UdpSM.c_531</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_01_UdpSM.c</sourcefile>
      <sourceline>531</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UdpSM_PREPAREOFFLINE_InvalidTriggers</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>994</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>799</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/SoAd_01_UdpSM_User.c_341</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_01_UdpSM_User.c</sourcefile>
      <sourceline>341</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0120.Udp.AssignedLocalPort.NotOverWritten</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1110</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>800</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/SoAd_03_Lib.c_86</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_03_Lib.c</sourcefile>
      <sourceline>86</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.RemoteAddressHandling.KeepRemoteAddrAfterRestartClose</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1102</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>801</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_03_Lib.c_314</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_03_Lib.c</sourcefile>
      <sourceline>314</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.UdpTimeoutHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>970</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>802</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_03_Lib.c_412</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_03_Lib.c</sourcefile>
      <sourceline>412</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.UdpTimeoutHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>970</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>803</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/SoAd_04_TcpSM.c_189</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_04_TcpSM.c</sourcefile>
      <sourceline>189</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpSM_PREPAREOFFLINE_InvalidTriggers</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1018</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>804</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_04_TcpSM.c_258</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_04_TcpSM.c</sourcefile>
      <sourceline>258</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpSM_PREPAREOFFLINE_Closed</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1017</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>805</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_04_TcpSM.c_316</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_04_TcpSM.c</sourcefile>
      <sourceline>316</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpSM_PREPAREOFFLINE_InvalidTriggers</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1018</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>806</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_04_TcpSM.c_353</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_04_TcpSM.c</sourcefile>
      <sourceline>353</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpSM_PREPAREOFFLINE_UpClosing</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1016</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>807</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_04_TcpSM.c_436</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_04_TcpSM.c</sourcefile>
      <sourceline>436</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpSM_PREPAREOFFLINE_InvalidTriggers</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1018</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>808</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_04_TcpSM.c_473</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_04_TcpSM.c</sourcefile>
      <sourceline>473</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpSM_ONLINE_UpClosingPre</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1015</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>809</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_04_TcpSM.c_483</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_04_TcpSM.c</sourcefile>
      <sourceline>483</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpSM_PREPAREOFFLINE_InvalidTriggers</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1018</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>810</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/SoAd_Int_05_TxTp.c_27</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_05_TxTp.c</sourcefile>
      <sourceline>27</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ASR42.SWS_SoAd_00073</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>811</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_05_TxTp.c_29</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_05_TxTp.c</sourcefile>
      <sourceline>29</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ASR42.SWS_SoAd_00072</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>812</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_05_TxTp.c_35</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_05_TxTp.c</sourcefile>
      <sourceline>35</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ASR42.SWS_SoAd_00073</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>813</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_05_TxTp.c_782</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_05_TxTp.c</sourcefile>
      <sourceline>782</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0140.Tx.Tcp.Tp.NoDataSent</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1122</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>814</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_05_TxTp.c_798</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_05_TxTp.c</sourcefile>
      <sourceline>798</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.Func0111.dsn.Tcp.Tp.Tx.HeaderMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1105</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>815</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_05_TxTp.c_808</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_05_TxTp.c</sourcefile>
      <sourceline>808</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0140.Tx.Tcp.Tp.DataSent.CloseSocketConnection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1124</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>816</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_05_TxTp.c_811</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_05_TxTp.c</sourcefile>
      <sourceline>811</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0140.Tx.Tcp.Tp.DataSent.DisableFurtherCom</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1123</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>817</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_05_TxTp.c_985</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_05_TxTp.c</sourcefile>
      <sourceline>985</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Metadata.Tx.SoConId.Invalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1032</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>818</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_48</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>48</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ASR42.SWS_SoAd_00073</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>819</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_50</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>50</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ASR42.SWS_SoAd_00072</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>820</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_56</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>56</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ASR42.SWS_SoAd_00073</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>821</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_453</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>453</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Udp.Tx.If.SduLengthNull.NotOK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1042</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>822</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_556</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>556</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0146.Fanout.FanOutRetValueOrControlled</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1104</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>823</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_1455</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>1455</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.IndicationBitMaps</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>969</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>824</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_1565</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>1565</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.Dsn.Func0101.Tx.Tcp.If.Det.SduDataPtr.NullPtr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1073</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>825</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_1935</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>1935</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0120.Udp.SkipIfTxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1108</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>826</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_1936</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>1936</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0120.Udp.SkipIfTxConfirmationPerPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1109</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>827</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_1969</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>1969</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0141.Tx.Udp.If.UDPRetry.BufferUnavailable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1127</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>828</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_2085</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>2085</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Udp.Tx.If.SamePdu.NotOK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1028</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>829</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_2095</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>2095</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Tx.If.Interrupt.StoreToBuffer.SameSoCon</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>975</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>830</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_2098</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>2098</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0141.Tx.Udp.If.ShadowBuffer.Unavailable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1128</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>831</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_2113</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>2113</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Tx.If.Interrupt.StoreToBuffer.OtherSoCon</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>976</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>832</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_2126</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>2126</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Tx.If.Interrupt.StoreToBuffer.MainFuncContext</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>977</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>833</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_2137</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>2137</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0141.Tx.Udp.If.ShadowBuffer.Unavailable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1128</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>834</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_2220</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>2220</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0141.Tx.Udp.If.TriggerNever.BufferUnavailable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1125</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>835</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_2257</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>2257</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Udp.Tx.If.OversizedPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1031</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>836</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_2258</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>2258</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Tx.If.Trigger_Never.OversizedPDU</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>971</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>837</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_2279</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>2279</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Tx.If.Trigger_Always.OversizedPDU</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>972</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>838</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_2469</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>2469</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Udp.Tx.If.Interrupt_OversizedPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1030</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>839</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_2470</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>2470</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Tx.If.OversizedPDU.NotOK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>973</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>840</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_2532</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>2532</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Udp.Tx.If.Interrupt_NullPtr.NotOK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1029</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>841</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_2611</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>2611</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.IndicationBitMaps</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>969</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>842</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_2780</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>2780</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.IndicationBitMaps</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>969</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>843</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_2968</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>2968</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.Dsn.Func0101.Tx.Udp.If.NoHeader</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1071</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>844</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_3030</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>3030</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00731</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>344</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>845</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_3031</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>3031</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.Dsn.Func0101.Tx.Udp.If.Header.Fanout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1070</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>846</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_3035</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>3035</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00543_UDP_IF_Tx_IPFrag</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>444</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>847</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_3050</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>3050</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.Dsn.Func0101.Tx.Udp.If.Det.IPFrag</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1072</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>848</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_3089</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>3089</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00732</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>345</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>849</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_3133</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>3133</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00543_UDP_IF_Tx_nPDU_IPFrag</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>442</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>850</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_3234</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>3234</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.Dsn.Func0101.Tx.Udp.If.Det.IPFrag</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1072</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>851</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_3377</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>3377</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.IndicationBitMaps</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>969</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>852</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_3415</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>3415</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.IndicationBitMaps</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>969</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>853</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_3437</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>3437</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0120.Udp.SkipIfTxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1108</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>854</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_06_TxIf.c_3438</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_06_TxIf.c</sourcefile>
      <sourceline>3438</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0120.Udp.SkipIfTxConfirmationPerPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1109</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>855</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/SoAd_Int_07_Rx.c_58</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_07_Rx.c</sourcefile>
      <sourceline>58</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ASR42.SWS_SoAd_00073</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>856</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_07_Rx.c_60</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_07_Rx.c</sourcefile>
      <sourceline>60</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ASR42.SWS_SoAd_00072</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>857</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_07_Rx.c_66</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_07_Rx.c</sourcefile>
      <sourceline>66</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ASR42.SWS_SoAd_00073</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>858</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_07_Rx.c_560</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_07_Rx.c</sourcefile>
      <sourceline>560</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.SWS_SoAd_00097.DomainInvalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1046</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>859</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_07_Rx.c_713</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_07_Rx.c</sourcefile>
      <sourceline>713</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.SWS_SoAd_00099.DomainInvalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1043</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>860</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_07_Rx.c_827</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_07_Rx.c</sourcefile>
      <sourceline>827</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling.SoAdNotInitialized</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1037</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>861</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_07_Rx.c_832</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_07_Rx.c</sourcefile>
      <sourceline>832</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling.RemoteAddrNullPtr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1038</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>862</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_07_Rx.c_837</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_07_Rx.c</sourcefile>
      <sourceline>837</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling.DomainInvalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1041</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>863</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_07_Rx.c_856</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_07_Rx.c</sourcefile>
      <sourceline>856</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling.SocketIdInvalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1039</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>864</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_07_Rx.c_862</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_07_Rx.c</sourcefile>
      <sourceline>862</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling.TcpSocketId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1040</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>865</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_07_Rx.c_933</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_07_Rx.c</sourcefile>
      <sourceline>933</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling.SocketIdInvalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1039</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>866</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_07_Rx.c_939</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_07_Rx.c</sourcefile>
      <sourceline>939</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling.TcpSocketId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1040</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>867</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_07_Rx.c_1626</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_07_Rx.c</sourcefile>
      <sourceline>1626</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00694</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>300</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>868</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_07_Rx.c_1638</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_07_Rx.c</sourcefile>
      <sourceline>1638</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00742</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>355</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>869</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_07_Rx.c_3431</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_07_Rx.c</sourcefile>
      <sourceline>3431</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00754</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>367</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>870</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_07_Rx.c_3805</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_07_Rx.c</sourcefile>
      <sourceline>3805</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.PduHeader.LengthInHeader.Udp.Invalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1034</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>871</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_07_Rx.c_3817</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_07_Rx.c</sourcefile>
      <sourceline>3817</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.PduHeader.LengthInHeader.Max.Invalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1033</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>872</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_07_Rx.c_3843</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_07_Rx.c</sourcefile>
      <sourceline>3843</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.Dsn.ExtractPduHeader.BinarySearch</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>967</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>873</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_07_Rx.c_3857</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_07_Rx.c</sourcefile>
      <sourceline>3857</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.Dsn.ExtractPduHeader.BinarySearch.IndexOutOfBoundsProtection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>968</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>874</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_07_Rx.c_4108</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_07_Rx.c</sourcefile>
      <sourceline>4108</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00167</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>383</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>875</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_07_Rx.c_4120</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_07_Rx.c</sourcefile>
      <sourceline>4120</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00166</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>382</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>876</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_07_Rx.c_4132</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_07_Rx.c</sourcefile>
      <sourceline>4132</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00170</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>386</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>877</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_07_Rx.c_4143</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_07_Rx.c</sourcefile>
      <sourceline>4143</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00754</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>367</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>878</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_07_Rx.c_4155</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_07_Rx.c</sourcefile>
      <sourceline>4155</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00169</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>385</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>879</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_07_Rx.c_4167</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_07_Rx.c</sourcefile>
      <sourceline>4167</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00168</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>384</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>880</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_51</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_08_MainFunction.c.m4</sourcefile>
      <sourceline>51</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ASR42.SWS_SoAd_00073</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>881</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_53</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_08_MainFunction.c.m4</sourcefile>
      <sourceline>53</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ASR42.SWS_SoAd_00072</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>882</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_59</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_08_MainFunction.c.m4</sourcefile>
      <sourceline>59</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ASR42.SWS_SoAd_00073</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>883</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_446</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_08_MainFunction.c.m4</sourcefile>
      <sourceline>446</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00211</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>67</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>884</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_447</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_08_MainFunction.c.m4</sourcefile>
      <sourceline>447</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00723</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>330</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>885</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_1231</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_08_MainFunction.c.m4</sourcefile>
      <sourceline>1231</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.RemoteAddressHandling.SetRemoteAddr.Udp.LockState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1097</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>886</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_1453</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_08_MainFunction.c.m4</sourcefile>
      <sourceline>1453</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00730</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>343</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>887</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_1820</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_08_MainFunction.c.m4</sourcefile>
      <sourceline>1820</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.SWS_SoAd_00278.InvalidEvent</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1047</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>888</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_1999</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_08_MainFunction.c.m4</sourcefile>
      <sourceline>1999</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.Udp.UsedSetRemoteAddr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1096</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>889</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_2031</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_08_MainFunction.c.m4</sourcefile>
      <sourceline>2031</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.Tcp.UsedSetRemoteAddr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1098</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>890</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_2045</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_08_MainFunction.c.m4</sourcefile>
      <sourceline>2045</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.TcpServer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1100</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>891</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_2048</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_08_MainFunction.c.m4</sourcefile>
      <sourceline>2048</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.TcpClient</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1101</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>892</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_2071</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_08_MainFunction.c.m4</sourcefile>
      <sourceline>2071</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.Udp.RemoteAddrAndPort_WildCards</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1094</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>893</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_2663</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_08_MainFunction.c.m4</sourcefile>
      <sourceline>2663</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.IndicationBitMaps</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>969</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>894</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_2947</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_08_MainFunction.c.m4</sourcefile>
      <sourceline>2947</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpSM_TriggerConnecting_TcpClient</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1002</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>895</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_2948</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_08_MainFunction.c.m4</sourcefile>
      <sourceline>2948</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpSM_TriggerConnecting_TcpServer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1003</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>896</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_3289</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_08_MainFunction.c.m4</sourcefile>
      <sourceline>3289</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0130.Rx.Udp.If.EnableServiceInstance</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1117</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>897</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_3297</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_08_MainFunction.c.m4</sourcefile>
      <sourceline>3297</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0130.Rx.Udp.If.EnableSameServiceInstanceMultipleTimes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1121</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>898</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_3310</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_08_MainFunction.c.m4</sourcefile>
      <sourceline>3310</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0130.Rx.Udp.If.TwoPdusForSameSoCon</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1035</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>899</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_3318</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_08_MainFunction.c.m4</sourcefile>
      <sourceline>3318</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0130.Rx.Udp.If.TwoSoConSamePdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1036</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>900</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_3567</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/src/SoAd_Int_08_MainFunction.c.m4</sourcefile>
      <sourceline>3567</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0130.Rx.Udp.If.DisableServiceInstance</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1118</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>901</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/plugin.SoAdExt.Autosar/Java/dreisoft/tresos/soad/generator/input/check/IPAddressCheck.java_86</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/plugin.SoAdExt.Autosar/Java/dreisoft/tresos/soad/generator/input/check/IPAddressCheck.java</sourcefile>
      <sourceline>86</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Generator.IPAdresses.Ipv4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1140</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>902</internalId></specobject>
    <specobject>
      <id>src/plugin.SoAdExt.Autosar/Java/dreisoft/tresos/soad/generator/input/check/IPAddressCheck.java_89</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/plugin.SoAdExt.Autosar/Java/dreisoft/tresos/soad/generator/input/check/IPAddressCheck.java</sourcefile>
      <sourceline>89</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Generator.IPAdresses.Ipv6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1141</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>903</internalId></specobject>
    <specobject>
      <id>src/plugin.SoAdExt.Autosar/Java/dreisoft/tresos/soad/generator/input/check/IPAddressCheck.java_113</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/plugin.SoAdExt.Autosar/Java/dreisoft/tresos/soad/generator/input/check/IPAddressCheck.java</sourcefile>
      <sourceline>113</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Generator.IPAdresses.Ipv4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1140</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>904</internalId></specobject>
    <specobject>
      <id>src/plugin.SoAdExt.Autosar/Java/dreisoft/tresos/soad/generator/input/check/IPAddressCheck.java_116</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/plugin.SoAdExt.Autosar/Java/dreisoft/tresos/soad/generator/input/check/IPAddressCheck.java</sourcefile>
      <sourceline>116</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Generator.IPAdresses.Ipv6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1141</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>905</internalId></specobject>
    <specobject>
      <id>src/plugin.SoAdExt.Autosar/Java/dreisoft/tresos/soad/generator/input/check/IPAddressCheck.java_132</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/plugin.SoAdExt.Autosar/Java/dreisoft/tresos/soad/generator/input/check/IPAddressCheck.java</sourcefile>
      <sourceline>132</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Generator.IPAdresses.Ipv4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1140</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>906</internalId></specobject>
    <specobject>
      <id>src/plugin.SoAdExt.Autosar/Java/dreisoft/tresos/soad/generator/input/check/IPAddressCheck.java_145</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/plugin.SoAdExt.Autosar/Java/dreisoft/tresos/soad/generator/input/check/IPAddressCheck.java</sourcefile>
      <sourceline>145</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Generator.IPAdresses.Ipv6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1141</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>907</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/plugin.SoAdExt.Autosar/Java/dreisoft/tresos/soad/generator/intermediate/postbuild/check/BufferCheck.java_129</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/plugin.SoAdExt.Autosar/Java/dreisoft/tresos/soad/generator/intermediate/postbuild/check/BufferCheck.java</sourcefile>
      <sourceline>129</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.MCG.UnitTests.FunctionalTests.MaximumCalculation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1146</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>908</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/plugin.SoAdExt.Autosar/Java/dreisoft/tresos/soad/generator/output/postbuild/Arrays.java_86</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/plugin.SoAdExt.Autosar/Java/dreisoft/tresos/soad/generator/output/postbuild/Arrays.java</sourcefile>
      <sourceline>86</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Generator.SocketRouteOrder</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1138</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>909</internalId></specobject>
    <specobject>
      <id>src/plugin.SoAdExt.Autosar/Java/dreisoft/tresos/soad/generator/output/postbuild/Arrays.java_881</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/plugin.SoAdExt.Autosar/Java/dreisoft/tresos/soad/generator/output/postbuild/Arrays.java</sourcefile>
      <sourceline>881</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Generator.SocketRouteOrder</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1138</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>910</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/plugin.SoAdExt.Autosar/Java/dreisoft/tresos/soad/generator/output/postbuild/config/SoAd_PduRouteDestVirtualType.java_51</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/plugin.SoAdExt.Autosar/Java/dreisoft/tresos/soad/generator/output/postbuild/config/SoAd_PduRouteDestVirtualType.java</sourcefile>
      <sourceline>51</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Generator.AllocationOfTxTcpDataObjects</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1139</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>911</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/plugin.SoAdExt.Autosar/Java/dreisoft/tresos/soad/generator/output/postbuild/config/SoAd_SoConType.java_95</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/plugin.SoAdExt.Autosar/Java/dreisoft/tresos/soad/generator/output/postbuild/config/SoAd_SoConType.java</sourcefile>
      <sourceline>95</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Generator.AllocationOfTxTcpDataObjects</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1139</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>912</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/config/SoAd.xdm.m4_236</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/config/SoAd.xdm.m4</sourcefile>
      <sourceline>236</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00164</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>380</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>913</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SoAd.xdm.m4_244</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/config/SoAd.xdm.m4</sourcefile>
      <sourceline>244</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00165</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>381</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>914</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SoAd.xdm.m4_247</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/config/SoAd.xdm.m4</sourcefile>
      <sourceline>247</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00166</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>382</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>915</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SoAd.xdm.m4_264</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/config/SoAd.xdm.m4</sourcefile>
      <sourceline>264</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00167</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>383</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>916</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SoAd.xdm.m4_281</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/config/SoAd.xdm.m4</sourcefile>
      <sourceline>281</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00168</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>384</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>917</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SoAd.xdm.m4_298</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/config/SoAd.xdm.m4</sourcefile>
      <sourceline>298</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00169</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>385</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>918</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SoAd.xdm.m4_315</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/config/SoAd.xdm.m4</sourcefile>
      <sourceline>315</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00170</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>386</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>919</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/config/SoAd_EBParameters.xdm.m4_133</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/config/SoAd_EBParameters.xdm.m4</sourcefile>
      <sourceline>133</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.PBCFGM108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>742</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>920</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SoAd_EBParameters.xdm.m4_672</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/config/SoAd_EBParameters.xdm.m4</sourcefile>
      <sourceline>672</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling.Dtls_UDP_Without_TlsDtls</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1157</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>921</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SoAd_EBParameters.xdm.m4_677</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/config/SoAd_EBParameters.xdm.m4</sourcefile>
      <sourceline>677</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling.Dtls_UDP_With_Duplicated_DtlsRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1161</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>922</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SoAd_EBParameters.xdm.m4_686</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/config/SoAd_EBParameters.xdm.m4</sourcefile>
      <sourceline>686</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling.NoTlsInstance</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1159</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>923</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SoAd_EBParameters.xdm.m4_690</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/config/SoAd_EBParameters.xdm.m4</sourcefile>
      <sourceline>690</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling.TooFewTlsInstance</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1160</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>924</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SoAd_EBParameters.xdm.m4_732</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/config/SoAd_EBParameters.xdm.m4</sourcefile>
      <sourceline>732</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0141.XdmCheck.BufferPool.MaxRange</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1153</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>925</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/config/SoAd_Extension.xdm.m4_93</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/config/SoAd_Extension.xdm.m4</sourcefile>
      <sourceline>93</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00164</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>380</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>926</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SoAd_Extension.xdm.m4_105</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/config/SoAd_Extension.xdm.m4</sourcefile>
      <sourceline>105</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00165</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>381</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>927</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SoAd_Extension.xdm.m4_127</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/config/SoAd_Extension.xdm.m4</sourcefile>
      <sourceline>127</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00166</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>382</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>928</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SoAd_Extension.xdm.m4_150</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/config/SoAd_Extension.xdm.m4</sourcefile>
      <sourceline>150</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00167</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>383</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>929</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SoAd_Extension.xdm.m4_173</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/config/SoAd_Extension.xdm.m4</sourcefile>
      <sourceline>173</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00168</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>384</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>930</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SoAd_Extension.xdm.m4_199</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/config/SoAd_Extension.xdm.m4</sourcefile>
      <sourceline>199</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00169</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>385</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>931</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SoAd_Extension.xdm.m4_223</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/config/SoAd_Extension.xdm.m4</sourcefile>
      <sourceline>223</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00170</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>386</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>932</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SoAd_Extension.xdm.m4_362</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/config/SoAd_Extension.xdm.m4</sourcefile>
      <sourceline>362</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.XdmCheck.nPdu.TP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1154</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>933</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SoAd_Extension.xdm.m4_566</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/config/SoAd_Extension.xdm.m4</sourcefile>
      <sourceline>566</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling.AutomaticSetup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1155</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>934</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SoAd_Extension.xdm.m4_641</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/config/SoAd_Extension.xdm.m4</sourcefile>
      <sourceline>641</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling.Dtls_Not_With_Tcp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1156</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>935</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SoAd_Extension.xdm.m4_645</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/config/SoAd_Extension.xdm.m4</sourcefile>
      <sourceline>645</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling.Dtls_UDP_With_Tls_On_Connection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1158</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>936</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SoAd_Extension.xdm.m4_650</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/config/SoAd_Extension.xdm.m4</sourcefile>
      <sourceline>650</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.Dsn.Func.TLS.TCP_With_DuplicatedTlsRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1162</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>937</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SoAd_Extension.xdm.m4_879</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/config/SoAd_Extension.xdm.m4</sourcefile>
      <sourceline>879</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0130.XdmCheck.MultiplePSI.NoSoConGroupRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1150</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>938</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SoAd_Extension.xdm.m4_896</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/config/SoAd_Extension.xdm.m4</sourcefile>
      <sourceline>896</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.XdmCheck.SocketRoute.SoAdRxSocketConnOrSocketConnBundleRef.SocketConnectionGroup.TcpMaxSize</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1166</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>939</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SoAd_Extension.xdm.m4_960</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/config/SoAd_Extension.xdm.m4</sourcefile>
      <sourceline>960</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0130.XdmCheck.MultiplePSI.NoTpApi</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1147</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>940</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SoAd_Extension.xdm.m4_971</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/config/SoAd_Extension.xdm.m4</sourcefile>
      <sourceline>971</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0130.XdmCheck.MultiplePSI.NoRoutingGroupRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>941</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SoAd_Extension.xdm.m4_982</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/config/SoAd_Extension.xdm.m4</sourcefile>
      <sourceline>982</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0130.XdmCheck.MultiplePSI.SameRoutingGroupRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1149</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>942</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SoAd_Extension.xdm.m4_987</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/config/SoAd_Extension.xdm.m4</sourcefile>
      <sourceline>987</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0130.XdmCheck.MultiplePSI.SoAdRoutingGroupIsEnabledAtInit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1151</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>943</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SoAd_Extension.xdm.m4_992</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/src/Autosar/config/SoAd_Extension.xdm.m4</sourcefile>
      <sourceline>992</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0130.XdmCheck.MultiplePSI.NoGlobalRoutingGroupAllowed</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1152</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>944</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Support to Trigger next Transmission       in Context of UL_IfTxConfirmation()">
    <specobject>
      <id>SoAd.dsn.Func.IfTxConfirmation.TriggerTxForSamePDU</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>880</sourceline>
      <version>1</version>
      <description>
          SoAd allows to trigger another transmission for
          the same PDU in context of UL_IfTxConfirmation() if socket connection setup Udp is used.
        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.EB.IfTxConfirmation.UdpTriggerTxForSamePDU</srcid><srcstatus/><internalId>1048</internalId></linkedfrom><linkedfrom><srcid>SoAd.EB.IfTxConfirmation.TcpTriggerTxForSamePDU</srcid><srcstatus/><internalId>1049</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>945</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Meta Data Handling">
    <specobject>
      <id>SoAd.dsn.Func.MetaDataHandling</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>896</sourceline>
      <version>1</version>
      <description>
         SoAd shall support meta data handling to attach the SoConId to Rx PDUs
         (of received requests) and to retrieve the SoConId from Tx PDUs
         to choose the corresponding SoCon to be used to send the response.
        </description>
      <furtherinfo>
          WRN.swurs.needscoverage.count - Top level requirement for this functionality.
          It is used to group all requirements belonging to this functionality and therefore requires a high number of coverage linkage.
        </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.dsn.Metadata.Udp.If.Rx.SoCon</srcid><srcstatus/><internalId>1052</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Metadata.Udp.Tp.Rx.SoCon</srcid><srcstatus/><internalId>1053</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Metadata.Tcp.If.Rx.SoCon</srcid><srcstatus/><internalId>1054</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Metadata.Tcp.Tp.Rx.SoCon</srcid><srcstatus/><internalId>1055</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Metadata.Udp.If.Rx.SoConGroup</srcid><srcstatus/><internalId>1056</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Metadata.Udp.Tp.Rx.SoConGroup</srcid><srcstatus/><internalId>1057</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Metadata.Tcp.If.Rx.SoConGroup</srcid><srcstatus/><internalId>1058</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Metadata.Tcp.Tp.Rx.SoConGroup</srcid><srcstatus/><internalId>1059</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Metadata.Udp.If.Tx.SoCon</srcid><srcstatus/><internalId>1060</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Metadata.Udp.Tp.Tx.SoCon</srcid><srcstatus/><internalId>1061</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Metadata.Tcp.If.Tx.SoCon</srcid><srcstatus/><internalId>1062</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Metadata.Tcp.Tp.Tx.SoCon</srcid><srcstatus/><internalId>1063</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Metadata.Udp.If.Tx.SoConGroup</srcid><srcstatus/><internalId>1064</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Metadata.Udp.Tp.Tx.SoConGroup</srcid><srcstatus/><internalId>1065</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Metadata.Tcp.If.Tx.SoConGroup</srcid><srcstatus/><internalId>1066</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Metadata.Tcp.Tp.Tx.SoConGroup</srcid><srcstatus/><internalId>1067</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Metadata.Tp.Tx_IncorrectSoConId</srcid><srcstatus/><internalId>1068</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Metadata.If.Tx.IncorrectSoConId</srcid><srcstatus/><internalId>1069</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.XdmCheck.MetaData.Tx.Tp.SoConGroup</srcid><srcstatus/><internalId>1143</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.XdmCheck.MetaData.Rx.Tp.SoConGroup</srcid><srcstatus/><internalId>1144</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00739</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>352</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00738</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>351</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>946</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="SoAd_IfTransmit() with SduDataPtr as NULL_PTR">
    <specobject>
      <id>SoAd.Dsn.Func0101.Udp.IfTransmit.NullPtr</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>927</sourceline>
      <version>1</version>
      <description>
          SoAd shall support SoAd_IfTransmit() to be called with SduDataPtr as NULL_PTR.
          In the context of this function.
        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00731</srcid><srcstatus/><internalId>344</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00732</srcid><srcstatus/><internalId>345</internalId></linkedfrom><linkedfrom><srcid>SoAd.Dsn.Func0101.Tx.Udp.If.Header.Fanout</srcid><srcstatus/><internalId>1070</internalId></linkedfrom><linkedfrom><srcid>SoAd.Dsn.Func0101.Tx.Udp.If.NoHeader</srcid><srcstatus/><internalId>1071</internalId></linkedfrom><linkedfrom><srcid>SoAd.Dsn.Func0101.Tx.Udp.If.Det.IPFrag</srcid><srcstatus/><internalId>1072</internalId></linkedfrom><linkedfrom><srcid>SoAd.Dsn.Func0101.Tx.Tcp.If.Det.SduDataPtr.NullPtr</srcid><srcstatus/><internalId>1073</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>947</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="PDU buffering (nPDU Functionality)">
    <specobject>
      <id>SoAd.dsn.Func0102.Udp.Tx.If.nPduBuffer</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>943</sourceline>
      <version>1</version>
      <description>
          SoAd shall support buffering of multiple If PDUs to be transmitted together.
          This functionality allows to collect small PDUs together to be transmitted in a single
          frame to save bandwidth.
        </description>
      <furtherinfo>
          WRN.swurs.needscoverage.count - Top level requirement for this functionality.
          It is used to group all requirements belonging to this functionality and therefore requires a high number of coverage linkage.
        </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.dsn.Func0102.Tx.If.Trigger_Never.OversizedPDU</srcid><srcstatus/><internalId>971</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0102.Tx.If.Trigger_Always.OversizedPDU</srcid><srcstatus/><internalId>972</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0102.Tx.If.OversizedPDU.NotOK</srcid><srcstatus/><internalId>973</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0102.Tx.If.TriggerTxBufferTransmission</srcid><srcstatus/><internalId>974</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0102.Tx.If.Interrupt.StoreToBuffer.SameSoCon</srcid><srcstatus/><internalId>975</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0102.Tx.If.Interrupt.StoreToBuffer.OtherSoCon</srcid><srcstatus/><internalId>976</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0102.Tx.If.Interrupt.StoreToBuffer.MainFuncContext</srcid><srcstatus/><internalId>977</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0102.Tx.If.Interrupt.LastIsBest_NotOk</srcid><srcstatus/><internalId>978</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0102.Udp.Tx.If.SamePdu.NotOK</srcid><srcstatus/><internalId>1028</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0102.Udp.Tx.If.Interrupt_NullPtr.NotOK</srcid><srcstatus/><internalId>1029</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0102.Udp.Tx.If.Interrupt_OversizedPdu</srcid><srcstatus/><internalId>1030</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0102.Udp.Tx.If.OversizedPdu</srcid><srcstatus/><internalId>1031</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0102.Xdm.nPduBuffer.HeaderModeDisabled</srcid><srcstatus/><internalId>1142</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0102.XdmCheck.nPdu.TP</srcid><srcstatus/><internalId>1154</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>948</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Get and Reset Measurement Data">
    <specobject>
      <id>SoAd.dsn.Func.GetAndResetMeasurementData</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>964</sourceline>
      <version>1</version>
      <description>
          SoAd shall support reading and reseting of measurement data for diagnostic purposes.
        </description>
      <furtherinfo>
          WRN.swurs.needscoverage.count - Top level requirement for this functionality.
          It is used to group all requirements belonging to this functionality and therefore requires a high number of coverage linkage.
        </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.ECUC_SoAd_00162</srcid><srcstatus/><internalId>340</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00010</srcid><srcstatus/><internalId>341</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00748</srcid><srcstatus/><internalId>361</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00749</srcid><srcstatus/><internalId>362</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00750</srcid><srcstatus/><internalId>363</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00751</srcid><srcstatus/><internalId>364</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00752</srcid><srcstatus/><internalId>365</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00753</srcid><srcstatus/><internalId>366</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00754</srcid><srcstatus/><internalId>367</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00755</srcid><srcstatus/><internalId>368</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00756</srcid><srcstatus/><internalId>369</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00757</srcid><srcstatus/><internalId>370</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00758</srcid><srcstatus/><internalId>371</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_91010</srcid><srcstatus/><internalId>373</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>949</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Implement SoAd_GetSoConInfo">
    <specobject>
      <id>SoAd.dsn.Func.GetSoConInfo</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>983</sourceline>
      <version>1</version>
      <description>
          SoAd shall implement the function SoAd_GetSoConInfo to get information about a Socket Connection.
          The call to SoAd_GetSoConInfo() with a valid SoConId shall return the local Ip address, the remote IP address
          and the VlanId for a SoConId.
        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.dsn.Func.GetSoConInfo.SoConIdInvalid</srcid><srcstatus/><internalId>1044</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func.GetSoConInfo.ParamNullPtr</srcid><srcstatus/><internalId>1045</internalId></linkedfrom><linkedfrom><srcid>SoAd.EB.GetSoConInfo</srcid><srcstatus/><internalId>1050</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>950</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Implement ReportEventCallout">
    <specobject>
      <id>SoAd.dsn.Func.ReportEventCallout</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>1000</sourceline>
      <version>1</version>
      <description>
          SoAd shall implement a mechanism to specify a callout function that gets called whenever specific
          events occur.
        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.EB.ReportEventCallout</srcid><srcstatus/><internalId>1051</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>951</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="TLS extension">
    <specobject>
      <id>SoAd.dsn.Func.TLS_Extension</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>1016</sourceline>
      <version>1</version>
      <description>
          SoAd shall support TLS extension.
        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.Dsn.Func.TLS.Udp</srcid><srcstatus/><internalId>1076</internalId></linkedfrom><linkedfrom><srcid>SoAd.Dsn.Func.TLS.Tcp_Client_ChangeParameter</srcid><srcstatus/><internalId>1077</internalId></linkedfrom><linkedfrom><srcid>SoAd.Dsn.Func.TLS.Tcp_TcpAccepted_ChangeParameter</srcid><srcstatus/><internalId>1078</internalId></linkedfrom><linkedfrom><srcid>SoAd.Dsn.Func.TLS.Tcp.TlsHandshakeEstablished</srcid><srcstatus/><internalId>1079</internalId></linkedfrom><linkedfrom><srcid>SoAd.Dsn.Func.TLS.Tcp.TlsCloseNotifyReceived</srcid><srcstatus/><internalId>1080</internalId></linkedfrom><linkedfrom><srcid>SoAd.Dsn.Func.TLS.Tcp.TlsAlert</srcid><srcstatus/><internalId>1081</internalId></linkedfrom><linkedfrom><srcid>SoAd.Dsn.Func.TLS.Tcp.TlsWarning</srcid><srcstatus/><internalId>1082</internalId></linkedfrom><linkedfrom><srcid>SoAd.Dsn.Func.TLS.TCP_With_DuplicatedTlsRef</srcid><srcstatus/><internalId>1162</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>952</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="TCP connection without Rx buffer">
    <specobject>
      <id>SoAd.dsn.Func0110.SoAdSocketTpRxBufferMinDisabled</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>1031</sourceline>
      <version>1</version>
      <description>
          SoAd shall support a TCP connection with TP API without buffering of received payload data.
          Involved configuration:
          &lt;ul&gt;
            &lt;li&gt;SoAdSocketTpRxBufferMin disabled (enabled is out of scope for this functionality)&lt;/li&gt;
            &lt;li&gt;Communication Protocol TCP (UDP is out of scope for this functionality)&lt;/li&gt;
            &lt;li&gt;Direction Rx (Tx is out of scope for this functionality)&lt;/li&gt;
            &lt;li&gt;API TP (If is out of scope for this functionality)&lt;/li&gt;
            &lt;li&gt;Header mode enabled&lt;/li&gt;
            &lt;li&gt;Header mode disabled&lt;/li&gt;
          &lt;/ul&gt;
        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.dsn.Func0110.Rx.Tcp.Tp.Header.NoSeg</srcid><srcstatus/><internalId>1083</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0110.Rx.Tcp.Tp.Header.Seg</srcid><srcstatus/><internalId>1085</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0110.Rx.Tcp.Tp.NoHeader</srcid><srcstatus/><internalId>1091</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>953</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="TCP connection">
    <specobject>
      <id>SoAd.dsn.Func0111.Tcp</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>1055</sourceline>
      <version>1</version>
      <description>
          It shall be possible to transmit and receive data via TCP connection.
          This includes:
          &lt;ul&gt;
            &lt;li&gt;Upper layer using IF APIs&lt;/li&gt;
            &lt;li&gt;Upper layer using TP APIs&lt;/li&gt;
          &lt;/ul&gt;
        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.Func0111.dsn.Tcp.Tp.Tx.HeaderMode</srcid><srcstatus/><internalId>1105</internalId></linkedfrom><linkedfrom><srcid>SoAd.Func0111.dsn.Tcp.If.Rx.FrameBigger64k</srcid><srcstatus/><internalId>1106</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.XdmCheck.SocketRoute.SoAdRxSocketConnOrSocketConnBundleRef.SocketConnectionGroup.TcpMaxSize</srcid><srcstatus/><internalId>1166</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>954</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="UDP connection">
    <specobject>
      <id>SoAd.dsn.Func0120.Udp</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>1075</sourceline>
      <version>1</version>
      <description>
          It shall be possible to transmit and receive data via UDP connection.
          This includes:
          &lt;ul&gt;
            &lt;li&gt;Upper layer using IF APIs&lt;/li&gt;
            &lt;li&gt;Upper layer using TP APIs&lt;/li&gt;
          &lt;/ul&gt;
        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.dsn.Func0120.Udp.SkipIfTxConfirmation</srcid><srcstatus/><internalId>1108</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0120.Udp.SkipIfTxConfirmationPerPdu</srcid><srcstatus/><internalId>1109</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0120.Udp.AssignedLocalPort.NotOverWritten</srcid><srcstatus/><internalId>1110</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>955</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Multiple PSIs of the same service">
    <specobject>
      <id>SoAd.dsn.Func0130.MultiplePSI</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>1095</sourceline>
      <version>1</version>
      <description>
          SoAd shall support to receive Multiple Provided Service Instances.
          This means that same Service should be
          provided on different Endpoints with different InstanceIds.
          This feature is constrained by these factors:
          &lt;ul&gt;
            &lt;li&gt;Upper Layer using IF APIs&lt;/li&gt;
            &lt;li&gt;There will be no RX Fanout&lt;/li&gt;
            &lt;li&gt;All Instances of a Service must be handled in one SoConGroup&lt;/li&gt;
          &lt;/ul&gt;
        </description>
      <furtherinfo>
          WRN.swurs.needscoverage.count - Top level requirement for this functionality.
          It is used to group all requirements belonging to this functionality and therefore requires a high number of coverage linkage.
        </furtherinfo>
      <comment>
          origin: https://jira.autosar.org/browse/AR-92400
        </comment>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.dsn.Func0130.Rx.Udp.If.TwoPdusForSameSoCon</srcid><srcstatus/><internalId>1035</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0130.Rx.Udp.If.TwoSoConSamePdu</srcid><srcstatus/><internalId>1036</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0130.Rx.Udp.If.EnableServiceInstance</srcid><srcstatus/><internalId>1117</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0130.Rx.Udp.If.DisableServiceInstance</srcid><srcstatus/><internalId>1118</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0130.Rx.Udp.If.SwitchServiceInstance</srcid><srcstatus/><internalId>1119</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0130.Rx.Udp.If.ParallelServiceInstance</srcid><srcstatus/><internalId>1120</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0130.Rx.Udp.If.EnableSameServiceInstanceMultipleTimes</srcid><srcstatus/><internalId>1121</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0130.XdmCheck.MultiplePSI.NoTpApi</srcid><srcstatus/><internalId>1147</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0130.XdmCheck.MultiplePSI.NoRoutingGroupRef</srcid><srcstatus/><internalId>1148</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0130.XdmCheck.MultiplePSI.SameRoutingGroupRef</srcid><srcstatus/><internalId>1149</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0130.XdmCheck.MultiplePSI.NoSoConGroupRef</srcid><srcstatus/><internalId>1150</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0130.XdmCheck.MultiplePSI.SoAdRoutingGroupIsEnabledAtInit</srcid><srcstatus/><internalId>1151</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0130.XdmCheck.MultiplePSI.NoGlobalRoutingGroupAllowed</srcid><srcstatus/><internalId>1152</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>956</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="TcpTp Error Handling">
    <specobject>
      <id>SoAd.dsn.Func0140.TcpTpErrorHandling</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>1125</sourceline>
      <version>1</version>
      <description>
          Additionally to the AUTOSAR Requirement SWS_SoAd_00651 EB shall provide a refinement for
          this requirement.
          If Up_SoAdTpCopyTxData return with
          BUFREQ_E_NOT_OK for a TCP socket connection and data was already copied, SoAd shall
          &lt;ul&gt;
            &lt;li&gt;(a) disable further
            transmission or reception for this socket connection (i.e. new transmit requests shall
            be rejected with E_NOT_OK and received messages shall simply be discarded) and&lt;/li&gt;
            &lt;li&gt;(b) close the socket connection in the next SoAd_MainFunction().&lt;/li&gt;
          &lt;/ul&gt;
          If no data was copied yet SoAd shall discard the Transmission but retain the TCP
          socket connection.
        </description>
      <rationale>
          There are use cases where a TP transmission is started without actually copying data.
          e.g. Reset of Can ECU shall not close TCP connection from TCP Gateway to external tester.
        </rationale>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.dsn.Func0140.Tx.Tcp.Tp.NoDataSent</srcid><srcstatus/><internalId>1122</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0140.Tx.Tcp.Tp.DataSent.DisableFurtherCom</srcid><srcstatus/><internalId>1123</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0140.Tx.Tcp.Tp.DataSent.CloseSocketConnection</srcid><srcstatus/><internalId>1124</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00651</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>258</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>957</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="UDP Tx Buffer Pool">
    <specobject>
      <id>SoAd.dsn.Func0141.UdpTxBufferPool</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>1161</sourceline>
      <version>1</version>
      <description>
          SoAd shall optionally provide the functionality UDP Tx buffer pool. This includes
          &lt;ul&gt;
            &lt;li&gt;
              Configurable amount of buffers shared between socket connections per socket
              connection group.
            &lt;/li&gt;
            &lt;li&gt;
              Shadow buffering of PDU transmission requests if ongoing transmission on same socket
              connection.
            &lt;/li&gt;
          &lt;/ul&gt;
        </description>
      <rationale>
          The functionality is indented to share Tx buffers between socket connections which allows
          to reduce the the total number of buffers and RAM consumption.
        </rationale>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.dsn.Func0141.Tx.Udp.If.TriggerNever.BufferUnavailable</srcid><srcstatus/><internalId>1125</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0141.Tx.Udp.If.BufferUnavailable</srcid><srcstatus/><internalId>1126</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0141.Tx.Udp.If.UDPRetry.BufferUnavailable</srcid><srcstatus/><internalId>1127</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0141.Tx.Udp.If.ShadowBuffer.Unavailable</srcid><srcstatus/><internalId>1128</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0141.XdmCheck.BufferPool.MaxRange</srcid><srcstatus/><internalId>1153</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>958</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Specific Routing Groups">
    <specobject>
      <id>SoAd.dsn.Func0142.SpecificRoutingGroup</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>1190</sourceline>
      <version>1</version>
      <description>
          SoAd shall support specific routing groups which belong to a socket connection group to
          individually enable and disable socket routes and PDU routes on each connection of the
          group.
        </description>
      <rationale>
          The main use case for specific routing groups is SD to enable and disable subscribed
          services for each client individually.
        </rationale>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.dsn.Func0142.EnableSpecificRoutingGroup</srcid><srcstatus/><internalId>1129</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0142.DisableSpecificRoutingGroup</srcid><srcstatus/><internalId>1130</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0142.MixGlobalAndSpecificRoutingGroup</srcid><srcstatus/><internalId>1131</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>959</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Dtls Pooling">
    <specobject>
      <id>SoAd.dsn.Func0143.DtlsPooling</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>1211</sourceline>
      <version>1</version>
      <description>
          SoAd shall support the use of Dtls Pooling to support the use of TLS with the UDP Transport Protocol.
        </description>
      <furtherinfo>
          WRN.swurs.needscoverage.count - Top level requirement for this functionality.
          It is used to group all requirements belonging to this functionality and therefore requires a high number of coverage linkage.
        </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.dsn.Func0143.DtlsPooling.SoAdNotInitialized</srcid><srcstatus/><internalId>1037</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0143.DtlsPooling.RemoteAddrNullPtr</srcid><srcstatus/><internalId>1038</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0143.DtlsPooling.SocketIdInvalid</srcid><srcstatus/><internalId>1039</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0143.DtlsPooling.TcpSocketId</srcid><srcstatus/><internalId>1040</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0143.DtlsPooling.DomainInvalid</srcid><srcstatus/><internalId>1041</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0143.SoAd_DtlsConnectionStateChg.Dtls.Connecting.Match</srcid><srcstatus/><internalId>1132</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0143.SoAd_DtlsConnectionStateChg.Dtls.Connecting.NoMatch</srcid><srcstatus/><internalId>1133</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0143.SoAd_DtlsConnectionStateChg.Dtls.Closed</srcid><srcstatus/><internalId>1134</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0143.SoAd_DtlsConnectionStateChg.Dtls.Connected</srcid><srcstatus/><internalId>1135</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0143.DtlsClose</srcid><srcstatus/><internalId>1136</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0143.DtlsPooling.AutomaticSetup</srcid><srcstatus/><internalId>1155</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0143.DtlsPooling.Dtls_Not_With_Tcp</srcid><srcstatus/><internalId>1156</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0143.DtlsPooling.Dtls_UDP_Without_TlsDtls</srcid><srcstatus/><internalId>1157</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0143.DtlsPooling.Dtls_UDP_With_Tls_On_Connection</srcid><srcstatus/><internalId>1158</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0143.DtlsPooling.NoTlsInstance</srcid><srcstatus/><internalId>1159</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0143.DtlsPooling.TooFewTlsInstance</srcid><srcstatus/><internalId>1160</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0143.DtlsPooling.Dtls_UDP_With_Duplicated_DtlsRef</srcid><srcstatus/><internalId>1161</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>960</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Wildcard Check">
    <specobject>
      <id>SoAd.dsn.Func0144.WildCardCheck</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>1230</sourceline>
      <version>1</version>
      <description>
          SoAd shall support the use of an WildCardCheck for incoming Remote Addresses. Neither the
          Ip-Address nor the Port shall be zero.
        </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.dsn.Func0144.WildCardCheck.Checks</srcid><srcstatus/><internalId>1137</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>961</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Support for reporting security events to IdsM">
    <specobject>
      <id>SoAd.dsn.Func0145.SecurityEventReporting</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>1246</sourceline>
      <version>1</version>
      <description>
        SoAd shall report to the IdsM respective security events via the defined interface.
        &lt;ul&gt;
          &lt;li&gt;SOAD_SEV_DROP_MSG_RX_UDP_LENGTH&lt;/li&gt;
          &lt;li&gt;SOAD_SEV_DROP_MSG_RX_UDP_SOCKET&lt;/li&gt;
          &lt;li&gt;SOAD_SEV_DROP_PDU_RX_TCP&lt;/li&gt;
          &lt;li&gt;SOAD_SEV_DROP_PDU_RX_UDP&lt;/li&gt;
          &lt;li&gt;SOAD_SEV_REJECTED_TCP_CONNECTION&lt;/li&gt;
        &lt;/ul&gt;
      </description>
      <furtherinfo>
        WRN.swurs.needscoverage.count - Top level requirement for this functionality.
        It is used to group all requirements belonging to this functionality and therefore requires a high number of coverage linkage.
      </furtherinfo>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.ECUC_SoAd_00164</srcid><srcstatus/><internalId>380</internalId></linkedfrom><linkedfrom><srcid>SoAd.ECUC_SoAd_00165</srcid><srcstatus/><internalId>381</internalId></linkedfrom><linkedfrom><srcid>SoAd.ECUC_SoAd_00166</srcid><srcstatus/><internalId>382</internalId></linkedfrom><linkedfrom><srcid>SoAd.ECUC_SoAd_00167</srcid><srcstatus/><internalId>383</internalId></linkedfrom><linkedfrom><srcid>SoAd.ECUC_SoAd_00168</srcid><srcstatus/><internalId>384</internalId></linkedfrom><linkedfrom><srcid>SoAd.ECUC_SoAd_00169</srcid><srcstatus/><internalId>385</internalId></linkedfrom><linkedfrom><srcid>SoAd.ECUC_SoAd_00170</srcid><srcstatus/><internalId>386</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00763</srcid><srcstatus/><internalId>388</internalId></linkedfrom><linkedfrom><srcid>SoAd.SWS_SoAd_00764</srcid><srcstatus/><internalId>389</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0145.SecurityEventReporting.No_References</srcid><srcstatus/><internalId>1163</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0145.SecurityEventReporting.Invalid_Reference</srcid><srcstatus/><internalId>1164</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0145.SecurityEventReporting.Duplicated_Reference</srcid><srcstatus/><internalId>1165</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00692</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>292</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>962</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Functionality requirements: SoAd_IfTransmit() Fanout">
    <specobject>
      <id>SoAd.dsn.Func0146.Fanout</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>1278</sourceline>
      <version>1</version>
      <description>
        SoAd_IfTransmit() shall support transmission even if not all clients are
        connected.
      </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.dsn.Func0146.Fanout.FanOutRetValueOrControlled</srcid><srcstatus/><internalId>1104</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>963</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Runtime optimization">
    <specobject>
      <id>SoAd.dsn.RuntimeOpt.Rx</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>2290</sourceline>
      <version>1</version>
      <description>
        It shall be guaranteed that the code is optimized to reduce required runtime in case of
        reception.
      </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.Dsn.ExtractPduHeader.BinarySearch</srcid><srcstatus/><internalId>967</internalId></linkedfrom><linkedfrom><srcid>SoAd.Dsn.ExtractPduHeader.BinarySearch.IndexOutOfBoundsProtection</srcid><srcstatus/><internalId>968</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>964</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.RuntimeOpt.MainFunctionIdle</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>2303</sourceline>
      <version>1</version>
      <description>
        The main function execution time shall be reduced to a minimum when there is no trigger
        to execute a task during main function.
        Global trigger flags and a timeout timestamp shall be used instead of state and condition
        polling to ensure a minimum main function idle execution time.
      </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.dsn.IndicationBitMaps</srcid><srcstatus/><internalId>969</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.UdpTimeoutHandling</srcid><srcstatus/><internalId>970</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>965</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Remote Address Handling Top-level Requirement">
    <specobject>
      <id>SoAd.dsn.RemoteAddressHandling</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>2351</sourceline>
      <version>1</version>
      <description>
            SoAd shall ensure that a remote address of a socket connection which is still needed by an
            upper layer must not be released.
          </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.Uninit</srcid><srcstatus/><internalId>1093</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.Udp.RemoteAddrAndPort_WildCards</srcid><srcstatus/><internalId>1094</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.InvalidSoConId</srcid><srcstatus/><internalId>1095</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.Udp.UsedSetRemoteAddr</srcid><srcstatus/><internalId>1096</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.RemoteAddressHandling.SetRemoteAddr.Udp.LockState</srcid><srcstatus/><internalId>1097</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.Tcp.UsedSetRemoteAddr</srcid><srcstatus/><internalId>1098</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.RxIndication</srcid><srcstatus/><internalId>1099</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.TcpServer</srcid><srcstatus/><internalId>1100</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.TcpClient</srcid><srcstatus/><internalId>1101</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.RemoteAddressHandling.KeepRemoteAddrAfterRestartClose</srcid><srcstatus/><internalId>1102</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>966</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="PduHeaderId binary search">
    <specobject>
      <id>SoAd.Dsn.ExtractPduHeader.BinarySearch</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7244</sourceline>
      <version>1</version>
      <description>
            A binary search algorithm shall be used to match the PduHeaderId received in
            SoAd_RxIndication to reduce CPU load.
          </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_07_Rx.c_3843</srcid><srcstatus/><internalId>873</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.RuntimeOpt.Rx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>964</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>967</internalId></specobject>
    <specobject>
      <id>SoAd.Dsn.ExtractPduHeader.BinarySearch.IndexOutOfBoundsProtection</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7263</sourceline>
      <version>1</version>
      <description>
            It shall be guaranteed, that the binary search algorithm cannot cause an index out
            of bounds access when receiving an invalid PduHeaderId.
          </description>
      <verifycrit>
            * EC valid: OC
              * Test cases:
                * Ts_SoAd_RxIndication_PduR_Udp_BinarySearch_UnderflowProtection
              * Expected behavior:
                * DET Error shall be raised with SOAD_E_INV_PDUHEADER_ID
              * Input parameters:
                * SoCon with SocketRouteFirstId = 0
                * PduHeaderId &amp;gt; 0
                * SocketRoute.PduHeaderId &amp;gt; PduHeaderId received with SoAd_RxIndication
            * EC valid: OC
              * Test cases:
                * tbd
              * Expected behavior:
                * DET Error shall be raised with SOAD_E_INV_PDUHEADER_ID
              * Input parameters:
                * SoCon with SocketRouteFirstId+SocketRouteCnt = 65535
                * PduHeaderId smaller than 4294967295
                * SocketRoute.PduHeaderId is smaller than PduHeaderId received with SoAd_RxIndication
          </verifycrit>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_07_Rx.c_3857</srcid><srcstatus/><internalId>874</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Ts_SoAd_RxIndication_PduR_Udp_BinarySearch_UnderflowProtection</srcid><srcstatus/><internalId>1877</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.RuntimeOpt.Rx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>964</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>968</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>SoAd.dsn.IndicationBitMaps</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7317</sourceline>
      <version>1</version>
      <description>
          For great number of items that need to be checked for required actions
          a &lt;code&gt;uint32&lt;/code&gt; bit map shall be used which indicate a required action by setting
          a bit per item. The item shall only be accessed if the corresponding bit was set.
        </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_1455</srcid><srcstatus/><internalId>824</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_2611</srcid><srcstatus/><internalId>842</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_2780</srcid><srcstatus/><internalId>843</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_3377</srcid><srcstatus/><internalId>852</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_3415</srcid><srcstatus/><internalId>853</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_2663</srcid><srcstatus/><internalId>894</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.RuntimeOpt.MainFunctionIdle</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>965</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>969</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>SoAd.dsn.UdpTimeoutHandling</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7348</sourceline>
      <version>1</version>
      <description>
          If an UdpAliveSupervisionTimer is started in case of a Rx Indication or an
          UdpAliveTimeout occurred. The timestamp value shall be updated to the next occurring
          UdpAliveTimeout value.
        </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_03_Lib.c_314</srcid><srcstatus/><internalId>802</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SoAd_03_Lib.c_412</srcid><srcstatus/><internalId>803</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_142_UdpAlive_Supervision_NextUdpAliveTimeout_1</srcid><srcstatus/><internalId>1559</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_143_UdpAlive_Supervision_NextUdpAliveTimeout_2</srcid><srcstatus/><internalId>1560</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_144_UdpAlive_Supervision_NextUdpAliveTimeout_3</srcid><srcstatus/><internalId>1561</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_145_UdpAlive_Supervision_NextUdpAliveTimeout_4</srcid><srcstatus/><internalId>1562</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_146_UdpAlive_Supervision_NextUdpAliveTimeout_5</srcid><srcstatus/><internalId>1563</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_147_UdpAlive_Supervision_NextUdpAliveTimeout_6</srcid><srcstatus/><internalId>1564</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_148_UdpAlive_Supervision_NextUdpAliveTimeout_7</srcid><srcstatus/><internalId>1565</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_149_UdpAlive_Supervision_NextUdpAliveTimeout_8</srcid><srcstatus/><internalId>1566</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_150_UdpAlive_Supervision_NextUdpAliveTimeout_9</srcid><srcstatus/><internalId>1567</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.RuntimeOpt.MainFunctionIdle</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>965</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>970</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>SoAd.dsn.Func0102.Tx.If.Trigger_Never.OversizedPDU</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7378</sourceline>
      <version>1</version>
      <description>
          If SoAd_IfTransmit() is called to transmit a TRIGGER_NEVER PDU with a SduLength larger
          than the configured nPduUdpTxBuffer size, the PDU shall be transmitted immediately.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_nPduUdpTx_TRIGGER_NEVER_PDU_OVERSIZED</srcid><srcstatus/><internalId>1849</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_2258</srcid><srcstatus/><internalId>837</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Udp.Tx.If.nPduBuffer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>948</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>971</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0102.Tx.If.Trigger_Always.OversizedPDU</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7398</sourceline>
      <version>1</version>
      <description>
          If SoAd_IfTransmit() is called to transmit a TRIGGER_ALWAYS PDU with a SduLength larger
          than the configured nPduUdpTxBuffer size, the PDU shall be transmitted immediately.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_nPduUdpTx_TRIGGER_ALWAYS_PDU_OVERSIZED</srcid><srcstatus/><internalId>1850</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_2279</srcid><srcstatus/><internalId>838</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Udp.Tx.If.nPduBuffer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>948</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>972</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0102.Tx.If.OversizedPDU.NotOK</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7418</sourceline>
      <version>1</version>
      <description>
          If SoAd_IfTransmit() is called to transmit PDU with a SduLength larger
          than the configured nPduUdpTxBuffer size and TcpIp rejects transmission, SoAd shall
          return E_NOT_OK.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_nPduUdpTx_TRIGGER_NEVER_PDU_OVERSIZED</srcid><srcstatus/><internalId>1849</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_nPduUdpTx_TRIGGER_ALWAYS_PDU_OVERSIZED</srcid><srcstatus/><internalId>1850</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_2470</srcid><srcstatus/><internalId>840</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Udp.Tx.If.nPduBuffer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>948</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>973</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0102.Tx.If.TriggerTxBufferTransmission</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7439</sourceline>
      <version>1</version>
      <description>
          If SoAd_IfTransmit() for a TRIGGER_NEVER PDU is called for a socket connection
          which already contains PDUs in the buffer and the TRIGGER_NEVER PDU does not fit into
          the remaining buffer, SOAd shall transmit the buffered PDUs and store the
          TRIGGER_NEVER PDU.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_15_nPduUdpTx_TriggerTransmission</srcid><srcstatus/><internalId>1860</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Udp.Tx.If.nPduBuffer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>948</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>974</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>SoAd.dsn.Func0102.Tx.If.Interrupt.StoreToBuffer.SameSoCon</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7474</sourceline>
      <version>1</version>
      <description>
          If TcpIp_UdpTransmit() is called in context of SoAd_IfTransmit() and the call gets
          interrupted by SoAd_IfTransmit() for the same UDP socket, same SoCon but another PDU,
          then the interrupted PDU shall be stored in the buffer to be transmitted later.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_131_Udp_IfTransmit_Interrupt_SameSoCon</srcid><srcstatus/><internalId>1548</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_2095</srcid><srcstatus/><internalId>830</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Udp.Tx.If.nPduBuffer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>948</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>975</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0102.Tx.If.Interrupt.StoreToBuffer.OtherSoCon</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7495</sourceline>
      <version>1</version>
      <description>
          If TcpIp_UdpTransmit() is called in context of SoAd_IfTransmit() and the call gets
          interrupted by SoAd_IfTransmit() for the same UDP socket but another PDU and another
          SoCon, then the interrupted PDU shall be stored in the buffer to be transmitted later.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_130_Udp_IfTransmit_Interrupt_SameUdpSocket</srcid><srcstatus/><internalId>1547</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_2113</srcid><srcstatus/><internalId>832</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Udp.Tx.If.nPduBuffer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>948</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>976</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0102.Tx.If.Interrupt.StoreToBuffer.MainFuncContext</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7516</sourceline>
      <version>1</version>
      <description>
          If TcpIp_UdpTransmit() is called in context of SoAd_MainFunction() and the call gets
          interrupted by SoAd_IfTransmit() for the same UDP socket but another PDU, then
          the interrupted PDU shall be stored in the buffer to be transmitted later.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_138_Udp_IfTx_MainFunction_Interrupt_IfTransmit</srcid><srcstatus/><internalId>1555</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_139_Udp_IfTx_MainFunction_Interrupt_IfTransmit2</srcid><srcstatus/><internalId>1556</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_140_Udp_IfTransmit_MultiPdusInShadowBuffer</srcid><srcstatus/><internalId>1557</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_176_Udp_IfTransmit_Interrupt_SoConGroup_TriggerAlways_Only</srcid><srcstatus/><internalId>1599</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_15_nPduUdpT_BufferWhileSocketOccupied</srcid><srcstatus/><internalId>1858</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_2126</srcid><srcstatus/><internalId>833</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Udp.Tx.If.nPduBuffer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>948</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>977</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0102.Tx.If.Interrupt.LastIsBest_NotOk</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7537</sourceline>
      <version>1</version>
      <description>
          Shadow buffering is not supported for LAST_IS_BEST. Interrupting LAST_IS_BEST PDUs
          for same SoCon get rejected.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_141_Udp_IfTransmit_LastIsBest_ShadowBuffer_NotOk</srcid><srcstatus/><internalId>1558</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Udp.Tx.If.nPduBuffer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>948</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>978</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="UDP State Machine Requirements">
    <specobject>
      <id>SoAd.EB.UdpSM_CLOSED_Connecting</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7615</sourceline>
      <version>1</version>
      <description>
          The call of trigger function SoAd_01_UdpSM_Connecting() in the socket state CLOSED, will
          bring the socket to state CONNECTING. On entry of this state SoAd reports
          SOAD_SOCON_RECONNECT to the upper layer and binds the socket connection to a TcpIp socket.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp02001_Udp_CLOSED_Connecting</srcid><srcstatus/><internalId>1923</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>979</internalId></specobject>
    <specobject>
      <id>SoAd.EB.UdpSM_CONNECTING_Closed</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7630</sourceline>
      <version>1</version>
      <description>
          The call of trigger function SoAd_01_UdpSM_Closed() in the socket state CONNECTING, will
          bring the socket to state RESTART.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp02002_Udp_CONNECTING_Closed</srcid><srcstatus/><internalId>1924</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>980</internalId></specobject>
    <specobject>
      <id>SoAd.EB.UdpSM_CONNECTING_Error</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7644</sourceline>
      <version>1</version>
      <description>
          The call of trigger function SoAd_01_UdpSM_Error() in the socket state CONNECTING, will
          bring the socket to state SHUTDOWN. On entry of this state SoAd will call TcpIp_Close()
          with parameter Abort set to FALSE to close the socket connection.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp02003_Udp_CONNECTING_Error</srcid><srcstatus/><internalId>1925</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00642.a.UDP_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>435</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>981</internalId></specobject>
    <specobject>
      <id>SoAd.EB.UdpSM_CONNECTING_Connected</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7665</sourceline>
      <version>1</version>
      <description>
          The call of trigger function SoAd_01_UdpSM_Connected() in the socket state CONNECTING, will
          bring the socket to state ONLINE. On entry of this state SoAd reports SOAD_SOCON_ONLINE to
          the upper layer.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp02004_Udp_CONNECTING_Connected</srcid><srcstatus/><internalId>1926</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>982</internalId></specobject>
    <specobject>
      <id>SoAd.EB.UdpSM_CONNECTING_UpClosing</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7680</sourceline>
      <version>1</version>
      <description>
          The call of trigger function SoAd_01_UdpSM_UpClosing() in the socket state CONNECTING, will
          bring the socket to state CLOSING. On entry of this state SoAd reports SOAD_SOCON_OFFLINE
          to the upper layer and the socket connection will be closed.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp02005_Udp_CONNECTING_UpClosing</srcid><srcstatus/><internalId>1927</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>983</internalId></specobject>
    <specobject>
      <id>SoAd.EB.UdpSM_SHUTDOWN_Closed</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7695</sourceline>
      <version>1</version>
      <description>
          The call of trigger function SoAd_01_UdpSM_Closed() in the socket state SHUTDOWN, will
          bring the socket to state RESTART.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp02006_Udp_SHUTDOWN_Closed</srcid><srcstatus/><internalId>1928</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>984</internalId></specobject>
    <specobject>
      <id>SoAd.EB.UdpSM_SHUTDOWN_UpClosing</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7709</sourceline>
      <version>1</version>
      <description>
          The call of trigger function SoAd_01_UdpSM_UpClosing() in the socket state SHUTDOWN, will
          bring the socket to state CLOSING. On entry of this state SoAd reports SOAD_SOCON_OFFLINE
          to the upper layer.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp02007_Udp_SHUTDOWN_UpClosing</srcid><srcstatus/><internalId>1929</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>985</internalId></specobject>
    <specobject>
      <id>SoAd.EB.UdpSM_RESTART_UpClosing</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7724</sourceline>
      <version>1</version>
      <description>
          The call of trigger function SoAd_01_UdpSM_UpClosing() in the socket state RESTART, will
          bring the socket to state CLOSED. On entry of this state SoAd reports SOAD_SOCON_OFFLINE
          to the upper layer.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp02008_Udp_RESTART_UpClosing</srcid><srcstatus/><internalId>1930</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>986</internalId></specobject>
    <specobject>
      <id>SoAd.EB.UdpSM_RESTART_Connecting</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7739</sourceline>
      <version>1</version>
      <description>
          The call of trigger function SoAd_01_UdpSM_Connecting() in the socket state RESTART, will
          bring the socket to state CONNECTING. On entry of this state SoAd binds the socket
          connection to a TcpIp socket via TcpIp_GetSocket() and TcpIp_Bind().
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_53b_RestartMultipleSockets</srcid><srcstatus/><internalId>1464</internalId></linkedfrom><linkedfrom><srcid>SoAd_Imp02009_Udp_RESTART_Connecting</srcid><srcstatus/><internalId>1931</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>987</internalId></specobject>
    <specobject>
      <id>SoAd.EB.UdpSM_RESTART_Closed</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7754</sourceline>
      <version>1</version>
      <description>
          The call of trigger function SoAd_01_UdpSM_Closed() in the socket state ONLINE, will
          bring the socket to state RESTART. On entry of this state SoAd reports SOAD_SOCON_RECONNECT
          to the upper layer.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp02010_Udp_ONLINE_Closed</srcid><srcstatus/><internalId>1932</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>988</internalId></specobject>
    <specobject>
      <id>SoAd.EB.UdpSM_ONLINE_Error</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7769</sourceline>
      <version>1</version>
      <description>
          The call of trigger function SoAd_01_UdpSM_Error() in the socket state ONLINE, will
          bring the socket to state SHUTDOWN. On entry of this state SoAd reports
          SOAD_SOCON_RECONNECT to the upper layer and TcpIp_Close() will be called
          with parameter Abort set to FALSE to close the socket connection.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp02011_Udp_ONLINE_Error</srcid><srcstatus/><internalId>1933</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00642.a.UDP_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>435</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>989</internalId></specobject>
    <specobject>
      <id>SoAd.EB.UdpSM_ONLINE_Disconnected</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7791</sourceline>
      <version>1</version>
      <description>
          The call of trigger function SoAd_01_UdpSM_Disconnected() in the socket state ONLINE, will
          bring the socket to state CONNECTING. On entry of this state SoAd reports
          SOAD_SOCON_RECONNECT to the upper layer and binds the socket connection to a TcpIp socket
          via TcpIp_GetSocket() and TcpIp_Bind().
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp02012_Udp_ONLINE_Disconnected</srcid><srcstatus/><internalId>1934</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>990</internalId></specobject>
    <specobject>
      <id>SoAd.EB.UdpSM_ONLINE_UpClosingPre</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7807</sourceline>
      <version>1</version>
      <description>
          The call of trigger function SoAd_01_UdpSM_UpClosingPre() in the socket state ONLINE,
          will bring the socket to state PREPAREOFFLINE under all of the following conditions:
          &lt;ul&gt;
            &lt;li&gt;Trigger is executed in context of SoAd_CloseSoCon().&lt;/li&gt;
          &lt;/ul&gt;
          Any call of SoAd_GetSoConMode() for a socket connection in this state shall return
          SOAD_SOCON_WAITOFFLINE.
        </description>
      <comment>See dev.SoAd.SOAD_SOCON_WAITOFFLINE</comment>
      <verifycrit>
          After the next SoAd_MainFunction() the TCP socket connection shall be closed.
        </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp02013_Udp_ONLINE_UpClosingPre</srcid><srcstatus/><internalId>1935</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_01_UdpSM.c_467</srcid><srcstatus/><internalId>797</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>991</internalId></specobject>
    <specobject>
      <id>SoAd.EB.UdpSM_PREPAREOFFLINE_UpClosing</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7831</sourceline>
      <version>1</version>
      <description>
          The call of trigger function SoAd_01_UdpSM_UpClosing() in the socket state
          PREPAREOFFLINE, will bring the socket to state CLOSING under all of the following
          conditions:
          &lt;ul&gt;
            &lt;li&gt;Trigger is executed in context of SoAd_MainFunction().&lt;/li&gt;
            &lt;li&gt;
              No reception or transmission is in progress or SoAd_CloseSoCon() was called with
              Abort = TRUE.
            &lt;/li&gt;
          &lt;/ul&gt;
          On entry of this state SoAd reports SOAD_SOCON_OFFLINE
          to the upper layer and close the socket connection.
        </description>
      <verifycrit>
          It shall be verified that in state PREPAREOFFLINE
          &lt;ul&gt;
            &lt;li&gt;
              SOAD_SOCON_OFFLINE is reported in context of next main function as soon as all
              buffered receptions and transmissions are finished.
            &lt;/li&gt;
            &lt;li&gt;
              SOAD_SOCON_OFFLINE is reported in context of next main function if SoAd_CloseSoCon()
              was called with Abort = TRUE.
            &lt;/li&gt;
          &lt;/ul&gt;
        </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp02021_Udp_PREPAREOFFLINE_UpClosing</srcid><srcstatus/><internalId>1943</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_01_UdpSM.c_400</srcid><srcstatus/><internalId>796</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>992</internalId></specobject>
    <specobject>
      <id>SoAd.EB.UdpSM_PREPAREOFFLINE_Closed</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7869</sourceline>
      <version>1</version>
      <description>
          The call of trigger function SoAd_01_UdpSM_Closed() in the socket state PREPAREOFFLINE,
          will bring the socket to state CLOSED.
          On entry of this state SoAd reports SOAD_SOCON_OFFLINE
          to the upper layer and close the socket connection.
        </description>
      <verifycrit>
          It shall be verified that in state PREPAREOFFLINE a call of
          SoAd_TcpIpEvent(TCPIP_UDP_CLOSED) which triggers SoAd_01_UdpSM_Closed() will report
          SOAD_SOCON_OFFLINE to the upper layer.
        </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp02022_Udp_PREPAREOFFLINE_Closed</srcid><srcstatus/><internalId>1944</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_01_UdpSM.c_259</srcid><srcstatus/><internalId>793</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>993</internalId></specobject>
    <specobject>
      <id>SoAd.EB.UdpSM_PREPAREOFFLINE_InvalidTriggers</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7891</sourceline>
      <version>1</version>
      <description>
          The call of trigger functions other than SoAd_01_UdpSM_UpClosing() and
          SoAd_01_UdpSM_Closed(), will have no effect in the state PREPAREOFFLINE.
        </description>
      <verifycrit>
          It shall be verified that other trigger conditions have no impact in the
          state PREPAREOFFLINE.
        </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp02023_Udp_WAITOFFLINE_Invalid_Triggers</srcid><srcstatus/><internalId>1945</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_01_UdpSM.c_190</srcid><srcstatus/><internalId>792</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SoAd_01_UdpSM.c_310</srcid><srcstatus/><internalId>794</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SoAd_01_UdpSM.c_363</srcid><srcstatus/><internalId>795</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SoAd_01_UdpSM.c_473</srcid><srcstatus/><internalId>798</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SoAd_01_UdpSM.c_531</srcid><srcstatus/><internalId>799</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>994</internalId></specobject>
    <specobject>
      <id>SoAd.EB.UdpSM_CLOSING_Closed</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7910</sourceline>
      <version>1</version>
      <description>
          The call of trigger function SoAd_01_UdpSM_Closed() in the socket state CLOSING, will
          bring the socket to state CLOSED.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp02014_Udp_CLOSING_Closed</srcid><srcstatus/><internalId>1936</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>995</internalId></specobject>
    <specobject>
      <id>SoAd.EB.UdpSM_CLOSED_InvalidTriggers</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7924</sourceline>
      <version>1</version>
      <description>
          The call of trigger functions SoAd_01_UdpSM_UpClosing(), SoAd_01_UdpSM_Closed(),
          SoAd_01_UdpSM_Error(), SoAd_01_UdpSM_Connected() or SoAd_01_UdpSM_Disconnected()
          in the socket state CLOSED, will have no effect.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp02015_Udp_CLOSED_Invalid_Triggers</srcid><srcstatus/><internalId>1937</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>996</internalId></specobject>
    <specobject>
      <id>SoAd.EB.UdpSM_CLOSING_InvalidTriggers</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7939</sourceline>
      <version>1</version>
      <description>
          The call of trigger functions SoAd_01_UdpSM_UpClosing(), SoAd_01_UdpSM_Connecting(),
          SoAd_01_UdpSM_Error(), SoAd_01_UdpSM_Connected() or SoAd_01_UdpSM_Disconnected()
          in the socket state CLOSING, will have no effect.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp02016_Udp_CLOSING_Invalid_Triggers</srcid><srcstatus/><internalId>1938</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>997</internalId></specobject>
    <specobject>
      <id>SoAd.EB.UdpSM_ONLINE_InvalidTriggers</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7954</sourceline>
      <version>1</version>
      <description>
          The call of trigger functions SoAd_01_UdpSM_Connecting() or SoAd_01_UdpSM_Connected()
          in the socket state ONLINE, will have no effect.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp02017_Udp_Online_Invalid_Triggers</srcid><srcstatus/><internalId>1939</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>998</internalId></specobject>
    <specobject>
      <id>SoAd.EB.UdpSM_RESTART_InvalidTriggers</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7968</sourceline>
      <version>1</version>
      <description>
          The call of trigger functions SoAd_01_UdpSM_Error(), SoAd_01_UdpSM_Connected(),
          SoAd_01_UdpSM_Disconnected() or SoAd_01_UdpSM_Closed()
          in the socket state RESTART, will have no effect.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp02018_Udp_RESTART_Invalid_Triggers</srcid><srcstatus/><internalId>1940</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>999</internalId></specobject>
    <specobject>
      <id>SoAd.EB.UdpSM_SHUTDOWN_InvalidTriggers</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7983</sourceline>
      <version>1</version>
      <description>
          The call of trigger functions SoAd_01_UdpSM_Connecting(), SoAd_01_UdpSM_Error(),
          SoAd_01_UdpSM_Connected() or SoAd_01_UdpSM_Disconnected()
          in the socket state SHUTDOWN, will have no effect.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp02019_Udp_SHUTDOWN_Invalid_Triggers</srcid><srcstatus/><internalId>1941</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1000</internalId></specobject>
    <specobject>
      <id>SoAd.EB.UdpSM_CONNECTING_InvalidTriggers</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>7998</sourceline>
      <version>1</version>
      <description>
          The call of trigger functions SoAd_01_UdpSM_Connecting() or SoAd_01_UdpSM_Disconnected()
          in the socket state CONNECTING, will have no effect.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp02020_Udp_CONNECTING_Invalid_Triggers</srcid><srcstatus/><internalId>1942</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1001</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="TCP State Machine Requirements">
    <specobject>
      <id>SoAd.EB.TcpSM_TriggerConnecting_TcpClient</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>8030</sourceline>
      <version>1</version>
      <description>
          SoAd TCP state machine shall trigger the function SoAd_04_TcpSM_Connecting()
          for a TCP client if following preconditions are fulfilled:
          *) Local IP address is assigned and valid.
          *) Socket connection is marked as open.
          *) Remote address exists
          *) Remote address does not contain a wild card.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_TcpClient_WildcardRemoteAddr</srcid><srcstatus/><internalId>1670</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_2947</srcid><srcstatus/><internalId>895</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1002</internalId></specobject>
    <specobject>
      <id>SoAd.EB.TcpSM_TriggerConnecting_TcpServer</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>8049</sourceline>
      <version>1</version>
      <description>
          SoAd TCP state machine shall trigger the function SoAd_04_TcpSM_Connecting()
          for a TCP client if following preconditions are fulfilled:
          *) Local IP address is assigned and valid.
          *) Socket connection is marked as open.
          *) Remote address exists
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_12_Tcp_OpenedListenSocket</srcid><srcstatus/><internalId>1421</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_2948</srcid><srcstatus/><internalId>896</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1003</internalId></specobject>
    <specobject>
      <id>SoAd.EB.TcpSM_CLOSED_Connecting</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>8067</sourceline>
      <version>1</version>
      <description>
          The call of trigger function SoAd_04_TcpSM_Connecting() in the socket state CLOSED, will
          bring the socket to state CONNECTING. For the TCP servers, on entry of this state SoAd
          shall get an appropriate socket from TcpIp, bind it to the local address and port, change
          the socket specific parameters and open a listen socket(only if one does not already
          exists).
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp03001_Tcp_CLOSED_Connecting</srcid><srcstatus/><internalId>1946</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1004</internalId></specobject>
    <specobject>
      <id>SoAd.EB.TcpSM_CONNECTING_Closed</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>8084</sourceline>
      <version>1</version>
      <description>
          The call of trigger function SoAd_04_TcpSM_Closed() in the socket state CONNECTING, will
          bring the socket to state RESTART.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp03002_Tcp_CONNECTING_Closed</srcid><srcstatus/><internalId>1947</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1005</internalId></specobject>
    <specobject>
      <id>SoAd.EB.TcpSM_CONNECTING_LoClosing</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>8098</sourceline>
      <version>1</version>
      <description>
          The call of trigger function SoAd_04_TcpSM_LoClosing() in the socket state CONNECTING, will
          bring the socket to state SHUTDOWN. On entry of this state SoAd shall call TcpIp_Close()
          with parameter Abort set to FALSE to close the socket connection.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp03003_Tcp_CONNECTING_LoClosing</srcid><srcstatus/><internalId>1948</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00642.a.TCP_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>432</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1006</internalId></specobject>
    <specobject>
      <id>SoAd.EB.TcpSM_CONNECTING_Connected</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>8119</sourceline>
      <version>1</version>
      <description>
          The call of trigger function SoAd_04_TcpSM_Connected() in the socket state CONNECTING, will
          bring the socket to state ONLINE. If header mode is enabled, on entry of this state SoAd
          shall call PduR_SoAdTpStartOfReception() to signalize start of reception.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp03004_Tcp_CONNECTING_Connected</srcid><srcstatus/><internalId>1949</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1007</internalId></specobject>
    <specobject>
      <id>SoAd.EB.TcpSM_CONNECTING_UpClosing</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>8134</sourceline>
      <version>1</version>
      <description>
          The call of trigger function SoAd_04_TcpSM_UpClosing() in the socket state CONNECTING, will
          bring the socket to state ONLINE. On entry of this state SoAd shall close the
          socket connection.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp03005_Tcp_CONNECTING_UpClosing</srcid><srcstatus/><internalId>1950</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1008</internalId></specobject>
    <specobject>
      <id>SoAd.EB.TcpSM_SHUTDOWN_Closed</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>8149</sourceline>
      <version>1</version>
      <description>
          The call of trigger function SoAd_04_TcpSM_Closed() in the socket state SHUTDOWN, will
          bring the socket to state RESTART.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp03006_Tcp_SHUTDOWN_Closed</srcid><srcstatus/><internalId>1951</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1009</internalId></specobject>
    <specobject>
      <id>SoAd.EB.TcpSM_SHUTDOWN_UpClosing</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>8163</sourceline>
      <version>1</version>
      <description>
          The call of trigger function SoAd_04_TcpSM_UpClosing() in the socket state SHUTDOWN, will
          bring the socket to state CLOSING.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp03007_Tcp_SHUTDOWN_UpClosing</srcid><srcstatus/><internalId>1952</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1010</internalId></specobject>
    <specobject>
      <id>SoAd.EB.TcpSM_RESTART_UpClosing</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>8177</sourceline>
      <version>1</version>
      <description>
          The call of trigger function SoAd_04_TcpSM_UpClosing() in the socket state RESTART, will
          bring the socket to state CLOSED.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp03008_Tcp_RESTART_UpClosing</srcid><srcstatus/><internalId>1953</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1011</internalId></specobject>
    <specobject>
      <id>SoAd.EB.TcpSM_RESTART_Connecting</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>8191</sourceline>
      <version>1</version>
      <description>
          The call of trigger function SoAd_04_TcpSM_Connecting() in the socket state RESTART, will
          bring the socket to state CONNECTING.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp03009_Tcp_RESTART_Connecting</srcid><srcstatus/><internalId>1954</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1012</internalId></specobject>
    <specobject>
      <id>SoAd.EB.TcpSM_ONLINE_Closed</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>8205</sourceline>
      <version>1</version>
      <description>
          The call of trigger function SoAd_04_TcpSM_Closed() in the socket state ONLINE, will
          bring the socket to state RESTART. If header mode is enabled, on entry of this state SoAd
          shall call PduR_SoAdTpRxIndication() to signalize end of reception.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp03010_Tcp_ONLINE_Closed</srcid><srcstatus/><internalId>1955</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1013</internalId></specobject>
    <specobject>
      <id>SoAd.EB.TcpSM_ONLINE_LoClosing</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>8220</sourceline>
      <version>1</version>
      <description>
          The call of trigger function SoAd_04_TcpSM_LoClosing() in the socket state ONLINE, will
          bring the socket to state SHUTDOWN. If header mode is enabled, on entry of this state SoAd
          shall call PduR_SoAdTpRxIndication() to signalize end of reception and close the
          socket connection via TcpIp_Close() with parameter Abort set to FALSE.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp03011_Tcp_ONLINE_LoClosing</srcid><srcstatus/><internalId>1956</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00642.a.TCP_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>432</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1014</internalId></specobject>
    <specobject>
      <id>SoAd.EB.TcpSM_ONLINE_UpClosingPre</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>8242</sourceline>
      <version>1</version>
      <description>
          The call of trigger function SoAd_01_TcpSM_UpClosingPre() in the socket state ONLINE,
          will bring the socket to state PREPAREOFFLINE under all of the following conditions:
          &lt;ul&gt;
            &lt;li&gt;Trigger is executed in context of SoAd_CloseSoCon().&lt;/li&gt;
          &lt;/ul&gt;
          Any call of SoAd_GetSoConMode() for a socket connection in this state shall return
          SOAD_SOCON_WAITOFFLINE.
        </description>
      <comment>See dev.SoAd.SOAD_SOCON_WAITOFFLINE</comment>
      <verifycrit>
          After the next SoAd_MainFunction() the TCP socket connection shall be closed.
        </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp03012_Tcp_ONLINE_UpClosingPre</srcid><srcstatus/><internalId>1957</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_04_TcpSM.c_473</srcid><srcstatus/><internalId>809</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1015</internalId></specobject>
    <specobject>
      <id>SoAd.EB.TcpSM_PREPAREOFFLINE_UpClosing</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>8266</sourceline>
      <version>1</version>
      <description>
          The call of trigger function SoAd_01_TcpSM_UpClosing() in the socket state
          PREPAREOFFLINE, will bring the socket to state CLOSING under all of the following
          conditions:
          &lt;ul&gt;
            &lt;li&gt;Trigger is executed in context of SoAd_MainFunction().&lt;/li&gt;
            &lt;li&gt;
              No reception or transmission is in progress or SoAd_CloseSoCon() was called with
              Abort = TRUE.
            &lt;/li&gt;
          &lt;/ul&gt;
          On entry of this state SoAd reports SOAD_SOCON_OFFLINE
          to the upper layer and close the socket connection.
        </description>
      <verifycrit>
          It shall be verified that in state PREPAREOFFLINE
          &lt;ul&gt;
            &lt;li&gt;
              SOAD_SOCON_OFFLINE is reported in context of next main function as soon as all
              buffered receptions and transmissions are finished.
            &lt;/li&gt;
            &lt;li&gt;
              SOAD_SOCON_OFFLINE is reported in context of next main function if SoAd_CloseSoCon()
              was called with Abort = TRUE.
            &lt;/li&gt;
          &lt;/ul&gt;
        </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp03020_Tcp_PREPAREOFFLINE_UpClosing</srcid><srcstatus/><internalId>1965</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_04_TcpSM.c_353</srcid><srcstatus/><internalId>807</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1016</internalId></specobject>
    <specobject>
      <id>SoAd.EB.TcpSM_PREPAREOFFLINE_Closed</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>8304</sourceline>
      <version>1</version>
      <description>
          The call of trigger function SoAd_01_TcpSM_Closed() in the socket state PREPAREOFFLINE,
          will bring the socket to state CLOSED.
          On entry of this state SoAd reports SOAD_SOCON_OFFLINE
          to the upper layer and close the socket connection.
        </description>
      <verifycrit>
          It shall be verified that in state PREPAREOFFLINE a call of
          SoAd_TcpIpEvent(TCPIP_TCP_CLOSED) which triggers SoAd_01_TcpSM_Closed() will report
          SOAD_SOCON_OFFLINE to the upper layer.
        </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp03021_Tcp_PREPAREOFFLINE_Closed</srcid><srcstatus/><internalId>1966</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_04_TcpSM.c_258</srcid><srcstatus/><internalId>805</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1017</internalId></specobject>
    <specobject>
      <id>SoAd.EB.TcpSM_PREPAREOFFLINE_InvalidTriggers</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>8326</sourceline>
      <version>1</version>
      <description>
          The call of trigger functions other than SoAd_01_TcpSM_UpClosing() and
          SoAd_01_TcpSM_Closed(), will have no effect in the state PREPAREOFFLINE.
        </description>
      <verifycrit>
          It shall be verified that other trigger conditions have no impact in the
          state PREPAREOFFLINE.
        </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp03022_Tcp_WAITOFFLINE_Invalid_Triggers</srcid><srcstatus/><internalId>1967</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_04_TcpSM.c_189</srcid><srcstatus/><internalId>804</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SoAd_04_TcpSM.c_316</srcid><srcstatus/><internalId>806</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SoAd_04_TcpSM.c_436</srcid><srcstatus/><internalId>808</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SoAd_04_TcpSM.c_483</srcid><srcstatus/><internalId>810</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1018</internalId></specobject>
    <specobject>
      <id>SoAd.EB.TcpSM_CLOSING_Closed</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>8345</sourceline>
      <version>1</version>
      <description>
          The call of trigger function SoAd_04_TcpSM_Closed() in the socket state CLOSING, will
          bring the socket to state CLOSED.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp03013_Tcp_CLOSING_Closed</srcid><srcstatus/><internalId>1958</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1019</internalId></specobject>
    <specobject>
      <id>SoAd.EB.TcpSM_CLOSED_InvalidTriggers</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>8359</sourceline>
      <version>1</version>
      <description>
          The call of trigger functions SoAd_04_TcpSM_UpClosing(), SoAd_04_TcpSM_Closed(),
          SoAd_04_TcpSM_LoClosing() or SoAd_04_TcpSM_Connected()
          in the socket state CLOSED, will have no effect.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp03014_Tcp_CLOSED_Invalid_Triggers</srcid><srcstatus/><internalId>1959</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1020</internalId></specobject>
    <specobject>
      <id>SoAd.EB.TcpSM_CLOSING_InvalidTriggers</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>8374</sourceline>
      <version>1</version>
      <description>
          The call of trigger functions SoAd_04_TcpSM_UpClosing(), SoAd_04_TcpSM_Connecting(),
          SoAd_04_TcpSM_LoClosing() or SoAd_04_TcpSM_Connected()
          in the socket state CLOSING, will have no effect.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp03015_Tcp_CLOSING_Invalid_Triggers</srcid><srcstatus/><internalId>1960</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1021</internalId></specobject>
    <specobject>
      <id>SoAd.EB.TcpSM_ONLINE_InvalidTriggers</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>8389</sourceline>
      <version>1</version>
      <description>
          The call of trigger functions SoAd_04_TcpSM_Connecting() or SoAd_04_TcpSM_Connected()
          in the socket state ONLINE, will have no effect.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp03016_Tcp_Online_Invalid_Triggers</srcid><srcstatus/><internalId>1961</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1022</internalId></specobject>
    <specobject>
      <id>SoAd.EB.TcpSM_RESTART_InvalidTriggers</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>8403</sourceline>
      <version>1</version>
      <description>
          The call of trigger functions SoAd_04_TcpSM_LoClosing(), SoAd_04_TcpSM_Connected() or
          SoAd_04_TcpSM_Closed() in the socket state RESTART, will have no effect.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp03017_Tcp_RESTART_Invalid_Triggers</srcid><srcstatus/><internalId>1962</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1023</internalId></specobject>
    <specobject>
      <id>SoAd.EB.TcpSM_SHUTDOWN_InvalidTriggers</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>8417</sourceline>
      <version>1</version>
      <description>
          The call of trigger functions SoAd_04_TcpSM_Connecting(), SoAd_04_TcpSM_LoClosing() or
          SoAd_04_TcpSM_Connected() in the socket state SHUTDOWN, will have no effect.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp03018_Tcp_SHUTDOWN_Invalid_Triggers</srcid><srcstatus/><internalId>1963</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1024</internalId></specobject>
    <specobject>
      <id>SoAd.EB.TcpSM_CONNECTING_InvalidTriggers</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>8431</sourceline>
      <version>1</version>
      <description>
          The call of trigger function SoAd_04_TcpSM_Connecting() in the socket state CONNECTING,
          will have no effect.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_Imp03019_Tcp_CONNECTING_Invalid_Triggers</srcid><srcstatus/><internalId>1964</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1025</internalId></specobject>
    <specobject>
      <id>SoAd.EB.CloseSoCon_SegmentedPDU</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>8445</sourceline>
      <version>1</version>
      <description>
          If only a part of the PDU was received on Tcp socket connection and the received
          PduHeaderId is either unknown or the related routing group is disabled, it shall be
          discarded and the remote node shall be informed by resetting the Tcp connection.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_13_00_RoutingGroup_DisabledAtInit_Rx</srcid><srcstatus/><internalId>1829</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1026</internalId></specobject>
    <specobject>
      <id>SoAd.EB.Trigger_Disabled_SpecRoutGrTransmit</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>8460</sourceline>
      <version>1</version>
      <description>
          The SoAd shall transmit PDUs also for disabled specific routings when a specific
          routing group is triggered.
        </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_13_00_SpecificRoutingGroup_Disabled_Trigger_Tx</srcid><srcstatus/><internalId>1830</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1027</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>SoAd.dsn.Func0102.Udp.Tx.If.SamePdu.NotOK</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>11011</sourceline>
      <version>1</version>
      <description>
            If TcpIp_UdpTransmit() is called in context of SoAd_IfTransmit() and the call gets
            interrupted by SoAd_IfTransmit() for the same PDU, then the second call shall be
            rejected and the function shall return E_NOT_OK.
          </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_132_Udp_IfTransmit_Interrupt_SamePdu</srcid><srcstatus/><internalId>1549</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_2085</srcid><srcstatus/><internalId>829</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Udp.Tx.If.nPduBuffer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>948</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1028</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0102.Udp.Tx.If.Interrupt_NullPtr.NotOK</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>11032</sourceline>
      <version>1</version>
      <description>
            If TcpIp_UdpTransmit() is called in context of SoAd_IfTransmit() and the call gets
            interrupted by SoAd_IfTransmit() with SduDataPtr = NULL_PTR for the same UDp socket
            connection, then the second call shall be rejected and the function shall
            return E_NOT_OK.
          </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_133_Udp_IfTransmit_Interrupt_NullPtr</srcid><srcstatus/><internalId>1550</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_134_Udp_IfTransmit_Interrupt_NullPtr</srcid><srcstatus/><internalId>1551</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_2532</srcid><srcstatus/><internalId>841</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Udp.Tx.If.nPduBuffer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>948</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1029</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0102.Udp.Tx.If.Interrupt_OversizedPdu</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>11054</sourceline>
      <version>1</version>
      <description>
            If TcpIp_UdpTransmit() is called in context of SoAd_IfTransmit() and the call gets
            interrupted by SoAd_IfTransmit() with length greater than remaining buffer for the same
            socket connection, then the second call shall be rejected and the function shall
            return E_NOT_OK.
          </description>
      <verifycrit>
            &lt;ul&gt;
                &lt;li&gt;EC invalid: OC
                  &lt;ul&gt;
                      &lt;li&gt;Test cases:
                          &lt;ul&gt;
                            &lt;li&gt;SoAd_ConTest_00_02_136_Udp_IfTransmit_Interrupt_OversizedPdu&lt;/li&gt;
                            &lt;li&gt;TS_SOAD_nPduUdpTx_TRIGGER_NEVER_PDU_CAPACITY_OVERFLOW&lt;/li&gt;
                          &lt;/ul&gt;
                      &lt;/li&gt;
                      &lt;li&gt;Expected behavior:
                          &lt;ul&gt;
                            &lt;li&gt;Intercepting SoAd_IfTransmit returns E_Not_Ok &lt;/li&gt;
                            &lt;li&gt;Intercepting PDU is discarded and therefore not saved&lt;/li&gt;
                          &lt;/ul&gt;
                      &lt;/li&gt;
                      &lt;li&gt;Input parameters:
                          &lt;ul&gt;
                            &lt;li&gt;SoAd_IfTransmit(): is called while&lt;/li&gt;
                            &lt;li&gt;TcpIp_UdpTransmit(): is called&lt;/li&gt;
                            &lt;li&gt;Intercepting PDU too big for Buffer&lt;/li&gt;
                          &lt;/ul&gt;
                      &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/li&gt;
            &lt;/ul&gt;
          </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_136_Udp_IfTransmit_Interrupt_OversizedPdu</srcid><srcstatus/><internalId>1553</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_2469</srcid><srcstatus/><internalId>839</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Udp.Tx.If.nPduBuffer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>948</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1030</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0102.Udp.Tx.If.OversizedPdu</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>11103</sourceline>
      <version>1</version>
      <description>
            If SoAd_IfTransmit() is called with length greater than buffer, then SoAd shall
            transmit the PDU even if TRIGGER_NEVER.
          </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_137_Udp_IfTransmit_OversizedPdu</srcid><srcstatus/><internalId>1554</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_2257</srcid><srcstatus/><internalId>836</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Udp.Tx.If.nPduBuffer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>948</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1031</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>SoAd.dsn.Metadata.Tx.SoConId.Invalid</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>11128</sourceline>
      <version>1</version>
      <description>
            If development error detection is enabled: In case of a transmit request for a
            SoAdPduRoute that refers to a global PDU structure configured with a MetaDataItem of the
            type SOCKET_CONNECTION_ID_16 and the contained SoAdPduRouteDest refers to a socket
            connection group, SoAd shall raise the development error SOAD_E_INV_METADATA, if the
            socket connection identified by PduInfoType.MetaDataPtr is not part of the socket
            connection group of the related SoAdPduRouteDest.
          </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_103_MetaData_TxIf_DiffSoConId</srcid><srcstatus/><internalId>1517</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_105_MetaData_TxTP_DiffSoConId</srcid><srcstatus/><internalId>1520</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_05_TxTp.c_985</srcid><srcstatus/><internalId>818</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1032</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>SoAd.dsn.PduHeader.LengthInHeader.Max.Invalid</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>11151</sourceline>
      <version>1</version>
      <description>
            If development error detection is enabled: In case of a RxIndication and enabled
            PduHeader SoAd shall raise the development error SOAD_E_INV_LENGTH_IN_PDUHEADER if the
            length in Pdu header exceeds PduLengthTypeMax - PduHeaderLength.
          </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_32_Udp_RxIndication_PduLengthInHeader_MaxOfPduLengthType_uint16</srcid><srcstatus/><internalId>1439</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_41_Tcp_RxInd_IfPdu_Seg_PduLengthInHeader_MaxOfPduLengthType</srcid><srcstatus/><internalId>1451</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_07_Rx.c_3817</srcid><srcstatus/><internalId>872</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1033</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.PduHeader.LengthInHeader.Udp.Invalid</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>11166</sourceline>
      <version>1</version>
      <description>
            If development error detection is enabled: In case of an UDP RxIndication and enabled
            PduHeader SoAd shall raise the development error SOAD_E_INV_LENGTH_IN_PDUHEADER if the
            length in Pdu header exceeds 65535U - PduHeaderLength.
          </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_32_Udp_RxIndication_PduLengthInHeader_Over65535</srcid><srcstatus/><internalId>1440</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_07_Rx.c_3805</srcid><srcstatus/><internalId>871</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1034</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>SoAd.dsn.Func0130.Rx.Udp.If.TwoPdusForSameSoCon</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>11188</sourceline>
      <version>1</version>
      <description>
            If the development error detection is activated the error code 0xFB meaning
            SOAD_E_TWO_PDUS_SAME_SOCON shall be reported and E_NOT_OK returned
            under the following circumstances:
            Preconditions:
            &lt;ul&gt;
              &lt;li&gt;A SocketRoute references a Socket Connection Group with at least
                  two Socket Connections&lt;/li&gt;
              &lt;li&gt;The SocketRoute has at least two destinations&lt;/li&gt;
              &lt;li&gt;Each destination has distinct RoutingGroups configured&lt;/li&gt;
            &lt;/ul&gt;
            Runtime Execution:
            &lt;ul&gt;
              &lt;li&gt;SoAd_EnableSpecificRouting has been called for one SocketConnection with
                  one of the configured RoutingGroups.
              &lt;/li&gt;
              &lt;li&gt;SoAd_EnableSpecificRouting is beeing called for the same SocketConnection
                  with another RoutingGroup associated with antother SocketRoute Destination.
              &lt;/li&gt;
            &lt;/ul&gt;
          </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_19_UDP_TwoPdusForSameSoCon</srcid><srcstatus/><internalId>1782</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_3310</srcid><srcstatus/><internalId>899</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0130.MultiplePSI</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>956</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00761</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>379</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1035</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0130.Rx.Udp.If.TwoSoConSamePdu</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>11230</sourceline>
      <version>1</version>
      <description>
            If the development error detection is activated the error code 0xFC meaning
            SOAD_E_TWO_SOCON_SAME_PDU shall be reported and E_NOT_OK returned
            under the following circumstances:
            Preconditions:
            &lt;ul&gt;
              &lt;li&gt;A SocketRoute references a Socket Connection Group with at least two
                Socket Connections
              &lt;/li&gt;
              &lt;li&gt;The SocketRoute has at least two SocketRoute Destinations&lt;/li&gt;
              &lt;li&gt;Each destination has distinct RoutingGroups configured&lt;/li&gt;
            &lt;/ul&gt;
            Runtime Execution:
            &lt;ul&gt;
              &lt;li&gt;SoAd_EnableSpecificRouting has been called for one SocketConnection with
                  one of the configured RoutingGroups.
              &lt;/li&gt;
              &lt;li&gt;SoAd_EnableSpecificRouting is being called for the same RoutingGroup but with
                  a different SocketConnection that is also in the SoConGroup.
              &lt;/li&gt;
            &lt;/ul&gt;
          </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_19_UDP_TwoSoconSamePdu</srcid><srcstatus/><internalId>1781</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_3318</srcid><srcstatus/><internalId>900</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0130.MultiplePSI</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>956</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00761</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>379</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1036</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>SoAd.dsn.Func0143.DtlsPooling.SoAdNotInitialized</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>11279</sourceline>
      <version>1</version>
      <description>
            If development error detection is enabled: SoAd_DtlsConnectionStateChg() shall
            raise the development error SOAD_E_NOTINIT if the SoAd module is not initialized.
          </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_SoAd_DtlsConnectionStateChg_NoInit</srcid><srcstatus/><internalId>1285</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_07_Rx.c_827</srcid><srcstatus/><internalId>861</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>960</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1037</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0143.DtlsPooling.RemoteAddrNullPtr</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>11300</sourceline>
      <version>1</version>
      <description>
            If development error detection is enabled: SoAd_DtlsConnectionStateChg() shall
            raise the development error SOAD_E_PARAM_POINTER if called with NULL_PTR
            as RemoteAddrPtr.
          </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_SoAd_DtlsConnectionStateChg_RemoteAddr_NullPtr</srcid><srcstatus/><internalId>1358</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_07_Rx.c_832</srcid><srcstatus/><internalId>862</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>960</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1038</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0143.DtlsPooling.SocketIdInvalid</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>11322</sourceline>
      <version>1</version>
      <description>
            If development error detection is enabled: SoAd_DtlsConnectionStateChg() shall
            raise the development error SOAD_E_INV_SOCKETID if called with invalid SocketId.
          </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_SoAd_DtlsConnectionStateChg_SocketID_Invalid_State_CONNECTING</srcid><srcstatus/><internalId>1359</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_00_SoAd_DtlsConnectionStateChg_SocketID_Invalid_State_CLOSED</srcid><srcstatus/><internalId>1360</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_07_Rx.c_856</srcid><srcstatus/><internalId>864</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SoAd_Int_07_Rx.c_933</srcid><srcstatus/><internalId>866</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>960</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1039</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0143.DtlsPooling.TcpSocketId</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>11343</sourceline>
      <version>1</version>
      <description>
            If development error detection is enabled: SoAd_DtlsConnectionStateChg() shall
            raise the development error SOAD_E_INV_SOCKETID if called with SocketId that
            belongs to a TCP socket.
          </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_SoAd_DtlsConnectionStateChg_TCP_SoCon</srcid><srcstatus/><internalId>1364</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_07_Rx.c_862</srcid><srcstatus/><internalId>865</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SoAd_Int_07_Rx.c_939</srcid><srcstatus/><internalId>867</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>960</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1040</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0143.DtlsPooling.DomainInvalid</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>11365</sourceline>
      <version>1</version>
      <description>
            If development error detection is enabled: SoAd_DtlsConnectionStateChg() shall
            raise the development error SOAD_E_INV_ARG if called with invalid domain.
          </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_SoAd_DtlsConnectionStateChg_Domain_Invalid</srcid><srcstatus/><internalId>1361</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_07_Rx.c_837</srcid><srcstatus/><internalId>863</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>960</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1041</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>SoAd.dsn.Udp.Tx.If.SduLengthNull.NotOK</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>11392</sourceline>
      <version>1</version>
      <description>
            If SoAd_IfTransmit() is called with SduLength = 0U it shall
            return E_NOT_OK.
          </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_135_Udp_IfTransmit_NoSduLength</srcid><srcstatus/><internalId>1552</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_453</srcid><srcstatus/><internalId>822</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1042</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.SWS_SoAd_00099.DomainInvalid</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>11406</sourceline>
      <version>1</version>
      <description>
            If development error detection is enabled: SoAd_TcpAccepted() shall
            raise the development error SOAD_E_INV_ARG if called with invalid domain.
          </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_SoAd_TcpAccepted_Domain_Invalid</srcid><srcstatus/><internalId>1363</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_07_Rx.c_713</srcid><srcstatus/><internalId>860</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00099</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1043</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func.GetSoConInfo.SoConIdInvalid</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>11427</sourceline>
      <version>1</version>
      <description>
            If development error detection is enabled: SoAd_GetSoConInfo() shall
            raise the development error SOAD_E_INV_ARG if called with invalid SoConId.
          </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_GetSoConInfo_NoInit</srcid><srcstatus/><internalId>1273</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_00_GetSoConInfo_ParamInvalid</srcid><srcstatus/><internalId>1302</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.GetSoConInfo</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>950</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1044</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func.GetSoConInfo.ParamNullPtr</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>11447</sourceline>
      <version>1</version>
      <description>
            If development error detection is enabled: SoAd_GetSoConInfo() shall
            raise SOAD_E_PARAM_POINTER if any of the pointer arguments are equal to NULL_PTR.
          </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_GetSoConInfo_NoInit</srcid><srcstatus/><internalId>1273</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_00_GetSoConInfo_ParamInvalid</srcid><srcstatus/><internalId>1302</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.GetSoConInfo</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>950</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1045</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.SWS_SoAd_00097.DomainInvalid</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>11467</sourceline>
      <version>1</version>
      <description>
            If development error detection is enabled: SoAd_RxIndication() shall
            raise the development error SOAD_E_INV_ARG if called with invalid domain.
          </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_SoAd_RxIndication_Domain_Invalid</srcid><srcstatus/><internalId>1362</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_07_Rx.c_560</srcid><srcstatus/><internalId>859</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00097</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1046</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.SWS_SoAd_00278.InvalidEvent</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>11487</sourceline>
      <version>1</version>
      <description>
            If SoAd_TcpIpEvent() is called with parameter Event which is not known to SoAd,
            the module shall ignore this call.
          </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_TcpIpEvent_Invalid</srcid><srcstatus/><internalId>1350</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_1820</srcid><srcstatus/><internalId>888</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00278</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>85</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1047</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Functionality requirements: Support to Trigger next Transmission     in Context of UL_TxConfirmation()">
    <specobject>
      <id>SoAd.EB.IfTxConfirmation.UdpTriggerTxForSamePDU</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>11541</sourceline>
      <version>1</version>
      <description>
        The SoAd module should allow IfTxConfirmation() to trigger another transmission for
        the same PDU if socket connection setup Udp is used.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Ts_SoAd_IfTransmit_RetransmitSamePdu_PduR_Udp</srcid><srcstatus/><internalId>1245</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.IfTxConfirmation.TriggerTxForSamePDU</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>945</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1048</internalId></specobject>
    <specobject>
      <id>SoAd.EB.IfTxConfirmation.TcpTriggerTxForSamePDU</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>11561</sourceline>
      <version>1</version>
      <description>
        The SoAd module should allow IfTxConfirmation() to trigger another transmission for
        the same PDU if socket connection setup Tcp is used.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Ts_SoAd_IfTransmit_RetransmitSamePdu_PduR_Tcp_Client</srcid><srcstatus/><internalId>1238</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.IfTxConfirmation.TriggerTxForSamePDU</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>945</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1049</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Functionality requirements: GetSoConInfo">
    <specobject>
      <id>SoAd.EB.GetSoConInfo</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>11583</sourceline>
      <version>1</version>
      <description>
        The SoAd module provides the method SoAd_GetSoConInfo. If this method is called with a valid SoConId, it provides
        the currently set local and remote IP address and the configured VlanId. If SoAd is able to provide the requested
        information, the function returns E_OK, E_NOT_OK otherwise.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_200_GetSoConInfo_NOT_OK</srcid><srcstatus/><internalId>1624</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_201_GetSoConInfo_OK</srcid><srcstatus/><internalId>1625</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.GetSoConInfo</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>950</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1050</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Functionality requirements: ReportEventCallout">
    <specobject>
      <id>SoAd.EB.ReportEventCallout</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>11606</sourceline>
      <version>1</version>
      <description>
        The SoAd module provides the ability to specify an optional callout that gets called when specific events
        occur. The callout can be specified in to &lt;code&gt;SoAdReportIssueCallout&lt;/code&gt; container. The callout is called with
        a ReportId and a ContextDataPtr, which can take the following values:
        &lt;br/&gt;
        &lt;b&gt;ReportId:&lt;/b&gt;
        &lt;ul&gt;
          &lt;li&gt;SOAD_REPORT_ID_DROPPED_PDU_UDP (0): The PDU violates stack configuration and was received via a UDP socket.&lt;/li&gt;
          &lt;li&gt;SOAD_REPORT_ID_DROPPED_PDU_TCP (1): The PDU violates stack configuration and was received via a TCP socket.&lt;/li&gt;
          &lt;li&gt;SOAD_REPORT_ID_DROPPED_MSG_RX_UDP_LENGTH (2): The message contains at least one PDU which violates stack configuration and was received via a UDP socket.&lt;/li&gt;
          &lt;li&gt;SOAD_REPORT_ID_DROPPED_MSG_RX_UDP_SOCKET (3): SoAd received a UDP message which violates stack configuration and was dropped.&lt;/li&gt;
          &lt;li&gt;SOAD_REPORT_ID_REJECTED_TCP_CONNECTION (4):The connection request violates stack configuration and was received via TCP socket.&lt;/li&gt;
          &lt;li&gt;SOAD_REPORT_ID_INV_PDUHEADER_ID (5): An invalid PDU header id was encountered.&lt;/li&gt;
        &lt;/ul&gt;
        &lt;b&gt;ContextDataPtr:&lt;/b&gt;
        &lt;ul&gt;
          &lt;li&gt;SoConId: The SocketConnection that dropped the frame.&lt;/li&gt;
          &lt;li&gt;VlanId: VLAN ID of dropped frame (0 if VLAN is not used).&lt;/li&gt;
          &lt;li&gt;LocalIpAddrPtr: Pointer to local IP address and port.&lt;/li&gt;
          &lt;li&gt;RemoteIpAddrPtr: Pointer to remote IP address and port.&lt;/li&gt;
          &lt;li&gt;PduHeaderId: PduHeaderId of dropped PDU.&lt;/li&gt;
          &lt;li&gt;BufPtr: Pointer to dropped PDU.&lt;/li&gt;
          &lt;li&gt;BufLength: Length of dropped PDU.&lt;/li&gt;
        &lt;/ul&gt;
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_202_ReportEventCallout</srcid><srcstatus/><internalId>1626</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_203_Report_INV_PDUHEADER_ID</srcid><srcstatus/><internalId>1627</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.ReportEventCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>951</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1051</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Functionality requirements: Meta Data Handling">
    <specobject>
      <id>SoAd.dsn.Metadata.Udp.If.Rx.SoCon</id>
      <status>approved</status>
      <source>dsn</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>11649</sourceline>
      <version>1</version>
      <description>
        For a configuration
        &lt;ul&gt;
          &lt;li&gt;SocketConnectionGroup
            &lt;ul&gt;
              &lt;li&gt;multiple SocketConnections&lt;/li&gt;
              &lt;li&gt;SoAdSocketProtocol = SoAdSocketUdp&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;SocketRoute with
            &lt;ul&gt;
                &lt;li&gt;SoAdRxSocketConnOrSocketConnBundleRef refers to SocketConnection&lt;/li&gt;
                &lt;li&gt;
                  SoAdRxPduRef refers to PDU which has MetaDataTypeRef/MetaDataItemType configured to
                  SOCKET_CONNECTION_ID_16
                &lt;/li&gt;
                &lt;li&gt;SoAdRxUpperLayerType = IF&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
        If a frame was received SoAd shall call EcuC_SetMetaDataSoConId() for this PDU to store
        the SoConId with matching remote address of the incoming frame and
        pass it to the upper layer.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_106_MetaData_Rx</srcid><srcstatus/><internalId>1521</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.MetaDataHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>946</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1052</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Metadata.Udp.Tp.Rx.SoCon</id>
      <status>approved</status>
      <source>dsn</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>11689</sourceline>
      <version>1</version>
      <description>
        For a configuration
        &lt;ul&gt;
          &lt;li&gt;SocketConnectionGroup
            &lt;ul&gt;
              &lt;li&gt;multiple SocketConnections&lt;/li&gt;
              &lt;li&gt;SoAdSocketProtocol = SoAdSocketUdp&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;SocketRoute with
            &lt;ul&gt;
              &lt;li&gt;SoAdRxSocketConnOrSocketConnBundleRef refers to SocketConnection&lt;/li&gt;
              &lt;li&gt;
                SoAdRxPduRef refers to PDU which has MetaDataTypeRef/MetaDataItemType configured to
                SOCKET_CONNECTION_ID_16
              &lt;/li&gt;
              &lt;li&gt;SoAdRxUpperLayerType = TP&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
        If a frame was received SoAd shall call EcuC_SetMetaDataSoConId() for this PDU to store
        the SoConId with matching remote address of the incoming frame and
        pass it to the upper layer.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_169_MetaData_RxTP_SoCon</srcid><srcstatus/><internalId>1535</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.MetaDataHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>946</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1053</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Metadata.Tcp.If.Rx.SoCon</id>
      <status>rejected</status>
      <source>dsn</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>11729</sourceline>
      <version>1</version>
      <description>
        For a configuration
        &lt;ul&gt;
          &lt;li&gt;SocketConnectionGroup
            &lt;ul&gt;
              &lt;li&gt;multiple SocketConnections&lt;/li&gt;
              &lt;li&gt;SoAdSocketProtocol = SoAdSocketTcp&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;SocketRoute with
            &lt;ul&gt;
              &lt;li&gt;SoAdRxSocketConnOrSocketConnBundleRef refers to SocketConnection&lt;/li&gt;
              &lt;li&gt;
                SoAdRxPduRef refers to PDU which has MetaDataTypeRef/MetaDataItemType configured to
                SOCKET_CONNECTION_ID_16
              &lt;/li&gt;
              &lt;li&gt;SoAdRxUpperLayerType = IF&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
        If a frame was received SoAd shall call EcuC_SetMetaDataSoConId() for this PDU to store
        the SoConId with matching remote address of the incoming frame and
        pass it to the upper layer.
      </description>
      <comment>
        This requirement is not applicable.
        Will be covered with ASCSOAD-1149.
      </comment>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.MetaDataHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>946</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1054</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Metadata.Tcp.Tp.Rx.SoCon</id>
      <status>rejected</status>
      <source>dsn</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>11770</sourceline>
      <version>1</version>
      <description>
        For a configuration
        &lt;ul&gt;
          &lt;li&gt;SocketConnectionGroup
            &lt;ul&gt;
              &lt;li&gt;multiple SocketConnections&lt;/li&gt;
              &lt;li&gt;SoAdSocketProtocol = SoAdSocketTcp&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;SocketRoute with
            &lt;ul&gt;
              &lt;li&gt;SoAdRxSocketConnOrSocketConnBundleRef refers to SocketConnection&lt;/li&gt;
              &lt;li&gt;
                SoAdRxPduRef refers to PDU which has MetaDataTypeRef/MetaDataItemType configured to
                SOCKET_CONNECTION_ID_16
              &lt;/li&gt;
              &lt;li&gt;SoAdRxUpperLayerType = TP&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
        If a frame was received SoAd shall call EcuC_SetMetaDataSoConId() for this PDU to store
        the SoConId with matching remote address of the incoming frame and
        pass it to the upper layer.
      </description>
      <comment>
        This requirement is not applicable.
        Will be covered with ASCSOAD-1149.
      </comment>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.MetaDataHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>946</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1055</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Metadata.Udp.If.Rx.SoConGroup</id>
      <status>approved</status>
      <source>dsn</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>11811</sourceline>
      <version>1</version>
      <description>
        For a configuration
        &lt;ul&gt;
          &lt;li&gt;SocketConnectionGroup
            &lt;ul&gt;
              &lt;li&gt;multiple SocketConnections&lt;/li&gt;
              &lt;li&gt;SoAdSocketProtocol = SoAdSocketUdp&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;SocketRoute with
            &lt;ul&gt;
              &lt;li&gt;SoAdRxSocketConnOrSocketConnBundleRef refers to SocketConnectionGroup&lt;/li&gt;
              &lt;li&gt;
                SoAdRxPduRef refers to PDU which has MetaDataTypeRef/MetaDataItemType configured to
                SOCKET_CONNECTION_ID_16
              &lt;/li&gt;
              &lt;li&gt;SoAdRxUpperLayerType = IF&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
        If a frame was received SoAd shall call EcuC_SetMetaDataSoConId() for this PDU to store
        the SoConId with matching remote address of the incoming frame and
        pass it to the upper layer.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_112_MetaData_RxIf_MultipleSoCon</srcid><srcstatus/><internalId>1526</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_114_MetaData_RxIf_SoConGroup</srcid><srcstatus/><internalId>1528</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.MetaDataHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>946</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1056</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Metadata.Udp.Tp.Rx.SoConGroup</id>
      <status>approved</status>
      <source>dsn</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>11851</sourceline>
      <version>1</version>
      <description>
        For a configuration
        &lt;ul&gt;
          &lt;li&gt;SocketConnectionGroup
            &lt;ul&gt;
              &lt;li&gt;multiple SocketConnections&lt;/li&gt;
              &lt;li&gt;SoAdSocketProtocol = SoAdSocketUdp&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;SocketRoute with
            &lt;ul&gt;
              &lt;li&gt;SoAdRxSocketConnOrSocketConnBundleRef refers to SocketConnectionGroup&lt;/li&gt;
              &lt;li&gt;
                SoAdRxPduRef refers to PDU which has MetaDataTypeRef/MetaDataItemType configured to
                SOCKET_CONNECTION_ID_16
              &lt;/li&gt;
              &lt;li&gt;SoAdRxUpperLayerType = TP&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
        If a frame was received SoAd shall call EcuC_SetMetaDataSoConId() for this PDU to store
        the SoConId with matching remote address of the incoming frame and
        pass it to the upper layer.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_117_MetaData_RxTP_MultipleSoCon</srcid><srcstatus/><internalId>1534</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.MetaDataHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>946</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1057</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Metadata.Tcp.If.Rx.SoConGroup</id>
      <status>rejected</status>
      <source>dsn</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>11891</sourceline>
      <version>1</version>
      <description>
        For a configuration
        &lt;ul&gt;
          &lt;li&gt;SocketConnectionGroup
            &lt;ul&gt;
              &lt;li&gt;multiple SocketConnections&lt;/li&gt;
              &lt;li&gt;SoAdSocketProtocol = SoAdSocketTcp&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;SocketRoute with
            &lt;ul&gt;
              &lt;li&gt;SoAdRxSocketConnOrSocketConnBundleRef refers to SocketConnectionGroup&lt;/li&gt;
              &lt;li&gt;
                SoAdRxPduRef refers to PDU which has MetaDataTypeRef/MetaDataItemType configured to
                SOCKET_CONNECTION_ID_16
              &lt;/li&gt;
              &lt;li&gt;
                SoAdRxUpperLayerType = IF
                If a frame was received SoAd shall call EcuC_SetMetaDataSoConId() for this PDU to store
                the SoConId with matching remote address of the incoming frame and
                pass it to the upper layer.
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      </description>
      <comment>
        This requirement is not applicable.
        Will be covered with ASCSOAD-1149.
      </comment>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.MetaDataHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>946</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1058</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Metadata.Tcp.Tp.Rx.SoConGroup</id>
      <status>rejected</status>
      <source>dsn</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>11934</sourceline>
      <version>1</version>
      <description>
        For a configuration
        &lt;ul&gt;
          &lt;li&gt;SocketConnectionGroup
            &lt;ul&gt;
              &lt;li&gt;multiple SocketConnections&lt;/li&gt;
              &lt;li&gt;SoAdSocketProtocol = SoAdSocketTcp&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;SocketRoute with
            &lt;ul&gt;
              &lt;li&gt;SoAdRxSocketConnOrSocketConnBundleRef refers to SocketConnectionGroup&lt;/li&gt;
              &lt;li&gt;
                SoAdRxPduRef refers to PDU which has MetaDataTypeRef/MetaDataItemType configured to
                SOCKET_CONNECTION_ID_16
              &lt;/li&gt;
              &lt;li&gt;
                SoAdRxUpperLayerType = TP
                If a frame was received SoAd shall call EcuC_SetMetaDataSoConId() for this PDU to store
                the SoConId with matching remote address of the incoming frame and
                pass it to the upper layer.
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      </description>
      <comment>
        This requirement is not applicable.
        Will be covered with ASCSOAD-1149.
      </comment>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.MetaDataHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>946</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1059</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Metadata.Udp.If.Tx.SoCon</id>
      <status>approved</status>
      <source>dsn</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>11977</sourceline>
      <version>1</version>
      <description>
        For a configuration
        &lt;ul&gt;
          &lt;li&gt;SocketConnectionGroup
          &lt;ul&gt;
            &lt;li&gt;multiple SocketConnections&lt;/li&gt;
            &lt;li&gt;SoAdSocketProtocol = SoAdSocketUdp&lt;/li&gt;
          &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;PduRoute with
            &lt;ul&gt;
              &lt;li&gt;SoAdTxSocketConnOrSocketConnBundleRef refers to SocketConnection&lt;/li&gt;
              &lt;li&gt;
                SoAdTxPduRef refers to PDU which has MetaDataTypeRef/MetaDataItemType configured to
                SOCKET_CONNECTION_ID_16
              &lt;/li&gt;
              &lt;li&gt;
                SoAdTxUpperLayerType = IF
                If a PDU is transmitted SoAd shall call EcuC_GetMetaDataSoConId() for this PDU retrieve the
                the SoConId and send the PDU on the correct socket with the correct remote address.
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_102_MetaData_TxIf</srcid><srcstatus/><internalId>1516</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_115_MetaData_TxIf_RouteDest</srcid><srcstatus/><internalId>1529</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.MetaDataHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>946</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1060</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Metadata.Udp.Tp.Tx.SoCon</id>
      <status>approved</status>
      <source>dsn</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>12018</sourceline>
      <version>1</version>
      <description>
        For a configuration
        &lt;ul&gt;
          &lt;li&gt;SocketConnectionGroup
            &lt;ul&gt;
              &lt;li&gt;multiple SocketConnections&lt;/li&gt;
              &lt;li&gt;SoAdSocketProtocol = SoAdSocketUdp&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;PduRoute with
            &lt;ul&gt;
              &lt;li&gt;SoAdTxSocketConnOrSocketConnBundleRef refers to SocketConnection&lt;/li&gt;
              &lt;li&gt;
                SoAdTxPduRef refers to PDU which has MetaDataTypeRef/MetaDataItemType configured to
                SOCKET_CONNECTION_ID_16
              &lt;/li&gt;
              &lt;li&gt;
                SoAdTxUpperLayerType = TP
                If a PDU is transmitted SoAd shall call EcuC_GetMetaDataSoConId() for this PDU retrieve the
                the SoConId and send the PDU on the correct socket with the correct remote address.
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_166_MetaData_TxTP_SoCon</srcid><srcstatus/><internalId>1531</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.MetaDataHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>946</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1061</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Metadata.Tcp.If.Tx.SoCon</id>
      <status>approved</status>
      <source>dsn</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>12059</sourceline>
      <version>1</version>
      <description>
        For a configuration
        &lt;ul&gt;
          &lt;li&gt;SocketConnectionGroup
            &lt;ul&gt;
              &lt;li&gt;multiple SocketConnections&lt;/li&gt;
              &lt;li&gt;SoAdSocketProtocol = SoAdSocketTcp&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;PduRoute with
            &lt;ul&gt;
              &lt;li&gt;SoAdTxSocketConnOrSocketConnBundleRef refers to SocketConnection&lt;/li&gt;
              &lt;li&gt;
                SoAdTxPduRef refers to PDU which has MetaDataTypeRef/MetaDataItemType configured to
                SOCKET_CONNECTION_ID_16
              &lt;/li&gt;
              &lt;li&gt;
                SoAdTxUpperLayerType = IF
                If a PDU is transmitted SoAd shall call EcuC_GetMetaDataSoConId() for this PDU retrieve the
                the SoConId and send the PDU on the correct socket with the correct remote address.
              &lt;/li&gt;
           &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_168_MetaData_Tcp_TxIf_SoCon</srcid><srcstatus/><internalId>1533</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_174_MetaData_Tcp_TxIf_SkipTxConf</srcid><srcstatus/><internalId>1597</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.MetaDataHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>946</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1062</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Metadata.Tcp.Tp.Tx.SoCon</id>
      <status>approved</status>
      <source>dsn</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>12100</sourceline>
      <version>1</version>
      <description>
        For a configuration
        &lt;ul&gt;
          &lt;li&gt;SocketConnectionGroup
            &lt;ul&gt;
              &lt;li&gt;multiple SocketConnections&lt;/li&gt;
              &lt;li&gt;SoAdSocketProtocol = SoAdSocketTcp&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;PduRoute with
            &lt;ul&gt;
              &lt;li&gt;SoAdTxSocketConnOrSocketConnBundleRef refers to SocketConnection&lt;/li&gt;
              &lt;li&gt;
                SoAdTxPduRef refers to PDU which has MetaDataTypeRef/MetaDataItemType configured to
                SOCKET_CONNECTION_ID_16
              &lt;/li&gt;
              &lt;li&gt;
                SoAdTxUpperLayerType = TP
                If a PDU is transmitted SoAd shall call EcuC_GetMetaDataSoConId() for this PDU retrieve the
                the SoConId and send the PDU on the correct socket with the correct remote address.
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_165_MetaData_Tcp_SoCon_TxTP</srcid><srcstatus/><internalId>1519</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.MetaDataHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>946</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1063</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Metadata.Udp.If.Tx.SoConGroup</id>
      <status>approved</status>
      <source>dsn</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>12141</sourceline>
      <version>1</version>
      <description>
        For a configuration
        &lt;ul&gt;
          &lt;li&gt;SocketConnectionGroup
          &lt;ul&gt;
            &lt;li&gt;multiple SocketConnections&lt;/li&gt;
            &lt;li&gt;SoAdSocketProtocol = SoAdSocketUdp&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;PduRoute with
          &lt;ul&gt;
            &lt;li&gt;SoAdTxSocketConnOrSocketConnBundleRef refers to SocketConnectionGroup&lt;/li&gt;
            &lt;li&gt;
              SoAdTxPduRef refers to PDU which has MetaDataTypeRef/MetaDataItemType configured to
              SOCKET_CONNECTION_ID_16
            &lt;/li&gt;
            &lt;li&gt;
              SoAdTxUpperLayerType = IF
              If a PDU is transmitted SoAd shall call EcuC_GetMetaDataSoConId() for this PDU retrieve the
              the SoConId and send the PDU on the correct socket with the correct remote address.
            &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_111_MetaData_TxIf_MultipleSoCon</srcid><srcstatus/><internalId>1525</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_113_MetaData_TxIf_SoConGroup</srcid><srcstatus/><internalId>1527</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.MetaDataHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>946</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1064</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Metadata.Udp.Tp.Tx.SoConGroup</id>
      <status>approved</status>
      <source>dsn</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>12182</sourceline>
      <version>1</version>
      <description>
        For a configuration
        &lt;ul&gt;
          &lt;li&gt;SocketConnectionGroup
            &lt;ul&gt;
              &lt;li&gt;multiple SocketConnections&lt;/li&gt;
              &lt;li&gt;SoAdSocketProtocol = SoAdSocketUdp&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;PduRoute with
            &lt;ul&gt;
              &lt;li&gt;SoAdTxSocketConnOrSocketConnBundleRef refers to SocketConnectionGroup&lt;/li&gt;
              &lt;li&gt;
                SoAdTxPduRef refers to PDU which has MetaDataTypeRef/MetaDataItemType configured to
                SOCKET_CONNECTION_ID_16
              &lt;/li&gt;
              &lt;li&gt;
                SoAdTxUpperLayerType = TP
                If a PDU is transmitted SoAd shall call EcuC_GetMetaDataSoConId() for this PDU retrieve the
                the SoConId and send the PDU on the correct socket with the correct remote address.
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_116_MetaData_TxTP_MultipleSoCon</srcid><srcstatus/><internalId>1530</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.MetaDataHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>946</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1065</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Metadata.Tcp.If.Tx.SoConGroup</id>
      <status>approved</status>
      <source>dsn</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>12223</sourceline>
      <version>1</version>
      <description>
        For a configuration
        &lt;ul&gt;
          &lt;li&gt;SocketConnectionGroup
            &lt;ul&gt;
              &lt;li&gt;multiple SocketConnections&lt;/li&gt;
              &lt;li&gt;SoAdSocketProtocol = SoAdSocketTcp&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;PduRoute with
            &lt;ul&gt;
              &lt;li&gt;SoAdTxSocketConnOrSocketConnBundleRef refers to SocketConnectionGroup&lt;/li&gt;
              &lt;li&gt;
                SoAdTxPduRef refers to PDU which has MetaDataTypeRef/MetaDataItemType configured to
                SOCKET_CONNECTION_ID_16
              &lt;/li&gt;
              &lt;li&gt;
                SoAdTxUpperLayerType = IF
                If a PDU is transmitted SoAd shall call EcuC_GetMetaDataSoConId() for this PDU retrieve the
                the SoConId and send the PDU on the correct socket with the correct remote address.
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_167_MetaData_Tcp_TxIf_MultipleSoCon</srcid><srcstatus/><internalId>1532</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.MetaDataHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>946</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1066</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Metadata.Tcp.Tp.Tx.SoConGroup</id>
      <status>approved</status>
      <source>dsn</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>12264</sourceline>
      <version>1</version>
      <description>
        For a configuration
        &lt;ul&gt;
          &lt;li&gt;SocketConnectionGroup
            &lt;ul&gt;
              &lt;li&gt;multiple SocketConnections&lt;/li&gt;
              &lt;li&gt;SoAdSocketProtocol = SoAdSocketTcp&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;SocketRoute with
            &lt;ul&gt;
              &lt;li&gt;SoAdTxSocketConnOrSocketConnBundleRef refers to SocketConnectionGroup&lt;/li&gt;
              &lt;li&gt;SoAdTxPduRef refers to PDU which has MetaDataTypeRef/MetaDataItemType configured to
                  SOCKET_CONNECTION_ID_16
              &lt;/li&gt;
              &lt;li&gt;
                SoAdTxUpperLayerType = TP
                If a PDU is transmitted SoAd shall call EcuC_GetMetaDataSoConId() for this PDU retrieve the
                the SoConId and send the PDU on the correct socket with the correct remote address.
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_104_MetaData_TxTP</srcid><srcstatus/><internalId>1518</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.MetaDataHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>946</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1067</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Metadata.Tp.Tx_IncorrectSoConId</id>
      <status>approved</status>
      <source>dsn</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>12304</sourceline>
      <version>1</version>
      <description>
        If the SoAd PduRoute has SoAdTxPduRef referring to a PDU with
        MetaDataTypeRef/MetaDataItemType configured to
        SOCKET_CONNECTION_ID_16, SoAd shall call EcuC_GetMetaDataSoConId() for the PduRoute.
        If the returned SoConId does not match any SoConIds referenced for any PduRouteDest, SoAd
        shall return E_NOT_OK.
        If development error detection is enabled, the development error SOAD_E_INV_METADATA shall
        be raised.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_105_MetaData_TxTP_DiffSoConId</srcid><srcstatus/><internalId>1520</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.MetaDataHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>946</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00740</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>353</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1068</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Metadata.If.Tx.IncorrectSoConId</id>
      <status>approved</status>
      <source>dsn</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>12333</sourceline>
      <version>1</version>
      <description>
        If the SoAd PduRoute has SoAdTxPduRef referring to a PDU with
        MetaDataTypeRef/MetaDataItemType configured to
        SOCKET_CONNECTION_ID_16, SoAd shall call EcuC_GetMetaDataSoConId() for the PduRoute.
        If the returned SoConId does not match any SoConIds referenced for any PduRouteDest, SoAd
        shall return E_NOT_OK.
        If development error detection is enabled, the development error SOAD_E_INV_METADATA shall
        be raised.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_103_MetaData_TxIf_DiffSoConId</srcid><srcstatus/><internalId>1517</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_110_MetaData_TxIf_DiffSoConId</srcid><srcstatus/><internalId>1524</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.MetaDataHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>946</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00740</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>353</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1069</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Functional requirements: SoAd_IfTransmit() with SduDataPtr as NULL_PTR">
    <specobject>
      <id>SoAd.Dsn.Func0101.Tx.Udp.If.Header.Fanout</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>12364</sourceline>
      <version>1</version>
      <description>
        For a configuration:
        &lt;ul&gt;
            &lt;li&gt;Communication Protocol UDP&lt;/li&gt;
            &lt;li&gt;API IF&lt;/li&gt;
            &lt;li&gt;Header mode enabled&lt;/li&gt;
            &lt;li&gt;Direction Tx&lt;/li&gt;
            &lt;li&gt;Fanout via multiple SoAdPduRouteDest
            On invocation of SoAd_IfTransmit() with SudDataPtr = NULL_PTR for a PDURoute with multiple
            SoAdPduRouteDest, SoAd shall call TcpIp_UdpTransmit() which shall trigger SoAd_CopyTxData()
            for each SoAdPduRouteDest. Up_[SoAd][If]TriggerTransmit() shall be called to retrieve the
            same data from the UL for each destination to be transmitted.&lt;/li&gt;
        &lt;/ul&gt;
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_IfTransmit_NullSduDataPtr_TriggerTransmit</srcid><srcstatus/><internalId>1819</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_3031</srcid><srcstatus/><internalId>846</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.Dsn.Func0101.Udp.IfTransmit.NullPtr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>947</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1070</internalId></specobject>
    <specobject>
      <id>SoAd.Dsn.Func0101.Tx.Udp.If.NoHeader</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>12395</sourceline>
      <version>1</version>
      <description>
        For a configuration:
        &lt;ul&gt;
            &lt;li&gt;Communication Protocol UDP&lt;/li&gt;
            &lt;li&gt;API IF&lt;/li&gt;
            &lt;li&gt;Header mode disabled&lt;/li&gt;
            &lt;li&gt;Direction Tx
            On invocation of SoAd_IfTransmit() with SduDataPtr = NULL_PTR, SoAd shall call
            TcpIp_UdpTransmit() which shall trigger SoAd_CopyTxData(). Up_[SoAd][If]TriggerTransmit()
            shall be called to retrieve the data from the UL to be transmitted.&lt;/li&gt;
        &lt;/ul&gt;
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_124_IfTransmit_NullSduDataPtr_NoHeader</srcid><srcstatus/><internalId>1542</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_151_Udp_IfTransmit_NoTxCopy</srcid><srcstatus/><internalId>1568</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_2968</srcid><srcstatus/><internalId>844</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.Dsn.Func0101.Udp.IfTransmit.NullPtr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>947</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1071</internalId></specobject>
    <specobject>
      <id>SoAd.Dsn.Func0101.Tx.Udp.If.Det.IPFrag</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>12424</sourceline>
      <version>1</version>
      <description>
        For a configuration:
        &lt;ul&gt;
        &lt;li&gt;Communication Protocol UDP&lt;/li&gt;
        &lt;li&gt;API IF&lt;/li&gt;
        &lt;li&gt;Direction Tx&lt;/li&gt;
        &lt;li&gt;Det enabled&lt;br/&gt;
        On invocation of SoAd_IfTransmit() with SduDataPtr = NULL_PTR, SoAd shall call
        TcpIp_UdpTransmit() which shall trigger SoAd_CopyTxData().
        Simulate an IP fragmentation by setting BufLength of SoAd_CopyTxData() smaller than
        SduLength of SoAd_IfTransmit(). SoAd_CopyTxData() shall raise Det error SOAD_E_TRIGGERTXBUF
        and  return BUFREQ_E_NOT_OK. As a result TcpIp_UdpTransmit() shall not return OK and
        SoAd shall close the socket connection.&lt;/li&gt;
        &lt;/ul&gt;
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_125_IfTransmit_NullSduDataPtr_IPFrag</srcid><srcstatus/><internalId>1543</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_3050</srcid><srcstatus/><internalId>848</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_3234</srcid><srcstatus/><internalId>851</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.Dsn.Func0101.Udp.IfTransmit.NullPtr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>947</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1072</internalId></specobject>
    <specobject>
      <id>SoAd.Dsn.Func0101.Tx.Tcp.If.Det.SduDataPtr.NullPtr</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>12456</sourceline>
      <version>1</version>
      <description>
        For a configuration:
        &lt;ul&gt;
            &lt;li&gt;Communication Protocol TCP&lt;/li&gt;
            &lt;li&gt;API IF&lt;/li&gt;
            &lt;li&gt;Direction Tx&lt;/li&gt;
            &lt;li&gt;Det enabled
            On invocation of SoAd_IfTransmit() with SduDataPtr as NULL_PTR for a TCP connection,
            SOAD_E_INV_ARG will be reported to DET and E_NOT_OK returned.&lt;/li&gt;
        &lt;/ul&gt;
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_IfTransmit_Tcp_NullSduDataPtr</srcid><srcstatus/><internalId>1336</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_1565</srcid><srcstatus/><internalId>825</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.Dsn.Func0101.Udp.IfTransmit.NullPtr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>947</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1073</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Functional requirements: TLS extension">
    <specobject>
      <id>SoAd.Dsn.Func.TLS.SoAdTlsEnabled_Conf</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>12487</sourceline>
      <version>1</version>
      <description>
        Name: SoAdTlsEnabled
        Type: boolean
        Description: Switches TLS extension ON or OFF.
         true: enabled (ON).
         false: disabled (OFF).
      </description>
      <comment>
          This is a configuration parameter requirement without functional specification.
        </comment>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1074</internalId></specobject>
    <specobject>
      <id>SoAd.Dsn.Func.TLS.SoAdTlsConnectionRef_Conf</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>12504</sourceline>
      <version>1</version>
      <description>
        Name: SoAdTlsConnectionRef
        Type: reference
        Description: References to the TlsConnection.
      </description>
      <comment>
          This is a configuration parameter requirement without functional specification.
        </comment>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1075</internalId></specobject>
    <specobject>
      <id>SoAd.Dsn.Func.TLS.Udp</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>12519</sourceline>
      <version>1</version>
      <description>
        If SoAdTlsEnabled is TRUE, SoAdSocketProtocol is SoAdSocketUdp and SoAdTlsConnectionRef
        is valid, SoAd shall call TcpIp_ChangeParamter() with TCPIP_PARAMID_TLS_CONNECTION_ASSIGNMENT
        and the configured id [as:ref(SoAdTlsConnectionRef)/TlsConnectionId]
        after TcpIp_GetSocket() was called successfully.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_TlsUdpChangeParameter</srcid><srcstatus/><internalId>1667</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.TLS_Extension</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>952</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1076</internalId></specobject>
    <specobject>
      <id>SoAd.Dsn.Func.TLS.Tcp_Client_ChangeParameter</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>12541</sourceline>
      <version>1</version>
      <description>
        If SoAdTlsEnabled is TRUE, SoAdSocketProtocol is SoAdSocketTcp,
        SoAdSocketTcpInitiate is TRUE and SoAdTlsConnectionRef is valid,
        SoAd shall call TcpIp_ChangeParamter() with TCPIP_PARAMID_TLS_CONNECTION_ASSIGNMENT
        and the configured id [as:ref(SoAdTlsConnectionRef)/TlsConnectionId] after
        TcpIp_GetSocket() was called successfully.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_TlsTcpClient_ConnectionEstablishment</srcid><srcstatus/><internalId>1668</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.TLS_Extension</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>952</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1077</internalId></specobject>
    <specobject>
      <id>SoAd.Dsn.Func.TLS.Tcp_TcpAccepted_ChangeParameter</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>12564</sourceline>
      <version>1</version>
      <description>
        If SoAdTlsEnabled is TRUE, and a client wants to connect, TcpIp will call SoAd_TcpAccepted()
        and in this function, SoAd shall call TcpIp_ChangeParamter() with
        TCPIP_PARAMID_TLS_CONNECTION_ASSIGNMENT and the configured id
        [as:ref(SoAdTlsConnectionRef)/TlsConnectionId] if SoAdTlsConnectionRef is valid.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_TlsTcpChangeParameter_InitiateFalse</srcid><srcstatus/><internalId>1669</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.TLS_Extension</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>952</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1078</internalId></specobject>
    <specobject>
      <id>SoAd.Dsn.Func.TLS.Tcp.TlsHandshakeEstablished</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>12586</sourceline>
      <version>1</version>
      <description>
        If TLS connection is fully established(after SoAd_TcpAccepted() call and TLS handshake
        is finished), TcpIp shall call
        SoAd_TcpIpEvent() to mark the connection as established and allow data exchange.
      </description>
      <verifycrit>
        &lt;ul&gt;
          &lt;li&gt;EC invalid: OC
            &lt;ul&gt;
              &lt;li&gt;Test cases:
                &lt;ul&gt;
                  &lt;li&gt;SoAd_ConTest_00_03_TlsTcpChangeParameter_InitiateFalse&lt;/li&gt;
                  &lt;li&gt;SoAd_ConTest_00_03_TlsTcpClient_ConnectionEstablishment&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
                &lt;li&gt;Expected behavior:
                  &lt;ul&gt;
                    &lt;li&gt;SoConMode is RECONNECT&lt;/li&gt;
                    &lt;li&gt;Received frames are discarded.&lt;/li&gt;
                  &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Input parameters:
                &lt;ul&gt;
                  &lt;li&gt;SoAd_TcpIpEvent(TCPIP_TLS_HANDSHAKE_SUCCEEDED): not called&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;EC valid: OC
            &lt;ul&gt;
              &lt;li&gt;Test cases:
                &lt;ul&gt;
                  &lt;li&gt;SoAd_ConTest_00_03_TlsTcpChangeParameter_InitiateFalse&lt;/li&gt;
                  &lt;li&gt;SoAd_ConTest_00_03_TlsTcpClient_ConnectionEstablishment&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Expected behavior:
                &lt;ul&gt;
                  &lt;li&gt;SoConMode is ONLINE&lt;/li&gt;
                  &lt;li&gt;Received frames are processed&lt;/li&gt;
                  &lt;li&gt;TCP TP Rx data stream is established.&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Input parameters:
                &lt;ul&gt;
                  &lt;li&gt;SoAd_TcpIpEvent(TCPIP_TLS_HANDSHAKE_SUCCEEDED): called&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_190_TLS_TcpIpEvents_UDP</srcid><srcstatus/><internalId>1614</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_03_TlsTcpClient_ConnectionEstablishment</srcid><srcstatus/><internalId>1668</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_03_TlsTcpChangeParameter_InitiateFalse</srcid><srcstatus/><internalId>1669</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.TLS_Extension</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>952</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1079</internalId></specobject>
    <specobject>
      <id>SoAd.Dsn.Func.TLS.Tcp.TlsCloseNotifyReceived</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>12654</sourceline>
      <version>1</version>
      <description>
        After SoAd_TcpIpEvent() is called with the event TCPIP_TLS_CLOSE_NOTIFY_RECEIVED,
        transmission of data shall not be possible anymore.
      </description>
      <verifycrit>
        &lt;ul&gt;
          &lt;li&gt;EC invalid: OC
            &lt;ul&gt;
              &lt;li&gt;Test cases:
                &lt;ul&gt;
                  &lt;li&gt;SoAd_ConTest_00_02_188_Tcp_TcpIpEvent_TLS_CLOSE_NOTIFY_RECEIVED&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
                &lt;li&gt;Expected behavior:
                  &lt;ul&gt;
                    &lt;li&gt;Transmission of frames is possible&lt;/li&gt;
                  &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Input parameters:
                &lt;ul&gt;
                  &lt;li&gt;SoAd_TcpIpEvent(TCPIP_TLS_CLOSE_NOTIFY_RECEIVED): not called&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;EC valid: OC
            &lt;ul&gt;
              &lt;li&gt;Test cases:
                &lt;ul&gt;
                  &lt;li&gt;SoAd_ConTest_00_02_188_Tcp_TcpIpEvent_TLS_CLOSE_NOTIFY_RECEIVED&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Expected behavior:
                &lt;ul&gt;
                  &lt;li&gt;Transmission of frames is not possible&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Input parameters:
                &lt;ul&gt;
                  &lt;li&gt;SoAd_TcpIpEvent(TCPIP_TLS_CLOSE_NOTIFY_RECEIVED): called&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_188_Tcp_TcpIpEvent_TLS_CLOSE_NOTIFY_RECEIVED</srcid><srcstatus/><internalId>1612</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_190_TLS_TcpIpEvents_UDP</srcid><srcstatus/><internalId>1614</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.TLS_Extension</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>952</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1080</internalId></specobject>
    <specobject>
      <id>SoAd.Dsn.Func.TLS.Tcp.TlsAlert</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>12716</sourceline>
      <version>1</version>
      <description>
        After SoAd_TcpIpEvent() is called with the event TCPIP_TLS_ALERT,
        transmission of data shall not be possible anymore.
      </description>
      <verifycrit>
        &lt;ul&gt;
          &lt;li&gt;EC invalid: OC
            &lt;ul&gt;
              &lt;li&gt;Test cases:
                &lt;ul&gt;
                  &lt;li&gt;SoAd_ConTest_00_02_187_Tcp_TcpIpEvent_TLS_ALERT&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
                &lt;li&gt;Expected behavior:
                  &lt;ul&gt;
                    &lt;li&gt;Transmission of frames is possible&lt;/li&gt;
                  &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Input parameters:
                &lt;ul&gt;
                  &lt;li&gt;SoAd_TcpIpEvent(TCPIP_TLS_ALERT): not called&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;EC valid: OC
            &lt;ul&gt;
              &lt;li&gt;Test cases:
                &lt;ul&gt;
                  &lt;li&gt;SoAd_ConTest_00_02_187_Tcp_TcpIpEvent_TLS_ALERT&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Expected behavior:
                &lt;ul&gt;
                  &lt;li&gt;Transmission of frames is not possible&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Input parameters:
                &lt;ul&gt;
                  &lt;li&gt;SoAd_TcpIpEvent(TCPIP_TLS_ALERT): called&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_187_Tcp_TcpIpEvent_TLS_ALERT</srcid><srcstatus/><internalId>1611</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_190_TLS_TcpIpEvents_UDP</srcid><srcstatus/><internalId>1614</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.TLS_Extension</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>952</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1081</internalId></specobject>
    <specobject>
      <id>SoAd.Dsn.Func.TLS.Tcp.TlsWarning</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>12778</sourceline>
      <version>1</version>
      <description>
        SoAd shall be able to receive the event TCPIP_TLS_WARNING via
        SoAd_TcpIpEvent(). If the event is received nothing shall happen.
      </description>
      <verifycrit>
        &lt;ul&gt;
          &lt;li&gt;EC invalid: OC
            &lt;ul&gt;
              &lt;li&gt;Test cases:
                &lt;ul&gt;
                  &lt;li&gt;SoAd_ConTest_00_02_189_Tcp_TcpIpEvent_TLS_WARNING&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
                &lt;li&gt;Expected behavior:
                  &lt;ul&gt;
                    &lt;li&gt;Transmission of frames is possible&lt;/li&gt;
                  &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Input parameters:
                &lt;ul&gt;
                  &lt;li&gt;SoAd_TcpIpEvent(TCPIP_TLS_WARNING): not called&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;EC valid: OC
            &lt;ul&gt;
              &lt;li&gt;Test cases:
                &lt;ul&gt;
                  &lt;li&gt;SoAd_ConTest_00_02_189_Tcp_TcpIpEvent_TLS_WARNING&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Expected behavior:
                &lt;ul&gt;
                  &lt;li&gt;Transmission of frames is still possible&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Input parameters:
                &lt;ul&gt;
                  &lt;li&gt;SoAd_TcpIpEvent(TCPIP_TLS_WARNING): called&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_189_Tcp_TcpIpEvent_TLS_WARNING</srcid><srcstatus/><internalId>1613</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_190_TLS_TcpIpEvents_UDP</srcid><srcstatus/><internalId>1614</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.TLS_Extension</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>952</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1082</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Functionality requirements: TCP connection without Rx buffer">
    <specobject>
      <id>SoAd.dsn.Func0110.Rx.Tcp.Tp.Header.NoSeg</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>12843</sourceline>
      <version>1</version>
      <description>
        On invocation of SoAd_RxIndication() receiving a complete PDU with header,
        SoAd shall pass data to the correct upper layer by calling
        [Up][SoAd][Tp]StartOfReception(), [Up][SoAd][Tp]CopyRxData() and
        [Up][SoAd][Tp]RxIndication().
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_118_NoBuff_HeaderNoSeg</srcid><srcstatus/><internalId>1569</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.dsn.Func0110.Rx.Tcp.Tp.Header.NoSeg.Invalid</srcid><srcstatus/><internalId>1084</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0110.SoAdSocketTpRxBufferMinDisabled</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>953</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1083</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0110.Rx.Tcp.Tp.Header.NoSeg.Invalid</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>12866</sourceline>
      <version>1</version>
      <description>
        f UL call of [Up][SoAd][Tp]CopyRxData() returns other than BUFREQ_OK SoAd shall call
        [Up][SoAd][Tp]RxIndication() result as E_NOT_OK.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_119_NoBuff_HeaderNoSeg_Invalid</srcid><srcstatus/><internalId>1570</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0110.Rx.Tcp.Tp.Header.NoSeg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1083</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1084</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0110.Rx.Tcp.Tp.Header.Seg</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>12886</sourceline>
      <version>1</version>
      <description>
        On invocation of SoAd_RxIndication() receiving a PDU with header with multiple TCP segments,
        SoAd shall pass data to the correct upper layer by calling [Up][SoAd][Tp]StartOfReception(),
        [Up][SoAd][Tp]CopyRxData() and [Up]_[SoAd][Tp]RxIndication().
      </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.dsn.Func0110.Rx.Tcp.Tp.Header.SegHeader</srcid><srcstatus/><internalId>1086</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0110.Rx.Tcp.Tp.Header.SegPdu</srcid><srcstatus/><internalId>1087</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0110.Rx.Tcp.Tp.Header.Seg.Invalid1_PduSeg</srcid><srcstatus/><internalId>1088</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0110.Rx.Tcp.Tp.Header.Seg.Invalid2_LastSeg</srcid><srcstatus/><internalId>1089</internalId></linkedfrom><linkedfrom><srcid>SoAd.dsn.Func0110.Rx.Tcp.Tp.Header.Seg.DiscardPdu</srcid><srcstatus/><internalId>1090</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0110.SoAdSocketTpRxBufferMinDisabled</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>953</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1085</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0110.Rx.Tcp.Tp.Header.SegHeader</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>12907</sourceline>
      <version>1</version>
      <description>
        On invocation of SoAd_RxIndication() receiving a segmented header at the end of a TCP segment,
        SoAd shall pass data to the correct upper as soon as remaining header and PDU is received
        with the next TCP segments.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_120_NoBuff_HeaderSeg</srcid><srcstatus/><internalId>1571</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0110.Rx.Tcp.Tp.Header.Seg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1085</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1086</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0110.Rx.Tcp.Tp.Header.SegPdu</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>12928</sourceline>
      <version>1</version>
      <description>
        On invocation of SoAd_RxIndication() receiving a segmented PDU, SoAd shall pass the
        PDU segment to the correct upper. SoAd shall pass the remaining PDU when the next
        TCP segment is received.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_121_NoBuff_PDUSeg</srcid><srcstatus/><internalId>1572</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0110.Rx.Tcp.Tp.Header.Seg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1085</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1087</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0110.Rx.Tcp.Tp.Header.Seg.Invalid1_PduSeg</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>12949</sourceline>
      <version>1</version>
      <description>
        If UL call of [Up][SoAd][Tp]CopyRxData() for a PDU segment returns other than BUFREQ_OK,
        SoAd shall call [Up][SoAd][Tp]RxIndication() result as E_NOT_OK.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_122_NoBuff_PDUSeg_Invalid01</srcid><srcstatus/><internalId>1573</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0110.Rx.Tcp.Tp.Header.Seg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1085</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1088</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0110.Rx.Tcp.Tp.Header.Seg.Invalid2_LastSeg</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>12969</sourceline>
      <version>1</version>
      <description>
        If UL call of [Up][SoAd][Tp]CopyRxData() for a last PDU segment returns other than BUFREQ_OK,
        SoAd shall call [Up][SoAd][Tp]RxIndication() result as E_NOT_OK.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_123_NoBuff_PDUSeg_Invalid02</srcid><srcstatus/><internalId>1574</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0110.Rx.Tcp.Tp.Header.Seg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1085</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1089</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0110.Rx.Tcp.Tp.Header.Seg.DiscardPdu</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>12989</sourceline>
      <version>1</version>
      <description>
        If a call of [Up][SoAd][Tp]CopyRxData() or [Up][SoAd][Tp]StartOfReception()
        returns other than BUFREQ_OK, the PDU shall be discarded and a reception of a new PDU shall
        be possible.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_123_NoBuff_PDUSeg_Invalid02</srcid><srcstatus/><internalId>1574</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_PartlyBuffered</srcid><srcstatus/><internalId>1676</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_RxTcpRxRingBufferCopyRxDataRejects</srcid><srcstatus/><internalId>1682</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_RxTcpRxRingBufferCopyRxDataAndStartOfReceptionReject</srcid><srcstatus/><internalId>1683</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_04_RxTcpRxRingBufferTpStartOfReceptionRejects</srcid><srcstatus/><internalId>1684</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0110.Rx.Tcp.Tp.Header.Seg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1085</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1090</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0110.Rx.Tcp.Tp.NoHeader</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>13010</sourceline>
      <version>1</version>
      <description>
        On invocation of SoAd_RxIndication() SoAd shall pass data to the upper layer
        multiple times in streaming mode by calling [Up]_[SoAd][Tp]CopyRxData().
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_124_NoBuff_NoHeader</srcid><srcstatus/><internalId>1575</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.dsn.Func0110.Rx.Tcp.Tp.NoHeader.Invalid</srcid><srcstatus/><internalId>1092</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0110.SoAdSocketTpRxBufferMinDisabled</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>953</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1091</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0110.Rx.Tcp.Tp.NoHeader.Invalid</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>13031</sourceline>
      <version>1</version>
      <description>
        If UL call of [Up][SoAd][Tp]CopyRxData() returns other than BUFREQ_OK SoAd shall call
        [Up][SoAd][Tp]RxIndication() result as E_NOT_OK.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_125_NoBuff_NoHeaderInvalid</srcid><srcstatus/><internalId>1576</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_125_NoBuff_ULBufferZero_NoHeaderInvalid</srcid><srcstatus/><internalId>1577</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0110.Rx.Tcp.Tp.NoHeader</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1091</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1092</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Functionality requirements: Remote Address Handling">
    <specobject>
      <id>SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.Uninit</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>13053</sourceline>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_ReleaseRemoteAddr() shall check that
        the service SoAd_Init() was previously called. If the check fails,
        SoAd_ReleaseRemoteAddr() shall raise the development error SOAD_E_NOTINIT.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_ReleaseRemoteAddr_NoInit</srcid><srcstatus/><internalId>1279</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.RemoteAddressHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>966</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1093</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.Udp.RemoteAddrAndPort_WildCards</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>13075</sourceline>
      <version>1</version>
      <description>
        If SoAd_ReleaseRemoteAddr() is called for an UDP socket connection that has the remote address
        and port configured to be wildcards, the remote address shall be reset and the socket
        state shall be changed to RECONNECT.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_2071</srcid><srcstatus/><internalId>893</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_129_MainDuringSending_RemoteAdressReleased_WildCard</srcid><srcstatus/><internalId>1580</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.RemoteAddressHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>966</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00762</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>387</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1094</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.InvalidSoConId</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>13102</sourceline>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_ReleaseRemoteAddr() shall check that
        the SoConId used is valid. If the check fails,
        SoAd_ReleaseRemoteAddr() shall raise the development error SOAD_E_INV_ARG.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_ReleaseRemoteAddr_InvalidSoConId</srcid><srcstatus/><internalId>1321</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.RemoteAddressHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>966</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1095</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.Udp.UsedSetRemoteAddr</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>13124</sourceline>
      <version>1</version>
      <description>
        SoAd_ReleaseRemoteAddr shall only reset the remote address of an UDP socket connection if
        remote address was not set with SoAd_SetRemoteAddr()
      </description>
      <comment>&lt;comment/&gt;</comment>
      <verifycrit>
      &lt;ul&gt;
        &lt;li&gt;EC valid: OC
            &lt;ul&gt;
              &lt;li&gt;Test cases:
                  &lt;ul&gt;
                    &lt;li&gt;tbd&lt;/li&gt;
                  &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Expected behavior:
                  &lt;ul&gt;
                    &lt;li&gt;Remote address shall be reset to configured value&lt;/li&gt;
                    &lt;li&gt;Socket connection shall be in state RECONNECT&lt;/li&gt;
                  &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Input parameters:
                &lt;ul&gt;
                    &lt;li&gt;Socket connection is open&lt;/li&gt;
                    &lt;li&gt;UdpAliveTimeout is 0&lt;/li&gt;
                    &lt;li&gt;SoAd_SetRemoteAddr() was not called&lt;/li&gt;
                    &lt;li&gt;Remote address was set with SoAd_SetUniqueRemoteAddr()&lt;/li&gt;
                    &lt;li&gt;SoAd_ReleaseRemoteAddr was called&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;EC invalid: OC
            &lt;ul&gt;
              &lt;li&gt;Test cases:
                  &lt;ul&gt;
                    &lt;li&gt;tbd&lt;/li&gt;
                  &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Expected behavior:
                &lt;ul&gt;
                    &lt;li&gt;Remote address shall not be reset to configured value&lt;/li&gt;
                    &lt;li&gt;Socket connection shall be in state ONLINE&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Input parameters:
                  &lt;ul&gt;
                    &lt;li&gt;Socket connection is open&lt;/li&gt;
                    &lt;li&gt;UdpAliveTimeout is 0&lt;/li&gt;
                    &lt;li&gt;SoAd_SetRemoteAddr() was called&lt;/li&gt;
                    &lt;li&gt;Remote address was set with SoAd_SetUniqueRemoteAddr()&lt;/li&gt;
                    &lt;li&gt;SoAd_ReleaseRemoteAddr was called&lt;/li&gt;
                  &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_1999</srcid><srcstatus/><internalId>889</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_01_Con03_Udp_SoCon7_SetUniqueRemoteAddr_SetRemoteAddr_NOK</srcid><srcstatus/><internalId>1400</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.RemoteAddressHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>966</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1096</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.RemoteAddressHandling.SetRemoteAddr.Udp.LockState</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>13198</sourceline>
      <version>1</version>
      <description>
        A remote address of an UDP socket connection shall be locked for SoAd_SetRemoteAddr() if:
        SoAd_SetUniqueRemoteAddr() is called more often than SoAd_ReleaseRemoteAddr()
        OR
        UdpAliveTimeout is not 0
        OR
        RxTx is in progress
      </description>
      <comment>&lt;comment/&gt;</comment>
      <verifycrit>
        &lt;ul&gt;
            &lt;li&gt;EC valid: AC
                &lt;ul&gt;
                  &lt;li&gt;Test cases:
                      &lt;ul&gt;
                        &lt;li&gt;SoAd_ConTest_00_02_128_MainDuringSending_RemoteAddressReleased_Exact&lt;/li&gt;
                      &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;Expected behavior:
                      &lt;ul&gt;
                        &lt;li&gt;Remote address is not changed by SoAd_SetRemoteAddr()&lt;/li&gt;
                        &lt;li&gt;SoAd_SetRemoteAddr() returns E_NOT_OK&lt;/li&gt;
                      &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;Input parameters:
                    At least one input parameter has to be true:
                    &lt;ul&gt;
                        &lt;li&gt;SoAd_SetUniqueRemoteAddr(): called/not called&lt;/li&gt;
                        &lt;li&gt;UdpAliveTimeout of SoConId: is not 0/is 0&lt;/li&gt;
                        &lt;li&gt;RxTx of SoConId: is in progress/is not in progress&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;EC invalid: OC
              &lt;ul&gt;
                  &lt;li&gt;Test cases:
                    &lt;ul&gt;
                      &lt;li&gt;SoAd_ConTest_00_02_129_MainDuringSending_RemoteAdressReleased_WildCard&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;Expected behavior:
                      &lt;ul&gt;
                          &lt;li&gt;Remote address is changed by SoAd_SetRemoteAddr()&lt;/li&gt;
                          &lt;li&gt;SoAd_SetRemoteAddr() returns E_OK&lt;/li&gt;
                      &lt;/ul&gt;
                  &lt;/li&gt;

                  &lt;li&gt;Input parameters:
                    &lt;ul&gt;
                      &lt;li&gt;SoAd_SetUniqueRemoteAddr(): not called&lt;/li&gt;
                      &lt;li&gt;UdpAliveTimeout of SoConId: is 0&lt;/li&gt;
                      &lt;li&gt;RxTx of SoConId: is not in progress&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
        &lt;/ul&gt;
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_1231</srcid><srcstatus/><internalId>886</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_01_Con03_Udp_SoCon7_SetUniqueRemoteAddr_ReleaseRemoteAddress_FFFF_NOK</srcid><srcstatus/><internalId>1401</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_128_MainDuringSending_RemoteAddressReleased_Exact</srcid><srcstatus/><internalId>1579</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_129_MainDuringSending_RemoteAdressReleased_WildCard</srcid><srcstatus/><internalId>1580</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.RemoteAddressHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>966</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00743</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>356</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1097</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.Tcp.UsedSetRemoteAddr</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>13278</sourceline>
      <version>1</version>
      <description>
        SoAd_ReleaseRemoteAddr shall only reset the remote address of an TCP socket connection if
        remote address was not set with SoAd_SetRemoteAddr()
      </description>
      <comment>&lt;comment/&gt;</comment>
      <verifycrit>
      &lt;ul&gt;
        &lt;li&gt;EC valid: OC
          &lt;ul&gt;
              &lt;li&gt;Test cases:
                &lt;ul&gt;
                  &lt;li&gt;tbd&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Expected behavior:
                &lt;ul&gt;
                    &lt;li&gt;Remote address shall be reset to configured value&lt;/li&gt;
                    &lt;li&gt;Socket connection shall be in state CLOSED&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Input parameters:
                &lt;ul&gt;
                    &lt;li&gt;Socket connection is closed&lt;/li&gt;
                    &lt;li&gt;SoAd_SetRemoteAddr() was not called&lt;/li&gt;
                    &lt;li&gt;Remote address was set with SoAd_SetUniqueRemoteAddr()&lt;/li&gt;
                    &lt;li&gt;SoAd_ReleaseRemoteAddr was called&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;EC invalid: OC
          &lt;ul&gt;
              &lt;li&gt;Test cases:
                &lt;ul&gt;
                  &lt;li&gt;tbd&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Expected behavior:
                &lt;ul&gt;
                  &lt;li&gt;Remote address shall not be reset to configured value&lt;/li&gt;
                  &lt;li&gt;Socket connection shall be in state CLOSED&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Input parameters:
                &lt;ul&gt;
                    &lt;li&gt;Socket connection is closed&lt;/li&gt;
                    &lt;li&gt;SoAd_SetRemoteAddr() was called&lt;/li&gt;
                    &lt;li&gt;Remote address was set with SoAd_SetUniqueRemoteAddr()&lt;/li&gt;
                    &lt;li&gt;SoAd_ReleaseRemoteAddr was called&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_2031</srcid><srcstatus/><internalId>890</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_01_Con03_Udp_SoCon0_ReleaseRemoteAddress_TCP_SetRemoteAddrUsed</srcid><srcstatus/><internalId>1404</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.RemoteAddressHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>966</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1098</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.RxIndication</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>13351</sourceline>
      <version>1</version>
      <description>
        It shall be possible for the upper layer to release the remote address of the receiving
        SocketConnection in context of the SoAd_RxIndication call if the remote address was set due
        to SoAd_RxIndication and no UdpAliveTimeout is configured.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <verifycrit>
      &lt;ul&gt;
        &lt;li&gt;EC valid: OC
          &lt;ul&gt;
              &lt;li&gt;Test cases:
                &lt;ul&gt;
                  &lt;li&gt;SoAd_ConTest_00_02_170_ReleaseRemoteAddrInRxIndication&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Expected behavior:
                &lt;ul&gt;
                  &lt;li&gt;Remote address shall be reset to configured value&lt;/li&gt;
                  &lt;li&gt;Socket connection shall be in state RECONNECT&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Input parameters:
                &lt;ul&gt;
                    &lt;li&gt;Socket connection is open&lt;/li&gt;
                    &lt;li&gt;UdpAliveTimeout is disabled&lt;/li&gt;
                    &lt;li&gt;Remote address is set to ANY&lt;/li&gt;
                    &lt;li&gt;SoAd_RxIndication is called&lt;/li&gt;
                    &lt;li&gt;UL_RxIndication callout calls SoAd_ReleaseRemoteAddr() for the receiving
                      SocketConnection&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_170_ReleaseRemoteAddrInRxIndication</srcid><srcstatus/><internalId>1593</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.RemoteAddressHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>966</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1099</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.TcpServer</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>13402</sourceline>
      <version>1</version>
      <description>
        If SoAd_ReleaseRemoteAddr() was called for the last upper layer that required this socket
        (Number of SoAd_SetUniqueRemoteAddr() calls equals number of SoAd_ReleaseRemoteAddr()
        calls), SoAd shall not leave the state ONLINE unless the connection gets explicitly
        closed by upper layer or by remote TCP client.
      </description>
      <comment>
        A TCP clients is always the note to start a connection and it is also responsible to
        close the connection afterwards.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_TcpServer_ReleaseRemoteAddr</srcid><srcstatus/><internalId>1673</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_2045</srcid><srcstatus/><internalId>891</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.RemoteAddressHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>966</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1100</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.TcpClient</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>13429</sourceline>
      <version>1</version>
      <description>
        If SoAd_ReleaseRemoteAddr() was called for the last upper layer that required this socket
        (Number of SoAd_SetUniqueRemoteAddr() calls equals number of SoAd_ReleaseRemoteAddr()
        calls), SoAd shall reset the remote address to the configured values and reconnect the
        connection.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_TcpClient_RemoteAddrHandlingAfterRestart</srcid><srcstatus/><internalId>1671</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_03_TcpClient_RemoteAddrHandlingAfterClosure</srcid><srcstatus/><internalId>1672</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_2048</srcid><srcstatus/><internalId>892</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.RemoteAddressHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>966</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1101</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.RemoteAddressHandling.KeepRemoteAddrAfterRestartClose</id>
      <status>approved</status>
      <source>EB</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>13453</sourceline>
      <version>1</version>
      <description>
        If remote address was set via SoAd_SetUniqueRemoteAddr(), not release with
        the same amount of SoAd_ReleaseRemoteAddr() and the connections leaves
        ONLINE, SoAd shall keep the remote address.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_TcpClient_RemoteAddrHandlingAfterRestart</srcid><srcstatus/><internalId>1671</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_03_TcpClient_RemoteAddrHandlingAfterClosure</srcid><srcstatus/><internalId>1672</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_03_Lib.c_86</srcid><srcstatus/><internalId>801</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.RemoteAddressHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>966</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1102</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Functionality requirements: SoAd_IfTransmit() Fanout">
    <specobject>
      <id>SoAd.dsn.Func0146.Fanout.ECUC_FanOutRetValueOrControlled</id>
      <status>approved</status>
      <source>DSN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>13479</sourceline>
      <version>1</version>
      <description>
        Name: SoAdFanOutRetValueOrControlled
        Path: SoAdConfig/SoAdPduRoute/SoAdFanOutRetValueOrControlled
        Description:
        If this parameter is enabled then communication from one PduRoute to
        multiple PduRouteDest via SoAd_IfTransmit() returns E_OK as long as at
        least one of the transmission attempts succeeds. If not, all of the
        attempts have to be successful.  A possible use case is DTLS protected
        SOME/IP-TP fanout.
        Multiplicity 1
        Type: EcucBooleanParamDef
        Default value: false
        ConfigurationClass:
        Post-Build time X VARIANT-POST-BUILD
        Scope: local
        Dependency: -
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1103</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0146.Fanout.FanOutRetValueOrControlled</id>
      <status>approved</status>
      <source>DSN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>13506</sourceline>
      <version>1</version>
      <description>
        If SoAdConfig/SoAdPduRoute/SoAdFanOutRetValueOrControlled is enabled on
        the Source PduRoute then communication to multiple PduRoute Destinations via
        SoAd_IfTransmit() returns E_OK as long as at least one of the
        transmission attempts succeeds. If the parameter is disabled, then SWS_SoAd_00648 applies.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_556</srcid><srcstatus/><internalId>823</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_TxPduFanOut_OK_if_one_Success_Udp</srcid><srcstatus/><internalId>1815</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_TxPduFanOut_OK_if_one_Success_Tcp</srcid><srcstatus/><internalId>1816</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0146.Fanout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>963</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1104</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Functionality requirements: Tcp Connection">
    <specobject>
      <id>SoAd.Func0111.dsn.Tcp.Tp.Tx.HeaderMode</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>13533</sourceline>
      <version>1</version>
      <description>
        For a TCP connection with:
        &lt;ul&gt;
            &lt;li&gt;Header mode enabled&lt;/li&gt;
            &lt;li&gt;TP PDUs&lt;/li&gt;
        &lt;/ul&gt;
        It shall be possible transmit TP PDUs.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <verifycrit>
      &lt;ul&gt;
        &lt;li&gt;EC invalid 1: OC
          &lt;ul&gt;
              &lt;li&gt;Test cases:
                &lt;ul&gt;
                  &lt;li&gt;SoAd_ConTest_00_02_170_ReleaseRemoteAddrInRxIndication&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Expected behavior:
                &lt;ul&gt;
                    &lt;li&gt;If TP PDU gets rejected by TcpIp, the TxQuotsa shall
                      not block the socket connection for next PDU.&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Input parameters:
                &lt;ul&gt;
                    &lt;li&gt;TCP socket connection&lt;/li&gt;
                    &lt;li&gt;SoAdSocketTcpImmediateTpTxConfirmation = FALSE&lt;/li&gt;
                    &lt;li&gt;1st TP PDU to be rejected by TcpIp&lt;/li&gt;
                    &lt;li&gt;2nd TP PDU accepted by TcpIp&lt;/li&gt;
                    &lt;li&gt;TxQuota shall be smaller than 1st TP PDU + 2nd TP PDU.&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_05_TxTp.c_798</srcid><srcstatus/><internalId>815</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_172_TCP_TP_PduRejected_TxQuota</srcid><srcstatus/><internalId>1595</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0111.Tcp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>954</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1105</internalId></specobject>
    <specobject>
      <id>SoAd.Func0111.dsn.Tcp.If.Rx.FrameBigger64k</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>13588</sourceline>
      <version>1</version>
      <description>
        For a TCP connection with:
        &lt;ul&gt;
            &lt;li&gt;Header mode enabled&lt;/li&gt;
            &lt;li&gt;IF PDUs&lt;/li&gt;
        &lt;/ul&gt;
        It shall not be possible transmit PDUs with Length in Header bigger than 64k.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <verifycrit>
      &lt;ul&gt;
        &lt;li&gt;EC invalid 1: OC
          &lt;ul&gt;
              &lt;li&gt;Test cases:
                &lt;ul&gt;
                  &lt;li&gt;SoAd_ConTest_00_02_171_TCP_Header_bigger_64k&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Expected behavior:
                &lt;ul&gt;
                  &lt;li&gt;If PDU with header length greater 64k is detected with rxindication it shall be rejected.&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Input parameters:
                &lt;ul&gt;
                  &lt;li&gt;TCP socket connection&lt;/li&gt;
                  &lt;li&gt;SoAdPduHeaderEnable = TRUE&lt;/li&gt;
                  &lt;li&gt;RxBuffer with header bigger than 64k&lt;/li&gt;
                 &lt;/ul&gt;
              &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_171_TCP_Header_bigger_64k</srcid><srcstatus/><internalId>1594</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0111.Tcp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>954</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1106</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Functionality requirements: UDP Connection">
    <specobject>
      <id>SoAd.dsn.Func0120.Udp.ECUC_SoAdSkipIfTxConfirmation</id>
      <status>approved</status>
      <source>DSN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>13641</sourceline>
      <version>1</version>
      <description>
        Name SoAdSkipIfTxConfirmation
        Path: SoAdConfig/SoAdPduRoute/SoAdSkipIfTxConfirmation
        Description
        This config parameter enables the functionality to skip Tx confirmation processing
        of the PDU it belongs to.
        Multiplicity 1
        Type EcucBooleanParamDef
        Default value false
        ConfigurationClass
        Post-Build time X VARIANT-POST-BUILD
        Scope / Dependency scope: local  dependency: -
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1107</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0120.Udp.SkipIfTxConfirmation</id>
      <status>approved</status>
      <source>DSN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>13664</sourceline>
      <version>1</version>
      <description>
        If SoAdBswModules/SoAdIfTxConfirmation is
        disabled for an upper layer, then the processing of SoAdIfTxConfirmation shall be skipped.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_1935</srcid><srcstatus/><internalId>826</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_3437</srcid><srcstatus/><internalId>854</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_09_UdpRetryForSoConGroup_DisabledTxConfirmation</srcid><srcstatus/><internalId>1748</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0120.Udp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>955</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1108</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0120.Udp.SkipIfTxConfirmationPerPdu</id>
      <status>approved</status>
      <source>DSN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>13686</sourceline>
      <version>1</version>
      <description>
        If SoAdSkipIfTxConfirmation is enabled then SoAdIfTxConfirmation shall be skipped for this
        PDU even if SoAdBswModules/SoAdIfTxConfirmation is enabled.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_1936</srcid><srcstatus/><internalId>827</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_3438</srcid><srcstatus/><internalId>855</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_173_nPduUdpTx_SkipTxConfirmationPerPdu</srcid><srcstatus/><internalId>1596</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_174_MetaData_Tcp_TxIf_SkipTxConf</srcid><srcstatus/><internalId>1597</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0120.Udp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>955</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1109</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0120.Udp.AssignedLocalPort.NotOverWritten</id>
      <status>approved</status>
      <source>DSN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>13709</sourceline>
      <version>1</version>
      <description>
        If from in a SoConGroup an SocketConnection is assigned, released and afterwards assigned again the assigned local port must not change.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_01_UdpSM_User.c_341</srcid><srcstatus/><internalId>800</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_175_Assigned_Local_Port_SoConGroup_Multiple_NotOverwritten</srcid><srcstatus/><internalId>1598</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0120.Udp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>955</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1110</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.IsConnectionReady</id>
      <status>approved</status>
      <source>DSN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>13730</sourceline>
      <version>1</version>
      <description>
        Service name: SoAd_IsConnectionReady
        Syntax: TcpIp_ReturnType SoAd_IsConnectionReady(
        SoAd_SoConIdType SoConId,
        TcpIp_SockAddrType* const RemoteAddrPtr
        )
        Service ID[hex]: 0x31
        Sync/Async: Synchronous
        Reentrancy: Reentrant
        Parameters (in):
        SoConId
        Index of the socket connection which connection status shall be checked.
        RemoteAddrPtr
        Pointer to remote address which connection status shall be checked.
        Parameters (inout): None
        Parameters (out): None
        Return value:
        TcpIp_ReturnType
        TCPIP_E_PENDING   Connection establishment in progress. Retry in next main function.
        TCPIP_E_NOT_OK    Transmission not possible.
        TCPIP_OK          Connection ready for transmission.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_ComTest_01_SingleGenUL</srcid><srcstatus/><internalId>1213</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.dsn.IsConnectionReady.ServiceId</srcid><srcstatus/><internalId>1112</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1111</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.IsConnectionReady.ServiceId</id>
      <status>approved</status>
      <source>DSN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>13764</sourceline>
      <version>1</version>
      <description>
        The macro SOAD_ISCONNECTIONREADY_SVCID shall have the value: Service ID[hex]: 0x31.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ComTest_04_ServiceId</srcid><srcstatus/><internalId>1216</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.IsConnectionReady</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1111</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1112</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.IsConnectionReady.Uninit</id>
      <status>approved</status>
      <source>DSN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>13784</sourceline>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_IsConnectionReady() shall check that
        the service SoAd_Init() was previously called. If the check fails,
        SoAd_IsConnectionReady() shall raise the development error SOAD_E_NOTINIT and return
        TCPIP_E_NOT_OK.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_IsConnectionReady_NoInit</srcid><srcstatus/><internalId>1255</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1113</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.IsConnectionReady.InvalidSoConId</id>
      <status>approved</status>
      <source>DSN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>13801</sourceline>
      <version>1</version>
      <description>
        If development error detection is enabled: SoAd_IsConnectionReady() shall check that
        the SoConId used is valid. If the check fails,
        SoAd_IsConnectionReady() shall raise the development error SOAD_E_INV_ARG and return
        TCPIP_E_NOT_OK.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_00_IsConnectionReady_ParamInvalid</srcid><srcstatus/><internalId>1301</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1114</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.IsConnectionReady.InvalidSocketId</id>
      <status>approved</status>
      <source>DSN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>13818</sourceline>
      <version>1</version>
      <description>
        If SocketId of the corresponding SoConId is SOAD_SOCKETID_INVALID: SoAd_IsConnectionReady()
        shall not call TcpIp_IsConnectionReady and shall return TCPIP_E_NOT_OK.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_IsConnectionReady</srcid><srcstatus/><internalId>1634</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1115</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.IsConnectionReady.ValidSocketId</id>
      <status>approved</status>
      <source>DSN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>13833</sourceline>
      <version>1</version>
      <description>
        If SocketId of the corresponding SoConId is set: SoAd_IsConnectionReady()
        shall call TcpIp_IsConnectionReady and shall pass through the return value of
        TcpIp_IsConnectionReady to the caller.
      </description>
      <comment>&lt;comment/&gt;</comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_IsConnectionReady</srcid><srcstatus/><internalId>1634</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1116</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Functionality requirements: Multiple PSIs of the same service">
    <specobject>
      <id>SoAd.dsn.Func0130.Rx.Udp.If.EnableServiceInstance</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>13852</sourceline>
      <version>1</version>
      <description>
       For a SocketRoute that:
       &lt;ul&gt;
        &lt;li&gt;has multiple SocketRouteDestinations&lt;/li&gt;
        &lt;li&gt;has different RoutingGroups per Destination&lt;/li&gt;
        &lt;li&gt;references one SoConGroup&lt;/li&gt;
        &lt;li&gt;Upper Layer using IF APIs&lt;/li&gt;
       &lt;/ul&gt;
       if SoAd_EnableSpecificRouting is called for one the SocketConnections of the SoConGroup and
       one of the RoutingGroups configured at one of the SocketRoute Destinations it shall be
       possible to dynamically link the SoConnection with the SocketRouteDestination.
      </description>
      <verifycrit>
        After Calling SoAd_EnableSpecificRouting message to the correct SocketConnection are routed
        to the correct SocketRoute Destination.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_19_UDP_EnableServiceInstance</srcid><srcstatus/><internalId>1776</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_3289</srcid><srcstatus/><internalId>897</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0130.MultiplePSI</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>956</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00760</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>378</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1117</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0130.Rx.Udp.If.DisableServiceInstance</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>13889</sourceline>
      <version>1</version>
      <description>
       For a SocketRoute that:
       &lt;ul&gt;
        &lt;li&gt;has multiple SocketRouteDestinations&lt;/li&gt;
        &lt;li&gt;has different RoutingGroups per Destination&lt;/li&gt;
        &lt;li&gt;references one SoConGroup&lt;/li&gt;
        &lt;li&gt;Upper Layer using IF APIs&lt;/li&gt;
       &lt;/ul&gt;
       if for a dynamically linked SoConnection/RoutingGroup SoAd_DisableSpecificRouting was called
       it shall be possible to disconnect the linkage of the SoConnection/RoutingGroup.
      </description>
      <verifycrit>
        After Calling SoAd_DisableSpecificRouting, messages to the correct SocketConnection
        are rejected and not routed.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_19_UDP_DisableInactiveServiceInstance</srcid><srcstatus/><internalId>1778</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_19_UDP_SwitchServiceInstance</srcid><srcstatus/><internalId>1779</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_3567</srcid><srcstatus/><internalId>901</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0130.MultiplePSI</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>956</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1118</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0130.Rx.Udp.If.SwitchServiceInstance</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>13921</sourceline>
      <version>1</version>
      <description>
       For a SocketRoute that:
       &lt;ul&gt;
        &lt;li&gt;has at least two SocketRouteDestinations &lt;/li&gt;
        &lt;li&gt;has different RoutingGroups per Destination&lt;/li&gt;
        &lt;li&gt;references one SoConGroup&lt;/li&gt;
        &lt;li&gt;Upper Layer using IF APIs&lt;/li&gt;
       &lt;/ul&gt;
       if SoAd_EnableSpecificRouting was called for one the SocketConnections of the SoConGroup and
       one of the RoutingGroups configured at one of the SocketRoute Destinations it shall be
       possible to call SoAd_DisableSpecificRouting and then call SoAd_EnableSpecificRouting with
       the same SocketConnection but a different RoutingGroup and therefore dynamically link the
       SocketConnection to another SocketRouteDestination.
      </description>
      <verifycrit>
        For an enabled SocketConnection/RoutingGroup Combination was dynamically bound and after
        the Routing was disabled and SoAd_EnableSpecificRouting is called for the same
        SocketConnection was and a different RoutingGroup messages to the correct SocketConnection
        are routed to the correct SocketRoute Destination.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_19_UDP_SwitchServiceInstance</srcid><srcstatus/><internalId>1779</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0130.MultiplePSI</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>956</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00761</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>379</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1119</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0130.Rx.Udp.If.ParallelServiceInstance</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>13961</sourceline>
      <version>1</version>
      <description>
       For a SocketRoute that:
       &lt;ul&gt;
        &lt;li&gt;has at least two SocketRouteDestinations &lt;/li&gt;
        &lt;li&gt;has different RoutingGroups per Destination&lt;/li&gt;
        &lt;li&gt;references one SoConGroup&lt;/li&gt;
        &lt;li&gt;Upper Layer using IF APIs&lt;/li&gt;
       &lt;/ul&gt;
       if two SocketConnection / RoutingGroup Combinations are called with
       SoAd_EnableSpecificRouting it shall be possible to use those routes parallel.
      </description>
      <verifycrit>
        After Calling SoAd_EnableSpecificRouting for different SocketConnection/RoutingGroup
        combinations simultaneously, messages to the correct SocketConnection are routed
        to the correct SocketRoute Destination.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_19_UDP_ParallelServiceInstance</srcid><srcstatus/><internalId>1780</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0130.MultiplePSI</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>956</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1120</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0130.Rx.Udp.If.EnableSameServiceInstanceMultipleTimes</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>13993</sourceline>
      <version>1</version>
      <description>
       For a SocketRoute that:
       &lt;ul&gt;
        &lt;li&gt;has at least two SocketRouteDestinations &lt;/li&gt;
        &lt;li&gt;has different RoutingGroups per Destination&lt;/li&gt;
        &lt;li&gt;referencs one SoConGroup&lt;/li&gt;
        &lt;li&gt;Upper Layer using IF APIs&lt;/li&gt;
       &lt;/ul&gt;
       it shall be possible to activate the same ServiceInstance multiple times without a DET.
      </description>
      <verifycrit>
        After Calling SoAd_EnableSpecificRouting for the same SocketConnection/RoutingGroup
        Combination multiple time, messages to the correct SocketConnection are routed
        to the correct SocketRoute Destination and no DET shall be raised.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_19_UDP_EnableServiceInstanceTwice</srcid><srcstatus/><internalId>1777</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_19_UDP_EnableTwoRoutingGroupsDisableOne</srcid><srcstatus/><internalId>1783</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_08_MainFunction.c.m4_3297</srcid><srcstatus/><internalId>898</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0130.MultiplePSI</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>956</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1121</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Functionality requirements: TcpTp Error Handling">
    <specobject>
      <id>SoAd.dsn.Func0140.Tx.Tcp.Tp.NoDataSent</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>14027</sourceline>
      <version>1</version>
      <description>
       If Up_SoAdTpCopyTxData return with
       BUFREQ_E_NOT_OK for a TCP socket connection and no data was yet copied, SoAd shall
       &lt;ul&gt;
        &lt;li&gt;discard the transmission&lt;/li&gt;
        &lt;li&gt;retain the TCP socket connection&lt;/li&gt;
       &lt;/ul&gt;
      </description>
      <verifycrit>
        Transmission was aborted with either
        &lt;ul&gt;
          &lt;li&gt;SoAdSocketTcpImmediateTpTxConfirmation=true&lt;/li&gt;
          &lt;li&gt;SoAdSocketTcpImmediateTpTxConfirmation=false&lt;/li&gt;
        &lt;/ul&gt;
        Further transmission or reception for this socket connection are enabled.
        &lt;ul&gt;
          &lt;li&gt;New transmit requests shall be allowed with E_OK.&lt;/li&gt;
          &lt;li&gt;Received Messages shall be accepted&lt;/li&gt;
        &lt;/ul&gt;
        for this TCP socket connection
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_179_Tx_Tcp_ULCopyTxData_NOT_OK_ImmediateTpTxConfirmation</srcid><srcstatus/><internalId>1602</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_05_ULCopyTxData_NOT_OK_TCP_Trans</srcid><srcstatus/><internalId>1712</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_05_ULCopyTxData_NOT_OK_TCP_Rec</srcid><srcstatus/><internalId>1713</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_05_TxTp.c_782</srcid><srcstatus/><internalId>814</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0140.TcpTpErrorHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>957</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1122</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0140.Tx.Tcp.Tp.DataSent.DisableFurtherCom</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>14065</sourceline>
      <version>1</version>
      <description>
       If Up_SoAdTpCopyTxData return with
       BUFREQ_E_NOT_OK for a TCP socket connection and data was already copied, SoAd shall
       &lt;ul&gt;
        &lt;li&gt;disable further
            transmission or reception for this socket connection (i.e. new transmit requests shall
            be rejected with E_NOT_OK and received messages shall simply be discarded).
        &lt;/li&gt;
       &lt;/ul&gt;
      </description>
      <verifycrit>
        Further transmission or reception for this socket connection are disabled.
        &lt;ul&gt;
          &lt;li&gt;New transmit requests shall be rejected with E_NOT_OK.&lt;/li&gt;
          &lt;li&gt;Received Messages shall simply be discarded&lt;/li&gt;
       &lt;/ul&gt;
       for this TCP socket connection
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_177_CopyTxData_TpTcp_BUF_NOK_Data_Sent_TCP_Closed</srcid><srcstatus/><internalId>1600</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_178_CopyTxData_TpTcp_BUF_NOK_TCP_NOK</srcid><srcstatus/><internalId>1601</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_05_TxTp.c_811</srcid><srcstatus/><internalId>817</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0140.TcpTpErrorHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>957</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1123</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0140.Tx.Tcp.Tp.DataSent.CloseSocketConnection</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>14100</sourceline>
      <version>1</version>
      <description>
       If Up_SoAdTpCopyTxData return with
       BUFREQ_E_NOT_OK for a TCP socket connection and data was already copied, SoAd shall
       &lt;ul&gt;
        &lt;li&gt;close the socket connection in the next SoAd_MainFunction().&lt;/li&gt;
       &lt;/ul&gt;
      </description>
      <verifycrit>
        After the next SoAd_MainFunction() the TCP socket connection shall be closed.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_177_CopyTxData_TpTcp_BUF_NOK_Data_Sent_TCP_Closed</srcid><srcstatus/><internalId>1600</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_178_CopyTxData_TpTcp_BUF_NOK_TCP_NOK</srcid><srcstatus/><internalId>1601</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_05_TxTp.c_808</srcid><srcstatus/><internalId>816</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0140.TcpTpErrorHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>957</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1124</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Functionality requirements: UDP Tx Buffer Pool">
    <specobject>
      <id>SoAd.dsn.Func0141.Tx.Udp.If.TriggerNever.BufferUnavailable</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>14130</sourceline>
      <version>1</version>
      <description>
       In case a nPduUdpTxBuffer is used for a socket connection
       and TriggerMode is set to TRIGGER_NEVER for the actual PDU
       (SoAdPduRouteDest) and no Tx Buffer from the UDP Tx Buffer Pool
       is available, SoAd shall transmit all PDUs of the
       nPduUdpTxBuffer (if any) and the current PDU by calling TcpIp_UdpTransmit().
      </description>
      <verifycrit>
        The nPduUdpTxBuffer was sent via TcpIp_UdpTransmit().
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_nPduUdpTx_TRIGGER_NEVER_BufferPool_Unavailable</srcid><srcstatus/><internalId>1853</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_2220</srcid><srcstatus/><internalId>835</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0141.UdpTxBufferPool</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>958</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1125</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0141.Tx.Udp.If.BufferUnavailable</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>14156</sourceline>
      <version>1</version>
      <description>
       In case a nPduUdpTxBuffer is used for a socket connection
       and for a call of SoAd_IfTransmit() the UDP socket is occupied and no buffer is available,
       SoAd shall reject the request and return E_NOT_OK;
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_15_nPduUdpTx_NoBufferWhileSocketOccupied</srcid><srcstatus/><internalId>1859</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0141.UdpTxBufferPool</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>958</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1126</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0141.Tx.Udp.If.UDPRetry.BufferUnavailable</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>14177</sourceline>
      <version>1</version>
      <description>
       In case Udp Retry functionality is used for a socket connection
       and TcpIp_UdpTransmit() returns TCPIP_E_PHYS_ADDR_MISS
       and no Tx Buffer from the UDP Tx Buffer Pool
       is available, SoAd shall drop the PDU that is beeing sent.
      </description>
      <verifycrit>
        No PDU was stored in nPduUdpTxBuffer after TcpIp_UdpTransmit().
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_UDP_RETRY_TRIGGER_NEVER_BufferPool_Unavailable</srcid><srcstatus/><internalId>1854</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_UDP_RETRY_TRIGGER_NEVER_BufferPool_Available</srcid><srcstatus/><internalId>1855</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_1969</srcid><srcstatus/><internalId>828</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0141.UdpTxBufferPool</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>958</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1127</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0141.Tx.Udp.If.ShadowBuffer.Unavailable</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>14203</sourceline>
      <version>1</version>
      <description>
       In case a nPduUdpTxBuffer is used and SoAdEnableShadowBufferSize
       is set to 0 and during ongoing sending a tx request for the same
       SoAdSocketConnection is sent the PDU shall be dropped.
      </description>
      <verifycrit>
        PDUs will be dropped for either
        &lt;ul&gt;
          &lt;li&gt;Interrupt happens during sending SoAd_IfTransmit().&lt;/li&gt;
          &lt;li&gt;Interrupt happens during postponed sending in SoAd_MainFunction()&lt;/li&gt;
       &lt;/ul&gt;
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SOAD_nPduUdpTx_INTERRUPT_SAME_SOCKET_DIFFERENT_PDU_NO_SHADOWBUFFER_SOCKETINUSE</srcid><srcstatus/><internalId>1856</internalId></linkedfrom><linkedfrom><srcid>TS_SOAD_nPduUdpTx_INTERRUPT_SAME_SOCKET_DIFFERENT_PDU_NO_SHADOWBUFFER_TXACTIVE</srcid><srcstatus/><internalId>1857</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_2098</srcid><srcstatus/><internalId>831</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SoAd_Int_06_TxIf.c_2137</srcid><srcstatus/><internalId>834</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0141.UdpTxBufferPool</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>958</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1128</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Functionality requirements: Specific Routing Groups">
    <specobject>
      <id>SoAd.dsn.Func0142.EnableSpecificRoutingGroup</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>14233</sourceline>
      <version>1</version>
      <description>
        A call of SoAd_EnableSpecificRoutingGroup() shall
        enable all corresponding socket routes and PDU routes for a dedicated socket connection.
      </description>
      <verifycrit>
        &lt;ul&gt;
          &lt;li&gt;Reception shall only be possible for the dedicated socket connection.&lt;/li&gt;
          &lt;li&gt;Transmission shall only be possible for the dedicated socket connection.&lt;/li&gt;
        &lt;/ul&gt;
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_182_DisableSpecificRG</srcid><srcstatus/><internalId>1605</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_184_SpecificRG_EnabledSocketRouteOnlyReceivesOnCorrectSoCon</srcid><srcstatus/><internalId>1608</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0142.SpecificRoutingGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>959</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1129</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0142.DisableSpecificRoutingGroup</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>14258</sourceline>
      <version>1</version>
      <description>
        A call of SoAd_DisableSpecificRoutingGroup() shall
        disable all corresponding socket routes and PDU routes for a dedicated socket connection if
        no other specific routing group is enabled for the same socket routes, PDU routes and
        socket connection combination.
      </description>
      <verifycrit>
        &lt;ul&gt;
          &lt;li&gt;Socket routes belonging to other socket connections of the same group shall not be
              affected.
          &lt;/li&gt;
        &lt;/ul&gt;
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_182_DisableSpecificRG</srcid><srcstatus/><internalId>1605</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_184_SpecificRG_EnabledSocketRouteOnlyReceivesOnCorrectSoCon</srcid><srcstatus/><internalId>1608</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0142.SpecificRoutingGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>959</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1130</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0142.MixGlobalAndSpecificRoutingGroup</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>14286</sourceline>
      <version>1</version>
      <description>
       If global and specific routing groups are referenced by a socket route or PDU route, then it
       shall not be possible to enable the global routing group for these routes to not interfere
       with the specific routing groups.
      </description>
      <verifycrit>
        &lt;ul&gt;
          &lt;li&gt;A socket route shall refer to a mixture of global and specific routing group.&lt;/li&gt;
        &lt;/ul&gt;
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_02_183_MixedRoutingGroupForSameSocketRoute</srcid><srcstatus/><internalId>1606</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_183_MixedRoutingGroupForSameSocketRoute_Reporting_OFF</srcid><srcstatus/><internalId>1607</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0142.SpecificRoutingGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>959</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1131</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Functionality requirements: Dtls Pooling">
    <specobject>
      <id>SoAd.dsn.Func0143.SoAd_DtlsConnectionStateChg.Dtls.Connecting.Match</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>14313</sourceline>
      <version>1</version>
      <description>
        If no socket connection is already configured with the address
        specified by RemoteAddrPtr, SoAd_DtlsConnectionStateChg() shall:
        &lt;ul&gt;
          &lt;li&gt;1. For the Dtls status SOAD_DTLS_STATE_CONNECTING&lt;/li&gt;
          &lt;li&gt;2. choose an unused socket connection using the best match algorithm described
        in [SWS_SoAd_00680]&lt;/li&gt;
          &lt;li&gt;3. set it to the remote address specified by RemoteAddrPtr&lt;/li&gt;
        &lt;/ul&gt;
        A socket connection is "unused" if its actual remote address has an IP address wildcard
        and/or port wildcard.
      </description>
      <verifycrit>
        &lt;ul&gt;
          &lt;li&gt;Unused socket connection was found according to the best match algorithm.&lt;/li&gt;
        &lt;/ul&gt;
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_SoAd_DtlsConnectionStateChg_Wildcard</srcid><srcstatus/><internalId>1652</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_03_SoAd_DtlsConnectionStateChg_IpAddrMatch</srcid><srcstatus/><internalId>1653</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_03_SoAd_DtlsConnectionStateChg_IpV6</srcid><srcstatus/><internalId>1655</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd.SWS_SoAd_00680</srcid><srcstatus/><internalId>282</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>960</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1132</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0143.SoAd_DtlsConnectionStateChg.Dtls.Connecting.NoMatch</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>14346</sourceline>
      <version>1</version>
      <description>
        If no socket connection can be found that matches with the address
        specified by RemoteAddrPtr, SoAd_DtlsConnectionStateChg() shall call TcpIp_DtlsClose() for
        that RemoteAddrPtr.
      </description>
      <verifycrit>
        &lt;ul&gt;
          &lt;li&gt;TcpIp_DtlsClose() was called for RemoteAddrPtr that has no match.&lt;/li&gt;
        &lt;/ul&gt;
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_SoAd_DtlsConnectionStateChg_NoMatch</srcid><srcstatus/><internalId>1656</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>960</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1133</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0143.SoAd_DtlsConnectionStateChg.Dtls.Closed</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>14371</sourceline>
      <version>1</version>
      <description>
        If SoAd_DtlsConnectionStateChg() is called with state
        SOAD_DTLS_STATE_CLOSED, SetUniqueRemoteAddrCnt is 0 and
        SOAD_SOCONSTATE_FLAG_USED_SETREMOTEADDR is not set then the
        RemoteAddrPtr shall be reset.
      </description>
      <verifycrit>
        &lt;ul&gt;
          &lt;li&gt;SoAd_DtlsConnectionStateChg() resets the RemoteAddrPtr&lt;/li&gt;
        &lt;/ul&gt;
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_SoAd_DtlsConnectionStateChg_Dtls_Closed</srcid><srcstatus/><internalId>1660</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>960</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1134</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0143.SoAd_DtlsConnectionStateChg.Dtls.Connected</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>14397</sourceline>
      <version>1</version>
      <description>
        SoAd_DtlsConnectionStateChg() called with SOAD_DTLS_STATE_CONNECTED
        shall do nothing.
      </description>
      <verifycrit>
        &lt;ul&gt;
          &lt;li&gt;No Api has been called by SoAd_DtlsConnectionStateChg()&lt;/li&gt;
        &lt;/ul&gt;
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_SoAd_DtlsConnectionStateChg_Dtls_Connected</srcid><srcstatus/><internalId>1661</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>960</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1135</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0143.DtlsClose</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>14421</sourceline>
      <version>1</version>
      <description>
        Whenever a remote address is no longer used and TcpIp_Close() is not called SoAd shall call
        TcpIp_DtlsClose() for that remote address.
      </description>
      <verifycrit>
        &lt;ul&gt;
          &lt;li&gt;TcpIp_DtlsClose() was called after the following MainFunction for a socket connection
          groups where more than one socket connection was opened but only one was closed by calling
          SoAd_CloseSoCon().&lt;/li&gt;
          &lt;li&gt;TcpIp_DtlsClose() was called for a socket connection which is not in an active
          transmission or reception and SoAd_ReleaseRemoteAddr() was called.&lt;/li&gt;
          &lt;li&gt;TcpIp_DtlsClose() was called during a udp alive timeout.&lt;/li&gt;
          &lt;li&gt;TcpIp_DtlsClose() was called after the Event TCPIP_UDP_CLOSED was processed in a
          MainFunction.&lt;/li&gt;
          &lt;li&gt;TcpIp_DtlsClose() was called after the following MainFunction for a socket connection
          which is in an active transmission or reception and SoAd_ReleaseRemoteAddr() was called.
          &lt;/li&gt;
          &lt;li&gt;TcpIp_DtlsClose() was called for the same socket connection two times while no
          SoAd_ReleaseRemoteAddr() call was made in between.&lt;/li&gt;
        &lt;/ul&gt;
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Dtls_OpenSocon</srcid><srcstatus/><internalId>1407</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_01_Udp_Dtls_ReleaseRemoteAdress</srcid><srcstatus/><internalId>1408</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_185_Dtls_UdpAlive_Supervision</srcid><srcstatus/><internalId>1609</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_02_186_SoAd_Dtls_Close_After_Release</srcid><srcstatus/><internalId>1610</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_03_SoAd_SoAd_SetRemoteAddr_Twice</srcid><srcstatus/><internalId>1654</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>960</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1136</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="Functionality requirements: Wildcard Check">
    <specobject>
      <id>SoAd.dsn.Func0144.WildCardCheck.Checks</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>14459</sourceline>
      <version>1</version>
      <description>
        SoAd shall check incoming Remote Addresses for wild card configuration. A wild card
        configuration consists of an IP-Address and a port number set to 0.
      </description>
      <verifycrit>
        &lt;ul&gt;
          &lt;li&gt;SoAd_RxIndication() does not call UL_RxIndication() with otherwise valid
            parameter&lt;/li&gt;
          &lt;li&gt;SoAd_TcpAccepted() does not call TcpIp_ChangeParameter() with otherwise valid
            parameter&lt;/li&gt;
          &lt;li&gt;SoAd_DtlsConnectionStateChg() shall call TcpIp_DtlsClose() for otherwise valid parameter
          &lt;/li&gt;
       &lt;/ul&gt;
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_ConTest_00_03_SoAd_DtlsConnectionStateChg_Remote_WildCard</srcid><srcstatus/><internalId>1657</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_03_SoAd_RxIndication_Remote_WildCard</srcid><srcstatus/><internalId>1658</internalId></linkedfrom><linkedfrom><srcid>SoAd_ConTest_00_03_SoAd_TcpAccepted_Remote_WildCard</srcid><srcstatus/><internalId>1659</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0144.WildCardCheck</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>961</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1137</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="PduHeaderId binary search">
    <specobject>
      <id>SoAd.dsn.Generator.SocketRouteOrder</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>14827</sourceline>
      <version>1</version>
      <description>
                SocketRoutes shall be sorted for each SoCon in consecutive PduHeaderId order.
              </description>
      <comment>
                This guarantees the correct execution of the binary search over SocketRoutes
              </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.SoAdExt.Autosar/Java/dreisoft/tresos/soad/generator/output/postbuild/Arrays.java_86</srcid><srcstatus/><internalId>909</internalId></linkedfrom><linkedfrom><srcid>src/plugin.SoAdExt.Autosar/Java/dreisoft/tresos/soad/generator/output/postbuild/Arrays.java_881</srcid><srcstatus/><internalId>910</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1138</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Generator.AllocationOfTxTcpDataObjects</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>14842</sourceline>
      <version>1</version>
      <description>
                Pdu/SoCon TxTcpDataObjects shall only be created if the Connection Protocol
                is TCP and the API Type is IF or if TcpImmediateTpTxConf is not enabled.
              </description>
      <comment>
                This guarantees that only TCP connections have a TxTcpDataObject and UDP
                connections have an invalid value
              </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.SoAdExt.Autosar/Java/dreisoft/tresos/soad/generator/output/postbuild/config/SoAd_PduRouteDestVirtualType.java_51</srcid><srcstatus/><internalId>911</internalId></linkedfrom><linkedfrom><srcid>src/plugin.SoAdExt.Autosar/Java/dreisoft/tresos/soad/generator/output/postbuild/config/SoAd_SoConType.java_95</srcid><srcstatus/><internalId>912</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1139</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs" title="IP address format">
    <specobject>
      <id>SoAd.dsn.Generator.IPAdresses.Ipv4</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>14861</sourceline>
      <version>1</version>
      <description>
                SoAd Generator shall be able to process IPv4 addresses
              </description>
      <comment>
                IPv4 addresses shall be detected by their format.
              </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.SoAdExt.Autosar/Java/dreisoft/tresos/soad/generator/input/check/IPAddressCheck.java_86</srcid><srcstatus/><internalId>902</internalId></linkedfrom><linkedfrom><srcid>src/plugin.SoAdExt.Autosar/Java/dreisoft/tresos/soad/generator/input/check/IPAddressCheck.java_113</srcid><srcstatus/><internalId>904</internalId></linkedfrom><linkedfrom><srcid>src/plugin.SoAdExt.Autosar/Java/dreisoft/tresos/soad/generator/input/check/IPAddressCheck.java_132</srcid><srcstatus/><internalId>906</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.soad.test.tools.IPAddressCheckTest.testInvalidIPv4Addresses</srcid><srcstatus/><internalId>1192</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.soad.test.tools.IPAddressCheckTest.testInvalidIPv4AddressRanges</srcid><srcstatus/><internalId>1193</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.soad.test.tools.IPAddressCheckTest.testValidIPv4AddressRanges</srcid><srcstatus/><internalId>1194</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1140</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Generator.IPAdresses.Ipv6</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>14877</sourceline>
      <version>1</version>
      <description>
                SoAd Generator shall be able to process IPv6 addresses
              </description>
      <comment>
                IPv6 addresses shall be detected by their format. Compressed and uncompressed 
                representations are allowed.
              </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.SoAdExt.Autosar/Java/dreisoft/tresos/soad/generator/input/check/IPAddressCheck.java_89</srcid><srcstatus/><internalId>903</internalId></linkedfrom><linkedfrom><srcid>src/plugin.SoAdExt.Autosar/Java/dreisoft/tresos/soad/generator/input/check/IPAddressCheck.java_116</srcid><srcstatus/><internalId>905</internalId></linkedfrom><linkedfrom><srcid>src/plugin.SoAdExt.Autosar/Java/dreisoft/tresos/soad/generator/input/check/IPAddressCheck.java_145</srcid><srcstatus/><internalId>907</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.soad.test.tools.IPAddressCheckTest.testInvalidIPv6Addresses</srcid><srcstatus/><internalId>1189</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.soad.test.tools.IPAddressCheckTest.testValidIPv6AddressesNoCompress</srcid><srcstatus/><internalId>1190</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.soad.test.tools.IPAddressCheckTest.testValidIPv6AddressesCompressed</srcid><srcstatus/><internalId>1191</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1141</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>SoAd.dsn.Func0102.Xdm.nPduBuffer.HeaderModeDisabled</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>14964</sourceline>
      <version>1</version>
      <description>
        If SoAdSocketnPduUdpTxBufferMin is configured but SoAdPduHeaderEnable of corresponding
        socket connection group is disabled then an error shall be raised.
      </description>
      <comment>
        Rationale:
        Multiple PDUs within one frame can only be extracted if header mode is enabled.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01022_nPduWithoutPduHeaderId</srcid><srcstatus/><internalId>1901</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Udp.Tx.If.nPduBuffer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>948</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1142</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.XdmCheck.MetaData.Tx.Tp.SoConGroup</id>
      <status>approved</status>
      <source>dsn</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>14988</sourceline>
      <version>1</version>
      <description>
        For a PduRoute
        SoAdTxUpperLayerType = TP, SoAdTxSocketConnOrSocketConnBundleRef
        refers to SocketConnectionGroup and SoAdTxPduRef refers to PDU which has
        no MetaDataTypeRef/MetaDataItemType configured to SOCKET_CONNECTION_ID_16,
        an error shall be reported.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01019_SoAdTxSocketConnOrSocketConnBundleRef</srcid><srcstatus/><internalId>1898</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.MetaDataHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>946</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1143</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.XdmCheck.MetaData.Rx.Tp.SoConGroup</id>
      <status>approved</status>
      <source>dsn</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>15011</sourceline>
      <version>1</version>
      <description>
        For a configuration SoAdSocketRoute with SoAdRxUpperLayerType = TP,
        SoAdRxSocketConnOrSocketConnBundleRef refers to SocketConnectionGroup and SoAdRxPduRef
        refers to PDU which has no MetaDataTypeRef/MetaDataItemType configured to
        SOCKET_CONNECTION_ID_16, an error shall be reported.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01020_SoAdRxSocketConnOrSocketConnBundleRef</srcid><srcstatus/><internalId>1899</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.MetaDataHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>946</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1144</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.MCG.GeneratorOperationStatus.MemoryDataExtentionNeedsToBeSet</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>15033</sourceline>
      <version>1</version>
      <description>
        There shall be a test that verifies that an error message is shown when more
        than 65535 Bytes of PB RAM is used and SoAdDataMemSize is not set and
        SoAdDataMemSizeExtension is false.
      </description>
      <comment>
        Rationale:
        The error massage shall contain that SoAdDataMemSizeExtension needs
        to be enabled to use uint32.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01023_MemoryDataExtentionNeedsToBeSet</srcid><srcstatus/><internalId>1902</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1145</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.MCG.UnitTests.FunctionalTests.MaximumCalculation</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>15053</sourceline>
      <version>1</version>
      <description>
        Ensure that the correct maximum value is calculated for a given Collection.
      </description>
      <comment>
        Rationale:
        This unit test shall calculate the correct maximum value of a collection unsing Functional.
        Max functor. If the collection is empty the return value shall be the input value and the
        empty collection will be ignored. If the collection is not empty the return value shall be
        the highest value in that collecton or if the input value is the highest
        then the input value will be returned.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/plugin.SoAdExt.Autosar/Java/dreisoft/tresos/soad/generator/intermediate/postbuild/check/BufferCheck.java_129</srcid><srcstatus/><internalId>908</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dreisoft.tresos.soad.test.SoAdCodeGeneratorTest.testPduRoutesTriggerAlwaysSoAdSocketnPduUdpTxBufferMinIsSet</srcid><srcstatus/><internalId>1170</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.soad.test.tools.FunctionalTest.testMaxNonEmptyCollection</srcid><srcstatus/><internalId>1187</internalId></linkedfrom><linkedfrom><srcid>dreisoft.tresos.soad.test.tools.FunctionalTest.testMaxEmptyCollection</srcid><srcstatus/><internalId>1188</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1146</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0130.XdmCheck.MultiplePSI.NoTpApi</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>15075</sourceline>
      <version>1</version>
      <description>
        For a configuration with a SocketRoute with multiple SocketRouteDestinations all
        SocketRouteDestinations must be IF. Otherwise an error shall be reported.
      </description>
      <verifycrit>
        If a configuration as written in the description is used a generator error shall be
        reported.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SoAd_Extension.xdm.m4_960</srcid><srcstatus/><internalId>940</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01024_MultiplePSI_NoTpApi</srcid><srcstatus/><internalId>1903</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0130.MultiplePSI</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>956</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1147</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0130.XdmCheck.MultiplePSI.NoRoutingGroupRef</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>15100</sourceline>
      <version>1</version>
      <description>
        For a configuration with a SocketRoute with multiple SocketRouteDestinations and at least
        one of them has no Routing Group configured to it an error shall be reported.
      </description>
      <verifycrit>
        If a configuration as written in the description is used a generator error shall be
        reported.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SoAd_Extension.xdm.m4_971</srcid><srcstatus/><internalId>941</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01025_MultiplePSI_NoRoutingGroupRef</srcid><srcstatus/><internalId>1904</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0130.MultiplePSI</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>956</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1148</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0130.XdmCheck.MultiplePSI.SameRoutingGroupRef</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>15125</sourceline>
      <version>1</version>
      <description>
        For a configuration with a SocketRoute with multiple SocketRouteDestinations referencing the
        same SoAdRxRoutingGroupRef an error shall be reported.
      </description>
      <verifycrit>
        If a configuration as written in the description is used a generator error shall be
        reported.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SoAd_Extension.xdm.m4_982</srcid><srcstatus/><internalId>942</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01026_MultiplePSI_SameRoutingGroupRef</srcid><srcstatus/><internalId>1905</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0130.MultiplePSI</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>956</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1149</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0130.XdmCheck.MultiplePSI.NoSoConGroupRef</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>15150</sourceline>
      <version>1</version>
      <description>
        For a configuration with a SocketRoute having multiple SocketRouteDestinations configured
        but the SoAdRxSocketConnOrSocketConnBundleRef of that SocketRoute references a SoConGroupRef
        an error shall be reported.
      </description>
      <verifycrit>
        If a configuration as written in the description is used a generator error shall be
        reported.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SoAd_Extension.xdm.m4_879</srcid><srcstatus/><internalId>938</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01027_MultiplePSI_NoSoConGroupRef</srcid><srcstatus/><internalId>1906</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0130.MultiplePSI</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>956</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1150</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0130.XdmCheck.MultiplePSI.SoAdRoutingGroupIsEnabledAtInit</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>15176</sourceline>
      <version>1</version>
      <description>
        For a configuration with a SocketRoute that has multiple SocketRouteDestinations with
        SoAdRoutingGroup set and at least one of those SoAdRoutingGroup has EnabledAtInit set
        an error shall be reported.
      </description>
      <verifycrit>
        If a configuration as written in the description is used a generator error shall be
        reported.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SoAd_Extension.xdm.m4_987</srcid><srcstatus/><internalId>943</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01028_MultiplePSI_SoAdRoutingGroupIsEnabledAtInit</srcid><srcstatus/><internalId>1907</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0130.MultiplePSI</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>956</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1151</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0130.XdmCheck.MultiplePSI.NoGlobalRoutingGroupAllowed</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>15202</sourceline>
      <version>1</version>
      <description>
        For a configuration with a SocketRoute that has multiple SocketRouteDestinations with
        a SoConGroupRef set that is not referenced by exactly one SoAdSocketConnectionGroup
        an error shall be reported.
      </description>
      <verifycrit>
        If a configuration as written in the description is used a generator error shall be
        reported.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SoAd_Extension.xdm.m4_992</srcid><srcstatus/><internalId>944</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01029_MultiplePSI_NoGlobalRoutingGroupAllowed</srcid><srcstatus/><internalId>1908</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0130.MultiplePSI</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>956</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1152</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0141.XdmCheck.BufferPool.MaxRange</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>15228</sourceline>
      <version>1</version>
      <description>
        For a configuration with SoAdTxBufferPoolSize set and the value exceeds the
        number of socket connections configured for this socket connection group,
        an error shall be reported.
      </description>
      <verifycrit>
        If a configuration as written in the description is used a generator error shall be
        reported.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SoAd_EBParameters.xdm.m4_732</srcid><srcstatus/><internalId>925</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01031_BufferPool_MaxRange</srcid><srcstatus/><internalId>1910</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0141.UdpTxBufferPool</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>958</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1153</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0102.XdmCheck.nPdu.TP</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>15254</sourceline>
      <version>1</version>
      <description>
        For a configuration with SoAdSocketnPduUdpTxBufferMin enabled and a PduRoute which has
        SoAdTxUpperLayerType set to TP belonging to the same SoAdSocketConnectionGroup, an error
        shall be reported.
      </description>
      <rationale>
        A mixture of TP and nPDU IF PduRoutes would block each others transmission and buffer usage.
        It is also restricted according to ECUC_SoAd_00136.
      </rationale>
      <verifycrit>
        If a configuration as written in the description is used a generator error shall be
        reported.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SoAd_Extension.xdm.m4_362</srcid><srcstatus/><internalId>933</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01030_NPduTxBuffer_Tp_Mix</srcid><srcstatus/><internalId>1909</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Udp.Tx.If.nPduBuffer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>948</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1154</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0143.DtlsPooling.AutomaticSetup</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>15285</sourceline>
      <version>1</version>
      <description>
        For a configuration with SoAdDatagramTlsConnectionRef set and the
        SoAdSocketAutomaticSoConSetup set, an error shall be reported.
      </description>
      <rationale>
      </rationale>
      <verifycrit>
        If a configuration as written in the description is used a generator error shall be
        reported.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SoAd_Extension.xdm.m4_566</srcid><srcstatus/><internalId>934</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01032_Dtls_AutomaticSetup</srcid><srcstatus/><internalId>1911</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>960</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1155</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0143.DtlsPooling.Dtls_Not_With_Tcp</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>15312</sourceline>
      <version>1</version>
      <description>
        For a configuration with SoAdTlsConnectionRef set and referencing Tls Connection having
        TlsDtls enabled, an error shall be reported.
      </description>
      <rationale>
      </rationale>
      <verifycrit>
        If a configuration as written in the description is used a generator error shall be
        reported.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SoAd_Extension.xdm.m4_641</srcid><srcstatus/><internalId>935</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01033_Dtls_Not_With_Tcp</srcid><srcstatus/><internalId>1912</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>960</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1156</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0143.DtlsPooling.Dtls_UDP_Without_TlsDtls</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>15339</sourceline>
      <version>1</version>
      <description>
        For a configuration with a UDP Connection that has SoAdDatagramTlsConnectionRef set
        and referencing Tls Conneciton having TlsDtls disabled, an error shall be reported.
      </description>
      <rationale>
      </rationale>
      <verifycrit>
        If a configuration as written in the description is used a generator error shall be
        reported.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SoAd_EBParameters.xdm.m4_672</srcid><srcstatus/><internalId>921</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01034_Dtls_UDP_Without_TlsDtls</srcid><srcstatus/><internalId>1913</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>960</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1157</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0143.DtlsPooling.Dtls_UDP_With_Tls_On_Connection</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>15366</sourceline>
      <version>1</version>
      <description>
        For a configuration with a UDP Connection that has SoAdTlsConnectionRef, an error
        shall be reported.
      </description>
      <rationale>
      </rationale>
      <verifycrit>
        If a configuration as written in the description is used a generator error shall be
        reported.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SoAd_Extension.xdm.m4_645</srcid><srcstatus/><internalId>936</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01035_Dtls_UDP_With_Tls_On_Connection</srcid><srcstatus/><internalId>1914</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>960</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1158</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0143.DtlsPooling.NoTlsInstance</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>15393</sourceline>
      <version>1</version>
      <description>
        For a DTLS configuration where the linked TlsConnection has no instance configured, a
        warning shall be reported.
      </description>
      <rationale>
      </rationale>
      <verifycrit>
        If a configuration as written in the description is used, a generator warning shall be
        reported.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SoAd_EBParameters.xdm.m4_686</srcid><srcstatus/><internalId>923</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01036_Dtls_UDP_With_No_TlsInstances</srcid><srcstatus/><internalId>1915</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>960</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1159</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0143.DtlsPooling.TooFewTlsInstance</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>15420</sourceline>
      <version>1</version>
      <description>
        For a DTLS configuration where the linked TlsConnection has less instance configured as the
        number of socket connections, an warning shall be reported.
      </description>
      <rationale>
      </rationale>
      <verifycrit>
        If a configuration as written in the description is used, a generator warning shall be
        reported.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SoAd_EBParameters.xdm.m4_690</srcid><srcstatus/><internalId>924</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01037_Dtls_UDP_With_Too_Few_TlsInstances</srcid><srcstatus/><internalId>1916</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>960</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1160</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0143.DtlsPooling.Dtls_UDP_With_Duplicated_DtlsRef</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>15447</sourceline>
      <version>1</version>
      <description>
        For a configuration with a UDP Connection that references a DTlsConnection in
        SoAdDatagramTlsConnectionRef, which is already referenced by another SocketConnectionGroup,
        an error shall be reported.
      </description>
      <rationale>
      </rationale>
      <verifycrit>
        If a configuration as written in the description is used a generator error shall be
        reported.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SoAd_EBParameters.xdm.m4_677</srcid><srcstatus/><internalId>922</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01042_DTls_Duplicated_Reference</srcid><srcstatus/><internalId>1921</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>960</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1161</internalId></specobject>
    <specobject>
      <id>SoAd.Dsn.Func.TLS.TCP_With_DuplicatedTlsRef</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>15477</sourceline>
      <version>1</version>
      <description>
        For a configuration with a TCP Connection that references a TlsConnection in
        SoAdTlsConnectionRef, which is already referenced by another SocketConnection,
        an error shall be reported.
      </description>
      <rationale>
      </rationale>
      <verifycrit>
        If a configuration as written in the description is used a generator error shall be
        reported.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SoAd_Extension.xdm.m4_650</srcid><srcstatus/><internalId>937</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01041_Tls_Duplicated_Reference</srcid><srcstatus/><internalId>1920</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.TLS_Extension</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>952</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1162</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0145.SecurityEventReporting.No_References</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>15506</sourceline>
      <version>1</version>
      <description>
        For a configuration that enables SoAdEnableSecurityEventReporting and has no
        IdsM references, an error shall be reported.
      </description>
      <rationale>
      </rationale>
      <verifycrit>
        If a configuration as written in the description is used, a generator error shall be
        reported.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01038_IdsM_No_References</srcid><srcstatus/><internalId>1917</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0145.SecurityEventReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>962</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1163</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0145.SecurityEventReporting.Invalid_Reference</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>15532</sourceline>
      <version>1</version>
      <description>
        For a configuration that enables SoAdEnableSecurityEventReporting and has
        a reference enabled that points to an invalid node, an error shall be reported.
      </description>
      <rationale>
      </rationale>
      <verifycrit>
        If a configuration as written in the description is used, a generator error shall be
        reported.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01039_IdsM_Invalid_Reference</srcid><srcstatus/><internalId>1918</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0145.SecurityEventReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>962</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1164</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.Func0145.SecurityEventReporting.Duplicated_Reference</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>15558</sourceline>
      <version>1</version>
      <description>
        For a configuration that enables SoAdEnableSecurityEventReporting and has
        references enabled that point to the same node, an error should be reported.
      </description>
      <rationale>
      </rationale>
      <verifycrit>
        If a configuration as written in the description is used, a generator warning shall be
        reported.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01040_IdsM_Duplicated_Reference</srcid><srcstatus/><internalId>1919</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0145.SecurityEventReporting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>962</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1165</internalId></specobject>
    <specobject>
      <id>SoAd.dsn.XdmCheck.SocketRoute.SoAdRxSocketConnOrSocketConnBundleRef.SocketConnectionGroup.TcpMaxSize</id>
      <status>approved</status>
      <source>DESIGN</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/doc/project/design/pdf/SoAd_Design-profiled.xml</sourcefile>
      <sourceline>15583</sourceline>
      <version>1</version>
      <description>
        For a configuration with a SocketRoute that is referencing a SoAdSocketConnectionGroup which
        has its SoAdSocketProtocol set to TCP and has more then one SocketConnection a warning shall
        be reported.
      </description>
      <verifycrit>
        If a configuration as written in the description is used a generator error shall be reported.
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SoAd_Extension.xdm.m4_896</srcid><srcstatus/><internalId>939</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SoAd_GenTest01043_RoutingGroup_References_SocketConnectionGroup_With_Multiple_SoCon</srcid><srcstatus/><internalId>1922</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0111.Tcp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>954</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1166</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.SoAdCodeGeneratorTest.testMainFuncPeriodExceedsTxUdpTrgTO</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/SoAdCodeGeneratorTest.java</sourcefile>
      <sourceline>117</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>564</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1167</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.SoAdCodeGeneratorTest.testPduHeaderIdInsertedBeforePduTransmittedP0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/SoAdCodeGeneratorTest.java</sourcefile>
      <sourceline>132</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>564</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1168</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.SoAdCodeGeneratorTest.testPduHeaderIdInsertedBeforePduTransmittedP1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/SoAdCodeGeneratorTest.java</sourcefile>
      <sourceline>146</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>564</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1169</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.SoAdCodeGeneratorTest.testPduRoutesTriggerAlwaysSoAdSocketnPduUdpTxBufferMinIsSet</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/SoAdCodeGeneratorTest.java</sourcefile>
      <sourceline>160</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.MCG.UnitTests.FunctionalTests.MaximumCalculation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1146</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1170</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.SoAdCodeGeneratorTest.testNonNaturalSortingOfPduHeaderIdForSoAdRxPduHeaderId</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/SoAdCodeGeneratorTest.java</sourcefile>
      <sourceline>174</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>564</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1171</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.SoAdCodeGeneratorTest.testMetaDataTypePayloadType16</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/SoAdCodeGeneratorTest.java</sourcefile>
      <sourceline>188</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>564</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1172</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.comparator.FileSectionComparisonTest.testValidationErrors</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/comparator/FileSectionComparisonTest.java</sourcefile>
      <sourceline>67</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.MCG.UnitTests.FileSectionComparison</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>565</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1173</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.comparator.FileSectionComparisonTest.testValidationPasses</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/comparator/FileSectionComparisonTest.java</sourcefile>
      <sourceline>112</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.MCG.UnitTests.FileSectionComparison</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>565</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1174</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.comparator.FileSectionComparisonTest.testFoundSingleSection</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/comparator/FileSectionComparisonTest.java</sourcefile>
      <sourceline>126</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.MCG.UnitTests.FileSectionComparison</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>565</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1175</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.comparator.FileSectionComparisonTest.testFailToFindSingleSection</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/comparator/FileSectionComparisonTest.java</sourcefile>
      <sourceline>147</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.MCG.UnitTests.FileSectionComparison</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>565</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1176</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.comparator.FileSectionComparisonTest.testFoundTwoSections</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/comparator/FileSectionComparisonTest.java</sourcefile>
      <sourceline>187</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.MCG.UnitTests.FileSectionComparison</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>565</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1177</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.comparator.FileSectionComparisonTest.testFailToFindBothSections</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/comparator/FileSectionComparisonTest.java</sourcefile>
      <sourceline>218</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.MCG.UnitTests.FileSectionComparison</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>565</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1178</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.comparator.FileSectionComparisonTest.testComparisonFromFileSystemPass</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/comparator/FileSectionComparisonTest.java</sourcefile>
      <sourceline>257</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.MCG.UnitTests.FileSectionComparison</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>565</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1179</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.comparator.FileSectionComparisonTest.testComparisonFromFileSystemFail</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/comparator/FileSectionComparisonTest.java</sourcefile>
      <sourceline>278</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.MCG.UnitTests.FileSectionComparison</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>565</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1180</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.tools.AuxiliaryMethodsTest.testGetAddInfixShallInsertAnInfixAfterFirstOccurrenceOfTheSeparator</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/tools/AuxiliaryMethodsTest.java</sourcefile>
      <sourceline>24</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>564</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1181</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.tools.AuxiliaryMethodsTest.testGetAddInfixShallDoNothingIfANullStringIsPassedAsAnInput</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/tools/AuxiliaryMethodsTest.java</sourcefile>
      <sourceline>41</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>564</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1182</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.tools.AuxiliaryMethodsTest.testGetAddInfixShallDoNothingIfAnEmptyStringIsPassedAsAnInput</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/tools/AuxiliaryMethodsTest.java</sourcefile>
      <sourceline>54</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>564</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1183</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.tools.AuxiliaryMethodsTest.testGetAddInfixShallDoNothingIfAnEmptyInfixIsPassed</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/tools/AuxiliaryMethodsTest.java</sourcefile>
      <sourceline>67</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>564</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1184</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.tools.AuxiliaryMethodsTest.testGetAddInfixShallDoNothingIfANullInfixIsPassed</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/tools/AuxiliaryMethodsTest.java</sourcefile>
      <sourceline>80</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>564</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1185</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.tools.AuxiliaryMethodsTest.testGetAddInfixShallDoNothingIfANullSeparatorIsPassed</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/tools/AuxiliaryMethodsTest.java</sourcefile>
      <sourceline>93</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>564</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1186</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.tools.FunctionalTest.testMaxNonEmptyCollection</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/tools/FunctionalTest.java</sourcefile>
      <sourceline>29</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.MCG.UnitTests.FunctionalTests.MaximumCalculation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1146</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1187</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.tools.FunctionalTest.testMaxEmptyCollection</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/tools/FunctionalTest.java</sourcefile>
      <sourceline>42</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.MCG.UnitTests.FunctionalTests.MaximumCalculation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1146</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1188</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.tools.IPAddressCheckTest.testInvalidIPv6Addresses</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/tools/IPAddressCheckTest.java</sourcefile>
      <sourceline>24</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Generator.IPAdresses.Ipv6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1141</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1189</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.tools.IPAddressCheckTest.testValidIPv6AddressesNoCompress</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/tools/IPAddressCheckTest.java</sourcefile>
      <sourceline>51</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Generator.IPAdresses.Ipv6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1141</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1190</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.tools.IPAddressCheckTest.testValidIPv6AddressesCompressed</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/tools/IPAddressCheckTest.java</sourcefile>
      <sourceline>72</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Generator.IPAdresses.Ipv6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1141</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1191</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.tools.IPAddressCheckTest.testInvalidIPv4Addresses</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/tools/IPAddressCheckTest.java</sourcefile>
      <sourceline>92</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Generator.IPAdresses.Ipv4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1140</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1192</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.tools.IPAddressCheckTest.testInvalidIPv4AddressRanges</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/tools/IPAddressCheckTest.java</sourcefile>
      <sourceline>113</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Generator.IPAdresses.Ipv4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1140</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1193</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.tools.IPAddressCheckTest.testValidIPv4AddressRanges</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/tools/IPAddressCheckTest.java</sourcefile>
      <sourceline>130</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Generator.IPAdresses.Ipv4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1140</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1194</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.unit.input.ConverterTest.testStringToLongConversion</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/unit/input/ConverterTest.java</sourcefile>
      <sourceline>10</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>564</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1195</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.unit.input.ConverterTest.testStringToLongConversionInvalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/unit/input/ConverterTest.java</sourcefile>
      <sourceline>22</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>564</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1196</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.unit.input.Factory_Test.test_newCollection</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/unit/input/Factory_Test.java</sourcefile>
      <sourceline>428</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>564</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1197</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.unit.input.Factory_Test.test_newObject_fromDataContext</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/unit/input/Factory_Test.java</sourcefile>
      <sourceline>455</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>564</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1198</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.unit.input.Factory_Test.test_newObject_fromDataRoot</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/unit/input/Factory_Test.java</sourcefile>
      <sourceline>473</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>564</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1199</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.unit.input.Factory_Test.test_newReference</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/unit/input/Factory_Test.java</sourcefile>
      <sourceline>492</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>564</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1200</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.unit.xpath.XPathFunctionTest.testXPathFunctionsIsSpecificRG</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/unit/xpath/XPathFunctionTest.java</sourcefile>
      <sourceline>61</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>564</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1201</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.unit.xpath.XPathFunctionTest.testXPathFunctionsGetSoAdRoutesForPdu</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/unit/xpath/XPathFunctionTest.java</sourcefile>
      <sourceline>84</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>564</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1202</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.unit.xpath.XPathFunctionTest.testXPathFunctionsGetSoAdRoutesForRoutingGroup</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/unit/xpath/XPathFunctionTest.java</sourcefile>
      <sourceline>116</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>564</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1203</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.unit.xpath.XPathFunctionTest.testXPathFunctionsGetSoAdSocketConnectionGroupsOfSoAdRoutes</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/unit/xpath/XPathFunctionTest.java</sourcefile>
      <sourceline>150</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>564</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1204</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>dreisoft.tresos.soad.test.unit.xpath.XPathFunctionTest.testXPathFunctionGetInvalidHeaderIdRoutesOfService</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/junit/plugin.Test_SoAdExt.Autosar/Java/dreisoft/tresos/soad/test/unit/xpath/XPathFunctionTest.java</sourcefile>
      <sourceline>180</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.MCG.UnitTests</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>564</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1205</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SoAd_DBGINST_001</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/common_req/SoAd_DbgInst_Trace_APIs.c</sourcefile>
      <sourceline>40</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
   Test Dbg
&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 
  VP: Successful compilation test.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.DBGINST001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>730</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.DBGINST002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>731</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.DBGINST003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>732</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.DBGINST004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>733</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.DBGINST005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>734</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1206</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SoAd_Test_IsValidConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/common_req/SoAd_PbcfgM_Main_Impl_Test.c</sourcefile>
      <sourceline>71</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that the function SoAd_IsValidConfig() is implemented as specified.
  
Test Object: 
    SoAd_IsValidConfig()
  
Test Precondition: 
    The SoAd module is not initialized.
  
Test Execution: 
    01: Call the function SoAd_IsValidConfig() with an NULL_PTR.
    02: VP:
        The function must have returned with E_NOT_OK.
    03: Create an invalid configuration regarding the endianness and alignment.
    04: Call the function SoAd_IsValidConfig() with this invalid configuration.
    05: VP(SoAd.EB.PBCFGM106):
        The function must have returned with E_NOT_OK.
    The following 3 steps are only executed if the module has a link-time configuration:
        06: Create an invalid configuration regarding the link time configuration.
        07: Call the function SoAd_IsValidConfig() with this invalid configuration.
        08: VP(SoAd.EB.PBCFGM105):
                The function must have returned with E_NOT_OK.
    09: Create an invalid configuration regarding the compile time configuration.
    10: Call the function SoAd_IsValidConfig() with this invalid configuration.
    11: VP(SoAd.EB.PBCFGM104):
        The function must have returned with E_NOT_OK.
    12: Create an invalid configuration regarding the published information configuration.
    13: Call the function SoAd_IsValidConfig() with this invalid configuration.
    14: VP(SoAd.EB.PBCFGM104_1):
        The function must have returned with E_NOT_OK.
    15: Call the function SoAd_IsValidConfig() with a valid configuration.
    16: VP:
        The function must have returned with E_OK.
    17: VP(SoAd.EB.PBCFGM107):
        Check if SOAD_PBCFGM_SUPPORT_ENABLED is set to STD_ON.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.PBCFGM101</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>735</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PBCFGM102</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>736</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PBCFGM104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>737</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PBCFGM104_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>738</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PBCFGM105</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>739</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PBCFGM106</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>740</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PBCFGM107</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>741</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1207</internalId></specobject>
    <specobject>
      <id>SoAd_Test_VerifyInitWithPcfgM</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/common_req/SoAd_PbcfgM_Main_Impl_Test.c</sourcefile>
      <sourceline>225</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that the SoAd can be initialized via the PbcfgM.
  
Test Object: 
    SoAd_IsValidConfig()
  
Test Precondition: 
    The SoAd module must not have been initialized.
  
Test Execution: 
    01: Create an invalid configuration regarding the endianness and alignment.
    02: Call the function SoAd_Init() with this invalid configuration.
    03: VP:
        A Det call must have been performed correctly.
    04: Create an invalid configuration regarding the compile time configuration.
    05: Call the function SoAd_Init() with this invalid configuration.
    06: VP:
        A Det call must have been performed correctly.
    The following 3 steps are only executed if the module has a link-time configuration:
        07: Create an invalid configuration regarding the link time configuration.
        08: Call the function SoAd_Init() with this invalid configuration.
        09: VP:
            A Det call must have been performed correctly.
    10: Create an invalid configuration regarding the published information configuration.
    11: Call the function SoAd_Init() with this invalid configuration.
    12: VP:
        A Det call must have been performed correctly.
    13: Initialize the PbcfgM_GetConfig() stub that way that it can return a valid function.
    14: Call the function SoAd_Init() with a null pointer.
    15: VP:
        The function PbcfgM_GetConfig() must have been called once.
    16: VP:
        No Det call must have been performed.
    17: VP:
        The module internal configuration pointer SoAd_RootPtr must equal
        the pointer supplied to the initialization function
    18: PbcfgM_GetConfig shall return E_NOT_OK.
        set the configuration pointer which is returned to NULL_PTR
    19: Call SoAd_Init with NULL_PTR.
    20: VP(SoAd.EB.PBCFGM110):
        Check if Det error is reported.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.PBCFGM110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>743</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1208</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SoAd_Test_PBcfgM_Off</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/common_req/SoAd_PbcfgM_Off_Compile_Test.c</sourcefile>
      <sourceline>26</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      Verify that if PbcfgM support is disabled then SoAd_PBCfg.c shall define
      TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME.
      SOAD_PBCFGM_SUPPORT_ENABLED shall be set to STD_OFF.
      SOAD_RELOCATABLE_CFG_ENABLE shall be set to STD_OFF.
    
Test Object: None.
Test Precondition: 
      - PbcfgM configuration does not refer to module SoAd (or no config exists)
      - Include SoAd_PBcfg.c only for step 01 and 02.
      - Include SoAd_Cfg.h for step 03.
    
Test Execution: 
        01: VP(SoAd.EB.PbcfgM_General_6):
            Check that symbols TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME exists.
        02: VP(SoAd.EB.PbcfgM_General_6):
            Check that symbols TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME has the value
            SoAd_ConfigLayoutType and SOAD_CONFIG_NAME respectively.
        03: VP (SoAd.EB.PBCFGM107):
            Verify that SOAD_PBCFGM_SUPPORT_ENABLED is set to STD_OFF.
        04: VP(SoAd.EB.PBCFGM108, SoAd.EB.RelocatablePBCfg):
            SOAD_RELOCATABLE_CFG_ENABLE shall be STD_OFF
    
Test Input: 
    
Test Output: 
    &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.PbcfgM_General_6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>746</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PBCFGM107</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>741</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PBCFGM108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>742</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.RelocatablePBCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>690</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1209</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SoAd_Test_PBcfgM_On</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/common_req/SoAd_PbcfgM_On_Compile_Test.c</sourcefile>
      <sourceline>24</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      1.)
      Verify that SOAD_RELOCATABLE_CFG_ENABLE is defined
      in the header file SoAd_Cfg.h.
      2.)
      Verify that if PbcfgM support is enabled then SoAd_PBCfg.c shall NOT define
      TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME.
    
Test Object: None.
Test Precondition: 
        - SOAD_PBCFGM_SUPPORT_ENABLED = STD_ON
    
Test Execution: 
        ------------------------ 1.) ---------------------
        01: VP (SoAd.EB.PbcfgM_General_3,
                SoAd.EB.PBCFGM108,
                SoAd.EB.RelocatablePBCfg):
            Verify that SOAD_RELOCATABLE_CFG_ENABLE is set to STD_ON.
        ------------------------ 2.) ---------------------
        02: Include SoAd_PBcfg.c.
        03: VP(SoAd.EB.PbcfgM_General_6):
            Check that symbols TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME exist.
    
Test Input: 
        None.
    
Test Output: 
        Binary file.
    &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.PbcfgM_General_3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>745</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbcfgM_General_6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>746</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PBCFGM108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>742</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.RelocatablePBCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>690</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1210</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SOAD_Gen_PBcfgM_00000_OnlyPbCfg</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/common_req/SoAd_PbcfgOnly_GenTest_00_OnlyPbCfg.h</sourcefile>
      <sourceline>27</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
    This test shall prove that the SOAD post build configuration also compiles stand alone.
&lt;/para&gt;

Test Object: None.
Test Precondition: 
    * Set TS_BUILD_POST_BUILD_BINARY to TRUE to prevent compilation of non post build files.
    * Remove all generated SOAD C files except post build files if there are any.

Test Execution: 
    The test run is successful when the SOAD compiles under sticking to the precondition and a
    binary file is generated.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.PostBuild_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>744</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1211</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SoAd_VerifyCodeStub</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/build/reqm/common_req/SoAd_VerifyStub_testspec.h</sourcefile>
      <sourceline>7</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that the code stub of the module is consistent with the
    implementation.
  
Test Object: 
    Relocatable post-build configuration macros generation.
  
Test Precondition: 
    Permutation [VerifyStub == true]:
      - Unit test contains its own code stub
      - Module is excluded from generation and compilation
    Permutation [VerifyStub == false]:
      - unit test excludes its own code stub
  
Test Execution: 
    01: Invoke all module APIs
    02: VP(SoAd.EB.Interface.Consistency):
        Unit test compiles (implicitly tested)
  
Test Input: 
  
Test Output: 
    Test is correctly generated and compiled.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.Interface.Consistency</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>751</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1212</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SOAD_ComTest_01_SingleGenUL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Compile/IN/SoAd_ComTest_01_SingleUL/source/application/EbTest_Config.h</sourcefile>
      <sourceline>8</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test shall prove that the SoAd compiles
  - for a single upper layer
  - having all defensive programming parameters enabled
  with the following permutation:
    Permutation  SoAdDevErrorDetect
    p0           false
    p1           true
  - All SoAdRoutingGroups have SoAdRoutingGroupTxTriggerable set to true.
&lt;/para&gt;

Test Object: None.
Test Precondition: 
  Support of a single generic upper layer PduR.
  All configuration parameters for defensive programming are enabled.
  All configured SoAdRoutingGroups have SoAdRoutingGroupTxTriggerable set to true.

Test Execution: 
  VP: Successful compilation of SoAd using configuration specified above.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00096</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00093</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00091</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00656</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00105</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00522</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00521</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00509</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>135</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00510</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00511</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>137</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00520</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>146</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00536</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00506</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00507</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00516</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00517</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00515</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00508</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00681</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>283</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00679</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>281</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00097</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00523</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>149</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00098</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00099</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00100</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00146</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00209</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>65</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00121</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00671</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>275</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00711</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>317</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00655</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>261</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00714</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>320</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00717</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>323</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.ChangeParameter</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>581</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_91001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>372</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.IsConnectionReady</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1111</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.TxTriggerable_RoutingGroups</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>609</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00733</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>346</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.XdmCheck.NoEcuCpdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>619</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>341</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00757</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>370</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1213</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SOAD_ComTest_02_MultipleGenUL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Compile/IN/SoAd_ComTest_02_MultipleUL/source/application/EbTest_Config.h</sourcefile>
      <sourceline>8</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test shall prove that the SoAd compiles
  - for multiple upper layers
  - having all defensive programming parameters disabled
  with the following permutation:
    Permutation  SoAdDevErrorDetect
    p0           false
    p1           true
&lt;/para&gt;

Test Object: None.
Test Precondition: 
   Support of generic upper layer PduR.
   Support of generic upper layer SoAdGenUL.

Test Execution: 
  VP: Successful compilation of SoAd using configuration specified above.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00096</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00093</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00091</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00656</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00105</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00522</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00521</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00509</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>135</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00510</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00511</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>137</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00520</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>146</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00536</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00506</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00507</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00516</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00517</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00515</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00508</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00681</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>283</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00679</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>281</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00097</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00523</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>149</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00098</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00099</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00100</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00146</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00209</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>65</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00121</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1214</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SOAD_ComTest_03_SchM</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Compile/IN/SoAd_ComTest_03_SchM/source/application/EbTest_Config.h</sourcefile>
      <sourceline>8</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   This test checks that the SoAd module's generator generates a
   syntactically and semantically valid basic software module
   description (BSWMD) when the generator mode "generate_swcd" is
   invoked. It further tests that the SchM exclusive area API is
   correctly generated by the RTE generator based on the SoAd module's
   generated BSWMD.

Test Object: 

Test Precondition: 

Test Execution: 
  Ts5 build environment steps:
    The module configuration generator produces the BSWMD containing
    the information on the required exclusive areas.  This information
    is then used by the RTE generator to create the required SchM API
    for these exclusive areas. This implicitly verifies that the BSWMD
    is syntactically and semantically correct.  SoAd's static code
    makes use of this API (and the respective #defines) thus causing
    compile/link errors if the BSWMD does not contain the correct
    information.

Test Input: 
  Usage of a common ASR configuration having all adjacent ASR modules
  configured.

Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.BSWMDGeneration_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>557</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.BSWMDGeneration_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>558</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.BSWMDGeneration_3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>559</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1215</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SoAd_ComTest_04_ServiceId</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Compile/IN/SoAd_ComTest_04_ServiceId/source/application/EbTest_Config.h</sourcefile>
      <sourceline>7</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test shall verify the correct generation of SoAd API ID and DET ID macros.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    VP: Successful generation of macros.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00096.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>502</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00093.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>503</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00091.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>504</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00656.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>505</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00105.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>507</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00522.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>508</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00521.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>509</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00509.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>510</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00510.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>511</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00511.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>512</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00520.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>513</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00536.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>514</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00506.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>515</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00507.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>516</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00516.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>518</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00517.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>520</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00515.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>522</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00681.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>531</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00679.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>532</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00508.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>530</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00097.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>533</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00523.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>534</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00098.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>535</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00099.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>536</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00100.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>537</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00146.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>538</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00209.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>539</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00121.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>540</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00711.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>506</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00655.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>517</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00714.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>519</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00717.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>521</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00671.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>525</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.ChangeParameter.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>582</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.GetSoConMode.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>583</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.IsConnectionReady.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1112</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00101</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00512</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
        <provcov>
          <linksto>SoAd.ASR43.SWS_SoAd_00733.ServiceId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>541</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1216</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SOAD_ComTest_05_HandleIdGenerator</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Compile/IN/SoAd_ComTest_05_HandleIdGenerator/source/application/EbTest_Config.h</sourcefile>
      <sourceline>8</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test checks that invoking the handle ID autocalc wizard
  creates a valid configuration (i.e., a configuration adhering to
  the constraints of the module's generator (e.g., zero-based,
  dense, and unique)) out of an invalid configuration (i.e., a
  configuration violating the constraints of the module's
  generator (e.g., not zero-based, not dense, and not unique)).

  The handle IDs for the following parameters are checked by this
  test:
    - SoAdRoutingGroupId
    - SoAdRxPduId
    - SoAdSocketId
    - SoAdTxPduId

Test Object: None.
Test Precondition: 
  None.

Test Execution: None.
Test Input: 
  Configuration with deliberately wrong handle IDs (non
  zero-based, not dense, and not unique).

Test Output: 
  Binary file.
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.HandleIdGenerator</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>562</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1217</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SOAD_ComTest_06_SymbolicNames</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Compile/IN/SoAd_ComTest_06_SymbolicNames/source/application/EbTest_Config.h</sourcefile>
      <sourceline>8</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test shall prove that the SoAd generates
  symbolic name value macros for the following
  configuration parameters:
  - SoAdSocketId
  - SoAdTxPduId
  - SoAdRoutingGroupId
&lt;/para&gt;

Test Object: None.
Test Precondition: 
   Support of generic upper layer PduR.
   Support of generic upper layer SoAdGenUL.

Test Execution: 
  VP: Successful compilation of SoAd using configuration specified above.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00116</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>100</internalId></provcov>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00121</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1218</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SoAd_ComTest_07_GeneratorCheck_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Compile/IN/SoAd_ComTest_07_GeneratorCheck/source/application/SoAd_ComTest_07_GeneratorCheck.c</sourcefile>
      <sourceline>38</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies the correct generate process.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    Compare the generated files with the ones existing in the reference folder.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00518</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00519</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1219</internalId></specobject>
    <specobject>
      <id>SoAd_ComTest_07_GeneratorCheck_ExtToIntMap_Specific_PduRoute</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Compile/IN/SoAd_ComTest_07_GeneratorCheck/source/application/SoAd_ComTest_07_GeneratorCheck.c</sourcefile>
      <sourceline>70</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test shall verify that SoAd_RoutingGroupExtToIntIdMap of SoAd_PBcfg.c contains valid
    entries for specific routing group.
  
Test Object: 
  
Test Precondition: 
    * Routing group is referred by only one PduRouteDest which refers to a
      SoAdSocketConnectionGroup.
  
Test Execution: 
    01: VP(SoAd.SWS_SoAd_00721):
      Verify that RoutingGroupId of the SoAd_RoutingGroupExtToIntIdMap entry for the specific
      routing group is the next valid internal routing group ID.
    02: VP(SoAd.SWS_SoAd_00721): Verify that the next (internal) RoutingGroupId = 
       (internal) RoutingGroupId of specific routing group + number of SoCon related to the routing
       group.
    03: VP(SoAd.SWS_SoAd_00721): Verify that the SoConGroupId refers to the
      corresponding SoAdSocketConnectionGroup.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00721</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>327</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1220</internalId></specobject>
    <specobject>
      <id>SoAd_ComTest_07_GeneratorCheck_ExtToIntMap_Specific_SocketRoute</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Compile/IN/SoAd_ComTest_07_GeneratorCheck/source/application/SoAd_ComTest_07_GeneratorCheck.c</sourcefile>
      <sourceline>108</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test shall verify that SoAd_RoutingGroupExtToIntIdMap of SoAd_PBcfg.c contains valid
    entries for specific routing group.
  
Test Object: 
  
Test Precondition: 
    * Routing group is referred by only one SocketRoute which refers to a
      SoAdSocketConnectionGroup.
  
Test Execution: 
    01: VP(SoAd.SWS_SoAd_00721):
      Verify that RoutingGroupId of the SoAd_RoutingGroupExtToIntIdMap entry for the specific
      routing group is the next valid internal routing group ID.
    02: VP(SoAd.SWS_SoAd_00721): Verify that the next (internal) RoutingGroupId = 
      (internal) RoutingGroupId of specific routing group + number of SoCon related to the routing
      group.
    03: VP(SoAd.SWS_SoAd_00721): Verify that the SoConGroupId refers to the
      corresponding SoAdSocketConnectionGroup.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00721</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>327</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1221</internalId></specobject>
    <specobject>
      <id>SoAd_ComTest_07_GeneratorCheck_ExtToIntMap_Specific_SameSoConGroup</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Compile/IN/SoAd_ComTest_07_GeneratorCheck/source/application/SoAd_ComTest_07_GeneratorCheck.c</sourcefile>
      <sourceline>146</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test shall verify that SoAd_RoutingGroupExtToIntIdMap of SoAd_PBcfg.c contains valid
    entries for specific routing group.
  
Test Object: 
  
Test Precondition: 
    * Routing group is referred by a PduRoute and a SocketRoute which refer to the same
      SoAdSocketConnectionGroup.
  
Test Execution: 
    01: VP(SoAd.SWS_SoAd_00721):
      Verify that RoutingGroupId of the SoAd_RoutingGroupExtToIntIdMap entry for the specific
      routing group is the next valid internal routing group ID.
    02: VP(SoAd.SWS_SoAd_00721): Verify that the next (internal) RoutingGroupId = 
       (internal) RoutingGroupId of specific routing group + number of SoCon related to the routing
       group.
    03: VP(SoAd.SWS_SoAd_00721): Verify that the SoConGroupId refers to the
      corresponding SoAdSocketConnectionGroup.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00721</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>327</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1222</internalId></specobject>
    <specobject>
      <id>SoAd_ComTest_07_GeneratorCheck_ExtToIntMap_Global_SingleSoCon</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Compile/IN/SoAd_ComTest_07_GeneratorCheck/source/application/SoAd_ComTest_07_GeneratorCheck.c</sourcefile>
      <sourceline>184</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test shall verify that SoAd_RoutingGroupExtToIntIdMap of SoAd_PBcfg.c contains valid
    entries for specific routing group.
  
Test Object: 
  
Test Precondition: 
    * Routing group is referred by one PduRoute which refers to a SoCon.
  
Test Execution: 
    01: VP(SoAd.SoAd.EB.GlobalRoutingGroup):
      Verify that RoutingGroupId of the SoAd_RoutingGroupExtToIntIdMap entry for the global routing
      group is the next valid internal routing group ID.
    02: VP(SoAd.EB.GlobalRoutingGroup): Verify that the next (internal) RoutingGroupId = 
      (internal) current RoutingGroupId + 1
    03: VP(SoAd.EB.GlobalRoutingGroup): Verify that the SoConGroupId is invalid.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.GlobalRoutingGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>592</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1223</internalId></specobject>
    <specobject>
      <id>SoAd_ComTest_07_GeneratorCheck_ExtToIntMap_Global_Mixed</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Compile/IN/SoAd_ComTest_07_GeneratorCheck/source/application/SoAd_ComTest_07_GeneratorCheck.c</sourcefile>
      <sourceline>219</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test shall verify that SoAd_RoutingGroupExtToIntIdMap of SoAd_PBcfg.c contains valid
    entries for specific routing group.
  
Test Object: 
  
Test Precondition: 
    * Routing group is referred by PduRoute and SocketRoute which refer SoCon and a SoConGroup.
  
Test Execution: 
    01: VP(SoAd.SoAd.EB.GlobalRoutingGroup):
      Verify that RoutingGroupId of the SoAd_RoutingGroupExtToIntIdMap entry for the global routing
      group is the next valid internal routing group ID.
    02: VP(SoAd.EB.GlobalRoutingGroup): Verify that the next (internal) RoutingGroupId = 
      (internal) current RoutingGroupId + 1
    03: VP(SoAd.EB.GlobalRoutingGroup): Verify that the SoConGroupId is invalid.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.GlobalRoutingGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>592</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1224</internalId></specobject>
    <specobject>
      <id>SoAd_ComTest_07_GeneratorCheck_ExtToIntMap_Global_2SoConGroups</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Compile/IN/SoAd_ComTest_07_GeneratorCheck/source/application/SoAd_ComTest_07_GeneratorCheck.c</sourcefile>
      <sourceline>254</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test shall verify that SoAd_RoutingGroupExtToIntIdMap of SoAd_PBcfg.c contains valid
    entries for specific routing group.
  
Test Object: 
  
Test Precondition: 
    * Routing group is referred by PduRoute and SocketRoute which refer to different SoConGroup.
  
Test Execution: 
    01: VP(SoAd.SoAd.EB.GlobalRoutingGroup):
      Verify that RoutingGroupId of the SoAd_RoutingGroupExtToIntIdMap entry for the global routing
      group is the next valid internal routing group ID.
    02: VP(SoAd.EB.GlobalRoutingGroup): Verify that the next (internal) RoutingGroupId = 
      (internal) current RoutingGroupId + 1
    03: VP(SoAd.EB.GlobalRoutingGroup): Verify that the SoConGroupId is invalid.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.GlobalRoutingGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>592</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1225</internalId></specobject>
    <specobject>
      <id>SoAd_ComTest_07_GeneratorCheck_ExtToIntMap_Global_MultiSoCon</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Compile/IN/SoAd_ComTest_07_GeneratorCheck/source/application/SoAd_ComTest_07_GeneratorCheck.c</sourcefile>
      <sourceline>289</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test shall verify that SoAd_RoutingGroupExtToIntIdMap of SoAd_PBcfg.c contains valid
    entries for specific routing group.
  
Test Object: 
  
Test Precondition: 
    * Routing group is referred by PduRoute and SocketRoute which refer to different SoCon.
  
Test Execution: 
    01: VP(SoAd.SoAd.EB.GlobalRoutingGroup):
      Verify that RoutingGroupId of the SoAd_RoutingGroupExtToIntIdMap entry for the global routing
      group is the next valid internal routing group ID.
    02: VP(SoAd.EB.GlobalRoutingGroup): Verify that the next (internal) RoutingGroupId = 
      (internal) current RoutingGroupId + 1
    03: VP(SoAd.EB.GlobalRoutingGroup): Verify that the SoConGroupId is invalid.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.GlobalRoutingGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>592</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1226</internalId></specobject>
    <specobject>
      <id>SoAd_ComTest_07_GeneratorCheck_ExtToIntMap_ValidSoConGroupId</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Compile/IN/SoAd_ComTest_07_GeneratorCheck/source/application/SoAd_ComTest_07_GeneratorCheck.c</sourcefile>
      <sourceline>324</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test shall verify that SoAd_RoutingGroupExtToIntIdMap of SoAd_PBcfg.c contains valid
    SoConGroupIds for specific routing groups.
  
Test Object: 
  
Test Precondition: 
    * SoConGroupId and first SoConId of same SoConGroupId shall not match. This is the case if
      previous SoConGroup has more than one SoCon.
  
Test Execution: 
    01: VP(SoAd.EB.MCG.RoutingGroupExtToIntIdMap.ValidSoConGroupId):
      Verify that SoConGroupId of the SoAd_RoutingGroupExtToIntIdMap entry for specific routing
      group contains a valid SoConGroupId != 65535.
    02: VP(SoAd.EB.MCG.RoutingGroupExtToIntIdMap.ValidSoConGroupId):
      Verify that SoConGroupId of the SoAd_RoutingGroupExtToIntIdMap entry for specific routing
      group represent SoConGroupId and not the first SoConId of the group.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.MCG.RoutingGroupExtToIntIdMap.ValidSoConGroupId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>593</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1227</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SoAd_ComTest_08_MultipleUL_Func</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Compile/IN/SoAd_ComTest_08_MultipleUL_Func/source/application/EbTest_Config.h</sourcefile>
      <sourceline>8</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This verifies that there are no warnings for upper layer function syntaxes, using a configuration
  which allows multiple upper layers.
&lt;/para&gt;

Test Object: None.
Test Precondition: 
   Support of generic upper layer PduR.
   Support of generic upper layer SoAdGenUL.

Test Execution: 
  VP: Successful compilation of SoAd using configuration specified above.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00106</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00663</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>269</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00107</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00138</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00139</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00180</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00137</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00181</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>61</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00514</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>140</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00513</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>139</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1228</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SoAd_ComTest_NoPBCfg</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Compile/IN/SoAd_ComTest_09_NoPBCfg/source/application/SoAd_ComTest_NoPBCfg.c</sourcefile>
      <sourceline>25</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test shall prove that that the SoAd also compiles without any post build information
  
Test Object: 
    Compile test
  
Test Precondition: 
        * Set TS_SOAD_COMPILE_WITH_POSTBUILD to FALSE in the merged make file to prevent the compilation
          of the post build C file.
        * The merged make file holds a rule which removes all post build files after generation
  
Test Execution: 
        The test run is successful when the SoAd compiles under sticking to the precondition.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.PostBuild_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>744</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1229</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SOAD_ComTest_12_PB_ConfigTime</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Compile/IN/SoAd_ComTest_12_PB_ConfigTime/source/application/EbTest_Config.h</sourcefile>
      <sourceline>7</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test shall prove that SoAd compiles if all enable checks are enabled and ConfigTime is
  set in preferences.xdm
&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 
  VP: Successful compilation of SoAd using configuration.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.CompileConfigTime</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>691</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1230</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SoAd_Con16000_IfTransmit_NotOnline</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_Con16_IfTransmitApi/source/application/SoAd_Con16000_IfTransmit_Udp.c</sourcefile>
      <sourceline>97</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test shall verify that if SoAd_IfTransmit() is called for a socket connection which is
    not online, the module shall stop processing and return E_NOT_OK.
    In this test case a UDP connection is offline.
  
Test Object: 
    SoAd_IfTransmit()
  
Test Precondition: 
    * Upperlayer is PduR
    * Lowerlayer is TcpIp
    * SoAd is initialized.
  
Test Execution: 
    01: Ensure that UDP socket connection is SOAD_SOCON_OFFLINE.
    02: Call SoAd_IfTransmit()
    03: VP(SoAd.EB.IfTransmit_NotOnline): Verify that E_NOT_OK was returned as an indication that
        the Tx request was rejected.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.IfTransmit_NotOnline</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>567</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1231</internalId></specobject>
    <specobject>
      <id>SoAd_Con16001_IfTransmit_SocketClosed</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_Con16_IfTransmitApi/source/application/SoAd_Con16000_IfTransmit_Udp.c</sourcefile>
      <sourceline>165</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test shall verify that if SoAd_IfTransmit() is called for a closed TcpIp socket, the
    module shall stop processing and return E_NOT_OK.
    In this test case the socket is closed from TcpIp side by calling
    SoAd_TcpIpEvent(TCPIP_UDP_CLOSED).
  
Test Object: 
    SoAd_IfTransmit()
  
Test Precondition: 
    * SoAd is initialized.
  
Test Execution: 
    01: Bring UDP socket connection to SOAD_SOCON_ONLINE.
    02: Call SoAd_TcpIpEvent(TCPIP_UDP_CLOSED) to indicate that TcpIp socket got closed.
    03: Call SoAd_IfTransmit().
    04: VP(SoAd.EB.IfTransmit_SocketClosed): Verify that E_NOT_OK was returned as an indication that
        the Tx request was rejected.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.IfTransmit_SocketClosed</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>568</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1232</internalId></specobject>
    <specobject>
      <id>SoAd_Con16002_IfTransmit_TxWhileTxing</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_Con16_IfTransmitApi/source/application/SoAd_Con16000_IfTransmit_Udp.c</sourcefile>
      <sourceline>233</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test shall verify that if SoAd_IfTransmit() preempts another call of SoAd_IfTransmit()
    using the same socket connection, the module shall stop processing and return E_NOT_OK.
    In this test case two PDU routes share the same socket connection and try to send at the same
    time.
  
Test Object: 
    SoAd_IfTransmit()
  
Test Precondition: 
    * Upperlayer is PduR
    * SoAd is initialized.
  
Test Execution: 
    01: Bring UDP socket connection to SOAD_SOCON_ONLINE which is shared by 2 PDU routes.
    02: Set TcpIp_UdpTransmit() stub callback function to trigger SoAd_IfTransmit()
        for the 2nd PDU route.
    03: Call SoAd_IfTransmit() for the 1st PDU route. SoAd_IfTransmit() for the 2nd route is
        called within the stub callout.
    04: VP(SoAd.EB.IfTransmit_Preemption, SoAd.SWS_SoAd_00653):
        Verify that E_NOT_OK was returned for the 2nd PDU route as an indication that
        the Tx request was rejected.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.IfTransmit_Preemption</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>569</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00653</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>260</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1233</internalId></specobject>
    <specobject>
      <id>SoAd_Con16003_GetLocalAddr_IPv4</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_Con16_IfTransmitApi/source/application/SoAd_Con16000_IfTransmit_Udp.c</sourcefile>
      <sourceline>309</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that the call of SoAd_GetLocalAddr() calls TcpIp_GetIpAddr() for the
    correct LocalAddrId and shall return the correct values for LocalAddrPtr
    (domain, address and port), NetmaskPtr and DefaultRouterPtr.
    This test is performed for IPv4.
  &lt;/para&gt;
  
Test Object: 
    SoAd_GetLocalAddr() for IPv4.
  
Test Precondition: 
   * SoAdIPv6AddressEnabled must be enabled in configuration.
  
Test Execution: 
    01: Call SoAd_GetLocalAddr() with valid SoConId for an IPv4 local address.
    02: VP(SoAd.EB.GetLocalAddr_ForwardCall): Verify that TcpIp_GetIpAddr() is called successfully
        with correct LocalAddrId.
    03: VP(SoAd.EB.GetLocalAddr_ForwardCall): Verify that the output parameters of
        SoAd_GetLocalAddr() LocalAddrPtr (domain, address and port), NetmaskPtr
        and DefaultRouterPtr are passed from stub to the upper layer.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.GetLocalAddr_ForwardCall</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>598</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1234</internalId></specobject>
    <specobject>
      <id>SoAd_Con16004_GetLocalAddr_IPv6</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_Con16_IfTransmitApi/source/application/SoAd_Con16000_IfTransmit_Udp.c</sourcefile>
      <sourceline>411</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that the call of SoAd_GetLocalAddr() calls TcpIp_GetIpAddr() for the
    correct LocalAddrId and shall return the correct values for LocalAddrPtr
    (domain, address and port), NetmaskPtr and DefaultRouterPtr.
    This test is performed for IPv6.
  
Test Object: 
    SoAd_GetLocalAddr() for IPv6.
  
Test Precondition: 
   * SoAdIPv6AddressEnabled must be enabled in configuration.
  
Test Execution: 
    01: Call SoAd_GetLocalAddr() with valid SoConId for an IPv6 local address.
    02: VP(SoAd.EB.GetLocalAddr_ForwardCall): Verify that TcpIp_GetIpAddr() is called successfully
        with correct LocalAddrId.
    03: VP(SoAd.EB.GetLocalAddr_ForwardCall): Verify that the output parameters of
        SoAd_GetLocalAddr() LocalAddrPtr (domain, address and port), NetmaskPtr
        and DefaultRouterPtr are passed from stub to the upper layer.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.GetLocalAddr_ForwardCall</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>598</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1235</internalId></specobject>
    <specobject>
      <id>SoAd_Con16005_CopyTxData_BigBuffer</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_Con16_IfTransmitApi/source/application/SoAd_Con16000_IfTransmit_Udp.c</sourcefile>
      <sourceline>507</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test shall verify that if SoAd_CopyTxData() is called with a buffer size bigger than the
    Pdu length given at SoAd_IfTransmit(), it will return BUFREQ_E_NOT_OK.
  
Test Object: 
    SoAd_CopyTxData()
  
Test Precondition: 
    * Upperlayer is PduR
    * SoAd is initialized.
  
Test Execution: 
    01: Bring UDP socket connection to SOAD_SOCON_ONLINE.
    02: Set TcpIp_UdpTransmit() stub callback function to call SoAd_CopyTxData() with buffer size
        bigger than the pdu length used in SoAd_IfTransmit().
    03: Call SoAd_IfTransmit().
    04: VP(): Verify that BUFREQ_E_NOT_OK was returned.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.CopyTxData_BiggerBuffer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>571</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1236</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>Ts_SoAd_IfTransmit_PduR_Tcp_Client</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_Con16_IfTransmitApi/source/application/Tst_SoAdIf_Transmit_Tcp_Client.c</sourcefile>
      <sourceline>90</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_IfTransmit() API returns E_OK when called with valid data.
    Additional the function must pass the data to the Tcp and send the TxConfirmation to the PduR.
  
Test Object: 
    SoAd_IfTransmit().
    SoAd_TxConfirmation().
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
  
Test Execution: 
    01: Initialize SoAd.
    02: Call SoAd_IfTransmit() with a testpdu.
    03: VP(SoAd.SWS_SoAd_00539.2): SoAd_IfTransmit returns E_OK.
    04: VP(SoAd.SWS_SoAd_00539.1, SoAd.SWS_SoAd_00539.2,
           SoAd.SWS_SoAd_00542):
        TcpIp_TcpTransmit() stub was called with the testpdu.
    05: Call SoAd_Mainfunction() a few times.
    06: Call SoAd_TxConfirmation().
    07: VP (SoAd.SWS_SoAd_00545): PduR_TxConfirmation() was called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00539.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>440</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00539.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>441</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00545</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>165</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1237</internalId></specobject>
    <specobject>
      <id>Ts_SoAd_IfTransmit_RetransmitSamePdu_PduR_Tcp_Client</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_Con16_IfTransmitApi/source/application/Tst_SoAdIf_Transmit_Tcp_Client.c</sourcefile>
      <sourceline>163</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
     Verify that SoAd_IfTxConfirmation() allows to trigger another transmission for the same PDU.
  
Test Object: 
    SoAd_IfTransmit().
    SoAd_TxConfirmation().
  
Test Precondition: 
    Upperlayer is PduR.
    Lowerlayer is TcpIp.
  
Test Execution: 
    01: Set callout function to call SoAd_IfTransmit() in the context of
        PduR_SoAdTpTxConfirmation().
    01: Initialize SoAd.
    02: Call SoAd_IfTransmit() with a testpdu.
    03: VP(): SoAd_IfTransmit returns E_OK.
    04: VP(): TcpIp_TcpTransmit() stub was called with the testpdu and with the first data
              transmitted.
    05: Call SoAd_MainFunction() few times.
    06: Call SoAd_TxConfirmation().
    07: VP(): TcpIp_UdpTransmit() stub was called with the testpdu and with the second data
              transmitted.
    08: VP(SoAd.SWS_SoAd_00545): PduR_SoAdIfTxConfirmation() was called.
    09: Call SoAd_TxConfirmation() for the second transmission.
    10: VP(SoAd.SWS_SoAd_00545): PduR_SoAdIfTxConfirmation() was called one time.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.IfTxConfirmation.TcpTriggerTxForSamePDU</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1049</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1238</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>Ts_SoAd_IfTransmit_PduR_Tcp_Client_MultipleCopyTxData</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_Con16_IfTransmitApi/source/application/Tst_SoAdIf_Transmit_Tcp_Client_MultipleCopyTxData.c</sourcefile>
      <sourceline>92</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_IfTransmit() API returns E_OK when called with valid data.
    Additional the function must pass the data to the Tcp and send the TxConfirmation to the PduR.
    In this test the TcpIp Module retrieves the data with multiple SoAd_CopyTxData() calls.
  
Test Object: 
    SoAd_IfTransmit()
    SoAd_CopyTxData()
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
  
Test Execution: 
    01: Initialize SoAd.
    02: Call SoAd_IfTransmit() with a testpdu.
    03: VP(SoAd.SWS_SoAd_00539.2): SoAd_IfTransmit() returns E_OK.
    04: VP(SoAd.SWS_SoAd_00542, SoAd.SWS_SoAd_00539.2):
        TcpIp_Transmit() stub was called with the correct SocketId,
        length that was used at SoAd_IfTransmit() call, and ForcedRetrieved set to TRUE.
    05: Call SoAd_Mainfunction a few times.
    06: Call SoAd_TxConfirmation().
    07: VP(SoAd.SWS_SoAd_00545): PduR_TxConfirmation() was called.
    08: VP(SoAd.SWS_SoAd_00543, SoAd.SWS_SoAd_00197): Data was transmitted correctly.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00539.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>441</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00542</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>162</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00543</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>163</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00545</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>165</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00197</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1239</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>Ts_SoAd_IfTransmit_PduR_Tcp_Client_NoHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_Con16_IfTransmitApi/source/application/Tst_SoAdIf_Transmit_Tcp_Client_NoHeader.c</sourcefile>
      <sourceline>70</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_IfTransmit() API returns E_OK when called with valid data.
    Additional the function must pass the data to the Tcp and send the TxConfirmation to the PduR.
  
Test Object: 
    SoAd_IfTransmit()
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
  
Test Execution: 
    01: Initialize SoAd
    02: call SoAd_IfTransmit() with a testpdu
    03: VP (SoAd.SWS_SoAd_00542): SoAd_IfTransmit returns E_OK
    04: VP (SoAd.SWS_SoAd_00542): TcpIp_Transmit stub was called with the testpdu
    05: VP (): No Det was called
    06: Call SoAd_Mainfunction a few times
    07: Call SoAd_TxConfirmation
    08: VP (SoAd.SWS_SoAd_00545): PduR_TxConfirmation was called
    09: VP (): No Det was called
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00542</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>162</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00545</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>165</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1240</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>Ts_SoAd_IfTransmit_PduR_Tcp_Client_TxQuota</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_Con16_IfTransmitApi/source/application/Tst_SoAdIf_Transmit_Tcp_Client_TxQuota.c</sourcefile>
      <sourceline>70</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_IfTransmit() API returns E_OK when called with valid dat
    ((PDU + PduHeader) &lt; TxQuota).
    Additional the function must pass the data to the Tcp and send the TxConfirmation to the PduR.
  
Test Object: 
    SoAd_IfTransmit().
    SoAdSocketTcpTxQuota.
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
    SoAdSocketTcpTxQuota is set to 16
  
Test Execution: 
    01: Call SoAd_IfTransmit(), PDU length = 16
    02 VP(SoAd.EB.TcpTxQuota): Transmission is not allowed,
      (PDU + PduHeader) &gt; TxQuota
        SoAd_IfTransmit() returns E_NOT_OK
    03: Call SoAd_IfTransmit(), PDU length = 8, (PDU + PduHeader) = TxQuota
    04 VP (SoAd.EB.TcpTxQuota): Transmission is allowed
        SoAd_IfTransmit() returns E_OK
        TcpIp_Transmit() stub was called with the testpdu
        No Det was called
    05: Call SoAd_IfTransmit() again, PDU length = 8,
        (previous PDU + PDU + PduHeader) &gt; TxQuota.
    06 VP(SoAd.EB.TcpTxQuota): Transmission is not allowed
        SoAd_IfTransmit() returns E_NOT_OK.
    07: Call SoAd_TxConfirmation().
    08 VP (SoAd.EB.TcpTxQuota): Last transmission denied
        PduR_TxConfirmation was not called
        No Det was called
    09: Call SoAd_IfTransmit() again, PDU length = 4, (PDU + PduHeader) &lt; TxQuota
    10 VP (SoAd.EB.TcpTxQuota): Transmission is allowed again
        SoAd_IfTransmit returns E_OK
        TcpIp_Transmit stub was called with the testpdu
        No Det was called
    11: VP (SoAd.EB.TcpTxQuota): Transmission ok
        PduR_TxConfirmation was called
        No Det was called
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpTxQuota</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>615</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1241</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>Ts_SoAd_IfTransmit_PduR_Tcp_Server</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_Con16_IfTransmitApi/source/application/Tst_SoAdIf_Transmit_Tcp_Server.c</sourcefile>
      <sourceline>69</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_IfTransmit() API returns E_OK when called with valid data.
    Additional the function must pass the data to the Tcp and send the TxConfirmation to the PduR.
  
Test Object: 
    SoAd_IfTransmit()
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
  
Test Execution: 
    01: Initialize SoAd.
    02: Call SoAd_IfTransmit() with a testpdu.
    03: VP(SoAd.SWS_SoAd_00539.2): SoAd_IfTransmit returns E_OK.
    04: VP(SoAd.SWS_SoAd_00539.1, SoAd.SWS_SoAd_00539.2,
           SoAd.SWS_SoAd_00542):
        TcpIp_Transmit() stub was called with the testpdu.
    05: Call SoAd_Mainfunction() a few times.
    06: Call SoAd_TxConfirmation().
    07: VP (SoAd.SWS_SoAd_00545): PduR_TxConfirmation() was called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00539.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>440</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00539.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>441</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00545</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>165</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1242</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>Ts_SoAd_IfTransmit_PduR_Tcp_Server_Reconnect</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_Con16_IfTransmitApi/source/application/Tst_SoAdIf_Transmit_Tcp_Server_Reconnect.c</sourcefile>
      <sourceline>69</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify a TCP listen socket connection is reestablished if the connection is closed by a reset
    from the remote node. The reopend connection shall not be affected by outstanding
    TxConfirmations from previous transmissions.
  
Test Object: 
    SoAd_IfTransmit()
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
  
Test Execution: 
    01: Transmit a IF-Pdu
    02: TCP Connection is reset before the TxConfirmation is received
    03: Call SoAd_Mainfunction a few times to prepare reconnection
    04: The remote node reopens the TCP connection
    05: Transmit the IF-Pdu again
    06: VP(SoAd.SWS_SoAd_00586):
        SoAd_IfTransmit returns E_OK (the connection is reestablished)
    07: IF-Pdu is confirmed by TcpIp
    08: VP (SoAd.SWS_SoAd_00586):
        PduR_TxConfirmation is called to notify the upper layer about the transmission
        (the missed TxConfirmation from the previous connection does not affect this transmission)
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00586</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1243</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>Ts_SoAd_IfTransmit_PduR_Udp</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_Con16_IfTransmitApi/source/application/Tst_SoAdIf_Transmit_Udp.c</sourcefile>
      <sourceline>88</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_IfTransmit() API returns E_OK when called with valid data.
    Additional the function must pass the data to the TcpIp and send the TxConfirmation to the PduR.
  
Test Object: 
    SoAd_IfTransmit()
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
  
Test Execution: 
    01: Initialize SoAd.
    02: Call SoAd_IfTransmit() with a testpdu.
    03: VP (SoAd.SWS_SoAd_00539.2): SoAd_IfTransmit returns E_OK.
    04: VP (SoAd.SWS_SoAd_00540, SoAd.SWS_SoAd_00539.2,
            SoAd.SWS_SoAd_00539.1):
        TcpIp_UdpTransmit() stub was called with the testpdu.
    05: VP (SoAd.SWS_SoAd_00544): PduR_SoAdIfTxConfirmation() was called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00539.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>440</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00539.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>441</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00540</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00544</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1244</internalId></specobject>
    <specobject>
      <id>Ts_SoAd_IfTransmit_RetransmitSamePdu_PduR_Udp</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_Con16_IfTransmitApi/source/application/Tst_SoAdIf_Transmit_Udp.c</sourcefile>
      <sourceline>151</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_IfTxConfirmation() allows to trigger another transmission for the same PDU.
  
Test Object: 
    SoAd_IfTransmit()
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
  
Test Execution: 
    01: Set callout function to call SoAd_IfTransmit() in the context of
        PduR_SoAdTpTxConfirmation().
    01: Initialize SoAd.
    02: Call SoAd_IfTransmit() with a testpdu.
    03: VP(): SoAd_IfTransmit returns E_OK.
    04: VP(): TcpIp_UdpTransmit() stub was called with the testpdu and with the first data
              transmitted.
    05: Call SoAd_MainFunction() two times.
    06: VP(): TcpIp_UdpTransmit() stub was called with the testpdu and with the second data
              transmitted.
    07: VP(SoAd.SWS_SoAd_00544): PduR_SoAdIfTxConfirmation() was called two times.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.IfTxConfirmation.UdpTriggerTxForSamePDU</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1048</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1245</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>Ts_SoAd_IfTransmit_PduR_Udp_NoHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_Con16_IfTransmitApi/source/application/Tst_SoAdIf_Transmit_Udp_NoHeader.c</sourcefile>
      <sourceline>71</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_IfTransmit() API returns E_OK when called with valid data.
    Additional the function must pass the data to the TcpIp and send the TxConfirmation to the PduR.
  
Test Object: 
    SoAd_IfTransmit()
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
  
Test Execution: 
    01: Initialize SoAd
    02: call SoAd_IfTransmit() with a testpdu
    03: VP (SoAd.SWS_SoAd_00539.2): SoAd_IfTransmit returns E_OK
    04: VP (SoAd.SWS_SoAd_00540, SoAd.SWS_SoAd_00539.1,
            SoAd.SWS_SoAd_00539.2):
            TcpIp_Transmit stub was called with the testpdu
    05: VP (): No Det was called
    06: Call SoAd_Mainfunction a few times
    07: Call SoAd_TxConfirmation
    08: VP (SoAd.SWS_SoAd_00544): PduR_TxConfirmation was called
    09: VP (): No Det was called
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00539.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>440</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00539.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>441</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00540</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00544</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1246</internalId></specobject>
    <specobject>
      <id>Ts_SoAd_IfTransmit_PduR_Udp_NoHeader_IPv6</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_Con16_IfTransmitApi/source/application/Tst_SoAdIf_Transmit_Udp_NoHeader.c</sourcefile>
      <sourceline>149</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that the call of SoAd_IfTransmit() for a UDP IPv6 connection triggers the
    call of TcpIp_UdpTransmit() with correct parameters SocketId and RemoteAddrPtr.
  
Test Object: 
    SoAd_IfTransmit() for IPv6
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
  
Test Execution: 
    01: Call SoAd_IfTransmit().
    02: VP(SoAd.SWS_SoAd_00539.1, SoAd.SWS_SoAd_00539.2,
           SoAd.SWS_SoAd_00540):
        Verify that TcpIp_UdpTransmit() is called with correct
        SocketId and configured IPv6 RemoteAddrPtr.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00539.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>440</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00539.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>441</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00540</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1247</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SoAd_ConTest_00_00_GetSoConId_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>68</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_GetSoConId in development mode if the SoAd module is not
  initialized. I.e.
  - if error code SOAD_E_NOTINIT is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_GetSoConId()

Test Precondition: 
  SoAd module is not initialized.

Test Execution: 
  01: Call SoAd_GetSoConId with valid TxPduId and SoConIdPtr.
  02 VP: Det is called with error code SOAD_E_NOTINIT.
  03 VP: Error is returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00609</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1248</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_OpenSoCon_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>122</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_OpenSoCon in development mode if the SoAd module is not
  initialized. I.e.
  - if error code SOAD_E_NOTINIT is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_OpenSoCon()

Test Precondition: 
  SoAd module is not initialized.

Test Execution: 
  01: Call SoAd_OpenSoCon with valid SoConId.
  02 VP: Det is called with error code SOAD_E_NOTINIT.
  03 VP: Error is returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00615</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>227</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1249</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_CloseSoCon_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>175</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_CloseSoCon in development mode if the SoAd module is not
  initialized. I.e.
  - if error code SOAD_E_NOTINIT is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_CloseSoCon()

Test Precondition: 
  SoAd module is not initialized.

Test Execution: 
  01: Call SoAd_CloseSoCon with valid SoConId and abort.
  02 VP: Det is called with error code SOAD_E_NOTINIT.
  03 VP: Error is returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00616</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>228</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1250</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_LocalIpAddrAssignmentChg_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>228</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_LocalIpAddrAssignmentChg in development mode if the SoAd module
  is not initialized. I.e.
  - if error code SOAD_E_NOTINIT is reported to the Det_ReportError service
&lt;/para&gt;

Test Object: 
  SoAd_LocalIpAddrAssignmentChg()

Test Precondition: 
  SoAd module is not initialized.

Test Execution: 
  01: Call SoAd_LocalIpAddrAssignmentChg with valid IpAddrId and State.
  02 VP: Det is called with error code SOAD_E_NOTINIT.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00279</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>86</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1251</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_RequestIpAddrAssignment_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>274</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_RequestIpAddrAssignment in development mode if the SoAd module is not
  initialized. I.e.
  - if error code SOAD_E_NOTINIT is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_RequestIpAddrAssignment()

Test Precondition: 
  SoAd module is not initialized.

Test Execution: 
  01: Call SoAd_RequestIpAddrAssignment with valid SoConId, Type and LocalIpAddrPtr.
  02 VP: Det is called with error code SOAD_E_NOTINIT.
  03 VP: Error is returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00613</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1252</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_ReleaseIpAddrAssignment_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>329</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_ReleaseIpAddrAssignment in development mode if the SoAd module is not
  initialized. I.e.
  - if error code SOAD_E_NOTINIT is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_ReleaseIpAddrAssignment()

Test Precondition: 
  SoAd module is not initialized.

Test Execution: 
  01: Call SoAd_ReleaseIpAddrAssignment with valid SoConId.
  02 VP: Det is called with error code SOAD_E_NOTINIT.
  03 VP: Error is returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00618</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1253</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_CancelTransmit_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>382</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_TpCancelTransmit in development mode if the SoAd module is not
  initialized. I.e.
  - if error code SOAD_E_NOTINIT is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_TpCancelTransmit()

Test Precondition: 
  SoAd module is not initialized.

Test Execution: 
  01: Call SoAd_TpCancelTransmit with valid PduId.
  02 VP: Det is called with error code SOAD_E_NOTINIT.
  03 VP: Error is returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00605</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1254</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_IsConnectionReady_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>435</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_IsConnectionReady in development mode if the SoAd module is not
  initialized. I.e.
  - if error code SOAD_E_NOTINIT is reported to the Det_ReportError service and
  - TCPIP_E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_IsConnectionReady()

Test Precondition: 
  SoAd module is not initialized.

Test Execution: 
  01: Call SoAd_IsConnectionReady with valid PduId.
  02 VP: Det is called with error code SOAD_E_NOTINIT.
  03 VP: Error is returned with TCPIP_E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.IsConnectionReady.Uninit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1113</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1255</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_CancelReceive_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>488</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_TpCancelReceive in development mode if the SoAd module is not
  initialized. I.e.
  - if error code SOAD_E_NOTINIT is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_TpCancelReceive()

Test Precondition: 
  SoAd module is not initialized.

Test Execution: 
  01: Call SoAd_TpCancelReceive with valid PduId.
  02 VP: Det is called with error code SOAD_E_NOTINIT.
  03 VP: Error is returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00607</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1256</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_TpTransmit_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>541</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_TpTransmit in development mode if the SoAd module is not
  initialized. I.e.
  - if error code SOAD_E_NOTINIT is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_TpTransmit()

Test Precondition: 
  SoAd module is not initialized.

Test Execution: 
  01: Call SoAd_TpTransmit with valid SoAdSrcPduId and SoAdSrcPduInfoPtr.
  02 VP: Det is called with error code SOAD_E_NOTINIT.
  03 VP: Error is returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00224</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1257</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_ChangeParameter_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>595</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_ChangeParameter() in development mode if the SoAd module is not
  initialized. I.e.
  - if error code SOAD_E_NOTINIT is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_ChangeParameter()

Test Precondition: 
  SoAd module is not initialized.

Test Execution: 
  01: Call SoAd_ChangeParameter() with valid SoConId, ParameterId and ParameterValuePtr.
  02 VP: Det is called with error code SOAD_E_NOTINIT.
  03 VP: Error is returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SoAd_ChangeParameter_NOTINIT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>608</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1258</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_CopyTxData_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>649</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_CopyTxData in development mode if the SoAd module is not
  initialized. I.e.
  - if error code SOAD_E_NOTINIT is reported to the Det_ReportError service and
  - BUFREQ_E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_CopyTxData()

Test Precondition: 
  SoAd module is not initialized.

Test Execution: 
  01: : Call SoAd_CopyTxData with valid SocketId, BufPtr and BufLength.
  02 VP: Det is called with error code SOAD_E_NOTINIT.
  03 VP: Error is returned with BUFREQ_E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00632</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>241</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1259</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_DisableRouting_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>703</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_DisableRouting in development mode if the SoAd module is not
  initialized. I.e.
  - if error code SOAD_E_NOTINIT is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_DisableRouting()

Test Precondition: 
  SoAd module is not initialized.

Test Execution: 
  01: Call SoAd_DisableRouting with valid id.
  02 VP: Det is called with error code SOAD_E_NOTINIT.
  03 VP: Error is returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00627</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>239</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1260</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_EnableRouting_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>756</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_EnableRouting in development mode if the SoAd module is not
  initialized. I.e.
  - if error code SOAD_E_NOTINIT is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_EnableRouting()

Test Precondition: 
  SoAd module is not initialized.

Test Execution: 
  01: Call SoAd_EnableRouting with valid id.
  02 VP: Det is called with error code SOAD_E_NOTINIT.
  03 VP: Error is returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00624</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>236</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1261</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_GetLocalAddr_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>809</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_GetLocalAddr in development mode if the SoAd module is not
  initialized. I.e.
  - if error code SOAD_E_NOTINIT is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_GetLocalAddr()

Test Precondition: 
  SoAd module is not initialized.

Test Execution: 
  01: Call SoAd_GetLocalAddr with valid SoConId, LocalAddrPtr, NetmaskPtr and DefaultRouterPtr.
  02 VP: Det is called with error code SOAD_E_NOTINIT.
  03 VP: Error is returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00621</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1262</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_GetPhysAddr_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>865</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_GetPhysAddr in development mode if the SoAd module is not
  initialized. I.e.
  - if error code SOAD_E_NOTINIT is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_GetPhysAddr()

Test Precondition: 
  SoAd module is not initialized.

Test Execution: 
  01: Call SoAd_GetPhysAddr with valid SoConId and PhysAddrPtr.
  02 VP: Det is called with error code SOAD_E_NOTINIT.
  03 VP: Error is returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00623</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>235</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1263</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_TcpIpEvent_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>919</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_TcpIpEvent in development mode if the SoAd module is not
  initialized. I.e.
  - if error code SOAD_E_NOTINIT is reported to the Det_ReportError service.
&lt;/para&gt;

Test Object: 
  SoAd_TcpIpEvent()

Test Precondition: 
  SoAd module is not initialized.

Test Execution: 
  01: Call SoAd_TcpIpEvent with valid SocketId and Event.
  02 VP: Det is called with error code SOAD_E_NOTINIT.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00276</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1264</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_SetRemoteAddr_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>964</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify whether SoAd_SetRemoteAddr reports error SOAD_E_NOTINIT in development mode
  if SoAd module is not initialized.
&lt;/para&gt;

Test Object: 
  SoAd_SetRemoteAddr()

Test Precondition: 
  SoAd module is not initialized.

Test Execution: 
  01: Call SoAd_SetRemoteAddr with valid parameters.
  02: VP(SoAd.SWS_SoAd_00628):
      SoAd_SetRemoteAddr should return E_NOT_OK and Det error SOAD_E_NOTINIT should
      be reported.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00628</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>240</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1265</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_TxConfirmation_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>1020</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify whether SoAd_TxConfirmation reports error SOAD_E_NOTINIT in development mode
  if SoAd module is not initialized.
&lt;/para&gt;

Test Object: 
  SoAd_TxConfirmation()

Test Precondition: 
  SoAd module is not initialized.

Test Execution: 
  01: Call SoAd_TxConfirmation with valid parameters.
  02: VP(SoAd.SWS_SoAd_00269):
      Det error SOAD_E_NOTINIT should be reported.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00269</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1266</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_TcpAccepted_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>1067</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify whether SoAd_TcpAccepted reports error SOAD_E_NOTINIT in development mode
  if SoAd module is not initialized.
&lt;/para&gt;

Test Object: 
  SoAd_TcpAccepted()

Test Precondition: 
  SoAd module is not initialized.

Test Execution: 
  01: Call SoAd_TcpAccepted with valid parameters.
  02: VP(SoAd.SWS_SoAd_00272):
      SoAd_TcpAccepted should return E_NOT_OK and Det error SOAD_E_NOTINIT should
      be reported.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00272</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1267</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_TcpConnected_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>1122</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify whether SoAd_TcpConnected reports error SOAD_E_NOTINIT in development mode
  if SoAd module is not initialized.
&lt;/para&gt;

Test Object: 
  SoAd_TcpConnected()

Test Precondition: 
  SoAd module is not initialized.

Test Execution: 
  01: Call SoAd_TcpConnected with valid parameters.
  02: VP(SoAd.SWS_SoAd_00274):
      Det error SOAD_E_NOTINIT should be reported.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00274</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1268</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_MainFunction_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>1169</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify whether SoAd_MainFunction reports no error in development mode
  if SoAd module is not initialized.
&lt;/para&gt;

Test Object: 
  SoAd_MainFunction()

Test Precondition: 
  SoAd module is not initialized.

Test Execution: 
  01: Call SoAd_MainFunction.
  02: VP(SoAd.EB.MainFunction.InitCheck):
      No error should be reported.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.MainFunction.InitCheck</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>560</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1269</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_MainFunctionTx_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>1216</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify whether SoAd_MainFunctionTx reports no error in development mode
  if SoAd module is not initialized.
&lt;/para&gt;

Test Object: 
  SoAd_MainFunction()

Test Precondition: 
  SoAd module is not initialized.

Test Execution: 
  01: Call SoAd_MainFunction.
  02: VP(SoAd.EB.MainFunction.InitCheck):
      No error should be reported.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.MainFunctionTx.InitCheck</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>561</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1270</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_ReadDhcpHostName_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>1271</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify whether SoAd_ReadDhcpHostNameOption() reports error SOAD_E_NOTINIT in development mode
  if SoAd module is not initialized.
&lt;/para&gt;

Test Object: 
  SoAd_ReadDhcpHostNameOption()

Test Precondition: 
  SoAd module is not initialized.

Test Execution: 
  01: Call SoAd_ReadDhcpHostNameOption() with valid parameters.
  02: VP(SoAd.SWS_SoAd_00701):
      SoAd_ReadDhcpHostNameOption() should return E_NOT_OK and Det error SOAD_E_NOTINIT should
      be reported.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00701</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>307</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1271</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_WriteDhcpHostName_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>1324</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify whether SoAd_WriteDhcpHostNameOption() reports error SOAD_E_NOTINIT in development mode
  if SoAd module is not initialized.
&lt;/para&gt;

Test Object: 
  SoAd_WriteDhcpHostNameOption()

Test Precondition: 
  SoAd module is not initialized.

Test Execution: 
  01: Call SoAd_WriteDhcpHostNameOption() with valid parameters.
  02: VP(SoAd.SWS_SoAd_00705):
      SoAd_WriteDhcpHostNameOption() should return E_NOT_OK and Det error SOAD_E_NOTINIT should
      be reported.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00705</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>311</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1272</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_GetSoConInfo_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>1377</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify whether SoAd_GetSoConInfo() reports error SOAD_E_NOTINIT in development mode
    if SoAd module is not initialized.
  
Test Object: 
    SoAd_GetSoConInfo()
  
Test Precondition: 
    SoAd module is not initialized.
  
Test Execution: 
    01: Call SoAd_GetSoConInfo() with valid parameters.
    02: VP(SoAd.SWS_SoAd_00705):
      SoAd_GetSoConInfo() should return E_NOT_OK and Det error SOAD_E_NOTINIT should
      be reported.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.GetSoConInfo.SoConIdInvalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1044</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.Func.GetSoConInfo.ParamNullPtr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1045</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1273</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_RxIndication_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>1425</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Verify proper call of SoAd_RxIndication in development mode if the SoAd module is not
  initialized. I.e. error code SOAD_E_NOTINIT is reported to the Det_ReportError service
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
    SoAd module is not initialized.
    Upperlayer is PduR
    Lowerlayer is Udp
  
Test Execution: 
    01: Call SoAd_RxIndication with valid parameters
    02: VP(SoAd.SWS_SoAd_00264):
        Det is called with error code SOAD_E_NOTINIT.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00264</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1274</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_IfTransmit_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>1472</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_IfTransmit() API returns E_NOT_OK and calls a Det when it is called before
    initialisation.
  
Test Object: 
    SoAd_IfTransmit()
  
Test Precondition: 
  
Test Execution: 
    01: Call SoAd_IfTransmit()
    02: VP (SOAD213):
        SoAd_IfTransmit returned E_NOT_OK, det was called with SOAD_E_NOTINIT
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00213</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1275</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_GetRemoteAddr_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>1517</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_GetRemoteAddr() API returns E_NOT_OK and calls a Det when it is called before
    initialisation.
  
Test Object: 
    SoAd_GetRemoteAddr()
  
Test Precondition: 
  
Test Execution: 
    01: Call SoAd_GetRemoteAddr()
    02: VP (SoAd.SWS_SoAd_00659):
        SoAd_GetRemoteAddr returned E_NOT_OK
        A det was called with SOAD_E_NOTINIT
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00659</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1276</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_SetUniqueRemoteAddr_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>1564</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_SetUniqueRemoteAddr() API returns E_NOT_OK and calls a Det when it is called
    before initialisation.
  
Test Object: 
    SoAd_SetUniqueRemoteAddr()
  
Test Precondition: 
  
Test Execution: 
    01: Call SoAd_SetUniqueRemoteAddr()
    02: VP (SoAd.SWS_SoAd_00672):
        SoAd_SetUniqueRemoteAddr returned E_NOT_OK
        A det was called with SOAD_E_NOTINIT
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00672</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>276</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1277</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_GetSoConMode_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>1612</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_GetSoConMode() API returns E_NOT_OK and calls a Det when it is called before
    initialisation.
  
Test Object: 
    SoAd_GetSoConMode()
  
Test Precondition: 
  
Test Execution: 
    01: Call SoAd_GetSoConMode()
    02: VP ():
        SoAd_GetSoConMode returned E_NOT_OK
        A det was called with SOAD_E_NOTINIT
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.GetSoConMode.Uninit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>584</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1278</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_ReleaseRemoteAddr_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>1659</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if SoAd_ReleaseRemoteAddr() is called befored initializing the module,
    SOAD_E_NOTINIT shall be reported to DET.
  
Test Object: 
    SoAd_ReleaseRemoteAddr().
  
Test Precondition: 
  
Test Execution: 
    01: Call SoAd_ReleaseRemoteAddr().
    02: VP(SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.Uninit):
        Verify that SOAD_E_NOTINIT was reported to DET.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.Uninit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1093</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1279</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_IfSpecificRoutingGroupTransmit_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>1702</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
    Verify that SoAd_IfSpecificRoutingGroupTransmit() API returns E_NOT_OK and reports
    SOAD_E_NOTINIT to DET if called when module is not initialized.
&lt;/para&gt;

Test Object: 
  SoAd_IfSpecificRoutingGroupTransmit()

Test Precondition: 
  SoAd module is not initialized.

Test Execution: 
  01: Call SoAd_IfSpecificRoutingGroupTransmit() when SoAd is not initialized.
  02: VP(SoAd.SWS_SoAd_00712): E_NOT_OK is returned and Det error SOAD_E_NOTINIT is reported.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00712</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>318</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1280</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_DisableSpecificRouting_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>1749</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_DisableSpecificRouting() API returns E_NOT_OK and reports
    SOAD_E_NOTINIT to DET if called when module is not initialized.
  
Test Object: 
    SoAd_DisableSpecificRouting()
  
Test Precondition: 
    SoAd module is not initialized.
  
Test Execution: 
    01: Call SoAd_DisableSpecificRouting() when SoAd is not initialized.
    02: VP(): E_NOT_OK is returned and Det error SOAD_E_NOTINIT is reported.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00718</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>324</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1281</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_EnableSpecificRouting_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>1793</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_EnableSpecificRouting() API returns E_NOT_OK and reports
    SOAD_E_NOTINIT to DET if called when module is not initialized.
  
Test Object: 
    SoAd_EnableSpecificRouting()
  
Test Precondition: 
    SoAd module is not initialized.
  
Test Execution: 
    01: Call SoAd_EnableSpecificRouting() when SoAd is not initialized.
    02: VP(): Verify that E_NOT_OK was returned.
    03: VP(): Verify that SOAD_E_NOTINIT was reported to DET.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00715</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>321</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1282</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_IfRoutingGroupTransmit_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>1843</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      Verify that SoAd_IfRoutingGroupTransmit() API returns E_NOT_OK and reports
      SOAD_E_NOTINIT to DET if called when module is not initialized.
  
Test Object: 
    SoAd_IfRoutingGroupTransmit()
  
Test Precondition: 
    SoAd module is not initialized.
  
Test Execution: 
    01: Call SoAd_IfRoutingGroupTransmit() when SoAd is not initialized.
    02: VP(): Verify that E_NOT_OK was returned.
    03: VP(): Verify that SOAD_E_NOTINIT was reported to DET.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00661</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>267</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1283</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_GetAndResetMeasurementData_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>1893</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      Verify that SoAd_GetAndResetMeasurementData() API returns E_NOT_OK and reports
      SOAD_E_NOTINIT to DET if called when module is not initialized.
  
Test Object: 
    SoAd_GetAndResetMeasurementData()
  
Test Precondition: 
    SoAd module is not initialized.
  
Test Execution: 
    01: Call SoAd_GetAndResetMeasurementData() when SoAd is not initialized.
    02: VP(): Verify that E_NOT_OK was returned.
    03: VP(): Verify that SOAD_E_NOTINIT was reported to DET.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00756</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>369</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1284</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_SoAd_DtlsConnectionStateChg_NoInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>1944</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify that SoAd_DtlsConnectionStateChg() API reports
  TESTLIB_SOAD_E_NOTINIT to DET if the SoAd module is not initialized.
&lt;/para&gt;

Test Object: 
  SoAd_DtlsConnectionStateChg()

Test Precondition: 
  SoAd module is not initialized.

Test Execution: 
  01: Call SoAd_DtlsConnectionStateChg with valid parameters.
  02 VP: Det is called with error code TESTLIB_SOAD_E_NOTINIT.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling.SoAdNotInitialized</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1037</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1285</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_Init_ParamNull</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>2003</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify if error code SOAD_E_PARAM_POINTER is reported to the Det_ReportError service in
  development mode if the SoAd is initialized by NULL.
&lt;/para&gt;

Test Object: 
  SoAd_Init()

Test Precondition: 
  SoAd module is not initialized.

Test Execution: 
  01: Call SoAd_Init with SoAdConfigPtr equal to null.
  02 VP: Det is called with error code SOAD_E_PARAM_POINTER.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_BSW_00212.Init</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>548</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1286</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_Init_ValidConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>2048</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify if no error is reported to the Det_ReportError service in development mode
  if the SoAd is initialized with valid configuration.
&lt;/para&gt;

Test Object: 
  SoAd_Init()

Test Precondition: 
  SoAd module is not initialized.

Test Execution: 
  01: Call SoAd_Init with valid configuration.
  02 VP: no error is reported by Det_ReportError service.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.Init_ValidConfig</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>655</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1287</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_GetSoConId_ParamNull</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>2094</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify if an error is reported to the Det_ReportError service in development mode when
  SoAd_GetSoConId is called with parameter SoConIdPtr equal to NULL. I.e.
  - if error code SOAD_E_PARAM_POINTER is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_GetSoConId()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: call SoAd_GetSoConId with valid TxPduId and SoConIdPtr equal to null.
  02 VP: Det is called with error code SOAD_E_PARAM_POINTER.
  03 VP: Error is returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_BSW_00212.GetSoConId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>549</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1288</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_TpTransmit_ParamNull</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>2147</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify if an error is reported to the Det_ReportError service in development mode when
  SoAd_TpTransmit is called with parameter SoAdSrcPduInfoPtr equal to NULL. I.e.
  - if error code SOAD_E_PARAM_POINTER is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_TpTransmit()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: call SoAd_TpTransmit with valid SoAdSrcPduId but SoAdSrcPduInfoPtr equal to null.
  02 VP: Det is called with error code SOAD_E_PARAM_POINTER.
  03 VP: Error is returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_BSW_00212.TpTransmit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>544</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1289</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_CopyTxData_ParamNull</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>2200</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify if an error is reported to the Det_ReportError service in development mode when
  SoAd_CopyTxData is called with parameter BufPtr equal to NULL. I.e.
  - if error code SOAD_E_PARAM_POINTER is reported to the Det_ReportError service and
  - BUFREQ_E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_CopyTxData()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: call SoAd_CopyTxData with valid SocketId and BufLength
      but BufPtr equal to null.
  02 VP: Det is called with error code SOAD_E_PARAM_POINTER.
  03 VP: Error is returned with BUFREQ_E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_BSW_00212.CopyTxData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>554</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1290</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_GetVersionInfo_ParamNull</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>2255</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify if error code SOAD_E_PARAM_POINTER is reported to the Det_ReportError service in
  development mode if the parameter versionInfo is equal to NULL.
&lt;/para&gt;

Test Object: 
  SoAd_GetVersionInfo()

Test Precondition: 
  PDU Router has been initialized.

Test Execution: 
  01: call SoAd_GetVersionInfo with pointer to versionInfo set to NULL.
  02 VP: Det is called with error code SOAD_E_PARAM_POINTER.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_BSW_00212.VersionInfo</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>542</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1291</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_WriteDhcpHostName_ParamNull</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>2298</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_WriteDhcpHostNameOption in development mode with data pointer as
  NULL_PTR. I.e.
  - if error code SOAD_E_PARAM_POINTER is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_WriteDhcpHostNameOption()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: Call SoAd_WriteDhcpHostNameOption with data pointer as NULL_PTR.
  02: VP(SoAd.SWS_SoAd_00158):
      SoAd_WriteDhcpHostNameOption should return E_NOT_OK and Det error SOAD_E_PARAM_POINTER should
      be reported.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_BSW_00212.WriteDhcpHostNameOption</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>546</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1292</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_ReadDhcpHostName_NullLength</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>2353</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_ReadDhcpHostNameOption in development mode with length pointer as NULL_PTR.
  - if error code SOAD_E_PARAM_POINTER is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_ReadDhcpHostNameOption()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: Call SoAd_ReadDhcpHostNameOption with length pointer as NULL_PTR.
  02: VP(SoAd.SWS_BSW_00212.ReadDhcpHostNameOption):
      SoAd_ReadDhcpHostNameOption should return E_NOT_OK and Det error SOAD_E_PARAM_POINTER should
      be reported.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_BSW_00212.ReadDhcpHostNameOption</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>545</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1293</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_ReadDhcpHostName_NullData</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>2407</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_ReadDhcpHostNameOption in development mode with data pointer as NULL_PTR.
  - if error code SOAD_E_PARAM_POINTER is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_ReadDhcpHostNameOption()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: Call SoAd_ReadDhcpHostNameOption with data pointer as NULL_PTR.
  02: VP(SoAd.SWS_SoAd_00656):
      SoAd_ReadDhcpHostNameOption should return E_NOT_OK and Det error SOAD_E_PARAM_POINTER should
      be reported.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_BSW_00212.ReadDhcpHostNameOption</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>545</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1294</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_TcpAccepted_ParamNull</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>2462</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify whether SoAd_TcpAccepted reports error SOAD_E_PARAM_POINTER in development mode
  if called with RemoteAddrPtr as NULL_PTR.
&lt;/para&gt;

Test Object: 
  SoAd_TcpAccepted()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: Call SoAd_TcpAccepted with RemoteAddrPtr as NULL_PTR.
  02: VP(SoAd.SWS_BSW_00212.TcpAccepted):
      SoAd_TcpAccepted should return E_NOT_OK and Det error SOAD_E_PARAM_POINTER should
      be reported.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_BSW_00212.TcpAccepted</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>555</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1295</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_RxIndication_ParamNull</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>2513</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify whether SoAd_RxIndication reports error SOAD_E_INV_ARG in development mode
  if called with RemoteAddrPtr as NULL_PTR.
&lt;/para&gt;

Test Object: 
  SoAd_RxIndication()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: Call SoAd_RxIndication with RemoteAddrPtr as NULL_PTR.
  02: VP(SoAd.SWS_SoAd_00268):
      Det error SOAD_E_INV_ARG should be reported.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00268</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1296</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_SetRemoteAddr_ParamNull</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>2561</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify whether SoAd_SetRemoteAddr reports error SOAD_E_PARAM_POINTER in development mode
  if called with IpAddrPtr as NULL_PTR.
&lt;/para&gt;

Test Object: 
  SoAd_SetRemoteAddr()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: Call SoAd_SetRemoteAddr with RemoteAddrPtr as NULL_PTR.
  02: VP(SoAd.SWS_BSW_00212.SetRemoteAddr):
      SoAd_SetRemoteAddr should return E_NOT_OK and Det error SOAD_E_PARAM_POINTER should
      be reported.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_BSW_00212.SetRemoteAddr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>551</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1297</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_GetLocalAddr_ParamNull</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>2614</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify whether SoAd_GetLocalAddr() reports error SOAD_E_PARAM_POINTER in development mode
  if called with LocalAddrPtr as NULL_PTR.
&lt;/para&gt;

Test Object: 
  SoAd_GetLocalAddr()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: Call SSoAd_GetLocalAddr() with LocalAddrPtr as NULL_PTR.
  02: VP():
      The function returns E_NOT_OK and reports the Det error SOAD_E_PARAM_POINTER.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_BSW_00212.GetLocalAddr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>556</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1298</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_GetSoConId_ParamInvalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>2680</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_GetSoConId in development mode with invalid TxPduId. I.e.
  - if error code SOAD_E_INV_PDUID is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_GetSoConId()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: call SoAd_GetSoConId with invalid TxPduId and valid SoConIdPtr.
  02 VP: Det is called with error code SOAD_E_INV_PDUID.
  03 VP: Error is returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00610</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>223</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1299</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_OpenSoCon_ParamInvalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>2733</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_OpenSoCon in development mode with invalid SoConId. I.e.
  - if error code SOAD_E_INV_ARG is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_OpenSoCon()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: call SoAd_OpenSoCon with invalid SoConId.
  02 VP: Det is called with error code SOAD_E_INV_ARG.
  03 VP: Error is returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00611</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>224</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1300</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_IsConnectionReady_ParamInvalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>2785</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_IsConnectionReady in development mode with invalid SoConId. I.e.
  - if error code SOAD_E_INV_ARG is reported to the Det_ReportError service and
  - TCPIP_E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_IsConnectionReady()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: call SoAd_IsConnectionReady with invalid SoConId.
  02 VP: Det is called with error code SOAD_E_INV_ARG.
  03 VP: Error is returned with TCPIP_E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.IsConnectionReady.InvalidSoConId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1114</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1301</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_GetSoConInfo_ParamInvalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>2835</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify proper call of SoAd_GetSoConInfo in development mode with invalid parameters.. I.e.
  - if error code SOAD_E_INV_ARG is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
  
Test Object: 
    SoAd_GetSoConInfo()
  
Test Precondition: 
  
Test Execution: 
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func.GetSoConInfo.SoConIdInvalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1044</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.Func.GetSoConInfo.ParamNullPtr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1045</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1302</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_CloseSoCon_Param1Invalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>2891</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_CloseSoCon in development mode with invalid SoConId. I.e.
  - if error code SOAD_E_INV_ARG is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_CloseSoCon()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: call SoAd_CloseSoCon with invalid SoConId and valid abort.
  02 VP: Det is called with error code SOAD_E_INV_ARG.
  03 VP: Error is returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00612</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>225</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1303</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_LocalIpAddrAssignmentChg_ParamInvalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>2943</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_LocalIpAddrAssignmentChg in development mode with invalid parameter
  'State'. I.e.
  - if error code SOAD_E_INV_ARG is reported to the Det_ReportError service
&lt;/para&gt;

Test Object: 
  SoAd_LocalIpAddrAssignmentChg()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: call SoAd_LocalIpAddrAssignmentChg with valid IpAddrId and invalid parameter 'State'.
  02 VP: Det is called with error code SOAD_E_INV_ARG.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.LocalIpAddrAssignmentChg_InvalidState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>610</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1304</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_RequestIpAddrAssignment_Param1Invalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>2992</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_RequestIpAddrAssignment in development mode with invalid SoConId. I.e.
  - if error code SOAD_E_INV_ARG is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_RequestIpAddrAssignment()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: call SoAd_RequestIpAddrAssignment with valid Type and LocalIpAddrPtr
      but invalid SoConId.
  02 VP: Det is called with error code SOAD_E_INV_ARG.
  03 VP: Error is returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00617</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1305</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_ReleaseIpAddrAssignment_ParamInvalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>3048</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_ReleaseIpAddrAssignment in development mode with invalid SoConId. I.e.
  - if error code SOAD_E_INV_ARG is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_ReleaseIpAddrAssignment()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: call SoAd_ReleaseIpAddrAssignment with invalid SoConId.
  02 VP: Det is called with error code SOAD_E_INV_ARG.
  03 VP: Error is returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00619</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1306</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_ChangeParameter_ParamInvalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>3100</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_ChangeParameter in development mode with invalid SoConId. I.e.
  - if error code SOAD_E_INV_ARG is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_ChangeParameter()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: call SoAd_ChangeParameter with valid ParameterId and ParameterValuePtr
      but invalid SoConId.
  02 VP: Det is called with error code SOAD_E_INV_ARG.
  03 VP: Error is returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.ChangeParameter_InvalidSoConId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>647</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1307</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_DisableRouting_ParamInvalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>3154</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_DisableRouting in development mode with invalid id. I.e.
  - if error code SOAD_E_INV_ARG is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_DisableRouting()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: call SoAd_DisableRouting with invalid id.
  02 VP: Det is called with error code SOAD_E_INV_ARG.
  03 VP: Error is returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00626</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>238</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1308</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_EnableRouting_ParamInvalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>3206</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_EnableRouting in development mode with invalid id. I.e.
  - if error code SOAD_E_INV_ARG is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_EnableRouting()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: call SoAd_EnableRouting with invalid id.
  02 VP: Det is called with error code SOAD_E_INV_ARG.
  03 VP: Error is returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00625</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>237</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1309</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_GetLocalAddr_ParamInvalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>3258</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_GetLocalAddr in development mode with invalid SoConId. I.e.
  - if error code SOAD_E_INV_ARG is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_GetLocalAddr()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: call SoAd_GetLocalAddr with valid LocalAddrPtr, DefaultRouterPtr and
      NetmaskPtr but invalid SoConId.
  02 VP: Det is called with error code SOAD_E_INV_ARG.
  03 VP: Error is returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00620</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>232</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1310</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_GetPhysAddr_ParamInvalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>3314</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_GetPhysAddr in development mode with invalid SoConId. I.e.
  - if error code SOAD_E_INV_ARG is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_GetPhysAddr()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: call SoAd_GetPhysAddr with valid PhysAddrPtr but invalid SoConId.
  02 VP: Det is called with error code SOAD_E_INV_ARG.
  03 VP: Error is returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00622</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>234</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1311</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_TpTransmit_ParamInvalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>3366</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_TpTransmit in development mode with invalid SoAdSrcPduId. I.e.
  - if error code SOAD_E_INV_PDUID is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_TpTransmit()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: Call SoAd_TpTransmit with invalid SoAdSrcPduId with If API type and valid SoAdSrcPduInfoPtr.
  02: VP(SoAd.SWS_SoAd_00237):
      SoAd_TpTransmit() should return E_NOT_OK and Det is called with error code SOAD_E_INV_PDUID.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00237</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>72</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1312</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_WriteDhcpHostName_ParamInvalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>3415</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_WriteDhcpHostNameOption in development mode with invalid SoConId. I.e.
  - if error code SOAD_E_INV_ARG is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_WriteDhcpHostNameOption()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: Call SoAd_WriteDhcpHostNameOption with invalid SoConId.
  02: VP(SoAd.SWS_SoAd_00706):
      SoAd_WriteDhcpHostNameOption should return E_NOT_OK and Det error SOAD_E_INV_ARG should
      be reported.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00706</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>312</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1313</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_ReadDhcpHostName_InvalidSoConId</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>3470</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_ReadDhcpHostNameOption() in development mode with invalid SoConId. I.e.
  - if error code SOAD_E_INV_ARG is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_ReadDhcpHostNameOption()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: Call SoAd_ReadDhcpHostNameOption() with invalid SoConId.
  02: VP(SoAd.SWS_SoAd_00702):
      SoAd_ReadDhcpHostNameOption() should return E_NOT_OK and Det error SOAD_E_INV_ARG should
      be reported.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00702</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>308</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1314</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_LocalIpAddrAssignmentChg_InvalidIpAddr</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>3524</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    &lt;para&gt;
      Verify that if SoAd_LocalIpAddrAssignmentChg() is called with invalid IpAddrId, no action
      shall be performed.
    &lt;/para&gt;
  
Test Object: 
    SoAd_LocalIpAddrAssignmentChg()
  
Test Precondition: 
    SoAd module is initialized.
  
Test Execution: 
    01: Call SoAd_LocalIpAddrAssignmentChg with invalid IpAddrId and valid State.
    02: VP(SoAd.SWS_SoAd_00729): No action shall be performed.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00729</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>342</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1315</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_TcpConnected_ParamInvalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>3572</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify whether SoAd_TcpConnected reports error SOAD_E_INV_SOCKETID in development mode
  if SoAd_TcpConnected is called with invalid SocketId.
&lt;/para&gt;

Test Object: 
  SoAd_TcpConnected()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: Call SoAd_TcpConnected with invalid SocketId.
  02: VP(SoAd.SWS_SoAd_00275):
      Det error SOAD_E_INV_SOCKETID should be reported.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00275</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1316</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_TcpAccepted_InvalidSocketId</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>3619</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify whether SoAd_TcpAccepted reports error SOAD_E_INV_SOCKETID in development mode
  if called with invalid SocketId.
&lt;/para&gt;

Test Object: 
  SoAd_TcpAccepted()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: Call SoAd_TcpAccepted with invalid SocketId.
  02: VP(SoAd.SWS_SoAd_00273):
      SoAd_TcpAccepted should return E_NOT_OK and Det error SOAD_E_INV_SOCKETID should
      be reported.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00273</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1317</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_CopyTxData_ParamInvalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>3675</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify whether SoAd_CopyTxData reports error SOAD_E_INV_SOCKETID in development mode
  if called with invalid SocketId.
&lt;/para&gt;

Test Object: 
  SoAd_CopyTxData()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: call SoAd_CopyTxData with invalid SocketId and valid BufPtr and BufLength.
  02: VP(SoAd.SWS_SoAd_00633):
      SoAd_CopyTxData should return E_NOT_OK and Det error SOAD_E_INV_SOCKETID should
      be reported.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00633</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>242</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1318</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_TxConfirmation_ParamInvalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>3728</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify whether SoAd_TxConfirmation reports error SOAD_E_INV_SOCKETID in development mode
  if called with invalid SocketId.
&lt;/para&gt;

Test Object: 
  SoAd_TxConfirmation()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: Call SoAd_TxConfirmation with invalid SocketId.
  02: VP(SoAd.SWS_SoAd_00270):
      Det error SOAD_E_INV_SOCKETID should be reported.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00270</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1319</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_SetRemoteAddr_InvalidSoConId</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>3775</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify whether SoAd_SetRemoteAddr() reports error SOAD_E_INV_ARG in development mode
  if called with invalid SoConId.
&lt;/para&gt;

Test Object: 
  SoAd_SetRemoteAddr()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: Call SoAd_SetRemoteAddr() with invalid SoConId.
  02: VP(SoAd.SWS_SoAd_00531):
      SoAd_SetRemoteAddr() should return E_NOT_OK and Det error SOAD_E_INV_ARG should
      be reported

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00531</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1320</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_ReleaseRemoteAddr_InvalidSoConId</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>3831</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify whether SoAd_ReleaseRemoteAddr() reports error SOAD_E_INV_ARG in development mode
  if called with invalid SoConId.
&lt;/para&gt;

Test Object: 
  SoAd_ReleaseRemoteAddr()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: Call SoAd_ReleaseRemoteAddr() with invalid SoConId.
  02: VP(SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.InvalidSoConId):
      SoAd_ReleaseRemoteAddr() should return E_NOT_OK and Det error SOAD_E_INV_ARG should
      be reported

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.InvalidSoConId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1095</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1321</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_SetRemoteAddr_AutomaticSoConSetup</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>3885</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify whether SoAd_SetRemoteAddr() reports error SOAD_E_INV_ARG in development mode
  if called with a socket connection with configuration parameter SoAdSocketAutomaticSoConSetup set
  to TRUE.
&lt;/para&gt;

Test Object: 
  SoAd_SetRemoteAddr()

Test Precondition: 
  SoAd module is initialized.
  SoAdSocketAutomaticSoConSetup set to true.

Test Execution: 
  01: Call SoAd_SetRemoteAddr() with a socket connection with configuration parameter
      SoAdSocketAutomaticSoConSetup set to TRUE.
  02: VP(SoAd.SWS_SoAd_00531):
      SoAd_SetRemoteAddr() returned E_NOT_OK and Det error SOAD_E_INV_ARG was reported.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00531</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1322</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_CancelReceive_ParamInvalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>3940</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify whether SoAd_TpCancelReceive reports error SOAD_E_INV_PDUID in development mode
  if called with invalid PduId.
&lt;/para&gt;

Test Object: 
  SoAd_TpCancelReceive()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: Call SoAd_TpCancelReceive with invalid PduId.
  02: VP(SoAd.SWS_SoAd_00608):
      SoAd_SetRemoteAddr should return E_NOT_OK and Det error SOAD_E_INV_PDUID should
      be reported.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00608</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1323</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_CancelTransmit_ParamInvalid_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>3992</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify whether SoAd_TpCancelTransmit() reports error SOAD_E_INV_PDUID in development mode
  if called with invalid PduId.
&lt;/para&gt;

Test Object: 
  SoAd_TpCancelTransmit()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: call SoAd_TpCancelTransmit() with invalid PduId.
  02: VP(SoAd.SWS_SoAd_00606):
      SoAd_TpCancelTransmit() should return E_NOT_OK and Det error SOAD_E_INV_PDUID should
      be reported.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00606</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1324</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_CancelTransmit_ParamInvalid_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>4044</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify whether SoAd_TpCancelTransmit() reports error SOAD_E_INV_PDUID in development mode
  if called with IF PduId.
&lt;/para&gt;

Test Object: 
  SoAd_TpCancelTransmit()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: call SoAd_TpCancelTransmit() with invalid PduId of an If PduRoute.
  02: VP(SoAd.SWS_SoAd_00606):
      SoAd_TpCancelTransmit() should return E_NOT_OK and Det error SOAD_E_INV_PDUID should
      be reported.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00606</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1325</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_OpenSoCon_NotManually</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>4100</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify call of SoAd_OpenSoCon in development mode for a socket connection configured
  with configuration parameter SoAdSocketAutomaticSoConSetup set to 'TRUE'. I.e.
  - if error code SOAD_E_INV_ARG is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_OpenSoCon()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: call SoAd_OpenSoCon with SoConId.
  02 VP: Det is called with error code SOAD_E_INV_ARG.
  03 VP: Error is returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00528</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>153</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1326</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_CloseSoCon_NotManually</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>4153</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify call of SoAd_CloseSoCon in development mode for a socket connection configured
  with configuration parameter SoAdSocketAutomaticSoConSetup set to 'TRUE'. I.e.
  - if error code SOAD_E_INV_ARG is reported to the Det_ReportError service and
  - E_NOT_OK is returned by the API.
&lt;/para&gt;

Test Object: 
  SoAd_CloseSoCon()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: call SoAd_CloseSoCon with SoConId and valid abort.
  02 VP: Det is called with error code SOAD_E_INV_ARG.
  03 VP: Error is returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00529</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1327</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_ReleaseRemoteAddr_NotManually</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>4205</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify call of SoAd_ReleaseRemoteAddr() in development mode for a socket
  connection configured with configuration parameter
  SoAdSocketAutomaticSoConSetup set to 'TRUE'. I.e.
  - if error code SOAD_E_INV_ARG is reported to the Det_ReportError service and
&lt;/para&gt;

Test Object: 
  SoAd_ReleaseRemoteAddr()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: call SoAd_ReleaseRemoteAddr() with SoConId.
  02 VP: Det is called with error code SOAD_E_INV_ARG.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00744</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>357</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1328</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_RxIndication_SocketIdInval</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>4255</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify proper call of SoAd_RxIndication in development mode with invalid SoConId.
    I.e. error code SOAD_E_INV_ARG is reported to the Det_ReportError service and
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is Udp
  
Test Execution: 
    01: Call SoAd_RxIndication with invalid SocketId.
    02: VP(SoAd.SWS_SoAd_00267):
        Det is called with error code SOAD_E_INV_ARG.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00267</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>74</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1329</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_RxIndication_NullBuffr</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>4303</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Verify if an error is reported to the Det_ReportError service in development mode when
  SoAd_RxIndication is called with parameter BufPtr equal to NULL.
  I.e. error code SOAD_E_PARAM_POINTER is reported to the Det_ReportError service and

Test Object: 
  SoAd_RxIndication()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: Call SoAd_RxIndication with BufPtr equal to NULL.
  02: VP(SoAd.SWS_BSW_00212.RxIndication):
      Det is called with error code SOAD_E_PARAM_POINTER.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_BSW_00212.RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>547</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1330</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_RxIndication_SourceInvalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>4350</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Verify if an error is reported to the Det_ReportError service in development mode when
  SoAd_RxIndication is called with an invalid RemoteAddrPtr.
  I.e. error code SOAD_E_INV_ARG is reported to the Det_ReportError service.

Test Object: 
  SoAd_RxIndication()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: Call SoAd_RxIndication with an invalid RemoteAddrPtr.
  02: VP(SoAd.SWS_SoAd_00268):
      Det is called with error code SOAD_E_INV_ARG.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00268</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1331</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_IfTransmit_NullPdu</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>4399</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_IfTransmit() API returns E_NOT_OK and calls a Det when it is called with
    SoAdSrcPduInfoPtr as NULL_PTR.
  
Test Object: 
    SoAd_IfTransmit()
  
Test Precondition: 
  
Test Execution: 
    01: Init SoAd
    02: Call SoAd_IfTransmit() with SoAdSrcPduInfoPtr as NULL_PTR.
    03: VP (SoAd.SWS_BSW_00212.IfTransmit):
        SoAd_IfTransmit returned E_NOT_OK
        A det was called with SOAD_E_PARAM_POINTER
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_BSW_00212.IfTransmit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>543</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1332</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_Init_NullConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>4449</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_Init() throws a Det with SOAD_E_PARAM_POINTER when
    the function is called with a NULL_PTR.
  
Test Object: 
    SoAd_Init()
  
Test Precondition: 
  
Test Execution: 
    01: Call SoAd_IfInit() with NULL_PTR
    02: VP (SoAd.SWS_BSW_00212.Init):
        SoAd_IfInit() calls a Det with error SOAD_E_PARAM_POINTER = 0x5E.

  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_BSW_00212.Init</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>548</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1333</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_IfTransmit_InvalPduId</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>4493</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_IfTransmit() API returns E_NOT_OK and calls a Det when it is called with an
    invalid PduId.
    I.e. PduId greater than highest PduId.
  
Test Object: 
    SoAd_IfTransmit()
  
Test Precondition: 
  
Test Execution: 
    01: Initialize SoAd.
    02: Call SoAd_IfTransmit() with PduId greater than highest PduId.
    03: VP (SoAd.SWS_SoAd_00214):
        SoAd_IfTransmit returned E_NOT_OK
        A det was called with SOAD_E_INV_PDUID
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00214</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>69</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1334</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_TpTransmit_InvalPduId</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>4544</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_TpTransmit() API returns E_NOT_OK and calls a Det when it is called with an
    invalid PduId.
    I.e. PduId greater than highest PduId.
  
Test Object: 
    SoAd_TpTransmit()
  
Test Precondition: 
  
Test Execution: 
    01: Initialize SoAd
    02: Call SoAd_TpTransmit() with PduId greater than highest PduId.
    03: VP (SoAd.SWS_SoAd_00237):
        SoAd_TpTransmit returned E_NOT_OK
        A det was called with SOAD_E_INV_PDUID
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00237</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>72</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1335</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_IfTransmit_Tcp_NullSduDataPtr</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>4595</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
     Test case verifies that when SoAd_IfTransmit() is called with SduDataPtr as NULL_PTR for a
     TCP connection, SoAd will call DET with SOAD_E_INV_ARG and return E_NOT_OK.
  
Test Object: 
    SoAd_IfTransmit()
  
Test Precondition: 
    - Communication Protocol TCP
    - Det enabled
  
Test Execution: 
    01: Initialize SoAd.
    02: Call SoAd_IfTransmit() on TCP connection with SduDataPtr as NULL_PTR.
    03: VP(): Verify that SoAd_IfTransmit returned E_NOT_OK, and Det was called with SOAD_E_INV_ARG.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.Dsn.Func0101.Tx.Tcp.If.Det.SduDataPtr.NullPtr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1073</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1336</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_GetRemoteAddr_NullPtr</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>4649</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_GetRemoteAddr() API returns E_NOT_OK and calls a Det when it is called with
    IpAddrPtr as NULL_PTR.
  
Test Object: 
    SoAd_GetRemoteAddr()
  
Test Precondition: 
  
Test Execution: 
    01: Initialize SoAd.
    02: Call SoAd_GetRemoteAddr() with IpAddrPtr as NULL_PTR.
    03: VP ():
        SoAd_GetRemoteAddr returned E_NOT_OK
        A det was called with SOAD_E_PARAM_POINTER
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_BSW_00212.GetRemoteAddr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>553</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1337</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_GetRemoteAddr_InvalidSoConId</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>4700</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_GetRemoteAddr() API returns E_NOT_OK and calls a Det when it is called with an
    invalid SoConId.
    I.e SoConId greater than highest Id
  
Test Object: 
    SoAd_GetRemoteAddr()
  
Test Precondition: 
  
Test Execution: 
    01: Initialize SoAd.
    02: Call SoAd_GetRemoteAddr() with SoConId greater than highest Id.
    03: VP (SoAd.SWS_SoAd_00660):
        SoAd_GetRemoteAddr returned E_NOT_OK
        A det was called with SOAD_E_INV_ARG
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00660</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>266</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1338</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_SetUniqueRemoteAddr_NullPtr</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>4754</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_SetUniqueRemoteAddr() API returns E_NOT_OK and calls a Det when it is called
    with RemoteAddrPtr as NULL_PTR.
  
Test Object: 
    SoAd_SetUniqueRemoteAddr()
  
Test Precondition: 
  
Test Execution: 
    01: Initialize SoAd.
    02: Call SoAd_SetUniqueRemoteAddr() with RemoteAddrPtr as NULL_PTR.
    03: VP ():
        SoAd_SetUniqueRemoteAddr returned E_NOT_OK
        A det was called with SOAD_E_PARAM_POINTER
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_BSW_00212.SetUniqueRemoteAddr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>552</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1339</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_SetUniqueRemoteAddr_InvalidSoConId</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>4806</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_SetUniqueRemoteAddr() API returns E_NOT_OK and calls a Det when it is called
    with an invalid SoConId.
    I.e SoConId greater than highest Id
  
Test Object: 
    SoAd_SetUniqueRemoteAddr()
  
Test Precondition: 
  
Test Execution: 
    01: Initialize SoAd.
    02: Call SoAd_SetUniqueRemoteAddr() with SoConId greater than highest Id.
    03: VP (SoAd.SWS_SoAd_00673):
        SoAd_SetUniqueRemoteAddr returned E_NOT_OK
        A det was called with SOAD_E_INV_ARG
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00673</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>277</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1340</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_GetSoConMode_NullPtr</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>4859</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_GetSoConMode() API returns E_NOT_OK and calls a Det when it is called
    with ModePtr as NULL_PTR.
  
Test Object: 
    SoAd_GetSoConMode()
  
Test Precondition: 
  
Test Execution: 
    01: Initialize SoAd.
    02: Call SoAd_GetSoConMode() with ModePtr as NULL_PTR.
    03: VP ():
        SoAd_GetSoConMode returned E_NOT_OK
        A det was called with SOAD_E_PARAM_POINTER
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_BSW_00212.GetSoConMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>550</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1341</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_GetSoConMode_InvalidSoConId</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>4910</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_GetSoConMode() API returns E_NOT_OK and calls a Det when it is called with an
    invalid SoConId.
    I.e SoConId greater than highest Id.
  
Test Object: 
    SoAd_GetSoConMode()
  
Test Precondition: 
  
Test Execution: 
    01: Initialize SoAd.
    02: Call SoAd_GetSoConMode() with SoConId greater than highest Id.
    03: VP (SoAd.EB.GetSoConMode.InvalidSoConId):
        SoAd_GetSoConMode returned E_NOT_OK
        A det was called with SOAD_E_INV_ARG
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.GetSoConMode.InvalidSoConId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>585</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1342</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_TxConfirmation_ReadonlySoCon</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>4962</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify whether SoAd_TxConfirmation reports error SOAD_E_INV_SOCKETID in development mode
  if called with read only SocketId.
&lt;/para&gt;

Test Object: 
  SoAd_TxConfirmation()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: Call SoAd_TxConfirmation with read only SocketId.
  02: VP(SoAd.SWS_SoAd_00270):
      Det error SOAD_E_INV_SOCKETID should be reported.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00270</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1343</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_TxConfirmation_UdpSoCon</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>5009</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify whether SoAd_TxConfirmation reports error SOAD_E_INV_SOCKETID in development mode
  if called with invalid SocketId.
&lt;/para&gt;

Test Object: 
  SoAd_TxConfirmation()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: Call SoAd_TxConfirmation with Udp SocketId.
  02: VP(SoAd.SWS_SoAd_00270):
      Det error SOAD_E_INV_SOCKETID should be reported.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00270</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1344</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_CopyTxData_ReadonlySoCon</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>5056</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify whether SoAd_CopyTxData reports error SOAD_E_INV_SOCKETID in development mode
  if called with read only SocketId.
&lt;/para&gt;

Test Object: 
  SoAd_CopyTxData()

Test Precondition: 
  SoAd module is initialized.

Test Execution: 
  01: Call SoAd_CopyTxData with read only SocketId and valid BufPtr and BufLength.
  02: VP(SoAd.SWS_SoAd_00633):
      SoAd_CopyTxData should return E_NOT_OK and Det error SOAD_E_INV_SOCKETID should
      be reported.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00633</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>242</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1345</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_TpTransmit_UL_IF</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>5109</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      Verify that if SoAd_TpTransmit() is called with PduId that is configured
      to have the upper layer as IF, E_NOT_OK
  
Test Object: 
    SoAd_TpTransmit()
  
Test Precondition: 
  
Test Execution: 
    01: Call SoAd_TpTransmit().
    02: VP(): E_NOT_OK is returned and Det error SOAD_E_INV_ARG is reported to DET.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TpTransmit_UL_IF</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>636</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1346</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_DisableSpecificRouting_InvalidID</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>5155</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      Verify that SoAd_DisableSpecificRouting() API returns E_NOT_OK and reports SOAD_E_INV_ARG to
      Det if it is called with invalid ID.
  
Test Object: 
    SoAd_DisableSpecificRouting()
  
Test Precondition: 
    SoAd module is not initialized.
  
Test Execution: 
    01: Call SoAd_DisableSpecificRouting() using an invalid parameter id.
    02: VP(SoAd.SWS_SoAd_00719): E_NOT_OK is returned and Det error SOAD_E_INV_ARG is reported.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00719</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>325</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1347</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_SetUniqueRemoteAddr_AutoSetup</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>5201</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_SetUniqueRemoteAddr() API returns E_NOT_OK and reports SOAD_E_INV_ARG to Det
    if called with a socket connection configured with SoAdSocketAutomaticSoConSetup set to TRUE.
  
Test Object: 
    SoAd_SetUniqueRemoteAddr()
  
Test Precondition: 
    SoAdSocketAutomaticSoConSetup is true for the used socket connection.
  
Test Execution: 
    01: Call SoAd_SetUniqueRemoteAddr() with a SoConId that has SoAdSocketAutomaticSoConSetup TRUE.
    02: VP(): Verify that E_NOT_OK was returned and SOAD_E_INV_ARG was reported to Det.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SetUniqueRemoteAddr_Auto</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>637</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1348</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_SetUniqueRemoteAddr_AssignedSoConId_NULLPTR</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>5250</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_SetUniqueRemoteAddr() API returns E_NOT_OK and reports SOAD_E_PARAM_POINTER to Det
    if AssignedSoConIdPtr is NULL_PTR.
  
Test Object: 
    SoAd_SetUniqueRemoteAddr()
  
Test Precondition: 
  
Test Execution: 
    01: Call SoAd_SetUniqueRemoteAddr() with AssignedSoConIdPtr set to NULL_PTR.
    02: VP(): Verify that E_NOT_OK was returned and SOAD_E_PARAM_POINTER was reported to Det.
    
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_BSW_00212.SetUniqueRemoteAddr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>552</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1349</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_TcpIpEvent_Invalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>5303</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if SoAd_TcpIpEvent() is called using an invalid Event parameter, nothing
    will be reported to Det.
  
Test Object: 
    SoAd_TcpIpEvent()
  
Test Precondition: 
  
Test Execution: 
    01: Call SoAd_TcpIpEvent() using an invalid Event.
    02: VP (): Verify that nothing was reported to Det.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.SWS_SoAd_00278.InvalidEvent</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1047</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1350</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_SetRemoteAddr_Ipv6</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>5348</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if SoAd_SetRemoteAddr() is called for a socket connection which is
    configured to have the domain IPV6, with a RemoteAddrPtr which has the domain IPV4,
    E_NOT_OK will be returned and SOAD_E_INV_ARG reported to DET.
  
Test Object: 
    SoAd_SetRemoteAddr()
  
Test Precondition: 
    SoAd module is initialized.
  
Test Execution: 
    01: Call SoAd_SetRemoteAddr with IPV4 domain for a IPV6 socket.
    02: VP(): Verify that E_NOT_OK was returned.
    03: VP(): Verify that SOAD_E_INV_ARG was reported to DET.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00699</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>305</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1351</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_SetUniqueRemoteAddr_Ipv6</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>5410</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if SoAd_SetUniqueRemoteAddr() is called for a socket connection which
    is configured to have the domain IPV6, with a RemoteAddrPtr which has the domain IPV4,
    E_NOT_OK will be returned and SOAD_E_INV_ARG reported to DET.
  
Test Object: 
    SoAd_SetUniqueRemoteAddr()
  
Test Precondition: 
    SoAd module is initialized.
  
Test Execution: 
    01: Call SoAd_SetUniqueRemoteAddr() with IPV4 domain for a IPV6 socket.
    02: VP(): Verify that E_NOT_OK was returned.
    03: VP(): Verify that SOAD_E_INV_ARG was reported to DET.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00700</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>306</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1352</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_SetRemoteAddr_Ipv4</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>5473</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if SoAd_SetRemoteAddr() is called for a socket connection which is
    configured to have the domain IPV4, with a RemoteAddrPtr which has the domain IPV5,
    E_NOT_OK will be returned and SOAD_E_INV_ARG reported to DET.
  
Test Object: 
    SoAd_SetRemoteAddr()
  
Test Precondition: 
    SoAd module is initialized.
  
Test Execution: 
    01: Call SoAd_SetRemoteAddr with IPV6 domain for a IPV4 socket.
    02: VP(): Verify that E_NOT_OK was returned.
    03: VP(): Verify that SOAD_E_INV_ARG was reported to DET.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00699</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>305</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1353</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_SetUniqueRemoteAddr_Ipv4</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>5541</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if SoAd_SetUniqueRemoteAddr() is called for a socket connection which
    is configured to have the domain IPV4, with a RemoteAddrPtr which has the domain IPV6,
    E_NOT_OK will be returned and SOAD_E_INV_ARG reported to DET.
  
Test Object: 
    SoAd_SetUniqueRemoteAddr()
  
Test Precondition: 
    SoAd module is initialized.
  
Test Execution: 
    01: Call SoAd_SetUniqueRemoteAddr() with IPV6 domain for a IPV4 socket.
    02: VP(): Verify that E_NOT_OK was returned.
    03: VP(): Verify that SOAD_E_INV_ARG was reported to DET.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00700</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>306</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1354</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_EnableSpecificRouting_InvId</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>5611</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if SoAd_EnableSpecificRouting() is called using an invalid routing
    group id, E_NOT_OK will be returned and SOAD_E_INV_ARG will be reported to DET.
  
Test Object: 
    SoAd_EnableSpecificRouting()
  
Test Precondition: 
    SoAd module is initialized.
  
Test Execution: 
    01: Call SoAd_EnableSpecificRouting() with invalid routing group id.
    02: VP(): Verify that E_NOT_OK was returned.
    03: VP(): Verify that SOAD_E_INV_ARG was reported to DET.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00716</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>322</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1355</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_IfRoutingGroupTransmit_InvId</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>5669</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if SoAd_IfRoutingGroupTransmit() is called using an invalid routing
    group id, E_NOT_OK will be returned and SOAD_E_INV_ARG will be reported to DET.
  
Test Object: 
    SoAd_IfRoutingGroupTransmit()
  
Test Precondition: 
    SoAd module is initialized.
  
Test Execution: 
    01: Call SoAd_IfRoutingGroupTransmit() with invalid routing group id.
    02: VP(): Verify that E_NOT_OK was returned.
    03: VP(): Verify that SOAD_E_INV_ARG was reported to DET.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00658</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>264</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1356</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_IfSpecificRoutingGroupTransmit_NotTrigg</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>5725</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if SoAd_IfSpecificRoutingGroupTransmit() is called using a routing
    group that is not triggerable, E_NOT_OK will be returned and SOAD_E_INV_ARG will be
    reported to DET.
  
Test Object: 
    SoAd_IfRoutingGroupTransmit()
  
Test Precondition: 
    SoAd module is initialized.
  
Test Execution: 
    01: Call SoAd_IfSpecificRoutingGroupTransmit() with a routing group that is not triggerable.
    02: VP(): Verify that E_NOT_OK was returned.
    03: VP(): Verify that SOAD_E_INV_ARG was reported to DET.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00713</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>319</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1357</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_SoAd_DtlsConnectionStateChg_RemoteAddr_NullPtr</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>5784</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify that SoAd_DtlsConnectionStateChg() API reports
  TESTLIB_SOAD_E_PARAM_POINTER to DET if called with NULL_PTR as RemoteAddrPtr.
&lt;/para&gt;

Test Object: 
  SoAd_DtlsConnectionStateChg()

Test Precondition: 
  Valid SocketId.
  RemoteAddrPtr is NULL_PTR.
  Dtls_State is SOAD_DTLS_STATE_CLOSED.

Test Execution: 
  01: Call SoAd_DtlsConnectionStateChg with valid SocketId and NULL_PTR as RemoteAddrPtr.
  02 VP: Det is called with error code TESTLIB_SOAD_E_PARAM_POINTER.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling.RemoteAddrNullPtr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1038</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1358</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_SoAd_DtlsConnectionStateChg_SocketID_Invalid_State_CONNECTING</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>5837</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Verify that SoAd_DtlsConnectionStateChg() API reports
  TESTLIB_SOAD_E_INV_SOCKETID to DET if called with invalid SocketId.
&lt;/para&gt;

Test Object: 
  SoAd_DtlsConnectionStateChg()

Test Precondition: 
  Invalid SocketId.
  Valid RemoteAddrPtr.
  Dtls_State is SOAD_DTLS_STATE_CONNECTING.

Test Execution: 
  01: Call SoAd_DtlsConnectionStateChg with invalid SocketId and valid RemoteAddrPtr.
  02 VP: Det is called with error code TESTLIB_SOAD_E_INV_SOCKETID.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling.SocketIdInvalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1039</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1359</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_SoAd_DtlsConnectionStateChg_SocketID_Invalid_State_CLOSED</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>5892</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Verify that SoAd_DtlsConnectionStateChg() API reports
  TESTLIB_SOAD_E_INV_SOCKETID to DET if called with invalid SocketId.
&lt;/para&gt;

Test Object: 
  SoAd_DtlsConnectionStateChg()

Test Precondition: 
  Invalid SocketId.
  Valid RemoteAddrPtr.
  Dtls_State is SOAD_DTLS_STATE_CLOSED.

Test Execution: 
  01: Call SoAd_DtlsConnectionStateChg() with invalid SocketId and valid RemoteAddrPtr.
  02 VP: Det is called with error code TESTLIB_SOAD_E_INV_SOCKETID.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling.SocketIdInvalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1039</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1360</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_SoAd_DtlsConnectionStateChg_Domain_Invalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>5948</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Verify that SoAd_DtlsConnectionStateChg() API reports
  TESTLIB_SOAD_E_INV_ARG to DET if called with invalid domain.
&lt;/para&gt;

Test Object: 
  SoAd_DtlsConnectionStateChg()

Test Precondition: 
  Valid SocketId.
  RemoteAddrPtr with invalid domain.
  Dtls_State is SOAD_DTLS_STATE_CONNECTING.

Test Execution: 
  01: Call SoAd_DtlsConnectionStateChg with valid SocketId and RemoteAddrPtr with invalid domain.
  02 VP: Det is called with error code TESTLIB_SOAD_E_INV_ARG.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling.DomainInvalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1041</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1361</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_SoAd_RxIndication_Domain_Invalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>6005</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Verify that SoAd_RxIndication() API reports
  TESTLIB_SOAD_E_INV_ARG to DET if called with invalid domain.
&lt;/para&gt;

Test Object: 
  SoAd_RxIndication()

Test Precondition: 
  Valid SocketId.
  RemoteAddrPtr with invalid domain.

Test Execution: 
  01: Call SoAd_RxIndication with valid SocketId and RemoteAddrPtr with invalid domain.
  02 VP: Det is called with error code TESTLIB_SOAD_E_INV_ARG.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.SWS_SoAd_00097.DomainInvalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1046</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1362</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_SoAd_TcpAccepted_Domain_Invalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>6060</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Verify that SoAd_TcpAccepted() API reports
  TESTLIB_SOAD_E_INV_ARG to DET if called with invalid domain.
&lt;/para&gt;

Test Object: 
  SoAd_TcpAccepted()

Test Precondition: 
  Valid SocketId.
  Valid SocketIdAccepted.
  RemoteAddrPtr with invalid domain.

Test Execution: 
  01: Call SoAd_TcpAccepted with valid SocketIds and RemoteAddrPtr with invalid domain.
  02 VP: Det is called with error code TESTLIB_SOAD_E_INV_ARG.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.SWS_SoAd_00099.DomainInvalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1043</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1363</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_00_SoAd_DtlsConnectionStateChg_TCP_SoCon</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0000_DetReports.c</sourcefile>
      <sourceline>6117</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_DtlsConnectionStateChg() API reports
    TESTLIB_SOAD_E_INV_SOCKETID to DET if called with SocketId that belongs
    to a TCP socket.
  
Test Object: 
    SoAd_DtlsConnectionStateChg()
  
Test Precondition: 
    SocketId is for a TCP socket.
    RemoteAddrPtr is valid.
    Dtls_State is SOAD_DTLS_STATE_CONNECTING.
  
Test Execution: 
    01: Call SoAd_SetRemoteAddr.
    02: Bring TCP socket to online state
    03: Call SoAd_DtlsConnectionStateChg in state CONNECTING with SocketId that is for a TCP socket.
    04 VP: Det is called with error code TESTLIB_SOAD_E_INV_SOCKETID.
    05: Call SoAd_DtlsConnectionStateChg in state CLOSED with SocketId that is for a TCP socket.
    06 VP: Det is called with error code TESTLIB_SOAD_E_INV_SOCKETID.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling.TcpSocketId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1040</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1364</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SoAd_ConTest_00_01_Udp_Con9_GetSoConId</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>96</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_GetSoConId for a connection configured with:
  - manual setup of the connection (SoAdSocketAutomaticSoConSetup is disabled)
  - SoAdLocalIpAddrAssigmentChg enabled
  - remote address/port set by configuration to specific value (non-wildcard)
  - UdpListenOnly disabled
&lt;/para&gt;

Test Object: 
  SoAd_GetSoConId()

Test Precondition: None.
Test Execution: 
  01: Call SoAd_GetSoConId with valid TxPduId
  02 VP(SoAd.EB.GetSoConId): E_OK is returned by SoAd_GetSoConId

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.GetSoConId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>634</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1365</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Udp_Con9_AddrAssignmentChg</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>155</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify correct call of upper layer by SoAd_LocalIpAddrAssignmentChg for a
  fan-out connection configured with:
  - manual setup of the connection (SoAdSocketAutomaticSoConSetup is disabled)
  - SoAdLocalIpAddrAssigmentChg enabled
  - remote address/port set by configuration to specific value (non-wildcard)
  - UdpListenOnly disabled
&lt;/para&gt;

Test Object: 
  SoAd_LocalIpAddrAssignmentChg()

Test Precondition: None.
Test Execution: 
  01: call SoAd_LocalIpAddrAssignmentChg
  02 VP: SoAdGenUL_LocalIpAddrAssignmentChg is called properly

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.LocalIpAddrAssignmentChg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>611</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00598</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>212</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1366</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Udp_GetRemoteAddr_NotSet</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>213</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that SoAd_GetRemoteAddr() shall return E_NOT_OK if the remote address of
    the socket connection specified by parameter SoConId is not set.
  
Test Object: 
    SoAd_SetRemoteAddr()
  
Test Precondition: 
  
Test Execution: 
    01: Call SoAd_GetRemoteAddr() using a SoConId which doesn't have the remote address configured
        and set.
    02: VP(): Verify that E_NOT_OK was returned.
    03: VP(): Verify that no further action took place.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00666</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>272</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1367</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Udp_Con9_SetRemoteAddr_Offline</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>268</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_SetRemoteAddr for UDP socket connection with TP upper layer:
  - socket connections are set up manually (i.e. SoAdSocketAutomaticSoConSetup is set to false)
  - SoAdLocalIpAddrAssigmentChg are enabled
  - remote address/port are set by configuration (non-wildcard)
&lt;/para&gt;

Test Object: 
  SoAd_SetRemoteAddr()

Test Precondition: 
  socket connection is closed

Test Execution: 
  01: Call SoAd_SetRemoteAddr
  02 VP(SoAd.SWS_SoAd_00533): E_OK is returned by SoAd_SetRemoteAddr
  03: call SoAd_GetRemoteAddr
  04 VP(SoAd.SWS_SoAd_00533):
     socket connection is configured with the previously set address

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00533</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1368</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Udp_Con9_OpenSoCon</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>317</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_OpenSoCon for a fan-out connection configured with:
  - manual setup of the connection (SoAdSocketAutomaticSoConSetup is disabled)
  - SoAdLocalIpAddrAssigmentChg enabled
  - remote address/port set by configuration to specific value (non-wildcard)
  - UdpListenOnly disabled
  Verify that if upper layers still refer the opened socket connection and SoAd_CloseSoCon(FALSE)
  is called, it will have no effect and socket will not be closed.
&lt;/para&gt;

Test Object: 
  SoAd_OpenSoCon()

Test Precondition: 
  no socket connection exists

Test Execution: 
  01: Call SoAd_OpenSoCon
  02 VP: E_OK is returned by SoAd_OpenSoCon
  03: call SoAd_Mainfunction
  04 VP: TcpIp_GetSocket is called with proper parameters
  05 VP: TcpIp_Bind is called with proper parameters
  06 VP(SoAd.SWS_SoAd_00689.2, SoAd.EB.PbVariantSupport.SoAdSocketFramePriority):
     TcpIp_ChangeParameter is called with TCPIP_PARAMID_FRAMEPRIO
     and the configured frame priority value.
  07 VP: SoAdGenUL_SoConModeChg is called twice with proper parameters
  08 VP: socket connection exists
  09: Call SoAd_OpenSoCon()
  10: Call SoAd_CloseSoCon(FALSE)
  11: Call SoAd_MainFunction()
  12: VP(): Verify that SoAd_CloseSoCon() had no effect.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00589.a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>390</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00689.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>410</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdSocketFramePriority</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>707</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1369</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Udp_Con9_SetRemoteAddr_Online</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>471</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_SetRemoteAddr for UDP socket connection with TP upper layer:
  - socket connections are set up manually (i.e. SoAdSocketAutomaticSoConSetup is set to false)
  - SoAdLocalIpAddrAssigmentChg are enabled
  - remote address/port are set by configuration (non-wildcard)
&lt;/para&gt;

Test Object: 
  SoAd_SetRemoteAddr()

Test Precondition: 
  socket connection is open

Test Execution: 
  01: Call SoAd_SetRemoteAddr
  02 VP(SoAd.SWS_SoAd_00532.2): E_NOT_OK is returned by SoAd_SetRemoteAddr
  03: call SoAd_GetRemoteAddr
  04 VP(SoAd.SWS_SoAd_00532.2):
     socket connection configuration was not changed

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00532.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>524</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1370</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Udp_Con9_CloseSoCon</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>519</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_CloseSoCon for a fan-out connection configured with:
  - manual setup of the connection (SoAdSocketAutomaticSoConSetup is disabled)
  - SoAdLocalIpAddrAssigmentChg enabled
  - remote address/port set by configuration to specific value (non-wildcard)
  - UdpListenOnly disabled
&lt;/para&gt;

Test Object: 
  SoAd_CloseSoCon()

Test Precondition: 
  socket connection exists

Test Execution: 
  01: Call SoAd_CloseSoCon
  02 VP: E_OK is returned by SoAd_CloseSoCon
  03 VP: socket connection still exists

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.CloseSoCon</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>639</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1371</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Udp_Con9_TcpIpEvent</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>590</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_TcpIpEvent for a fan-out connection configured with:
  - manual setup of the connection (SoAdSocketAutomaticSoConSetup is disabled)
  - SoAdLocalIpAddrAssigmentChg enabled
  - remote address/port set by configuration to specific value (non-wildcard)
  - UdpListenOnly disabled
&lt;/para&gt;

Test Object: 
  SoAd_TcpIpEvent()

Test Precondition: 
  socket connection exists

Test Execution: 
  01: call SoAd_Mainfunction
  02: call SoAd_TcpIpEvent signalizing TCP_UDP_CLOSED event
  03 VP: no socket connection exists(previous test calls SoAd_CloseSoCon() so calling
     SoAd_MainFunction() will bring the socket to SOAD_SOCON_RECONNECT).

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00643.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>437</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1372</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Udp_Con3_GetSoConId</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>687</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_GetSoConId for a connection fan-out configured with:
  - socket connections are set up manually (i.e. SoAdSocketAutomaticSoConSetup is set to false)
  - SoAdLocalIpAddrAssigmentChg are enabled
  - remote address/port are set by configuration (non-wildcard)
  - UdpListenOnly is disabled (Con1) / UdpListenOnly is enabled (Con3)
&lt;/para&gt;

Test Object: 
  SoAd_GetSoConId()

Test Precondition: None.
Test Execution: 
  01: Call SoAd_GetSoConId with valid TxPduId
  02 VP: E_NOT_OK is returned by SoAd_GetSoConId

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.GetSoConId.Fan</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>635</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1373</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Udp_Con3_AddrAssignmentChg</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>739</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify correct call of upper layer by SoAd_LocalIpAddrAssignmentChg for a
  connection fan-out configured with:
  - socket connections are set up manually (i.e. SoAdSocketAutomaticSoConSetup is set to false)
  - SoAdLocalIpAddrAssigmentChg are enabled
  - remote address/port are set by configuration (non-wildcard)
  - UdpListenOnly is disabled (Con1) / UdpListenOnly is enabled (Con3)
&lt;/para&gt;

Test Object: 
  SoAd_LocalIpAddrAssignmentChg()

Test Precondition: None.
Test Execution: 
  01: call SoAd_LocalIpAddrAssignmentChg
  02 VP: SoAdGenUL_LocalIpAddrAssignmentChg is called properly

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.LocalIpAddrAssignmentChg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>611</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00598</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>212</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1374</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Udp_Con3_SetRemoteAddr_Offline</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>797</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_SetRemoteAddr for UDP socket connection with PduHeaderMode enabled:
  - socket connections are set up manually (i.e. SoAdSocketAutomaticSoConSetup is set to false)
  - SoAdLocalIpAddrAssigmentChg are enabled
  - remote address/port are set by configuration (non-wildcard)
&lt;/para&gt;

Test Object: 
  SoAd_SetRemoteAddr()

Test Precondition: 
  socket connection is closed

Test Execution: 
  01: Call SoAd_SetRemoteAddr
  02 VP(SoAd.SWS_SoAd_00533): E_OK is returned by SoAd_SetRemoteAddr
  03: call SoAd_GetRemoteAddr
  04 VP(SoAd.SWS_SoAd_00533):
     socket connection is configured with the previously set address

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00533</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1375</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Udp_Con3_OpenSoCon</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>846</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_OpenSoCon for a connection fan-out configured with:
  - socket connections are set up manually (i.e. SoAdSocketAutomaticSoConSetup is set to false)
  - SoAdLocalIpAddrAssigmentChg are enabled
  - remote address/port are set by configuration (non-wildcard)
  - UdpListenOnly is disabled (Con1) / UdpListenOnly is enabled (Con3)
&lt;/para&gt;

Test Object: 
  SoAd_OpenSoCon()

Test Precondition: 
  no socket connection exists

Test Execution: 
  01: Call SoAd_OpenSoCon
  02 VP: E_OK is returned by SoAd_OpenSoCon
  03: call SoAd_Mainfunction
  04 VP: TcpIp_GetSocket is called with proper parameters
  05 VP: TcpIp_Bind is called with proper parameters
  06 VP: SoAdGenUL_SoConModeChg is called twice with proper parameters
  07 VP: socket connection exists

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00589.a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>390</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1376</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Udp_Con3_SetRemoteAddr_Online</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>949</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_SetRemoteAddr for UDP socket connection with PduHeaderMode enabled:
  - socket connections are set up manually (i.e. SoAdSocketAutomaticSoConSetup is set to false)
  - SoAdLocalIpAddrAssigmentChg are enabled
  - remote address/port are set by configuration (non-wildcard)
&lt;/para&gt;

Test Object: 
  SoAd_SetRemoteAddr()

Test Precondition: 
  socket connection is open

Test Execution: 
  01: Call SoAd_SetRemoteAddr
  02 VP(SoAd.SWS_SoAd_00533): E_OK is returned by SoAd_SetRemoteAddr
  03: call SoAd_GetRemoteAddr
  04 VP(SoAd.SWS_SoAd_00533):
     socket connection is configured with the previously set address

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00533</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1377</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Udp_Con3_CloseSoCon</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>997</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_CloseSoCon for a connection fan-out configured with:
  - socket connections are set up manually (i.e. SoAdSocketAutomaticSoConSetup is set to false)
  - SoAdLocalIpAddrAssigmentChg are enabled
  - remote address/port are set by configuration (non-wildcard)
  - UdpListenOnly is disabled (Con1) / UdpListenOnly is enabled (Con3)
&lt;/para&gt;

Test Object: 
  SoAd_CloseSoCon()

Test Precondition: 
  socket connection exists

Test Execution: 
  01: Call SoAd_CloseSoCon
  02 VP: E_OK is returned by SoAd_CloseSoCon
  03 VP: socket connection still exists

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.CloseSoCon</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>639</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1378</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Udp_Con7_GetSoConId</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>1087</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_GetSoConId for a connection configured with:
  - manual setup of the connection (SoAdSocketAutomaticSoConSetup is disabled)
  - SoAdLocalIpAddrAssigmentChg enabled
  - remote address/port set by configuration to ANY (wildcard)
  - UdpListenOnly disabled
&lt;/para&gt;

Test Object: 
  SoAd_GetSoConId()

Test Precondition: None.
Test Execution: 
  01: Call SoAd_GetSoConId with valid TxPduId
  02 VP: E_OK is returned by SoAd_GetSoConId
  03 VP: Correct SoConId is returned

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.GetSoConId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>634</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1379</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Udp_Con7_AddrAssignmentChg</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>1148</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify correct call of upper layer by SoAd_LocalIpAddrAssignmentChg for a
  connection configured with:
  - manual setup of the connection (SoAdSocketAutomaticSoConSetup is disabled)
  - SoAdLocalIpAddrAssigmentChg enabled
  - remote address/port set by configuration to ANY (wildcard)
  - UdpListenOnly disabled
&lt;/para&gt;

Test Object: 
  SoAd_LocalIpAddrAssignmentChg()

Test Precondition: None.
Test Execution: 
  01: call SoAd_LocalIpAddrAssignmentChg
  02 VP: SoAdGenUL_LocalIpAddrAssignmentChg is called properly

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.LocalIpAddrAssignmentChg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>611</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00598</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>212</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1380</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Udp_Con7_SetRemoteAddr_Offline</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>1205</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_SetRemoteAddr for UDP socket connection with PduHeaderMode disabled:
  - socket connections are set up manually (i.e. SoAdSocketAutomaticSoConSetup is set to false)
  - SoAdLocalIpAddrAssigmentChg are enabled
&lt;/para&gt;

Test Object: 
  SoAd_SetRemoteAddr()

Test Precondition: 
  socket connection is closed

Test Execution: 
  01: Call SoAd_SetRemoteAddr
  02 VP(SoAd.SWS_SoAd_00533): E_OK is returned by SoAd_SetRemoteAddr
  03: call SoAd_GetRemoteAddr
  04 VP(SoAd.SWS_SoAd_00533):
     socket connection is configured with the previously set address

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00533</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1381</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Udp_Con7_OpenSoCon</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>1252</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_OpenSoCon for a connection configured with:
  - manual setup of the connection (SoAdSocketAutomaticSoConSetup is disabled)
  - SoAdLocalIpAddrAssigmentChg enabled
  - remote address/port set by configuration to ANY (wildcard)
  - UdpListenOnly disabled
&lt;/para&gt;

Test Object: 
  SoAd_OpenSoCon()

Test Precondition: 
  no socket connection exists

Test Execution: 
  01: Call SoAd_OpenSoCon
  02 VP(SoAd.SWS_SoAd_00589.a): E_OK is returned by SoAd_OpenSoCon
  03: call SoAd_Mainfunction
  04 VP: TcpIp_GetSocket is called with proper parameters
  05 VP: TcpIp_Bind is called with proper parameters
  06 VP: SoAdGenUL_SoConModeChg is called with SOAD_SOCON_RECONNECT
  07 VP(SoAd.SWS_SoAd_00686.2): Verify that socket connection state is SOAD_SOCON_RECONNECT.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00589.a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>390</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00686.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>417</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1382</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Udp_Con7_RxIndication</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>1355</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_RxIndication for a connection configured with:
  - manual setup of the connection (SoAdSocketAutomaticSoConSetup is disabled)
  - SoAdLocalIpAddrAssigmentChg enabled
  - SoAdSocketMsgAcceptanceFilterEnabled enabled
  - remote address/port set by configuration to ANY (wildcard)
  - UdpListenOnly disabled
&lt;/para&gt;

Test Object: 
  SoAd_RxIndication()

Test Precondition: 
  no socket connection exists

Test Execution: 
  01: Call SoAd_RxIndication with valid parameters
  02 VP: SoAdGenUL_SoConModeChg is called with correct parameters
  03 VP(SWS_SoAd_00592): socket connection exists (restricted test to Tx)
  04: Call SoAd_GetAndResetMeasurementData() with measurement index SOAD_MEAS_DROP_UDP
  05: VP(SWS_SoAd_00758): Verify that UDP measurement data counter was not incremented as received
      PDU was not discarded.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00592</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>207</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00758</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>371</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1383</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Udp_Con7_SetRemoteAddr_Online</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>1454</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_SetRemoteAddr for UDP socket connection with PduHeaderMode disabled:
  - socket connections are set up manually (i.e. SoAdSocketAutomaticSoConSetup is set to false)
  - SoAdLocalIpAddrAssigmentChg are enabled
&lt;/para&gt;

Test Object: 
  SoAd_SetRemoteAddr()

Test Precondition: 
  socket connection is closed

Test Execution: 
  01: Wait for UdpAliveTimeout to unlock SetRemoteAddr and restore previous remote address
  02: Call SoAd_SetRemoteAddr
  03 VP(SoAd.SWS_SoAd_00533): E_OK is returned by SoAd_SetRemoteAddr
  04: call SoAd_GetRemoteAddr
  05 VP(SoAd.SWS_SoAd_00533):
     socket connection is configured with the previously set address

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00533</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1384</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Udp_Con7_CloseSoCon</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>1522</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_CloseSoCon for a connection configured with:
  - manual setup of the connection (SoAdSocketAutomaticSoConSetup is disabled)
  - SoAdLocalIpAddrAssigmentChg enabled
  - remote address/port set by configuration to ANY (wildcard)
  - UdpListenOnly disabled
&lt;/para&gt;

Test Object: 
  SoAd_CloseSoCon()

Test Precondition: 
  socket connection exists

Test Execution: 
  01: Call SoAd_CloseSoCon
  02 VP: E_OK is returned by SoAd_CloseSoCon
  03 VP: socket connection still exists (restricted test to Tx)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.CloseSoCon</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>639</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1385</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Udp_Con7_TcpIpEvent</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>1592</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_TcpIpEvent for a connection configured with:
  - manual setup of the connection (SoAdSocketAutomaticSoConSetup is disabled)
  - SoAdLocalIpAddrAssigmentChg enabled
  - remote address/port set by configuration to ANY (wildcard)
  - UdpListenOnly disabled
&lt;/para&gt;

Test Object: 
  SoAd_TcpIpEvent()

Test Precondition: 
  socket connection exists

Test Execution: 
  01: call SoAd_Mainfunction
  02: call SoAd_TcpIpEvent signalizing TCP_UDP_CLOSED event
  03 VP: no socket connection exists (restricted test to Tx)(previous test calls SoAd_CloseSoCon()
     so calling SoAd_MainFunction() will bring the socket to SOAD_SOCON_OFFLINE).

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00643.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>437</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1386</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Udp_Con10_GetSoConId</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>1684</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_GetSoConId for a connection configured with:
  - socket connection is set up automatically (i.e. SoAdSocketAutomaticSoConSetup is set to true)
  - SoAdLocalIpAddrAssigmentChg is enabled
  - remote address/port is set by configuration
  - UdpListenOnly is disabled
&lt;/para&gt;

Test Object: 
  SoAd_GetSoConId()

Test Precondition: None.
Test Execution: 
  01: Call SoAd_GetSoConId with valid TxPduId
  02 VP: E_OK is returned by SoAd_GetSoConId
  03 VP: Correct SoConId is returned

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.GetSoConId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>634</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1387</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Udp_Con10_Open</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>1745</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify opening of a connection configured with:
  - socket connection is set up automatically (i.e. SoAdSocketAutomaticSoConSetup is set to true)
  - SoAdLocalIpAddrAssigmentChg is enabled
  - remote address/port is set by configuration
  - UdpListenOnly is disabled
&lt;/para&gt;

Test Object: 
  SoAd_LocalIpAddrAssignmentChg()
  SoAd_MainFunction()

Test Precondition: 
  no socket connection exists

Test Execution: 
  01: call SoAd_LocalIpAddrAssignmentChg
  02 VP: no socket connection exists (reconnecting)
  03 call SoAd_Mainfunction
  04 VP: TcpIp_GetSocket is called with proper parameters
  05 VP: TcpIp_Bind is called with proper parameters
  06 VP: socket connection exists

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00589.b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>391</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.LocalIpAddrAssignmentChg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>611</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00598</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>212</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1388</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Udp_Con10_Close</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>1847</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify closing of a connection configured with:
  - socket connection is set up automatically (i.e. SoAdSocketAutomaticSoConSetup is set to true)
  - SoAdLocalIpAddrAssigmentChg is enabled
  - remote address/port is set by configuration
  - UdpListenOnly is disabled
&lt;/para&gt;

Test Object: 
  SoAd_TcpIpEvent()

Test Precondition: 
  socket connection exists

Test Execution: 
  01: call SoAd_TcpIpEvent signalizing TCP_UDP_CLOSED event
  02 VP: The socket connection changes from mode SOAD_SOCON_ONLINE to SOAD_SOCON_RECONNECT.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00643.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>437</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1389</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Udp_Con10_Reopen</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>1925</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify reopening of a connection configured with:
  - socket connection is set up automatically (i.e. SoAdSocketAutomaticSoConSetup is set to true)
  - SoAdLocalIpAddrAssigmentChg is enabled
  - remote address/port is set by configuration
  - UdpListenOnly is disabled
&lt;/para&gt;

Test Object: 
  SoAd_Mainfunction()

Test Precondition: 
  no socket connection exists

Test Execution: 
  01: call SoAd_Mainfunction
  02 VP: TcpIp_GetSocket is called with proper parameters
  03 VP: TcpIp_Bind is called with proper parameters
  04 VP: socket connection exists

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00586</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1390</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Udp_Con10_Reclose</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>2012</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify closing after reopening of a connection configured with:
  - socket connection is set up automatically (i.e. SoAdSocketAutomaticSoConSetup is set to true)
  - SoAdLocalIpAddrAssigmentChg is enabled
  - remote address/port is set by configuration
  - UdpListenOnly is disabled
&lt;/para&gt;

Test Object: 
  SoAd_TcpIpEvent()

Test Precondition: 
  socket connection exists

Test Execution: 
  01: call SoAd_TcpIpEvent signalizing TCP_UDP_CLOSED event
  02 VP: no socket connection exists (reconnecting)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00643.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>437</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1391</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Udp_Con9_CloseImmediate</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>2090</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test checks the behaviour of SoAd_CloseSoCon when it is called with abort = TRUE.
  The connection shall be closed immediately in the first main function. The concurrent transmission
  is canceled.

Test Object: None.
Test Precondition: 
  - SoAd is initialized
  - regarding socket connection is assigned
  - protocol UDP

Test Execution: 
  01: Start a transmission
  02: SoAd tick
  03: VP: check that transmission is ongoing
  04: Call SoAd_CloseSoCon with Abort = TRUE
  05: VP: SoAd_CloseSon returns E_OK
  06: call SoAd_Mainfunction to trigger socket shutdown
  07: VP: SoAd calls TxConfirmation for transmitted PDU with E_NOT_OK
  08: VP: SoAd signalizes receive cancellation
  08: VP: SoAd calls TcpIp_Close with following arguments:
  09: VP: SoAd signalizes socket connection mode change
  10: Signalizes TCP close
  11: VP: No other API called

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00642.a.UDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>433</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1392</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_CloseSoCon_TcpIpEvent_UDP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>2263</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if the call of SoAd_CloseSoCon() and SoAd_TcpIpEvent(TCPIP_UDP_CLOSED),
    for the same socket connection, are performed in the same main function period, TcpIp_Close()
    will not be called and the socket will be in OFFLINE mode.
  
Test Object: None.
Test Precondition: 
    - SoAd is initialized
    - regarding socket connection is assigned
    - protocol UDP
  
Test Execution: 
    01: Open an UDP socket.
    02: VP(): Verify that the socket is in ONLINE.
    03: Call SoAd_CloseSoCon() to close the socket connection.
    04: Call SoAd_TcpIpEvent(TCPIP_UDP_CLOSED) to close the socket.
    05: Call SoAd_MainFunction() to process the closing action.
    06: VP(): Verify that TcpIp_Close() was not called.
    07: VP(): Verify that the socket is in OFFLINE.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.CloseSoCon_TcpIpEvent</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>653</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1393</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Udp_Con2_AddrAssignmentChg</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>2366</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify correct call of upper layer by SoAd_LocalIpAddrAssignmentChg for a
  connection fan-out configured with:
  - socket connections are set up manually (i.e. SoAdSocketAutomaticSoConSetup is set to false)
  - SoAdLocalIpAddrAssigmentChg are enabled
  - remote address/port are set by configuration (non-wildcard)
  - socket connection 2 is configured without a socket route
&lt;/para&gt;

Test Object: 
  SoAd_LocalIpAddrAssignmentChg()

Test Precondition: None.
Test Execution: 
  01: call SoAd_LocalIpAddrAssignmentChg
  02 VP: SoAdGenUL_LocalIpAddrAssignmentChg is called properly

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.LocalIpAddrAssignmentChg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>611</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00598</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>212</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1394</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Udp_Con2_OpenSoCon</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>2423</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_OpenSoCon for a connection fan-out configured with:
  - socket connections are set up manually (i.e. SoAdSocketAutomaticSoConSetup is set to false)
  - SoAdLocalIpAddrAssigmentChg are enabled
  - remote address/port are set by configuration (non-wildcard)
  - socket connection 2 is configured without a socket route
&lt;/para&gt;

Test Object: 
  SoAd_OpenSoCon()

Test Precondition: 
  no socket connection exists

Test Execution: 
  01: Call SoAd_OpenSoCon
  02 VP: E_OK is returned by SoAd_OpenSoCon
  03: call SoAd_Mainfunction
  04 VP(SoAd.SWS_SoAd_00589.a): TcpIp_GetSocket is called with proper parameters
  05 VP(SoAd.SWS_SoAd_00589.a): TcpIp_Bind is called with proper parameters
  06 VP(SoAd.SWS_SoAd_0591):
     SoAdGenUL_SoConModeChg is called twice with proper parameters
  07 VP(SoAd.SWS_SoAd_00589.a): socket connection exists

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00589.a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>390</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00591</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>206</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1395</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Udp_Con2_CloseSoCon</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>2523</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_CloseSoCon for a connection fan-out configured with:
  - socket connections are set up manually (i.e. SoAdSocketAutomaticSoConSetup is set to false)
  - SoAdLocalIpAddrAssigmentChg are enabled
  - remote address/port are set by configuration (non-wildcard)
  - socket connection 2 is configured without a socket route
&lt;/para&gt;

Test Object: 
  SoAd_CloseSoCon()

Test Precondition: 
  socket connection exists

Test Execution: 
  01: Call SoAd_CloseSoCon
  02 VP: E_OK is returned by SoAd_CloseSoCon
  03 VP: socket connection still exists

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.CloseSoCon</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>639</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1396</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Udp_Con2_TcpIpEvent</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>2592</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_TcpIpEvent for a connection fan-out configured with:
  - socket connections are set up manually (i.e. SoAdSocketAutomaticSoConSetup is set to false)
  - SoAdLocalIpAddrAssigmentChg are enabled
  - remote address/port are set by configuration (non-wildcard)
  - socket connection 2 is configured without a socket route
&lt;/para&gt;

Test Object: 
  SoAd_TcpIpEvent()

Test Precondition: 
  socket connection exists

Test Execution: 
  01: call SoAd_Mainfunction
  02: call SoAd_TcpIpEvent signalizing TCP_UDP_CLOSED event
  03 VP: no socket connection exists(previous test calls SoAd_CloseSoCon() so calling
     SoAd_MainFunction() will bring the socket to SOAD_SOCON_OFFLINE).

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00643.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>437</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1397</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Con03_Udp_SoCon7_SetRemoteAddr_ImmediateOnline</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>2662</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test shall verify that a UDP socket connection in the state SOAD_SOCON_RECONNECT
  will immediately change its state to SOAD_SOCON_ONLINE if SoAd_SetRemoteAddr() is called
  with a valid (non wildcard) remote address.

Test Object: 
  SoAd_SetRemoteAddr()

Test Precondition: 
  SoAd is initialized.

Test Execution: 
  01: Call SoAd_OpenSoCon(), SoAd_LocalIpAddrAssignmentChg() and SoAd_MainFunction()
      to bring the socket connection to the state SOAD_SOCON_RECONNECT.
  02: Call SoAd_SetRemoteAddr() to set a valid remote address.
  03 VP():
      Verify that SoAdGenUL_SoConModeChg() reports SOAD_SOCON_ONLINE in the context of
      SoAd_SetRemoteAddr().

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SetRemoteAddr.ImmediateOnline</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>586</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1398</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_CloseSoCon_OFFLINE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>2770</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if a socket connection is in SOAD_SOCON_OFFLINE state and
    SoAd_CloseSoCon() is called, E_OK will be returned and no action shall be performed.
  
Test Object: 
    SoAd_CloseSoCon()
  
Test Precondition: 
    SoConState is OFFLINE.
  
Test Execution: 
    01: Call SoAd_GetSoConMode() and verify that SoConMode is OFFLINE.
    02: Call SoAd_CloseSoCon().
    03: VP(): Verify that E_OK was returned.
    04: Call SoAd_MainFunction().
    05: VP(): Verify that no action was performed and SoConMode is still OFFLINE.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.CloseSoCon_OfflineState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>638</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1399</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Con03_Udp_SoCon7_SetUniqueRemoteAddr_SetRemoteAddr_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>2841</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test shall verify that a unique UDP socket connection shall be locked after a an unique SocketConnection has been established

Test Object: 
  SoAd_SetRemoteAddr()

Test Precondition: 
  SoAd is initialized.

Test Execution: 
  01: Call SoAd_OpenSoCon().
  02: Call SoAd_SetUniqueRemoteAddr() to set a valid remote address.
  03: Call SoAd_SetRemoteAddr() to set try to set remote addr again.
  03 VP():
      Verify that SoAdGenUL_SoConModeChg() reports SOAD_SOCON_ONLINE in the context of
      SoAd_SetRemoteAddr().

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.Udp.UsedSetRemoteAddr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1096</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1400</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Con03_Udp_SoCon7_SetUniqueRemoteAddr_ReleaseRemoteAddress_FFFF_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>2920</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test shall verify that a unique UDP socket connection shall be locked after a an unique
  SocketConnection has been established

Test Object: 
  SoAd_SetRemoteAddr()

Test Precondition: 
  SoAd is initialized.

Test Execution: 
  01: Call SoAd_OpenSoCon().
  02: Call SoAd_SetUniqueRemoteAddr() to set a valid remote address.
  03: Call SoAd_SetRemoteAddr() to set try to set remote addr again.
  03 VP():
      Verify that SoAdGenUL_SoConModeChg() reports SOAD_SOCON_ONLINE in the context of
      SoAd_SetRemoteAddr().

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.RemoteAddressHandling.SetRemoteAddr.Udp.LockState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1097</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1401</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Con03_Udp_SoCon7_ReleaseRemoteAddress_No_RemoteAdress</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>3012</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test shall verify that remote address that is not set shall not be released

Test Object: 
  SoAd_SetRemoteAddr()

Test Precondition: 
  SoAd is initialized.

Test Execution: 
  01: Call SoAd_OpenSoCon().
  02: Call SoAd_ReleaseRemoteAddr() to set try to set remote addr again.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SetRemoteAddr.ImmediateOnline</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>586</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1402</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Con03_Udp_SoCon7_ReleaseRemoteAddress_RemoteAdress_And_Port_Set</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>3067</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test shall verify that while releasing the SocketConnection a connection without wildcard parameter must not be reset

Test Object: 
  SoAd_SetRemoteAddr()

Test Precondition: 
  SoAd is initialized.

Test Execution: 
  01: Call SoAd_OpenSoCon().
  02: Call SoAd_ReleaseRemoteAddr() to set try to reset .

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SetRemoteAddr.ImmediateOnline</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>586</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1403</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Con03_Udp_SoCon0_ReleaseRemoteAddress_TCP_SetRemoteAddrUsed</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>3123</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test shall verify that releasing a TCP RemoteAddress where SoAd_SetRemoteAddr was used is not possible

Test Object: 
  SoAd_SetRemoteAddr()

Test Precondition: 
  SoAd is initialized.

Test Execution: 
  01: Call SoAd_OpenSoCon().
  02: Call SoAd_ReleaseRemoteAddr() to set try to reset .

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.Tcp.UsedSetRemoteAddr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1098</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1404</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Con03_Udp_SoCon0_ReleaseRemoteAddress_TCP_OFFLINE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>3175</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test shall verify that releasing a TCP RemoteAddress where the socket is offline should not be possible

Test Object: 
  SoAd_SetRemoteAddr()

Test Precondition: 
  SoAd is initialized.

Test Execution: 
  01: Call SoAd_OpenSoCon().
  02: Call SoAd_ReleaseRemoteAddr() to set try to reset .

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00733</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>346</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1405</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Con03_Tcp_SoCon14_Release_SetRemoteAddr_Used_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>3222</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
  This test shall verify that a unique UDP socket connection shall be locked after a an unique SocketConnection has been established

Test Object: 
  SoAd_SetRemoteAddr()

Test Precondition: 
  SoAd is initialized.

Test Execution: 
  01: Call SoAd_OpenSoCon().
  02: Call SoAd_SetUniqueRemoteAddr() to set a valid remote address.
  03: Call SoAd_SetRemoteAddr() to set try to set remote addr again.
  03 VP():
      Verify that SoAdGenUL_SoConModeChg() reports SOAD_SOCON_ONLINE in the context of
      SoAd_SetRemoteAddr().

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SetRemoteAddr.ImmediateOnline</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>586</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1406</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Udp_Dtls_OpenSocon</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>3304</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Verify the proper Call of TcpIp_DtlsClose in the case that more than one SoCons
  were opened but only one is closed.
  Rational: If all are closed then the TcpIp Module handles the Tls Closing

Test Object: 
  SoAd_CloseSoCon()

Test Precondition: 
  no socket connection exists

Test Execution: 
  01: Call SoAd_OpenSoCon for SoCon
  02: Call SoAd_OpenSoCon for SoCon2
  03: Call SoAd_Mainfunction
  04 VP: TcpIp_GetSocket is called with proper parameters
  05 VP: TcpIp_Bind is called with proper parameters
  06 VP: TcpIp_ChangeParameter is called with TCPIP_PARAMID_TLS_CONNECTION_ASSIGNMENT
     and the configured TlsId.
  07 VP: Make sure Socon 1 is online
  08 VP: Make sure Socon 2 is not offline
  09: Call SoAd_CloseSoCon(FALSE)
  10: Call SoAd_MainFunction()
  11: VP(): Verify that because one not closed SoCon remains in the SoConGroup
  TcpIp_DtlsClose was called.

Test Input: Two opened socket connections with Dtls configured
Test Output: TcpIp_DtlsClose() with correct parameter was called&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsClose</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1407</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_01_Udp_Dtls_ReleaseRemoteAdress</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0001_ConnectionSetupUdp.c</sourcefile>
      <sourceline>3467</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that for a SocketConnectionGroup which has Dtls enabled the
  call of SoAd_ReleaseRemoteAddr will also call TcpIp_DtlsClose to signal to TLS.
&lt;/para&gt;

Test Object: 
  SoAd_ReleaseRemoteAddr()

Test Precondition: 
  SocketConnectionGroup with SoAdDatagramTlsConnectionRef set

Test Execution: 
  01: Call SoAd_OpenSoCon
  02 VP: E_OK is returned by SoAd_OpenSoCon
  03: call SoAd_ReleaseRemoteAddr
  04 VP: Verify that TcpIp_DtlsClose was called

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsClose</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1408</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SoAd_ConTest_00_02_00_Udp_MultipleSocketConnections</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>486</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      This test verifies that opening an UDP socket connection which is part of a socket
      connection group containing multiple sockets connections, will follow the next steps:
        - get a socket from TcpIp by calling TcpIp_SoAdGetSocket(using correct domain and
          protocol type)
        - bind the socket to the local address and port via TcpIp_Bind().
        - assign the UDP socket connection to the socket connection group.
        - activate the socket connection
  
Test Object: None.
Test Precondition: 
    - SoAdSocketConnectionGroup has 3 configured SoAdSocketConnection.
  
Test Execution: 
    01: Call SoAd_LocalIpAddrAssignmentChg() and SoAd_OpenSoCon().
    02: Call SoAd_MainFunction() to start processing the open action.
    03: VP(SoAd.SWS_SoAd_00639.1a):
        Verify that TcpIp_GetSocket() was called with correct domain and protocol type.
    04: VP(SoAd.SWS_SoAd_00639.1c):
        Verify that TcpIp_Bind() was called with correct local address and port.
    05: VP(SoAd.SWS_SoAd_00639.1d):
        Verify that the socket was assigned to the socket connection group.
    06: VP(SoAd.SWS_SoAd_00639.1e):
        Verify that the socket connection is activated and is ready for communication.
    07: VP():
        Verify that the second socket connection from the socket connection group is in OFFLINE.
    08: Call SoAd_OpenSoCon() for the second socket connection.
    09: Call SoAd_MainFunction().
    10: VP(SoAd.SWS_SoAd_00639.2a): Verify that the second socket connection was opened
        without calling TcpIp_GetSocket() and TcpIp_Bind() first.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00639.1a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>403</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00639.1c</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>405</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00639.1d</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>406</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00639.1e</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>407</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00639.2a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>408</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1409</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_01_Tcp_MultipleSocketConnections_Match</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>602</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      This test verifies that opening an TCP socket connection which is part of a socket
      connection group containing multiple sockets connections, will follow the next steps:
        - get a listen socket from TcpIp by calling TcpIp_SoAdGetSocket(using correct domain and
          protocol type)
        - bind the socket to the local address and port via TcpIp_Bind().
        - assign the TCP listen socket connection to the socket connection group.
        - activate the socket connection
        - address and port match for the second socket connection.
  
Test Object: None.
Test Precondition: 
    - SoAdSocketConnectionGroup has 3 configured SoAdSocketConnection.
  
Test Execution: 
    01: Call SoAd_LocalIpAddrAssignmentChg() and SoAd_OpenSoCon().
    02: Call SoAd_MainFunction() to start processing the open action.
    03: VP(SoAd.SWS_SoAd_00638.1a):
        Verify that TcpIp_GetSocket() was called with correct domain and protocol type.
    04: VP(SoAd.SWS_SoAd_00638.1c):
        Verify that TcpIp_Bind() was called with correct local address and port.
    05: VP(SoAd.SWS_SoAd_00638.1d):
        Verify that the listen socket was assigned to the socket connection group.
    06: VP(SoAd.SWS_SoAd_00638.1e): Call SoAd_TcpAccepted() and verify that the socket
        connection is activated and is ready for communication.
    07: VP(SoAd.SWS_SoAd_00594.Match): Verify that the match was found in the second socket
        connection, thus SoAd_TcpAccepted() returned E_OK.
    08: VP(SoAd.SWS_SoAd_00594.Match): Verify that socket connection is in state ONLINE.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00638.1a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>396</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00638.1c</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>398</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00638.1d</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>399</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00638.1e</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>400</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00594.Match</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>418</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1410</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_02_Tcp_MultipleSocketConnections_NoMatch</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>724</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      This test verifies that opening an TCP socket connection which is part of a socket
      connection group containing multiple sockets connections, will follow the next steps:
        - get a listen socket from TcpIp by calling TcpIp_SoAdGetSocket(using correct domain and
          protocol type)
        - bind the socket to the local address and port via TcpIp_Bind().
        - assign the TCP listen socket connection to the socket connection group.
        - activate the socket connection
        - no address and port match
  
Test Object: None.
Test Precondition: 
    - SoAdSocketConnectionGroup has 4 configured SoAdSocketConnection.
  
Test Execution: 
    01: Call SoAd_LocalIpAddrAssignmentChg() and SoAd_OpenSoCon().
    02: Call SoAd_MainFunction() to start processing the open action.
    03: VP(SoAd.SWS_SoAd_00638.1a):
        Verify that TcpIp_GetSocket() was called with correct domain and protocol type.
    04: VP(SoAd.SWS_SoAd_00638.1c):
        Verify that TcpIp_Bind() was called with correct local address and port.
    05: VP(SoAd.SWS_SoAd_00638.1d):
        Verify that the listen socket was assigned to the socket connection group.
    06: VP(SoAd.SWS_SoAd_00638.1e): Call SoAd_TcpAccepted() and verify that the socket
        connection is activated and is ready for communication.
    07: VP(SoAd.SWS_SoAd_00594.NoMatch): Verify that the match was not found, so
        SoAd_TcpAccepted() returned E_NOT_OK.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00638.1a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>396</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00638.1c</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>398</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00638.1d</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>399</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00638.1e</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>400</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00594.NoMatch</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>419</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1411</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_03_Tcp_TcpIpEvent_CLOSED</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>849</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that SoAd_TcpIpEvent() will remove the assignment of the TcpIp socket
    from the related socket connection and close the socket if it's in ONLINE state.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring the socket to state ONLINE.
    02: Call SoAd_TcpIpEvent(TCPIP_TCP_CLOSED) for the AcceptedSocket.
    03: Call SoAd_MainFunction().
    04: VP(SoAd.SWS_SoAd_00646.2): Verify that the socket is now in state RECONNECT.
    05: VP(SoAd.SWS_SoAd_00646.1):
        Call SoAd_TcpAccepted() and verify that the AcceptedSocket was released before, thus
        working fine now.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00646.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>438</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00646.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>439</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1412</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_04_Tcp_TcpIpEvent_RESET</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>935</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that SoAd_TcpIpEvent() will remove the assignment of the TcpIp socket
    from the related socket connection and close the socket if it's in ONLINE state.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring the socket to state ONLINE.
    02: Call SoAd_TcpIpEvent(TCPIP_TCP_RESET) for the AcceptedSocket.
    03: Call SoAd_MainFunction().
    04: VP(SoAd.SWS_SoAd_00646.2): Verify that the socket is now in state RECONNECT.
    05: VP(SoAd.SWS_SoAd_00646.1):
        Call SoAd_TcpAccepted() and verify that the AcceptedSocket was released before, thus
        working fine now.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00646.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>438</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00646.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>439</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1413</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_05_SetUniqueRemoteAddr_AddrPort_NotSet</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>1020</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: None.
Test Object: 
    SoAd_SetUniqueRemoteAddr()
  
Test Precondition: 
  
Test Execution: 
    01: Call SoAd_OpenSoCon() to open the sixth socket connection, which doesn't have the remote
        address and port set.
    02: Call SoAd_SetUniqueRemoteAddr().
    03: VP(SoAd.SWS_SoAd_00680.1): Verify that E_NOT_OK was returned.
    04: VP(SoAd.SWS_SoAd_00680.1):
        Verify that AssignedSoConIdPtr wasn't updated, because no match was found.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00680.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>487</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1414</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_06_SetUniqueRemoteAddr_AddrMatch_PortWild</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>1098</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: None.
Test Object: 
    SoAd_SetUniqueRemoteAddr()
  
Test Precondition: 
   * UDP SoAdSocketConnectionGroup has several configured SoAdSocketConnections
  
Test Execution: 
    01: Call SoAd_OpenSoCon() to open the forth and fifth sockets of the socket connection group.
    02: Call SoAd_SetUniqueRemoteAddr().
    03: VP(SoAd.SWS_SoAd_00676.4, SoAd.SWS_SoAd_00675): Verify that E_OK was returned.
    04: VP(SoAd.SWS_SoAd_00680.2b, SoAd.SWS_SoAd_00676.3, SoAd.SWS_SoAd_00657,
        SoAd.SWS_SoAd_00675):
        Verify that the fifth socket was selected due to best match algorithm priority.
    05: VP(SoAd.SWS_SoAd_00676.2): Verify that the address was changed.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00680.2b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>489</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00676.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>527</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00676.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>528</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00676.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>529</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00657</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>263</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00675</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>278</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1415</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_07_SetUniqueRemoteAddr_PortMatch_AddrWild</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>1191</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: None.
Test Object: 
    SoAd_SetUniqueRemoteAddr()
  
Test Precondition: 
    * UDP SoAdSocketConnectionGroup has several configured SoAdSocketConnections
  
Test Execution: 
    01: Call SoAd_OpenSoCon() to open the third and forth sockets and close the fifth socket of the
        socket connection group.
    02: Call SoAd_SetUniqueRemoteAddr().
    03: VP(SoAd.SWS_SoAd_00676.4): Verify that E_OK was returned.
    04: VP(SoAd.SWS_SoAd_00680.2c, SoAd.SWS_SoAd_00676.3, SoAd.SWS_SoAd_00657):
        Verify that the third socket was selected due to best match algorithm priority.
    05: VP(SoAd.SWS_SoAd_00676.2): Verify that the address was changed.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00680.2c</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>490</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00676.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>527</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00676.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>528</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00676.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>529</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00657</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>263</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1416</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_08_Tcp_MultipleSocketConnections_NoMatch</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>1284</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      This test verifies that opening an TCP socket connection which is part of a socket
      connection group containing multiple sockets connections, will follow the next steps:
        - return E_NOT_OK and stay in state RECONNECT if the remote address and port do not match.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Call SoAd_OpenSoCon() to open 3 sockets that don't use wildcards.
    02: Call SoAd_MainFunction() to process the request.
    03: Call SoAd_TcpAccepted().
    04: VP(): Verify that SoAd_TcpAccepted() returned E_NOT_OK.
    05: VP(): Verify that all 3 sockets are still in RECONNECT state.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00594.NoMatch</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>419</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1417</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_09_Tcp_MsgFilterOff_Accepted</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>1378</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      This test verifies that opening an TCP socket connection which has the
      SoAdSocketMsgAcceptanceFilterEnabled and SoAdSocketTcpInitiate set to false will return E_OK
      and change the state to ONLINE even if the remote address and port do not match.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Open socket
    02: Call SoAd_MainFunction() to process the request.
    03: VP(SoAd.EB.PbVariantSupport.SoAdSocketAutomaticSoConSetup,
           SoAd.EB.PbVariantSupport.SoAdSocketTcpKeepAlive)
        Verify Socket was requested
    04: Call SoAd_TcpAccepted().
    05: VP(SoAd.SWS_SoAd_00636.2):
        Verify that SoAd_TcpAccepted() returned E_OK.
    06: VP(SoAd.SWS_SoAd_00636.2): Verify that the socket is in ONLINE state.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00636.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>420</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00636.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>421</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdSocketAutomaticSoConSetup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>703</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdSocketTcpKeepAlive</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>717</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1418</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_10_Tcp_PduLen_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>1479</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if the PDU length is 0, the TP transmission will return E_NOT_OK and
    skip further processing.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring the socket to ONLINE state.
    02: VP(SoAd.EB.PbVariantSupport.SoAdTxRoutingGroupRef)
        Verify that socket is online
    03: Call SoAd_TpTransmit() with PDU length equal to 0.
    04: VP(SoAd.SWS_SoAd_00551.1): Verify that E_NOT_OK was returned.
    05: Call SoAd_MainFunction().
    06: VP(SoAd.SWS_SoAd_00551.1): Verify that no further action took place.
    07: Call SoAd_TxConfirmation() to confirm the transmission.
    08: VP(SoAd.EB.OngoingTx_TransitionRequested): Verify that the transition was confirmed
        to upper layer using PduR_SoAdTpTxConfirmation().
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00551.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>449</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.OngoingTx_TransitionRequested</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>688</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdTxRoutingGroupRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>697</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1419</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_11_SetRemoteAddr_ONLINE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>1621</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if SoAd_SetRemoteAddr() is called in state ONLINE for a Tcp socket
    connection, the request will be rejected and return with E_NOT_OK.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring the socket to ONLINE state.
    02: Call SoAd_SetRemoteAddr().
    03: VP(): Verify that E_NOT_OK was returned.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00532.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>523</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1420</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_12_Tcp_OpenedListenSocket</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>1684</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      This test verifies that if the listen socket is already assigned to the socket connection,
      SoAd_MainFunction() will just activate the socket connection to accept connections from
      remote nodes, without calling any API.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Open a TCP socket connection.
    02: Call SoAd_TcpIpEvent() to close the accepted socket and leave the listen socket
        waiting for close confirmation from lower layer.
    03: Call SoAd_Accepted() and verify that the socket doesn't accept connections at this point.
    04: Call SoAd_OpenSoCon() and SoAd_MainFunction() to get the module to CONNECTING.
    05: VP(SoAd.SWS_SoAd_00638.2a): Verify that neither TcpIp_GetSocket() nor TcpIp_Bind() nor
        TcpIp_TcpListen() were called.
    06: Call SoAd_TcpAccepted().
    07: Call SoAd_TcpIpEvent() to close the listen socket.
    08: Call SoAd_OpenSoCon() and SoAd_MainFunction() to open the second socket of the socket
        connection group.
    09: VP(SoAd.EB.NewListenSocket, SoAd.EB.TcpSM_TriggerConnecting_TcpServer):
        Verify that a new listen socket was opened.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00638.2a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>402</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.NewListenSocket</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>656</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.TcpSM_TriggerConnecting_TcpServer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1003</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1421</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_13_PduLength_0_TP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>1811</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      This test verifies that if SoAd_RxIndication() is called with a PDU that has the length 0
      and SoAdRxUpperLayerType is TP, further processing of the PDU will be skipped.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Open a socket connection.
    02: Call SoAd_RxIndication() with a PDU that has the PDU lenght 0.
    03: Call SoAd_MainFunction().
    04: VP(): Verify that the PDU is not processed.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00562.4_TP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>459</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1422</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_14_PduLength_0_Header</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>1887</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      This test verifies that if SoAd_RxIndication() is called with a PDU that has the length 0
      and SoAdPduHeaderEnable FALSE, further processing of the PDU will be skipped.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Open a socket connection.
    02: Call SoAd_RxIndication() with a PDU that has the PDU lenght 0.
    03: Call SoAd_MainFunction().
    04: VP(): Verify that the PDU is not processed.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00562.4_IF_NoHeader</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>461</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1423</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_15_TcpTransmit_Auto</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>1966</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that for a socket connection with AutomaticSoConSetup set to true and remote address
    set to use wildcard for both IP address and port, after a PDU transmission, all new
    transmissions will be rejected and the socket shall be closed in the following main function.
  
Test Object: 
    SoAd_IfTransmit().
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
  
Test Execution: 
    01: Bring the socket connection to ONLINE state.
    02: Call SoAd_IfTransmit().
    03: Call SoAd_TxConfirmation().
    04: Call SoAd_IfTransmit() a second time.
    05: VP(SoAd.SWS_SoAd_00644.a): Verify that E_NOT_OK was returned.
    06: Call SoAd_MainFunction().
    07: VP(SoAd.SWS_SoAd_00644.b): Verify that TcpIp_Close() was called.
    08: VP(SoAd.SWS_SoAd_00644.b): Verify that socket connection is in RECONNECT state.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00644.a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>495</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00644.b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>496</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1424</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_16_CloseSoCon_FALSE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>2094</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if SoAd_CloseSoCon() is called with Abort = FALSE,
    TcpIp_Close(FALSE) will be called to close the accepted socket. Because all socket connections
    from the socket connection group are closed, the listen socket will also be closed by calling
    TcpIp_Close(FALSE).
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring the socket to state ONLINE.
    02: Call SoAd_CloseSoCon() with Abort = FALSE.
    03: Call SoAd_MainFunction().
    04: VP(SoAd.SWS_SoAd_00642.b.TCP):
        Verify that TcpIp_Close(FALSE) was called for the listen socket.
    05: VP(SoAd.SWS_SoAd_00642.a.TCP):
        Verify that TcpIp_Close(FALSE) was called for the accepted socket.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00642.a.TCP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>430</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00642.b.TCP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>431</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1425</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_17_TpTransmit_InProg</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>2173</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test shall verify that if SoAd_TpTransmit() is called while a TP transmission is in
    progress, the module shall return E_NOT_OK for the second call, but still process the
    first transmission in the next SoAd_MainFunction().
  
Test Object: 
    SoAd_TpTransmit()
  
Test Precondition: 
    SoAd is initialized and UDP socket connection is ONLINE.
  
Test Execution: 
    01: Call SoAd_TpTransmit().
    02: VP(SoAd.SWS_SoAd_00650):
        Verify that SoAd_TpTransmit returns E_OK, transmission started.
    03: Call SoAd_TpTransmit() for a second time - transmission already in progress.
    04: VP(SoAd.SWS_SoAd_00650):
        Verify that E_NOT_OK was returned as an indication that SoAd_TpTransmit() was rejected.
    05: Call SoAd_MainFunction().
    06: VP(SoAd.SWS_SoAd_00553.1):
        Verify that PduR_SoAdTpCopyTxData() was called twice and
        the SduLength is equal to AvailableDataPtr from the first call.
    07: VP(SoAd.SWS_SoAd_00650):
        Verify that TcpIp_UdpTransmit() and
        PduR_SoAdTpTxConfirmation() are called with expected parameters.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00650</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>257</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00553.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>454</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1426</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_18_TpTransmit_SmallerBuff</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>2293</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test shall verify that if SoAd_TpTransmit() is called with SduLength bigger than Tx Buffer,
    the module shall stop processing and return E_NOT_OK.
  
Test Object: 
    SoAd_TpTransmit()
  
Test Precondition: 
    SoAd is initialized and SduLength is greater then available Tx buffer.
  
Test Execution: 
    01: Call SoAd_TpTransmit().
    02: VP(): SoAd_TpTransmit returns E_NOT_OK.
    03: Call SoAd_MainFunction().
    04: VP(): Verify that no further action was performed.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TpTransmit.Udp.SduLengthTooBig</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>642</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1427</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_19_TxConfirmation_TX_TP_CANCELED</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>2366</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case verifies that if SoAd_TpCancelTransmit() is called for an ongoing TP
    transmission, call to SoAd_TxConfirmation() shall not generate call to upper layer
    Up_[SoAd][Tp]TxConfirmation() callback function (SoAd.EB.TxConfirmation_TX_TP_CANCELED).

    It also verifies that the next call to SoAd_MainFunction() shall generate the call to
    Up_[SoAd][Tp]TxConfirmation() with the parameter Result E_NOT_OK
    (SoAd.EB.TpCancelTransmit_UpTxConfirmation_NotOk).
  
Test Object: 
    SoAd_TxConfirmation()
  
Test Precondition: 
  
Test Execution: 
    01: Bring the socket to ONLINE state.
    02: Call SoAd_TpTransmit().
    03: Call SoAd_MainFunction().
    04: Call SoAd_TpCancelTransmit() for cancellation of the transmission.
    05: Call SoAd_TxConfirmation().
    06: VP(SoAd.EB.TxConfirmation_TX_TP_CANCELED):
        Verify that upper layer SoAd_TxConfirmation() callback function is not called.
    07: Call SoAd_MainFunction().
    08: VP(SoAd.EB.TpCancelTransmit_UpTxConfirmation_NotOk):
        Verify that upper layer SoAd_TxConfirmation() callback function is called with
        E_NOT_OK.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TxConfirmation_TX_TP_CANCELED</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>657</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.TpCancelTransmit_UpTxConfirmation_NotOk</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>658</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1428</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_20_TxConfirmation_CLOSE_SOCON</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>2483</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case verifies that if SoAd_CloseSoCon() is called for an ongoing TP
    transmission, call to SoAd_TxConfirmation() shall not generate call to upper layer
    Up_[SoAd][Tp]TxConfirmation() callback function (SoAd.EB.TxConfirmation_CLOSE_SOCON).

    It also verifies that the next call to SoAd_MainFunction() shall generate the call to
    Up_[SoAd][Tp]TxConfirmation() with the parameter Result E_NOT_OK
    (SoAd.EB.CloseSoCon_UpTxConfirmation_NotOk).
  
Test Object: 
    SoAd_TxConfirmation()
  
Test Precondition: 
  
Test Execution: 
    01: Bring the socket to ONLINE state.
    02: Call SoAd_TpTransmit().
    03: Call SoAd_MainFunction().
    04: Call SoAd_CloseSoCon() to close the socket connection.
    05: Call SoAd_TxConfirmation().
    06: VP(SoAd.EB.TxConfirmation_CLOSE_SOCON,
           SoAd.EB.PbVariantSupport.SoAdTxSocketConnOrSocketConnBundleRef):
        Verify that upper layer SoAd_TxConfirmation() callback function is not called.
    07: Call SoAd_MainFunction().
    08: VP(SoAd.EB.CloseSoCon_UpTxConfirmation_NotOk):
        Verify that upper layer SoAd_TxConfirmation callback function is called with
        E_NOT_OK.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TxConfirmation_CLOSE_SOCON</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>659</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.CloseSoCon_UpTxConfirmation_NotOk</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>660</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdTxSocketConnOrSocketConnBundleRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>696</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1429</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_22_TxConfirmation_ReadOnlySocket</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>2603</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that in case of a read-only socket a call to SoAd_TxConfirmation()
    will not generate call to upper layer Up_[SoAd][Tp]TxConfirmation() callback function and
    SOAD_INVALID_SOCON_ID is reported to DET.
  
Test Object: 
    SoAd_TxConfirmation()
  
Test Precondition: 
  
Test Execution: 
    01: Bring the read-only socket to ONLINE state.
    02: Call SoAd_TxConfirmation().
    03: VP(SoAd.EB.TxConfirmation_ReadOnlySocket): Verify that SOAD_E_INV_SOCKETID is reported
        to DET.
    04: VP(SoAd.EB.TxConfirmation_ReadOnlySocket): Verify that upper layer SoAd_TxConfirmation()
        callback function is not called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TxConfirmation_ReadOnlySocket</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>663</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1430</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_24_IfTransmit_TcpTransmit_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>2675</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case verifies the behavior of SoAd_IfTransmit() when called for
    a TCP socket, and when TcpIp_TcpTransmit() returns E_NOT_OK.
    In that case SoAd_IfTransmit() returns E_NOT_OK, SoAd_CopyTxData() is not called -&gt;
    no data is transmitted.
  
Test Object: 
    SoAd_IfTransmit().
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
  
Test Execution: 
    01: Bring the TCP socket to ONLINE state in a server mode.
    02: Call SoAd_IfTransmit() to transmit test PDU over the socket.
    03: Set TcpIp_TcpTransmit_Stub to return E_NOT_OK.
    04: Call SoAd_IfTransmit() to transmit new PDU over the socket.
    05: VP(): Verify that TcpIp_TcpTransmit() was called.
    06: VP(): Verify that SoAd_CopyTxData() was NOT called to copy data, i.e. old data
        is in the stub buffer.
    07: VP(): Verify that SoAd_IfTransmit() returned E_NOT_OK.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.IfTransmit_TcpTransmit_NOT_OK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>616</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1431</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_25_RxInd_WriteOnlyUdpSocket_Header</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>2781</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that in case SoAd_RxIndication() is called for a write-only UDP socket
    SoAd will not generate call to upper layer [Up]_SoAdIfRxIndication() callback function and
    DET error SOAD_E_INV_PDUHEADER_ID will be reported.
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket with only TX side configured to ONLINE state.
    02: Call SoAd_RxIndication() to indicate the reception of a new UDP datagram.
    03: VP(): Verify that SOAD_E_INV_PDUHEADER_ID is reported to DET.
    04: VP(): Verify that upper layer [UL]_SoAdIfRxIndication() callback function is not called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00559.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>465</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1432</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_26_RxInd_WriteOnlyTcpSocket_Header</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>2857</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that in case SoAd_RxIndication() is called for a write-only TCP socket
    SoAd will not generate call to upper layer [Up]_SoAdIfRxIndication() callback function and
    DET error SOAD_E_INV_PDUHEADER_ID will be reported.
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
  
Test Execution: 
    01: Bring the socket to state ONLINE.
    02: Call SoAd_RxIndication() to indicate the reception of a new TCP message.
    03: VP(): Verify that SOAD_E_INV_PDUHEADER_ID is reported to DET.
    04: VP(): Verify that upper layer [UL]_SoAdIfRxIndication() callback function is not called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00559.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>465</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1433</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_27_CancelTx_Tcp_InvalidPdu</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>2930</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Configuration of this test case consists of two PduRouts (TP interface) that reference
    the same socket connection (TCP), and there is an ongoing transmission on one of them.
    If SoAd_TpCancelTransmit() is called for the other PDU (with no ongoing transmission),
    the request will be rejected - SoAd_TpCancelTransmit() returns E_NOT_OK, and connection
    is not closed.
  
Test Object: 
    SoAd_TpCancelTransmit()
  
Test Precondition: 
  
Test Execution: 
    01: Bring the socket connection to ONLINE state.
    02: Call SoAd_TpTransmit() to initiate transmit of a test PDU on PduRoute_PduR_Tcp_Tp_3.
    03: Call SoAd_MainFunction() to process transmit request.
    04: VP(): Verify that transmit process of test PDU is in progress.
    05: Call SoAd_TpCancelTransmit() for PduRoute_PduR_Tcp_Tp_2.
    06: VP(): Verify that SoAd_TpCancelTransmit() returned E_NOT_OK.
    07: Call SoAd_MainFunction().
    08: VP(): Verify that transmit process for PduRoute_PduR_Tcp_Tp_3 continues and finishes.
    09: VP(): Verify that PduR_SoAdTpTxConfirmation() was called with E_OK signaling the
        transmission was successful.
    10: VP():
        Verify that the socket connection is still in ONLINE state.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TpTransmit.Tcp.CancelTx_InvalidPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>643</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1434</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_28_nPduTimeouts</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>3040</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies that when a PDU with TriggerMode set to TRIGGER_NEVER without a specific
    SoAdTxUdpTriggerTimeout set (SOAD_INVALID_TIMERVAL) is transmitted SoAd shall set the
    nPduUdpTxBuffer specific timer to the value of the connection SoAdSocketUdpTriggerTimeout
    if it is configured (&lt;&gt;SOAD_INVALID_TIMERVAL) and lower than the current nPduUdpTxBuffer
    specific timer value.
  
Test Object: 
    SoAd_IfTransmit().
  
Test Precondition: 
  
Test Execution: 
    01: Bring the UDP socket with nPDU feature enabled to ONLINE state.
    02: Call SoAd_IfTransmit() to transmit PDU with SoAdTxUdpTriggerTimeout set.
    03: VP(): Verify that SoAd_IfTransmit() returns E_OK.
    04: VP(): Verify that TcpIp_UdpTransmit() is not called, i.e. PDU is buffered.
    05: Call SoAd_IfTransmit() to transmit PDU with SoAdTxUdpTriggerTimeout not set
        (SOAD_INVALID_TIMERVAL).
    06: VP(): Verify that SoAd_IfTransmit() returns E_OK.
    07: VP(SoAd.EB.PbVariantSupport.SoAdSocketnPduUdpTxBufferMin):
        Verify that TcpIp_UdpTransmit() is not called, i.e. PDU is buffered.
    08: Call SoAd_MainFunction() one less times then is configured in SoAdSocketUdpTriggerTimeout
        of the used socket connection.
    09: VP(SoAd.EB.PbVariantSupport.SoAdSocketUdpTriggerTimeout):
        Verify that TcpIp_UdpTransmit() is not called
    10: Call SoAd_MainFunction() one more times.
    11: VP(SoAd.EB.PbVariantSupport.SoAdSocketUdpTriggerTimeout):
        Verify that TcpIp_UdpTransmit() is called.
    12: VP(): Verify that PduR_SoAdIfTxConfirmation() is called for both PDUs.
    13: VP(): Verify that both PDUs are transmitted with the correct header and payload.
        This way it is verified that both PDUs are transmitted after timeout configured in
        socket connection expired (SoAdSocketUdpTriggerTimeout), which is smaller than the one
        configured in PDU (SoAdTxUdpTriggerTimeout).
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00683</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>284</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdSocketUdpTriggerTimeout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>713</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdSocketnPduUdpTxBufferMin</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>714</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1435</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_29_Udp_RxInd_NotOnlineOrConnecting</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>3191</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that in case SoAd_RxIndication() is called for a valid socket connection
    that is not in the state ONLINE or CONNECTING, the incoming request will be ignored (no call
    to upper layer [Up]_SoAdIfRxIndication() callback function).
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket to ONLINE state.
    02: Bring the socket to CLOSING state by calling SoAd_CloseSoCon(), and subsequent
        call to SoAd_MainFunction() to process closing request.
    03: Call SoAd_RxIndication() to indicate reception of a new UDP datagram.
    04: VP(): Verify that upper layer [UL]_SoAdIfRxIndication() callback function is not called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.Udp.RxIndication_NotOnlineOrConnecting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>667</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1436</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_31_UdpTp_RxInd_DisblRoutGroup_Header</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>3283</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if SoAd_RxIndication() is called for a UDP socket connection with a
    header mode enabled and TP PDU whose socket route belongs to a disabled routing group,
    it will be silently discarded.
  
Test Object: None.
Test Precondition: 
    SoAdSocketMsgAcceptanceFilterEnabled is TRUE
    Remote address used for receiving matches the one in socket configuration
  
Test Execution: 
    01: Bring UDP socket to ONLINE state.
    02: Call SoAd_RxIndication() with a datagram consisting of a valid PDU.
    03: VP(SoAd.SWS_SoAd_00524, SoAd.EB.PbVariantSupport.SoAdRxRoutingGroupRef):
        Verify that the PDU is correctly transmitted to the PduR upper layer.
    04: Disable routing group, where test socket route belongs.
    05: Call SoAd_RxIndication() with a datagram as in step 2.
    06: Call SoAd_MainFunction().
    07: VP(SoAd.SWS_SoAd_00600, SoAd.EB.PbVariantSupport.SoAdRxRoutingGroupRef):
        Verify that upper layer PduR_SoAdIfRxIndication() callback
        function is not called, and no data was received by PduR.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00600</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>214</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00524</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdRxRoutingGroupRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>728</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1437</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_32_Udp_RxIndication_IncompletePdu</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>3407</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when SoAd_RxIndication() is called with an UDP datagram that contains
    PDU whose length indicated with length in header exceeds end of message, SoAd will silently
    drop that incomplete PDU.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket to ONLINE state.
    02: Call SoAd_RxIndication() with a datagram containing two PDUs, second of which is incomplete.
    03: Verify that the first PDU is correctly forwarded to the upper layer
        ([UL]_SoAdIfRxIndication() is called).
    04: VP(SoAd.SWS_SoAd_00559.4):
        Verify that the second PDU is silently dropped - no call to [UL]_SoAdIfRxIndication().
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00559.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>466</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1438</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_32_Udp_RxIndication_PduLengthInHeader_MaxOfPduLengthType_uint16</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>3501</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when PduLengthType is uint16 and SoAd_RxIndication() is called with an
    UDP datagram that contains a PDU whose length indicated with length in header exceeds
    (PduLengthTypeMax - PduHeaderLength) will raise the Det SOAD_E_INV_LENGTH_IN_PDUHEADER.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket to ONLINE state.
    02: Call SoAd_RxIndication() with a datagram containing one PDU, which PduLengthInHeader exceeds
        PduLengthTypeMax - PduHeaderLength.
    03: VP(SoAd.dsn.PduHeader.LengthInHeader.Max.Invalid):
        Verify that DET is called with SOAD_E_INV_LENGTH_IN_PDUHEADER.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.PduHeader.LengthInHeader.Max.Invalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1033</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1439</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_32_Udp_RxIndication_PduLengthInHeader_Over65535</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>3578</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when PduLengthType is uint32 and SoAd_RxIndication() is called with an
    UDP datagram that contains a PDU whose length indicated with length in header exceeds
    65535U will raise the Det SOAD_E_INV_LENGTH_IN_PDUHEADER.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket to ONLINE state.
    02: Call SoAd_RxIndication() with a datagram containing one PDU, which PduLengthInHeader exceeds
        65535U.
    03: VP(SoAd.dsn.PduHeader.LengthInHeader.Udp.Invalid):
        Verify that DET is called with SOAD_E_INV_LENGTH_IN_PDUHEADER.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.PduHeader.LengthInHeader.Udp.Invalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1034</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1440</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_33_UdpAlive_Supervision</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>3655</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies that Udp alive supervision is started for a UDP socket connection
    configured with a SoAdSocketUdpAliveSupervisionTimeout and that after this timer
    expires, SoAd shall change the state of the socket connection to SOAD_SOCON_RECONNECT,
    deactivate the alive supervision timer and reset the remote address.
  
Test Object: 
    SoAdSocketUdpAliveSupervisionTimeout.
  
Test Precondition: 
    * UDP socket connection with remote IP address set to TCPIP_IPADDR_ANY.
    * Socket is in state RECONNECT.
  
Test Execution: 
    01: Call SoAd_RxIndication() with valid parameters.
    02: Call SoAd_GetRemoteAddr() after remote address was overwritten.
    03: Call SoAd_MainFunction() and stop when one more SoAd_MainFunction() call would trigger
        a timeout.
    04: VP(SoAd.ASR43.SWS_SoAd_00694):
        Verify that socket state is still ONLINE.
    05: Call SoAd_MainFunction() one more time.
    06: VP(SoAd.SWS_SoAd_00695.a, SoAdSocketUdpAliveSupervisionTimeout):
        Verify that socket is in state RECONNECT.
    07: Call SoAd_MainFunction() enough times to trigger a timeout.
    08: VP(SoAd.SWS_SoAd_00695.b, SoAdSocketUdpAliveSupervisionTimeout):
        Verify that alive supervision timer is deactivated - no further action was performed.
    09: Call SoAd_GetRemoteAddr().
    10: VP(SoAd.SWS_SoAd_00695.c, SoAd.SWS_SoAd_00527):
        Verify that remote address was reset to the configured remote address.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00694</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>300</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00695.a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>499</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00695.b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>500</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00695.c</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>501</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00527</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdSocketUdpAliveSupervisionTimeout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>710</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1441</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_34_UdpAlive_Supervision_Reset_Timer</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>3828</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies that Udp alive supervision is started for a UDP socket connection
    configured with a SoAdSocketUdpAliveSupervisionTimeout and that every further reception
    from the same remote node shall reset the timer back to the initial value.
  
Test Object: 
    SoAdSocketUdpAliveSupervisionTimeout.
  
Test Precondition: 
    * UDP socket connection with remote IP address set to TCPIP_IPADDR_ANY.
    * Udp alive supervision timer is started.
  
Test Execution: 
    01: Call SoAd_RxIndication() to restart the timer.
    02: Call SoAd_GetRemoteAddr() after remote address was overwritten.
    03: Call SoAd_MainFunction() and stop when one more SoAd_MainFunction() call would trigger
        a timeout.
    04: VP(SoAd.ASR43.SWS_SoAd_00742):
        Verify that socket is still ONLINE.
    05: Call SoAd_MainFunction() one more time.
    06: VP(SoAd.SWS_SoAd_00695.a):
        Verify that socket is in state RECONNECT.
    07: Call SoAd_MainFunction() enough times to trigger a timeout.
    08: VP(SoAd.SWS_SoAd_00695.b):
        Verify that alive supervision timer is deactivated - no further action was performed.
    09: Call SoAd_GetRemoteAddr().
    10: VP(SoAd.SWS_SoAd_00695.c):
        Verify that remote address was reset to the configured remote address.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00742</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>355</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00695.a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>499</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00695.b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>500</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00695.c</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>501</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1442</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_35_Tcp_RxIndication_PduSplit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>3990</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_RxIndication() passes the correct PDUs to the upper layer in case that
    PDUs that are distributed over different frames.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring TCP socket to ONLINE state.
    02: Call SoAd_RxIndication() with a frame consisting of only a part of PDU1.
    03: Call SoAd_MainFunction() to process incoming request.
    04: VP(SoAd.SWS_SoAd_00574.2): Verify that a part of a PDU1 payload was correctly
        transmitted to the PduR upper layer.
    05: Call SoAd_RxIndication() with a frame consisting of a remaining part of PDU1, and only a
        part of PDU2.
    06: VP(SoAd.SWS_SoAd_00571.1c): Verify that the remaining part of PDU1 payload was
        correctly transmitted to the PduR upper layer.
    07: Call SoAd_MainFunction() to process incoming request.
    08: VP(SoAd.SWS_SoAd_00574.2): Verify that a part of PDU2 payload were correctly
        transmitted to the PduR upper layer.
    09: Call SoAd_RxIndication() with a frame consisting of a remaining part of PDU2, and the
        complete PDU3.
    10: VP(SoAd.SWS_SoAd_00571.1c): Verify that the remaining part of PDU2 payload was
        correctly transmitted to the PduR upper layer.
    11: Call SoAd_MainFunction() to process incoming request.
    12: VP(SoAd.SWS_SoAd_00574.2): Verify that the complete PDU3 payload is correctly
        transmitted to the PduR upper layer.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1c</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00574.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>485</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1443</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_36_TransmitPduSize256</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>4180</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If SoAd_TpTransmit() is called to transmit PDU of a size 256 bytes, on a socket connection
    that has SoAdPduHeaderEnable enabled, it shall call TcpIp_TcpTransmit() with the correct
    header and a payload.
  
Test Object: 
    SoAd_TpTransmit()
  
Test Precondition: 
  
Test Execution: 
    01: Bring a TCP socket to ONLINE state.
    02: Call SoAd_TpTransmit() to request a transmission of PDU.
    03: Call SoAd_MainFunction() to process transmission request.
    04: VP(): Verify that TcpIp_TcpTransmit() was called with the correct data header and payload.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TransmitPduSize256</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>644</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdPduHeaderEnable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>700</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1444</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_37_PduLength_0_IF_Header</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>4307</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If SoAd_RxIndication() is called for a socket connection with PduHeader enabled to receive
    a frame containing IF PDU with the length 0, SoAd will continue further processing of a
    received frame.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring socket to ONLINE state.
    02: Call SoAd_RxIndication() with a frame containing two PDUs, first with a PDU length 0, and
        the second one with a length 8.
    03: VP(): Verify that upper layer [UL]_SoAdIfRxIndication() callback function is called
              twice, for the correct UL RxPduId.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00562.4_IF_Header</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>460</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1445</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_38_RxInd_NoHeader_DataInBuffer</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>4385</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test configuration consists of a socket connection with PDU Header mode disabled whose receive
    buffer already contains TP data.
    Test case verifies that if SoAd_RxIndication() is called for such a connection and receive
    buffer is able to store all (newly) received data, then all received data will be copied to
    receive buffer for later processing by SoAd_MainFunction().
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring socket to ONLINE state.
    02: Configure upper layer reception stub (PduR) to be able to receive 8 bytes long data block
        in a single invocation.
    03: Call SoAd_RxIndication() with a frame twice of a size that can be received by PduR -&gt;
        first data block will be delivered to PduR, and the second one will be buffered
        in a SoAd receive buffer.
    04: Call SoAd_RxIndication() with a new frame that can completely fit to SoAd receive buffer,
        together with already buffered data.
    05: VP(): Verify that no data is delivered to PduR, i.e. no call to PduR_SoAdTpCopyRxData().
    06: Call SoAd_MainFunction() to deliver second data block.
    07: VP(): Verify that the second data block is delivered to PduR, with a call to
              PduR_SoAdTpCopyRxData().
    08: Call SoAd_MainFunction() to deliver third data block.
    09: VP(): Verify that a third data block is delivered to PduR, with a call to
              PduR_SoAdTpCopyRxData().
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00568.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>474</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1446</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_39_RxInd_CloseSoCon</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>4515</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that SoAd will notify the upper layer about the termination of an active TP
    reception on closing a socket connection within SoAd_MainFunction(). It does so by calling
    Up_[SoAd][Tp]RxIndication() with parameter result set to E_OK if disconnection is caused by
    SoAd_CloseSoCon() and all received data was correctly delivered to the upper layer.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket to ONLINE state.
    02: Indicate reception of a frame with a call to SoAd_RxIndication().
    03: Call SoAd_MainFunction() to process incoming frame.
    04: Bring the socket to CLOSING state by calling SoAd_CloseSoCon().
    05: Call SoAd_MainFunction() to process closing request.
    06: VP(): Verify that upper layer Up_[SoAd][Tp]RxIndication()() is called for the correct
              ULRxPduId, with result parameter set to E_OK.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00641.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>428</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1447</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_40_Tcp_RxInd_MixIfTpPdu</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>4609</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_RxIndication() is called with a mixed TP and IF PDUs in a TCP
    frame, PDUs are correctly extracted and forwarded to the upper layer.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring TCP socket to ONLINE state.
    02: Call SoAd_RxIndication() with a frame consisting of a mixture of TP and IF PDUs.
    03: VP(): Verify that all PDUs are correctly extracted and forwarded to the upper layer.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.Udp.RxIndication_MixedIfTpPdus</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1448</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_41_Tcp_RxInd_MixIfTpPdu_SegTp</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>4729</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_RxIndication() is called for a TCP socket connection with
    a sequence of frames consisting of a mix of IF and segmented TP PDUs, PDUs are correctly
    extracted and forwarded to the upper layer.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring TCP socket to ONLINE state.
    02: Call SoAd_RxIndication() with a frame consisting of a part of TP PDU1.
    03: Call SoAd_RxIndication() with a frame consisting of a remaining part of TP PDU1, IF PDU2,
        and a part of TP PDU3.
    04: Call SoAd_RxIndication() with a frame consisting of a remaining part of TP PDU3 and IF PDU4.
    05: VP(SoAd.EB.Udp.RxIndication_MixedIfTpPdus, SoAd.SWS_SoAd_00565): Verify that all PDUs
        are correctly extracted and forwarded to the upper layer.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.Udp.RxIndication_MixedIfTpPdus</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00565</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>186</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1449</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_41_Tcp_RxInd_IfPdu_Seg_Over255Bytes</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>4835</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_RxIndication() is called for a TCP socket connection with
    a sequence of frames consisting of segmented IF PDUs with the last one exceeding 255 bytes,
    the PDUs are correctly extracted and forwarded to the upper layer.
  
Test Object: None.
Test Precondition: 
    - TCP socket connection.
    - SoAdPduHeaderEnable is enabled.
    - Received PDU belongs to SoAdSocketRoute with SoAdRxUpperLayerType set to IF.
    - A PDU is received in segments and the last segment exceeds 255 bytes.
  
Test Execution: 
    01: Bring TCP socket to ONLINE state.
    02: Call SoAd_RxIndication() with a frame consisting of
        the first IF PDU and a part of second IF PDU.
    03: Call SoAd_RxIndication() remaining IF PDU, with a bigger size than 255 bytes.
    04: VP(SoAd.EB.Buffer.TcpSegmentation.PduHeader, SoAd.EB.Buffer.TcpSegmentation.IfPdu):
        Verify that PduR_SoAdIfRxIndication() was called twice with correct RxPduId.
    05: VP(SoAd.EB.Buffer.TcpSegmentation.PduHeader, SoAd.EB.Buffer.TcpSegmentation.IfPdu):
        Verify that both PDUs are correctly extracted and forwarded to the upper layer.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.Buffer.TcpSegmentation.PduHeader</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>577</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.Buffer.TcpSegmentation.IfPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>578</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1450</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_41_Tcp_RxInd_IfPdu_Seg_PduLengthInHeader_MaxOfPduLengthType</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>4977</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_RxIndication() is called for a TCP socket connection with
    a sequence of frames consisting of segmented IF PDUs with the last one exceeding 255 bytes,
    the PDUs are correctly extracted and forwarded to the upper layer.
  
Test Object: None.
Test Precondition: 
    - TCP socket connection.
    - SoAdPduHeaderEnable is enabled.
    - Received PDU belongs to SoAdSocketRoute with SoAdRxUpperLayerType set to IF.
    - A PDU is received in segments and the last segment is equal to the maximum of PduLenghType.
  
Test Execution: 
    01: Bring TCP socket to ONLINE state.
    02: Call SoAd_RxIndication() with a frame consisting of
        the first IF PDU and a part of second IF PDU.
    03: Call SoAd_RxIndication() remaining IF PDU, with a size equal to the maximum of PduLenghType.
    04: VP(SoAd.EB.Buffer.TcpSegmentation.PduHeader, SoAd.EB.Buffer.TcpSegmentation.IfPdu):
        Verify that PduR_SoAdIfRxIndication() was called once with correct RxPduId.
    05: VP(SoAd.dsn.PduHeader.LengthInHeader.Max.Invalid):
        Verify that DET is called with SOAD_E_INV_LENGTH_IN_PDUHEADER.
    06: VP(SoAd.EB.Buffer.TcpSegmentation.PduHeader, SoAd.EB.Buffer.TcpSegmentation.IfPdu):
        Verify that both PDUs are correctly extracted and forwarded to the upper layer.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.Buffer.TcpSegmentation.PduHeader</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>577</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.Buffer.TcpSegmentation.IfPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>578</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.PduHeader.LengthInHeader.Max.Invalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1033</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1451</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_42_Tcp_RxInd_MixIfTpPdu_SegIf</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>5113</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_RxIndication() is called for a TCP socket connection with
    a sequence of frames consisting of a mix of TP and segmented IF PDUs, PDUs are correctly
    extracted and forwarded to the upper layer.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring TCP socket to ONLINE state.
    02: Call SoAd_RxIndication() with a frame consisting of a TP PDU1 and a part of IF PDU2.
    03: Call SoAd_RxIndication() with a frame consisting of a remaining part of IF PDU2, TP PDU3,
        and a part of IF PDU4.
    04: Call SoAd_RxIndication() with a frame consisting of a remaining part of IF PDU4.
    05: VP(): Verify that all PDUs are correctly extracted and forwarded to the upper layer.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.Udp.RxIndication_MixedIfTpPdus</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1452</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_43_Tcp_RxInd_MixIfTpPdu_SegIfTp</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>5216</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_RxIndication() is called for a TCP socket connection with
    a sequence of frames consisting of a mix of segmented TP and segmented IF PDUs, PDUs are
    correctly extracted and forwarded to the upper layer.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring TCP socket to ONLINE state.
    02: Call SoAd_RxIndication() with a frame consisting of TP PDU1, IF PDU2 and a part of TP PDU3.
    03: Call SoAd_RxIndication() with a frame consisting of a remaining part of TP PDU3 and a part
        of IF PDU4.
    04: Call SoAd_RxIndication() with a frame consisting of a remaining part of IF PDU4.
    05: VP(): Verify that all PDUs are correctly extracted and forwarded to the upper layer.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.Udp.RxIndication_MixedIfTpPdus</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1453</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_44_Udp_RxInd_MixIfTpPdu</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>5319</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_RxIndication() is called with a mixed TP and IF PDUs in a UDP
    datagram, PDUs are correctly extracted and forwarded to the upper layer.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket to ONLINE state.
    02: Call SoAd_RxIndication() with a datagram consisting of a mixture of TP and IF PDUs.
    03: VP(): Verify that all PDUs are correctly extracted and forwarded to the upper layer.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.Udp.RxIndication_MixedIfTpPdus</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>668</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1454</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_45_Tcp_Tx_NoData</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>5434</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
     Test verifies that if SoAd_TpTransmit() is called to transmit a PDU with no data, then,
     SoAd_MainFunction() shall call Up_[SoAd][Tp]CopyTxData() function with no data transmitted.
  
Test Object: 
    SoAd_TpTransmit()
  
Test Precondition: 
  
Test Execution: 
    01: Bring a TCP socket to ONLINE state.
    02: Set the available data to no data.
    03: Call SoAd_TpTransmit() to request a transmission of PDU.
    04: Call SoAd_MainFunction() to process transmission request.
    05: VP(): Verify that PduR_SoAdTpCopyTxData() was called with no data transmitted.
    06: VP(): Verify that no further action took place.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SoAd_TpTransmit_noData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>673</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1455</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_46_Tcp_TcpTransmit_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>5513</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
     Test verifies that in case of a TCP socket connection when TcpIp_TcpTransmit() returns with
     E_NOT_OK, within the SoAd_MainFunction() SoAd shall call the upper layer with the configured
     transmit confirmation function (&lt;Up&gt;_[SoAd][Tp]TxConfirmation&gt;()) and E_NOT_OK as result.
  
Test Object: 
    SoAd_TpTransmit()
  
Test Precondition: 
    SoAd is initialized and TCP socket connection is ONLINE.
  
Test Execution: 
    01: Call SoAd_TpTransmit().
    02: Configure TcpIp_TcpTransmit stub to return E_NOT_OK.
    03: Call SoAd_MainFunction() to process transmission request.
    04: VP(): Verify that PduR_SoAdTpTxConfirmation() was called with E_NOT_OK as result.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00670</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>274</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1456</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_47_Tcp_CopyTxData_Busy</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>5595</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
     Test verifies that if Up_[SoAd][Tp]CopyTxData() returns BUFREQ_E_BUSY request could not be
     fulfilled and no data has been copied.
  
Test Object: 
    SoAd_TpTransmit()
  
Test Precondition: 
    SoAd is initialized and TCP socket connection is ONLINE.
  
Test Execution: 
    01: Call SoAd_TpTransmit().
    02: Configure PduR_SoAdTpCopyTxData stub to return BUFREQ_E_BUSY.
    03: Call SoAd_MainFunction() to process transmission request.
    04: VP(): Verify that PduR_SoAdTpTxConfirmation() was called with BUFREQ_E_BUSY as result.
    05: VP(): Verify that no further action took place.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.Up_TpCopyTxData_BUFREQ_E_BUSY</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>573</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1457</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_48_Tp_CopyRxData_SduLength0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>5673</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_RxIndication() is called for a connection where
    Up_[SoAd][Tp]CopyRxData() provides insufficient buffer and returns BUFREQ_E_BUSY it will be
    as BUFREQ_OK with no available buffer i.e no data will be copied.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring socket to ONLINE state.
    02: Configure upper layer reception stub (PduR) to be able to receive 8 bytes long data block
        in a single invocation.
    03: Configure PduR_SoAdTpCopyRxData stub to return BUFREQ_E_BUSY.
    04: Call SoAd_RxIndication() with a frame twice of a size that can be received by PduR -&gt;
        first data block will be delivered to PduR, and the second one will be buffered
        in a SoAd receive buffer.
    05: VP(): Verify that PduR_SoAdTpCopyRxData() was called with BUFREQ_E_BUSY as result and no
        data has been copied.
    06: Call SoAd_MainFunction()
    07: VP(): Verify that PduR_SoAdTpCopyRxData() was called with BUFREQ_OK as result and no
        data has been copied.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.Up_TpCopyRxData_BUFREQ_E_BUSY_no_available_buffer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>670</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1458</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_49_Tp_UdpRetry_UdpTxFails</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>5776</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies the behavior of SoAd_TpTransmit() in case TcpIp_UdpTransmit() fails
    (returns with TCPIP_E_PHYS_ADDR_MISS or TCPIP_E_NOT_OK) for a socket connection with
    UDP Retry feature enabled.
    In case TCPIP_E_PHYS_ADDR_MISS SoAd shall copy the data to a socket connection specific
    UdpTxBuffer and retry the transmission in the subsequent SoAd_MainFunction() call.
    In case TCPIP_E_NOT_OK SoAd shall call [Up]_SoAdTpTxConfirmation()) with E_NOT_OK within
    a next SoAd_MainFunction().
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Try to transmit data on a socket connection with Retry feature enabled, when
        TcpIp_UdpTransmit() returns TCPIP_E_PHYS_ADDR_MISS.
    02: Clear error code of TcpIp_UdpTransmit stub.
    03: Call SoAd_MainFunction() to retry transmit request.
    04: VP(SoAd.SWS_SoAd_00557): Verify that SoAd confirms to PduR that data has been sent.
    05: VP(SoAd.EB.SoAd_00541): Verify that data is successfully transmitted to TcpIp module.
    06: Try to transmit data on a socket connection with Retry feature enabled, when
        TcpIp_UdpTransmit() returns TCPIP_E_NOT_OK.
    07: VP(SoAd.EB.TxConfirmation_UdpTransmit_NotOk): Verify that SoAd notifies PduR about
        unsuccessful data transmission.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00557</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>178</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.SoAd_00541</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>602</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.TxConfirmation_UdpTransmit_NotOk</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>664</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1459</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_50_Tp_NoUdpRetry_UdpTxFails</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>5947</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies the behavior of SoAd_TpTransmit() in case TcpIp_UdpTransmit() fails
    (returns with TCPIP_E_PHYS_ADDR_MISS or TCPIP_E_NOT_OK) for a socket connection with
    UDP Retry feature disabled. In such a case no data is transmitted to UL and SoAd shall call
    [Up]_SoAdTpTxConfirmation()) with E_NOT_OK within a next SoAd_MainFunction().
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Try to transmit data on a socket connection with Retry feature disabled, when
        TcpIp_UdpTransmit() returns TCPIP_E_PHYS_ADDR_MISS.
    02: VP(SoAd.EB.SoAd_UdpTransmitFailsWhenUdpRetryDisabled): Verify that no data has been
        transmitted to TcpIp module.
    03: VP(SoAd.EB.TxConfirmation_UdpTransmit_NotOk): Verify that SoAd notifies PduR about
        unsuccessful data transmission with E_NOT_OK error code.
    04: Try to transmit data on a socket connection with Retry feature disabled, when
        TcpIp_UdpTransmit() returns TCPIP_E_NOT_OK.
    05: VP(SoAd.EB.SoAd_UdpTransmitFailsWhenUdpRetryDisabled): Verify that no data has been
        transmitted to TcpIp module.
    06: VP(SoAd.EB.TxConfirmation_UdpTransmit_NotOk): Verify that SoAd notifies PduR about
        unsuccessful data transmission with E_NOT_OK error code.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SoAd_UdpTransmitFailsWhenUdpRetryDisabled</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>607</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.TxConfirmation_UdpTransmit_NotOk</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>664</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1460</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_51_nPdu_UdpTxFails</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>6116</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if TcpIp_UdpTransmit() fails (returns with TCPIP_E_PHYS_ADDR_MISS or
    TCPIP_E_NOT_OK) for a socket connection with nPduUdpTxBuffer set and SoAdSocketUdpRetryEnabled
    set to FALSE, SoAd will discard the data.
  
Test Object: 
    SoAd_IfTransmit().
  
Test Precondition: 
  
Test Execution: 
    01: Try to transmit data on a socket connection with nPDU feature enabled and UdpRetry feature
        disabled when TcpIp_UdpTransmit() returns TCPIP_E_PHYS_ADDR_MISS.
    02: Call SoAd_MainFunction() as many times as configured in SoAdTxUdpTriggerTimeout, to trigger
        TcpIp_UdpTransmit() call.
    03: Verify that TcpIp_UdpTransmit() is called with proper parameters.
    04: VP(): Verify that data is discarded, i.e. not transmitted to TcpIp module.
    05: Try to transmit data on a socket connection with nPDU feature enabled and UdpRetry feature
        disabled when TcpIp_UdpTransmit() returns TCPIP_E_NOT_OK.
    06: Call SoAd_MainFunction() as many times as configured in SoAdTxUdpTriggerTimeout, to trigger
        TcpIp_UdpTransmit() call.
    07: Verify that TcpIp_UdpTransmit() is called with proper parameters.
    08: VP(): Verify that data is discarded, i.e. not transmitted to TcpIp module.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SoAd_UdpTransmitFailsWhenUdpRetryDisabled</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>607</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdTxUdpTriggerTimeout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>699</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1461</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_52_Up_TpCopyTxData_BUFFER_NOT_AVAIL</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>6259</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies the behavior of UDP TP transmission in case [Up]_SoAdTpCopyTxData
    returns BUFREQ_E_BUSY, BUFREQ_E_BUSY and BUFREQ_E_NOT_OK.
    In case of BUFREQ_E_BUSY SoAd shall retry to request data from upper layer by calling
    [Up]_SoAdTpCopyTxData() in a subsequent SoAd_MainFunction() calls.
    In case of BUFREQ_E_BUSY and BUFREQ_E_NOT_OK SoAd shall terminate the TP transmit session
    and notify the upper layer by calling [Up]_SoAdTpTxConfirmation()) with E_NOT_OK.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Try to transmit data on a UDP socket connection when [Up]_SoAdTpCopyTxData()
        returns BUFREQ_E_BUSY.
    02: VP(SoAd.EB.Up_TpCopyTxData_BUFREQ_E_BUSY): Verify that SoAd tries to request data from
        upper layer by calling [Up]_SoAdTpCopyTxData().
    03: Set SoAdTpCopyTxData stub to return BUFREQ_E_NOT_OK.
    04: Call SoAd_MainFunction() to process transmit request.
    05: VP(SoAd.SWS_SoAd_00652): Verify that upper layer is notified about session
        termination by calling [Up]_SoAdTpTxConfirmation() with E_NOT_OK as a result.
    06: Try to transmit data on a UDP socket connection when [Up]_SoAdTpCopyTxData
        returns BUFREQ_E_OVFL.
    07: VP(SoAd.EB.Up_TpCopyTxData_BUFREQ_E_OVFL): Verify that upper layer is notified about
        session termination by calling [Up]_SoAdTpTxConfirmation() with E_NOT_OK as a result.
    08: VP(SoAd.EB.Up_TpCopyTxData_BUFREQ_E_OVFL): Verify that the related socket connection
        is not closed.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00652</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>259</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.Up_TpCopyTxData_BUFREQ_E_BUSY</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>573</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.Up_TpCopyTxData_BUFREQ_E_OVFL</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>574</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1462</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_53_CloseMultipleSockets</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>6388</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if Udp sockets are closed by SoAd_CloseSoCon(), the last closed member
    of the socket connection group will close the TcpIpSocket as well .
  
Test Object: 
    SoAd_CloseSoCon().
  
Test Precondition: 
  
Test Execution: 
    01: Bring first 2 connections from the same socket connection group to ONLINE.
    02: Call SoAd_CloseSoCon(TRUE) for first socket connection.
    03: Call SoAd_MainFunction() to process the closing request.
    04: VP(): Verify that TcpIp_Close() was not yet called as there is another open Udp Socket
    05: Call SoAd_CloseSoCon(FALSE) for the second Udp Socket one.
    06: Call SoAd_MainFunction() to process the closing request.
    07: VP(): Verify that TcpIp_Close() was called once,
        with the parameter Abort set to FALSE.
    08: VP(): Check that the Socket Connections are offline afterwards
    09: Verify that it is possible to bring connections to online state again
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00642.b.UDP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>434</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1463</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_53b_RestartMultipleSockets</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>6516</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if Udp sockets are closed by SoAd_TcpIpEvent(TCPIP_UDP_CLOSED), the
    socket connections will reconnect again, by requesting one Udp socket from TcpIp for the UDP
    socket connection group.
  
Test Object: 
    SoAd_CloseSoCon().
  
Test Precondition: 
  
Test Execution: 
    01: Bring first 2 connections from the same socket connection group to ONLINE.
    02: Call SoAd_TcpIpEvent(TCPIP_UDP_CLOSED) to inform SoAd that the UDP socket is closed.
    03: Call SoAd_MainFunction() to process the closing request.
    04: VP(SoAd.EB.UdpSM_RESTART_Connecting):
        Verify that the reconnection is performed and that a new UDP socket is requested.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UdpSM_RESTART_Connecting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>987</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1464</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_54_TcpIpEvent_ListenSocket</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>6618</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if SoAd_TcpIpEvent() is called with TCPIP_TCP_CLOSED for a listen
    socket, the listen socket would not be usable any more.
  
Test Object: 
    SoAd_TcpIpEvent()
  
Test Precondition: 
  
Test Execution: 
    01: Call SoAd_LocalIpAddrAssignmentChg() and SoAd_MainFunction() to start the opening process.
    02: VP(): Verify that the listen socket was opened.
    03: Call SoAd_TcpIpEvent(TCPIP_TCP_CLOSED) for the listen socket.
    04: Call SoAd_TcpAccepted() to connect a client to server.
    05: VP(): Verify that the listen socket was closed so the client can't connect.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00645</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>253</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1465</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_55_TcpIpEvent_ListenSocket_RESET</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>6712</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  
Test Object: 
    SoAd_TcpIpEvent()
  
Test Precondition: 
  
Test Execution: 
    01: Call SoAd_LocalIpAddrAssignmentChg() and SoAd_MainFunction() to start the opening process.
    02: VP(): Verify that the listen socket was opened.
    03: Call SoAd_TcpIpEvent(TCPIP_TCP_RESET) for the listen socket.
    04: Call SoAd_TcpAccepted() to connect a client to server.
    05: VP(): Verify that the listen socket was not closed so the client can connect.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpIpEvent_ListenSocket</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>594</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1466</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_56_TcpTp_RxInd_DisblRoutGroup_Header</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>6803</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if SoAd_RxIndication() is called for a TCP socket connection with a
    header mode enabled and segmented TP PDU whose socket route belongs to a disabled routing
    group, it will be silently discarded.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring TCP socket to ONLINE state.
    02: Disable routing group SoAdRoutingGroup_Rx, where test socket route belongs.
    03: Call SoAd_RxIndication() with a frame containing only a part PDU header.
    04: Call SoAd_RxIndication() with a frame containing the remaining part of PDU header, and
        a part of PDU payload.
    05: Call SoAd_RxIndication() with a frame containing the remaining part of a PDU payload.
    06: VP(): Verify that SoAd shall simply discard PDU, i.e. no data is forwarded to PduR.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00600</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>214</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1467</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_57_UdpTp_RxInd_DisblRoutGroup_NoHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>6923</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_RxIndication() is called for a UDP socket connection with a
    header mode disabled and TP PDU whose socket route belongs to a disabled routing group,
    it will be silently discarded.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket with SoAdPduHeaderEnable set to FALSE to ONLINE state.
    02: Disable routing group SoAdRoutingGroup_Rx, where test socket route belongs.
    03: Call SoAd_RxIndication() with a test PDU.
    04: VP(): Verify that SoAd shall simply discard PDU, i.e. no call [UL]_SoAdIfRxIndication()
              is generated.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00600</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>214</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1468</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_58_UdpAlive_Supervision_Timer</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>6994</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies Udp alive supervision timer wrap-around functionality for a UDP socket connection
    configured with a SoAdSocketUdpAliveSupervisionTimeout and that after this timer expires,
    SoAd shall change the state of the socket connection to SOAD_SOCON_RECONNECT, deactivate the
    alive supervision timer and reset the remote address.
  
Test Object: 
    SoAdSocketUdpAliveSupervisionTimer wrap-around functionality.
  
Test Precondition: 
    * UDP socket connection with remote IP address set to TCPIP_IPADDR_ANY.
    * Socket is in state RECONNECT.
  
Test Execution: 
    01: Call SoAd_MainFunction() for TimerMax - 2 times (it was already called once).
    02: Call SoAd_RxIndication() with valid parameters.
    03: Call SoAd_GetRemoteAddr() after remote address was overwritten.
    04: VP(SoAd.ASR43.SWS_SoAd_00694):
        Verify that socket state is ONLINE.
    05: Call SoAd_MainFunction() and stop when one more SoAd_MainFunction() call would trigger
        a timeout.
    06: VP(SoAd.ASR43.SWS_SoAd_00694):
        Verify that socket state is still ONLINE.
    07: Call SoAd_MainFunction() one more time.
    08: VP(SoAd.SWS_SoAd_00695.a, SoAd.SWS_SoAd_00582.a):
        Verify that socket is in state RECONNECT.
    09: VP(SoAd.SWS_SoAd_00695.b):
        Verify that alive supervision timer is deactivated - no further action was performed.
    10: Call SoAd_GetRemoteAddr().
    11: VP(SoAd.SWS_SoAd_00695.c, SoAd.SWS_SoAd_00582.b):
        Verify that remote address was reset to the configured remote address.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00694</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>300</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00695.a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>499</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00695.b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>500</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00695.c</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>501</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00582.a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00582.b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>494</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1469</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_59_nPduUdpTx_PduTimeout_FIFO</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>7165</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   Test case verifies that when a PDU with TriggerMode set to TRIGGER_NEVER with a specific
   SoAdTxUdpTriggerTimeout set is transmitted SoAd shall set the socket connection nPduUdpTxBuffer
   specific timer to the value of SoAdTxUdpTriggerTimeout if it is lower than the current
   nPduUdpTxBuffer specific timer value.
   It also verifies that SoAd preserves the order of PDUs transmission (FIFO semantics).
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket with nPDU feature enabled to ONLINE state.
    02: Call SoAd_IfTransmit() to transmit first PDU with SoAdTxUdpTriggerTimeout set to 20.
    03: Call SoAd_IfTransmit() to transmit second PDU with SoAdTxUdpTriggerTimeout set to 10.
    04: Call SoAd_MainFunction() one time less then is configured in SoAdTxUdpTriggerTimeout
        of the second PDU (9).
    05: Verify that TcpIp_UdpTransmit() is not called.
    06: Call SoAd_MainFunction() one more time.
    07: VP(SoAd.SWS_SoAd_00697): Verify that TcpIp_UdpTransmit() is called to transmit both
        PDUs after the exact number of ticks defined by the smaller of two SoAdTxUdpTriggerTimeout
        values. This way it is verified that socket connection nPduUdpTxBuffer specific timer was
        set to a value of the second PDU SoAdTxUdpTriggerTimeout at the moment its transmission
        was requested, because it was smaller then the current value, set by the first PDU
        transmission.
    08: VP(SoAd.SWS_SoAd_00690): Verify that both PDUs are transmitted in the correct order,
        i.e. the first PDU transmitted with SoAd_IfTransmit() is the first one in the output frame.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00697</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>303</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00690</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>290</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1470</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_60_nPduUdpTx_StopSpecificTimer</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>7299</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that SoAd shall stop the nPduUdpTxBuffer specific timer when the
    buffer has been sent.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket with nPDU feature enabled to ONLINE state.
    02: Call SoAd_IfTransmit() to transmit first PDU with SoAdTxUdpTriggerMode set to
        TRIGGER_NEVER and SoAdTxUdpTriggerTimeout set to 20.
    03: Call SoAd_MainFunction() to the middle of SoAdTxUdpTriggerTimeout interval.
    04: VP(SoAd.SWS_SoAd_00547): Verify that TcpIp_UdpTransmit() is not called, i.e. timer
        has not yet expired.
    05: Call SoAd_IfTransmit() to transmit second PDU with SoAdTxUdpTriggerMode set to
        TRIGGER_ALWAYS.
    06: VP(SoAd.SWS_SoAd_00548): Verify that TcpIp_UdpTransmit() is called to transmit both
        PDUs, i.e. nPduUdpTxBuffer is flushed.
    07: Call SoAd_MainFunction() to process TxConfirmation notifications and verify that
        [UL]_SoAdIfTxConfirmation() is called for both PDUs.
    08: Call SoAd_MainFunction() to continue ticking first PDUs specific timer to its expiration
        (SoAdTxUdpTriggerTimeout).
    09: VP(SoAd.SWS_SoAd_00684): Verify that TcpIp_UdpTransmit() is not called, i.e. that
        nPduUdpTxBuffer specific timer been stopped when buffer has been sent in step 05.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00548</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>168</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00547</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00684</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>285</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1471</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_61_nPduUdpTx_IndividualPdus</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>7438</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that in case nPduUdpTxBuffer is used for a socket connection SoAd
    shall store all PDUs individually, also PDUs with the same PduId.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket with nPDU feature enabled to ONLINE state.
    02: Call SoAd_IfTransmit() to transmit first PDU with SoAdTxUdpTriggerTimeout set to 10.
    03: Call SoAd_IfTransmit() to transmit second PDU that has the same PduId as the first one.
    04: Call SoAd_MainFunction() one time less then is configured in SoAdTxUdpTriggerTimeout.
    05: Verify that TcpIp_UdpTransmit() is not called.
    06: Call SoAd_MainFunction() one more time.
    07: VP(): Verify that TcpIp_UdpTransmit() is called to transmit both PDUs. This way it is
        verified that SoAd stores PDUs individually, also PDUs with the same PduId.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00691</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>291</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1472</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_62_nPduUdpTx_IndividualTimers</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>7560</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that SoAd maintains a nPduUdpTxBuffer specific timer for each socket
    connection with nPduUdpTxBuffer.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket 1 with nPDU feature enabled to ONLINE state.
    02: Bring UDP socket 2 with nPDU feature enabled to ONLINE state.
    03: Call SoAd_IfTransmit() to transmit first PDU on socket 1 with
        SoAdTxUdpTriggerTimeout set to 10.
    04: Call SoAd_IfTransmit() to transmit second PDU on socket 2 with
        SoAdTxUdpTriggerTimeout set to 30.
    05: Call SoAd_MainFunction() one tick less then defined in the first PDU SoAdTxUdpTriggerTimeout.
        Check that TcpIp_UdpTransmit() is not called. After that call for one more tick.
    06: VP(SoAd.SWS_SoAd_00696, SoAd.SWS_SoAd_00198):
        Verify that TcpIp_UdpTransmit() is called to transmit the first PDU - with correct length
        and header ID.
    07: Call SoAd_MainFunction() to continue counting second PDUs specific timer, one tick
        before it expires (SoAdTxUdpTriggerTimeout). Check that TcpIp_UdpTransmit() is not
        called. After that call for one more tick.
    08: VP(SoAd.SWS_SoAd_00696):
        Verify that TcpIp_UdpTransmit() is called to transmit the second PDUs. This way it is
        verified that for each socket connection a separate nPduUdpTxBuffer specific timer is
        maintained.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00696</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>302</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00198</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1473</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_63_TpTransmit_OngoingTxInGroup</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>7733</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that SoAd_TpTransmit() shall skip the transmit request and return
    E_NOT_OK if there is an ongoing  transmission on any of socket connections in a group where
    specified socket connection belongs.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring two UDP sockets that belong to the same socket connection group to ONLINE state.
    02: Call SoAd_TpTransmit() to request a transmission of a PDU on the first socket.
    03: Call SoAd_TpTransmit() to request a transmission of a PDU on the second socket.
    04: VP(): Verify that SoAd skips transmission request and returns E_NOT_OK.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TpTransmit.OngoingTransmissionInGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>676</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1474</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_65_Udp_Transmit_Wildcard</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>7832</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that SoAd_IfTransmit() API returns E_OK when called with valid data, passes
    the data to the TcpIp and sends TxConfirmation to the PduR for an UDP socket with automatic
    connection setup and remote address set to wildcard.
  
Test Object: 
    SoAd_TpTransmit()
  
Test Precondition: 
    * SoAd is initialized.
    * UDP socket connection with SoAdSocketAutomaticSoConSetup &amp; remote address set to wildcard is
      ONLINE.
  
Test Execution: 
    01: Call SoAd_IfTransmit().
    02: VP(): Verify that SoAd_IfTransmit returns E_OK.
    03: Call SoAd_MainFunction().
    04: VP(): Verify that TcpIp_UdpTransmit() and PduR_SoAdIfTxConfirmation() are called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.IfTransmit_UdpWildcardAddr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>677</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1475</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_66_Tcp_Transmit_Wildcard</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>7955</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that SoAd_IfTransmit() API returns E_OK when called with valid data, passes
    the data to the TcpIp and sends TxConfirmation to the PduR for an TCP socket with automatic
    connection setup and remote address set to wildcard.
  
Test Object: 
    SoAd_TpTransmit()
  
Test Precondition: 
    * SoAd is initialized.
    * TCP socket connection with SoAdSocketAutomaticSoConSetup &amp; remote address set to wildcard is
      ONLINE.
  
Test Execution: 
    01: Call SoAd_RxIndication() to receive remote port.
    02: Call SoAd_GetAndResetMeasurementData() with measurement index SOAD_MEAS_DROP_TCP.
    03: VP(SWS_SoAd_00758): Verify that TCP measurement data counter was not incremented as received
        PDU was not discarded.
    04: Call SoAd_IfTransmit().
    05: Call SoAd_MainFunction().
    06: VP(SoAd.EB.IfTransmit_TcpWildcardAddr): Verify that TcpIp_TcpTransmit() is called.
    07: Call SoAd_TxConfirmation().
    08: VP(SoAd.SWS_SoAd_00545): Verify that PduR_SoAdIfTxConfirmation() is called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.IfTransmit_TcpWildcardAddr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>678</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00545</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>165</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00758</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>371</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1476</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_67_TxConfirmation_OversizedLength</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>8108</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_TxConfirmation() is called with a length parameter
    larger then transmitted PDU size, SoAd will raise the development error SOAD_E_INV_ARG.
  
Test Object: 
    SoAd_TxConfirmation().
  
Test Precondition: 
  
Test Execution: 
    01: Bring TCP socket to ONLINE state.
    02: Call SoAd_TpTransmit() to request a transmission of PDU.
    03: Call SoAd_MainFunction() to process transmission request.
    04: Call SoAd_TxConfirmation() with a length that is larger then transmitted PDU length.
    05: VP(): Verify that SoAd shall raise the development error SOAD_E_INV_ARG.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00271</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1477</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_68_TxConfirmation_FragmentedConf</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>8199</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that call to SoAd_TxConfirmation() will trigger a call to upper layer
    [Up]_SoAdTpTxConfirmation() and E_OK as result if all transmitted TP PDU data have been
    confirmed for transmission. Transmit confirmation is fragmented into two SoAd_TxConfirmation()
    calls.
  
Test Object: 
    SoAd_TxConfirmation().
  
Test Precondition: 
  
Test Execution: 
    01: Bring TCP socket to ONLINE state.
    02: Call SoAd_TpTransmit() to request a transmission of PDU.
    03: Call SoAd_MainFunction() to process transmission request.
    04: Call SoAd_TxConfirmation() to confirm successful transmission of the first half of a PDU.
    05: VP(): Verify that no confirmation has been sent to upper layer, because not all data are
        confirmed.
    06: Call SoAd_TxConfirmation() to confirm successful transmission of the second PDU half.
    07: VP(): Verify that SoAd notifies upper layer about the successful PDU transmission
        by calling [Up]_SoAdTpTxConfirmation().
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00558</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>179</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1478</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_69_TxConfirmation_TxInProgress</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>8298</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that in case SoAd_TxConfirmation() is called for a socket where PDU
    transmission is in progress SoAd will ignore confirmation request hence
    [Up]_SoAdTpTxConfirmation() will not be called.
  
Test Object: 
    SoAd_TxConfirmation().
  
Test Precondition: 
  
Test Execution: 
    01: Bring TCP socket to ONLINE state.
    02: Call SoAd_TpTransmit() to request a transmission of PDU.
    03: Call SoAd_TxConfirmation() to confirm successful transmission while PDU transmission is
        in progress, i.e. not yet executed in SoAd_MainFunction().
    04: VP(SoAd.EB.TxConfirmation_TxInProgress): Verify that SoAd ignores confirmation request hence
        no confirmation is propagated to upper layer by calling [Up]_SoAdTpTxConfirmation().
    05: Call SoAd_MainFunction() to process transmit request.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TxConfirmation_TxInProgress</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>665</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1479</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_70_SegTpPdu_BUFREQ_E_BUSY</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>8385</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies the behavior of SoAd_RxIndication() when called for a segmented TP PDUs,
    while upper layer is initially not ready to retrieve data (it returns BUFREQ_E_BUSY).
    In this case SoAd stores data in an internal ring buffer, which is processed within
    a next call to SoAd_MainFunction(). If upper layer is then ready to receive data (returns
    BUFREQ_OK) PDUs from a ring buffer are forwarded to the upper layer.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring TCP socket to ONLINE state.
    02: Setup upper layer [UL]_SoAdTpStartOfReception stub to indicate it is not able to
        receive data at the moment (BUFREQ_E_BUSY).
    03: Call SoAd_RxIndication() with a frame containing the complete PDU1.
    04: Call SoAd_RxIndication() with a frame containing a part of PDU2 header.
    05: Call SoAd_RxIndication() with a frame containing the remaining part of PDU2 header, and
        a part of PDU2 payload.
    06: Call SoAd_RxIndication() with a frame containing the remaining part of PDU2.
    07: Setup upper layer [UL]_SoAdTpStartOfReception stub to indicate it is now able to
        receive data (BUFREQ_OK).
    08: Call SoAd_MainFunction() to process internal ring buffer where both PDUs are stored.
    09: VP(SoAd.SWS_SoAd_00574.1): Verify that upper layer is queried for the available
        amount of data, by calling [UL]_SoAdTpCopyRxData() with PduInfoType.SduLength = 0.
    10: VP(SoAd.SWS_SoAd_00574.2): Verify that [UL]_SoAdTpCopyRxData() was called
        to copy all data belonging to this socket connection from the SoAd receive ring buffer.
    11: VP(SoAd.SWS_SoAd_00574.3): Verify that [UL]_SoAdTpRxIndication()
        is called to indicate that the complete PDU has been forwarded to the upper layer.
    12: VP(SoAd.SWS_SoAd_00574.3): Verify that the next TP-PDU is dispatched for processing
        following steps 09-11.
    13: VP(SoAd.EB.Up_SoAdTpStartOfReception_BUFREQ_E_BUSY): Verify that both PDUs are successfully
        transmitted to the upper layer.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00574.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>484</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00574.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>485</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00574.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>486</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.Up_SoAdTpStartOfReception_BUFREQ_E_BUSY</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>572</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1480</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_71_AssignRemoteAddr_IPv6</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>8568</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that SoAd_SetRemoteAddr() will set the remote address (IpV6 address and port)
    of the specified socket connection.
    Also, this test verifies that SoAd_GetRemoteAddr() will retrieve the remote address used for
    the socket connection.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Call SoAd_SetRemoteAddr() with an IpV6 remote address specified.
    02: Call SoAd_GetRemoteAddr() to retrieve socket connection remote address.
    03: VP(SoAd.SWS_SoAd_00664, SoAd.SWS_SoAd_00533):
        Verify that remote address and port have been set correctly.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00533</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00664</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>270</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1481</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_72_RxInd_NoHeader_CopyRxDataNotOk</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>8650</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when [UL]_SoAdTpCopyRxData() returns BUFREQ_E_NOT_OK during processing
    of Tp reception within SoAd_MainFunction(), SoAd will:
    -  disable further transmission and reception on this socket connection,
    -  close socket connection within the next SoAd_MainFunction() and
    -  call [UL]_SoAdTpRxIndication() with E_NOT_OK.
   Test event happens on a socket connection with PDU Header disabled, while SoAd internal RX buffer
   is in use, and data in a buffer is fragmented.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring socket to ONLINE state. The socket has internal RX buffer of a size 32 bytes.
    02: Configure upper layer reception stub (PduR) to indicate it is not able to receive data
        at the moment (returns BUFREQ_E_BUSY).
    03: Call SoAd_RxIndication() with a frame of a size 24 bytes. Data will be stored in a buffer.
        (*X - position used)
        SoAd RX buffer status:                    PduR RX buffer status:
        ************************
        0      7      15      23      31          0      7      15      23      31      39
    04: Configure PduR stub to indicate it is able to receive 8 bytes.
    05: Call SoAd_MainFunction() to process data from SoAd receive buffer. 8 bytes is
        forwarded to PduR, 16 remain in the buffer, but free buffer space is not continuous.
        SoAd RX buffer status:                    PduR RX buffer status:
                ****************                  ********
        0      7      15      23      31          0      7      15      23      31      39
    06: Call SoAd_RxIndication() with a frame of a size 16 bytes - buffer if full.
        SoAd RX buffer status:                    PduR RX buffer status:
        XXXXXXXX****************XXXXXXXX          ********
        0      7      15      23      31          0      7      15      23      31      39
    07: Configure PduR stub to indicate it is able to receive all data from SoAd receive buffer at
        the first call, but returns BUFREQ_E_NOT_OK on the second call.
    08: Call SoAd_MainFunction() to process data from SoAd receive buffer -&gt; data is discarded.
        SoAd RX buffer status:                    PduR RX buffer status:
                                                  ********
        0      7      15      23      31          0      7      15      23      31      39
    09: VP(): Verify that no data has been forwarded to the upper layer.
    10: Call SoAd_MainFunction() to process of connection state change.
    11: VP(): Verify that [Up]_SoAdTpRxIndication() is called with E_NOT_OK.
    12: VP(): Verify that TcpIp_Close() was called for a socket.
    13: VP(): Verify that socket connection is in RECONNECT state -&gt; it is not possible to receive
              or transmit on this socket connection.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00570.a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>477</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00570.b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>478</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1482</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_73_TcpIpClose_E_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>8825</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when a call to TcpIp_Close() fails (returns E_NOT_OK) while trying
    to close a socket connection, SoAd will consider the respective connection closed.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Bring socket to ONLINE state.
    02: Configure TcpIp close stub to return E_NOT_OK.
    03: SoAd_CloseSoCon() to request socket closing.
    04: Call SoAd_MainFunction() to process closing request.
    05: VP(): Verify that socket is in OFFLINE state and that upper layer is notified about
        the change.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpIpClose_Fail</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>654</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1483</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_74_ReadDhcp_Ipv6</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>8906</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_ReadDhcpHostNameOption() is called for a socket connection
    configured to use IPV6, it will forward the call to TcpIp_DhcpV6ReadOption() with the option
    set to 39.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Call SoAd_ReadDhcpHostNameOption().
    02: VP(): Verify that TcpIp_DhcpV6ReadOption() was called with correct parameters.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00704</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>310</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1484</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_75_WriteDhcp_Ipv6</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>8959</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_WriteDhcpHostNameOption() is called for a socket connection
    configured to use IPV6, it will forward the call to TcpIp_DhcpV6WriteOption() with the option
    set to 39.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Call SoAd_WriteDhcpHostNameOption().
    02: VP(): Verify that TcpIp_DhcpV6WriteOption() was called with correct parameters.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00708</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>314</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1485</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_76_UdpStrictHeaderLenCheck</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>9012</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when SoAdSocketUdpStrictHeaderLenCheckEnabled field is enabled for a
    UDP socket connection SoAd will check if the length of the received UDP message does match the
    accumulated length of all PDUs including their PDU headers prior forwarding any data to an
    upper layer. If their lengths are different SoAd shall silently drop the whole message
    without forwarding any data.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket with SoAdSocketUdpStrictHeaderLenCheckEnabled field enabled to
        ONLINE state.
    02: Call SoAd_RxIndication() with a datagram consisting two PDUs plus one padding byte
        (size of a datagram exceeds by one size of both PDUs written in a header length fields).
    03: VP(): Verify that the complete datagram is silently dropped, i.e. PduR_SoAdIfRxIndication()
        is not called and no data is forwarded to the upper layer.
    04: Call SoAd_RxIndication() with a datagram consisting two PDUs, but the second PDU is not
        complete  (size of a datagram is one less then a size of both PDUs written in a header
        length fields).
    05: VP(): Verify that the complete datagram is silently dropped, i.e. PduR_SoAdIfRxIndication()
        is not called and no data is forwarded to the upper layer.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00709</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>315</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdRxPduHeaderId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>723</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1486</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_77_RevertRemoteAddr</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>9129</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that SoAd will revert the remote address change and set the state of the
    socket connection back to SOAD_SOCON_RECONNECT in case no valid PDU data was forwarded to an
    upper layer and the remote address of the socket connection was overwritten according to
    [SWS_SoAd_00592] in the context of the same SoAd_RxIndication().
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket to RECONNECT state (remote IP address and port are ANY).
    02: Call SoAd_GetRemoteAddr() to retrieve configured socket connection remote address.
    03: Call SoAd_RxIndication() with a valid remote address and a datagram containing
        incomplete PDU.
    04: Call SoAd_GetRemoteAddr() to retrieve current socket connection remote address.
    05: VP(): Verify that socket connection remote address haven't changed, and the connection
        remained in RECONNECT state.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00710</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>316</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1487</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_78_SetRemoteAddr_Wild</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>9243</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_SetRemoteAddr() is called for a socket connection that is in
    socket state ONLINE, to set it's remote address to a value that contains wildcards, SoAd shall
    change it's socket state to RECONNECT.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Bring a socket to ONLINE.
    02: Call SoAd_SetRemoteAddr() using a remote address with wildcards.
    03: VP(): Verify that socket is in RECONNECT state.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00687</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>287</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1488</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_79_RxInd_WriteOnlyUdpSocket_NoHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>9311</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that in case SoAd_RxIndication() is called for a write-only UDP socket
    with PDU Header disabled, SoAd will not generate call to upper layer [Up]_SoAdIfRxIndication()
    callback function.
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket with only TX side configured to ONLINE state.
    02: Call SoAd_RxIndication() to indicate the reception of a new UDP datagram.
    03: VP(): Verify that upper layer [UL]_SoAdIfRxIndication() callback function is not called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.RxIndication_WriteOnlySocket_NoHeader</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>669</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1489</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_81_RxInd_MultipleRoutingGroups</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>9381</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test configuration consist of a UDP socket connection with a multiple socket route references,
    which belong to a different socket routing groups.
    Test case verifies that if SoAd_RxIndication() is called for such a configuration, SoAd will
    silently drop PDUs that belong to a disabled socket routes.
  
Test Object: None.
Test Precondition: 
    UDP socket with 2 socket routes that belong to a different socket routing groups in ONLINE
    state.
  
Test Execution: 
    01: Disable one of the socket routing groups (EBTEST_SOAD_ROUTING_GROUP_RX_2).
    02: Call SoAd_RxIndication() with a datagram that contain two PDUs one for each socket route.
    03: Verify that PDU which is referencing enabled socket routing group is forwarded to the
        upper layer.
    04: VP(): Verify that SoAd silently discards PDU that is referencing disabled routing group.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00600</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>214</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1490</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_82_UdpIf_RxInd_DisblRoutGroup_NoHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>9499</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_RxIndication() is called for a UDP socket connection with a
    header mode disabled and IF PDU whose socket route belongs to a disabled routing group,
    it will be silently discarded.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring TCP socket with SoAdPduHeaderEnable set to FALSE to ONLINE state.
    02: Disable routing group SoAdRoutingGroup_Rx, where test socket route belongs.
    03: Call SoAd_RxIndication() with a test PDU.
    04: VP(): Verify that SoAd shall simply discard PDU, i.e. no call [UL]_SoAdIfRxIndication()
              is generated.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00600</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>214</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1491</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_83_CloseTcpSoConFromSoConGroup</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>9570</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that for a TCP socket connection group if SoAd_CloseSoCon() is called with
    Abort = FALSE for one socket, TcpIp_Close(FALSE) will not be called to close the listen or
    accepted sockets if they are still used by other sockets from this group.
  
Test Object: 
  
Test Precondition: 
    TCP socket connection group is configured.
    One socket from socket connection group is in state ONLINE.
    Second socket from socket connection group is in state SOAD_SOCON_RECONNECT.
  
Test Execution: 
    01: Call SoAd_CloseSoCon() with Abort = FALSE.
    02: Call SoAd_MainFunction().
    03: VP(): Verify that closed socket is in state OFFLINE.
    04: VP(): Verify that TcpIp_Close(FALSE) was not called for listen or accepted socket.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SoAd_CloseTcpSoConFromSoConGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>675</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1492</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_84_RxInd_WriteOnlyTcpSocket_NoHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>9678</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that in case SoAd_RxIndication() is called for a write-only TCP socket
    with PDU Header disabled, SoAd will not generate call to upper layer [Up]_SoAdIfRxIndication()
    callback function.
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
  
Test Execution: 
    01: Bring the socket to state ONLINE.
    02: Call SoAd_RxIndication() to indicate the reception of a new TCP message.
    03: VP(): Verify that upper layer [UL]_SoAd[If]RxIndication() callback function is not called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.RxIndication_WriteOnlySocket_NoHeader</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>669</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1493</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_85_IfTransmit_SetBusyCnt</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>9747</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case verifies the behavior of SoAd_IfTransmit() when called for
    a TCP socket, and when TcpIp_TcpTransmit() returns E_NOT_OK.
    In that case SoAd_IfTransmit() returns E_NOT_OK, SoAd_CopyTxData() is not called -&gt;
    no data is transmitted.
    During execution SoAd_IfTransmit() is preempted by SoAd_MainFunction(), which due to protection
    mechanism, does not affect IfTransmit() execution.
  
Test Object: 
    SoAd_IfTransmit().
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
  
Test Execution: 
    01: Set TcpIp_TcpTransmit_Stub to increase BusyCnt.
    02: Bring the TCP socket to ONLINE state in a server mode.
    03: Call SoAd_IfTransmit() to transmit test PDU over the socket.
    04: VP(): Verify that SoAd_IfTransmit() returned E_NOT_OK.
    05: VP(): Verify that TcpIp_TcpTransmit() was called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.IfTransmit_TcpTransmit_NOT_OK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>616</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1494</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_86_Udp_RxIndication_IncompleteHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>9831</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when SoAd_RxIndication() is called with an UDP datagram that contains
    PDU with incomplete header, SoAd will silently drop that incomplete PDU.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket to ONLINE state.
    02: Call SoAd_RxIndication() with a datagram containing two PDUs, second of which has incomplete
        header.
    03: Verify that the first PDU is correctly forwarded to the upper layer
        ([UL]_SoAdIfRxIndication() is called).
    04: VP(): Verify that the second PDU is silently dropped - no call to [UL]_SoAdIfRxIndication().
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00559.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>466</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1495</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_87_IfTransmit_UdpTransmit_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>9927</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies the behavior of SoAd_IfTransmit() when called for a UDP socket, in case
    TcpIp_UdpTransmit() returns TCPIP_E_NOT_OK.
    In such a case SoAd_IfTransmit() returns E_NOT_OK, and no data is transmitted.
  
Test Object: None.
Test Precondition: 
    Test socket connection has nPDU feature enabled.
  
Test Execution: 
    01: Bring UDP socket to ONLINE state.
    02: Call SoAd_IfTransmit() to transmit test PDU over the socket. Since nPDU feature is enabled
        data will be buffered.
    03: Set TcpIp_UdpTransmit_Stub to return TCPIP_E_NOT_OK.
    04: Call SoAd_IfTransmit() to transmit new PDU over the socket. There is no room in the buffer-&gt;
        data must be transmitted.
    05: VP(): Verify that SoAd_IfTransmit() returned E_NOT_OK.
    06: VP(): Verify that TcpIp_UdpTransmit() was called.
    07: VP(): Verify that no data is transmitted to TcpIp module.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.IfTransmit_UdpTransmit_NOT_OK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>617</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1496</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_88_TcpIpEvent_While_Tx</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>10031</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test case verifies that if SoAd_TcpIpEvent() with an event TCPIP_TCP_CLOSED is called for
    an ongoing TP transmission, a further call to SoAd_TxConfirmation() will not generate call to
    upper layer Up_[SoAd][Tp]TxConfirmation() callback function.
    Also, a call to SoAd_MainFunction() will generate a call to Up_[SoAd][Tp]TxConfirmation() with
    the parameter Result E_NOT_OK.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Bring the socket to ONLINE state.
    02: Call SoAd_TpTransmit().
    03: Call SoAd_MainFunction().
    04: Call SoAd_TcpIpEvent(TCPIP_TCP_CLOSED).
    05: Call SoAd_MainFunction().
    06: VP(SoAd.EB.TpCancelTransmit_UpTxConfirmation_NotOk):
        Verify that upper layer SoAd_TxConfirmation() callback function is called with
        E_NOT_OK.
    07: Call SoAd_TxConfirmation().
    08: VP(SoAd.SWS_SoAd_00270):
        Verify that upper layer SoAd_TxConfirmation() callback function is not called.
    09: VP(SoAd.EB.TxConfirmation_TCP_IP_SOCKET_CLOSED):
        Verify that upper layer SoAd_TxConfirmation() callback function is not called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TxConfirmation_TCP_IP_SOCKET_CLOSED</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>661</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.SoAd_TcpIpEvent_TCPIP_TCP_CLOSED_UpTxConfirmation_NotOk</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>662</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00270</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1497</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_89_SetUniqueRemoteAddr</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>10150</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if SoAd_SetUniqueRemoteAddr() is called and there are no unused socket
    connections within the socket connection group, E_NOT_OK will be returned and SoConId won't be
    updated.
  
Test Object: 
    SoAd_SetUniqueRemoteAddr()
  
Test Precondition: 
  
Test Execution: 
    01: Call SoAd_OpenSoCon() to open the first and second sockets of the socket connection group.
    02: Call SoAd_SetUniqueRemoteAddr().
    03: VP(): Verify that E_NOT_OK was returned.
    04: VP(): Verify that the SoConId wasn't updated.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00678</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>280</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1498</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_90_Transmit_RECONNECT</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>10229</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If SoAd_TpTransmit() is called in a state that is not ONLINE, E_NOT_OK will be returned and
    no further action shall take place.
  
Test Object: 
    SoAd_TpTransmit()
  
Test Precondition: 
  
Test Execution: 
    01: Bring the socket connection in RECONNECT.
    02: Call SoAd_TpTransmit().
    03: Verify that E_NOT_OK was returned.
    04: Call SoAd_MainFunction().
    05: VP(): Verify that no further action took place.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00587</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>202</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1499</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_91_ReadDhcp_Ipv4</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>10308</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_ReadDhcpHostNameOption() is called for a socket connection
    configured to use IPV4, it will forward the call to TcpIp_DhcpReadOption() with the option
    set to 81.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Call SoAd_ReadDhcpHostNameOption().
    02: VP(): Verify that TcpIp_DhcpReadOption() was called with correct parameters.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00703</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>309</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1500</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_92_WriteDhcp_Ipv4</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>10364</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_WriteDhcpHostNameOption() is called for a socket connection
    configured to use IPV4, it will forward the call to TcpIp_DhcpWriteOption() with the option
    set to 81.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Call SoAd_WriteDhcpHostNameOption().
    02: VP(): Verify that TcpIp_DhcpWriteOption() was called with correct parameters.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00707</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>313</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1501</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_93_GetRemoteAddr_Ipv6</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>10422</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_GetRemoteAddr() is called for a socket connection
    configured to use IPV6 using a remote address IPV4, E_NOT_OK will be returned and
    SOAD_E_INV_ARG reported to DET.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Call SoAd_GetRemoteAddr().
    02: VP(): Verify that E_NOT_OK was returned.
    03: VP(): Verify that SOAD_E_INV_ARG was reported to DET.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00698</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>304</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1502</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_94_SetUniqueRemoteAddr_Ipv6</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>10488</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that SoAd_SetUniqueRemoteAddr() will return the SoConId that matched the
    Ipv6 remote address.
  
Test Object: 
    SoAd_SetUniqueRemoteAddr().
  
Test Precondition: 
  
Test Execution: 
    01: Call SoAd_SetUniqueRemoteAddr().
    02: VP(): Verify that E_OK was returned and the SoConId with exact match was saved.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00675</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>278</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1503</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_95_CopyTxData_TpTcp_BUF_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>10560</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies that in case of a TCP socket connection when TcpIp_TcpTransmit() returns with
    E_NOT_OK, within the SoAd_MainFunction() SoAd shall call the upper layer with the configured
    transmit confirmation function (&lt;Up&gt;_[SoAd][Tp]TxConfirmation&gt;()) and E_NOT_OK as result.
  
Test Object: 
    SoAd_TpTransmit()
  
Test Precondition: 
    SoAd is initialized and TCP socket connection is ONLINE.
  
Test Execution: 
    01: Configure PduR_SoAdTpCopyTxData stub to return E_NOT_OK in the second call.
    02: Call SoAd_TpTransmit().
    03: Call SoAd_MainFunction() to process transmission request.
    04: VP(): Verify that PduR_SoAdTpTxConfirmation() was called with E_NOT_OK as result.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00670</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>274</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1504</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_96_TcpTp_RxInd_DisblRoutGroup_OngoingRx</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>10650</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when TP PDUs are received within SoAd_MainFunction() context and
    referenced SocketRoute belongs to a disabled routing group, those PDUs will be simply discarded.
    PDUs whose reception has been initiated before routing group was disabled, will not be
    affected by disabling operation.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring TCP socket to ONLINE state.
    02: Call SoAd_RxIndication() to initiate reception of 2 PDUs.
    03: Disable routing group SoAdRoutingGroup_Rx, where test socket route belongs.
    04: Call SoAd_MainFunction() to process PDU reception.
    05: VP(): Verify that the first PDU, whose reception has been initiated prior disabling routing
        group, has been received successfully, and the second PDU is silently dropped.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00600</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>214</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1505</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_97_nPdu_DisblRoutGroup</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>10778</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when SoAd_IfTransmit() is called for PduRoute that references
    PduRouteDest which belongs to inactive RoutingGroup, SoAd shall skip the transmission and
    return E_NOT_OK, in case all other PduRouteDest of that PduRoute belong to inactive
    RoutingGroups too.
    Test is performed on a UDP socket connection with nPDU feature enabled.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket with nPDU feature enabled to ONLINE state.
    02: Call SoAd_IfTransmit() to initiate transmission of the first PDU.
    03: Call SoAd_DisableRouting() to disable TX routing group.
    04: Call SoAd_IfTransmit() to initiate transmission of the second PDU.
    05: VP(): Verify that SoAd_IfTransmit() returns E_NOT_OK, since referenced routing group was
        disabled.
    06: Call SoAd_MainFunction() as many times as configured in SoAdTxUdpTriggerTimeout, to trigger
        TcpIp_UdpTransmit() call.
    07: Verify that TcpIp_UdpTransmit() and
        PduR_SoAdIfTxConfirmation() are called to transmit only first PDU.
    08: VP(): Verify that only first PDU is transmitted, i.e. second PDU is discarded.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00560</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1506</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_98_IfTransmit_OngoingTx</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>10910</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that SoAd_IfTransmit() shall skip the transmit request and return
    E_NOT_OK if there is already an IF or TP transmission ongoing on the related socket connection.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring TCP sockets with 2 PduRouts attached to ONLINE state.
    02: Call SoAd_TpTransmit() to request a transmission of the first PDU (TP). Transmission is
        ongoing until the call to SoAd_MainFunction().
    03: Call SoAd_IfTransmit() to request a transmission of the second PDU (IF).
    04: VP(): Verify that SoAd skips transmission request and returns E_NOT_OK.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00653</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>260</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1507</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_99_nPduTimeout_Inv</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>10993</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies that when a PDU with TriggerMode set to TRIGGER_NEVER without a specific
    SoAdTxUdpTriggerTimeout set (SOAD_INVALID_TIMERVAL) is transmitted SoAd shall set the
    nPduUdpTxBuffer specific timer to the value of the connection SoAdSocketUdpTriggerTimeout
    if it is configured (&lt;&gt;SOAD_INVALID_TIMERVAL) and lower than the current nPduUdpTxBuffer
    specific timer value.
  
Test Object: 
    SoAd_IfTransmit().
  
Test Precondition: 
  
Test Execution: 
    01: Bring the UDP socket with nPDU feature enabled to ONLINE state.
    02: Call SoAd_IfTransmit() to transmit PDU with SoAdTxUdpTriggerTimeout set.
    03: VP(): Verify that SoAd_IfTransmit() returns E_OK.
    04: VP(): Verify that TcpIp_UdpTransmit() is not called, i.e. PDU is buffered.
    05: Call SoAd_IfTransmit() to transmit PDU with SoAdTxUdpTriggerTimeout not set
        (SOAD_INVALID_TIMERVAL).
    06: VP(): Verify that SoAd_IfTransmit() returns E_OK.
    07: VP(): Verify that TcpIp_UdpTransmit() is not called, i.e. PDU is buffered.
    08: Call SoAd_MainFunction() one less times then is configured in SoAdSocketUdpTriggerTimeout
        of the used socket connection.
    09: VP(): Verify that TcpIp_UdpTransmit() is not called
    10: Call SoAd_MainFunction() one more time.
    11: VP(): Verify that TcpIp_UdpTransmit() is called.
    12: VP(): Verify that PduR_SoAdIfTxConfirmation() is called for both PDUs.
    13: VP(): Verify that both PDUs are transmitted with the correct header and payload.
        This way it is verified that both PDUs are transmitted after timeout configured in
        socket connection expired (SoAdSocketUdpTriggerTimeout), which is smaller than the one
        configured in PDU (SoAdTxUdpTriggerTimeout).
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.IfTransmit_noSoAdTxUdpTriggerTimeout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>679</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1508</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_01_nPduUdpTx_Last_Is_Best</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>11129</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      This test verifies that if all the PDUs of a socket connection are configured
    with SoAdTxPduCollectionSemantics set to SOAD_COLLECT_LAST_IS_BEST, the
    transmission request shall be stored. If more PDUs have the same ID, only the last one
    shall be stored. When SoAd needs to provide the payload,
    Up_[SoAd][If]TriggerTransmit shall be called to retrieve it.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket with nPDU feature enabled to ONLINE state.
    02: Call SoAd_IfTransmit() to transmit first PDU with SoAdTxUdpTriggerTimeout set to 20.
    03: Call SoAd_IfTransmit() to transmit second PDU with SoAdTxUdpTriggerTimeout set to 10.
    04: Call SoAd_IfTransmit() to transmit third PDU with SoAdTxUdpTriggerTimeout set to 20.
    04: Call SoAd_MainFunction() one time less then is configured in SoAdTxUdpTriggerTimeout
        of the second PDU (9).
    05: Verify that TcpIp_UdpTransmit() is not called.
    06: Call SoAd_MainFunction() one more time.
    07: VP:(SoAd.SWS_SoAd_00747, SoAd.SWS_SoAd_00735,
            SoAd.EB.PbVariantSupport.SoAdTxPduCollectionSemantics):
        Verify that PduR_SoAdIfTriggerTransmit() was called twice(for second and third PDU).
    08: Verify that TcpIp_UdpTransmit() was called to transmit both PDUs.
    09: VP:(SoAd.SWS_SoAd_00747, SoAd.SWS_SoAd_00735,
            SoAd.EB.TcpIpUdpTransmitDataPtr2NullPtr):
        Verify that transmitted data is the expected one.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00747</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>360</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00735</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>348</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00736</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>349</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.TcpIpUdpTransmitDataPtr2NullPtr</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>687</internalId></provcov>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00160</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>338</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdTxPduCollectionSemantics</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>694</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1509</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_01_nPduUdpTx_Last_Is_Best_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>11281</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if all the PDUs of a socket connection are configured
    with SoAdTxPduCollectionSemantics set to SOAD_COLLECT_LAST_IS_BEST, the
    transmission request shall be stored. If more PDUs have the same ID, only the last one
    shall be stored with the latest PDU length.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket with nPDU feature enabled to ONLINE state.
    02: Call SoAd_IfTransmit() to transmit PDU with SoAdTxPduId=26, length EBTEST_PDULENGTH.
    03: Call SoAd_IfTransmit() to transmit PDU with SoAdTxPduId=29.
    04: Call SoAd_IfTransmit() to transmit PDU with SoAdTxPduId=26, length 2 * EBTEST_PDULENGTH.
    05: Call SoAd_MainFunction() one time less then is configured in SoAdTxUdpTriggerTimeout
        of the second PDU (9).
    06: VP:():
        Verify that TcpIp_UdpTransmit() is not called.
    07: Call SoAd_MainFunction() one more time.
    08: VP:():
        Verify that TcpIp_UdpTransmit() was called with the expected length.
    09: VP:():
        Verify that transmitted data is the expected one.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00747</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>360</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00735</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>348</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00736</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>349</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1510</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_02_nPduUdpTx_Last_Is_Best_ALWAYS</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>11424</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      This test verifies that if all the PDUs of a socket connection are configured
    with SoAdTxPduCollectionSemantics set to SOAD_COLLECT_LAST_IS_BEST, the
    transmission request shall be stored. If more PDUs have the same ID, only the last one
    shall be stored. When SoAd needs to provide the payload,
    Up_[SoAd][If]TriggerTransmit shall be called to retrieve it.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket with nPDU feature enabled to ONLINE state.
    02: Call SoAd_IfTransmit() to transmit first PDU with SoAdTxUdpTriggerTimeout set to 20.
    03: Call SoAd_IfTransmit() to transmit second PDU with SoAdTxUdpTriggerTimeout set to 10.
    04: Call SoAd_IfTransmit() to transmit third PDU with SoAdTxUdpTriggerTimeout set to 20.
    04: Call SoAd_MainFunction() one time less then is configured in SoAdTxUdpTriggerTimeout
        of the second PDU (9).
    05: Verify that TcpIp_UdpTransmit() is not called.
    06: Call SoAd_MainFunction() one more time.
    07: VP:(SoAd.SWS_SoAd_00747, SoAd.SWS_SoAd_00735):
        Verify that PduR_SoAdIfTriggerTransmit() was called twice(for second and third PDU).
    08: Verify that TcpIp_UdpTransmit() was called to transmit both PDUs.
    09: VP:(SoAd.SWS_SoAd_00747, SoAd.SWS_SoAd_00735):
        Verify that transmitted data is the expected one.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00747</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>360</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00735</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>348</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1511</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_02_100_ReleaseRemoteAddr_TCP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>11541</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if SoAd_ReleaseRemoteAddr() is called using a Tcp socket connection, nothing will
    happen.
  
Test Object: 
    SoAd_ReleaseRemoteAddr().
  
Test Precondition: 
    SoAd module is initialized.
    TCP socket connection is used.
  
Test Execution: 
    01: Call SoAd_SetRemoteAddr() to update the configured remote address.
    02: Call SoAd_ReleaseRemoteAddr() using a TCP socket.
    03: Call SoAd_GetRemoteAddr() to retrieve the remote address.
    04: VP(SoAd.ASR43.SWS_SoAd_00746): Verify that the set remote address is
        reset to the configured one.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00746</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>359</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1512</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_101_UlNotWaitingForTxConfirmation</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>11619</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if transmit is in progress and UL doesn't wait for confirmation or
    another confirmation occurs the new confirmation will be discarded.
  
Test Object: 
    SoAd_IfTransmit().
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
  
Test Execution: 
    01: Bring the socket connection to ONLINE state.
    02: Call SoAd_IfTransmit(),TcpIp_TcpTransmit() will call
        SoAd_TxConfirmation().
    03: VP(SoAd.EB.UnexpectedTxConfirmation): Verify that TcpIp_TcpTransmit was called.
	    RetVal E_NOT_OK.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UnexpectedTxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>570</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1513</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_03_nPduUdpTx_Last_Is_Best_Remaining_Length</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>11718</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      This test verifies that if all the PDUs of a socket connection are configured
    with SoAdTxPduCollectionSemantics set to SOAD_COLLECT_LAST_IS_BEST, the
    transmission request shall be stored. If SoAd_CopyTxData() is called with BufLen smaller
    than needed, the frame processing shall stop.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Set TcpIp_UdpTransmit() stub to call SoAd_CopyTxData() with RemainingLength less
        than the bytes needed for the message.
    02: Bring UDP socket with nPDU feature enabled to ONLINE state.
    03: Call SoAd_IfTransmit() to transmit first PDU with SoAdTxUdpTriggerTimeout set to 20.
    04: Call SoAd_IfTransmit() to transmit second PDU with SoAdTxUdpTriggerTimeout set to 10.
    05: Call SoAd_IfTransmit() to transmit third PDU with SoAdTxUdpTriggerTimeout set to 20.
    06: Call SoAd_MainFunction() one time less then is configured in SoAdTxUdpTriggerTimeout
        of the second PDU (9).
    07: Verify that TcpIp_UdpTransmit() is not called.
    08: Call SoAd_MainFunction() one more time.
    09: VP:(SoAd.SWS_SoAd_00747): Verify that PduR_SoAdIfTriggerTransmit() was called.
    10: VP:(SoAd.SWS_SoAd_00197): Verify Det was called since, since not enough data provided
        by upper layer.
    11: VP: Verify that TcpIp_UdpTransmit() was called.

  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00747</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>360</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00197</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1514</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_04_nPduUdpTx_NotEnoughBytes</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>11858</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if all the PDUs of a socket connection are configured
    with SoAdTxPduCollectionSemantics set to SOAD_COLLECT_LAST_IS_BEST, the
    transmission request shall be stored. If SoAd_CopyTxData() is called with less bytes than
    needed, SoAd_IfTransmit() shall return E_NOT_OK.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket with nPDU feature enabled to ONLINE state.
    02: Call SoAd_IfTransmit() to transmit first PDU on TxPduId = 20.
    03: Call SoAd_IfTransmit() to transmit second PDU on TxPduId = 30.
    04: VP:(SoAd.ASR43.SWS_SoAd_00734): Verify that E_NOT_OK was returned by second
        SoAd_IfTransmit() because there were not enough bytes available to SoAd_CopyTxData().
        Verify that SoAd has raised Det error SOAD_E_TRIGGERTXBUF.

  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00734</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>347</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1515</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_102_MetaData_TxIf</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>11956</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if EcuC_GetMetaDataSoConId() returns the correct SoConId,
    TcpIp_UdpTransmit() shall be called to transmit the frame.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Open the Udp socket connection.
    02: Set EcuC_GetMetaDataSoConId() to return the MetaData configured SoConId.
    03: Call SoAd_IfTransmit() on the MetaData configured PduDest.
    04: VP(): Verify that EcuC_GetMetaDataSoConId() was called.
    05: VP(): verify that TcpIp_UdpTransmit() was called to transmit the frame.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Metadata.Udp.If.Tx.SoCon</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1060</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1516</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_103_MetaData_TxIf_DiffSoConId</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>12072</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if EcuC_GetMetaDataSoConId() returns the incorrect SoConId,
    TcpIp_UdpTransmit() shall not be called and the frame shall be discarded.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Open the Udp socket connection.
    02: Set EcuC_GetMetaDataSoConId() to return a different SoConId than the MetaData configured
        one.
    03: Call SoAd_IfTransmit() on the MetaData configured PduDest.
    04: VP(): Verify that E_NOT_OK was returned.
    05: VP(): Verify that EcuC_GetMetaDataSoConId() was called.
    06: VP(): Verify that TcpIp_UdpTransmit() was not called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Metadata.If.Tx.IncorrectSoConId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1069</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.Metadata.Tx.SoConId.Invalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1032</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1517</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_104_MetaData_TxTP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>12170</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if EcuC_GetMetaDataSoConId() returns the correct SoConId,
    TcpIp_TcpTransmit() shall be called to transmit the frame.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Open all 3 TCP socket connections.
    02: Set EcuC_GetMetaDataSoConId() to return the second socket connection.
    03: Call SoAd_TpTransmit().
    04: VP(): Verify that EcuC_GetMetaDataSoConId() was called.
    05: VP(): Verify that the accepted socket that was used to open the second socket connection
        was used to call TcpIp_TcpTransmit().
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Metadata.Tcp.Tp.Tx.SoConGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1067</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1518</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_165_MetaData_Tcp_SoCon_TxTP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>12327</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if EcuC_GetMetaDataSoConId() returns the correct SoConId,
    TcpIp_TcpTransmit() shall be called to transmit the frame.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Open TCP socket connections.
    02: Set EcuC_GetMetaDataSoConId() to return the second socket connection.
    03: Call SoAd_TpTransmit().
    04: VP(SoAd.dsn.Metadata.Tcp.Tp.Tx.SoCon): Verify that EcuC_GetMetaDataSoConId() was called.
    05: VP(SoAd.dsn.Metadata.Tcp.Tp.Tx.SoCon):
        Verify that the correct socket was used to call TcpIp_TcpTransmit().
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Metadata.Tcp.Tp.Tx.SoCon</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1063</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1519</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_105_MetaData_TxTP_DiffSoConId</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>12440</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if EcuC_GetMetaDataSoConId() returns the incorrect SoConId,
    TcpIp_UdpTransmit() shall not be called and the frame shall be discarded.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Open the Udp socket connection.
    02: Set EcuC_GetMetaDataSoConId() to return a different SoConId than the MetaData configured
        one.
    03: Call SoAd_TpTransmit() on the MetaData configured PduDest.
    04: VP(): Verify that EcuC_GetMetaDataSoConId() was called.
    05: VP(SoAd.dsn.Metadata.Tx.SoConId.Invalid): Verify that Det was called with correct Parameters
    06: VP(): Verify that TcpIp_UdpTransmit() was not called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Metadata.Tp.Tx_IncorrectSoConId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1068</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.Metadata.Tx.SoConId.Invalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1032</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1520</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_106_MetaData_Rx</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>12541</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_RxIndication() is called to receive a frame
    using a socket connection that is configured with metadata, EcuC_SetMetaDataSoConId()
    shall be called with SoConIdPtr parameter set to correct SoAd SoConId.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Open the Udp socket connection.
    02: Call SoAd_RxIndication() to receive the frame.
    03: VP(): Verify that EcuC_SetMetaDataSoConId() was called with correct SoConId.
    04: VP(): Verify that PduR_SoAdIfRxIndication() was called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Metadata.Udp.If.Rx.SoCon</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1052</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1521</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_108_TxUdpTrigToutLtMainFunctionPeriod</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>12627</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   Test case verifies that when a PDU with TriggerMode set to TRIGGER_NEVER, with a
   SoAdTxUdpTriggerTimeout smaller then SoAdMainFunctionPeriod, behaves like a
   TRIGGER_ALWAYS.
  
Test Object: 
  
Test Precondition: 
    - SoAdTxUdpTriggerTimeout &lt; SoAdMainFunctionPeriod.
  
Test Execution: 
    01: Bring UDP socket to ONLINE state.
    02: Call SoAd_IfTransmit() to transmit PDU with TriggerMode set to TRIGGER_NEVER.
    03: VP(SoAd.EB.IfTransmit_TxUdpTrigTout_lt_MainFunctionPeriod): Verify that the behaviour is
        simillar with a PduRouteDest set to TRIGGER_ALWAYS (TcpIp_UdpTransmit() is called).
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.IfTransmit_TxUdpTrigTout_lt_MainFunctionPeriod</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>680</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1522</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_109_RxInd_NoHeader_CopyRxDataBusy</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>12725</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_RxIndication() is passed a frame without a header and
    PduR_SoAdTpCopyRxData() signals BUFREQ_E_NOT_OK no data is transmitted.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Open the Tcp socket connection.
    02: Configure the return values of PduR_SoAdTpCopyRxData().
    03: Call SoAd_RxIndication() to receive the frame.
    04: VP(): Verify that PduR_SoAdTpCopyRxData() was called twice.
    05: Call SoAd_MainFunction().
    06: VP(): Verify that PduR_SoAdTpRxIndication() with
        E_NOT_OK and TcpIp_Close() were called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.Up_TpCopyRxData_BUFREQ_E_BUSY_no_available_buffer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>670</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1523</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_110_MetaData_TxIf_DiffSoConId</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>12825</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if EcuC_GetMetaDataSoConId() returns E_NOT_OK,
    TcpIp_UdpTransmit() shall not be called and the frame shall be discarded.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Open the Udp socket connection.
    02: Set EcuC_GetMetaDataSoConId() to return E_NOT_OK
    03: Call SoAd_IfTransmit() on the MetaData configured PduDest.
    04: VP(): Verify that E_NOT_OK was returned.
    05: VP(): Verify that EcuC_GetMetaDataSoConId() was called.
    06: VP(): Verify that TcpIp_UdpTransmit() was not called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Metadata.If.Tx.IncorrectSoConId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1069</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1524</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_111_MetaData_TxIf_MultipleSoCon</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>12928</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that, in a configuration with more than one socket connections in a group
    and metadata is used, during SoAd_IfTransmit, if EcuC_GetMetaDataSoConId() returns the
    correct SoConId, TcpIp_UdpTransmit() shall be called to transmit the frame.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Open all 3 socket connections of the SoConGroup.
    02: Set EcuC_GetMetaDataSoConId() to return the SoConId of the second SoCon.
    03: Call SoAd_IfTransmit().
    04: VP(): Verify that EcuC_GetMetaDataSoConId() was called.
    05: VP(): Verify that TcpIp_UdpTransmit() was called.
    06: VP(): Verify that TcpIp_UdpTransmit() was called with second SoCon configured remote address.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Metadata.Udp.If.Tx.SoConGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1064</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1525</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_112_MetaData_RxIf_MultipleSoCon</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>13075</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that, in a configuration with more than one socket connections in a group
    where metadata is used, if SoAd_RxIndication() is called to receive a frame,
    EcuC_SetMetaDataSoConId() shall be called with SoConIdPtr set to correct SoAd SoConId.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Open all 3 socket connections of the SoConGroup.
    02: Call SoAd_RxIndication() with the remote address of the second SoCon.
    03: VP(): Verify that EcuC_SetMetaDataSoConId() was called with correct SoConId.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Metadata.Udp.If.Rx.SoConGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1056</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1526</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_113_MetaData_TxIf_SoConGroup</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>13179</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that, in a configuration where PduRouteDest is referring to the
    socket connection group and metadata is used,
    during SoAd_IfTransmit, if EcuC_GetMetaDataSoConId() returns the correct SoConId,
    TcpIp_UdpTransmit() shall be called to transmit the frame.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Open the socket connection.
    02: Set EcuC_GetMetaDataSoConId() to return the SoConId of the opened SoCon.
    03: Call SoAd_IfTransmit().
    04: VP(): Verify that EcuC_GetMetaDataSoConId() was called.
    05: VP(): Verify that TcpIp_UdpTransmit() was called.
    06: VP(): Verify that TcpIp_UdpTransmit() was called with opened SoCon's
        configured remote address.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Metadata.Udp.If.Tx.SoConGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1064</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1527</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_114_MetaData_RxIf_SoConGroup</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>13315</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that, in a configuration where PduRouteDest is referring to the
    socket connection group and metadata is used, if SoAd_RxIndication() is called to receive a
    frame, EcuC_SetMetaDataSoConId() shall be called with SoConIdPtr set to correct SoAd SoConId.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Open the socket connection.
    02: Call SoAd_RxIndication() with the remote address of the opened SoCon.
    03: VP(): Verify that EcuC_SetMetaDataSoConId() was called with correct SoConId.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Metadata.Udp.If.Rx.SoConGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1056</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1528</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_115_MetaData_TxIf_RouteDest</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>13411</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that, in a configuration where there are more than one configured
    PduRouteDest and metadata is used, during SoAd_IfTransmit, if EcuC_GetMetaDataSoConId()
    returns the correct SoConId, TcpIp_UdpTransmit() shall be called to transmit the frame.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Open both socket connections that are referred by the PduRouteDest.
    02: Set EcuC_GetMetaDataSoConId() to return the second configured SoCon.
    03: Call SoAd_IfTransmit() on the MetaData configured PduDest.
    04: VP(): Verify that EcuC_GetMetaDataSoConId() was called.
    05: VP(): Verify that TcpIp_UdpTransmit() was called to transmit the frame.
    06: VP(): Verify that TcpIp_UdpTransmit() was called with the configured remote address of
        the second SoCon.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Metadata.Udp.If.Tx.SoCon</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1060</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1529</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_116_MetaData_TxTP_MultipleSoCon</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>13559</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that, in a configuration with more than one socket connections in a group
    and metadata is used, during SoAd_IfTransmit, if EcuC_GetMetaDataSoConId() returns the
    correct SoConId, TcpIp_UdpTransmit() shall be called to transmit the frame.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Open all 3 socket connections of the SoConGroup.
    02: Set EcuC_GetMetaDataSoConId() to return the SoConId of the second SoCon.
    03: Call SoAd_TpTransmit().
    04: VP(): Verify that EcuC_GetMetaDataSoConId() was called.
    05: VP(): Verify that TcpIp_UdpTransmit() was called.
    06: VP(): Verify that TcpIp_UdpTransmit() was called with second SoCon configured remote address.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Metadata.Udp.Tp.Tx.SoConGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1065</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1530</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_166_MetaData_TxTP_SoCon</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>13692</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that, if metadata is used in a socket connection group, during
    SoAd_IfTransmit, if EcuC_GetMetaDataSoConId() returns the correct SoConId, TcpIp_UdpTransmit()
    shall be called to transmit the frame.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Open socket connection.
    02: Set EcuC_GetMetaDataSoConId() to return the SoConId.
    03: Call SoAd_TpTransmit().
    04: VP(SoAd.dsn.Metadata.Udp.Tp.Tx.SoCon): Verify that EcuC_GetMetaDataSoConId() was called.
    05: VP(): Verify that TcpIp_UdpTransmit() was called.
    06: VP(): Verify that TcpIp_UdpTransmit() was called with configured remote address.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Metadata.Udp.Tp.Tx.SoCon</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1061</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1531</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_167_MetaData_Tcp_TxIf_MultipleSoCon</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>13811</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that, in a configuration with more than one socket connections in a group
    and metadata is used, during SoAd_IfTransmit, if EcuC_GetMetaDataSoConId() returns the
    correct SoConId, TcpIp_UdpTransmit() shall be called to transmit the frame.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Open socket connection.
    02: Set EcuC_GetMetaDataSoConId() to return the SoConId.
    03: Call SoAd_IfTransmit().
    04: VP(SoAd.dsn.Metadata.Tcp.If.Tx.SoConGroup):
        Verify that EcuC_GetMetaDataSoConId() was called.
    05: VP(): Verify that TcpIp_UdpTransmit() was called.
    06: VP(): Verify that TcpIp_UdpTransmit() was called with configured remote address.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Metadata.Tcp.If.Tx.SoConGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1066</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1532</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_168_MetaData_Tcp_TxIf_SoCon</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>13938</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that, if metadata is used in a socket connection group, during
    SoAd_IfTransmit, if EcuC_GetMetaDataSoConId() returns the correct SoConId, TcpIp_UdpTransmit()
    shall be called to transmit the frame.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Open socket connection.
    02: Set EcuC_GetMetaDataSoConId() to return the SoConId.
    03: Call SoAd_IfTransmit().
    04: VP(SoAd.dsn.Metadata.Tcp.If.Tx.SoCon): Verify that EcuC_GetMetaDataSoConId() was called.
    05: VP(): Verify that TcpIp_UdpTransmit() was called.
    06: VP(): Verify that TcpIp_UdpTransmit() was called with configured remote address.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Metadata.Tcp.If.Tx.SoCon</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1062</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1533</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_117_MetaData_RxTP_MultipleSoCon</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>14064</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_RxIndication() is called to receive a frame
    using a socket connection that is configured with metadata, EcuC_SetMetaDataSoConId()
    shall be called with SoConIdPtr parameter set to correct SoAd SoConId.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Open all 3 socket connections of the SoConGroup.
    02: Call SoAd_RxIndication() to receive the frame on second SoCon.
    03: VP(): Verify that EcuC_SetMetaDataSoConId() was called with correct SoConId.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Metadata.Udp.Tp.Rx.SoConGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1057</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1534</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_169_MetaData_RxTP_SoCon</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>14180</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_RxIndication() is called to receive a frame
    using a socket connection that is configured with metadata, EcuC_SetMetaDataSoConId()
    shall be called with SoConIdPtr parameter set to correct SoAd SoConId.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Open socket connection.
    02: Call SoAd_RxIndication() to receive the frame.
    03: VP(SoAd.dsn.Metadata.Udp.Tp.Rx.SoCon):
        Verify that EcuC_SetMetaDataSoConId() was called with correct SoConId.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Metadata.Udp.Tp.Rx.SoCon</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1053</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1535</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_118_UDP_IF_Tx_nPDU_IPFrag</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>14281</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_IfTransmit() is called for a TRIGGER_ALWAYS PDU and multiple
    PDUs are stored in the nPDU buffer, TCP shall be able to retrieve the buffer with multiple
    calls to SoAd_CopyTxData().
  
Test Object: 
  
Test Precondition: 
   * UDP socket
   * nPDU feature enabled.
   * IF API
  
Test Execution: 
    01: Setup a TcpIp_UdpTransmit callout function to retrieve the PDUs with 3
        SoAd_CopyTxData() calls.
        1. call shall retrieve a part of the PDU from nPDU buffer.
        2. call shall retrieve the remaining part of the PDU from nPDU buffer and
        a part of the UL data pointer of SoAd_IfTransmit() call.
        3. call shall shall retrieve the remaining part of the
        UL data pointer of SoAd_IfTransmit() call.
    02: Call SoAd_IfTransmit() to put a TRIGGER_NEVER PDU into the nPDU buffer.
    03: Call SoAd_IfTransmit() to with a trigger TRIGGER_ALWAYS PDU to initiate transmission.
    04: VP() Verify that TcpIp_UdpTransmit() is called to send the nPDU buffer.
    05: VP(SoAd.SWS_SoAd_00543_UDP_IF_Tx_nPDU_IPFrag,
           SoAd.SWS_SoAd_00543_UDP_IF_Tx_IPFrag)
        Verify that both PDUs (+ header) are passed to the TcpIp even with multiple calls
        to SoAd_CopyTxData().
    06: Call SoAd_MainFunction() to finish the transmission.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00543_UDP_IF_Tx_nPDU_IPFrag</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>442</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00543_UDP_IF_Tx_IPFrag</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>444</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1536</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_119_PostBuild_Selectable_SoAdRxUpperLayerType</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>14423</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when SoAd_RxIndication() is called and SoAdRxUpperLayerType is changed
    to TP, PduR_SoAdTpStartOfReception is called.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket to ONLINE state.
    02: Call SoAd_RxIndication() with a datagram containing two PDUs, second of which is incomplete.
    03: VP(SoAd.EB.PbVariantSupport.SoAdRxUpperLayerType):
        Verify that PduR_SoAdTpStartOfReception is called when PduR_SoAdTpStartOfReception
        parameter was changed in this configuration from IF to TP
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdRxUpperLayerType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>727</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1537</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_120_PostBuild_Selectable_SocketMsgAcceptanceFilter</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>14497</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    if SoAdSocketMsgAcceptanceFilterEnabled is disabled SoAd will continue further processing
    of a frame received from address different than specified by SoAdSocketRemoteAddress
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring socket to ONLINE state.
    02: Call SoAd_RxIndication() with a frame containing two PDUs, first with a PDU length 0, and
        the second one with a length 8.
    03: VP(SoAd.EB.PbVariantSupport.SoAdSocketMsgAcceptanceFilterEnabled):
        Verify that upper layer [UL]_SoAdIfRxIndication() callback function is called
        twice, for the correct UL RxPduId.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdSocketMsgAcceptanceFilterEnabled</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>706</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1538</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_121_PostBuild_Selectable_RoutingGroupIsEnabledAtInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>14581</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies Post Build selectable for SoAdRoutingGroupIsEnabledAtInit
    Use same SoAdRoutingGroup as in test SoAd_ConTest_00_02_51_nPdu_UdpTxFails and verify that
    transmissions fails before SoAdRoutingGroup is enabled
  
Test Object: 
    SoAd_IfTransmit().
  
Test Precondition: 
  
Test Execution: 
    01: Try to transmit data on a socket connection with nPDU feature enabled and UdpRetry feature
        disabled when TcpIp_UdpTransmit() returns TCPIP_E_PHYS_ADDR_MISS.
    02: VP(SoAd.EB.PbVariantSupport.SoAdRoutingGroupIsEnabledAtInit)
        Verify that SoAd_IfTransmit returns E_NOT_OK
    03: Call SoAd_EnableRouting to enable routing group and try transmit data again
    04: VP(SoAd.EB.PbVariantSupport.SoAdRoutingGroupIsEnabledAtInit)
        Verify that SoAd_IfTransmit returns E_OK
    05: Call SoAd_MainFunction() as many times as configured in SoAdTxUdpTriggerTimeout, to trigger
        TcpIp_UdpTransmit() call.
    06: Verify that TcpIp_UdpTransmit() is called with proper parameters.
    07: VP(): Verify that data is discarded, i.e. not transmitted to TcpIp module.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdRoutingGroupIsEnabledAtInit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>729</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1539</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_122_PostBuild_Selectable_UdpStrictHeaderLenCheck</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>14701</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies Post Build selectable for SoAdSocketUdpStrictHeaderLenCheckEnabled
    Initialize SoAdSocketConnectionGroup from SoAd_ConTest_00_02_76_UdpStrictHeaderLenCheck with
    different variant and verify that SoAd forwarded the datagram to upper layer
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket with SoAdSocketUdpStrictHeaderLenCheckEnabled field disabled to
        ONLINE state.
    02: Call SoAd_RxIndication() with a datagram consisting two PDUs plus one padding byte
        (size of a datagram exceeds by one size of both PDUs written in a header length fields).
    03: VP(SoAd.EB.PbVariantSupport.SoAdSocketUdpStrictHeaderLenCheckEnabled):
        Verify that the complete datagram is forwarded to the upper layer.
    04: Call SoAd_RxIndication() with a datagram consisting two PDUs, but the second PDU is not
        complete  (size of a datagram is one less then a size of both PDUs written in a header
        length fields).
    05: VP(): Verify that the complete datagram is forwarded to the upper layer.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdSocketUdpStrictHeaderLenCheckEnabled</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>712</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdRxPduHeaderId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>723</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1540</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_123_PostBuild_Selectable_TxPduCollectionSemantics</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>14825</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies Post Build selectable for SoAdTxPduCollectionSemantics
    Use same SoAdPduRoute as in test SoAd_ConTest_00_02_01_nPduUdpTx_Last_Is_Best
    and verify that SoAd will transmit all PDUs individually
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket with nPDU feature enabled to ONLINE state.
    02: Call SoAd_IfTransmit() to transmit first PDU
    03: Call SoAd_IfTransmit() to transmit second PDU.
    04: VP(SoAd.EB.PbVariantSupport.SoAdTxPduCollectionSemantics)
        Check that TcpIp_UdpTransmit is called
    05: Call SoAd_IfTransmit() to transmit third PDU
    06: VP(SoAd.EB.PbVariantSupport.SoAdTxPduCollectionSemantics)
        Check that TcpIp_UdpTransmit is called
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdTxPduCollectionSemantics</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>694</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1541</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_124_IfTransmit_NullSduDataPtr_NoHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>14938</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case  verifies that on invocation of SoAd_IfTransmit() with SduDataPtr = NULL_PTR,
    SoAd shall call TcpIp_UdpTransmit() which shall trigger SoAd_CopyTxData().
    Up_[SoAd][If]TriggerTransmit() shall be called to retrieve the data from the UL to be
    transmitted.
  
Test Object: 
  
Test Precondition: 
    - Communication Protocol UDP
    - Header mode disabled
    - SoAdIfTriggerTransmit is set to true for upper layer (PduR)
  
Test Execution: 
    01: Set SduDataPtr of transmit PduInfo to NULL.
    02: Bring UDP socket to ONLINE state.
    03: Call SoAd_IfTransmit() with the SduDataPtr set to NULL.
    04: VP(SoAd.Dsn.Func0101.Tx.Udp.If.NoHeader, SWS_SoAd_00731):
        Verify that TcpIp_UdpTransmit() is called.
        Verify that &lt;Up&gt;_[SoAd][If]TriggerTransmit() is called to retrieve the PDU data from the
        upper layer.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00731</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>344</internalId></provcov>
        <provcov>
          <linksto>SoAd.Dsn.Func0101.Tx.Udp.If.NoHeader</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1071</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1542</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_125_IfTransmit_NullSduDataPtr_IPFrag</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>15028</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that on invocation of SoAd_IfTransmit() with SduDataPtr = NULL_PTR, during
    which IP segmentation occurs (BufLength of SoAd_CopyTxData() is smaller than SduLength of
    SoAd_IfTransmit()), SoAd_CopyTxData() shall raise Det error SOAD_E_TRIGGERTXBUF and  return
    BUFREQ_E_NOT_OK. As a result TcpIp_UdpTransmit() shall not return OK and SoAd_IfTransmit()
    shall return E_NOT_OK.
  
Test Object: 
  
Test Precondition: 
    - Communication Protocol UDP
    - SoAdIfTriggerTransmit is set to true for upper layer (PduR)
  
Test Execution: 
    01: Set TcpIp_UdpTransmit() stub to simulate IP segmentation - call SoAd_CopyTxData() with
        BufLength of SoAd_CopyTxData() smaller than TotalLength of TcpIp_UdpTransmit().
    02: Set SduDataPtr of transmit PduInfo to NULL.
    03: Bring UDP socket to ONLINE state.
    04: Call SoAd_IfTransmit() with the SduDataPtr set to NULL.
    05: VP(SoAd.Dsn.Func0101.Tx.Udp.If.Det.IPFrag):
        Verify that SoAd_IfTransmit() has returned E_NOT_OK and SoAd has raised Det error
        SOAD_E_TRIGGERTXBUF.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.Dsn.Func0101.Tx.Udp.If.Det.IPFrag</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1072</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1543</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_126_IfTransmit_NullPtr_SoAdIfTriggerT_FALSE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>15116</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that SoAd shall only consider PduInfoPtr-&gt;SduDataPtr set to NULL_PTR as valid
    if SoAdIfTriggerTransmit is set to TRUE for the respective upper layer.
  
Test Object: 
  
Test Precondition: 
    - Communication Protocol UDP
    - SoAdIfTriggerTransmit is set to false for upper layer (PduR)
  
Test Execution: 
    01: Set SduDataPtr of transmit PduInfo to NULL.
    02: Bring UDP socket to ONLINE state.
    03: Call SoAd_IfTransmit() with the SduDataPtr set to NULL.
    04: VP(SWS_SoAd_00732): Verify that SoAd_IfTransmit() returned E_NOT_OK.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00732</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>345</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1544</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_127_PostBuild_Selectable_SoAdSocketUdpListenOnly</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>15195</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies Post Build selectable for SoAdSocketUdpListenOnly
    Verify that SoAd_IfTransmit returns E_NOT_OK if SoAdSocketUdpListenOnly is true and
    E_OK if SoAdSocketUdpListenOnly is false
  
Test Object: 
  
Test Precondition: 
    - Communication Protocol UDP
  
Test Execution: 
    01: Call SoAd_IfTransmit() to transmit PDU.
    02: VP(SoAd.EB.PbVariantSupport.SoAdSocketUdpListenOnly):
        Verify that SoAd_IfTransmit() returns E_OK for SoAdSocketUdpListenOnly = false or
        E_NOT_OK for SoAdSocketUdpListenOnly = true
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdSocketUdpListenOnly</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>711</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1545</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_128_Tcp_SetUniqueRemoteAddr_Wildcard</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>15322</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that SetUniqueRemoteAddr sets the remote address of the Tcp SoCon configured
    with Wildcard and the SoCon state shall remain in RECONNECT.
  
Test Object: 
    SoAd_SetUniqueRemoteAddr()
  
Test Precondition: 
    * SoAd is initialized.
    * TCP socket connection with remote address set to wildcard is in RECONNECT state.
  
Test Execution: 
    01: VP(SoAd.SWS_SoAd_00686.1): Verify that SoCon is in state RECONNECT.
    02: Set remote address of TCP SoCon.
    03: VP(SoAd.SWS_SoAd_00676.4): Verify that remote address of SoCon is changed.
    04: VP(SoAd.SWS_SoAd_00686.1): Verify that SoCon remains in State RECONNECT.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00686.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>416</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00676.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>529</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1546</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_130_Udp_IfTransmit_Interrupt_SameUdpSocket</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>15435</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if a SoAd_IfTransmit() call transmits on a UDP socket
    and gets interrupted by another PDU for the same UDP socket but a different socket connection,
    then the interrupting PDU shall be stored to be transmitted later.
  
Test Object: 
    1 UDP socket
    2 PDUs share the same socket but different SoCons.
    nPDU buffer enabled
  
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket with nPDU feature enabled to ONLINE state for both socket connections and
        prepare a Tx PDU for each socket connection.
    02: Prepare TcpIp_UdpTransmit_Stub.Callout to simulate a SoAd_IfTransmit() preemption with
        a TRIGGER_NEVER PDU.
    03: Call SoAd_IfTransmit() to transmit a TRIGGER_ALWAYS PDU in the same context.
    04: VP: Verify that PDU was transmitted successfully.
    05: VP: Verify that SoAdGenUL_SoAdIfTxConfirmation() was called for the PDU in context of next
        main function.
    06: VP: Verify that TRIGGER_NEVER PDU was accepted.
    07: Call SoAd_MainFunction() until TRIGGER transmit timeout for the TRIGGER_NEVER PDU
        elapsed.
    08: VP: Verify that TRIGGER_NEVER PDU was transmitted and SoAdGenUL_SoAdIfTxConfirmation() was
        called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Tx.If.Interrupt.StoreToBuffer.OtherSoCon</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>976</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1547</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_131_Udp_IfTransmit_Interrupt_SameSoCon</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>15620</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if a SoAd_IfTransmit() call transmits on a UDP socket
    and gets interrupted by another PDU for the same UDP socket and same socket connection,
    then the interrupting PDU shall be stored in the remaining buffer to be transmitted later.
  
Test Object: 
    1 UDP socket
    2 PDUs share the same socket and same SoCons.
    nPDU buffer enabled
  
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket with nPDU feature enabled to ONLINE state for the socket connections and
        prepare a Tx 2 different PDU for the same socket connection. The second PDU shall fit in
        the remaining buffer.
    02: Prepare TcpIp_UdpTransmit_Stub.Callout to simulate a SoAd_IfTransmit() preemption with
        a TRIGGER_NEVER PDU.
    03: Call SoAd_IfTransmit() to transmit a TRIGGER_ALWAYS PDU in the same context.
    04: VP: Verify that PDU was transmitted successfully.
    05: VP: Verify that SoAdGenUL_SoAdIfTxConfirmation() was called for the PDU in context of next
        main function.
    06: VP: Verify that TRIGGER_NEVER PDU was accepted.
    07: Call SoAd_MainFunction() until TRIGGER transmit timeout for the TRIGGER_NEVER PDU
        elapsed.
    08: VP: Verify that TRIGGER_NEVER PDU was transmitted and SoAdGenUL_SoAdIfTxConfirmation() was
        called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Tx.If.Interrupt.StoreToBuffer.SameSoCon</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>975</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1548</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_132_Udp_IfTransmit_Interrupt_SamePdu</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>15796</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if a SoAd_IfTransmit() call transmits on a UDP socket
    and gets interrupted the same PDU, then the interrupting PDU shall be rejected.
    SoAd_IfTransmit() shall return E_NOT_OK.
  
Test Object: 
    1 UDP socket
    Same PDU interrupts itself.
    nPDU buffer enabled
  
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket with nPDU feature enabled to ONLINE state for the socket connection and
        prepare a Tx 2x the same PDU.
    02: Prepare TcpIp_UdpTransmit_Stub.Callout to simulate a SoAd_IfTransmit() preemption with
        a same PDU.
    03: Call SoAd_IfTransmit() to transmit a TRIGGER_ALWAYS PDU in the same context.
    04: VP: Verify that first PDU was transmitted successfully.
    05: VP: Verify that SoAdGenUL_SoAdIfTxConfirmation() was called for the PDU in context of next
        main function.
    06: VP: Verify that second PDU was rejected.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Udp.Tx.If.SamePdu.NotOK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1028</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1549</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_133_Udp_IfTransmit_Interrupt_NullPtr</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>15936</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if a SoAd_IfTransmit() call transmits on a UDP socket
    and gets interrupted by another PDU with NullPtr for the same SoCon and last is best is not
    configured, then SoAd_IfTransmit() shall return E_NOT_OK.
  
Test Object: 
    1 UDP socket
    1 TRIGGER_ALWAYS PDU
    1 TRIGGER_NEVER PDU for same SoCon
    1 TRIGGER_NEVER PDU for different SoCon
    nPDU buffer enabled
  
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket with nPDU feature enabled to ONLINE state for both socket connections and
        prepare a Tx PDU for each socket connection.
    02: Prepare TcpIp_UdpTransmit_Stub.Callout to simulate a SoAd_IfTransmit() preemption with
        a TRIGGER_NEVER PDU for same SoCon.
    03: Call SoAd_IfTransmit() to transmit a TRIGGER_ALWAYS PDU in the same context.
    04: VP: Verify that PDU was transmitted successfully.
    05: VP: Verify that SoAdGenUL_SoAdIfTxConfirmation() was called for the PDU in context of next
        main function.
    06: VP: Verify that TRIGGER_NEVER PDU was rejected.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Udp.Tx.If.Interrupt_NullPtr.NotOK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1029</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1550</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_134_Udp_IfTransmit_Interrupt_NullPtr</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>16072</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if a SoAd_IfTransmit() call transmits on a UDP socket
    and gets interrupted by another PDU with NullPtr for the different SoCon and last is best is not
    configured, then SoAd_IfTransmit() shall return E_NOT_OK.
  
Test Object: 
    1 UDP socket
    1 TRIGGER_ALWAYS PDU
    1 TRIGGER_NEVER PDU for different SoCon
    nPDU buffer enabled
  
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket with nPDU feature enabled to ONLINE state for both socket connections and
        prepare a Tx PDU for each socket connection.
    02: Prepare TcpIp_UdpTransmit_Stub.Callout to simulate a SoAd_IfTransmit() preemption with
        a TRIGGER_NEVER PDU for same SoCon.
    03: Call SoAd_IfTransmit() to transmit a TRIGGER_ALWAYS PDU in the same context.
    04: VP: Verify that PDU was transmitted successfully.
    05: VP: Verify that SoAdGenUL_SoAdIfTxConfirmation() was called for the PDU in context of next
        main function.
    06: VP: Verify that TRIGGER_NEVER PDU was rejected.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Udp.Tx.If.Interrupt_NullPtr.NotOK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1029</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1551</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_135_Udp_IfTransmit_NoSduLength</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>16215</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if SoAd_IfTransmit() is called with SduLength = 0,
    then SoAd_IfTransmit() shall return E_NOT_OK.
  
Test Object: 
    1 UDP socket
    1 UDP PDU
  
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket with nPDU feature enabled to ONLINE state for both socket connections and
        prepare a Tx PDU for each socket connection.
    02: Prepare TcpIp_UdpTransmit_Stub.Callout to simulate a SoAd_IfTransmit() preemption with
        a TRIGGER_NEVER PDU for same SoCon.
    03: Call SoAd_IfTransmit() to transmit a TRIGGER_ALWAYS PDU in the same context.
    04: VP: Verify that PDU was transmitted successfully.
    05: VP: Verify that SoAdGenUL_SoAdIfTxConfirmation() was called for the PDU in context of next
        main function.
    06: VP: Verify that TRIGGER_NEVER PDU was rejected.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Udp.Tx.If.SduLengthNull.NotOK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1042</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1552</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_136_Udp_IfTransmit_Interrupt_OversizedPdu</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>16306</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if a SoAd_IfTransmit() call transmits on a UDP socket
    and gets interrupted, then the interrupting PDU shall be rejected if it does not fit into the
    shadow buffer.
    SoAd_IfTransmit() shall return E_NOT_OK.
  
Test Object: 
    1 UDP socket
    A PDU is interrupted by another PDU sharing the same SoCon
    nPDU buffer enabled
  
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket with nPDU feature enabled to ONLINE state for the socket connection.
    02: Prepare TcpIp_UdpTransmit_Stub.Callout to simulate a SoAd_IfTransmit() preemption.
    03: Call SoAd_IfTransmit() to transmit a TRIGGER_ALWAYS PDU in the same context.
    04: VP: Verify that first PDU was transmitted successfully.
    05: VP: Verify that SoAdGenUL_SoAdIfTxConfirmation() was called for the PDU in context of next
        main function.
    06: VP: Verify that second PDU was rejected, since it is to big and
        can not be stored in shadow buffer.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Udp.Tx.If.Interrupt_OversizedPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1030</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1553</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_137_Udp_IfTransmit_OversizedPdu</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>16444</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if a SoAd_IfTransmit() on a UDP socket is called with a PDU bigger than
    the buffer, the PDU still gets transmitted.
  
Test Object: 
    1 UDP socket
    Same PDU interrupts itself.
    nPDU buffer enabled
  
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket with nPDU feature enabled to ONLINE state for the socket connection.
    02: Call SoAd_IfTransmit() to transmit a PDU to big to be stored in the buffer which
        gets sent in the same context.
    03: VP: Verify that PDU was transmitted successfully.
    04: VP: Verify that SoAdGenUL_SoAdIfTxConfirmation() was called for the PDU in context of next
        main function.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Udp.Tx.If.OversizedPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1031</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1554</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_138_Udp_IfTx_MainFunction_Interrupt_IfTransmit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>16554</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if SoAd_IfTransmit() of a TRIGGER_ALWAYS PDU interrupts the
    transmission of TRIGGER_NEVER PDU during SoAd_MainFunction(), then the TRIGGER_ALWAYS PDU
    gets stored to be transmitted in next main function.
  
Test Object: 
    1 UDP socket
    A trigger never PDU for the same socket connection
    A trigger always PDU for the same socket connection
    nPDU buffer enabled
  
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket with nPDU feature enabled to ONLINE state for the socket connection.
    02: Call SoAd_IfTransmit() to transmit a TRIGGER_NEVER PDU in the same context.
    03: Call SoAd_MainFunction() until TRIGGER_NEVER timeout elapsed.
    04: VP: Verify that TRIGGER_NEVER was transmitted successfully while interrupting TRIGGER_ALWAYS
        PDU gets stored in SHADOW buffer.
    05: VP: Verify that SoAdGenUL_SoAdIfTxConfirmation() was called.
    06: Call SoAd_MainFunction()
    07: VP: Verify that TRIGGER_ALWAYS was transmitted successfully in context
        of SoAd_MainFunction()
    08: VP: Verify that SoAdGenUL_SoAdIfTxConfirmation() was called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Tx.If.Interrupt.StoreToBuffer.MainFuncContext</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>977</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1555</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_139_Udp_IfTx_MainFunction_Interrupt_IfTransmit2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>16728</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if SoAd_IfTransmit() of a TRIGGER_NEVER PDU interrupts the
    transmission of TRIGGER_NEVER PDU during SoAd_MainFunction(), then the TRIGGER_NEVER PDU
    gets stored to be transmitted later.
    Both PDUs belong to the same UDP SoConGroup but different SoCons.
  
Test Object: 
    1 UDP socket
    A trigger never PDU for the different socket connection
    A trigger always PDU for the different socket connection
    nPDU buffer enabled
  
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket with nPDU feature enabled to ONLINE state for the socket connection.
    02: Prepare stub to interrupt the TRIGGER_NEVER PDU transmission with another
        TRIGGER_NEVER PDU Tx request for the same UDP SoCOnGroup but different SoCon.
    03: Call SoAd_IfTransmit() to transmit a TRIGGER_NEVER PDU.
    04: Call SoAd_MainFunction() until TRIGGER_NEVER timeout elapsed.
    05: VP: Verify that TRIGGER_NEVER PDU was transmitted successfully while interrupting
        TRIGGER_NEVER PDU gets stored in buffer.
    06: VP: Verify that SoAdGenUL_SoAdIfTxConfirmation() was called.
    07: Call SoAd_MainFunction() until TRIGGER_NEVER timeout elapsed.
    08: VP: Verify that TRIGGER_NEVER PDU was transmitted successfully in context
        of SoAd_MainFunction()
    09: VP: Verify that SoAdGenUL_SoAdIfTxConfirmation() was called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Tx.If.Interrupt.StoreToBuffer.MainFuncContext</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>977</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1556</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_140_Udp_IfTransmit_MultiPdusInShadowBuffer</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>16917</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that multiple PDUs can be stored in the shadow buffer.
    All PDUs belong to the same SoCon.
  
Test Object: 
    1 UDP socket
    1 TRIGGER_NEVER PDU
    2 TRIGGER_AWLAYS PDUs for same SoCon.
    nPDU buffer enabled
  
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket with nPDU feature enabled to ONLINE state for the socket connection.
    02: Prepare TcpIp_UdpTransmit_Stub.Callout to simulate a SoAd_IfTransmit() preemption with
        a 2 TRIGGER_ALWAYS same PDUs.
    03: Call SoAd_IfTransmit() to transmit a TRIGGER_NEVER PDU.
    04: Call SoAd_MainFunction() until TRIGGER_NEVER timeout elapsed.
    05: VP: Verify that TRIGGER_NEVER PDU was transmitted successfully while both interrupting
        TRIGGER_ALWAYS PDU gets stored in shadow buffer.
    06: VP: Verify that SoAdGenUL_SoAdIfTxConfirmation() was called.
    07: Call SoAd_MainFunction()
    08: VP: Verify that both TRIGGER_ALWAYS PDU was transmitted successfully.
    09: VP: Verify that SoAdGenUL_SoAdIfTxConfirmation() was called for the PDU in context of next
        main function.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Tx.If.Interrupt.StoreToBuffer.MainFuncContext</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>977</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1557</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_141_Udp_IfTransmit_LastIsBest_ShadowBuffer_NotOk</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>17106</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if a SoAd_IfTransmit() call transmits on a UDP socket
    and gets interrupted for a LAST_IS_BEST PDU with for the same SoCon, Then the request gets
    rejected.
  
Test Object: 
    1 UDP socket
    2 LAST_IS_BEST PDUs for same SoCon.
    nPDU buffer enabled
  
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket with nPDU feature enabled to ONLINE state for the socket connection.
    02: Prepare TcpIp_UdpTransmit_Stub.Callout to simulate a SoAd_IfTransmit() preemption with
        a LAST_IS_BEST PDU for the same SoCOn.
    03: Call SoAd_IfTransmit() to transmit a LAST_IS_BEST PDU TRIGGER_NEVER.
    04: Call SoAd_MainFunction() until TRIGGER_NEVER timeout elapsed.
    05: VP: Verify that TRIGGER_NEVER PDU was transmitted successfully.
    06: VP: Verify that SoAdGenUL_SoAdIfTxConfirmation() was called.
    07: VP: Verify that interrupting LAST_IS_BEST PDU was rejected.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Tx.If.Interrupt.LastIsBest_NotOk</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>978</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1558</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_142_UdpAlive_Supervision_NextUdpAliveTimeout_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>17243</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if a Udp SoAdSocketUdpAliveSupervisionTimeout occurs, the next
    UdpAliveTimeout is evaluated correct for the remaining SoAdSocketUdpAliveSupervisionTimeouts.

    Order of UdpAliveTimeouts:
    T...Timeout in Mainfunction for this SoConId: 7U
    1...UdpAliveTimeout for lower SoConId: 6U
    2...UdpAliveTimeout for higher SoConId: 26U

    TimerBaseType: |----1----T----2----|
  
Test Object: 
    SoAdSocketUdpAliveSupervisionTimeout.
  
Test Precondition: 
    * UDP socket connection with remote IP address set to TCPIP_IPADDR_ANY.
    * Socket is in state RECONNECT.
  
Test Execution: 
    01: Set Timer to 235U
    02: Call SoAd_RxIndication() for SoConId 7U --&gt; UdpAliveTimeout = 244U
    03: Call SoAd_GetSoConMode() after remote address was overwritten.
    04: Call SoAd_RxIndication() for SoConId 26U --&gt; UdpAliveTimeout = 251U
    05: Call SoAd_GetSoConMode() after remote address was overwritten.
    06: Call SoAd_RxIndication() for SoConId 6U --&gt; UdpAliveTimeout = 234U
    07: Call SoAd_GetSoConMode() after remote address was overwritten.
    08: Set timer to 243U
    09: Call Mainfunction to increase timer one more time and trigger the timeout
    10: Call SoAd_GetSoConMode().
    11: VP(SoAd.SWS_SoAd_00695.a, SoAd.dsn.UdpTimeoutHandling):
        Verify that remote address for SoConId 7U was reset to the configured remote address.
    12: Set timer to 250U
    13: Call Mainfunction to increase timer one more time and trigger the timeout
    14: Call SoAd_GetSoConMode().
    15: VP(SoAd.SWS_SoAd_00695.a, SoAd.dsn.UdpTimeoutHandling):
        Verify that remote address for SoConId 26U was reset to the configured remote address.
    16: Set timer to 233U
    17: Call Mainfunction to increase timer one more time and trigger the timeout
    18: Call SoAd_GetSoConMode().
    19: VP(SoAd.SWS_SoAd_00695.a, SoAd.dsn.UdpTimeoutHandling):
        Verify that remote address for SoConId 6U was reset to the configured remote address.
    20: Reset Timer to 1U
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00695.a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>499</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.UdpTimeoutHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>970</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1559</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_143_UdpAlive_Supervision_NextUdpAliveTimeout_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>17393</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if a Udp SoAdSocketUdpAliveSupervisionTimeout occurs, the next
    UdpAliveTimeout is evaluated correct for the remaining SoAdSocketUdpAliveSupervisionTimeouts.

    Order of UdpAliveTimeouts:
    T...Timeout in Mainfunction for this SoConId: 7U
    1...UdpAliveTimeout for lower SoConId: 6U
    2...UdpAliveTimeout for higher SoConId: 26U

    TimerBaseType: |----2----1----T----|
  
Test Object: 
    SoAdSocketUdpAliveSupervisionTimeout.
  
Test Precondition: 
    * UDP socket connection with remote IP address set to TCPIP_IPADDR_ANY.
    * Socket is in state RECONNECT.
  
Test Execution: 
    01: Set Timer to 245U
    02: Call SoAd_RxIndication() for SoConId 7U --&gt; UdpAliveTimeout = 254U
    03: Call SoAd_GetSoConMode() after remote address was overwritten.
    04: Call SoAd_RxIndication() for SoConId 26U --&gt; UdpAliveTimeout = 6U
    05: Call SoAd_GetSoConMode() after remote address was overwritten.
    06: Call SoAd_RxIndication() for SoConId 6U --&gt; UdpAliveTimeout = 244U
    07: Call SoAd_GetSoConMode() after remote address was overwritten.
    08: Set timer to 253U
    09: Call Mainfunction to increase timer one more time and trigger the timeout
    10: Call SoAd_GetSoConMode().
    11: VP(SoAd.SWS_SoAd_00695.a, SoAd.dsn.UdpTimeoutHandling):
        Verify that remote address for SoConId 7U was reset to the configured remote address.
    12: Set timer to 5U
    13: Call Mainfunction to increase timer one more time and trigger the timeout
    14: Call SoAd_GetSoConMode().
    15: VP(SoAd.SWS_SoAd_00695.a, SoAd.dsn.UdpTimeoutHandling):
        Verify that remote address for SoConId 26U was reset to the configured remote address.
    16: Set timer to 243U
    17: Call Mainfunction to increase timer one more time and trigger the timeout
    18: Call SoAd_GetSoConMode().
    19: VP(SoAd.SWS_SoAd_00695.a, SoAd.dsn.UdpTimeoutHandling):
        Verify that remote address for SoConId 6U was reset to the configured remote address.
    20: Reset Timer to 1U
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00695.a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>499</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.UdpTimeoutHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>970</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1560</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_144_UdpAlive_Supervision_NextUdpAliveTimeout_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>17543</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if a Udp SoAdSocketUdpAliveSupervisionTimeout occurs, the next
    UdpAliveTimeout is evaluated correct for the remaining SoAdSocketUdpAliveSupervisionTimeouts.

    Order of UdpAliveTimeouts:
    T...Timeout in Mainfunction for this SoConId: 6U
    1...UdpAliveTimeout for lower SoConId: 7U
    2...UdpAliveTimeout for higher SoConId: 26U

    TimerBaseType: |----1----2----T----|
  
Test Object: 
    SoAdSocketUdpAliveSupervisionTimeout.
  
Test Precondition: 
    * UDP socket connection with remote IP address set to TCPIP_IPADDR_ANY.
    * Socket is in state RECONNECT.
  
Test Execution: 
    01: Set Timer to 1U
    02: Call SoAd_RxIndication() for SoConId 6U --&gt; UdpAliveTimeout = 255U
    03: Call SoAd_GetSoConMode() after remote address was overwritten.
    04: Set Timer to 254U
    05: Call SoAd_RxIndication() for SoConId 7U --&gt; UdpAliveTimeout = 8U
    06: Call SoAd_GetSoConMode() after remote address was overwritten.
    07: Call SoAd_RxIndication() for SoConId 26U --&gt; UdpAliveTimeout = 15U
    08: Call SoAd_GetSoConMode() after remote address was overwritten.
    09: Call Mainfunction to increase timer one more time and trigger the timeout
    10: Call SoAd_GetSoConMode().
    11: VP(SoAd.SWS_SoAd_00695.a, SoAd.dsn.UdpTimeoutHandling):
        Verify that remote address for SoConId 6U was reset to the configured remote address.
    12: Set timer to 7U
    13: Call Mainfunction to increase timer one more time and trigger the timeout
    14: Call SoAd_GetSoConMode().
    15: VP(SoAd.SWS_SoAd_00695.a, SoAd.dsn.UdpTimeoutHandling):
        Verify that remote address for SoConId 7U was reset to the configured remote address.
    16: Set timer to 14U
    17: Call Mainfunction to increase timer one more time and trigger the timeout
    18: Call SoAd_GetSoConMode().
    19: VP(SoAd.SWS_SoAd_00695.a, SoAd.dsn.UdpTimeoutHandling):
        Verify that remote address for SoConId 26U was reset to the configured remote address.
    20: Reset Timer to 1U
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00695.a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>499</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.UdpTimeoutHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>970</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1561</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_145_UdpAlive_Supervision_NextUdpAliveTimeout_4</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>17695</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if a Udp SoAdSocketUdpAliveSupervisionTimeout occurs, the next
    UdpAliveTimeout is evaluated correct for the remaining SoAdSocketUdpAliveSupervisionTimeouts.

    Order of UdpAliveTimeouts:
    T...Timeout in Mainfunction for this SoConId: 6U
    1...UdpAliveTimeout for lower SoConId: 7U
    2...UdpAliveTimeout for higher SoConId: 26U

    TimerBaseType: |----2----T----1----|
  
Test Object: 
    SoAdSocketUdpAliveSupervisionTimeout.
  
Test Precondition: 
    * UDP socket connection with remote IP address set to TCPIP_IPADDR_ANY.
    * Socket is in state RECONNECT.
  
Test Execution: 
    01: Set Timer to 245U
    02: Call SoAd_RxIndication() for SoConId 6U --&gt; UdpAliveTimeout = 244U
    03: Call SoAd_GetSoConMode() after remote address was overwritten.
    04: Set Timer to 243U
    05: Call SoAd_RxIndication() for SoConId 7U --&gt; UdpAliveTimeout = 252U
    06: Call SoAd_GetSoConMode() after remote address was overwritten.
    07: Call SoAd_RxIndication() for SoConId 26U --&gt; UdpAliveTimeout = 4U
    08: Call SoAd_GetSoConMode() after remote address was overwritten.
    09: Call Mainfunction to increase timer one more time and trigger the timeout
    10: Call SoAd_GetSoConMode().
    11: VP(SoAd.SWS_SoAd_00695.a, SoAd.dsn.UdpTimeoutHandling):
        Verify that remote address for SoConId 6U was reset to the configured remote address.
    12: Set timer to 251U
    13: Call Mainfunction to increase timer one more time and trigger the timeout
    14: Call SoAd_GetSoConMode().
    15: VP(SoAd.SWS_SoAd_00695.a, SoAd.dsn.UdpTimeoutHandling):
        Verify that remote address for SoConId 7U was reset to the configured remote address.
    16: Set timer to 3U
    17: Call Mainfunction to increase timer one more time and trigger the timeout
    18: Call SoAd_GetSoConMode().
    19: VP(SoAd.SWS_SoAd_00695.a, SoAd.dsn.UdpTimeoutHandling):
        Verify that remote address for SoConId 26U was reset to the configured remote address.
    20: Reset Timer to 1U
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00695.a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>499</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.UdpTimeoutHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>970</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1562</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_146_UdpAlive_Supervision_NextUdpAliveTimeout_5</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>17847</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if a Udp SoAdSocketUdpAliveSupervisionTimeout occurs, the next
    UdpAliveTimeout is evaluated correct for the remaining SoAdSocketUdpAliveSupervisionTimeouts.

    Order of UdpAliveTimeouts:
    T...Timeout in Mainfunction for this SoConId: 6U
    1...UdpAliveTimeout for lower SoConId: 7U
    2...UdpAliveTimeout for higher SoConId: 26U

    TimerBaseType: |----T----1----2----|
  
Test Object: 
    SoAdSocketUdpAliveSupervisionTimeout.
  
Test Precondition: 
    * UDP socket connection with remote IP address set to TCPIP_IPADDR_ANY.
    * Socket is in state RECONNECT.
  
Test Execution: 
    01: Set Timer to 235U
    02: Call SoAd_RxIndication() for SoConId 6U --&gt; UdpAliveTimeout = 234U
    03: Call SoAd_GetSoConMode() after remote address was overwritten.
    04: Set Timer to 233U
    05: Call SoAd_RxIndication() for SoConId 7U --&gt; UdpAliveTimeout = 242U
    06: Call SoAd_GetSoConMode() after remote address was overwritten.
    07: Call SoAd_RxIndication() for SoConId 26U --&gt; UdpAliveTimeout = 249U
    08: Call SoAd_GetSoConMode() after remote address was overwritten.
    09: Call Mainfunction to increase timer one more time and trigger the timeout
    10: Call SoAd_GetSoConMode().
    11: VP(SoAd.SWS_SoAd_00695.a, SoAd.dsn.UdpTimeoutHandling):
        Verify that remote address for SoConId 6U was reset to the configured remote address.
    12: Set timer to 241U
    13: Call Mainfunction to increase timer one more time and trigger the timeout
    14: Call SoAd_GetSoConMode().
    15: VP(SoAd.SWS_SoAd_00695.a, SoAd.dsn.UdpTimeoutHandling):
        Verify that remote address for SoConId 7U was reset to the configured remote address.
    16: Set timer to 248U
    17: Call Mainfunction to increase timer one more time and trigger the timeout
    18: Call SoAd_GetSoConMode().
    19: VP(SoAd.SWS_SoAd_00695.a, SoAd.dsn.UdpTimeoutHandling):
        Verify that remote address for SoConId 26U was reset to the configured remote address.
    20: Reset Timer to 1U
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00695.a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>499</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.UdpTimeoutHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>970</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1563</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_147_UdpAlive_Supervision_NextUdpAliveTimeout_6</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>17999</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if a Udp SoAdSocketUdpAliveSupervisionTimeout occurs, the next
    UdpAliveTimeout is evaluated correct for the remaining SoAdSocketUdpAliveSupervisionTimeouts.

    Order of UdpAliveTimeouts:
    T...Timeout in Mainfunction for this SoConId: 6U
    1...UdpAliveTimeout for lower SoConId: 7U
    2...UdpAliveTimeout for higher SoConId: 26U

    TimerBaseType: |----T----2----1----|
  
Test Object: 
    SoAdSocketUdpAliveSupervisionTimeout.
  
Test Precondition: 
    * UDP socket connection with remote IP address set to TCPIP_IPADDR_ANY.
    * Socket is in state RECONNECT.
  
Test Execution: 
    01: Set Timer to 235U
    02: Call SoAd_RxIndication() for SoConId 6U --&gt; UdpAliveTimeout = 234U
    03: Call SoAd_GetSoConMode() after remote address was overwritten.
    04: Set Timer to 220U
    05: Call SoAd_RxIndication() for SoConId 26U --&gt; UdpAliveTimeout = 236U
    06: Call SoAd_GetSoConMode() after remote address was overwritten.
    07: Set Timer to 233U
    08: Call SoAd_RxIndication() for SoConId 7U --&gt; UdpAliveTimeout = 242U
    09: Call SoAd_GetSoConMode() after remote address was overwritten.
    10: Call Mainfunction to increase timer one more time and trigger the timeout
    11: Call SoAd_GetSoConMode().
    12: VP(SoAd.SWS_SoAd_00695.a, SoAd.dsn.UdpTimeoutHandling):
        Verify that remote address for SoConId 6U was reset to the configured remote address.
    13: Set timer to 235U
    14: Call Mainfunction to increase timer one more time and trigger the timeout
    15: Call SoAd_GetSoConMode().
    16: VP(SoAd.SWS_SoAd_00695.a, SoAd.dsn.UdpTimeoutHandling):
        Verify that remote address for SoConId 26U was reset to the configured remote address.
    17: Set timer to 241U
    18: Call Mainfunction to increase timer one more time and trigger the timeout
    19: Call SoAd_GetSoConMode().
    20: VP(SoAd.SWS_SoAd_00695.a, SoAd.dsn.UdpTimeoutHandling):
        Verify that remote address for SoConId 7U was reset to the configured remote address.
    21: Reset Timer to 1U
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00695.a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>499</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.UdpTimeoutHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>970</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1564</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_148_UdpAlive_Supervision_NextUdpAliveTimeout_7</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>18154</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if a RxIndication occurs, the next
    UdpAliveTimeout is evaluated correct for the remaining SoAdSocketUdpAliveSupervisionTimeouts.

    Order of UdpAliveTimeouts:
    T...Current TimerBase
    1...UdpAliveTimeout for first RxIndication
    2...UdpAliveTimeout for second RxIndication

    TimerBaseType: |----1----2----T----|
  
Test Object: 
    SoAdSocketUdpAliveSupervisionTimeout.
  
Test Precondition: 
    * UDP socket connection with remote IP address set to TCPIP_IPADDR_ANY.
    * Socket is in state RECONNECT.
  
Test Execution: 
    01: Set Timer to 255U
    02: Call SoAd_RxIndication() for SoConId 7U --&gt; UdpAliveTimeout = 9U
    03: Call SoAd_GetSoConMode() after remote address was overwritten.
    04: Call SoAd_RxIndication() for SoConId 26U --&gt; UdpAliveTimeout = 16U
    05: Call SoAd_GetSoConMode() after remote address was overwritten.
    06: Set Timer to 8U
    07: Call Mainfunction to increase timer one more time and trigger the timeout
    08: Call SoAd_GetSoConMode().
    09: VP(SoAd.SWS_SoAd_00695.a, SoAd.dsn.UdpTimeoutHandling):
        Verify that remote address for SoConId 7U was reset to the configured remote address.
    10: Set Timer to 15U
    11: Call Mainfunction to increase timer one more time and trigger the timeout
    12: Call SoAd_GetSoConMode().
    13: VP(SoAd.SWS_SoAd_00695.a, SoAd.dsn.UdpTimeoutHandling):
        Verify that remote address for SoConId 26U was reset to the configured remote address.
    14: Reset Timer to 1U
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00695.a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>499</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.UdpTimeoutHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>970</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1565</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_149_UdpAlive_Supervision_NextUdpAliveTimeout_8</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>18276</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if a RxIndication occurs, the next
    UdpAliveTimeout is evaluated correct for the remaining SoAdSocketUdpAliveSupervisionTimeouts.

    Order of UdpAliveTimeouts:
    T...Current TimerBase
    1...UdpAliveTimeout for first RxIndication
    2...UdpAliveTimeout for second RxIndication

    TimerBaseType: |----T----2----1----|
  
Test Object: 
    SoAdSocketUdpAliveSupervisionTimeout.
  
Test Precondition: 
    * UDP socket connection with remote IP address set to TCPIP_IPADDR_ANY.
    * Socket is in state RECONNECT.
  
Test Execution: 
    01: Set Timer to 1U
    02: Call SoAd_RxIndication() for SoConId 26U --&gt; UdpAliveTimeout = 17U
    03: Call SoAd_GetSoConMode() after remote address was overwritten.
    04: Call SoAd_RxIndication() for SoConId 7U --&gt; UdpAliveTimeout = 10U
    05: Call SoAd_GetSoConMode() after remote address was overwritten.
    06: Set Timer to 9U
    07: Call Mainfunction to increase timer one more time and trigger the timeout
    08: Call SoAd_GetSoConMode().
    09: VP(SoAd.SWS_SoAd_00695.a, SoAd.dsn.UdpTimeoutHandling):
        Verify that remote address for SoConId 7U was reset to the configured remote address.
    10: Set Timer to 16U
    11: Call Mainfunction to increase timer one more time and trigger the timeout
    12: Call SoAd_GetSoConMode().
    13: VP(SoAd.SWS_SoAd_00695.a, SoAd.dsn.UdpTimeoutHandling):
        Verify that remote address for SoConId 26U was reset to the configured remote address.
    14: Reset Timer to 1U
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00695.a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>499</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.UdpTimeoutHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>970</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1566</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_150_UdpAlive_Supervision_NextUdpAliveTimeout_9</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>18398</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if a RxIndication occurs, the next
    UdpAliveTimeout is evaluated correct for the remaining SoAdSocketUdpAliveSupervisionTimeouts.

    Order of UdpAliveTimeouts:
    T...Current TimerBase
    1...UdpAliveTimeout for first RxIndication
    2...UdpAliveTimeout for second RxIndication

    TimerBaseType: |----2----1----T----|
  
Test Object: 
    SoAdSocketUdpAliveSupervisionTimeout.
  
Test Precondition: 
    * UDP socket connection with remote IP address set to TCPIP_IPADDR_ANY.
    * Socket is in state RECONNECT.
  
Test Execution: 
    01: Set Timer to 255U
    02: Call SoAd_RxIndication() for SoConId 26U --&gt; UdpAliveTimeout = 16U
    03: VP(): Call SoAd_GetSoConMode() after remote address was overwritten.
    04: Call SoAd_RxIndication() for SoConId 7U --&gt; UdpAliveTimeout = 9U
    05: VP(): Call SoAd_GetSoConMode() after remote address was overwritten.
    06: Set Timer to 8U
    07: Call Mainfunction to increase timer one more time and trigger the timeout
    08: Call SoAd_GetSoConMode().
    09: VP(SoAd.SWS_SoAd_00695.a, SoAd.dsn.UdpTimeoutHandling):
        Verify that remote address for SoConId 7U was reset to the configured remote address.
    10: Set Timer to 15U
    11: Call Mainfunction to increase timer one more time and trigger the timeout
    12: Call SoAd_GetSoConMode().
    13: VP(SoAd.SWS_SoAd_00695.a, SoAd.dsn.UdpTimeoutHandling):
        Verify that remote address for SoConId 26U was reset to the configured remote address.
    14: Reset Timer to 1U
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00695.a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>499</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.UdpTimeoutHandling</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>970</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1567</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_151_Udp_IfTransmit_NoTxCopy</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>18525</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case  verifies that  on invocation of SoAd_IfTransmit() with SduDataPtr = NULL_PTR,
    SoAd shall call TcpIp_UdpTransmit() which shall NOT trigger SoAd_CopyTxData().
    Up_[SoAd][If]TriggerTransmit() shall be called to retrieve the data from the UL to be
    transmitted.
  
Test Object: 
  
Test Precondition: 
    - Communication Protocol UDP
    - Header mode disabled
    - SoAdIfTriggerTransmit is set to true for upper layer (PduR)
  
Test Execution: 
    01: Set SduDataPtr of transmit PduInfo to NULL.
    02: Bring UDP socket to ONLINE state.
    03: Call SoAd_IfTransmit() with the SduDataPtr set to NULL.
    04: VP(SoAd.Dsn.Func0101.Tx.Udp.If.NoHeader, SWS_SoAd_00731):
        Verify that TcpIp_UdpTransmit() is called.
        Verify that &lt;Up&gt;_[SoAd][If]TriggerTransmit() is called to retrieve the PDU data from the
        upper layer.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00731</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>344</internalId></provcov>
        <provcov>
          <linksto>SoAd.Dsn.Func0101.Tx.Udp.If.NoHeader</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1071</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1568</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_118_NoBuff_HeaderNoSeg</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>18611</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_RxIndication() is called with a non segmented PDU,
    PduR_SoAdTpStartOfReception(), PduR_SoAdTpCopyRxData() and PduR_SoAdTpRxIndication()
    will be called to complete the reception
  
Test Object: None.
Test Precondition: 
    SoAdSocketTpRxBufferMin disabled.
    TCP socon.
    Upper Layer TP.
    Header mode ENABLED.
  
Test Execution: 
    01: Bring TCP socket to ONLINE state.
    02: Call SoAd_RxIndication() with a frame consisting of 2 TP PDUs.
    03: VP(): Verify that all PDUs are correctly extracted and forwarded to the upper layer.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0110.Rx.Tcp.Tp.Header.NoSeg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1083</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1569</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_119_NoBuff_HeaderNoSeg_Invalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>18722</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_RxIndication() is called with a non segmented PDU
    and PduR_SoAdTpCopyRxData() returns other value than BUFREQ_OK, PduR_SoAdTpRxIndication() shall
    be called with result E_NOT_OK. The PDU gets dropped and the SoCon does not get closed.
  
Test Object: None.
Test Precondition: 
    SoAdSocketTpRxBufferMin disabled.
    TCP socon.
    Upper Layer TP.
    Header mode ENABLED.
  
Test Execution: 
    01: Set PduR_SoAdTpCopyRxData() to return BUFREQ_E_NOT_OK.
    02: Bring TCP socket to ONLINE state.
    03: Call SoAd_RxIndication() with a frame consisting of 2 TP PDUs.
    04: VP(): Verify that PduR_SoAdTpRxIndication() was called with result E_NOT_OK.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0110.Rx.Tcp.Tp.Header.NoSeg.Invalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1084</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1570</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_120_NoBuff_HeaderSeg</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>18838</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_RxIndication() is called with a segmented PDU header,
    PduR_SoAdTpStartOfReception(), PduR_SoAdTpCopyRxData() and PduR_SoAdTpRxIndication()
    will be called, as soon as the remaining header and PDU are received, to complete the reception.
  
Test Object: None.
Test Precondition: 
    SoAdSocketTpRxBufferMin disabled.
    TCP socon.
    Upper Layer TP.
    Header mode ENABLED.
  
Test Execution: 
    01: Bring TCP socket to ONLINE state.
    02: Call SoAd_RxIndication() with a frame consisting of 2 TP PDUs with length = 5,
        so it segments the first PDU header.
    03: VP(): Verify that nothing was called.
    04: Call SoAd_RxIndication() with remaining PDU.
    05: VP(): Verify that all PDUs are correctly extracted and forwarded to the upper layer.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0110.Rx.Tcp.Tp.Header.SegHeader</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1086</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1571</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_121_NoBuff_PDUSeg</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>18964</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_RxIndication() is called with a segmented PDU after receiving
    the header, PduR_SoAdTpStartOfReception(), PduR_SoAdTpCopyRxData() shall be called. PduR_SoAdTpRxIndication()
    will be called, as soon as the remaining PDU is received, to complete the reception.
  
Test Object: None.
Test Precondition: 
    SoAdSocketTpRxBufferMin disabled.
    TCP socon.
    Upper Layer TP.
    Header mode ENABLED.
  
Test Execution: 
    01: Bring TCP socket to ONLINE state.
    02: Call SoAd_RxIndication() with a frame consisting of 2 TP PDUs with length = 10,
        so it segments the first PDU, after the header was received.
    03: VP(): Verify that PduR_SoAdTpStartOfReception(), PduR_SoAdTpCopyRxData() and
        TcpIp_TcpReceived() were called.
    04: Call SoAd_RxIndication() with remaining PDU.
    05: VP(): Verify that all PDUs are correctly extracted and forwarded to the upper layer.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0110.Rx.Tcp.Tp.Header.SegPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1087</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1572</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_122_NoBuff_PDUSeg_Invalid01</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>19104</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_RxIndication() is called with a segmented PDU
    and PduR_SoAdTpCopyRxData() returns other value than BUFREQ_OK for the first segment,
    PduR_SoAdTpRxIndication() shall be called with result E_NOT_OK. The PDU gets dropped
    and the SoCon does not get closed.
  
Test Object: None.
Test Precondition: 
    SoAdSocketTpRxBufferMin disabled.
    TCP socon.
    Upper Layer TP.
    Header mode ENABLED.
  
Test Execution: 
    01: Set the first call of PduR_SoAdTpCopyRxData() to return BUFREQ_E_NOT_OK.
    02: Bring TCP socket to ONLINE state.
    03: Call SoAd_RxIndication() with the first 10 bytes of the PDU.
    04: VP(): Verify that PduR_SoAdTpRxIndication() was called with result E_NOT_OK.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0110.Rx.Tcp.Tp.Header.Seg.Invalid1_PduSeg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1088</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1573</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_123_NoBuff_PDUSeg_Invalid02</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>19208</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_RxIndication() is called with a segmented PDU
    and PduR_SoAdTpCopyRxData() returns other value than BUFREQ_OK for the last PDU,
    PduR_SoAdTpRxIndication() shall be called with result E_NOT_OK. The PDU gets dropped
    and the SoCon does not get closed.
  
Test Object: None.
Test Precondition: 
    SoAdSocketTpRxBufferMin disabled.
    TCP SoCon.
    Upper Layer TP.
    Header mode ENABLED.
  
Test Execution: 
    01: Set second call of PduR_SoAdTpCopyRxData() to return BUFREQ_E_NOT_OK.
    02: Bring TCP socket to ONLINE state.
    03: Call SoAd_RxIndication() with the first 10 bytes of the PDU.
    04: VP(): Verify that PduR_SoAdTpStartOfReception(), PduR_SoAdTpCopyRxData() and TcpIp_TcpReceived() were called.
    05: Call SoAd_RxIndication() with remaining PDU minus -5 bytes which get recieved in next segement.
    06: VP(): Verify that PduR_SoAdTpRxIndication() was called with result E_NOT_OK.
    07: Call SoAd_RxIndication() with remaining bytes of rejected.
    08: VP(): Verify bytes of next segement where discarded.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0110.Rx.Tcp.Tp.Header.Seg.Invalid2_LastSeg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1089</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.Func0110.Rx.Tcp.Tp.Header.Seg.DiscardPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1090</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1574</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_124_NoBuff_NoHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>19376</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_RxIndication() is called for a SoCon with HeaderMode disabled,
    PduR_SoAdTpCopyRxData() shall be called twice to receive the message.
  
Test Object: None.
Test Precondition: 
    SoAdSocketTpRxBufferMin disabled.
    TCP socon.
    Upper Layer TP.
    Header mode DISABLED.
  
Test Execution: 
    01: Set PduR_SoAdTpCopyRxData() to return enough bytes in the buffer so it can receive the complete PDU.
    02: Bring TCP socket to ONLINE state.
    03: Call SoAd_RxIndication() with a frame consisting of 2 TP PDUs.
    04: VP(): Verify that PduR_SoAdTpCopyRxData() was called twice.
    05: VP(): Verify that the data was correctly received.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0110.Rx.Tcp.Tp.NoHeader</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1091</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1575</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_125_NoBuff_NoHeaderInvalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>19469</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_RxIndication() is called for a SoCon with HeaderMode disabled,
    and PduR_SoAdTpCopyRxData() returns other value than BUFREQ_OK, PduR_SoAdTpRxIndication() shall
    be called with result E_NOT_OK and the SoCon shall be closed.
  
Test Object: None.
Test Precondition: 
    SoAdSocketTpRxBufferMin disabled.
    TCP socon.
    Upper Layer TP.
    Header mode DISABLED.
  
Test Execution: 
    01: Set PduR_SoAdTpCopyRxData() to return BUFREQ_E_NOT_OK.
    02: Bring TCP socket to ONLINE state.
    03: Call SoAd_RxIndication() with a frame consisting of 2 TP PDUs.
    04: VP(): Verify that PduR_SoAdTpCopyRxData() and TcpIp_TcpReceived() were called.
    05: Call SoAd_MainFunction();
    06: VP(): Verify that PduR_SoAdTpRxIndication() was called with result E_NOT_OK.
    07: VP(): Verify that TcpIp_Close() was called to close the SoCon.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0110.Rx.Tcp.Tp.NoHeader.Invalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1092</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1576</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_125_NoBuff_ULBufferZero_NoHeaderInvalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>19573</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_RxIndication() is called for a SoCon with HeaderMode disabled,
    and PduR_SoAdTpCopyRxData() returns BUFREQ_OK with buffer size 0U and in the next mainfunction
    it returns an other value than BUFREQ_OK, PduR_SoAdTpRxIndication() shall be called with result
    E_NOT_OK and the SoCon shall be closed.
  
Test Object: None.
Test Precondition: 
    SoAdSocketTpRxBufferMin disabled.
    TCP socon.
    Upper Layer TP.
    Header mode DISABLED.
  
Test Execution: 
    01: Set PduR_SoAdTpCopyRxData() to return BUFREQ_OK with buffer size 0U.
    02: Bring TCP socket to ONLINE state.
    03: Call SoAd_RxIndication() with a frame consisting of 2 TP PDUs.
    04: VP(): Verify that PduR_SoAdTpCopyRxData()is called.
    05: Set PduR_SoAdTpCopyRxData() to return BUFREQ_NOT_OK.
    06: Call SoAd_MainFunction();
    07: VP(): Verify that PduR_SoAdTpCopyRxData() and TcpIp_TcpReceived() were called.
    08: Call SoAd_MainFunction();
    09: VP(): Verify that PduR_SoAdTpRxIndication() was called with result E_NOT_OK.
    10: VP(): Verify that TcpIp_Close() was called to close the SoCon.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0110.Rx.Tcp.Tp.NoHeader.Invalid</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1092</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1577</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_127_ReleaseDuringSending</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>19703</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if transmit is in progress and UL doesn't wait for confirmation or
    another confirmation occurs the new confirmation will be discarded.
  
Test Object: 
    SoAd_IfTransmit().
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
  
Test Execution: 
    01: Bring the socket connection to ONLINE state.
    02: Call SoAd_IfTransmit(),TcpIp_TcpTransmit() will call
        SoAd_TxConfirmation().
    03: VP(SoAd.EB.UnexpectedTxConfirmation): Verify that TcpIp_TcpTransmit was called.
      RetVal E_NOT_OK.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UnexpectedTxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>570</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1578</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_128_MainDuringSending_RemoteAddressReleased_Exact</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>19802</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    This Test shall verify that during the sending process of a TP Transmission the release of the used socket does
    not affect the transmission and that afterwards the remoteadress is not reset
  
Test Object: 
    SoAd_IfTransmit().
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
  
Test Execution: 
    01: Bring the socket connection to ONLINE state.
    02: Call SoAd_TpTransmit()
    03: Call Release of SoCon
    04: Call MainFunction 2x, will call PduR_SoAdTpCopyTxData and PduR_UdpTransmit(), Second Time Release will be indicated but not done because of Exact RemoteAddress
    03: VP():
      Verify that Transmission was called.
      Verify that CopyTx was called afterwards
      Verify that RemoteAdress has not changed.
      RetVal E_NOT_OK.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.RemoteAddressHandling.SetRemoteAddr.Udp.LockState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1097</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00745</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>358</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1579</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_129_MainDuringSending_RemoteAdressReleased_WildCard</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>19915</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This Test shall verify that during the sending process of a TP Transmission the release of the used socket does
    not affect the transmission and that afterwards the remoteadress is reset to its wildCard values
  
Test Object: 
    SoAd_IfTransmit().
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
  
Test Execution: 
    01: Bring the socket connection to ONLINE state.
    02: Call SoAd_IfTransmit(),TcpIp_TcpTransmit() will call
        SoAd_TxConfirmation().
    03: VP(SoAd.EB.UnexpectedTxConfirmation): Verify that TcpIp_TcpTransmit was called.
      RetVal E_NOT_OK.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.Udp.RemoteAddrAndPort_WildCards</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1094</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.RemoteAddressHandling.SetRemoteAddr.Udp.LockState</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1097</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1580</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_152_SetUniqueRemoteAddr_RESTART</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>20036</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoCon restarts after SoAd_TcpIpEvent was called with TCP_UDP_CLOSED
  
Test Object: 
    SoAd_TcpIpEvent().
  
Test Precondition: 
    Udp socket connection is online
  
Test Execution: 
    01: Bring the socket connection to ONLINE state.
    02: call SoAd_TcpIpEvent signalizing TCP_UDP_CLOSED event
    03: VP(SoAd.SWS_SoAd_00643.1, SoAd.SWS_SoAd_00643.2):
        Verify that Socket connection is reopened because all preconditions are met.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00643.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>436</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00643.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>437</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1581</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_153_SetUniqueRemoteAddr_SetRemoteAddr_RESTART</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>20111</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoCon restarts after SoAd_TcpIpEvent was called with TCP_UDP_CLOSED
  
Test Object: 
    SoAd_TcpIpEvent().
  
Test Precondition: 
    Udp socket connection is online
  
Test Execution: 
    01: Bring the socket connection to ONLINE state.
    02: call SoAd_TcpIpEvent signalizing TCP_UDP_CLOSED event
    03: VP(SoAd.SWS_SoAd_00643.1, SoAd.SWS_SoAd_00643.2):
        Verify that Socket connection is reopened because all preconditions are met.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00643.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>436</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00643.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>437</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1582</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_154_SetRemoteAddr_RemoteAddr_Set_RESTART</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>20188</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoCon restarts after SoAd_TcpIpEvent was called with TCP_UDP_CLOSED
  
Test Object: 
    SoAd_TcpIpEvent().
  
Test Precondition: 
    Udp socket connection is online
  
Test Execution: 
    01: Bring the socket connection to ONLINE state.
    02: call SoAd_TcpIpEvent signalizing TCP_UDP_CLOSED event
    03: VP(SoAd.SWS_SoAd_00643.1, SoAd.SWS_SoAd_00643.2):
        Verify that Socket connection is reopened because all preconditions are met.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00643.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>436</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00643.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>437</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1583</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_155_SetUniqueRemoteAddr_RemoteAddr_Unset_RESTART</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>20270</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoCon restarts after SoAd_TcpIpEvent was called with TCP_UDP_CLOSED
  
Test Object: 
    SoAd_TcpIpEvent().
  
Test Precondition: 
    Udp socket connection is online
  
Test Execution: 
    01: Bring the socket connection to ONLINE state.
    02: call SoAd_TcpIpEvent signalizing TCP_UDP_CLOSED event
    03: VP(SoAd.SWS_SoAd_00643.1, SoAd.SWS_SoAd_00643.2):
        Verify that Socket connection is in RECONNECT state.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00643.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>436</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00643.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>437</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1584</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_156_SetRemoteAddr_SetUniqueRemoteAddr_CLOSE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>20342</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoCon is closed after SoAd_CloseSoCon and SoAd_TcpIpEvent was called with
    TCP_UDP_CLOSED
  
Test Object: 
    SoAd_TcpIpEvent().
  
Test Precondition: 
    Udp socket connection is online
  
Test Execution: 
    01: Bring the socket connection to ONLINE state.
    02: call SoAd_TcpIpEvent signalizing TCP_UDP_CLOSED event
    03: VP(SoAd.SWS_SoAd_00643.1, SoAd.SWS_SoAd_00643.2):
        Verify that Socket connection is reopened because all preconditions are met.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00643.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>436</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00643.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>437</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1585</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_157_SetRemoteAddr_CLOSE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>20426</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoCon is closed after SoAd_CloseSoCon and SoAd_TcpIpEvent was called with
    TCP_UDP_CLOSED
  
Test Object: 
    SoAd_TcpIpEvent().
  
Test Precondition: 
    Udp socket connection is online
  
Test Execution: 
    01: Bring the socket connection to ONLINE state.
    02: call SoAd_TcpIpEvent signalizing TCP_UDP_CLOSED event
    03: VP(SoAd.SWS_SoAd_00643.1, SoAd.SWS_SoAd_00643.2):
        Verify that Socket connection is reopened because all preconditions are met.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00643.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>436</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00643.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>437</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1586</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_159_SetUniqueRemoteAddr_SoConGroup_Multiple_RemoteAny</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>20500</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that the remote address of the correct SoCon of the SoConGroup is
    locked with SoAd_SetUniqueRemoteAddr()
  
Test Object: 
    SoAd_SetUniqueRemoteAddr()
    SoAd_ReleaseRemoteAddr()
  
Test Precondition: 
    Udp socket connection group with several SoCons with remote address ANY.
  
Test Execution: 
    01: Bring the socket connection to RECONNECT state.
    02: Call SoAd_SetUniqueRemoteAddr() two times for both SoCons in Group to cover the exact match.
    03: Call SoAd_ReleaseRemoteAddr() two times for first SoCon to release remote address.
    04: VP(SoAd.ASR43.SWS_SoAd_00746.1):
        Remote address of first socket connection shall be reset to configured value.
    05: Call SoAd_ReleaseRemoteAddr() two times for second SoCon to release remote address.
    06: VP(SoAd.ASR43.SWS_SoAd_00746.1):
        Remote address of second socket connection shall be reset to configured value.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00746</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>359</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1587</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_160_RxIndication_CLOSE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>20669</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoCon is closed, remote address and UdpAliveTimeout are reset after SoAd_CloseSoCon
    and SoAd_TcpIpEvent was called with TCP_UDP_CLOSED
  
Test Object: 
    SoAd_TcpIpEvent().
  
Test Precondition: 
    Udp socket connection is online
  
Test Execution: 
    01: Bring the SoCon to RECONNECT state.
    02: Call SoAd_RxInidcation() to set UdpAliveTimeout.
    03: Close SoCon.
    04: call SoAd_TcpIpEvent signalizing TCP_UDP_CLOSED event.
    05: VP(SoAd.SWS_SoAd_00643.1, SoAd.SWS_SoAd_00643.2):
        Remote address of SoCon shall be reset to configured value after CLOSE.
    06: Bring the SoCon to RECONNECT state.
    07: Set remote address with SoAd_SetUniqueRemoteAddr().
    08: Call SoAd_ReleaseRemoteAddr to check if remote address was locked.
    09: VP(SoAd.SWS_SoAd_00643.1, SoAd.SWS_SoAd_00643.2):
        Remote address of SoCon shall be reset to configured value.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00643.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>436</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00643.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>437</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1588</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_161_RxIndication_RESTART</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>20839</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoCon restarts, remote address and UdpAliveTimeout are reset after SoAd_TcpIpEvent
    was called with TCP_UDP_CLOSED
  
Test Object: 
    SoAd_TcpIpEvent().
  
Test Precondition: 
    Udp socket connection is online
  
Test Execution: 
    01: Bring the SoCon to RECONNECT state.
    02: Call SoAd_RxInidcation() to set UdpAliveTimeout.
    03: Call SoAd_TcpIpEvent signalizing TCP_UDP_CLOSED event.
    04: VP(SoAd.SWS_SoAd_00643.1, SoAd.SWS_SoAd_00643.2):
        Remote address of SoCon shall be reset to configured value after CLOSE.
    05: Set remote address with SoAd_SetUniqueRemoteAddr().
    06: Call SoAd_ReleaseRemoteAddr to check if remote address was locked.
    07: VP(SoAd.SWS_SoAd_00643.1, SoAd.SWS_SoAd_00643.2):
        Remote address of SoCon shall be reset to configured value.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00643.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>436</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00643.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>437</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1589</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_162_RxIndication_Start_UdpAlive_ExactMatch</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>21001</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that Udp alive timer is started in case of an exact match in SoAd_RxIndication()
  
Test Object: 
    SoAd_RxIndication().
  
Test Precondition: 
    Udp socket connection is online
  
Test Execution: 
    01: Bring the SoCon to RECONNECT state.
    02: Call SoAd_SetUniqueRemoteAddr() to set remote address.
    03: Call SoAd_RxInidcation() to set UdpAliveTimeout.
    04: Call SoAd_ReleaseRemoteAddr to check if remote address was locked.
    05: Call SoAd_MainFunction() and stop when one more SoAd_MainFunction() call would trigger
        a timeout.
    06: Call SoAd_MainFunction() to trigger the timeout.
    07: VP(SoAd.ASR43.SWS_SoAd_00742):
        Remote address of SoCon shall be reset to configured value.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00742</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>355</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1590</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_163_MainFunctionDuringSending</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>21160</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if transmit is in progress and UL doesn't wait for confirmation or
    another confirmation occurs the new confirmation will be discarded.
  
Test Object: 
    SoAd_IfTransmit().
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
  
Test Execution: 
    01: Bring the socket connection to ONLINE state.
    02: Call SoAd_IfTransmit(),TcpIp_TcpTransmit() will call
        SoAd_TxConfirmation().
    03: VP(SoAd.EB.UnexpectedTxConfirmation): Verify that TcpIp_TcpTransmit was called.
      RetVal E_NOT_OK.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UnexpectedTxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>570</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1591</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_164_MainFunctionDuringIfTransmit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>21262</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This case shall verify that a pending tx confirmation cannot intercept an ongoing IF transmit.
    It shall also confirm that with the next main call all pending confirmations are sent
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
  
Test Execution: 
    01: Bring UDP sockets of different PDU Routes with same SoCon configured to ONLINE state.
        Also bring other SoCon online.
    02: Call SoAd_IfTransmit() and therefore bring SoCon1 into changed State.
    03: VP(): Verify that TcpIp_UdpTransmit was called
    04: Call SoAd_IfTransmit() and set Callout to MainFunction
    05: VP(): No Confirmation may be called
    06: Call Mainfunction
    07: VP(): Confirmations for both txpduids must have been triggered
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UnexpectedTxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>570</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1592</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_170_ReleaseRemoteAddrInRxIndication</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>21364</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies when SoAd_ReleaseRemoteAddr() is called by the upper layer during its
    UL_RxIndication, the remote address shall be reset to the configured value in case that the
    remote address was set with SoAd_RxIndication() and no UdpAliveTimeout is configured.
  
Test Object: 
    SoAd_ReleaseRemoteAddr
  
Test Precondition: 
    * UDP socket connection with remote IP address set to TCPIP_IPADDR_ANY.
  
Test Execution: 
    01: Set Callout function of SoAdGenUL_SoAdIfRxIndication to call SoAd_ReleaseRemoteAddr()
    02: Get Socket Connection in RECONNECT state
    03: Store configured remote address
    04: Call SoAd_RxIndication()
    05: VP(): SocketConnection shall call SoAdGenUL_SoConModeChg and SoAdGenUL_SoAdIfRxIndication
    06: VP(SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.RxIndication):
        Remote address shall be released during SoAd_RxIndication and socket connection shall be in
        state RECONNECT
    07: Store configured remote address
    08: Call SoAd_RxIndication()
    09: VP():
    10: VP(SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.RxIndication):
        Remote address shall be released during SoAd_RxIndication and socket connection shall be in
        state RECONNECT
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1099</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1593</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_171_TCP_Header_bigger_64k</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>21494</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that pdu header configured bigger than 64k is detected and rejected.
  
Test Object: None.
Test Precondition: 
    * If Socket with headermode on.
    * Exact Adress Pattern Match between Test Adress and SoCon Remote Adress
  
Test Execution: 
    01: Opern TCP Socket to be able to receive rxindication
    02: Receive RX Indication with too large length in header
    03: Check that det is called for because the length is detected and not like before cast short
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.Func0111.dsn.Tcp.If.Rx.FrameBigger64k</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1106</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1594</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_172_TCP_TP_PduRejected_TxQuota</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>21565</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test shall verify that if TcpIp rejects a transmission,
    further transmission shall be possible afterwards.
    The focus of this test shall be that TxQuota does not block further transmission.
  
Test Object: 
  
Test Precondition: 
    TxQuota is enabled.
  
Test Execution: 
    01: Call SoAd_TpTransmit() to trigger a transmission of a PDU smaller than TxQuota.
    02: Prepare stub to return E_NOT_OK from TcpIp.
    03: Call SoAd_MainFunction() to process transmission request.
    04: VP(): Verify that TcpIp_TcpTransmit() was called and as a consequence
        PduR_SoAdTpTxConfirmation() gets called with E_NOT_OK.
    05: Call SoAd_TpTransmit() to trigger another transmission of a PDU smaller than TxQuota but
        together with the first one it would exceed TxQuota.
    06: Prepare stub for an successful transmission.
    07: Call SoAd_MainFunction() to process transmission request.
    08: VP(): That the frame was copied from upper layer to TcpIp successfully.
    09: Call SoAd_TxConfirmation() to confirm successful transmission.
    10: VP(): Verify that SoAd notifies upper layer about the successful PDU transmission
        by calling [Up]_SoAdTpTxConfirmation() with E_OK.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.Func0111.dsn.Tcp.Tp.Tx.HeaderMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1105</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1595</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_173_nPduUdpTx_SkipTxConfirmationPerPdu</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>21705</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that IfTxConfirmation can be disabled on PDU level
    independent if transmission is performed directly or stored data
    gets transmitted.
  
Test Object: 
  
Test Precondition: 
    SoAdBswModules/SoAdIfTxConfirmation is enabled.
    SoAdSkipIfTxConfirmation is enabled for all PDUs.
  
Test Execution: 
    01: Bring UDP socket with nPDU feature enabled to ONLINE state.
    02: Call SoAd_IfTransmit() to transmit PDU directly.
    03: VP(): Verify that transmission was successful.
    04: VP(SoAd.EB.SkipIfTxConfirmationPerPdu):
        Verify that no TxConfirmation was reported to the upper layer.
    05: Call SoAd_IfTransmit() to trigger transmit of TRIGGER_NEVER PDU.
    06: Call SoAd_MainFunction() until timeout elapses and transmission of PDU gets
        triggered.
    07: VP(): Verify that transmission was successful.
    08: VP(SoAd.EB.SkipIfTxConfirmationPerPdu):
        Verify that no TxConfirmation was reported to the upper layer.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0120.Udp.SkipIfTxConfirmationPerPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1109</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1596</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_174_MetaData_Tcp_TxIf_SkipTxConf</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>21862</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that, if meta data is used in a socket connection group, during
    SoAd_IfTransmit, if EcuC_GetMetaDataSoConId() returns the correct SoConId, TcpIp_UdpTransmit()
    shall be called to transmit the frame.
    When SoAd_TxConfirmation() is called for the successful transmission, the Tx confirmation
    call to the upper layer shall be skipped.
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
    01: Open socket connection.
    02: Set EcuC_GetMetaDataSoConId() to return the SoConId.
    03: Call SoAd_IfTransmit().
    04: VP(SoAd.dsn.Metadata.Tcp.If.Tx.SoCon): Verify that the transmissions was performed for
        correct SoCon ID successfully.
    05: Call SoAd_TxConfirmation() to confirm TCP frame
    06: VP(SoAd.dsn.Func0120.Udp.SkipIfTxConfirmationPerPdu): Verify that UL is not called since
        TxConfirmation is disabled for this PDU.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Metadata.Tcp.If.Tx.SoCon</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1062</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.Func0120.Udp.SkipIfTxConfirmationPerPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1109</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1597</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_175_Assigned_Local_Port_SoConGroup_Multiple_NotOverwritten</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>21997</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that the assigned local port of the SoCon Group is set when another SoCon than the
    SoConFirstId is bound first
  
Test Object: 
    SoAd_SetUniqueRemoteAddr()
    SoAd_ReleaseRemoteAddr()
  
Test Precondition: 
    Udp socket connection group with several SoCons with remote address ANY.
    SoConGroup with Port set to 0
  
Test Execution: 
    01: Bring two socket connection of the same SoCon Group to ONLINE state.
        Do not use the FIRSTSOCON for this to check that binding works without
        first SoCon involved.
    02: VP():
        Check that both SoCon got the port assigned which was return from TcpIp_Bind().
    03: Call SoAd_ReleaseRemoteAddr() for the SoCon with the wildcard in the remote
        address to bring it to RECONNECT state.
    04: Call SoAd_SetUniqueRemoteAddr for the same SoCon to bring it online again.
    05: VP():
        Verify that the assigned local port of the reopened SoCon is still
        the one specified in TcpIp_Bind.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0120.Udp.AssignedLocalPort.NotOverWritten</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1110</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1598</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_176_Udp_IfTransmit_Interrupt_SoConGroup_TriggerAlways_Only</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>22140</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if a SoAd_IfTransmit() call transmits on a UDP socket
    and gets interrupted by another PDU for the same UDP socket and same socket connection,
    then the interrupting PDU shall be stored in the remaining buffer to be transmitted later.
  
Test Object: 
    1 UDP socket
    2 PDUs share the same socket and same SoCons.
    nPDU buffer enabled
  
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket to ONLINE state for the socket connections.
    02: Prepare TcpIp_UdpTransmit_Stub.Callout to simulate a SoAd_IfTransmit() preemption with
        a TRIGGER_ALWAYS PDU.
    03: Call SoAd_IfTransmit() to store a TRIGGER_NEVER PDU until next Mainfunction.
    04: Call Mainfunction to trigger transmission of TRIGGER_NEVER PDU which gets interrupted
        by SoAd_IfTransmit() with a TRIGGER_ALWAYS PDU.
    05: VP(): Verify that TcpIp_UdpTransmit was called for TRIGGER_NEVER PDU in context of next
        Mainfunction and PduR_SoAdIfTxConfirmation was called.
    06: VP(SoAd.dsn.Func0102.Tx.If.Interrupt.StoreToBuffer.MainFuncContext):
        Verify that TcpIp_UdpTransmit was called for TRIGGER_ALWAYS PDU in context of next
        Mainfunction and PduR_SoAdIfTxConfirmation was called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Tx.If.Interrupt.StoreToBuffer.MainFuncContext</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>977</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1599</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_177_CopyTxData_TpTcp_BUF_NOK_Data_Sent_TCP_Closed</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>22273</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies that in case of a TCP socket connection when TcpIp_TcpTransmit() returns with
    E_NOT_OK, within the SoAd_MainFunction() SoAd shall call the upper layer with the configured
    transmit confirmation function (&lt;Up&gt;_[SoAd][Tp]TxConfirmation&gt;()) and E_NOT_OK as result.
    In addition if data was already sent the TCPIP Connection shall be closed.
  
Test Object: 
    SoAd_TpTransmit()
  
Test Precondition: 
    SoAd is initialized and TCP socket connection is ONLINE.
  
Test Execution: 
    01: Configure PduR_SoAdTpCopyTxData stub to return E_NOT_OK in the third call.
    02: Call SoAd_TpTransmit().
    03: Call SoAd_MainFunction() to process transmission request.
    04: VP(): Verify that the first transmission executed positivly.
    05: Call SoAd_MainFunction() to process transmission request.
    06: VP(): Verify that PduR_SoAdTpTxConfirmation() was called with E_NOT_OK as a result that
              PduR_SoAdTpCopyTxData returned E_NOT_OK.
    07: Call SoAd_MainFunction() to process transmission end.
    08: VP(): Verify that the transmission has been closed by checking for TcpIp_Close
    09: VP(): Verify that no further transmission is possible.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00670</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>274</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.Func0140.Tx.Tcp.Tp.DataSent.CloseSocketConnection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1124</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.Func0140.Tx.Tcp.Tp.DataSent.DisableFurtherCom</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1123</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1600</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_178_CopyTxData_TpTcp_BUF_NOK_TCP_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>22406</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies that in case of a TCP socket connection when TcpIp_TcpTransmit() returns with
    E_NOT_OK, within the SoAd_MainFunction() SoAd shall call the upper layer with the configured
    transmit confirmation function (&lt;Up&gt;_[SoAd][Tp]TxConfirmation&gt;()) and E_NOT_OK as result.
    In this case Data was already sent before TcpIp_TcpTransmit() returns with E_NOT_OK.
  
Test Object: 
    SoAd_TpTransmit()
  
Test Precondition: 
    SoAd is initialized and TCP socket connection is ONLINE.
  
Test Execution: 
    01: Configure PduR_SoAdTpCopyTxData stub to return E_NOT_OK in the fourth call.
    02: Call SoAd_TpTransmit().
    03: Call SoAd_MainFunction() to process transmission request.
    04: VP(): Verify that the transmission executed correctly by comparing the sent and received
              Data for E_OK.
    05: Call SoAd_MainFunction() to continue the transmission request.
    06: VP(): Verify that the transmission executed false by comparing the sent and received
              Data for E_NOT_OK.
              Additionally verify that PduR_SoAdTpTxConfirmation() was called with E_NOT_OK as
              result as a result that PduR_SoAdTpCopyTxData returned E_NOT _OK.
    07: Call SoAd_MainFunction() to process closing of the socket.
    08: VP(): Verify that the socket has been closed by checking for TcpIp_Close.
    09: VP(): Verify that no further reception is possible.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00670</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>274</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.Func0140.Tx.Tcp.Tp.DataSent.CloseSocketConnection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1124</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.Func0140.Tx.Tcp.Tp.DataSent.DisableFurtherCom</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1123</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1601</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_179_Tx_Tcp_ULCopyTxData_NOT_OK_ImmediateTpTxConfirmation</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>22569</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies for a TCP connection with SoAdSocketTcpImmediateTpTxConfirmation set to true
    and if PduR_SoAdTpCopyTxData() returns BUFREQ_E_NOT_OK and no data was
    already sent the frame processing shall stop but the connection shall not be closed.
  
Test Object: 
    SoAd_TpTransmit()
  
Test Precondition: 
  
Test Execution: 
    01: Bring the socket connection to ONLINE state.
    02: Call SoAd_TpTransmit() to initiate transmit of a test PDU on EbTest_PduRoute_46_Tcp_Tp.
    03: Call SoAd_MainFunction() to process transmit request.
    04: VP(): Verify that transmit process of test PDU is in progress.
    05: VP(): Verify that PduR_SoAdTpTxConfirmation is called to signal an abort of
    the transmission.
    06: Call SoAd_TpTransmit() again to verify that sending is still possible.
    07: Call SoAd_MainFunction() to process transmit request.
    08: VP(): Verify that the transmission went through with checking for PduR_SoAdTpTxConfirmation
    and the result E_OK.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0140.Tx.Tcp.Tp.NoDataSent</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1122</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1602</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_180_UdpIfTxConf_AutoSetup</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>22667</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies that remote address is reset to wildcard and SoConState is reset to RECONNECT when
    TxConfirmation is handled for IF Pdu.
  
Test Object: 
    SoAd_IfTransmit().
  
Test Precondition: 
  
Test Execution: 
    01: Bring the UDP socket with remote address set to wildcard RECONNECT state.
    02: Execute test two times two verify functional behavior of multiple receptions.
        First run receives a second message before MainFunction is called after TxConfirmation.
    03: Call SoAd_RxIndication to receive PDU.
    04: VP(): Verify that PduR_SoAdIfRxIndication is called.
    05: VP(): Verify that remote address is set correctly.
    06: Call SoAd_IfTransmit to trigger transmission over the SoCon which received previous data.
    07: VP(): Verify that TcpIp_UdpTransmit() is called.
    08: Call SoAd_MainFunction() to trigger TxConfirmation.
    09: VP(): Verify that PduR_SoAdIfTxConfirmation() is called for the transmitted PDU.
    10: VP(SoAd.SWS_SoAd_00582.b): Verify that remote address is reset to Wildcard.
    11: VP(SoAd.SWS_SoAd_00582.a): Verify that SoCon is in state SOAD_SOCON_ONLINE.
    12: Call SoAd_MainFunction to trigger SoConState change.
    13: VP(SoAd.SWS_SoAd_00582.a): Verify that SoCon is in state SOAD_SOCON_RECONNECT.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00582.a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00582.b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>494</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1603</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_181_UdpTpTxConf_AutoSetup</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>22829</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies that remote address is reset to wildcard and SoConState is reset to RECONNECT when
    TxConfirmation is handled for TP Pdu.
  
Test Object: 
    SoAd_TpTransmit().
  
Test Precondition: 
  
Test Execution: 
    01: Bring the UDP socket with remote address set to wildcard RECONNECT state.
    02: Execute test two times two verify functional behavior of multiple receptions.
        First run receives a second message before MainFunction is called after TxConfirmation.
    03: Call SoAd_RxIndication to receive PDU.
    04: VP(): Verify that PduR_SoAdTpRxIndication is called.
    05: VP(): Verify that remote address is set correctly.
    06: Call SoAd_TpTransmit to trigger transmission over the SoCon which received previous data.
    07: Call SoAd_MainFunction to trigger transmission.
    08: VP(): Verify that Pdu is transmitted.
    09: VP(): Verify that PduR_SoAdIfTxConfirmation() is called for the transmitted PDU.
    10: VP(SoAd.SWS_SoAd_00582.b): Verify that remote address is reset to Wildcard.
    11: VP(SoAd.SWS_SoAd_00582.a): Verify that SoCon is in state SOAD_SOCON_ONLINE.
    12: Call SoAd_MainFunction to trigger SoConState change.
    13: VP(SoAd.SWS_SoAd_00582.a): Verify that SoCon is in state SOAD_SOCON_RECONNECT.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00582.a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00582.b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>494</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1604</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_182_DisableSpecificRG</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>23011</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if a specific routing group is deactivated the corresponding SoCon cannot receive
    PDUs for the socket routes belonging to this routing group.
    Disabling of this routing group shall not affect other active specific routing groups
    using the same socket connection group.
  
Test Object: 
    SoAd_DisableSpecificRouting()
  
Test Precondition: 
    - Two SocketRoutingGroups that reference the same Socket Connection Group with at least two
      Socket Connections
  
Test Execution: 
    01: Open an UDP socket connection.
    02: Call SoAd_EnableSpecificRouting() for the first RoutingGroup and SoCon referenced in first
        SocketRoute.
    03: VP(SoAd.dsn.Func0142.EnableSpecificRoutingGroup):
        Check that the return value of SoAd_EnableSpecificRouting() is E_OK.
    04: Call SoAd_EnableSpecificRouting() for the second RoutingGroup and SoCon referenced in second
        SocketRoute.
    05: VP(SoAd.dsn.Func0142.EnableSpecificRoutingGroup):
        Check that the return value of SoAd_EnableSpecificRouting() is E_OK.
    06: Call SoAd_RxIndication() for the SoCon enabled in 02.
    07: VP(SoAd.dsn.Func0142.EnableSpecificRoutingGroup):
        Verify that the RxIndication is working for the SoCon enabled in 02.
    08: Call SoAd_RxIndication() for the SoCon that was not enabled in 04.
    09: VP(SoAd.dsn.Func0142.EnableSpecificRoutingGroup):
        Verify that the RxIndication is working for the SoCon enabled in 04.
    10: Call SoAd_DisableSpecificRouting() for the first RoutingGroup and SoCon referenced in first
        SocketRoute.
    11: VP(SoAd.dsn.Func0142.DisableSpecificRoutingGroup):
        Check that the return value of SoAd_DisableSpecificRouting() is E_OK.
    12: Call SoAd_RxIndication() for the SoCon disabled in 10.
    13: VP(SoAd.dsn.Func0142.DisableSpecificRoutingGroup):
        Verify that the RxIndication is rejected for the SoCon disabled in 10.
    14: Call SoAd_RxIndication() for the SoCon which is still enabled.
    15: VP(SoAd.dsn.Func0142.EnableSpecificRoutingGroup):
        Verify that the RxIndication is working for the SoCon which is still enabled.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0142.EnableSpecificRoutingGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1129</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.Func0142.DisableSpecificRoutingGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1130</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1605</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_183_MixedRoutingGroupForSameSocketRoute</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>23232</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test shall verify that socket routes which belong to both global and specific
    routing group do not enable the global routing group when requested via SoAd_EnableRouting()
    and therefore do not interfere with the specific routing group.
  
Test Object: 
    SoAd_EnableRouting() / SoAd_DisableRouting()
  
Test Precondition: 
    - A global and specific routing group share the same socket route.
  
Test Execution: 
    01: Open the UDP socket connections.
    02: Call SoAd_EnableRouting() with the intention to enable
        dedicated socket routes on two different socket connection groups SoConPtr_Group0,
        SoConPtr_Group1.
    03: Call SoAd_RxIndication() to receive on a socket route of SoConPtr_Group0.
    04: VP(): Verify that PduR_SoAdIfRxIndication() was called indicating
        that SoConPtr_Group0 is enabled.
    05: Call SoAd_RxIndication() to receive on a socket route of SoConPtr_Group1.
    06: VP(): Verify no upper layer was called indicating that the corresponding socket route of
        SoConPtr_Group1 (which belongs to the mixture of to both global and specific routing group).
    07: Call SoAd_DisableRouting() to deactivate the socket route for SoConPtr_Group0.
    08: Call SoAd_RxIndication() to receive on a socket route of SoConPtr_Group0 again.
    09: VP(): Verify that the security event SOAD_SEV_DROP_MSG_RX_UDP_SOCKET_ID was reported to Idsm.
    10: VP(): Verify that no upper layer is called indicating that the socket
        route for SoConPtr_Group0.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0142.MixGlobalAndSpecificRoutingGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1131</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1606</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_183_MixedRoutingGroupForSameSocketRoute_Reporting_OFF</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>23379</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test shall verify that socket routes which belong to both global and specific
    routing group do not enable the global routing group when requested via SoAd_EnableRouting()
    and therefore do not interfere with the specific routing group. It also verifies that no
    security event is reported to Idsm as reporting is disabled.
  
Test Object: 
    SoAd_EnableRouting() / SoAd_DisableRouting()
  
Test Precondition: 
    - A global and specific routing group share the same socket route.
  
Test Execution: 
    01: Open the UDP socket connections.
    02: Call SoAd_EnableRouting() with the intention to enable
        dedicated socket routes on two different socket connection groups SoConPtr_Group0,
        SoConPtr_Group1.
    03: Call SoAd_RxIndication() to receive on a socket route of SoConPtr_Group0.
    04: VP(): Verify that PduR_SoAdIfRxIndication() was called indicating
        that SoConPtr_Group0 is enabled.
    05: Call SoAd_RxIndication() to receive on a socket route of SoConPtr_Group1.
    06: VP(): Verify no upper layer was called indicating that the corresponding socket route of
        SoConPtr_Group1 (which belongs to the mixture of to both global and specific routing group).
    07: Call SoAd_DisableRouting() to deactivate the socket route for SoConPtr_Group0.
    08: Call SoAd_RxIndication() to receive on a socket route of SoConPtr_Group0 again.
    09: VP(): Verify that no security event was reported to Idsm.
    10: VP(): Verify that no upper layer is called indicating that the socket
        route for SoConPtr_Group0.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0142.MixGlobalAndSpecificRoutingGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1131</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1607</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_184_SpecificRG_EnabledSocketRouteOnlyReceivesOnCorrectSoCon</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>23525</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test shall verify that if SoAd_EnableSpecificRouting() is called to enable a socket
    route for a specific socket connection (remote IP address), that this socket route can
    not receive over another socket connection (another remote IP address).
    It shall also be checked that the specific routing group can be disabled as well and does
    not allow any reception for this socket route.
  
Test Object: 
    SoAd_EnableSpecificRouting() / SoAd_DisableSpecificRouting()
  
Test Precondition: 
    - Two SocketRoutingGroups that reference the same Socket Connection Group with at least two
      Socket Connections
  
Test Execution: 
    01: Open the UDP socket connections.
    02: Call SoAd_EnableSpecificRouting() for a dedicate socket connection (SoConPtr1) to enable
        a dedicated socket route (SocketRoutePtr1) for this socket connection.
    03: Call SoAd_RxIndication() to receive a PDU with correct remote address for SoConPtr1 and
        correct header for SocketRoutePtr1.
    04: VP(SoAd.dsn.Func0142.EnableSpecificRoutingGroup):
        Verify that PduR_SoAdIfRxIndication() was called for this SocketRoutePtr1 indicating
        that SocketRoutePtr1 is enabled for SoConPtr1.
    05: Call SoAd_RxIndication() to receive a PDU with remote address for SoConPtr0 and
        correct header for SocketRoutePtr1.
    06: VP(SoAd.dsn.Func0142.EnableSpecificRoutingGroup):
        Verify that no upper layer is called indicating that SocketRoutePtr1 is not enabled
        for SoConPtr0.
    07: Call SoAd_DisableSpecificRouting() to deactivate SocketRoutePtr1 for SoConPtr1.
    08: Call SoAd_RxIndication() to receive a PDU with correct remote address for SoConPtr1 and
        correct header for SocketRoutePtr1.
    09: VP(SoAd.dsn.Func0142.DisableSpecificRoutingGroup): Verify that no upper layer is
        called indicating that SocketRoutePtr1 is not enabled anymore for SoConPtr1.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0142.EnableSpecificRoutingGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1129</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.Func0142.DisableSpecificRoutingGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1130</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1608</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_185_Dtls_UdpAlive_Supervision</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>23706</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies that Udp alive supervision is started for a UDP socket connection
    which is configured with a SoAdSocketUdpAliveSupervisionTimeout and that after this timer
    expires, SoAd shall close the TLS connection by calling Tls_Dtls_Close.
  
Test Object: 
    SoAdSocketUdpAliveSupervisionTimeout.
  
Test Precondition: 
    UDP socket connection with DTLS enabled.
  
Test Execution: 
    01: Call SoAd_RxIndication() with valid parameters.
    02: Call SoAd_MainFunction() and stop when one more SoAd_MainFunction() call would trigger
        a timeout.
    03: VP(): Verify that TcpIp_DtlsClose was called.
    04: Call SoAd_MainFunction() one more time.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsClose</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1609</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_186_SoAd_Dtls_Close_After_Release</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>23800</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies that if SoAd_ReleaseRemoteAddr() is called during
    a SoAd_IfTransmit() call, TcpIp_DtlsClose() is not called until SoAd_IfTransmit()
    is finished and SoAd_MainFunction() was called.
  
Test Object: 
    SoAd_IfTransmit().
  
Test Precondition: 
    UDP socket connection with DTLS enabled.
    TcpIp_UdpTransmit_Stub prepared to call SoAd_ReleaseRemoteAddr() during transmission.
  
Test Execution: 
    01: Prepare TcpIp_UdpTransmit_Stub.Callout to simulate release of remote address during a
        transmission.
    02: Open the UDP socket connection.
    03: VP(): Verify that remote address is set correctly.
    04: Call SoAd_IfTransmit().
    05: VP(): Verify TcpIp_UdpTransmit was called.
    06: VP(): Verify that nothing else was called.
    07: Call main function to trigger the release of remote address.
    08: VP(): Verify that TcpIp_DtlsClose was called.
    09: VP(): Verify that that RemoteAddr of SoCon is reset to wildcard.
    10: VP(): Verify that SoCon is in state SOAD_SOCON_RECONNECT.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsClose</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1610</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_187_Tcp_TcpIpEvent_TLS_ALERT</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>23954</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if SoAd_TcpIpEvent() is called with the event
    TCPIP_TLS_ALERT, no data can be transmitted anymore by calling
    SoAd_IfTransmit().
  
Test Object: SoAd_TcpIpEvent()
Test Precondition: 
  
Test Execution: 
    01: Bring the TCP socket to state ONLINE.
    02: Call SoAd_IfTransmit() and check that transmission is possible.
    03: Call SoAd_TcpIpEvent(TCPIP_TLS_ALERT) for the socket.
    04: Try to transmit something by calling SoAd_IfTransmit().
    05: VP(): Verify that SoAd_IfTransmit() returned E_NOT_OK and TcpIp_TcpTransmit
              was not called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.Dsn.Func.TLS.Tcp.TlsAlert</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1081</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1611</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_188_Tcp_TcpIpEvent_TLS_CLOSE_NOTIFY_RECEIVED</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>24037</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if SoAd_TcpIpEvent() is called with the event
    TCPIP_TLS_CLOSE_NOTIFY_RECEIVED, no data can be transmitted anymore by
    calling SoAd_IfTransmit().
  
Test Object: SoAd_TcpIpEvent()
Test Precondition: 
  
Test Execution: 
    01: Bring the TCP socket to state ONLINE.
    02: Call SoAd_IfTransmit() and check that transmission is possible.
    03: Call SoAd_TcpIpEvent(TCPIP_TLS_CLOSE_NOTIFY_RECEIVED) for the socket.
    04: Try to transmit something by calling SoAd_IfTransmit().
    05: VP(): Verify that SoAd_IfTransmit() returned E_NOT_OK and TcpIp_TcpTransmit
              was not called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.Dsn.Func.TLS.Tcp.TlsCloseNotifyReceived</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1080</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1612</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_189_Tcp_TcpIpEvent_TLS_WARNING</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>24123</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if SoAd_TcpIpEvent() is called with the event
    TCPIP_TLS_WARNING, data can still be transmitted by calling SoAd_IfTransmit().
  
Test Object: SoAd_TcpIpEvent()
Test Precondition: 
  
Test Execution: 
    01: Bring the TCP socket to state ONLINE.
    02: Call SoAd_IfTransmit() and check that transmission is possible.
    03: Call SoAd_TcpIpEvent(TCPIP_TLS_WARNING) for the socket.
    04: Try to transmit something by calling SoAd_IfTransmit().
    05: VP(): Verify that transmission is still possible.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.Dsn.Func.TLS.Tcp.TlsWarning</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1082</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1613</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_190_TLS_TcpIpEvents_UDP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>24207</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if SoAd_TcpIpEvent() is called for a
    UDP socket with the events TCPIP_TLS_WARNING,
    TCPIP_TLS_CLOSE_NOTIFY_RECEIVED, TCPIP_TLS_ALERT
    and TCPIP_TLS_HANDSHAKE_SUCCEEDED nothing happens.
  
Test Object: SoAd_TcpIpEvent()
Test Precondition: 
  
Test Execution: 
    01: Bring the UDP socket to state ONLINE.
    02: Call SoAd_TcpIpEvent with the events TCPIP_TLS_WARNING,
        TCPIP_TLS_CLOSE_NOTIFY_RECEIVED TCPIP_TLS_ALERT and
        TCPIP_TLS_HANDSHAKE_SUCCEEDED.
    02: Call SoAd_IfTransmit() and check that transmission is possible.
    03: VP(): Verify that transmission is still possible.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.Dsn.Func.TLS.Tcp.TlsAlert</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1081</internalId></provcov>
        <provcov>
          <linksto>SoAd.Dsn.Func.TLS.Tcp.TlsCloseNotifyReceived</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1080</internalId></provcov>
        <provcov>
          <linksto>SoAd.Dsn.Func.TLS.Tcp.TlsWarning</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1082</internalId></provcov>
        <provcov>
          <linksto>SoAd.Dsn.Func.TLS.Tcp.TlsHandshakeEstablished</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1079</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1614</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_191_Leave_ONLINE_immediatly_UDP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>24295</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies that SoAd returns SOAD_SOCON_WAITOFFLINE if SoAd_GetSoConMode() is called
    in between SoAd_CloseSoCon() and SoAd_MainFunction()
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket connection to state ONLINE
    02: Call SoAd_CloseSoCon()
    03: VP(): Verify that SoConModeChg() was not called
    04: VP(): Verify that SoConMode immediatly changes to SOAD_SOCON_WAITOFFLINE
    05: VP(): Verify that SocketState has changed to SOAD_SOCKETSTATE_PREPAREOFFLINE
    06: Execute SoAd_MainFunction()
    07: VP(): Verfiy that SoConMode has changed to SOAD_SOCON_OFFLINE
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00512</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1615</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_192_Leave_ONLINE_immediatly_TCP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>24382</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies that SoAd returns SOAD_SOCON_WAITOFFLINE if SoAd_GetSoConMode() is called
    in between SoAd_CloseSoCon() and SoAd_MainFunction()
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring TCP socket connection to state ONLINE
    02: Call SoAd_CloseSoCon()
    03: VP(): Verify that SoConModeChg() was not called
    04: VP(): Verify that SoConMode immediatly changes to SOAD_SOCON_WAITOFFLINE
    05: VP(): Verify that SocketState has changed to SOAD_SOCKETSTATE_PREPAREOFFLINE
    06: Execute SoAd_MainFunction()
    07: VP(): Verfiy that SoConMode has changed to SOAD_SOCON_OFFLINE
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00512</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1616</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_193_Call_SoAd_CloseSoCon_CONNECTING_UDP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>24475</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies that a SoCon in state SOAD_SOCKETSTATE_CONNECTING
    goes to SOAD_SOCON_OFFLINE if SoAd_CloseSoCon() + SoAd_MainFunction() is called
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket connection to state RECONNECT
    02: Close socket connection and call SoAd_MainFunction()
    03: VP(): verify transition to OFFLINE
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00512</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1617</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_194_Call_SoAd_CloseSoCon_CONNECTING_TCP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>24546</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies that SoCon in state SOAD_SOCKETSTATE_CONNECTING immediately
    goes to SOAD_SOCON_OFFLINE if SoAd_CloseSoCon() + SoAd_MainFunction() is called
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring TCP socket connection to state RECONNECT
    02: Close socket connection and call SoAd_MainFunction()
    03: VP(): verify transition to OFFLINE
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00512</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1618</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_195_Transition_WAITOFFLINE_CLOSED_TCP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>24638</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies that a SoCon in state WAITOFFLINE that receives a TCPIP_TCP_CLOSED
    event transitions to state SOAD_SOCON_OFFLINE
  
Test Object: TCP Server
Test Precondition: 
    SoAdSocketAutomaticSoConSetup = FALSE
  
Test Execution: 
    01: Bring TCP socket connection to state WAITOFFLINE.
    02: Call SoAd_TcpIpEvent() with TCPIP_TCP_CLOSED and SoAd_MainFunction() to trigger the state
        machine.
    03: VP(): Verify transition to OFFLINE.
    04: VP(): Verify that since the last connection was closed (by lower layer) also the
              corresponding listen socket got closed.
  
Test Input: TCP server with a listen socket and a socket connection.
Test Output: 
    Both socket connection and listen socket are properly closed entering the state offline.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00512</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1619</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_196_Transition_WAITOFFLINE_CLOSED_UDP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>24729</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies that SoCon in state WAITOFFLINE that receives a TCPIP_UDP_CLOSED
    event transitions to state SOAD_SOCON_OFFLINE
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket connection to state WAITOFFLINE
    02: Call SoAd_TcpIpEvent() with TCPIP_UDP_CLOSED
    03: VP(): verify transition to OFFLINE
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00512</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1620</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_197_No_redundant_TcpIp_Close_TCP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>24807</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies that already closed Socket is not closed again when calling SoAd_CloseSoCon()
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Bring TCP socket connection to state ONLINE
    02: Call SoAd_TcpIpEvent() with TCPIP_TCP_CLOSED to signal closing of ListenSocket before SoAd_CloseSoCon()
    03: Call SoAd_CloseSoCon()
    04: Call SoAd_MainFunction()
    05: VP(): Verify that TcpIp_Close() was only called once
    06: VP(): Verfiy that SoConMode has changed to SOAD_SOCON_OFFLINE
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00512</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1621</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_198_Tcp_FLAG_CLOSE_SOCON_in_ONLINE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>24886</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that a Tp TCP server SoCon goes to state WAITOFFLINE and then immediatly
    to OFFLINE when calling the SoAd_MainFunction() and the flag SOAD_SOCONSTATE_FLAG_CLOSE_SOCON
    is set while SoCon is ONLINE.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: open TCP socket connection
    02: VP(): SoCon should be in state RECONNECT
    03: Call SoAd_CloseSoCon() to set the flag SOAD_SOCONSTATE_FLAG_CLOSE_SOCON
    04: Call SoAd_TcpAccepted() to bring SoCon to ONLINE
    05: Call SoAd_MainFunction() to trigger state machine
    06: VP(): SoCon should be in state OFFLINE
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00512</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1622</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_199_Udp_FLAG_CLOSE_SOCON_in_ONLINE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>24993</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that a UDP SoCon goes to state WAITOFFLINE and then immediatly
    to OFFLINE when calling the SoAd_MainFunction() and the flag SOAD_SOCONSTATE_FLAG_CLOSE_SOCON
    is set while SoCon is ONLINE.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Open UDP socket connection
    02: VP(): SoCon should be in state RECONNECT
    03: Call SoAd_CloseSoCon() to set the flag SOAD_SOCONSTATE_FLAG_CLOSE_SOCON
    04: Call SoAd_SetUniqueRemoteAddr() and SoAd_SetRemoteAddr() to bring SoCon to ONLINE
    05: Call SoAd_MainFunction() to trigger state machine
    06: VP(): SoCon should be in state OFFLINE
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00512</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1623</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_200_GetSoConInfo_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>25081</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that SoAd_GetSoConInfo() returns TCPIP_E_NOT_OK if it
    fails to get the local IP address from TcpIp module.
  
Test Object: SoAd_GetSoConInfo
Test Precondition: 
  
Test Execution: 
    01: Assign IP addresses and open socket connection.
    02: Call SoAd_GetSoConInfo with TcpIp_GetIpAddr() stub set to return E_NOT_OK.
    03: VP() Verify that SoAd_GetSoConInfo() returns E_NOT_OK.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.GetSoConInfo</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1050</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1624</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_201_GetSoConInfo_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>25161</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that SoAd_GetSoConInfo() returns the correct information about a
    socket connnection when it is called.
  
Test Object: SoAd_GetSoConInfo
Test Precondition: 
  
Test Execution: 
    01: Assign IP addresses and open socket connection.
    02: Call SoAd_GetSoConInfo with TcpIp_GetIpAddr() stub set to return E_OK.
        there is no EthIf module configured and that is the default value.
    04: VP() Verify that SoAd_GetSoConInfo() called TcpIp_GetIpAddr to get the local
             ip address.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.GetSoConInfo</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1050</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1625</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_202_ReportEventCallout</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>25249</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test shall verify that, if SoAdReportEventCallout is enabled and a callout function is
    defined, this callout is called if a TCP connection is rejected.
  
Test Object: SoAdReportEventCallout
Test Precondition: 
    SoAdReportEventCallout is enabled and a user-defined function is defined in User_Callout.h.
  
Test Execution: 
    01: Open a valid TCP socket connection with a valid SocketAddress.
    02: Call SoAd_Accepted() with a different SocketAddress.
    03 VP(): Verify that the socket doesn't accept the connection
    04 VP(): Verify that the callout function was called, wich also calls TcpIp_GetIpAddr()
             to get the local IP address.
    05 VP(): Verify that the callout was called with the correct ReportId and context. The VlanId is
             4096, as there is no EthIf module configured and that is the default value in such a case.
    06 VP(): Verify that IdsM_SetSecurityEvent was not called
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.ReportEventCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1051</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1626</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_203_Report_INV_PDUHEADER_ID</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>25345</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that in case SoAd_RxIndication() is called for a write-only UDP socket
    SoAd will not generate call to upper layer [Up]_SoAdIfRxIndication() callback function,
    DET error SOAD_E_INV_PDUHEADER_ID will be reported and the user defined callout function
    'User_CalloutHandler()' is called.
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
  
Test Execution: 
    01: Bring UDP socket with only TX side configured to ONLINE state.
    02: Call SoAd_RxIndication() to indicate the reception of a new UDP datagram.
    03: VP(SoAd.EB.ReportEventCallout): Verify that SOAD_REPORT_ID_INV_PDUHERADER_ID is reported to user callout.
    04: VP(SoAd.SWS_SoAd_00559.3): Verify that SOAD_E_INV_PDUHEADER_ID is reported to DET.
    05: VP(SoAd.EB.ReportEventCallout): Verify that SOAD_REPORT_ID_DROPPED_PDU_UDP is reported to user callout.
    06: VP(SoAd.SWS_SoAd_00559.3): Verify that upper layer [UL]_SoAdIfRxIndication() callback function is not called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00559.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>465</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.ReportEventCallout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1051</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1627</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_02_204_Close_and_Reopen_TCP_Server</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0002.c.m4</sourcefile>
      <sourceline>25440</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that a TCP server connection that is closed is reset properly and
    can be opened again. After closing and opening, SoAd_GetLocalAddr() must report the
    same port that was configured.
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01: Open Tcp server socket
    02: VP(): Verify SoAd_GetLocalAddr() reports the correct (configured) LocalPort.
    03: Close server socket with SoAd_CloseSoCon(). Call SoAd_TcpIpEvent() to simulate TcpIp
        actually closing the socket.
    04: Reopen server socket.
    05: VP(): Verify SoAd_GetLocalAddr() still reports the same LocalPort as before.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00506</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1628</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SoAd_ConTest_00_03_PublishedInformation</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>68</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
      Verify the correct definition of the common published information
      provided in the module header file.
  &lt;/para&gt;
  
Test Object: None.
Test Precondition: None.
Test Execution: 
    01: VP(): SOAD_VENDOR_ID is defined.
    02: VP(): SOAD_VENDOR_ID is defined with correct value.
    03: VP(): SOAD_MODULE_ID is defined.
    04: VP(): SOAD_MODULE_ID is defined with correct value.
    05: VP(): SOAD_AR_RELEASE_MAJOR_VERSION is defined.
    06: VP(): SOAD_AR_RELEASE_MAJOR_VERSION is defined with correct value.
    07: VP(): SOAD_AR_RELEASE_MINOR_VERSION is defined.
    08: VP(): SOAD_AR_RELEASE_MINOR_VERSION is defined with correct value.
    09: VP(): SOAD_AR_RELEASE_REVISION_VERSION is defined.
    10: VP(): SOAD_AR_RELEASE_REVISION_VERSION is defined with correct value.
    11: VP(): SOAD_SW_MAJOR_VERSION is defined.
    12: VP(): SOAD_SW_MAJOR_VERSION is defined with correct value.
    13: VP(): SOAD_SW_MINOR_VERSION is defined.
    14: VP(): SOAD_SW_MINOR_VERSION is defined with correct value.
    15: VP(): SOAD_SW_PATCH_VERSION is defined.
    16: VP(): SOAD_SW_PATCH_VERSION is defined with correct value.
    17: VP(): SOAD_INSTANCE_ID is defined.
    18: VP(): SOAD_INSTANCE_ID is defined with correct value.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.PublishedInformation</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>563</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1629</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_ReturnVersionInformation</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>193</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    Check if SoAd_GetVersionInfo() returns correct version information for enabled
    development error detection.
  &lt;/para&gt;
  
Test Object: 
    SoAd_GetVersionInfo()
  
Test Precondition: 
   - SoAdDevErrorDetect is enabled
   - SoAdVersionInfoApi is enabled
   - Macros SOAD_VENDOR_ID,.. are defined properly
     (see SoAd_ConTest_00_03_PublishedInformation)
  
Test Execution: 
    01: SoAd_GetVersionInfo() is called with valid pointer to versionInfo.
    02: VP(): SOAD_VENDOR_ID, SOAD_MODULE_ID, SOAD_SW_MAJOR_VERSION, SOAD_SW_MINOR_VERSION
              and SOAD_SW_PATCH_VERSION are returned by versionInfo.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.GetVersionInfo</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>595</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1630</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_TpChangeParameter_Uninit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>242</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if SoAd_TpChangeParamater() is called using a SoConId which is
    configured to have the upper layer as IF, E_NOT_OK will be returned and no further action shall
    take place.
  
Test Object: 
    SoAd_TpChangeParamater()
  
Test Precondition: 
  
Test Execution: 
    01: Call SoAd_TpChangeParameter() when SoAd is not initialized.
    02: VP(SWS_SoAd_00730): Verify that E_NOT_OK was returned.
    03: VP(): Verify that SOAD_E_NOTINIT was reported to Det.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ASR42.SWS_SoAd_00629</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00730</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>343</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1631</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_RequestIpAddrAssignment</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>303</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    Check if SoAd_RequestIpAddrAssignment() correctly calls TcpIp_RequestIpAddrAssignment()
    with the parameters passed through for enabled development error detection.
  &lt;/para&gt;
  
Test Object: 
    SoAd_RequestIpAddrAssignment()
  
Test Precondition: 
   - SoAdDevErrorDetect is enabled
  
Test Execution: 
    01: call SoAd_Init (initialization for all test cases of the file)
    02: call SoAd_RequestIpAddrAssignment() with valid SoConId, Type and LocalIpAddrPtr.
    03: VP(): TcpIp_RequestIpAddrAssignment() is called with parameters passed through.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.RequestIpAddrAssignment_ForwardCall</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>596</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1632</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_ReleaseIpAddrAssignment</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>361</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    Check if SoAd_ReleaseIpAddrAssignment() correctly calls TcpIp_ReleaseIpAddrAssignment()
    with the parameter passed through for enabled development error detection.
  &lt;/para&gt;
  
Test Object: 
    SoAd_ReleaseIpAddrAssignment()
  
Test Precondition: 
   - SoAdDevErrorDetect is enabled
  
Test Execution: 
    01: call SoAd_ReleaseIpAddrAssignment() with valid SoConId.
    02: VP(): TcpIp_ReleaseIpAddrAssignment() is called with parameter passed through.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.ReleaseIpAddrAssignment_ForwardCall</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>597</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1633</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_IsConnectionReady</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>409</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    Check if SoAd_IsConnectionReady() correctly calls TcpIp_IsConnectionReady()
    with the correct SocketId and the RemoteAddrPtr passed through.
  &lt;/para&gt;
  
Test Object: 
    SoAd_IsConnectionReady()
  
Test Precondition: 
   - Open SoCon
  
Test Execution: 
    01: call SoAd_IsConnectionReady() with valid SoConId of closed SoCon.
    02: VP(SoAd.dsn.IsConnectionReady.InvalidSocketId):
        SoAd_IsConnectionReady returns TCPIP_E_NOT_OK without calling TcpIp_IsConnectionReady().
    03: Open SoCon.
    04: call SoAd_IsConnectionReady() with valid SoConId of opened SoCon.
    05: VP(SoAd.dsn.IsConnectionReady.ValidSocketId):
        TcpIp_IsConnectionReady() is called with parameter passed through.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.IsConnectionReady.ValidSocketId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1116</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.IsConnectionReady.InvalidSocketId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1634</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_GetLocalAddr</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>487</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    Check if SoAd_GetLocalAddr() correctly calls TcpIp_GetIpAddr()
    with the parameters passed through for enabled development error detection.
  &lt;/para&gt;
  
Test Object: 
    SoAd_GetLocalAddr()
  
Test Precondition: 
   - SoAdDevErrorDetect is enabled
  
Test Execution: 
    01: call SoAd_GetLocalAddr() with valid SoConId, LocalAddrPtr, NetmaskPtr
        and DefaultRouterPtr.
    02: VP(): TcpIp_GetIpAddr() is called with parameters passed through.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.GetLocalAddr_ForwardCall</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>598</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1635</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_GetLocalAddr_RetrieveIPv4</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>580</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    This test verifies that SoAd_GetLocalAddr() with LocalAddrPtr-&gt;domain set to TCPIP_AF_UNSPEC
    returns TCPIP_AF_INET for an IPv4 socket connection.
  &lt;/para&gt;
  
Test Object: 
    SoAd_GetLocalAddr()
  
Test Precondition: 
   - SoAdDevErrorDetect is enabled.
   - Socket connection has IPv4 addresses.
  
Test Execution: 
    01: Call SoAd_GetLocalAddr() with valid SoConId for IPv4 socket connection and
        LocalAddrPtr-&gt;domain set to TCPIP_AF_UNSPEC.
    02: VP(): SoAd_GetLocalAddr() returns E_OK.
    03: VP(): LocalAddrPtr-&gt;domain is set to TCPIP_AF_INET.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.GetLocalAddr_TCPIP_AF_UNSPEC_IPv4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>681</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1636</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_GetLocalAddr_RetrieveIPv6</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>639</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    This test verifies that SoAd_GetLocalAddr() with LocalAddrPtr-&gt;domain set to TCPIP_AF_UNSPEC
    returns TCPIP_AF_INET6 for an IPv6 socket connection.
  &lt;/para&gt;
  
Test Object: 
    SoAd_GetLocalAddr()
  
Test Precondition: 
   - SoAdDevErrorDetect is enabled.
   - Socket connection has IPv6 addresses.
  
Test Execution: 
    01: Call SoAd_GetLocalAddr() with valid SoConId for IPv6 socket connection and
        LocalAddrPtr-&gt;domain set to TCPIP_AF_UNSPEC.
    02: VP(): SoAd_GetLocalAddr() returns E_OK.
    03: VP(): LocalAddrPtr-&gt;domain is set to TCPIP_AF_INET6.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.GetLocalAddr_TCPIP_AF_UNSPEC_IPv6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>682</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1637</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_GetLocalAddr_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>698</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    This test verifies that if TcpIp_GetIpAddr() returns E_NOT_OK, SoAd_GetLocalAddr() will also
    return E_NOT_OK.
  &lt;/para&gt;
  
Test Object: 
    SoAd_GetLocalAddr()
  
Test Precondition: 
  
Test Execution: 
    01: Set TcpIp_GetIpAddr() to return E_NOT_OK.
    02: Call SoAd_GetLocalAddr() with valid SoConId, LocalAddrPtr, NetmaskPtr and DefaultRouterPtr.
    03: VP(): Verify that E_NOT_OK was returned.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.GetIpAddr_NOTOK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>645</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1638</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_GetPhysAddr</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>771</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    Check if SoAd_GetPhysAddr() correctly calls TcpIp_GetPhysAddr()
    with the parameters passed through for enabled development error detection.
  &lt;/para&gt;
  
Test Object: 
    SoAd_GetPhysAddr()
  
Test Precondition: 
   - SoAdDevErrorDetect is enabled
  
Test Execution: 
    01: Call SoAd_GetPhysAddr() with valid SoConId and PhysAddrPtr.
    02: VP(SoAd.EB.PbVariantSupport.SoAdSocketLocalAddressRef):
        TcpIp_GetPhysAddr() is called with parameters passed through.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.GetPhysAddr_ForwardCall</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>599</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdSocketLocalAddressRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>701</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1639</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_ChangeParameter</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>829</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    Check if SoAd_ChangeParameter() correctly calls TcpIp_ChangeParameter()
    with the parameters passed through for enabled development error detection.
  &lt;/para&gt;
  
Test Object: 
    SoAd_ChangeParameter()
  
Test Precondition: 
   - SoAdDevErrorDetect is enabled
  
Test Execution: 
    01: Call SoAd_LocalIpAddrAssignmentChg() and SoAd_MainFunction() to open a socket connection.
    02: Verify that the secket connection is opened.
    03: Call SoAd_ChangeParameter() with valid SoConId, ParameterId and ParameterValuePtr.
    04: VP(): TcpIp_ChangeParameter() is called with parameters passed through.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.ChangeParameter_ForwardCall</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>600</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1640</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_ChangeParameter_Invalid_SocketId</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>907</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    This test verifies that if SoAd_ChangeParameter() is called with an invalid socket id,
    TcpIp_ChangeParameter() will not be called.
  &lt;/para&gt;
  
Test Object: 
    SoAd_ChangeParameter()
  
Test Precondition: 
  
Test Execution: 
    01: Set TcpIp_GetSocket() to return an invalid socket id.
    02: Call SoAd_ChangeParameter().
    03: VP(): Verify that TcpIp_ChangeParameter() was not called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.ChangeParameter_InvalidSocketId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>646</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1641</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_ListenSocket</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>986</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    &lt;para&gt;
      This test verifies that if a socket belonging to a SocketConnection is closed by the remote
      node and reopened, SoAd will not allocate a new listen socket.
    &lt;/para&gt;
  
Test Object: None.
Test Precondition: 
    - SoAdSocketConnectionGroup has only one configured SoAdSocketConnection.
    - SoAdSocketTcpInitiate is false.
  
Test Execution: 
    01: Call SoAd_OpenSoCon() and SoAd_MainFunction() to open a socket connection.
    02: VP(SoAd.EB.ListenSocket): Verify that a listen socket was opened.
    03: Call SoAd_TcpAccepted() so that the remote node opens the TCP connection.
    04: Call SoAd_TpCancelReceive() to cancel to ongoing reception.
    05: Call SoAd_MainFunction().
    06: VP(SoAd.EB.PbVariantSupport.SoAdRxPduId):
        Verify that the connection was closed.
    07: Call SoAd_TcpIpEvent() to signal TCP close.
    08: Call SoAd_MainFunction() to close the socket.
    09: Call SoAd_MainFunction() to open a socket connection.
    10: VP(SoAd.EB.ListenSocket): Verify that no API was called.
    11: Verify that last SoAd_MainFunction() set the socket state to SOAD_SOCKETSTATE_CONNECTING
        so that it will be available for a new connection(SoAd_TcpAccepted() returned E_OK).
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.ListenSocket</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>580</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdRxPduId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>726</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1642</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_ListenSocket_Close</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>1099</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    Verify proper call of TcpIp_Close() for a connection configured with:
    - TP socket connection is set up manually (i.e. SoAdSocketAutomaticSoConSetup is set to false)
    - SoAdLocalIpAddrAssigmentChg is enabled
    - remote address/port is set by configuration
    - protocol is set to TCP
  &lt;/para&gt;
  
Test Object: 
  
Test Precondition: 
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00604</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>217</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00638.1a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>396</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00689.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>409</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00689.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>412</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00638.1c</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>398</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00638.1f</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>401</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1643</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_KeepAliveEnabled</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>1268</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    Verify proper call of TcpIp_ChangeParameters() for a connection configured with:
    - KeepAlive enabled
    - KeepAliveTime enabled and set to TEST_KEEPALIVETIME.
    - KeepAliveInterval enabled and set to TEST_KEEPALIVEINTERVAL.
    - KeepAliveProbesMax enabled and set to TEST_KEEPALIVEPROBESMAX.
  &lt;/para&gt;
  
Test Object: 
  
Test Precondition: 
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00689.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>409</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00689.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>412</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00689.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>413</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00689.6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>414</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00689.7</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>415</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdSocketTcpKeepAliveInterval</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>718</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdSocketTcpKeepAliveProbesMax</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>719</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdSocketTcpKeepAliveTime</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>720</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1644</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_IfTransmit_UL_TP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>1420</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_IfTransmit() API returns E_NOT_OK and calls a Det when it is called with
    TxPduId configured to have the upper layer TP.
  
Test Object: 
    SoAd_IfTransmit()
  
Test Precondition: 
  
Test Execution: 
    01: Call SoAd_Init();
    02: Call SoAd_IfTransmit() with a TxPduId configured to have TP upper layer type.
    03: VP (): SoAd_IfTransmit() returned E_NOT_OK and SOAD_INVALID_PDUID was reported to DET.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00214</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>69</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1645</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_ReadDhcpHostName_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>1473</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that SoAd_ReadDhcpHostNameOption() shall forward the call to
    TcpIp_DhcpReadOption() with the parameter Option set to 81, according to IETF RFC 4702.
  
Test Object: 
    SoAd_ReadDhcpHostNameOption().
  
Test Precondition: 
    Ipv4 local address.
  
Test Execution: 
    01: Call SoAd_ReadDhcpHostNameOption().
    02: VP(): Verify that TcpIp_DhcpReadOption() was called with correct parameters.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00703</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>309</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1646</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_WriteDhcpHostNameOption_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>1530</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that SoAd_WriteDhcpHostNameOption() shall forward the call to
    TcpIp_DhcpWriteOption() with the parameter Option set to 81, according to IETF RFC 4702.
  
Test Object: 
    SoAd_WriteDhcpHostNameOption().
  
Test Precondition: 
    Ipv4 local address.
  
Test Execution: 
    01: Call SoAd_WriteDhcpHostNameOption().
    02: VP(): Verify that TcpIp_DhcpWriteOption() was called with correct parameters.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00707</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>313</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1647</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_SetUniqueRemoteAddr_ClosedSocket</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>1590</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if SoAd_SetUniqueRemoteAddr() is called and there is a matching
    (wildcard) socket connection which is closed, E_OK will be returned and the SoConId will take
    the value of the SoConId which had the match.
  
Test Object: 
    SoAd_SetUniqueRemoteAddr()
  
Test Precondition: 
  
Test Execution: 
    01: Call SoAd_SetUniqueRemoteAddr() when all socket connections from the group are closed, no
        socket connection (partially) matches the remote address and there is at least one wildcard
        socket connection in the socket connection group present.
    02: VP(SoAd.SWS_SoAd_00680.2d, SoAd.SWS_SoAd_00676.4,
           SetUniqueRemoteAddr_ClosedSockets):
        Verify that E_OK was returned.
    03: VP(SoAd.SWS_SoAd_00680.2d, SoAd.SWS_SoAd_00676.3,
           SoAd.EB.SetUniqueRemoteAddr_ClosedSockets):
        Verify that the SoConId which had a wildcard remote address and port was saved.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SetUniqueRemoteAddr_ClosedSockets</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>648</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00680.2d</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>491</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00676.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>528</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00676.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>529</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1648</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_SetUniqueRemoteAddr_NoMatch</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>1657</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if SoAd_SetUniqueRemoteAddr() is called and no remote address match,
    E_NOT_OK will be returned and the set SoConId will be unchanged.
  
Test Object: 
    SoAd_SetUniqueRemoteAddr()
  
Test Precondition: 
  
Test Execution: 
    01: Call SoAd_OpenSoCon().
    02: Call SoAd_SetUniqueRemoteAddr() using a remote address that doesn't match.
    03: VP(): Verify that E_NOT_OK was returned.
    04: VP(SoAd.SWS_SoAd_00680.2e, SoAd.EB.SetUniqueRemoteAddr_NoMatch):
        Verify that no match was found, so the set SoConId is not changed.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00680.2e</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>492</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.SetUniqueRemoteAddr_NoMatch</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>649</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1649</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_SetUniqueRemoteAddr_ExactMatch</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>1738</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: None.
Test Object: 
    SoAd_SetUniqueRemoteAddr()
  
Test Precondition: 
  
Test Execution: 
    01: Open three socket connections.
    02: Call SoAd_SetUniqueRemoteAddr() using a remote address that match exactly to one of the
        sockets and partially to the second socket.
    03: VP(SoAd.SWS_SoAd_00680.2a, SoAd.SWS_SoAd_00676.4):
        Verify that E_OK was returned.
    04: VP(SoAd.SWS_SoAd_00680.2a, SoAd.SWS_SoAd_00676.3,
           SoAd.EB.SetUniqueRemoteAddr_ExactMatch):
        Verify that the SoConId which had matching remote address and port was saved.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00680.2a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>488</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00676.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>528</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00676.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>529</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.SetUniqueRemoteAddr_ExactMatch</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>650</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1650</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_SetUniqueRemoteAddr_Wildcard</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>1817</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: None.
Test Object: 
    SoAd_SetUniqueRemoteAddr()
  
Test Precondition: 
  
Test Execution: 
    01: Open a socket connection.
    02: Call SoAd_SetUniqueRemoteAddr() using a wildcard.
    03: VP(SoAd.SWS_SoAd_00676.4): Verify that E_OK is returned.
    04: VP(SoAd.SWS_SoAd_00680.2d): Verify that the SoConId which had wildcard was
        saved.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00680.2d</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>491</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1651</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_SoAd_DtlsConnectionStateChg_Wildcard</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>1894</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: None.
Test Object: 
    SoAd_DtlsConnectionStateChg()
  
Test Precondition: 
  
Test Execution: 
    01: Open a socket connection.
    02: Call SoAd_DtlsConnectionStateChg() using a wildcard.
    03: Call MainFunction
    04: VP(): Verify that the SoConId which had wildcard was saved.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.SoAd_DtlsConnectionStateChg.Dtls.Connecting.Match</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1132</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00680.2d</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>491</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1652</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_SoAd_DtlsConnectionStateChg_IpAddrMatch</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>1975</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: None.
Test Object: 
    SoAd_DtlsConnectionStateChg()
  
Test Precondition: 
    Two Socket Connection where one has an ip addr match to the remote address.
  
Test Execution: 
    01: Open first socket Connection which does not match the remote address.
    02: also open the second connection which has a ipaddr match.
    03: Call SoAd_DtlsConnectionStateChg().
    04: VP(): Verify that the remote address was set for the second socket
    connection.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.SoAd_DtlsConnectionStateChg.Dtls.Connecting.Match</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1132</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00680.2b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>489</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1653</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_SoAd_SoAd_SetRemoteAddr_Twice</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>2066</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: None.
Test Object: 
    SoAd_SetRemoteAddr()
  
Test Precondition: 
  
Test Execution: 
    01: Call SoAd_SetRemoteAddr with first address
    02: VP(): Verify that remote address for this socon was set
    03: Call SoAd_SetRemoteAddr with other address
    04: VP(): Verify that TcpIp_DtlsClose was called
    05: VP(): Verify that other remote address for this socon was set
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsClose</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1654</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_SoAd_DtlsConnectionStateChg_IpV6</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>2156</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: None.
Test Object: 
    SoAd_DtlsConnectionStateChg()
  
Test Precondition: 
  
Test Execution: 
    01: Open a socket connection.
    02: Call SoAd_DtlsConnectionStateChg() using a valid remote address.
    03: VP(): Verify that the remote address is actually set.
    04: Call SoAd_DtlsConnectionStateChg() using a wild card remote address.
    05: VP(): Verify that the remote address has not been changed.
    06: VP(): Verify that TcpIp_DtlsClose has been called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.SoAd_DtlsConnectionStateChg.Dtls.Connecting.Match</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1132</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00680.2a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>488</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1655</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_SoAd_DtlsConnectionStateChg_NoMatch</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>2321</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: None.
Test Object: 
    SoAd_DtlsConnectionStateChg()
  
Test Precondition: 
  
Test Execution: 
    01: Open a socket connection.
    02: Call SoAd_DtlsConnectionStateChg() using a non matching remote address.
    03: VP(): Verify that TcpIp_DtlsClose was called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.SoAd_DtlsConnectionStateChg.Dtls.Connecting.NoMatch</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1133</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00680.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>487</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1656</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_SoAd_DtlsConnectionStateChg_Remote_WildCard</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>2396</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify that SoAd_DtlsConnectionStateChg() does not process a wildcard remote
  address.
&lt;/para&gt;

Test Object: 
  SoAd_DtlsConnectionStateChg()

Test Precondition: 
  All parameters for calling SoAd_DtlsConnectionStateChg() are valid except the
  remote address.

Test Execution: 
  01: Call SoAd_DtlsConnectionStateChg() with wildcard remote address.
  02 VP: Verify that TcpIp_DtlsClose was called.

Test Input: 
  RemoteAddrPtr: Wildcard
  Dtls_State: SOAD_DTLS_STATE_CONNECTING

Test Output: 
  DTLS connection gets closed.
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0144.WildCardCheck.Checks</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1137</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1657</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_SoAd_RxIndication_Remote_WildCard</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>2469</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify that SoAd_RxIndication() does not process a wildcard remote address.
&lt;/para&gt;

Test Object: 
  SoAd_RxIndication()

Test Precondition: 
  All parameters for calling SoAd_RxIndication() are valid except the remote
  address.

Test Execution: 
  01: Call SoAd_RxIndication() with wildcard as remote address.
  02 VP: Verify that no API was called by SoAd_RxIndication().

Test Input: 
  RemoteAddrPtr: Wildcard

Test Output: 
  Call does not call any API.
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0144.WildCardCheck.Checks</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1137</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1658</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_SoAd_TcpAccepted_Remote_WildCard</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>2539</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify that SoAd_TcpAccepted() does not process a wildcard remote address.
&lt;/para&gt;

Test Object: 
  SoAd_TcpAccepted()

Test Precondition: 
  All parameters for calling SoAd_TcpAccepted() are valid except the remote address.

Test Execution: 
  01: Call SoAd_TcpAccepted() with wildcard as remote address.
  02 VP: Verify that no API was called by SoAd_TcpAccepted().

Test Input: 
  RemoteAddrPtr: Wildcard

Test Output: 
  Call does not call any API.
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0144.WildCardCheck.Checks</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1137</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1659</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_SoAd_DtlsConnectionStateChg_Dtls_Closed</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>2602</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify that calling SoAd_DtlsConnectionStateChg() with state
  SOAD_DTLS_STATE_CLOSED resets the remote address.

Test Object: 
  SoAd_DtlsConnectionStateChg()

Test Precondition: 

Test Execution: 
  01: Setup socket connection
  02: VP(): Verify socket is in state RECONNECT
  03: Call SoAd_DtlsConnectionStateChg() with state SOAD_DTLS_STATE_CONNECTING
  04: VP(): Verify socket is in state SOAD_SOCON_ONLINE
  05: Call SoAd_DtlsConnectionStateChg() with state SOAD_DTLS_STATE_CLOSED
  06: VP(): Verify socket is in state SOAD_SOCON_RECONNECT
  07: Call SoAd_DtlsConnectionStateChg() with a different IP address and
      state SOAD_DTLS_STATE_CONNECTING.
  08: VP(): Verify socket is in state SOAD_SOCON_ONLINE -&gt; Remote address was
      reset

Test Input: 

Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.SoAd_DtlsConnectionStateChg.Dtls.Closed</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1134</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1660</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_SoAd_DtlsConnectionStateChg_Dtls_Connected</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>2710</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify that SoAd_DtlsConnectionStateChg() does not call any API
  when called with SOAD_DTLS_STATE_CONNECTED.
&lt;/para&gt;

Test Object: 
  SoAd_DtlsConnectionStateChg()

Test Precondition: 
  All parameters for calling SoAd_DtlsConnectionStateChg() are valid
  and state parameter is SOAD_DTLS_STATE_CONNECTED.

Test Execution: 
  01: Call SoAd_DtlsConnectionStateChg() with state SOAD_DTLS_STATE_CONNECTED.
  02 VP: Verify that no API was called by SoAd_DtlsConnectionStateChg().

Test Input: 
  Dtls_State: SOAD_DTLS_STATE_CONNECTED

Test Output: 
  Call does not call any API.
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.SoAd_DtlsConnectionStateChg.Dtls.Connected</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1135</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1661</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_TCP_Bind_NotOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>2775</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    This test verifies that if TcpIp_Bind() returns E_NOT_OK, the socket connection will not be
    opened.
  &lt;/para&gt;
  
Test Object: 
  
Test Precondition: 
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.Bind_NOK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>612</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1662</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_TCP_Listen_NotOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>2973</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    This test verifies that if TcpIp_TcpListen() returns E_NOT_OK, the socket connection will not
    be opened.
  &lt;/para&gt;
  
Test Object: 
  
Test Precondition: 
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpListen_NOK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>613</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1663</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_TCP_Connect_NotOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>3176</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    This test verifies that if TcpIp_TcpConnect() returns E_NOT_OK, the socket connection will not
    be opened. It also verifies that if SoAd_TcpConnected() is called for a TCP socket configured
    with SoAdSocketTcpInitiate set to TRUE which is not in state ONLINE, the socket state will be
    changed to ONLINE.
  &lt;/para&gt;
  
Test Object: 
  
Test Precondition: 
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpConnect_NOK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>614</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00590.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>395</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00593</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>208</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1664</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_CloseSoCon_TcpIpEvent_TCP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>3330</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    This test verifies that if the call of SoAd_CloseSoCon() and SoAd_TcpIpEvent(TCPIP_TCP_CLOSED),
    for the same socket connection, are performed in the same main function period, TcpIp_Close()
    will not be called and the socket will be in OFFLINE mode.
  &lt;/para&gt;
  
Test Object: 
  
Test Precondition: 
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.CloseSoCon_TcpIpEvent</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>653</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1665</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_CloseSoCon_Waiting_Client</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>3439</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    This test verifies that if SoAd_CloseSoCon() is called for a server socket connection which is
    waiting for a client to connect, TcpIp_Close() will be called to close the previously opened
    listen socket.
  &lt;/para&gt;
  
Test Object: 
  
Test Precondition: 
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.CloseSoCon_ServerWaitingClient</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>652</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1666</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_TlsUdpChangeParameter</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>3542</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    Check if SoAdSocketProtocol is SoAdSocketUdp and SoAdTlsConnectionRef is valid,
    TcpIp_ChangeParamter() with TCPIP_PARAMID_TLS_CONNECTION_ASSIGNMENT and the configured TlsConnectionId is
    called after TcpIp_GetSocket().
  &lt;/para&gt;
  
Test Object: 
    SoAd_ChangeParameter()
  
Test Precondition: 
   - SoAdDevErrorDetect is enabled
  
Test Execution: 
    01: Call SoAd_LocalIpAddrAssignmentChg() and SoAd_MainFunction() to open a socket connection.
    02: VP(): TcpIp_ChangeParameter() is called with ParameterId set to
        TCPIP_PARAMID_TLS_CONNECTION_ASSIGNMENT and with the correct TlsConnectionId.
    03: Call SoAd_GetSoConMode() to check the mode of the connection.
    04: VP(): Verify that the socket connection is opened.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.Dsn.Func.TLS.Udp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1076</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1667</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_TlsTcpClient_ConnectionEstablishment</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>3621</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Check if SoAdSocketProtocol is SoAdSocketTcp, SoAdSocketTcpInitiate is TRUE
    and SoAdTlsConnectionRef is valid, TcpIp_ChangeParamter() with
    TCPIP_PARAMID_TLS_CONNECTION_ASSIGNMENT and the configured TlsConnectionId is
    called after TcpIp_GetSocket().
  
Test Object: 
    SoAd_ChangeParameter()
    SoAd_TcpConnected()
    SoAd_TcpIpEvent()
  
Test Precondition: 
   - SoAdDevErrorDetect is enabled
   - SoAdSocketTcpInitiate is True
  
Test Execution: 
    01: Call SoAd_LocalIpAddrAssignmentChg() and SoAd_MainFunction() to open a socket connection.
    02: VP(SoAd.Dsn.Func.TLS.Tcp_Client_ChangeParameter):
        TcpIp_ChangeParameter() is called with ParameterId set to
        TCPIP_PARAMID_TLS_CONNECTION_ASSIGNMENT and with the correct TlsConnectionId.
    03: Call SoAd_TcpConnected() to confirm that the TCP client(SoAdSocketTcpInitiate = TRUE)
        is connected to a server.
    04: VP(SoAd.Dsn.Func.TLS.Tcp.TlsHandshakeEstablished):
        Verify with SoAd_GetSoConMode() that the socket connection is in SOAD_SOCON_RECONNECT.
    05: VP(SoAd.Dsn.Func.TLS.Tcp.TlsHandshakeEstablished):
        Verify that the PduR_SoAdTpStartOfReception() was not called which indicates that the
        TCP TP reception stream is not started.
    06: Call SoAd_TcpIpEvent(TCPIP_TLS_HANDSHAKE_SUCCEEDED) to indicate that TLS connection is
        established.
    07: VP(SoAd.Dsn.Func.TLS.Tcp.TlsHandshakeEstablished):
        Verify with SoAd_GetSoConMode() that the socket connection is in SOAD_SOCON_ONLINE.
    08: VP(SoAd.Dsn.Func.TLS.Tcp.TlsHandshakeEstablished):
        Verify that the PduR_SoAdTpStartOfReception() was called.
  
Test Input: SoAd_TcpIpEvent(TCPIP_TLS_HANDSHAKE_SUCCEEDED)
Test Output: Connection gets SOAD_SOCON_ONLINE.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.Dsn.Func.TLS.Tcp_Client_ChangeParameter</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1077</internalId></provcov>
        <provcov>
          <linksto>SoAd.Dsn.Func.TLS.Tcp.TlsHandshakeEstablished</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1079</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1668</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_TlsTcpChangeParameter_InitiateFalse</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>3750</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    Check if SoAdSocketProtocol is SoAdSocketTcp, SoAdSocketTcpInitiate is FALSE and
    valid SoAdTlsConnectionRef, TcpIp_ChangeParamter() api will not be called.
    Check if SoAdTlsEnabled is TRUE and a client wants to connect, TcpIp will call
    SoAd_TcpAccepted() and in this function SoAd shall call TcpIp_ChangeParamter()
    with TCPIP_PARAMID_TLS_CONNECTION_ASSIGNMENT and the configured id TlsConnectionId.
    Check that SoAd_TcpIpEvent(), called with the event TCPIP_TLS_HANDSHAKE_SUCCEEDED,
    will mark the connection as established and allows data exchange.
  &lt;/para&gt;
  
Test Object: 
    SoAd_ChangeParameter()
  
Test Precondition: 
   - SoAdDevErrorDetect is enabled
   - SoAdSocketTcpInitiate is False
  
Test Execution: 
    01: Call SoAd_LocalIpAddrAssignmentChg() and SoAd_MainFunction() to open a socket connection.
    02: VP(): TcpIp_ChangeParameter() is not called with ParameterId set to
        TCPIP_PARAMID_TLS_CONNECTION_ASSIGNMENT.
    03: Because SoAdSocketTcpInitiate is set to FALSE, TCPIP module must call SoAd_TcpAccepted().
    04: VP(SoAd.Dsn.Func.TLS.Tcp_TcpAccepted_ChangeParameter): TcpIp_ChangeParameter() is called
        with ParameterId set to TCPIP_PARAMID_TLS_CONNECTION_ASSIGNMENT and with the correct
        TlsConnectionId.
    05: VP(): Verify that receiving frames are discarded.
    06: VP(): Verify that SoCon is in RECONNECT mode.
    07: Call SoAd_MainFunction().
    08: VP(): Verify that receiving frames are discarded.
    09: VP(): Verify that SoCon is in RECONNECT mode.
    10: When the TLS connection is fully established, TcpIp will call SoAd_TcpIpEvent()
        with the event TCPIP_TLS_HANDSHAKE_SUCCEEDED, in order to mark the connection as
        established and allow data exchange.
    11: VP(SoAd.Dsn.Func.TLS.Tcp.TlsHandshakeEstablished): Verify that the
        PduR_SoAdTpStartOfReception() was called.
    12: VP(SoAd.Dsn.Func.TLS.Tcp.TlsHandshakeEstablished): Verify that the socket connection is
        opened.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.Dsn.Func.TLS.Tcp_TcpAccepted_ChangeParameter</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1078</internalId></provcov>
        <provcov>
          <linksto>SoAd.Dsn.Func.TLS.Tcp.TlsHandshakeEstablished</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1079</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1669</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_TcpClient_WildcardRemoteAddr</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>3923</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    This test shall verify that a TCP client connection with configured wildcard remote address
    only goes ONLINE if remote address is set and leaves ONLINE if remote address was released.
  &lt;/para&gt;
  
Test Object: 
    TCP Client with wild card remote address
  
Test Precondition: 
   - SoAdDevErrorDetect is enabled
   - SoAdSocketTcpInitiate is TRUE
  
Test Execution: 
    01: Open a TCP client connection with configured wildcard remote address.
    02: Call SoAd_MainFunction() to trigger the state machine.
    03: VP(): Verify that no TCP API was called and connection is still not ONLINE.
    04: Call SoAd_SetUniqueRemoteAddr() to set a non wildcard remote address.
    05: Call SoAd_MainFunction() to trigger the state machine.
    06: VP(): The TCP client socket connection shall call the sequence TcpIp_GetSocket(),
              TcpIp_Bind(), TcpIp_ChangeParameter() and TcpIp_TcpConnect() to establish a
              connection to a TCP server with proper remote address.
    07: Call SoAd_TcpConnected() to indicate that TCP client is connected to a server.
    08: VP(): Verify that connection went online.
    09: Call SoAd_ReleaseRemoteAddr() to release the remote address.
    10: Call SoAd_MainFunction() to trigger the state machine.
    11: VP(): Verify that SoAdGenUL_SoConModeChg(SOAD_SOCON_RECONNECT) was called indicating that
        ONLINE was left and TcpIp_Close() was called, since e remote address is not valid anymore.
    12: Close TCP client again.
    13: VP(): Verify that SoAdGenUL_SoConModeChg(SOAD_SOCON_OFFLINE).
    14: Call SoAd_TcpIpEvent(TCPIP_TCP_CLOSED) indicate that socket is closed.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpSM_TriggerConnecting_TcpClient</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1002</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1670</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_TcpClient_RemoteAddrHandlingAfterRestart</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>4095</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    This test shall verify for a TCP client connection with configured wildcard remote address
    and already remote address set with SoAd_SetUniqueRemoteAddr() that:
    * The remote address is not reset to wildcard if connection is closed by lower layer.
    * The remote address is reset to wildcard if the same amount of SoAd_ReleaseRemoteAddr() is
      called.
  &lt;/para&gt;
  
Test Object: 
    TCP Client with wild card remote address
  
Test Precondition: 
   - SoAdSocketTcpInitiate is TRUE
   - SoAdGenUL_SoConModeChg is configured
  
Test Execution: 
    01: Call SoAd_SetUniqueRemoteAddr() to set a non wildcard remote address. The call is performed
        twice which requires that SoAd_ReleaseRemoteAddr() also needs to be called twice to release
        the remote address again.
    02: Bring the TCP client to ONLINE.
    03: SoAd_TcpIpEvent(TCPIP_TCP_CLOSED) to indicate a lower layer closing.
    04: Call SoAd_MainFunction() to trigger the state machine.
    05: VP(): Verify that SoAdGenUL_SoConModeChg(SOAD_SOCON_RECONNECT) was called indicating that
        ONLINE was left.
    06: VP(): Verify that TcpIp_GetSocket(), TcpIp_Bind(), TcpIp_ChangeParameter()
        and TcpIp_TcpConnect() was called with initially set remote address indicating
        that the remote address was not reset.
    07: Call SoAd_TcpConnected() to connect the TCP client to a server and to bring the connection
        to ONLINE.
    08: Call SoAd_ReleaseRemoteAddr() twice to release the remote address and SoAd_MainFunction()
        to trigger the state machine.
    09: VP(): Verify that SoAdGenUL_SoConModeChg(SOAD_SOCON_RECONNECT) was called indicating that
        ONLINE was left and TcpIp_Close() that the socket got closed, since the remote address was
        released. Due to the reset of the remote address to wild card no connection establishment
        is performed.
  
Test Input: 
    * TCP Client with wild card remote address
    * Lower layer closure is performed with SoAd_TcpIpEvent(TCPIP_TCP_CLOSED).
    * Remote address is released via SoAd_ReleaseRemoteAddr().
  
Test Output: 
    * The remote address is not reset to wildcard if connection is closed by lower layer.
    * The remote address is reset to wildcard if the same amount of SoAd_ReleaseRemoteAddr() is
      called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.TcpClient</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1101</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.RemoteAddressHandling.KeepRemoteAddrAfterRestartClose</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1102</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1671</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_TcpClient_RemoteAddrHandlingAfterClosure</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>4317</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    This test shall verify for a TCP client connection with configured wildcard remote address
    and already remote address set with SoAd_SetUniqueRemoteAddr() that:
    * The remote address is not reset to wildcard if connection is closed by upper layer.
    * The remote address is reset to wildcard if the same amount of SoAd_ReleaseRemoteAddr() is
      called.
  &lt;/para&gt;
  
Test Object: 
    TCP Client with wild card remote address
  
Test Precondition: 
   - SoAdSocketTcpInitiate is TRUE
   - SoAdGenUL_SoConModeChg is configured
  
Test Execution: 
    01: Call SoAd_SetUniqueRemoteAddr() to set a non wildcard remote address. The call is performed
        twice which requires that SoAd_ReleaseRemoteAddr() also needs to be called twice to release
        the remote address again.
    02: Bring the TCP client to ONLINE.
    03: Call SoAd_CloseSoCon(), SoAd_OpenSoCon(), SoAd_TcpIpEvent(SocketId, TCPIP_TCP_CLOSED);
        and SoAd_MainFunction() to trigger a reopening sequence.
    04: VP(): Verify that SoAdGenUL_SoConModeChg(SOAD_SOCON_OFFLINE) and
        SoAdGenUL_SoConModeChg(SOAD_SOCON_RECONNECT) was called indicating the reopen sequence.
    05: VP(): Verify that TcpIp_GetSocket(), TcpIp_Bind(), TcpIp_ChangeParameter()
        and TcpIp_TcpConnect() was called with initially set remote address indicating
        that the remote address was not reset.
    06: Call SoAd_TcpConnected() to connect the TCP client to a server and to bring the connection
        to ONLINE.
    07: Close the connection.
    08: Call SoAd_ReleaseRemoteAddr() twice to release the remote address.
    09: Call SoAd_OpenSoCon() and SoAd_MainFunction() to open the connection.
    10: VP(): Verify that since remote address is reset to wild card
        no connection establishment is performed.
  
Test Input: 
    * TCP Client with wild card remote address
    * Upper layer closure is performed with SoAd_CloseSoCon().
    * Remote address is released via SoAd_ReleaseRemoteAddr().
  
Test Output: 
    * The remote address is not reset to wildcard if connection is closed by upper layer.
    * The remote address is reset to wildcard if the same amount of SoAd_ReleaseRemoteAddr() is
      called.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.TcpClient</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1101</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.RemoteAddressHandling.KeepRemoteAddrAfterRestartClose</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1102</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1672</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_TcpServer_ReleaseRemoteAddr</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>4531</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies for a TCP server connection with wildcard and remote address set via
    SoAd_SetUniqueRemoteAddr() that:
    * SoAd_ReleaseRemoteAddr() does not trigger a connection closure.
    * After SoAd_ReleaseRemoteAddr() is called a closure from the remote TCP client will reset the
      remote address for this connection to allow other nodes to connect.
  
Test Object: 
    TCP Server with wildcard remote address
  
Test Precondition: 
   - SoAdSocketTcpInitiate is FALSE
  
Test Execution: 
    01: Call SoAd_SetUniqueRemoteAddr() to set a remote address for the wildcard server.
    02: Bring the Server connection to ONLINE.
    03: Call SoAd_ReleaseRemoteAddr() to release the remote address and SoAd_MainFunction() to
        trigger the state machine.
    04 VP(): Verify that the the state ONLINE was not left.
    05: SoAd_TcpIpEvent(TCPIP_TCP_CLOSED) and SoAd_MainFunction() to indicate a socket closure from
        the remote TCP client.
    06: Call SoAd_TcpAccepted() with another remote address.
    07 VP(): Verify that the same socket connection went online again.
  
Test Input: 
    * TCP Server with wildcard remote address
    * Lower layer closure is performed with SoAd_TcpIpEvent(TCPIP_TCP_CLOSED).
    * Remote address is released via SoAd_ReleaseRemoteAddr().
  
Test Output: 
    * SoAd_ReleaseRemoteAddr() does not trigger a connection closure.
    * After SoAd_ReleaseRemoteAddr() is called a closure from the remote TCP client will reset the
      remote address for this connection to allow other nodes to connect.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.RemoteAddressHandling.ReleaseRemoteAddr.TcpServer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1100</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1673</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_03_Restart_After_CloseSoCon_And_TCPIP_TCP_CLOSED_TCP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>4662</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    This test verifies that if a SoCon is ONLINE after calling SoAd_OpenSoCon() and then goes
    to OFFLINE after calling SoAd_CloseSoCon() when TcpIpClose() is set to retun E_NOT_OK and
    SoAd_TcpIpEvent(TCPIP_TCP_CLOSED) is called once the SoCon is OFFLINE, TcpIp_TcpConnect() is
    only called once after the SoCon is opened again.
  &lt;/para&gt;
  
Test Object: 
  
Test Precondition: 
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00645</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>253</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1674</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_TcpClient_Close_OFFLINE_SoCon</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0003_General.c</sourcefile>
      <sourceline>4774</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    This test verifies that if a SoCon is closed before it has had the chance to exit state OFFLINE,
    a transition is performed from CLOSED to CLOSED and the SOAD_SOCONSTATE_FLAG_CLOSE_SOCON flag is cleared.
  &lt;/para&gt;
  
Test Object: 
    TCP Client with wild card remote address
  
Test Precondition: 
  
Test Execution: 
    01: Call SoAd_OpenSoCon() twice
    02: Call SoAd_MainFunction()
    03: Verify SoCon is still in state OFFLINE
    04: Call SoAd_CloseSoCon() twice to set SOAD_SOCONSTATE_FLAG_CLOSE_SOCON flag
    05: Verify flag was set
    06: Call SoAd_MainFunction()
    07: Verify transition from state CLOSED to CLOSED was performed and flag was cleared
    08: Set non-wildcard remote address and call SoAd_OpenSoCon()
    09: Verify SoCon has transitioned to CONNECTING
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00588</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>203</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00589</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>204</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1675</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SoAd_ConTest_00_04_PartlyBuffered</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0004_RxUpperLayerTp.c</sourcefile>
      <sourceline>190</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify that a partly bufferd PDU gets handled correctly if the preceding PDU was dropped.
&lt;/para&gt;

Test Object: 

Test Precondition: None.
Test Execution: 
  01: Set stubs so that the first two PDUs fail to be delivered and are dropped, while the 3rd and 4th PDU
      are successful.
  02: Call RxIndication() with 48 bytes payload, with the last PDU being only half buffered.
  03: Call SoAd_MainFunction().
  04: VP(): Verify that the first 2 PDUs are dropped but the first part of the 3rd PDU is deliverd.
  05: VP(): Verify that all received bytes are acknowledged to TcpIp.
  06: Call RxIndication() with 28 bytes payload. The first 8 bytes belong to the last PDU of the first payload.
  07: VP(): verify that the missing segement of the 3rd PDU and 4th PDU are deliverd and acknowledged successfully.
  08: VP(): Verify there are no further calls.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0110.Rx.Tcp.Tp.Header.Seg.DiscardPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1090</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1676</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_04_Udp_Con10_Tp_RxInd_NoHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0004_RxUpperLayerTp.c</sourcefile>
      <sourceline>380</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_RxIndication for a connection configured with:
  - TP socket connection is set up automatically (i.e. SoAdSocketAutomaticSoConSetup is set to true)
  - SoAdLocalIpAddrAssigmentChg is enabled
  - remote address/port is set by configuration
  - UdpListenOnly is disabled
  - header disabled
&lt;/para&gt;

Test Object: 
  SoAd_RxIndication()
  SoAd_MainFunction()

Test Precondition: 
  Initialize SoAd for the first time in this file
  Considered socket connection is opened (inherent call of SoAd_Mainfunction)

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00568.1a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>470</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00568.1c</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>472</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1677</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_04_Udp_Con11_Tp_RxInd_WithHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0004_RxUpperLayerTp.c</sourcefile>
      <sourceline>501</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_RxIndication for a connection configured with:
  - TP socket connection is set up automatically (i.e. SoAdSocketAutomaticSoConSetup is set to true)
  - SoAdLocalIpAddrAssigmentChg is enabled
  - remote address/port is set by configuration
  - UdpListenOnly is disabled
  - header enabled
&lt;/para&gt;

Test Object: 
  SoAd_RxIndication()
  SoAd_MainFunction()

Test Precondition: 
  Considered socket connection is opened (inherent call of SoAd_Mainfunction)

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>479</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1c</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1678</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_04_Udp_Con10_Tp_RxInd_Segmented_NoHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0004_RxUpperLayerTp.c</sourcefile>
      <sourceline>632</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_RxIndication for a connection configured with:
  - TP socket connection is set up automatically (i.e. SoAdSocketAutomaticSoConSetup is set to true)
  - SoAdLocalIpAddrAssigmentChg is enabled
  - remote address/port is set by configuration
  - UdpListenOnly is disabled
  - header disabled
&lt;/para&gt;

Test Object: 
  SoAd_RxIndication()
  SoAd_MainFunction()

Test Precondition: 
  - Initialize SoAd.
  - Considered socket connection is opened (inherent call of SoAd_Mainfunction).

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00568.1a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>470</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00568.1c</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>472</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1679</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_04_Udp_Con11_Tp_RxInd_Segmented_WithHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0004_RxUpperLayerTp.c</sourcefile>
      <sourceline>798</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_RxIndication for a connection configured with:
  - TP socket connection is set up automatically (i.e. SoAdSocketAutomaticSoConSetup is set to true)
  - SoAdLocalIpAddrAssigmentChg is enabled
  - remote address/port is set by configuration
  - UdpListenOnly is disabled
  - header enabled
&lt;/para&gt;

Test Object: 
  SoAd_RxIndication()
  SoAd_MainFunction()

Test Precondition: 
  Considered socket connection is opened (inherent call of SoAd_Mainfunction)

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>479</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1c</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1680</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_04_Partial_RxUdpTpAPI_WithHeader_Ringbuffer</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0004_RxUpperLayerTp.c</sourcefile>
      <sourceline>946</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_RxIndication for a connection configured with:
  - TP socket connection
  - remote address/port is set by configuration
  - protocol is set to UDP
  - header mode enabled
  - SoAd_RxIndication will drop Pdus with DET but will not notify UL after first Pdu is stored in
    ringbuffer and next Pdu does not fit in Buffer anymore.
&lt;/para&gt;

Test Object: 
  SoAd_RxIndication()
  SoAd_MainFunction()

Test Precondition: 
  Socket connection is opened

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>480</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1d</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>482</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>483</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1681</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_04_RxTcpRxRingBufferCopyRxDataRejects</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0004_RxUpperLayerTp.c</sourcefile>
      <sourceline>1147</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_RxIndication for a connection configured with:
  - TP socket connection
  - remote address/port is set by configuration
  - protocol is set to TCP
  - header mode enabled
  - SoAd will drop first Pdu after UL_SoAdTpCopyRxData returns BUFREQ_E_NOT_OK in second call.
  - SoAd will process further PDU correctly.
&lt;/para&gt;

Test Object: 
  SoAd_RxIndication()
  SoAd_MainFunction()

Test Precondition: 
  Socket connection is opened

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0110.Rx.Tcp.Tp.Header.Seg.DiscardPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1090</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1682</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_04_RxTcpRxRingBufferCopyRxDataAndStartOfReceptionReject</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0004_RxUpperLayerTp.c</sourcefile>
      <sourceline>1334</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_RxIndication for a connection configured with:
  - TP socket connection
  - remote address/port is set by configuration
  - protocol is set to TCP
  - header mode enabled
  - SoAd will drop first Pdu after UL_SoAdTpCopyRxData returns BUFREQ_E_NOT_OK in second call.
  - SoAd will drop second PDU after UL_SoAdTpStartOfReception returns BUFREQ_E_NOT_OK.
&lt;/para&gt;

Test Object: 
  SoAd_RxIndication()
  SoAd_MainFunction()

Test Precondition: 
  Socket connection is opened

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0110.Rx.Tcp.Tp.Header.Seg.DiscardPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1090</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1683</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_04_RxTcpRxRingBufferTpStartOfReceptionRejects</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0004_RxUpperLayerTp.c</sourcefile>
      <sourceline>1495</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_RxIndication for a connection configured with:
  - TP socket connection
  - remote address/port is set by configuration
  - protocol is set to UDP
  - header mode enabled
  - SoAd will drop first PDU after UL_SoAdTpStartOfReception returns BUFREQ_E_NOT_OK and deliver
    second PDU when fully received.
&lt;/para&gt;

Test Object: 
  SoAd_RxIndication()
  SoAd_MainFunction()

Test Precondition: 
  Socket connection is opened

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0110.Rx.Tcp.Tp.Header.Seg.DiscardPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1090</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1684</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_04_RxUdpRxRingBufferCopyRxDataRejects</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0004_RxUpperLayerTp.c</sourcefile>
      <sourceline>1674</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_RxIndication for a connection configured with:
  - TP socket connection
  - remote address/port is set by configuration
  - protocol is set to UDP
  - header mode enabled
  - SoAd will drop first Pdus as second CopyRxData call returns BUFREQ_E_NOT_OK and will notify UL
  - SoAd will pass second PDU to UL
&lt;/para&gt;

Test Object: 
  SoAd_RxIndication()
  SoAd_MainFunction()

Test Precondition: 
  Socket connection is opened

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00573</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>194</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1685</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_04_RxUdpTp_WithHeader_Ringbuffer_NotContinuous</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0004_RxUpperLayerTp.c</sourcefile>
      <sourceline>1818</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_RxIndication for a connection configured with:
  - TP socket connection
  - remote address/port is set by configuration
  - protocol is set to UDP
  - header mode enabled
  - SoAd_RxIndication will store Pdus in Ringbuffer. Header of second Pdu won't be stored in
    ringbuffer continuously
&lt;/para&gt;

Test Object: 
  SoAd_RxIndication()
  SoAd_MainFunction()

Test Precondition: 
  Socket connection is opened

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1d</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>482</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1686</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_04_Tcp_Con12_Tp_RxInd_NoHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0004_RxUpperLayerTp.c</sourcefile>
      <sourceline>1996</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_RxIndication for a connection configured with:
  - TP socket connection is set up automatically (i.e. SoAdSocketAutomaticSoConSetup is set to true)
  - SoAdLocalIpAddrAssigmentChg is enabled
  - remote address/port is set by configuration
  - protocol ist set to TCP
  - header mode disabled
  - TcpIp_Close() will be called with abort set to FALSE, because it was not initiated by
    SoAd_CloseSoCon().
&lt;/para&gt;

Test Object: 
  SoAd_RxIndication()
  SoAd_MainFunction()

Test Precondition: 
  Considered socket connection is opened (inherent call of SoAd_Mainfunction)

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00568.1a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>470</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00568.1c</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>472</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00688</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>288</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00562.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>456</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00562.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>457</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00562.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>458</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00562.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>462</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1687</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_04_Tcp_Tp_RxInd_NoHeader_DataFromBuffer</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0004_RxUpperLayerTp.c</sourcefile>
      <sourceline>2246</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_RxIndication for suspended RxIndication Call for :
  - TP socket connection is set up automatically (i.e. SoAdSocketAutomaticSoConSetup is set to true)
  - protocol ist set to TCP
  - header mode disabled
  - upper layer function via UL_SoAdCopyRxData() always returns an available buffer size &gt; 0
  - SoAdSocketTpRxBufferMin is configured
  - Multiple frames are received that do not get processed during reception but are suspended
  to the next main function
&lt;/para&gt;

Test Object: 
  SoAd_RxIndication()
  SoAd_MainFunction()

Test Precondition: 
  Considered socket connection is opened (inherent call of SoAd_Mainfunction)

Test Execution: None.
Test Input: 
  Reception of a valid TCP Frame

Test Output: 
  Delayed Processing within MainFunction and forwarding to upper Layer
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00569.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>475</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1688</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_04_Tcp_Con13_Tp_RxInd_WithHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0004_RxUpperLayerTp.c</sourcefile>
      <sourceline>2471</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_RxIndication for a connection configured with:
  - TP socket connection is set up automatically (i.e. SoAdSocketAutomaticSoConSetup is set to true)
  - SoAdLocalIpAddrAssigmentChg is enabled
  - remote address/port is set by configuration
  - protocol ist set to TCP
  - header enabled
&lt;/para&gt;

Test Object: 
  SoAd_RxIndication()
  SoAd_MainFunction()

Test Precondition: 
  Considered socket connection is opened (inherent call of SoAd_Mainfunction)

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>479</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1c</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1d</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>482</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1689</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_04_Tcp_Con13_Tp_RxInd_WithHeader_Seg</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0004_RxUpperLayerTp.c</sourcefile>
      <sourceline>2643</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_RxIndication for a connection configured with:
  - TP socket connection is set up automatically (i.e. SoAdSocketAutomaticSoConSetup is set to true)
  - SoAdLocalIpAddrAssigmentChg is enabled
  - remote address/port is set by configuration
  - protocol ist set to TCP
  - header enabled
&lt;/para&gt;

Test Object: 
  SoAd_RxIndication()
  SoAd_MainFunction()

Test Precondition: 
  Considered socket connection is opened (inherent call of SoAd_Mainfunction)

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>479</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1c</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1d</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>482</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00564</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1690</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_04_Tcp_Con13_Tp_RxInd_WithHeader_SegInHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0004_RxUpperLayerTp.c</sourcefile>
      <sourceline>2894</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_RxIndication for a connection configured with:
  - TP socket connection is set up automatically (i.e. SoAdSocketAutomaticSoConSetup is set to true)
  - SoAdLocalIpAddrAssigmentChg is enabled
  - remote address/port is set by configuration
  - protocol ist set to TCP
  - header enabled
  - segmentation of header in two segments
&lt;/para&gt;

Test Object: 
  SoAd_RxIndication()
  SoAd_MainFunction()

Test Precondition: 
  Considered socket connection is opened (inherent call of SoAd_Mainfunction)

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>479</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1c</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1d</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>482</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00564</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1691</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_04_Udp_Con10_Tp_RxInd_NoHeader_Discard</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0004_RxUpperLayerTp.c</sourcefile>
      <sourceline>3089</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that UDP PDU is discarded in case the remaining part, that can not be
    processed by the upper layer immediately, is larger than the remaining ring
    buffer size. In such a case, if development error detection is enabled, SoAd will
    raise SOAD_E_NOBUFS error.
  
Test Object: 
    SoAd_RxIndication()
    SoAd_MainFunction()
  
Test Precondition: 
    - SoAd is initialized.
    - Socket connection is online
  
Test Execution: 
    01: Call SoAd_RxIndication with an oversized PDU.
    02: VP(SoAd.SWS_SoAd_00568.1a): Verify that TpCopyRxData is called to query the
        available buffer.
    03: VP(SoAd.SWS_SoAd_00693): Verify that DET error SOAD_E_NOBUFS is reported.
    04: VP(SoAd.SWS_SoAd_00568.1b): Verify that PDU is not delivered to the upper layer.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00568.1a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>470</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00568.1b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>471</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00693</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>299</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1692</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_04_Tcp_Con12_Tp_RxInd_NoHeader_Discard</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0004_RxUpperLayerTp.c</sourcefile>
      <sourceline>3166</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that TCP PDU is discarded in case the remaining part, that can not be
    processed by the upper layer immediately, is larger than the remaining ring
    buffer size. In such a case, if development error detection is enabled, SoAd will
    raise SOAD_E_NOBUFS error.
  
Test Object: 
    SoAd_RxIndication()
    SoAd_MainFunction()
  
Test Precondition: 
    - SoAd is initialized.
    - Socket connection is online
  
Test Execution: 
    01: Call SoAd_RxIndication with an oversized PDU.
    02: VP(SoAd.SWS_SoAd_00568.1a): Verify that PduR_SoAdTpCopyRxData() is called to query
        the available buffer.
    03: VP(SoAd.SWS_SoAd_00693): Verify that DET error SOAD_E_NOBUFS is reported.
    04: Call SoAd_MainFunction().
    05: VP(SoAd.SWS_SoAd_00642.a.TCP): Verify that TcpIp_Close(FALSE) was called for
        accepted socket.
    06: VP(SoAd.SWS_SoAd_00568.1b): Verify that PDU is not delivered to the upper layer -
        no function is called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00568.1a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>470</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00568.1b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>471</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00642.a.TCP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>430</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00693</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>299</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1693</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_04_Udp_Con11_Tp_RxInd_WithHeader_Discard</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0004_RxUpperLayerTp.c</sourcefile>
      <sourceline>3262</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that UDP PDU is discarded in case the remaining part, that can not be
    processed by the upper layer immediately, is larger than the remaining ring
    buffer size. In such a case, if development error detection is enabled, SoAd will
    raise SOAD_E_NOBUFS error, and call SoAd_TpRxIndication() with E_NOT_OK.
  
Test Object: 
    SoAd_RxIndication()
    SoAd_MainFunction()
  
Test Precondition: 
    - SoAd is initialized.
    - Socket connection is online
  
Test Execution: 
    01: Call SoAd_RxIndication with an oversized PDU.
    02: VP(SoAd.SWS_SoAd_00571.1a):Verify that SoAd_TpStartOfReception() is called with
        correct parameters.
    03: VP(SoAd.SWS_SoAd_00571.1b): Verify that SoAd_TpRxIndication() is called with
        E_NOT_OK.
    04: VP(SoAd.SWS_SoAd_00693): Verify that DET error SOAD_E_NOBUFS is reported.
    05: VP(SoAd.SWS_SoAd_00571.1b): Verify that PDU is not delivered to the upper layer.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>479</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>480</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00693</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>299</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1694</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_04_Tcp_Con43_Tp_RxInd_WithHeader_Reconnect</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0004_RxUpperLayerTp.c</sourcefile>
      <sourceline>3360</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify a TCP listen socket connection is reestablished if the connection is closed by a reset
  from the remote node. The reopend connection shall not be affected by previous receptions.
&lt;/para&gt;

Test Object: 
  SoAd_RxIndication()
  SoAd_MainFunction()
  Reconnections

Test Precondition: 
  Considered socket connection is opened (inherent call of SoAd_Mainfunction)

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00586</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1695</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_04_StartofReceptionNotOk</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0004_RxUpperLayerTp.c</sourcefile>
      <sourceline>3559</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that a frame is received and
    &lt;UL&gt;_StartOfReception returns a value other than BUFREQ_OK for a
    TP PDU with header mode enabled, the the frame shall be discarded.
    PDUs afterwards shall be correctly processed.
  
Test Object: 
    * SoAd_RxIndication()
    * Header mode enabled
    * TCP
    * TP API
  
Test Precondition: 
    SoAd is initialized
    Considered socket connection is opened.
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00572</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>193</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1696</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_04_CopyRxDataNotOk</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0004_RxUpperLayerTp.c</sourcefile>
      <sourceline>3720</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that if UL_SoAdTpCopyRxData() returns a value other than BUFREQ_OK, the
  module shall close the socket connection within the next main function. Reception and
  transmission on the same socket shall not be possible.
  This test case is performed for:
  * Header mode disabled.
  * UDP
  * TP API
&lt;/para&gt;

Test Object: 
  SoAd_RxIndication()

Test Precondition: 
  * SoAd is initialized
  * Considered socket connection is opened.

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00570.a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>477</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00570.b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>478</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1697</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_04_Bind_NotOk</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0004_RxUpperLayerTp.c</sourcefile>
      <sourceline>3852</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that if TcpIp_Bind() returns E_NOT_OK, the socket will not be opened.
&lt;/para&gt;

Test Object: 
  SoAd_RxIndication()

Test Precondition: 
  * SoAd is initialized

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.Bind_NOK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>612</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdSocketIpAddrAssignmentChgNotification</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>704</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdSocketRemoteIpAddress</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>708</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdSocketRemotePort</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>709</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1698</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_04_Udp_Con10_Tp_RepeatedCopyRxData</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0004_RxUpperLayerTp.c</sourcefile>
      <sourceline>4025</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_RxIndication for a connection configured with:
  - TP socket connection is set up automatically (i.e. SoAdSocketAutomaticSoConSetup is set to true)
  - SoAdLocalIpAddrAssigmentChg is enabled
  - remote address/port is set by configuration
  - protocol ist set to TCP
  - header enabled
  Verifies that CopyRxData is called multiple times until the whole frame passed to SoAd_RxIndication
  was handed to the uppler layer.
&lt;/para&gt;

Test Object: 
  SoAd_RxIndication()
  SoAd_MainFunction()

Test Precondition: 
  Considered socket connection is opened (inherent call of SoAd_Mainfunction)

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>479</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1c</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1d</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>482</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00564</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1699</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_04_PostBuild_Selectable_SocketTpRxBufferMin</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0004_RxUpperLayerTp.c</sourcefile>
      <sourceline>4220</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that PDU is not discarded as it was in test
    SoAd_ConTest_00_04_Udp_Con10_Tp_RxInd_NoHeader_Discard if different
    SoAdSocketTpRxBufferMin variant is initialized
  
Test Object: 
    SoAd_RxIndication()
    SoAd_MainFunction()
  
Test Precondition: 
    - SoAd is initialized.
    - Socket connection is online
  
Test Execution: 
    01: Call SoAd_RxIndication with same PDU size for different configuration variant.
    02: VP(SoAd.EB.PbVariantSupport.SoAdSocketTpRxBufferMin):
        Check that no DET is reported
        Verify that PduR_SoAdTpCopyRxData() is called to query
        the available buffer
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdSocketTpRxBufferMin</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>705</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1700</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_04_Tcp_UL_SoAdTpRxIndication_Call_On_CloseConnection</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0004_RxUpperLayerTp.c</sourcefile>
      <sourceline>4288</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies that no UL_SoAdTpRxIndication() gets called when calling
  SoAd_CloseSoCon() in a state other than ONLINE, as this could lead to a
  recursion when the UL_SoAdTpRxIndication() resets the SoCon by
  calling SoAd_CloseSoCon() + SoAd_OpenSoCon() leading to a steadily growing
  refcounter for the SoCon.
&lt;/para&gt;

Test Object: 
  SoAd_CloseSoCon()

Test Precondition: 

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00511</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>137</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1701</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SoAd_ConTest_00_05_Udp_Con10_Tp_Transmit_NoHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0005_TxUpperLayerTp.c</sourcefile>
      <sourceline>156</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_TpTransmit for a connection configured with:
  - TP socket connection is set up automatically (i.e. SoAdSocketAutomaticSoConSetup is set to true)
  - SoAdLocalIpAddrAssigmentChg is enabled
  - remote address/port is set by configuration
  - UdpListenOnly is disabled
  - header disabled
&lt;/para&gt;

Test Object: 
  SoAd_TpTransmit()
  SoAd_CopyTxData()
  SoAd_TxConfirmation()
  SoAd_MainFunction()

Test Precondition: 
  Initialize SoAd for the first time in this file
  Considered socket connection is opened (inherent call of SoAd_Mainfunction)

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00551.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>450</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00551.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>451</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00552.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>452</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00552.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>453</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00555</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00557</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>178</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1702</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_05_Udp_Con11_Tp_Transmit_WithHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0005_TxUpperLayerTp.c</sourcefile>
      <sourceline>297</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_TpTransmit for a connection configured with:
  - TP socket connection is set up automatically (i.e. SoAdSocketAutomaticSoConSetup is set to true)
  - SoAdLocalIpAddrAssigmentChg is enabled
  - remote address/port is set by configuration
  - UdpListenOnly is disabled
  - header enabled
&lt;/para&gt;

Test Object: 
  SoAd_TpTransmit()
  SoAd_CopyTxData()
  SoAd_TxConfirmation()
  SoAd_MainFunction()

Test Precondition: 
  Considered socket connection is opened (inherent by call of SoAd_Mainfunction)

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00551.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>450</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00551.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>451</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00552.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>452</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00552.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>453</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00555</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00557</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>178</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1703</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_05_Udp_Con10_Tp_Transmit_Segmented_NoHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0005_TxUpperLayerTp.c</sourcefile>
      <sourceline>441</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call SoAd_TpTransmit with PDU segmented for a connection configured with:
  - TP socket connection is set up automatically (i.e. SoAdSocketAutomaticSoConSetup is set to true)
  - SoAdLocalIpAddrAssigmentChg is enabled
  - remote address/port is set by configuration
  - UdpListenOnly is disabled
  - header DISABLED
&lt;/para&gt;

Test Object: 
  SoAd_TpTransmit()
  SoAd_MainFunction()
  SoAd_CopyTxData()

Test Precondition: 
  Considered socket connection is opened (inherent call of SoAd_Mainfunction)

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00551.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>450</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00551.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>451</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00552.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>452</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00552.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>453</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00553.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>455</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00555</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1704</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_05_Udp_Con11_Tp_Transmit_Segmented_WithHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0005_TxUpperLayerTp.c</sourcefile>
      <sourceline>619</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_TpTransmit for a connection configured with:
  - TP socket connection is set up automatically (i.e. SoAdSocketAutomaticSoConSetup is set to true)
  - SoAdLocalIpAddrAssigmentChg is enabled
  - remote address/port is set by configuration
  - UdpListenOnly is disabled
  - header ENABLED
&lt;/para&gt;

Test Object: 
  SoAd_TpTransmit()
  SoAd_MainFunction()
  SoAd_CopyTxData()

Test Precondition: 
  Considered socket connection is opened (inherent call of SoAd_Mainfunction)

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00555</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00557</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>178</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00197</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1705</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_05_Tcp_Con12_Tp_Transmit_NoHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0005_TxUpperLayerTp.c</sourcefile>
      <sourceline>776</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_TpTransmit for a connection configured with:
  - TP socket connection is set up automatically (i.e. SoAdSocketAutomaticSoConSetup is set to true)
  - SoAdLocalIpAddrAssigmentChg is enabled
  - remote address/port is set by configuration
  - protocol is set to TCP
  - header disabled
&lt;/para&gt;

Test Object: 
  SoAd_TpTransmit()
  SoAd_CopyTxData()
  SoAd_TxConfirmation()
  SoAd_MainFunction()

Test Precondition: 
  SoAd is initialized
  Considered socket connection is opened (inherent call of SoAd_Mainfunction)

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00554</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00556</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00558</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>179</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1706</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_05_Tcp_Con12_TpConfirmation</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0005_TxUpperLayerTp.c</sourcefile>
      <sourceline>961</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify proper call of SoAd_TpTransmit for a connection configured with:
    - TP socket connection is set up automatically (i.e. SoAdSocketAutomaticSoConSetup is set to true)
    - SoAdLocalIpAddrAssigmentChg is enabled
    - remote address/port is set by configuration
    - protocol is set to TCP
    - header disabled
  
Test Object: 
    SoAd_TpTransmit()
    SoAd_CopyTxData()
    SoAd_TxConfirmation()
  
Test Precondition: 
    TCP socket connection with SoAdSocketTcpImmediateTpTxConfirmation set to TRUE.
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SoAd_TpTransmit_3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>685</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdSocketTcpImmediateTpTxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>715</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1707</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_05_Tcp_Con13_TpConfirmation</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0005_TxUpperLayerTp.c</sourcefile>
      <sourceline>1114</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify proper call of SoAd_TpTransmit for a connection configured with:
    - TP socket connection is set up automatically (i.e. SoAdSocketAutomaticSoConSetup is set to true)
    - SoAdSocketTcpImmediateTpTxConfirmation is FALSE
    - remote address/port is set by configuration
    - protocol is set to TCP
    - header disabled
  
Test Object: 
    SoAd_TpTransmit()
    SoAd_CopyTxData()
    SoAd_TxConfirmation()
  
Test Precondition: 
    TCP socket connection with SoAdSocketTcpImmediateTpTxConfirmation set to FALSE.
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SoAd_TpTransmit_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>684</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1708</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_05_Udp_Con10_TpConfirmation</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0005_TxUpperLayerTp.c</sourcefile>
      <sourceline>1307</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify proper call of SoAd_TpTransmit for a connection configured with:
    - TP socket connection is set up automatically (i.e. SoAdSocketAutomaticSoConSetup is set to true)
    - remote address/port is set by configuration
    - protocol is set to UDP
    - header disabled
  
Test Object: 
    SoAd_TpTransmit()
    SoAd_CopyTxData()
    SoAd_TxConfirmation()
  
Test Precondition: 
    UDP socket connection with SoAdSocketTcpImmediateTpTxConfirmation set to TRUE.
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SoAd_TpTransmit_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>683</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdTxPduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>692</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1709</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_05_Tcp_Con13_Tp_Transmit_WithHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0005_TxUpperLayerTp.c</sourcefile>
      <sourceline>1455</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify proper call of SoAd_TpTransmit for a connection configured with:
  - TP socket connection is set up automatically (i.e. SoAdSocketAutomaticSoConSetup is set to true)
  - SoAdLocalIpAddrAssigmentChg is enabled
  - remote address/port is set by configuration
  - protocol is set to TCP
  - header enabled
&lt;/para&gt;

Test Object: 
  SoAd_TpTransmit()
  SoAd_CopyTxData()
  SoAd_TxConfirmation()
  SoAd_MainFunction()

Test Precondition: 
  SoAd is initialized
  Considered socket connection is opened (inherent call of SoAd_Mainfunction)

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00554</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00556</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00558</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>179</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdTxPduHeaderId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>695</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdSocketTcpTxQuota</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>722</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1710</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_05_ULCopyTxData_NOT_OK_UDP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0005_TxUpperLayerTp.c</sourcefile>
      <sourceline>1764</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if the second call of PduR_SoAdTpCopyTxData() returns BUFREQ_E_NOT_OK
    * TcpIp_UdpTransmit() is not be called.
    * Up_SoAdTpTxConfirmation() is called with E_NOT_OK.
  
Test Object: 
    SoAd_TpTransmit().
  
Test Precondition: 
    PduR_SoAdTpCopyTxData() returns BUFREQ_E_NOT_OK.
  
Test Execution: 
    01: Set PduR_SoAdTpCopyTxData() to return BUFREQ_E_NOT_OK.
    02: Call SoAd_TpTransmit().
    03: Call SoAd_MainFunction().
    04: VP(): Verify that PduR_SoAdTpTxConfirmation() was called with result E_NOT_OK.
    05: VP(): Verify that TcpIp_UdpTransmit() was not called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00652</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>259</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1711</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_05_ULCopyTxData_NOT_OK_TCP_Trans</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0005_TxUpperLayerTp.c</sourcefile>
      <sourceline>1857</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if PduR_SoAdTpCopyTxData() returns BUFREQ_E_NOT_OK and no data was
    already sent the frame processing shall stop but the connection shall not be closed and
    therefore a second Transmit Call is executed like the first one before and is escpecially not
    rejected.
  
Test Object: 
    SoAd_TpTransmit().
  
Test Precondition: 
    PduR_SoAdTpCopyTxData() returns BUFREQ_E_NOT_OK.
  
Test Execution: 
    01: Set PduR_SoAdTpCopyTxData() to return BUFREQ_E_NOT_OK.
    02: Call SoAd_TpTransmit().
    03: Call SoAd_MainFunction().
    04: Verify that the transmission was aborted and TcpIp_TcpTransmit() was called.
    05: Call SoAd_TpTransmit() again to test whether the connection was kept alive.
    06: Call SoAd_MainFunction().
    07: VP(): Verify that connection was kept alive and the second transmit went through.
    08: Call SoAd_TxConfirmation() to finish the transmission.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0140.Tx.Tcp.Tp.NoDataSent</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1122</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1712</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_05_ULCopyTxData_NOT_OK_TCP_Rec</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0005_TxUpperLayerTp.c</sourcefile>
      <sourceline>1981</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if PduR_SoAdTpCopyTxData() returns BUFREQ_E_NOT_OK but no data was sent.
    This keeps the connection alive and the subsequent reception is received as expected.
  
Test Object: 
    SoAd_TpTransmit().
  
Test Precondition: 
    PduR_SoAdTpCopyTxData() returns BUFREQ_E_NOT_OK.
  
Test Execution: 
    01: Set PduR_SoAdTpCopyTxData() to return BUFREQ_E_NOT_OK.
    02: Call SoAd_TpTransmit().
    03: Call SoAd_MainFunction().
    04: Verify that TcpIp_UdpTransmit() was not called.
    05: Call SoAd_RxIndication().
    06: Call SoAd_MainFunction().
    07: VP(): Verify that the correct data was received
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0140.Tx.Tcp.Tp.NoDataSent</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1122</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1713</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_05_TpTransmit_Offline</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0005_TxUpperLayerTp.c</sourcefile>
      <sourceline>2104</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if SoAd_TpTransmit() is called while socket state is OFFLINE, E_NOT_OK
    will be returned and no further action shall be performed.
  
Test Object: 
    SoAd_TpTransmit().
  
Test Precondition: 
    Socket is in state OFFLINE.
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TpTransmit_Offline</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>640</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1714</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_05_TpTransmit_RouteDisabled</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0005_TxUpperLayerTp.c</sourcefile>
      <sourceline>2177</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   This test verifies that if SoAd_TpTransmit() is called after the PduRoute was disabled,
   E_NOT_OK was returned and no further action shall take place.
  
Test Object: 
    SoAd_TpTransmit().
  
Test Precondition: 
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TpTransmit_Disabled</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>641</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1715</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_05_Tcp_Con28_Transmit_TpTxConfirmation</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0005_TxUpperLayerTp.c</sourcefile>
      <sourceline>2252</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      This test verifies that if  SoAdSocketTcpImmediateTpTxConfirmation is set to TRUE,
      PduR_SoAdTpTxConfirmation() will be called with result set to E_OK within
      SoAd_MainFunction() after TcpIp_TcpTransmit() returned E_OK.
  
Test Object: 
    PduR_SoAdTpTxConfirmation()
  
Test Precondition: 
    Protocol TCP.
    SoAdSocketTcpImmediateTpTxConfirmation set to TRUE.
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00667</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>273</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1716</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_05_Tcp_Con28_Transmit_AllowNtoOneRouting</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0005_TxUpperLayerTp.c</sourcefile>
      <sourceline>2372</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
     This test verifies that multiple ECUC PDUs are referencing to the same
     PDURoute, SoAd shall treat it as reference to the first ECUC PDU.
     The PduRoute_PduR_Tcp_Tp_2 is referenced by two ECUC Pdus in UL.
     Check that SoAd shall treat it as reference to the first ECUC PDU found
     (PduRDestPduHandleId 99 in this test).
  
Test Object: 
    PduR_SoAdTpTxConfirmation()
  
Test Precondition: 
    Protocol TCP.
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.AllowNtoOneRouting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>686</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1717</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_Tp_Transmit_MainfunctionTx_00_05_111</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0005_TxUpperLayerTp.c</sourcefile>
      <sourceline>2497</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   Tests that TpTransmit works also when we use MainfunctionTx
  
Test Object: 
    SoAd_TpTransmit()
    SoAd_MainfunctionTx()
  
Test Precondition: 
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SoAdEnableMainFunctionTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>689</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1718</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_05_PostBuild_Selectable_SoAdTxPduRef</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0005_TxUpperLayerTp.c</sourcefile>
      <sourceline>2612</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that E_NOT_OK was returned and nothing was transmitted because data length was bigger
    than Pdulength of the referenced pdu
  
Test Object: 
    SoAd_TpTransmit()
    SoAd_CopyTxData()
    SoAd_TxConfirmation()
  
Test Precondition: 
    UDP socket connection with SoAdSocketTcpImmediateTpTxConfirmation set to TRUE.
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SoAd_TpTransmit_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>683</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdTxPduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>692</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1719</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_05_PostBuild_Selectable_SoAdTxUpperLayerType</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0005_TxUpperLayerTp.c</sourcefile>
      <sourceline>2744</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify post build selectable for SoAdTxUpperLayerType
  
Test Object: 
    SoAd_TpTransmit()
    SoAd_CopyTxData()
    SoAd_TxConfirmation()
  
Test Precondition: 
    UDP socket connection with SoAdSocketTcpImmediateTpTxConfirmation set to TRUE.
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdTxUpperLayerType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>693</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1720</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_05_PostBuild_Selectable_SoAdSocketTcpInitiate</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0005_TxUpperLayerTp.c</sourcefile>
      <sourceline>2854</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies Post Build selectable for SoAdSocketTcpInitiate
    Use SoAdSocketConnectionGroup as in test SoAd_ConTest_00_05_Tcp_Con13_Tp_Transmit_WithHeader
    verify that connection needs to be initialized by this module
  
Test Object: 
  SoAd_TpTransmit()
  SoAd_CopyTxData()
  SoAd_TxConfirmation()
  SoAd_MainFunction()

Test Precondition: 
  SoAd is initialized
  Considered socket connection is opened (inherent call of SoAd_Mainfunction)

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdSocketTcpInitiate</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>716</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1721</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_05_PostBuild_Selectable_SoAdSocketTcpTxQuota</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0005_TxUpperLayerTp.c</sourcefile>
      <sourceline>3020</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies Post Build selectable for SoAdSocketTcpTxQuota
    Use SoAdSocketConnectionGroup as in test SoAd_ConTest_00_05_Tcp_Con13_Tp_Transmit_WithHeader
    Verify that data larger than SoAdTxPduHeaderId will not be transmitted
  
Test Object: 
  SoAd_TpTransmit()
  SoAd_CopyTxData()
  SoAd_TxConfirmation()
  SoAd_MainFunction()

Test Precondition: 
  SoAd is initialized
  Considered socket connection is opened (inherent call of SoAd_Mainfunction)

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdSocketTcpTxQuota</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>722</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdTxPduHeaderId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>695</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1722</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SoAd_ConTest_00_06_CancelRx_Tcp_Discarded_NoHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0006_ReceiveCancelation.c</sourcefile>
      <sourceline>88</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if SoAd_TpCancelReceive() is called to cancel a
    non-ongoing reception, no API will be called, and E_NOT_OK will be returned.
  
Test Object: 
    SoAd_TpCancelReceive()
  
Test Precondition: 
    - regarding socket connection is unassigned
    - protocol TCP
  
Test Execution: 
    01: Call SoAd_TpCancelReceive() with following parameter: PduId: 0.
    02: VP (SoAd.SWS_SoAd_00576_Receive):
        SoAd_TpCancelReceive() returns E_NOT_OK
    03: Call SoAd_MainFunction().
    04: VP (SoAd.SWS_SoAd_00576_Receive):
        SoAd does not call any API service
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00576_Receive</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>497</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1723</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_06_CancelRx_Tcp_PendingRx_NoHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0006_ReceiveCancelation.c</sourcefile>
      <sourceline>153</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test checks the behavior of receive cancellation for a started
  (but pending) reception.
  The connection shall be closed in the first main function after the request and
  a cancellation for the receive direction shall be indicated.
  PduR_SoAdTpStartOfReception() will be called at the end of the connection setup with TpSduLength
  equal to 0.

Test Object: None.
Test Precondition: 
  - SoAd is initialized
  - regarding socket connection is assigned
  - protocol TCP
  - Header mode disabled
  - Upper Layer TP-API

Test Execution: 
  01: VP(SoAd.SWS_SoAd_00595): Verify that at the end of connection setup,
      PduR_SoAdTpStartOfReception() was called with TpSduLength equal to 0.
  02: Call SoAd_TpCancelReceive with following parameter:
      PduId: 0
  03: Call SoAd_MainFunction().
  04: VP (SoAd.SWS_SoAd_00641.2):
      SoAd calls PduR_SoAdTpRxIndication with following parameter:
      RxPduId: 2
      Result:  E_NOT_OK
  05: VP (SoAd.SWS_SoAd_00581):
      SoAd calls TcpIp_Close with following arguments:
      SocketId: value from variable Test_AcceptedSocket
  06: Signalize closure of TCP connection by calling SoAd_TcpIpEvent twice
      with event TCPIP_TCP_FIN_RECEIVED and TCPIP_TCP_CLOSED

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00641.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>429</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00581</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00595</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>210</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1724</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_06_CancelRx_Tcp_PendingRxTx_NoHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0006_ReceiveCancelation.c</sourcefile>
      <sourceline>273</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test checks the behavior of receive cancellation for a started
  (but pending) reception and a started but pending transmission.
  The connection shall be closed in the first main function after the transmission
  has completed and a cancellation be indicated.

Test Object: None.
Test Precondition: 
  - SoAd is initialized
  - regarding socket connection is assigned
  - protocol TCP

Test Execution: 
  01: Call SoAd_TpTransmit with following parameter:
      TxPduId: 17
  02: Call SoAd_TpCancelReceive with following parameter:
      PduId: 0
  03: VP (): SoAd_TpCancelReceive returns E_OK
  04: Call SoAd_MainFunction
  05: VP (SoAd.SWS_SoAd_00640.2):
      SoAd calls PduR_SoAdTxConfirmation with following parameter:
      TxPduId: 2
      Result:  E_NOT_OK
  06: VP (SoAd.SWS_SoAd_00641.2):
      SoAd calls PduR_SoAdTpRxIndication with following parameter:
      RxPduId: 2
      Result:  E_NOT_OK
  07: VP (SoAd.SWS_SoAd_00581):
      SoAd calls TcpIp_Close with following arguments:
      SocketId: value from variable Test_AcceptedSocket

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00640.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>427</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00641.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>429</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00581</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1725</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_06_CancelRx_Tcp_PendingRxOngoingTx_NoHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0006_ReceiveCancelation.c</sourcefile>
      <sourceline>408</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test checks the behavior of receive cancellation for a started
  (but pending) reception and a started and ongoing transmission.
  The connection shall be closed in the first main function after the transmission
  has completed and a cancellation be indicated.

Test Object: None.
Test Precondition: 
  - SoAd is initialized
  - regarding socket connection is assigned
  - protocol TCP

Test Execution: 
  01: Prepare 32 bytes of well-known data for delivering via PduR_SoAdTpCopyTxData.
      PduR_SoAdTpCopyTxData shall return 32 bytes of available data.
  02: Call SoAd_TpTransmit with following parameter:
      TxPduId: 17
      Length:  64
  03: call SoAd_Mainfunction to trigger transmission
  04: VP:
      SoAd calls PduR_SoAdTpCopyTxData two time.
      For the 2nd call the PduLength is set to 32.
  05: Call SoAd_TpCancelReceive with following parameter:
      PduId: 0
  06: VP:
      SoAd_TpCancelReceive returns E_OK
  07: Call SoAd_MainFunction
  08: VP (SoAd.SWS_SoAd_00640.2):
      SoAd calls PduR_SoAdTxConfirmation with following parameter:
      TxPduId: 2
      Result:  E_NOT_OK
  09: VP (SoAd.SWS_SoAd_00641.2):
      SoAd calls PduR_SoAdTpRxIndication with following parameter:
      RxPduId: 2
      Result:  E_NOT_OK
  10: VP (SoAd.SWS_SoAd_00581):
      SoAd calls TcpIp_Close with following arguments:
      SocketId: value from variable Test_AcceptedSocket
  11: Signalize closure of TCP connection by calling SoAd_TcpIpEvent twice
      with event TCPIP_TCP_FIN_RECEIVED and TCPIP_TCP_CLOSED

  12: VP:
      No other API service called

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00581</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00640.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>427</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00641.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>429</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1726</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_06_CancelRx_Tcp_DiscardData_NoHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0006_ReceiveCancelation.c</sourcefile>
      <sourceline>571</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test checks the behavior of receive cancellation for incoming data after
  a request. Incoming data shall be discarded as long as transmission is ongoing.
  The connection shall be closed in the first main function after the transmission
  has completed and a cancellation be indicated.

Test Object: None.
Test Precondition: 
  - SoAd is initialized
  - regarding socket connection is assigned
  - protocol TCP

Test Execution: 
  01: Prepare 32 bytes of well-known data for delivering via PduR_SoAdTpCopyTxData.
      PduR_SoAdTpCopyTxData shall return 32 bytes of available data.
  02: Call SoAd_TpTransmit with following parameter:
      TxPduId: 17
      Length:  32
  03: call SoAd_Mainfunction to trigger transmission
  04: Call SoAd_TpCancelReceive with following parameter:
      PduId: 0
  05: VP:
      SoAd_TpCancelReceive returns E_OK
  06: Call SoAd_RxIndication with following parameter:
      SocketId:          see Test_AcceptedSocket variable
      remote IP address: 168.212.80.22
      remote port:       905
      data length:       64
  07: VP (SoAd.SWS_SoAd_00564): SoAd acknowledges the received TCP data
  08: VP (SoAd.SWS_SoAd_00637.2):
      SoAd does not deliver data to upper layer (no call to PduR_SoAdTpCopyRxData)
  09: Confirm transmitted data by calling SoAd_TxConfirmation with parameter:
      SocketId: value from variable Test_AcceptedSocket
      Length:   32
  10: Call SoAd_MainFunction to continue transmission
  11: VP:
      SoAd calls TcpIp_Close with following arguments:
      SocketId: value from variable Test_AcceptedSocket
  12: Signalize closure of TCP connection by calling SoAd_TcpIpEvent twice
      with event TCPIP_TCP_FIN_RECEIVED and TCPIP_TCP_CLOSED
  13: VP(SoAd.SWS_SoAd_00640.1):
      Verify that SoAd has called PduR_SoAdTxConfirmation() with parameter result set to E_OK.
  14: VP:
      SoAd calls PduR_SoAdTpRxIndication with following parameter:
      RxPduId: 2
      Result:  E_NOT_OK

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00637.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>423</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00564</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00640.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>426</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1727</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_06_CancelRx_Udp_Discarded_NoHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0006_ReceiveCancelation.c</sourcefile>
      <sourceline>759</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test checks that a receive cancellation request is denied if the
  regarding connection is not assigned.

Test Object: None.
Test Precondition: 
  - SoAd is initialized
  - regarding socket connection is unassigned
  - protocol UDP

Test Execution: 
  01: Call SoAd_TpCancelReceive with following parameter:
      PduId: 2
  02: VP (SoAd.SWS_SoAd_00576_Receive):
      SoAd_TpCancelReceive returns E_NOT_OK
  03: Call SoAd_MainFunction
  04: VP (SoAd.SWS_SoAd_00576_Receive):
      SoAd does not call any API service

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00576_Receive</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>497</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1728</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_06_CancelRx_Udp_PendingRx_NoHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0006_ReceiveCancelation.c</sourcefile>
      <sourceline>823</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test checks the behavior of receive cancellation for a started
  (but pending) reception.
  The connection shall be closed in the first main function after the request and
  a cancellation for the receive direction shall be indicated.

Test Object: None.
Test Precondition: 
  - SoAd is initialized
  - regarding socket connection is assigned
  - protocol UDP

Test Execution: 
  01: Call SoAd_TpCancelReceive with following parameter:
      PduId: 2
  02: VP (): SoAd_TpCancelReceive returns E_OK
  03: Call SoAd_MainFunction
  04: VP (SoAd.SWS_SoAd_00641.2):
      SoAd calls PduR_SoAdTpRxIndication with following parameter:
      RxPduId: 0
      Result:  E_NOT_OK
  05: VP (SoAd.SWS_SoAd_00581):
      SoAd calls TcpIp_Close with following arguments:
      SocketId: 10
  06: Signalize closure of UDP connection by calling SoAd_TcpIpEvent
      with event TCPIP_UDP_CLOSED

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00641.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>429</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00581</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1729</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_06_CancelRx_Udp_PendingRxTx_NoHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0006_ReceiveCancelation.c</sourcefile>
      <sourceline>917</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test checks the behavior of receive cancellation for a started
  (but pending) reception and a started but pending transmission.
  The connection shall be closed in the first main function after the transmission
  has completed and a cancellation be indicated.

Test Object: None.
Test Precondition: 
  - SoAd is initialized
  - regarding socket connection is assigned
  - protocol UDP

Test Execution: 
  01: Call SoAd_TpTransmit with following parameter:
      TxPduId: 15
  02: Call SoAd_TpCancelReceive with following parameter:
      PduId: 2
  03: VP (): SoAd_TpCancelReceive returns E_OK
  04: Call SoAd_MainFunction
  05: VP (SoAd.SWS_SoAd_00640.2):
      SoAd calls PduR_SoAdTxConfirmation with following parameter:
      TxPduId: 0
      Result:  E_NOT_OK
  06: VP (SoAd.SWS_SoAd_00641.2):
      SoAd calls PduR_SoAdTpRxIndication with following parameter:
      RxPduId: 0
      Result:  E_NOT_OK
  07: VP (SoAd.SWS_SoAd_00581):
      SoAd calls TcpIp_Close with following arguments:
      SocketId: 10
  08: Signalize closure of UDP connection by calling SoAd_TcpIpEvent
      with event TCPIP_UDP_CLOSED

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00640.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>427</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00641.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>429</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00581</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1730</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_06_CancelRx_Udp_PendingRxOngoingTx_NoHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0006_ReceiveCancelation.c</sourcefile>
      <sourceline>1041</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test checks the behavior of receive cancellation for a started
  (but pending) reception and a started and ongoing transmission.
  The connection shall be closed in the first main function after the transmission
  has completed and a cancellation be indicated.

Test Object: None.
Test Precondition: 
  - SoAd is initialized
  - regarding socket connection is assigned
  - protocol UDP

Test Execution: 
  01: Prepare 32 bytes of well-known data for delivering via PduR_SoAdTpCopyTxData.
      PduR_SoAdTpCopyTxData shall return 32 bytes of available data.
  02: Call SoAd_TpTransmit with following parameter:
      TxPduId: 15
      Length:  64
  03: call SoAd_Mainfunction to trigger transmission
  04: VP:
      SoAd calls PduR_SoAdTpCopyTxData two time.
      For the 2nd call the PduLength is set to 32.
  05: Call SoAd_TpCancelReceive with following parameter:
      PduId: 2
  06: VP:
      SoAd_TpCancelReceive returns E_OK
  07: Call SoAd_MainFunction
  08: VP (SoAd.SWS_SoAd_00640.2):
      SoAd calls PduR_SoAdTxConfirmation with following parameter:
      TxPduId: 0
      Result:  E_NOT_OK
  09: VP (SoAd.SWS_SoAd_00641.2):
      SoAd calls PduR_SoAdTpRxIndication with following parameter:
      RxPduId: 0
      Result:  E_NOT_OK
  10: VP (SoAd.SWS_SoAd_00581):
      SoAd calls TcpIp_Close with following arguments:
      SocketId: 10
  11: Signalize closure of TCP connection by calling SoAd_TcpIpEvent
      with event and TCPIP_UDP_CLOSED

  12: VP:
      No other API service called

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00581</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00640.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>427</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00641.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>429</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1731</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_06_CancelRx_Udp_DiscardData_NoHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0006_ReceiveCancelation.c</sourcefile>
      <sourceline>1201</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test checks the behavior of receive cancellation for incoming data after
  a request. Incoming data shall be discarded as long as transmission is ongoing.
  The connection shall be closed in the first main function after the transmission
  has completed and a cancellation be indicated.

Test Object: None.
Test Precondition: 
  - SoAd is initialized
  - regarding socket connection is assigned
  - protocol UDP

Test Execution: 
  01: Prepare 32 bytes of well-known data for delivering via PduR_SoAdTpCopyTxData.
      PduR_SoAdTpCopyTxData shall return 32 bytes of available data.
  02: Call SoAd_TpTransmit with following parameter:
      TxPduId: 15
      Length:  64
  03: call SoAd_Mainfunction to trigger transmission
  04: Call SoAd_TpCancelReceive with following parameter:
      PduId: 2
  05: VP:
      SoAd_TpCancelReceive returns E_OK
  06: Call SoAd_RxIndication with following parameter:
      SocketId:          10
      remote IP address: 192.168.66.85
      remote port:       27
      data length:       64
  07: VP (SoAd.SWS_SoAd_00637.2):
      SoAd does not deliver data to upper layer (no call to PduR_SoAdTpCopyRxData)
  08: Call SoAd_MainFunction
  09: VP:
      SoAd calls PduR_SoAdTxConfirmation with following parameter:
      TxPduId: 2
      Result:  E_NOT_OK
  10: VP:
      SoAd calls PduR_SoAdTpRxIndication with following parameter:
      RxPduId: 2
      Result:  E_NOT_OK
  11: VP:
      SoAd calls TcpIp_Close with following arguments:
      SocketId: 10
  12: Signalize closure of UDP connection by calling SoAd_TcpIpEvent
      with event TCPIP_UDP_CLOSED


Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00637.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>423</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00637.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>422</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00637.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>424</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00637.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>425</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1732</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_06_CancelRx_Tcp_Discarded_WithHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0006_ReceiveCancelation.c</sourcefile>
      <sourceline>1370</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test checks the behavior of receive cancellation for a assigned socket
  with header ID. No Reception has taken place so far, therefore the reception
  is not ongoing.
  The cancellation request shall be denied.

Test Object: None.
Test Precondition: 
  - SoAd is initialized
  - regarding socket connection is assigned
  - protocol TCP

Test Execution: 
  01: Call SoAd_TpCancelReceive with following parameter:
      PduId: 1
  02: VP (SoAd.SWS_SoAd_00576_Receive):
      SoAd_TpCancelReceive returns E_NOT_OK
  03: Call SoAd_MainFunction
  04: VP (SoAd.SWS_SoAd_00576_Receive):
      No other API service called

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00576_Receive</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>497</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1733</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_06_CancelRx_Tcp_NoRx_PendingTx_WithHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0006_ReceiveCancelation.c</sourcefile>
      <sourceline>1457</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test checks the behavior of receive cancellation for a started
  reception and a started but pending transmission.
  The connection shall be closed in the first main function after the transmission
  has completed and a cancellation shall be indicated.

Test Object: None.
Test Precondition: 
  - SoAd is initialized
  - regarding socket connection is assigned
  - protocol TCP

Test Execution: 
  01: Prepare 48 bytes of well-known data for delivering via PduR_SoAdTpCopyTxData.
      PduR_SoAdTpCopyTxData shall return 48 bytes of available data.
  02: Call SoAd_TpTransmit with following parameter:
      TxPduId: 18
      Length:  48
  03: Call SoAd_TpCancelReceive with following parameter:
      PduId: 1
  04: VP (SoAd.SWS_SoAd_00576_Receive):
      SoAd_TpCancelReceive returns E_NOT_OK
  05: Call SoAd_MainFunction
  06: VP:
      SoAd calls PduR_SoAdTpCopyTxData two time.
      For the 2nd call the PduLength is set to 48
  07: Confirm transmitted data and shutdown the socket
      (like in e.g. SoAd_ConTest_00_06_CancelRx_Tcp_PendingRxTx_NoHeader)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00576_Receive</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>497</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1734</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_06_CancelRx_Tcp_OngoingRxOngoingTx_WithHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0006_ReceiveCancelation.c</sourcefile>
      <sourceline>1575</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test checks the behavior of receive cancellation for a started
  reception and a started and ongoing transmission.
  The connection shall be closed in the first main function after the transmission
  has completed and a cancellation be indicated.

Test Object: None.
Test Precondition: 
  - SoAd is initialized
  - regarding socket connection is assigned
  - protocol TCP

Test Execution: 
  01: Prepare 48 bytes of well-known data for delivering via PduR_SoAdTpCopyTxData.
      PduR_SoAdTpCopyTxData shall return 48 bytes of available data.
  02: PduR_SoAdTpStartOfReception shall return 16 bytes of available buffer.
  03: Call SoAd_TpTransmit with following parameter:
      TxPduId: 18
      Length:  48
  04: Call SoAd_RxIndication with following parameter:
      SocketId:          see Test_AcceptedSocket variable
      remote IP address: 212.10.0.1
      remote port:       1014
      data length:       40
      Header Id:         0xcafe
      Header Length:     32
  05: SoAd calls PduR_SoAdTpStartOfReception with:
      Length: 32
      PduId:
  06: Call SoAd_TpCancelReceive with following parameter:
      PduId: 1
  07: VP:
      SoAd_TpCancelReceive returns E_OK
  08: call SoAd_Mainfunction
  09: VP:
      SoAd does neither call PduR_SoAdTpStartOfReception nor PduR_SoAdTpCopyTxData
  10: VP (SoAd.SWS_SoAd_00640.2):
      SoAd calls PduR_SoAdTxConfirmation with following parameter:
      TxPduId: 3
      Result:  E_NOT_OK
  11: VP (SoAd.SWS_SoAd_00641.2):
      SoAd calls PduR_SoAdTpRxIndication with following parameter:
      RxPduId: 3
      Result:  E_NOT_OK
  12: VP (SoAd.SWS_SoAd_00581):
      SoAd calls TcpIp_Close with following arguments:
      SocketId: value from variable Test_AcceptedSocket
  13: Signalize closure of TCP connection by calling SoAd_TcpIpEvent twice
      with event TCPIP_TCP_FIN_RECEIVED and TCPIP_TCP_CLOSED
  14: VP:
      No other API service called

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00581</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00640.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>427</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00641.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>429</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1735</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_06_CancelTx_NoPreviousRequest</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0006_ReceiveCancelation.c</sourcefile>
      <sourceline>1758</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if SoAd_TpCancelTransmit() is called to cancel a
    non-ongoing reception, no API will be called, and E_NOT_OK will be returned.
  
Test Object: 
    SoAd_TpCancelTransmit()
  
Test Precondition: 
    - SoAd is initialized
    - regarding socket connection is unassigned
    - protocol TCP
  
Test Execution: 
    01: Call SoAd_TpCancelTransmit() with no previous transmit request performed.
    02: VP(): SoAd_TpCancelTransmit() returns E_NOT_OK.
    03: Call SoAd_MainFunction().
    04: VP(): Verify that no API was called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00576_Transmit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>498</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1736</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_06_CancelTx_NotTP</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0006_ReceiveCancelation.c</sourcefile>
      <sourceline>1820</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if SoAd_TpCancelTransmit() is called for a PduId that does not support
    TP no API will be called, E_NOT_OK will be returned and SOAD_E_INV_PDUID will be reported
    to DET.
  
Test Object: 
    SoAd_TpCancelTransmit()
  
Test Precondition: 
    - SoAd is initialized
    - regarding socket connection is unassigned
  
Test Execution: 
    01: Call SoAd_TpCancelTransmit() with a PduId that does not support TP.
    02: VP(): SoAd_TpCancelTransmit() returns E_NOT_OK.
    03: VP(): DET is called with SOAD_E_INV_PDUID.
    04: Call SoAd_MainFunction().
    05: VP(): Verify that no API was called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00606</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1737</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_06_CancelTx_Tcp_PendingRxTx</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0006_ReceiveCancelation.c</sourcefile>
      <sourceline>1886</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if SoAd_TpCancelTransmit() is called while a reception and a
    transmission are pending, both will be canceled and the socket connection closed.
  
Test Object: None.
Test Precondition: 
    - SoAd is initialized
    - regarding socket connection is assigned
  
Test Execution: 
    01: Call SoAd_TpTransmit().
    02: Call SoAd_TpCancelTransmit() to cancel the previous transmission.
    03: Call SoAd_MainFunction().
    04: VP(SoAd.SWS_SoAd_00575): Verify that PduR_SoAdTpTxConfirmation() was called with
        E_NOT_OK signalling the transmission cancelling.
    05: VP(SoAd.SWS_SoAd_00575): Verify that PduR_SoAdTpRxIndication() was called with
        E_NOT_OK signalling the reception cancelling.
    06: VP(SoAd.SWS_SoAd_00577):
        Verify that TcpIp_Close() was called to close the socket connection.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00575</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>196</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00577</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>198</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1738</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_06_CancelTx_Tcp_PendingRxOngoingTx</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0006_ReceiveCancelation.c</sourcefile>
      <sourceline>2005</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if SoAd_TpCancelTransmit() is called while a reception is pending and a
    transmission is ongoing, both will be canceled and the socket connection closed.
  
Test Object: None.
Test Precondition: 
    - SoAd is initialized
    - regarding socket connection is assigned
  
Test Execution: 
    01: Call SoAd_TpTransmit().
    02: Call SoAd_MainFunction().
    03: VP(): Verify that the transmission is ongoing.
    04: Call SoAd_TpCancelTransmit() to cancel the ongoing transmission.
    05: Call SoAd_MainFunction().
    06: VP(SoAd.SWS_SoAd_00575): Verify that PduR_SoAdTpTxConfirmation() was called with
        E_NOT_OK signaling the transmission canceling.
    07: VP(SoAd.SWS_SoAd_00575): Verify that PduR_SoAdTpRxIndication() was called with
        E_NOT_OK signaling the reception canceling.
    08: VP(SoAd.SWS_SoAd_00577):
        Verify that TcpIp_Close() was called to close the socket connection.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00575</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>196</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00577</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>198</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1739</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SoAd_ConTest_00_08_Msg_Acceptance_Filter_Off</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0008_MsgAcceptanceFilterOff.c</sourcefile>
      <sourceline>130</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test checks data reception and transmission for a single socket connection
  group if the message acceptance filter is disabled.
  SoAd shall accept incoming messages of any remote IP address and port and shall
  send to the configured remote (broadcast) address.

Test Object: None.
Test Precondition: 
  - SoAd is initialized
  - Message Acceptance filter disabled
  - protocol UDP
  - SoAdSocketAutomaticSoConSetup = true

Test Execution: 
  01: Bring UDP socket to ONLINE state.
  02: Simulate the reception of data on socket connection 0
      Pdu Length: 64
      SocketId:   0
      IP address: 192.168.2.50
      Port:       255
  03: VP (SoAd.SWS_SoAd_00567.2, SoAd.SWS_SoAd_00562.1, SoAd.SWS_SoAd_00562.2,
          SoAd.SWS_SoAd_00562.5, SoAd.SWS_SoAd_00635):
      Message filter is disabled so data will be delivered even if the remote address doesn't match
      SoAd delivers the data to the PduR (Pdu ID 0).
  04: Simulate the reception of data on socket connection 0
      Pdu Length: 64
      SocketId:   0
      IP address: 192.168.2.60
      Port:       255
  05: VP (SoAd.SWS_SoAd_00567.2, SoAd.SWS_SoAd_00562.1, SoAd.SWS_SoAd_00562.2
          SoAd.SWS_SoAd_00562.5, SoAd.SWS_SoAd_00635):
      Message filter is disabled so data will be delivered even if the remote address doesn't match
      SoAd delivers the data to the PduR (Pdu ID 0).
  06: Simulate the reception of data on socket connection 0
      Pdu Length: 64
      SocketId:   0
      IP address: 192.168.2.50
      Port:       0xf00
  07: VP (SoAd.SWS_SoAd_00567.2, SoAd.SWS_SoAd_00562.1, SoAd.SWS_SoAd_00562.2
          SoAd.SWS_SoAd_00562.5, SoAd.SWS_SoAd_00635):
      Message filter is disabled so data will be delivered even if the remote address doesn't match
      SoAd delivers the data to the PduR (Pdu ID 0).
  08: Transmit a PDU on socket connection 0.
      Pdu Id: 0
  09: VP:
      SoAd_IfTransmit returns E_OK
  10: VP(SoAd.SWS_SoAd_00635):
      SoAd delivers UDP data to TcpIp with:
      TotalLength:    64
      Remote address: 192.168.2.255
      Remote port:    255

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00567.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>468</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00589.b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>391</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00590.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>392</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00590.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>394</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00562.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>456</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00562.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>457</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00562.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>458</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00562.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>462</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00635</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>243</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1740</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SoAd_ConTest_00_09_Udp_NoRetry</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0009_UdpRetry.c</sourcefile>
      <sourceline>197</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test checks the behavior of UDP retransmission.
  For the tested socket connection UDP retransmission is disabled.
  When TcpIp_UdpTransmit() returns TCPIP_E_PHYS_ADDR_MISS SoAd shall not
  retry the transmission.

Test Object: None.
Test Precondition: 
  - SoAd is initialized
  - UDP retry disabled
  - protocol UDP

Test Execution: 
  01: Bring the UDP connection to ONLINE state.
  02: Transmit data on socket connection 0.
      Pdu Length: 64
      SocketId:   0
      TcpIp_UdpTransmit() shall return TCPIP_E_PHYS_ADDR_MISS.
  03: VP:
      SoAd_IfTransmit returns E_NOT_OK
  04: VP:
      SoAd delivers UDP data to TcpIp with:
      TotalLength:    64
      Remote address: 192.168.2.100
      Remote port:    100
  05: Call SoAd Mainfunction once
  06: VP:
      SoAd does not try again to transmit UDP data.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SoAd_00541</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>602</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1741</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_09_Udp_Retry</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0009_UdpRetry.c</sourcefile>
      <sourceline>304</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test checks the behavior of UDP retransmission.
  For the tested socket connection UDP retransmission is enabled.
  When TcpIp_UdpTransmit() returns TCPIP_E_PHYS_ADDR_MISS SoAd shall
  retry transmission with the next main function tick.

Test Object: None.
Test Precondition: 
  - SoAd is initialized
  - UDP retry enabled
  - protocol UDP

Test Execution: 
  01: Bring the UDP connection to ONLINE state.
  02: Transmit data on socket connection 1.
      Pdu Length: 64
      SocketId:   1
      Data: Any unique well-known 64 bytes of data.
      TcpIp_UdpTransmit() shall return TCPIP_E_PHYS_ADDR_MISS.
  03: VP:
      SoAd_IfTransmit returns E_OK
  04: VP:
      SoAd delivers UDP data to TcpIp with:
      TotalLength:    64
      Remote address: 169.100.2.200
      Remote port:    200
  05: Call SoAd Mainfunction once
  06: VP:
      SoAd shall retry to transmit UDP data
      For parameter refer to step 06.
  07: Prepare TcpIp_UdpTransmitStub to return TCPIP_E_OK.
  08: Call SoAd Mainfunction once to trigger retransmission
  09: VP:
      SoAd delivers UDP data to TcpIp with:
      TotalLength:    64
      Remote address: 169.100.2.200
      Remote port:    200
      Data: 64 bytes sent in step 04.
  10: VP:
      SoAd confirms the sent data to PduR with:
      Pdu Id: 1

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SoAd_00541</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>602</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1742</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_09_Udp_NoRetryOnOtherErrors</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0009_UdpRetry.c</sourcefile>
      <sourceline>453</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test checks the behavior of UDP retransmission.
  For the tested socket connection UDP retransmission is enabled.
  When TcpIp_UdpTransmit() returns TCPIP_E_NOT_OK SoAd shall
  not(!) retry transmission although the feature is enabled for
  this connection.

Test Object: None.
Test Precondition: 
  - SoAd is initialized
  - UDP retry enabled
  - protocol UDP

Test Execution: 
  01: Bring the socket connection to ONLINE state.
  02: Transmit data on socket connection 1.
      Pdu Length: 64
      SocketId:   1
      TcpIp_UdpTransmit() shall return TCPIP_E_NOT_OK.
  03: VP:
      SoAd_IfTransmit returns E_NOT_OK
  04: VP:
      SoAd delivers UDP data to TcpIp with:
      TotalLength:    64
      Remote address: 169.100.2.200
      Remote port:    200
  05: Call SoAd Mainfunction once
  06: VP:
      SoAd does not try again to transmit UDP data.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SoAd_00541</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>602</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1743</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_09_Udp_RetryMultipleTx</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0009_UdpRetry.c</sourcefile>
      <sourceline>561</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test checks the behavior of UDP retransmission.
  For the tested socket connection UDP retransmission is enabled.
  When TcpIp_UdpTransmit() returns TCPIP_E_PHYS_ADDR_MISS SoAd shall
  retry transmission with the next main function tick.

Test Object: None.
Test Precondition: 
  - SoAd is initialized
  - UDP retry enabled
  - protocol UDP

Test Execution: 
  01: Bring the socket connection to ONLINE state.
  02: Transmit data on socket connection 1.
      Pdu Length: 64
      SocketId:   1
      Data: any unique 64 bytes
      TcpIp_UdpTransmit() shall return TCPIP_E_PHYS_ADDR_MISS.
  03: VP:
      SoAd delivers UDP data to TcpIp with:
      TotalLength:    64
      Remote address: 169.100.2.200
      Remote port:    200
  04: Call SoAd Mainfunction twice
  05: VP:
      SoAd shall retries twice to transmit UDP data
      For parameter refer to step 06.
  06: Prepare TcpIp_UdpTransmitStub to return TCPIP_E_OK.
  07: Transmit data on socket connection 1.
      Pdu Length: 64
      SocketId:   1
      Data: any unique 64 bytes differing from the data sent in step 04.
      (Note: TcpIp_UdpTransmit() shall return TCPIP_E_OK now).
  08: VP:
      SoAd_IfTransmit returns E_OK.
  09: VP:
      SoAd delivers UDP data to TcpIp with:
      TotalLength:    64
      Remote address: 169.100.2.200
      Remote port:    200
      Data: 64 bytes sent in step 09.
  10: VP:
      SoAd confirms the sent data to PduR with:
      Pdu Id: 1

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SoAd_00541</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>602</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1744</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_09_Udp_Retry_PayloadTooBig</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0009_UdpRetry.c</sourcefile>
      <sourceline>722</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that a PDU with retry enabled will not be stored
    if the PDU size is bigger as the configured PduLength in EcuC of the PDU.
  
Test Object: None.
Test Precondition: 
    - SoAd is initialized.
    - Socket connection is online.
    - UDP retry enabled.
    - Protocol UDP.
    - TcpIp_UdpTransmit() shall return TCPIP_E_PHYS_ADDR_MISS.
  
Test Execution: 
    01: Call SoAd_IfTransmit() with PduInfo.SduLength bigger than PduLength configured in EcuC.
    02: VP(SoAd.EB.UdpRetry_PayloadTooBig): Verify that E_NOT_OK was returned indicating that the
        transmit request was rejected.
    03: Call SoAd_MainFunction() to trigger a possible retransmission.
    04: VP:(SoAd.EB.UdpRetry_PayloadTooBig) Verify that no UDP retry is performed.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UdpRetry_PayloadTooBig</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>606</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1745</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_09_Udp_RetryMultipleTx_BufferOverflow</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0009_UdpRetry.c</sourcefile>
      <sourceline>818</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies the behavior of UDP retransmission in case of a multiple unsuccessful
  TcpIp_UdpTransmit() calls.
  If TcpIp_UdpTransmit() returns with TCPIP_E_PHYS_ADDR_MISS and a socket parameter
  SoAdSocketUdpRetryEnabled is set to TRUE, and a socket connection specific UdpTxBuffer
  already contains data from a previous unsuccessful TcpIp_UdpTransmit() call, then old data
  in a buffer should be discarded and a new data should be stored in it.
  Retransmission of that data should occur during subsequent SoAd_MainFunction() call.

Test Object: None.
Test Precondition: 
  - SoAd is initialized
  - UDP retry enabled
  - protocol UDP

Test Execution: 
  01: Bring UDP socket connection to ONLINE state.
  02: Prepare TcpIp_UdpTransmitStub to return TCPIP_E_PHYS_ADDR_MISS.
  03: Transmit data on socket connection 1.
      TcpIp_UdpTransmit() shall return TCPIP_E_PHYS_ADDR_MISS.
  04: Transmit new data block on socket connection 1.
      TcpIp_UdpTransmit() shall return TCPIP_E_PHYS_ADDR_MISS.
  05: VP(): Verify that two calls to TcpIp_UdpTransmit() are generated with correct parameters.
  06: Prepare TcpIp_UdpTransmitStub to return TCPIP_E_OK.
  07: Call SoAd_MainFunction() twice.
  08: VP(): SoAd shall retry to transmit UDP data by calling TcpIp_UdpTransmit(). Only second
            data frame should be transmitted - the first one is lost as buffer overflowed.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SoAd_UdpRetry_MultipleTx_BufferOverflow</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>603</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1746</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_09_UdpRetryForSoConGroup</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0009_UdpRetry.c</sourcefile>
      <sourceline>958</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test checks for If PduRoutDest referring a UDP socket connection group that if
  TcpIp_UdpTransmit() returns TCPIP_E_PHYS_ADDR_MISS
  SoAd shall store and retry transmission for each not successful transmission
  with the next main function tick.

Test Object: None.
Test Precondition: 
  - SoAd is initialized
  - UDP retry enabled
  - protocol UDP
  - IF API
  - PduRouteDest refers to a socket connection group

Test Execution: 
  01: Bring the UDP connection to ONLINE state.
  02: Prepare TcpIp_UdpTransmit() stub to return TCPIP_E_OK for the first SoCon of the SoConGroup
      and TCPIP_E_PHYS_ADDR_MISS the rest.
  03: Call SoAd_IfTransmit() for a PduRoute pointing which has a PduRoutDest referring the
      SoConGroup.
  04: VP: SoAd_IfTransmit returns E_OK.
  05: VP: TcpIp_UdpTransmit() was called for each socket connection of SoConGroup.
  06: Prepare TcpIp_UdpTransmit() stub to return TCPIP_E_OK
  07: Call SoAd_MainFunction()
  08: VP(SoAd.EB.SoAd_UdpRetry_RefToSoConGroup_Buffering): Verify that TcpIp_UdpTransmit()
      was called for the remaining socket connections of the SoConGroups.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SoAd_UdpRetry_RefToSoConGroup_Buffering</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>604</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1747</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_09_UdpRetryForSoConGroup_DisabledTxConfirmation</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0009_UdpRetry.c</sourcefile>
      <sourceline>1078</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test shall verify that if SoAdBswModules/SoAdIfTxConfirmation is disabled,
    neither direct PDU transmission via SoAd_IfTransmit() nor buffered data transmission
    in context of SoAd_MainFunction() shall trigger a TxConfirmation to the upper layer.

  
Test Object: SoAdBswModules/SoAdIfTxConfirmation is disabled
Test Precondition: 
    - SoAd is initialized
    - UDP retry enabled
    - protocol UDP
    - IF API
    - PduRouteDest refers to a socket connection group
    - SoAdBswModules/SoAdIfTxConfirmation is disabled for SoAdGenUL module.
  
Test Execution: 
    01: Bring the UDP connection to ONLINE state.
    02: Prepare TcpIp_UdpTransmit() stub to return TCPIP_E_OK for the first SoCon of the SoConGroup
        and TCPIP_E_PHYS_ADDR_MISS for the second to store the transmit request.
    03: Call SoAd_IfTransmit() for a PduRoute pointing which has a PduRoutDest referring the
        SoConGroup.
    04: VP: SoAd_IfTransmit returns E_OK and TcpIp_UdpTransmit() was called for each socket
        connection of SoConGroup.
    05: Prepare TcpIp_UdpTransmit() stub to return TCPIP_E_OK and call SoAd_MainFunction().
    06: VP(): Verify that a retransmission of buffered data is performed.
    07: VP(SoAd.dsn.Func0120.Udp.SkipIfTxConfirmation): Verify that neither direct transmission
        nor buffered data transmission causes are triggering a TxConfirmation to the upper layer.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0120.Udp.SkipIfTxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1108</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1748</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_09_UdpOneTxFailsForSoConGroup</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0009_UdpRetry.c</sourcefile>
      <sourceline>1198</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test checks for If PduRoutDest referring a UDP socket connection group that if
  one of the TcpIp_UdpTransmit() calls returns TCPIP_E_NOT_OK, no confirmation is passed to
  the upper layer.

Test Object: None.
Test Precondition: 
  - SoAd is initialized
  - protocol UDP
  - IF API
  - PduRouteDest refers to a socket connection group

Test Execution: 
  01: Bring the UDP connection to ONLINE state.
  02: Prepare TcpIp_UdpTransmit() stub to return TCPIP_E_OK for the first SoCon of the SoConGroup
      and TCPIP_E_NOT_OK for the second.
  03: Call SoAd_IfTransmit() for a PduRoute pointing which has a PduRoutDest referring the
      SoConGroup.
  04: VP: SoAd_IfTransmit returns E_NOT_OK.
  05: VP: TcpIp_UdpTransmit() was called for each socket connection of SoConGroup.
  06: Call SoAd_MainFunction()
  07: VP(): Verify that Up_SoAdIfTxConfirmation() was not called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00544</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1749</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_09_IfTransmit_NEVER_SoConGroup</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0009_UdpRetry.c</sourcefile>
      <sourceline>1298</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test checks for If PduRoutDest referring a UDP socket connection group with TRIGGER_NEVER,
  TcpIp_UdpTransmit() will not be called after SoAd_IfTransmit(). Instead, TcpIp_UdpTransmit()
  will be called after the SoAdSocketUdpTriggerTimeout elapsed.

Test Object: None.
Test Precondition: 
  - SoAd is initialized
  - UDP retry enabled
  - protocol UDP
  - IF API
  - PduRouteDest refers to a socket connection group

Test Execution: 
  01: Bring the UDP connection to ONLINE state.
  02: Call SoAd_IfTransmit() for a PduRoute pointing which has a PduRoutDest referring the
      SoConGroup.
  03: VP: SoAd_IfTransmit returns E_OK.
  04: VP: Verify that TcpIp_UdpTransmit() was not called.
  05: Call enough SoAd_MainFunction() to elapse the SoAdSocketUdpTriggerTimeout.
  06: VP(SoAd.EB.PbVariantSupport.SoAdTxUdpTriggerMode):
      Verify that TcpIp_UdpTransmit() was called for both socket connections of the SoConGroup.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00547_RefToSoConGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>445</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdTxUdpTriggerMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>698</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1750</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_09_PostBuild_Selectable_SoAdTxUdpTriggerMode</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0009_UdpRetry.c</sourcefile>
      <sourceline>1421</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  Test case verifies Post Build selectable for SoAdTxUdpTriggerMode
  Use same SoAdPduRoute as in test SoAd_ConTest_00_09_IfTransmit_NEVER_SoConGroup
  verify that TcpIp_UdpTransmit will be called after SoAd_IfTransmit

Test Object: None.
Test Precondition: 
  - SoAd is initialized
  - UDP retry enabled
  - protocol UDP
  - IF API
  - PduRouteDest refers to a socket connection group

Test Execution: 
  01: Bring the UDP connection to ONLINE state.
  02: Call SoAd_IfTransmit() for a PduRoute pointing which has a PduRoutDest referring the
      SoConGroup.
  03: VP: (SoAd.EB.PbVariantSupport.SoAdTxUdpTriggerMode)
      SoAd_IfTransmit returns E_OK.
      Verify that TcpIp_UdpTransmit() was called for each socket connections of the SoConGroup

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00547_RefToSoConGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>445</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdTxUdpTriggerMode</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>698</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1751</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SoAd_ConTest_00_11_Udp_Tp_RxInd_NoBuffer_NHM_Rx_Ok</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0011_RxUpperLayerTp_UdpNoBuffer.c</sourcefile>
      <sourceline>97</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify no receive buffer is required when the whole PDU can be forwarded to
  the upper layer, on a UDP socket connection using the TP-API and the
  PDU Header mode is disabled.
&lt;/para&gt;

Test Object: 
  SoAd_RxIndication()

Test Precondition: 

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00568.1a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>470</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00568.1c</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>472</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1752</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_11_Udp_Tp_RxInd_NoBuffer_HM_Rx_Ok</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0011_RxUpperLayerTp_UdpNoBuffer.c</sourcefile>
      <sourceline>202</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify no receive buffer is required when the whole PDU can be forwarded to
  the upper layer, on a UDP socket connection using the TP-API and the
  PDU Header mode is enabled.
&lt;/para&gt;

Test Object: 
  SoAd_RxIndication()

Test Precondition: 

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>479</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1c</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1d</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>482</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1753</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_11_Udp_Tp_RxInd_NoBuffer_NHM_CopyRx_Insuff</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0011_RxUpperLayerTp_UdpNoBuffer.c</sourcefile>
      <sourceline>310</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify the whole PDU is discarded when the upper layer provides insufficient buffer
  on a UDP socket connection using the TP-API and the PDU Header mode is disabled.
&lt;/para&gt;

Test Object: 
  SoAd_RxIndication()
  SoAd_MainFunction()

Test Precondition: 

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00568.1a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>470</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00568.1b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>471</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1754</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_11_Udp_Tp_RxInd_NoBuffer_NHM_CopyRx_NotOk</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0011_RxUpperLayerTp_UdpNoBuffer.c</sourcefile>
      <sourceline>397</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify the whole PDU is discarded when the upper layer refuses the reception by returning
  BUFREQ_E_NOT_OK from &amp;lt;Up&amp;gt;_[SoAd][Tp]CopyRxData() on a UDP socket connection using
  the TP-API and the PDU Header mode is disabled. The socket connection shall be reconnected
  after the rejection.
&lt;/para&gt;

Test Object: 
  SoAd_RxIndication()
  SoAd_MainFunction()

Test Precondition: 

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00568.1a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>470</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00570.a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>477</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00570.b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>478</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1755</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_11_Udp_Tp_RxInd_NoBuffer_HM_StartRx_Insuff</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0011_RxUpperLayerTp_UdpNoBuffer.c</sourcefile>
      <sourceline>514</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify the whole PDU is discarded when &amp;lt;Up&amp;gt;_[SoAd][Tp]StartOfReception()
  provides insufficient buffer on a UDP socket connection using the TP-API
  and the PDU Header mode is disabled.
&lt;/para&gt;

Test Object: 
  SoAd_RxIndication()
  SoAd_MainFunction()

Test Precondition: 

Test Execution: 
  01: Call SoAd_RxIndication
  02 VP (SoAd.SWS_SoAd_00571.1a):
     Up_SoAdTpStartOfReception is called
  03 VP (SoAd.SWS_SoAd_00571.1b):
     Up_SoAdTpRxIndication is called with E_NOT_OK
  04 VP (SoAd.SWS_SoAd_00571.1b):
     PDU is discarded, i.e Up_SoAdTpCopyRxData is not called

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>479</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>480</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1756</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_11_Udp_Tp_RxInd_NoBuffer_HM_StartRx_NotOk</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0011_RxUpperLayerTp_UdpNoBuffer.c</sourcefile>
      <sourceline>610</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify the whole PDU is discarded when &amp;lt;Up&amp;gt;_[SoAd][Tp]StartOfReception()
  refuses the reception with BUFREQ_E_NOT_OK on a UDP socket connection using the TP-API
  and the PDU Header mode is enabled.
&lt;/para&gt;

Test Object: 
  SoAd_RxIndication()
  SoAd_MainFunction()

Test Precondition: 

Test Execution: 
  01: Call SoAd_RxIndication
  02 VP (SoAd.SWS_SoAd_00571.1a):
     Up_SoAdTpStartOfReception is called, but returns BUFREQ_E_NOT_OK
  03 VP (SoAd.SWS_SoAd_00572):
     PDU is discarded, i.e Up_SoAdTpCopyRxData is not called

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>479</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00572</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>193</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1757</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_11_Udp_Tp_RxInd_NoBuffer_HM_CopyRx_Busy</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0011_RxUpperLayerTp_UdpNoBuffer.c</sourcefile>
      <sourceline>700</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify the whole PDU is discarded when &amp;lt;Up&amp;gt;_[SoAd][Tp]CopyRxData()
  provides insufficient buffer on a UDP socket connection using the TP-API
  and the PDU Header mode is disabled.
&lt;/para&gt;

Test Object: 
  SoAd_RxIndication()
  SoAd_MainFunction()

Test Precondition: 

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>479</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>480</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1c</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00573</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>194</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1758</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_11_Udp_Tp_RxInd_NoBuffer_HM_CopyRx_NotOk</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0011_RxUpperLayerTp_UdpNoBuffer.c</sourcefile>
      <sourceline>803</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verify the whole PDU is discarded when &amp;lt;Up&amp;gt;_[SoAd][Tp]CopyRxData()
  refuses the reception with BUFREQ_E_NOT_OK on a UDP socket connection using the TP-API
  and the PDU Header mode is disabled. A final &amp;lt;Up&amp;gt;_[SoAd][Tp]RxIndication()
  with E_NOT_OK shall be passed to the upper layer as well.
&lt;/para&gt;

Test Object: 
  SoAd_RxIndication()
  SoAd_MainFunction()

Test Precondition: 

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>479</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>480</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1c</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00573</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>194</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1759</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_11_SetRemoteAddr_Tcp_Offline</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0011_RxUpperLayerTp_UdpNoBuffer.c</sourcefile>
      <sourceline>904</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that the remote address can be changed if the UDP socket connection does
    not have an active TP session.
  
Test Object: 
    SoAd_SetRemoteAddr()
  
Test Precondition: 
  
Test Execution: 
    01: Call SoAd_SetRemoteAddr() without having an active TP session.
    02: Call SoAd_GetRemoteAddr().
    03: VP(): Verify that the remote address was set.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SetRemoteAddr_InactiveTP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>651</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1760</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SoAd_ConTest_00_12_HeaderMode_MultiplePdus_Udp_Buffered</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0012_PduHeaderMode.c</sourcefile>
      <sourceline>255</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that PDUs are delivered completely, in the correct order
  and to the destined upper layer in case multiple TP-Pdus are received at
  once on a UDP socket connection and the internal SoAd buffer is used.

Test Object: None.
Test Precondition: 
  - SoAd is initialized
  - Socket Connection is online

Test Execution: 
  01: Call RxIndication with three PDUs (RxPdu_Udp_TP_0, RxPdu_Udp_TP_1, RxPdu_Udp_TP_2)
  02 VP (SoAd.SWS_SoAd_00571.1a):
     SoAd queries available buffer for RxPdu_Udp_TP_0
  03 VP (SoAd.SWS_SoAd_00571.2):
     all PDU data is copied into the SoAd buffer - no CopyRxData calls
  04: Call MainFunction
  05 VP (SoAd.SWS_SoAd_00574.1):
     SoAd queries available buffer for RxPdu_Udp_TP_0
  06 VP (SoAd.SWS_SoAd_00574.2):
     SoAd delivers RxPdu_Udp_TP_0 to PduR
  07 VP (SoAd.SWS_SoAd_00574.3):
     RxIndication for RxPdu_Udp_TP_0 is called with E_OK
  09 VP (SoAd.SWS_SoAd_00574.3):
     SoAd dispatchs the next TP-PDU RxPdu_Udp_TP_1
  10 VP: SoAd also delivers RxPdu_Udp_TP_1 (see steps 05 - 09)
  11 VP: SoAd also delivers RxPdu_Udp_TP_2 (see steps 05 - 09)
  12 VP (SoAd.SWS_SoAd_00566):
     SoAd preserved the order of received data

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00566</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>187</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>479</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>483</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00574.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>484</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00574.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>485</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00574.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>486</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdSocketLocalPort</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>702</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1761</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_12_HeaderMode_MultiplePdus_Tcp_Buffered</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0012_PduHeaderMode.c</sourcefile>
      <sourceline>432</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that PDUs are delivered completely, in the correct order
  and to the destined upper layer in case multiple TP-Pdus are received at
  once on a TCP socket connection and the internal SoAd buffer is used.

Test Object: None.
Test Precondition: 
  - SoAd is initialized
  - Socket Connection is online

Test Execution: 
  01: Call RxIndication with three PDUs (RxPdu_Tcp_TP_2, RxPdu_Tcp_TP_0, RxPdu_Tcp_TP_1)
  02 VP (SoAd.SWS_SoAd_00571.1a):
     SoAd queries available buffer for RxPdu_Tcp_TP_2
  03 VP (SoAd.SWS_SoAd_00564):
     TcpIp_TcpReceived is called for the processed PduHeader
  04 VP (SoAd.SWS_SoAd_00571.2):
     all PDU data is copied into the SoAd buffer - no CopyRxData calls
  05: Call MainFunction
  06 VP (SoAd.SWS_SoAd_00574.1):
     SoAd queries available buffer for RxPdu_Tcp_TP_2
  07 VP (SoAd.SWS_SoAd_00574.2):
     SoAd delivers RxPdu_Tcp_TP_2 to PduR
  08 VP (SoAd.SWS_SoAd_00574.3):
     RxIndication for RxPdu_Tcp_TP_2 is called with E_OK
  09 VP (SoAd.SWS_SoAd_00574.3):
     SoAd dispatchs the next TP-PDU RxPdu_Tcp_TP_0
  10 VP (SoAd.SWS_SoAd_00564):
     TcpIp_TcpReceived is called for the payload of RxPdu_Tcp_TP_2 and the processed
     PduHeader of RxPdu_Tcp_TP_0
  11 VP (SoAd.SWS_SoAd_00574.2)
     StartOfReception(RxPdu_Tcp_TP_0) returned with no available buffer - no CopyRxData calls
  12: Call MainFunction
  13: SoAd delivers RxPdu_Tcp_TP_0 (see steps 06 - 11)
  14: SoAd delivers RxPdu_Tcp_TP_1 (see steps 06 - 11)
  15 VP (SoAd.SWS_SoAd_00566):
     SoAd preserved the order of received data

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00564</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00566</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>187</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>479</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>483</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00574.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>484</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00574.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>485</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00574.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>486</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1762</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_12_HeaderMode_MultiplePdus_IF_TP_Tcp_Buffered_Segmented</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0012_PduHeaderMode.c</sourcefile>
      <sourceline>643</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that PDUs are delivered completely, in the correct order
  and to the destined upper layer in case multiple TP-Pdus and IF-PDS are received
  in multiple segments on a TCP socket connection and the internal SoAd buffer is used.

Test Object: PduHeaderMode
Test Precondition: 
  - SoAd is initialized
  - Socket Connection is online

Test Execution: 
  01: Call RxIndication several times until all segments are forwarded to SoAd
  02 VP (SoAd.SWS_SoAd_00571.1a):
        SoAd queries available buffer for RxPdu_Tcp_TP_2
  03 VP (SoAd.SWS_SoAd_00564):
        TcpIp_TcpReceived is called for the processed PduHeader
  04 VP (SoAd.SWS_SoAd_00565, SoAd.EB.Buffer.TcpSegmentation.PduHeader,
           SoAd.EB.Buffer.TcpSegmentation.IfPdu):
       The TEST_PDUR_RXPDU_TCP_IF_0 PDU is correctly forwarded to the SoAdGenUL
  05 VP: All received bytes from TEST_PDUR_RXPDU_TCP_IF_0 are confirmed via TcpIp_TcpRceived
  06 VP (SoAd.SWS_SoAd_00565, SoAd.EB.Buffer.TcpSegmentation.PduHeader,
           SoAd.EB.Buffer.TcpSegmentation.IfPdu):
       The TEST_PDUR_RXPDU_TCP_IF_1 PDU is correctly forwarded to the PduR
  07 VP: All received bytes from TEST_PDUR_RXPDU_TCP_IF_1 are confirmed via TcpIp_TcpRceived
  08: Call MainFunction, to forward all TP PDU data to the upper layers
  09 VP (SoAd.SWS_SoAd_00574.1):
         SoAd queries available buffer for RxPdu_Tcp_TP_2
  10 VP (SoAd.SWS_SoAd_00574.2):
        SoAd delivers RxPdu_Tcp_TP_2 to PduR
  11 VP (SoAd.SWS_SoAd_00574.3):
        RxIndication for RxPdu_Tcp_TP_2 is called with E_OK
  12 VP (SoAd.SWS_SoAd_00574.3):
        SoAd dispatches the next TP-PDU RxPdu_Tcp_TP_0
  13: SoAd delivers RxPdu_Tcp_TP_0
  14 VP (SoAd.SWS_SoAd_00574.3):
        RxIndication for RxPdu_Tcp_TP_0 is called with E_OK
  15 VP (SoAd.SWS_SoAd_00574.3):
        SoAd dispatches the next TP-PDU RxPdu_Tcp_TP_1
  16: SoAd delivers RxPdu_Tcp_TP_1
  17 VP:
    All received bytes from TEST_PDUR_RXPDU_TCP_TP_2, TEST_PDUR_RXPDU_TCP_TP_0 and
    TEST_PDUR_RXPDU_TCP_TP_1 including the PduHeaders for TEST_PDUR_RXPDU_TCP_TP_0
    and TEST_PDUR_RXPDU_TCP_TP_1 are confirmed via TcpIp_TcpRceived at once.
  18 VP: no further actions expected
  19 VP (SoAd.SWS_SoAd_00566):
       SoAd preserved the order of received data

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00564</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00566</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>187</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>479</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00574.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>484</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00574.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>485</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00574.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>486</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.Buffer.TcpSegmentation.PduHeader</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>577</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.Buffer.TcpSegmentation.IfPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>578</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1763</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_12_HeaderMode_OversizedIfPdu_Tcp_Segmented</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0012_PduHeaderMode.c</sourcefile>
      <sourceline>914</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that the SoAd is able to keep track of the PDU Header offsets
  even if a segmented and oversized PDU (i.e. a PDU that is larger than its
  configured PDU length in EcuC) is received.

Test Object: None.
Test Precondition: 
  - SoAd is initialized
  - Socket Connection is online

Test Execution: 
  01: Call RxIndication() with the first part of the first PDU (oversized RxPdu_Tcp_IF_0).
  02: Call RxIndication() with the second part of the first PDU.
  03: Call RxIndication() with the remaining part of the first PDU and the complete
      second PDU (PDU RxPdu_Tcp_IF_1).
  04: VP (SoAd.EB.Buffer.TcpSegmentation.OversizedIfPdu, SoAd.SWS_SoAd_00564,
          SoAd.EB.PbVariantSupport.SoAdRxPduRef):
         Check the first PDU is discarded, i.e. no UL function is called,
         but the data bytes are still confirmed via TcpIp_TcpReceived.
  05: VP (SoAd.EB.Buffer.TcpSegmentation.Size, SoAd.EB.PbVariantSupport.SoAdRxPduRef):
         Verify that the second PDU is correctly forwarded to the UL, by calling
         [UL]_SoAdIfRxIndication().
  06: VP(SoAd.SWS_SoAd_00564, SoAd.EB.PbVariantSupport.SoAdRxPduRef):
        All received bytes from the second PDU are confirmed via TcpIp_TcpRceived().
  07: Call MainFunction().

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00564</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.Buffer.TcpSegmentation.Size</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>576</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.Buffer.TcpSegmentation.OversizedIfPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdRxPduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>725</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1764</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_12_HeaderMode_SegmentedPdu_Tcp_Buffered</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0012_PduHeaderMode.c</sourcefile>
      <sourceline>1084</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test verifies that also the segmented PDU is delivered in the correct order
  and to the destined upper layer in case multiple TP-Pdus are received at
  once on a TCP socket connection and the internal SoAd buffer is used.

Test Object: None.
Test Precondition: 
  - SoAd is initialized
  - TCP Socket Connection is online

Test Execution: 
  01: Call RxIndication() with two PDUs (RxPdu_Tcp_TP_2, RxPdu_Tcp_TP_0), second PDU segmented
  02 VP(SoAd.SWS_SoAd_00571.1a):
     SoAd queries available buffer for RxPdu_Tcp_TP_2
  03 VP(SoAd.SWS_SoAd_00564):
     TcpIp_TcpReceived() is called for the processed PduHeader
  04 VP(SoAd.SWS_SoAd_00571.2):
     all PDU data is copied into the SoAd buffer - no CopyRxData calls
  05: Call MainFunction()
  06 VP(SoAd.SWS_SoAd_00574.1):
     PduR_SoAdTpCopyRxData() is called - SoAd queries available buffer for RxPdu_Tcp_TP_2
  07 VP(SoAd.SWS_SoAd_00574.2):
     PduR_SoAdTpCopyRxData() is called - SoAd delivers RxPdu_Tcp_TP_2 to PduR
  08 VP(SoAd.SWS_SoAd_00574.3):
     PduR_SoAdTpRxIndication() is called for RxPdu_Tcp_TP_2
  09 VP(SoAd.SWS_SoAd_00574.3):
     PduR_SoAdTpStartOfReception() is called - SoAd dispatchs the next TP-PDU RxPdu_Tcp_TP_0
  10 VP(SoAd.SWS_SoAd_00574.2)
     PduR_SoAdTpCopyRxData() is called - SoAd delivers segmented RxPdu_Tcp_TP_0 to PduR
  11 VP(SoAd.SWS_SoAd_00564):
     TcpIp_TcpReceived() is called for the payload of RxPdu_Tcp_TP_2, the processed
     PduHeader of RxPdu_Tcp_TP_0 and segmented payload

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00564</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00566</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>187</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>479</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>483</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00574.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>484</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00574.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>485</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00574.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>486</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1765</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_12_PB_MCG_filename_typename_master</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0012_PduHeaderMode.c</sourcefile>
      <sourceline>1256</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
   Verify that SoAd correctly generates two configurations.

   This test is a regression test for bug ASCSOAD-1312.


Test Object: 
  Postbuild variant

Test Precondition: 
  - Two different postbuild configurations exist

Test Execution: 
  01 VP(SoAd.EB.PBSelectable.Master): Check that SoAd_PBcfg.h exists and can be included
  02 VP(SoAd.EB.PBSelectable.FileName): Verify that files SoAd_PostBuildSelectable_VARIANT_0_PBcfg.h and
                                                          SoAd_PostBuildSelectable_VARIANT_1_PBcfg.h exist
  03 VP(SoAd.EB.PBSelectable.Master): Check that SoAd_SymbolicNames_PBcfg.h exists
     and can be included
  04 VP(SoAd.EB.PBSelectable.FileName): Verify that files
                                        SoAd_SymbolicNamesPostBuildSelectable_VARIANT_0_PBcfg.h and
                                        SoAd_SymbolicNamesPostBuildSelectable_VARIANT_1_PBcfg.h exist
  05 VP(SoAd.EB.PBSelectable.TypeName): Verify that types
     SoAd_PostBuildSelectable_VARIANT_0_ConstConfigLayoutType, SoAd_PostBuildSelectable_VARIANT_0_ConfigLayoutType,
     SoAd_PostBuildSelectable_VARIANT_1_ConstConfigLayoutType and SoAd_PostBuildSelectable_VARIANT_1_ConfigLayoutType
     exist.
  06 VP(SoAd.EB.PBSelectable.TypeName, SoAd.EB.PBSelectable.FileName): Verify that configuration
     variables SoAd_PostBuildSelectable_VARIANT_0_ConfigLayoutType and
     SoAd_PostBuildSelectable_VARIANT_1_ConfigLayoutType exist.
     Check indirectly (via usage of SoAd_PostBuildSelectable_VARIANT_0_ConfigLayout and
     SoAd_PostBuildSelectable_VARIANT_1_ConfigLayout) that files SoAd_PostBuildSelectable_VARIANT_0_PBcfg.c and
     SoAd_PostBuildSelectable_VARIANT_1_PBcfg.c have been included and were compiled.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.PBSelectable.FileName</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>748</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PBSelectable.TypeName</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>749</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PBSelectable.Master</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>750</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1766</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SoAd_ConTest_00_17_ReceiveOnSocketGroup</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0017_RxSoConGroup.c</sourcefile>
      <sourceline>107</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test checks the behaviour of a socket connection group while receiving a PDU.
  
Test Object: None.
Test Precondition: 
    - SoAd is initialized
    - SoAdPduHeaderEnable is TRUE
  
Test Execution: 
    01: VP(SoAd.SWS_SoAd_00686.1): Verify that socket connection state is
        SOAD_SOCON_RECONNECT.
    02: Call SoAd_RxIndication() with a PDU HeaderID that matches exactly to the
        first socket connection.
    03: VP(SoAd.EB.PbVariantSupport.SoAdRxSocketConnOrSocketConnBundleRef): Verify that data was sent.
    04: Call SoAd_RxIndication() with a PDU HeaderID that matches exactly to the
        second socket connection.
    05: VP(SoAd.EB.PbVariantSupport.SoAdRxSocketConnOrSocketConnBundleRef): Verify that data was sent.
    06: Call SoAd_RxIndication() with a PDU HeaderID that doesn't match any
        socket connection.
    07: VP(SoAd.SWS_SoAd_00559.3): Verify that a DET was reported.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00559.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>465</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00686.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>416</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.PbVariantSupport.SoAdRxSocketConnOrSocketConnBundleRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>724</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1767</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_17_LocalIpAddrAssigmentChg_flag_disabled</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0017_RxSoConGroup.c</sourcefile>
      <sourceline>282</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that on a socket connection group with LocalIpAddrAssignmentChg disabled
    SoAd_LocalIpAddrAssignmentChg() will no forward the call to the upper layer.
  
Test Object: None.
Test Precondition: 
    - SoAd is initialized
    - LocalIpAddrAssignmentChg flag is disabled
  
Test Execution: 
    01: Call SoAd_LocalIpAddrAssignmentChg() to open all 3 socket connections from the socket
        connection group.
    02: Call SoAd_MainFunction().
    03: VP(): Verify that &lt;Up&gt;_[SoAd][If]-LocalIpAddrAssignmentChg() was not called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SoAdLocalIpAddrAssigmentChg_flag_disabled</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>672</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1768</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SoAd_ConTest_00_18_UDP_Inv_Port</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0018_MaxMeasurementCounters.c</sourcefile>
      <sourceline>39</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies functionality of SoAd_GetAndResetMeasurementData() in case of
    dropped PDUs caused by invalid destination UDP-Port.
  
Test Object: 
    SoAd_GetAndResetMeasurementData()
  
Test Precondition: 
    - SoAdGetAndResetMeasurementDataApi config param = ON
    - Communication Protocol UDP
  
Test Execution: 
    01: Open an UDP socket connection.
    02: Call SoAd_RxIndication() with invalid destination UDP-Port.
    03: VP(): Verify that security event SOAD_SEV_DROP_MSG_RX_UDP_SOCKET_ID was called. 
    04: Call SoAd_GetAndResetMeasurementData() with measurement index SOAD_MEAS_ALL
        and flag set to TRUE to reset all Measurement counters.
    05: Call SoAd_GetAndResetMeasurementData() with measurement index SOAD_MEAS_DROP_UDP.
    06: VP(SWS_SoAd_00748, SWS_SoAd_00752, SWS_SoAd_00753): Verify that measurement data
        is set to 0.
    07: Call SoAd_RxIndication() with invalid destination UDP-Port 6 times.
    08: VP(): Verify that security event SOAD_SEV_DROP_MSG_RX_UDP_SOCKET_ID gets called each time. 
    09: Call SoAd_GetAndResetMeasurementData() with SOAD_MEAS_DROP_UDP and NULL_PTR.
    10: VP(SWS_SoAd_00755): Verify that function returned E_OK.
    11: Call SoAd_GetAndResetMeasurementData() with measurement index SOAD_MEAS_DROP_UDP and
        valid MeasurementDataPtr.
    12: VP(SWS_SoAd_00750,SWS_SoAd_00758 ): Verify that measurement data equals the number of 
        dropped datagrams caused by invalid destination UDP-Port.
    13: Call SoAd_GetAndResetMeasurementData() with not supported measurement index.
    14: VP(SWS_SoAd_00751): Verify that E_NOT_OK is returned.
    15: Call SoAd_GetAndResetMeasurementData() with measurement index SOAD_MEAS_ALL
        and flag set to FALSE.
    16: VP(SWS_SoAd_00753): Verify that measurement data counter is not reset.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00748</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>361</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00750</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>363</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00751</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>364</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00752</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>365</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00753</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>366</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00755</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>368</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00758</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>371</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1769</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_18_UDP_Inv_Port_Reporting_OFF</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0018_MaxMeasurementCounters.c</sourcefile>
      <sourceline>216</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies functionality of SoAd_GetAndResetMeasurementData() in case of
    dropped PDUs caused by invalid destination UDP-Port. Also it verifies that no
    security event is reported to Idsm as reporting is disabled.
  
Test Object: 
    SoAd_GetAndResetMeasurementData()
  
Test Precondition: 
    - SoAdGetAndResetMeasurementDataApi config param = ON
    - Communication Protocol UDP
  
Test Execution: 
    01: Open an UDP socket connection.
    02: Call SoAd_RxIndication() with invalid destination UDP-Port.
    03: Call SoAd_GetAndResetMeasurementData() with measurement index SOAD_MEAS_ALL
        and flag set to TRUE to reset all Measurement counters.
    04: Call SoAd_GetAndResetMeasurementData() with measurement index SOAD_MEAS_DROP_UDP.
    05: VP(SWS_SoAd_00748, SWS_SoAd_00752, SWS_SoAd_00753): Verify that measurement data
        is set to 0.
    06: Call SoAd_RxIndication() with invalid destination UDP-Port 6 times.
    07: Call SoAd_GetAndResetMeasurementData() with SOAD_MEAS_DROP_UDP and NULL_PTR.
    08: VP(SWS_SoAd_00755): Verify that function returned E_OK.
    09: Call SoAd_GetAndResetMeasurementData() with measurement index SOAD_MEAS_DROP_UDP and
        valid MeasurementDataPtr.
    10: VP(SWS_SoAd_00750,SWS_SoAd_00758 ): Verify that measurement data equals the number of 
        dropped datagrams caused by invalid destination UDP-Port.
    11: Call SoAd_GetAndResetMeasurementData() with not supported measurement index.
    12: VP(SWS_SoAd_00751): Verify that E_NOT_OK is returned.
    13: Call SoAd_GetAndResetMeasurementData() with measurement index SOAD_MEAS_ALL
        and flag set to FALSE.
    14: VP(SWS_SoAd_00753): Verify that measurement data counter is not reset.
    15: VP(): Verify that no the security event was reported to Idsm.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00748</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>361</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00750</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>363</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00751</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>364</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00752</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>365</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00753</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>366</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00755</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>368</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00758</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>371</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1770</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_18_TCP_Inv_Port</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0018_MaxMeasurementCounters.c</sourcefile>
      <sourceline>387</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies functionality of SoAd_GetAndResetMeasurementData() in case of
    dropped PDUs caused by invalid destination TCP-Port.
  
Test Object: 
    SoAd_GetAndResetMeasurementData()
  
Test Precondition: 
    - SoAdGetAndResetMeasurementDataApi config param = ON
    - Communication Protocol TCP
  
Test Execution: 
    01: Open an TCP socket server connection.
    02: Call SoAd_RxIndication() with invalid destination TCP-Port.
    03: VP(SWS_SoAd_91010): Call SoAd_GetAndResetMeasurementData() with measurement index
        SOAD_MEAS_DROP_TCP.
    04: VP(SWS_SoAd_00748, SWS_SoAd_00749): Verify that measurement data is set to 1.
    05: Call SoAd_RxIndication() with invalid destination TCP-Port 5 times.
    06: Call SoAd_GetAndResetMeasurementData() with SOAD_MEAS_DROP_TCP and NULL_PTR.
    07: VP(SWS_SoAd_00755): Verify that function returned E_OK.
    08: Call SoAd_GetAndResetMeasurementData() with SOAD_MEAS_DROP_TCP.
    09: VP(SWS_SoAd_00749, SWS_SoAd_00758): Verify that measurement data equals the number of
        dropped datagrams caused by invalid destination TCP-Port.
    10: Call SoAd_GetAndResetMeasurementData() with measurement index SOAD_MEAS_ALL
        and flag set to TRUE.
    11: Call SoAd_GetAndResetMeasurementData() with measurement index SOAD_MEAS_DROP_TCP.
    12: VP(SWS_SoAd_00753): Verify that measurement data counter is reset.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_91010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>373</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00748</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>361</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00749</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>362</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00751</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>364</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00752</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>365</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00753</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>366</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00755</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>368</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00758</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>371</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1771</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_18_UDP_MaxCounterValue</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0018_MaxMeasurementCounters.c</sourcefile>
      <sourceline>528</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that measurement data UDP counter does not overrun.
  
Test Object: 
    SoAd_GetAndResetMeasurementData()
  
Test Precondition: 
    - SoAdGetAndResetMeasurementDataApi config param = ON
    - Communication Protocol UDP
  
Test Execution: 
    01: Open an UDP socket connection.
    02: Set SoAd_MeasurementDropData_Udp counter to maximal value.
    03: Call SoAd_RxIndication() with invalid destination UDP-Port 3 times.
    04: VP(): Verify that security event SOAD_SEV_DROP_MSG_RX_UDP_SOCKET_ID gets reported to Idsm
              each time.
    05: Call SoAd_GetAndResetMeasurementData() with measurement index SOAD_MEAS_DROP_UDP.
    06: VP(): Verify that UDP Measurement counter did not overrun.
    07: VP(): Verify that the security event SOAD_SEV_DROP_MSG_RX_UDP_SOCKET_ID was reported to Idsm.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00754</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>367</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1772</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_18_UDP_MaxCounterValue_Reporting_OFF</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0018_MaxMeasurementCounters.c</sourcefile>
      <sourceline>625</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that measurement data UDP counter does not overrun. It also verifies that
    no security event is reported to Idsm as reporting is disabled.
  
Test Object: 
    SoAd_GetAndResetMeasurementData()
  
Test Precondition: 
    - SoAdGetAndResetMeasurementDataApi config param = ON
    - Communication Protocol UDP
  
Test Execution: 
    01: Open an UDP socket connection.
    02: Set SoAd_MeasurementDropData_Udp counter to maximal value.
    03: Call SoAd_RxIndication() with invalid destination UDP-Port 6 times.
    04: Call SoAd_GetAndResetMeasurementData() with measurement index SOAD_MEAS_DROP_UDP.
    05: VP(): Verify that UDP Measurement counter did not overrun.
    06: VP(): Verify that nothing was reported to Idsm.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00754</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>367</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1773</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_18_TCP_MaxCounterValue</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0018_MaxMeasurementCounters.c</sourcefile>
      <sourceline>721</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that measurement data TCP counter does not overrun.
  
Test Object: 
    SoAd_GetAndResetMeasurementData()
  
Test Precondition: 
    - SoAdGetAndResetMeasurementDataApi config param = ON
    - Communication Protocol TCP
  
Test Execution: 
    01: Open an TCP socket server connection.
    02: Set SoAd_MeasurementDropData_Tcp counter to maximal value.
    03: Call SoAd_RxIndication() with invalid destination TCP-Port several times.
    04: Call SoAd_GetAndResetMeasurementData() with measurement index SOAD_MEAS_DROP_TCP.
    05: VP(): Verify that TCP Measurement counter did not overrun.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00754</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>367</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1774</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SoAd_ConTest_00_19_UDP_OnInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0019_Multiple_PSI.c</sourcefile>
      <sourceline>42</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Both RoutingGroups are disabled at init to different RG
  
Test Object: 
    SoAd_EnableSpecific()
  
Test Precondition: 
    - SocketRoute that references a Socket Connection Group with at least 2 Socket Connections
    - with exactly the same amount of SocketRouteDestinations configured
    - SocketRoute that Upper Layer is IF
  
Test Execution: 
    01: Open an UDP socket connection.
    02: Call SoAd_RxIndication() for the any SoCon
    03: VP(): Verify that the not enabled SoCon/RoutingGroup does not work.
    04: Call SoAd_RxIndication() for the other SoCon than the one Called in 02
    05: VP(): Verify that the not enabled SoCon/RoutingGroup does not work.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00760</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>378</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1775</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_19_UDP_EnableServiceInstance</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0019_Multiple_PSI.c</sourcefile>
      <sourceline>188</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if one RG is active the corresponding SoCon can receive while the deactivated one
    cannot
  
Test Object: 
    SoAd_EnableSpecific()
  
Test Precondition: 
    - SocketRoute that references a Socket Connection Group with at least 2 Socket Connections
    - with exactly the same amount of SocketRouteDestinations configured
    - SocketRoute that Upper Layer is IF
  
Test Execution: 
    01: Open an UDP socket connection.
    02: Call SoAd_EnableSpecific() for a RoutingGroup and SoCon referenced in the SocketRoute.
    03: VP(): Check that the return value of SoAd_EnableSpecific is E_OK
    04: Call SoAd_RxIndication() for the SoCon enabled in 02
    05: VP(): Verify that the IfRxIndication does work by checking for E_Ok and Looking into the Stub
    06: Call SoAd_IfRxIndication() for the SoCon that was not enabled in 02
    07: VP(): Verify that the not enabled SoCon/RoutingGroup does not work.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00760</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>378</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.Func0130.Rx.Udp.If.EnableServiceInstance</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1117</internalId></provcov>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1776</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_19_UDP_EnableServiceInstanceTwice</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0019_Multiple_PSI.c</sourcefile>
      <sourceline>355</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Enable the same ServiceInstance twice.
  
Test Object: 
    SoAd_EnableSpecific()
  
Test Precondition: 
    - SocketRoute that references a Socket Connection Group with at least 2 Socket Connections
    - with exactly the same amount of SocketRouteDestinations configured
    - SocketRoute that Upper Layer is IF
  
Test Execution: 
    01: Open an UDP socket connection.
    02: Call SoAd_EnableSpecific() for a RoutingGroup and SoCon referenced in the SocketRoute.
    03: VP(): Check that the return value of SoAd_EnableSpecific is E_OK
    04: Call SoAd_EnableSpecific() for the same RoutingGroup and the same SoCon as in 02.
    05: VP(): Check that the return value of SoAd_EnableSpecific is E_OK
    06: Call SoAd_IfRxIndication() for the SoCon that was not enabled in 02
    07: VP(): Verify that the IfRxIndication does work by checking for E_Ok and Looking into the Stub
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00760</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>378</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.Func0130.Rx.Udp.If.EnableSameServiceInstanceMultipleTimes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1121</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1777</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_19_UDP_DisableInactiveServiceInstance</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0019_Multiple_PSI.c</sourcefile>
      <sourceline>517</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Disable a ServiceInstance that was not yet enabled.
  
Test Object: 
    SoAd_EnableSpecific()
  
Test Precondition: 
    - SocketRoute that references a Socket Connection Group with at least 2 Socket Connections
    - with exactly the same amount of SocketRouteDestinations configured
    - SocketRoute that Upper Layer is IF
  
Test Execution: 
    01: Open an UDP socket connection.
    02: Call SoAd_DisableSpecific() for a RoutingGroup and SoCon referenced in the SocketRoute that
        was not enabled priviously.
    03: VP(): Check that the return value of SoAd_EnableSpecific is E_OK
    04: Call SoAd_IfRxIndication() for the SoCon that was not enabled in 02
    05: VP(): Verify that the not enabled SoCon/RoutingGroup does not work.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00760</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>378</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.Func0130.Rx.Udp.If.DisableServiceInstance</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1118</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1778</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_19_UDP_SwitchServiceInstance</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0019_Multiple_PSI.c</sourcefile>
      <sourceline>666</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that it is possible to switch from an activated Destination/Pdu/Service Instance
    to another one
  
Test Object: 
    SoAd_EnableSpecific()
  
Test Precondition: 
    - SocketRoute that references a Socket Connection Group with at least 2 Socket Connections
    - with exactly the same amount of SocketRouteDestinations configured
    - SocketRoute that Upper Layer is IF
  
Test Execution: 
    01: Open an UDP socket connection.
    02: Call SoAd_EnableSpecific for a RG and SoCon referenced in the SocketRoute from above
    03: VP(): Check that the return value of SoAd_EnableSpecific is E_OK
    04: Call SoAd_RxIndication() for the SoCon enabled in 02
    05: VP(): Verify that the IfRxIndication does work by checking for E_Ok and Looking into the Stub
    06: Disable the same Routing Group by calling SoAd_DisableSpecific for that SoCon/RG Combination.
    07: VP(): Check that the return value of SoAd_DisableSpecific is E_OK
    08: Call SoAd_IfRxIndication() for the SoCon that was disabled in 04
    09: VP(): Verify that the disabled SoCon/RoutingGroup does not work.
    10: Call SoAd_EnableSpecific for another RG and the same SoCon
    11: VP(): Check that the return value of SoAd_EnableSpecific is E_OK
    12: Call SoAd_RxIndication() for the SoCon that was enabled in 06
    13: VP(): Make sure that the RxIndication does work by checking for E_Ok
              and Looking into the Stub and explicitly checking that the old destination is
              not active anymore.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00760</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>378</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.Func0130.Rx.Udp.If.DisableServiceInstance</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1118</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.Func0130.Rx.Udp.If.SwitchServiceInstance</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1119</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1779</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_19_UDP_ParallelServiceInstance</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0019_Multiple_PSI.c</sourcefile>
      <sourceline>876</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that it is possible to have at least two SoCons working in parallel
  
Test Object: 
    SoAd_EnableSpecific()
  
Test Precondition: 
    - SocketRoute that references a Socket Connection Group with at least 2 Socket Connections
    - with exactly the same amount of SocketRouteDestinations configured
    - SocketRoute that Upper Layer is IF
  
Test Execution: 
    01: Open an UDP socket connection.
    02: Call SoAd_EnableSpecific() for a RoutingGroup and SoCon referenced in the SocketRoute.
    03: VP(): Check that the return value of SoAd_EnableSpecific is E_OK
    04: Call SoAd_EnableSpecific() for another RoutingGroup and SoCon referenced in the SocketRoute.
    05: VP(): Check that the return value of SoAd_EnableSpecific is E_OK
    06: Call SoAd_RxIndication() for the SoCon enabled in 02
    07: VP(): Verify that the RxIndication does work by checking for E_Ok and Looking into the Stub
    08: Call SoAd_RxIndication() for the SoCon enabled in 04
    09: VP(): Verify that the RxIndication does work by checking for E_Ok and Looking into the Stub
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00760</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>378</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.Func0130.Rx.Udp.If.ParallelServiceInstance</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1120</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1780</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_19_UDP_TwoSoconSamePdu</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0019_Multiple_PSI.c</sourcefile>
      <sourceline>1056</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    Two SoCons point at the same RoutingGroup
  
Test Object: 
    SoAd_EnableSpecific()
  
Test Precondition: 
    - SocketRoute that references a Socket Connection Group with at least 2 Socket Connections
    - with exactly the same amount of SocketRouteDestinations configured
    - SocketRoute that Upper Layer is IF
  
Test Execution: 
    01: Open an UDP socket connection.
    02: Call SoAd_EnableSpecific() for a RoutingGroup and SoCon referenced in the SocketRoute.
    03: VP(): Check that the return value of SoAd_EnableSpecific is E_OK
    04: Call SoAd_RxIndication() for the SoCon enabled in 02
    05: VP(): Verify that the RxIndication does work by checking for E_Ok and Looking into the Stub
    06: Call SoAd_EnableSpecific() for the same RoutingGroup as in 02 and a different SoCon referenced in the SocketRoute.
    07: VP(): Check that the return value of SoAd_EnableSpecific is E_NOT_OK
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00761</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>379</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.Func0130.Rx.Udp.If.TwoSoConSamePdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1036</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1781</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_19_UDP_TwoPdusForSameSoCon</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0019_Multiple_PSI.c</sourcefile>
      <sourceline>1221</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    One SoCons points at two RoutingGroups
  
Test Object: 
    SoAd_EnableSpecific()
  
Test Precondition: 
    - SocketRoute that references a Socket Connection Group with at least 2 Socket Connections
    - with exactly the same amount of SocketRouteDestinations configured
    - SocketRoute that Upper Layer is IF
  
Test Execution: 
    01: Open an UDP socket connection.
    02: Call SoAd_EnableSpecific() for a RoutingGroup and SoCon referenced in the SocketRoute.
    03: VP(): Check that the return value of SoAd_EnableSpecific is E_OK
    04: Call SoAd_RxIndication() for the SoCon enabled in 02
    05: VP(): Verify that the RxIndication does work by checking for E_Ok and Looking into the Stub
    06: Call SoAd_EnableSpecific() for different RoutingGroup and the same SoCon in 02 referenced in
        the SocketRoute.
    07: VP(): Check that the return value of SoAd_EnableSpecific is E_NOT_OK
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00761</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>379</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.Func0130.Rx.Udp.If.TwoPdusForSameSoCon</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1035</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1782</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_19_UDP_EnableTwoRoutingGroupsDisableOne</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0019_Multiple_PSI.c</sourcefile>
      <sourceline>1387</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if one Destination of a socketroute with multiple Destinations has multiple RG
    active the turning off of one will not interfere with the destination beeing still enabled.
    cannot
  
Test Object: 
    SoAd_EnableSpecific()
  
Test Precondition: 
    - SocketRoute that references a Socket Connection Group with at least 2 Socket Connections
    - with exactly the same amount of SocketRouteDestinations configured
    - SocketRoute that Upper Layer is IF
  
Test Execution: 
    01: Open an UDP socket connection.
    02: Call SoAd_EnableSpecific() for a RoutingGroup and SoCon referenced in the SocketRoute.
    03: VP(): Check that the return value of SoAd_EnableSpecific is E_OK
    04: Call SoAd_EnableSpecific() for the other RoutingGroup and the same SoCon.
    05: VP(): Check that the return value of SoAd_EnableSpecific is E_OK
    06: Call SoAd_RxIndication() for the SoCon enabled in 02 and 04
    07: VP(): Verify that the IfRxIndication does work by checking for E_Ok and Looking into the Stub
    08: Call SoAd_DisableSpecific() for the first RoutingGroup and the same SoCon.
    09: VP(): Check that the return value of SoAd_DisableSpecific is E_OK
    10: Call SoAd_IfRxIndication() for the SoCon that was enabled in 02 and 04
    11: VP(): Verify that the SoCon/RoutingGroup is still enabled.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00760</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>378</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.Func0130.Rx.Udp.If.EnableSameServiceInstanceMultipleTimes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1121</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1783</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_TCP_Reporting_ON</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0020_IdsM.c</sourcefile>
      <sourceline>52</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that, if IdsM reporting is enabled, SoAd_RxIndication() will call
    IdsM_SetSecurityEvent() with the security event SOAD_SEV_DROP_PDU_RX_TCP in case of
    dropped PDUs caused by an incorrect SocketAddress.
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
    Security event reporting to IdsM has to be enabled.
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00164</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>380</internalId></provcov>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00166</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>382</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00763</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>388</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1784</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_TCP_Reporting_OFF</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0020_IdsM.c</sourcefile>
      <sourceline>127</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that, if IdsM reporting is disabled, SoAd_RxIndication() will not call
    IdsM_SetSecurityEvent() with the security event SOAD_SEV_DROP_PDU_RX_TCP in case of
    dropped PDUs caused by invalid destination TCP-Port.
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
    Security event reporting to IdsM has to be disabled.
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00164</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>380</internalId></provcov>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00166</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>382</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00763</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>388</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1785</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_TCP_2_Reporting_ON</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0020_IdsM.c</sourcefile>
      <sourceline>201</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_RxIndication() is called for a TCP socket connection with
    an invalid PduHeader ID, the security event SOAD_SEV_DROP_PDU_RX_TCP gets reported to IdsM.
  
Test Object: SoAd_RxIndication()
Test Precondition: 
    Security event reporting to IdsM has to be enabled.
  
Test Execution: 
    01: Bring TCP socket to ONLINE state.
    02: Call SoAd_RxIndication() with invalid ID in pdu header
    03: VP(): Verify that DET is called.
    04: VP(): Verify that security event SOAD_SEV_DROP_PDU_RX_TCP was reported to IdsM.
    05: VP(): Verify that TcpIp_TcpReceived was called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00164</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>380</internalId></provcov>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00166</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>382</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00763</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>388</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1786</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_TCP_2_Reporting_OFF</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0020_IdsM.c</sourcefile>
      <sourceline>285</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_RxIndication() is called for a TCP socket connection with
    an invalid PduHeader ID, the security event SOAD_SEV_DROP_PDU_RX_TCP does not get reported to IdsM
    if security event reporting is disabled.
  
Test Object: SoAd_RxIndication()
Test Precondition: 
    Security event reporting to IdsM has to be disabled.
  
Test Execution: 
    01: Bring TCP socket to ONLINE state.
    02: Call SoAd_RxIndication() with invalid ID in pdu header
    03: VP(): Verify that DET is called.
    04: VP(): Verify that no security event was reported to IdsM.
    05: VP(): Verify that TcpIp_TcpReceived was called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00164</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>380</internalId></provcov>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00166</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>382</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00763</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>388</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1787</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_TCP_3_Reporting_ON</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0020_IdsM.c</sourcefile>
      <sourceline>363</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_RxIndication() is called with a segmented PDU header
    that indicates a PDU length that exceeds (SOAD_PDULENGTHTYPE_MAX - SOAD_PDU_HEADER_LEN),
    the security event SOAD_SEV_DROP_PDU_RX_TCP is reported to IdsM.
  
Test Object: None.
Test Precondition: 
    Security event reporting to IdsM has to be enabled.
  
Test Execution: 
    01: Bring TCP socket to ONLINE state.
    02: Call SoAd_RxIndication() with a frame consisting of
        the first PDU and a part of the header of the second PDU.
    03: Call SoAd_RxIndication() with remaining PDU, with a size equal to SOAD_PDULENGTHTYPE_MAX.
    04: VP(): Verify that PduR_SoAdIfRxIndication() was called.
    05: VP(): Verify that TcpIp_TcpReceived was called.
    06: VP(): Verify that DET is called.
    07: VP(): Verify that security event SOAD_SEV_DROP_PDU_RX_TCP was reported to IdsM.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00164</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>380</internalId></provcov>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00166</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>382</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00763</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>388</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1788</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_TCP_3_Reporting_OFF</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0020_IdsM.c</sourcefile>
      <sourceline>463</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that if SoAd_RxIndication() is called with a segmented PDU header
    that indicates a PDU length that exceeds (SOAD_PDULENGTHTYPE_MAX - SOAD_PDU_HEADER_LEN),
    not security event is reported to IdsM if reporting is disabled.
  
Test Object: None.
Test Precondition: 
    Security event reporting to IdsM is.
  
Test Execution: 
    01: Bring TCP socket to ONLINE state.
    02: Call SoAd_RxIndication() with a frame consisting of
        the first PDU and a part of the header of the second PDU.
    03: Call SoAd_RxIndication() with remaining PDU, with a size equal to SOAD_PDULENGTHTYPE_MAX.
    04: VP(): Verify that PduR_SoAdIfRxIndication() was called.
    05: VP(): Verify that TcpIp_TcpReceived was called.
    06: VP(): Verify that DET is called.
    07: VP(): Verify that no security event was reported to IdsM.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00164</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>380</internalId></provcov>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00166</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>382</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00763</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>388</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1789</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_TCP_4_Reporting_ON</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0020_IdsM.c</sourcefile>
      <sourceline>562</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if a TCP PDU is discarded in case it is larger than the remaining ring
    buffer size, SoAd reports the security event SOAD_SEV_DROP_PDU_RX_TCP to IdsM.
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
    Security event reporting to IdsM is enabled.
  
Test Execution: 
    01: Call SoAd_RxIndication with an oversized pdu length.
    02: VP(): Verify that PduR_SoAdTpCopyRxData() is called to query
        the available buffer.
    03: VP(): Verify that security event SOAD_SEV_DROP_PDU_RX_TCP
              was reported.
    04: VP(): Verify that DET error is reported.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00164</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>380</internalId></provcov>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00166</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>382</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00763</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>388</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1790</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_TCP_4_Reporting_OFF</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0020_IdsM.c</sourcefile>
      <sourceline>642</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if a TCP PDU is discarded in case it is larger than the remaining ring
    buffer size, SoAd does not report a security event to IdsM if reporting is disabled.
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
    Security event reporting to IdsM is disabled.
  
Test Execution: 
    01: Call SoAd_RxIndication with an oversized pdu length.
    02: VP(): Verify that PduR_SoAdTpCopyRxData() is called to query
        the available buffer.
    03: VP(): Verify that no security event was reported.
    04: VP(): Verify that DET error is reported.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00164</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>380</internalId></provcov>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00166</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>382</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00763</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>388</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1791</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_UDP_Reporting_ON</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0020_IdsM.c</sourcefile>
      <sourceline>720</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
      Test case verifies that, if IdsM reporting is enabled, SoAd_RxIndication() will call
      IdsM_SetSecurityEvent() with the security event SOAD_SEV_DROP_PDU_RX_UDP in case incoming
      data gets discarded. In this test the incoming data gets discarded after SoAd_TpCancelReceive()
      was called before.
  &lt;/para&gt;
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
    Security event reporting to IdsM has to be enabled.
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00164</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>380</internalId></provcov>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00167</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>383</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00763</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>388</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1792</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_UDP_Reporting_OFF</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0020_IdsM.c</sourcefile>
      <sourceline>804</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
      Test case verifies that, if IdsM reporting is disabled, SoAd_RxIndication() will not call
      IdsM_SetSecurityEvent() with the security event SOAD_SEV_DROP_PDU_RX_UDP in case incoming
      data gets discarded. In this test the incoming data gets discarded after SoAd_TpCancelReceive()
      was called before.
  &lt;/para&gt;
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
    Security event reporting to IdsM has to be disabled.
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00164</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>380</internalId></provcov>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00167</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>383</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00763</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>388</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1793</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_UDP_2_Reporting_ON</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0020_IdsM.c</sourcefile>
      <sourceline>887</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that in case SoAd_RxIndication() is called for a Socket Connection
    which is not referenced by any SocketRoute and PDU Header disabled, SoAd will drop
    the PDU and report the security event SOAD_SEV_DROP_PDU_RX_UDP.
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
      Security event reporting to IdsM is enabled.
  
Test Execution: 
    01: Bring SoCon that has header disabled and is not referenced by any SocketRoute to ONLINE state.
    02: Call SoAd_RxIndication.
    03: VP(): Verify that security event SOAD_SEV_DROP_PDU_RX_UDP gets reported
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00164</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>380</internalId></provcov>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00167</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>383</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00763</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>388</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1794</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_UDP_2_Reporting_OFF</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0020_IdsM.c</sourcefile>
      <sourceline>965</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that in case SoAd_RxIndication() is called for a Socket Connection
    which is not referenced by any SocketRoute and PDU Header disabled, SoAd will drop
    the PDU but will not report a security event if reporting is disabled.
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
      Security event reporting to IdsM is disabled.
  
Test Execution: 
    01: Bring SoCon that has header disabled and is not referenced by any SocketRoute to ONLINE state.
    02: Call SoAd_RxIndication.
    03: VP(): Verify that no security event was reported.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00164</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>380</internalId></provcov>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00167</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>383</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00763</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>388</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1795</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_UDP_3_Reporting_ON</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0020_IdsM.c</sourcefile>
      <sourceline>1042</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that in case SoAd_RxIndication() is called with an invalid
    header id, the security event SOAD_SEV_DROP_PDU_RX_UDP gets reported to IdsM.
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
    Security event reporting to IdsM is enabled.
  
Test Execution: 
    01: Bring UDP socket with only TX side configured to ONLINE state.
    02: Call SoAd_RxIndication() with pdu that contains an incorrect header id.
    03: VP(): Verify that Det_ReportError is called
    04: VP(): Verify thatsecurity event SOAD_SEV_DROP_PDU_RX_UDP
              was reported.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00164</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>380</internalId></provcov>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00167</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>383</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00763</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>388</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1796</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_UDP_3_Reporting_OFF</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0020_IdsM.c</sourcefile>
      <sourceline>1119</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that in case SoAd_RxIndication() is called with an invalid
    header id, no security event gets reported to IdsM if reporting is disabled.
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
    Security event reporting to IdsM is disabled.
  
Test Execution: 
    01: Bring UDP socket with only TX side configured to ONLINE state.
    02: Call SoAd_RxIndication() with pdu that contains an incorrect header id.
    03: VP(): Verify that Det_ReportError is called
    04: VP() Verify that no security event was reported.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00164</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>380</internalId></provcov>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00167</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>383</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00763</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>388</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1797</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_UDP_4_Reporting_ON</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0020_IdsM.c</sourcefile>
      <sourceline>1193</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if a UDP PDU is discarded in case it is larger than the remaining ring
    buffer size, SoAd reports the security event SOAD_SEV_DROP_PDU_RX_UDP to IdsM.
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
    Security event reporting to IdsM is enabled.
  
Test Execution: 
    01: Call SoAd_RxIndication with an oversized PDU length.
    02: VP(): Verify that TpCopyRxData is called to query the
        available buffer.
    03: VP(): Verify that security event SOAD_SEV_DROP_PDU_RX_UDP
              was reported.
    04: VP(): Verify that DET error is reported.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00164</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>380</internalId></provcov>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00167</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>383</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00763</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>388</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1798</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_20_SOAD_SEV_DROP_PDU_RX_UDP_4_Reporting_OFF</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0020_IdsM.c</sourcefile>
      <sourceline>1273</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if a UDP PDU is discarded in case it is larger than the remaining ring
    buffer size, SoAd does not report a security event to IdsM if reporting is disabled.
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
    Security event reporting to IdsM is disabled.
  
Test Execution: 
    01: Call SoAd_RxIndication with an oversized PDU length.
    02: VP(): Verify that TpCopyRxData is called to query the
        available buffer.
    03: VP(): Verify that no security event was reported.
    04: VP(): Verify that DET error is reported.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00164</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>380</internalId></provcov>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00167</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>383</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00763</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>388</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1799</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_20_SOAD_SEV_DROP_MSG_RX_UDP_LENGTH_Reporting_ON</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0020_IdsM.c</sourcefile>
      <sourceline>1350</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that, if IdsM reporting is enabled, SoAd_RxIndication() will call
    IdsM_SetSecurityEvent() with the event SOAD_SEV_DROP_MSG_RX_UDP_LENGTH in case
    SoAd_RxIndication() is called with a UDP datagram that contains a PDU whose
    length indicated in the header is greater than the given
    length - SOAD_PDU_HEADER_LEN.
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
    Security event reporting to IdsM has to be enabled.
  
Test Execution: 
    01: Bring UDP socket to ONLINE state.
    02: Call SoAd_RxIndication() with a datagram containing one PDU, of which the PduLengthInHeader
        exceeds the length of the given length - SOAD_PDU_HEADER_LEN.
    03 VP(): Verify that IdsM_SetSecurityEvent was called with the event SOAD_SEV_DROP_MSG_RX_UDP_LENGTH
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00164</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>380</internalId></provcov>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00168</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>384</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00763</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>388</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1800</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_20_SOAD_SEV_DROP_MSG_RX_UDP_LENGTH_Reporting_OFF</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0020_IdsM.c</sourcefile>
      <sourceline>1433</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that, if IdsM reporting is disabled, SoAd_RxIndication() will not call
    IdsM_SetSecurityEvent() in case SoAd_RxIndication() is called with a UDP datagram that
    contains a PDU whose length indicated in the header is greater than the given
    length - SOAD_PDU_HEADER_LEN.
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
      Security event reporting to IdsM has to be disabled.
  
Test Execution: 
    01: Bring UDP socket to ONLINE state.
    02: Call SoAd_RxIndication() with a datagram containing one PDU, of which the PduLengthInHeader
        exceeds the length of the given length - SOAD_PDU_HEADER_LEN.
    03: VP(): Verify that IdsM_SetSecurityEvent was not called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00164</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>380</internalId></provcov>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00168</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>384</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00763</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>388</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1801</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_20_SOAD_SEV_DROP_MSG_RX_UDP_LENGTH_2_Reporting_ON</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0020_IdsM.c</sourcefile>
      <sourceline>1512</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when SoAdSocketUdpStrictHeaderLenCheckEnabled field is enabled for a
    UDP socket connection SoAd will check if the length of the received UDP message does match the
    accumulated length of all PDUs including their PDU headers. If their lengths are different
    SoAd shall silently drop the whole message without forwarding any data and report the
    security event SOAD_SEV_DROP_MSG_RX_UDP_LENGTH.
  
Test Object: None.
Test Precondition: 
      Security event reporting to IdsM is enabled.
  
Test Execution: 
    01: Bring UDP socket with SoAdSocketUdpStrictHeaderLenCheckEnabled field enabled to
        ONLINE state.
    02: Call SoAd_RxIndication() with a datagram consisting of one PDU plus one padding byte
    03: VP(): Verify that the complete datagram is silently dropped and security event
              SOAD_SEV_DROP_MSG_RX_UDP_LENGTH was reported.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00164</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>380</internalId></provcov>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00168</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>384</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00763</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>388</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1802</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_20_SOAD_SEV_DROP_MSG_RX_UDP_LENGTH_2_Reporting_OFF</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0020_IdsM.c</sourcefile>
      <sourceline>1592</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that when SoAdSocketUdpStrictHeaderLenCheckEnabled field is enabled for a
    UDP socket connection SoAd will check if the length of the received UDP message does match the
    accumulated length of all PDUs including their PDU headers. If their lengths are different
    SoAd shall silently drop the whole message without forwarding any data and not report a
    security event if reporting is disabled..
  
Test Object: None.
Test Precondition: 
      Security event reporting to IdsM is disabled.
  
Test Execution: 
    01: Bring UDP socket with SoAdSocketUdpStrictHeaderLenCheckEnabled field enabled to
        ONLINE state.
    02: Call SoAd_RxIndication() with a datagram consisting of one PDU plus one padding byte
    03: VP(): Verify that the complete datagram is silently dropped and no security event
              was reported.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00164</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>380</internalId></provcov>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00168</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>384</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00763</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>388</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1803</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_20_SOAD_SEV_DROP_MSG_RX_UDP_SOCKET_Reporting_ON</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0020_IdsM.c</sourcefile>
      <sourceline>1670</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that, if IdsM reporting is enabled, SoAd_RxIndication() will call
    IdsM_SetSecurityEvent() with the security event SOAD_SEV_DROP_MSG_RX_UDP_SOCKET
    if called with invalid address which leads to no suitable socket being found.
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
    Security event reporting to IdsM has to be enabled.
  
Test Execution: 
    01: Open a UDP socket connection.
    02: Call SoAd_RxIndication() with different address than the one of the UDP connection
    03 VP(): Verify that IdsM_SetSecurityEvent was called with the event SOAD_SEV_DROP_MSG_RX_UDP_SOCKET
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00164</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>380</internalId></provcov>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00169</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>385</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00763</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>388</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1804</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_20_SOAD_SEV_DROP_MSG_RX_UDP_SOCKET_Reporting_OFF</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0020_IdsM.c</sourcefile>
      <sourceline>1756</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that, if IdsM reporting is disabled, SoAd_RxIndication() will not
    IdsM_SetSecurityEvent() if called with invalid address which leads to no suitable socket
    being found.
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
    Security event reporting to IdsM has to be disabled.
  
Test Execution: 
    01: Open a UDP socket connection.
    02: Call SoAd_RxIndication() with different address than the one of the UDP connection
    03 VP(): Verify that IdsM_SetSecurityEvent was not called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00164</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>380</internalId></provcov>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00169</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>385</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00763</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>388</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1805</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_20_SOAD_SEV_REJECTED_TCP_CONNECTION_Reporting_ON</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0020_IdsM.c</sourcefile>
      <sourceline>1841</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    This test shall verify that, if IdsM reporting is enabled, SoAd_TcpAccepted() will call
    IdsM_SetSecurityEvent() with the event SOAD_SEV_REJECTED_TCP_CONNECTION in case the connection
    does not get accepted because the SocketState is not SOAD_SOCKETSTATE_CONNECTING.
  &lt;/para&gt;
  
Test Object: 
    SoAd_TcpAccepted()
  
Test Precondition: 
    Security event reporting to IdsM has to be enabled.
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00164</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>380</internalId></provcov>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00170</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>386</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00763</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>388</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1806</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_00_20_SOAD_SEV_REJECTED_TCP_CONNECTION_Reporting_OFF</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_00/source/application/SoAd_ConTest_0020_IdsM.c</sourcefile>
      <sourceline>1929</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    This test shall verify that, if IdsM reporting is disabled, SoAd_TcpAccepted() will not call
    IdsM_SetSecurityEvent() in case a connection does not get accepted.
  &lt;/para&gt;
  
Test Object: 
    SoAd_TcpAccepted()
  
Test Precondition: 
    Security event reporting to IdsM has to be disabled.
  
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00164</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>380</internalId></provcov>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00170</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>386</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00763</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>388</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1807</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SoAd_ConTest_One_RoutingGroup</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_01_OneRoutingGroup/source/application/SoAd_ConTest_01_OneRoutingGroup.c</sourcefile>
      <sourceline>32</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that a transmission with SoAd_IfSpecificRoutingGroupTransmit() is
    performed on the corresponding socket connection.
  
Test Object: 
    Trigger transmit on a specific socket connection.
  
Test Precondition: 
    * SoAd is initialized
    * Specific routing group is configured.
    * SoAdIfTriggerTransmit is enabled.
    * UDP socket connection is online.
    * Only one routing group configured.
  
Test Execution: 
    01: Call SoAd_IfSpecificRoutingGroupTransmit()
    02: VP(SoAd.SWS_SoAd_00720):
        Verify that E_OK was returned.
    03: VP(SoAd.SWS_SoAd_00720):
        Verify that no immediate actions are taken.
    04: Call SoAd_MainFunction().
    05: VP(SoAd.SWS_SoAd_00665.2):
        Verify that TcpIp_UdpTransmit() was called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00720</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>326</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00665.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>447</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1808</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SoAd_ConTest_07_Accept_Multiple_Cons</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_07_SoConGroups/source/application/SoAd_ConTest_07_SoConGroups.c</sourcefile>
      <sourceline>117</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test checks the behavior of a socket connection group. For each assigned
  socket connection parallel communication must be possible.

Test Object: None.
Test Precondition: 
  - SoAd is initialized
  - regarding socket connection is unassigned
  - protocol TCP

Test Execution: 
  01: Indicate that Local IP address with index 0 is assigned now.
  02: Call SoAd Mainfunction once to trigger socket setup
  03: VP (SoAd.SWS_SoAd_00589.b,
          SoAd.SWS_SoAd_00590.1, SoAd.SWS_SoAd_00590.3):
      SoAd does socket setup for listen socket.
      Following API calls are made in sequential order:
      1. TcpIp_GetSocket()
      2. TcpIp_Bind()
      3. TcpIp_TcpListen()
  04 VP (SoAd.SWS_SoAd_00646)
      Simulate the listenSocket is closed by TcpIp
      SoAd_TcpIpEvent(ListenSocketId, TCPIP_TCP_CLOSED);
  05: Call SoAd Mainfunction once to trigger socket setup
  06 VP: Check SoAd retries socket setup
  07: Indicate SoAd that a TCP connection attempt was successful.
      SoAd_TcpAccepted shall be called with following parameter:
      SocketId: the one got in step 3 (TcpIp_GetSocket)
                           SocketId of new conn.     IP address      Port
      First connection:            42               168.212.80.22    100
      Second connection:           13               168.212.80.23    200
      Third connection:            50               168.212.80.24    300
  08: VP:
      SoAd_TcpAccepted shall return E_OK for all three indication
  09: VP (SoAd.SWS_SoAd_00597):
      SoAd forwards the mode change indication to the upper layer module.
      SoAdGenUL_SoConModeChg shall be called twice
      (once for each Socket connection assigned to SoAdGenUL).
      SoConId: 1 (first call) and 2 (second call)
      Mode: SOAD_SOCON_ONLINE (for both calls)
  10: Try to indicate SoAd again that a TCP connection attempt was successful.
      SoAd_TcpAccepted shall be called with following parameter:
      SocketId: the one got in step 3 (TcpIp_GetSocket)
      SocketId of new conn: 27
      IP address/port: any
  11: VP:
      SoAd_TcpAccepted shall return E_NOT_OK
  12: Simulate the reception of data on connection 0
      Pdu Length: 64
      For socket Id, remote IP address and port refer to step 05 (First connection)
  13: VP (SoAd.SWS_SoAd_00567.2):
      SoAd delivers the data to the PduR (Pdu ID 0) and confirms the data to TcpIp.
  14: Simulate the reception of data on connection 1
      Pdu Length: 32
      For socket Id, remote IP address and port refer to step 05 (Second connection)
  15: VP (SoAd.SWS_SoAd_00567.2):
      SoAd delivers the data to the SoAdGenUL (Pdu ID 1) and confirms the data to TcpIp.
  16: Simulate the reception of data on connection 2
      Pdu Length: 16
      For socket Id, remote IP address and port refer to step 05 (Third connection)
  17: VP (SoAd.SWS_SoAd_00567.2):
      SoAd delivers the data to the SoAdGenUL (Pdu ID 2) and confirms the data to TcpIp.
  18: Simulate the reception of wrong data on invalid SocketId 27
  19: VP:
      SoAd does not deliver the data to any upper layer module (and throws and DET error)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00567.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>468</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00589.b</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>391</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00590.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>392</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00590.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>394</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00597</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>211</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1809</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_07_Rx_SocketRoute_SoConGroup</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_07_SoConGroups/source/application/SoAd_ConTest_07_SoConGroups.c</sourcefile>
      <sourceline>369</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test verifies that for a configuration where SoAdSocketRoute is referencing UDP
    SocketConnection Group (and not SoAdSocketConnection) - frames can be received for this socket
    route from any socket connection of the socket connection group, based on the best match for
    remote address/port.
  
Test Object: None.
Test Precondition: None.
Test Execution: 
    01: Indicate that Local IP address with index 1 is assigned.
    02: Call SoAd_MainFunction() to trigger connection setup.
    03: VP(): Verify connections setup (ONLINE state).
    04: Indicate reception of a frame from a SoCon TEST_SOCON_ID_SOADGENUL_3.
    05: VP(): Verify that test PDU is correctly forwarded to GenUL.
    06: Indicate reception of a frame from a SoCon TEST_SOCON_ID_SOADGENUL_4.
    07: VP(): Verify that test PDU is correctly forwarded to GenUL.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.Udp.Rx.SocketRoute_for_SoConGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>666</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1810</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_07_SetRemoteAddr_Udp_Offline</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_07_SoConGroups/source/application/SoAd_ConTest_07_SoConGroups.c</sourcefile>
      <sourceline>501</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that the remote address can be changed if the UDP socket connection does
    not have an active TP session.
  
Test Object: 
    SoAd_SetRemoteAddr()
  
Test Precondition: 
  
Test Execution: 
    01: Call SoAd_SetRemoteAddr() without having an active TP session.
    02: Call SoAd_GetRemoteAddr().
    03: VP(): Verify that the remote address was set.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SetRemoteAddr_InactiveTP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>651</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1811</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SOAD_TxPduFanOut_Udp</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_10_TxPduFanOut/source/application/SoAd_ConTest_10_TxPduFanOut.c</sourcefile>
      <sourceline>41</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify multiple frames are transmitted when SoAd_IfTransmit is called with a PduId that is
    configured for a fan out.
  
Test Object: 
    Pdu fan out feature
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
  
Test Execution: 
    01: Call SoAd_IfTransmit() with PduId for fan out
    02 VP(SoAd.SWS_SoAd_00602):
       TcpIp_UdpTransmit is called multiple times on different sockets
    03 VP(SoAd.SWS_SoAd_00647): PduR_TxConfirmation is called once
    04 VP(SoAd.SWS_SoAd_00647): No other functions are called
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00602</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00647</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>255</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1812</internalId></specobject>
    <specobject>
      <id>TS_SOAD_TxPduFanOut_Tcp</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_10_TxPduFanOut/source/application/SoAd_ConTest_10_TxPduFanOut.c</sourcefile>
      <sourceline>100</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify multiple frames are transmitted when SoAd_IfTransmit is called with a PduId that is
    configured for a fan out and the corresponding TxConfirmation is not passed to the upper layer
    until all data is confirmed by the lower layer.
  
Test Object: 
    Pdu fan out feature
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
  
Test Execution: 
    01: Call SoAd_IfTransmit() with PduId for fan out
    02 VP(SoAd.SWS_SoAd_00602):
       TcpIp_TcpTransmit is called multiple times on different sockets
    03 VP(SoAd.SWS_SoAd_00647):
       PduR_TxConfirmation is not called before all data is confirmed by TcpIp
    04 VP(SoAd.SWS_SoAd_00647): PduR_TxConfirmation is called only once
       even if we call SoAd_TxConfirmation() two times (once for header and
       once for pdu_length).
    05 VP(SoAd.SWS_SoAd_00647): No other functions are called
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00602</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00647</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>255</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1813</internalId></specobject>
    <specobject>
      <id>TS_SOAD_TxPduFanOut_NotOk</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_10_TxPduFanOut/source/application/SoAd_ConTest_10_TxPduFanOut.c</sourcefile>
      <sourceline>172</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify SoAd_IfTransmit returns E_NOT_OK when is it called with a PduId that is configured for
    a fan out and any TcpIp transmission request is not successful.
  
Test Object: 
    Pdu fan out feature
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
  
Test Execution: 
    01: Call SoAd_IfTransmit() with PduId for fan out.
    02: VP(SoAd.SWS_SoAd_00648): SoAd_IfTransmit returns E_NOT_OK.
    03: VP(SoAd.SWS_SoAd_00602):
        TcpIp_UdpTransmit is called multiple times on different sockets.
    04: Call SoAd_MainFunction() to process [UL]_TxConfirmation() notification.
    05: VP(SoAd.SWS_SoAd_00647): PduR_TxConfirmation is NOT called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00602</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00647</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>255</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00648</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>256</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1814</internalId></specobject>
    <specobject>
      <id>TS_SOAD_TxPduFanOut_OK_if_one_Success_Udp</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_10_TxPduFanOut/source/application/SoAd_ConTest_10_TxPduFanOut.c</sourcefile>
      <sourceline>239</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify SoAd_IfTransmit() return E_OK when it is call with a PduId that is configured
    for a fan out, at least one of the TcpIp transmission requests was successful and
    the flag SOAD_PDUROUTE_FANOUT_RETVAL_OR_CONTROLLED is set.
  
Test Object: 
    PduRoute fanout feature where not all PduRouteDest are connected
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
  
Test Execution: 
    01: Call SoAd_IfTransmit() with PduId for fan out.
    02: VP(): SoAd_IfTransmit() returns E_OK, as SOAD_PDUROUTE_FANOUT_RETVAL_OR_CONTROLLED
        is set and at least one TcpIp_UdpTransmit() returned TCPIP_OK
    03: VP(): TcpIp_UdpTransmit() is called multiple times on different sockets.
    04: Call SoAd_MainFunction() to process [UL]_TxConfirmation() notification.
    05: VP(): PduR_TxConfirmation() was called.
  
Test Input: SoAd where PduRoutes have SoAdFanOutRetValueOrControlled configured to true
Test Output: Valid transmission to SocketId where UdpTransmit returned TCPIP_OK&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0146.Fanout.FanOutRetValueOrControlled</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1104</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1815</internalId></specobject>
    <specobject>
      <id>TS_SOAD_TxPduFanOut_OK_if_one_Success_Tcp</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_10_TxPduFanOut/source/application/SoAd_ConTest_10_TxPduFanOut.c</sourcefile>
      <sourceline>306</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify SoAd_IfTransmit() return E_OK when it is call with a PduId that is configured
    for a fan out, at least one of the TcpIp transmission requests was successful and
    the flag SOAD_PDUROUTE_FANOUT_RETVAL_OR_CONTROLLED is set.
  
Test Object: 
    PduRoute fanout feature where not all PduRouteDest are connected
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
  
Test Execution: 
    01: Call SoAd_IfTransmit() with PduId for fan out.
    02: VP(SoAd.dsn.Func0146.Fanout.FanOutRetValueOrControlled):
      SoAd_IfTransmit() returns E_OK, as SOAD_PDUROUTE_FANOUT_RETVAL_OR_CONTROLLED
      is set and at least one TcpIp_UdpTransmit() returned TCPIP_OK
    03: VP(SoAd.SWS_SoAd_00602): TcpIp_TcpTransmit() is called multiple times on different sockets.
    04: Call SoAd_MainFunction().
    05: VP(SoAd.SWS_SoAd_00647): PduR_TxConfirmation is not called before all data is confirmed by TcpIp
  
Test Input: SoAd where PduRoutes have SoAdFanOutRetValueOrControlled configured to true
Test Output: Valid transmission to SocketId where TcpTransmit returned TCPIP_OK&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0146.Fanout.FanOutRetValueOrControlled</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1104</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00602</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00647</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>255</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1816</internalId></specobject>
    <specobject>
      <id>TS_SOAD_TxPduFanOut_GetSoConId</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_10_TxPduFanOut/source/application/SoAd_ConTest_10_TxPduFanOut.c</sourcefile>
      <sourceline>379</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if SoAd_GetSoConId() is called with a TxPduId related to a SoAdPduRoute with
    fan-out, E_NOT_OK will be returned and SoAd shall skip further processing.
  
Test Object: 
    SoAd_GetSoConId()
  
Test Precondition: 
  
Test Execution: 
    01: Call SoAd_GetSoConId() with PduId for fan out.
    02: VP(): Verify that E_NOT_OK was returned.
    03: VP(): Verify that SoConId wasn't updated.
    04: VP(): Verify that no further action took place.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00724</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>331</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1817</internalId></specobject>
    <specobject>
      <id>TS_SOAD_RxIndication_Specific_RoutingGroup</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_10_TxPduFanOut/source/application/SoAd_ConTest_10_TxPduFanOut.c</sourcefile>
      <sourceline>432</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies data reception for a socket connection group.
  
Test Object: 
  
Test Precondition: 
    SoAd module is initialized.
  
Test Execution: 
    01: Call SoAd_RxIndication().
    02: VP(SoAd.SWS_SoAd_00562.1, SoAd.SWS_SoAd_00562.2, SoAd.SWS_SoAd_00562.5):
        Verify that PduR_SoAdIfRxIndication() is called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00562.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>456</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00562.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>457</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00562.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>462</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1818</internalId></specobject>
    <specobject>
      <id>TS_SOAD_IfTransmit_NullSduDataPtr_TriggerTransmit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_10_TxPduFanOut/source/application/SoAd_ConTest_10_TxPduFanOut.c</sourcefile>
      <sourceline>498</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test case verifies that on invocation of SoAd_IfTransmit() with SudDataPtr = NULL_PTR for a
    PDURoute with multiple SoAdPduRouteDest, SoAd shall call TcpIp_UdpTransmit() which shall trigger
    SoAd_CopyTxData() for each SoAdPduRouteDest. Up_[SoAd][If]TriggerTransmit() shall be called to
    retrieve the same data from the UL for each destination to be transmitted.
  
Test Object: 
    Call of SoAd_IfTransmit() with SudDataPtr = NULL_PTR, for a fan-out PDURoute.
  
Test Precondition: 
    - Communication Protocol UDP
    - Header mode enabled
    - PDURoute has multiple SoAdPduRouteDest (fan-out)
    - SoAdIfTriggerTransmit is set to true for upper layer (PduR).
  
Test Execution: 
    01: Set SduDataPtr of transmit PduInfo to NULL.
    02: Call SoAd_IfTransmit() with PduId for fan out
    03: VP(SoAd.Dsn.Func0101.Tx.Udp.If.Header.Fanout, SWS_SoAd_00731):
        Verify that &lt;Up&gt;_[SoAd][If]TriggerTransmit() is called to retrieve the PDU data from the
        upper layer for each SoAdPduRouteDest.
        Verify that TcpIp_UdpTransmit() is called for each SoAdPduRouteDest.
    04: Call SoAd_MainFunction() to confirm transmission.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00731</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>344</internalId></provcov>
        <provcov>
          <linksto>SoAd.Dsn.Func0101.Tx.Udp.If.Header.Fanout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1070</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1819</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SoAd_ConTest_13_00_RoutingGroup_EnabledAtInit_Tx</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_13_RoutingGroups/source/application/SoAd_ConTest_1300_RoutingGroups.c</sourcefile>
      <sourceline>66</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies, by the transmission of a frame, that routing groups are correctly
    configured according to SoAdRoutingGroupIsEnabledAtInit after SoAd_Init().
  
Test Object: 
    PDU Routing Groups
  
Test Precondition: 
    SoAdRoutingGroup_Pdu1A: SoAdRoutingGroupIsEnabledAtInit = true
    SoAdRoutingGroup_Pdu1B: SoAdRoutingGroupIsEnabledAtInit = false
    SoAdRoutingGroup_Pdu1C: SoAdRoutingGroupIsEnabledAtInit = false
    Related SoAdTxPduIds and PduRDestPduHandleIds are configured equally
  
Test Execution: 
    01: Transmit SoAdPduRoute_Udp_Pdu1.
    02: VP(SoAd.SWS_SoAd_00601):
        Verify that SoAd_Transmit() returns E_OK.
    03: VP(SoAd.SWS_SoAd_00601, SoAd.SWS_SoAd_00560):
        Verify that TcpIp_UdpTransmit() is called to transmit Pdu over
        SoAdConf_SoAdPduRoute_2_SignalOut12.
    04: Call SoAd_MainFunction().
    05: VP(SoAd.SWS_SoAd_00601,SoAd.SWS_SoAd_00560,SoAd.EB.SoAdIfTxConfirmation_flag_disabled):
        Verify that there are no transmissions over SoAdSocketConnection_Udp_1B and
        SoAdSocketConnection_Udp_1C and that transmit confirmation function
        PduR_SoAdIfTxConfirmation() is not called within the next SoAd_MainFunction() after the
        latest TcpIp_UdpTransmit() call as IfTxConfirmation flag is not set.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00560</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00601</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.SoAdIfTxConfirmation_flag_disabled</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>671</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1820</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_13_00_RoutingGroup_EnabledAtInit_Rx</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_13_RoutingGroups/source/application/SoAd_ConTest_1300_RoutingGroups.c</sourcefile>
      <sourceline>140</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies, by the reception of three frames, that routing groups are correctly
    configured according to SoAdRoutingGroupIsEnabledAtInit after SoAd_Init().
  
Test Object: 
    PDU Routing Groups
  
Test Precondition: 
    SoAdRoutingGroup_Pdu2A: SoAdRoutingGroupIsEnabledAtInit = false
    SoAdRoutingGroup_Pdu2B: SoAdRoutingGroupIsEnabledAtInit = true
    SoAdRoutingGroup_Pdu2C: SoAdRoutingGroupIsEnabledAtInit = false
  
Test Execution: 
    01: Receive one frame on each of the three socket connections:
        SoAdSocketConnection_Tcp_2A
        SoAdSocketConnection_Tcp_2B
        SoAdSocketConnection_Tcp_2C
    02: VP(SoAd.SWS_SoAd_00600):
         PduR_RxIndication is called for SoAdSocketRouteDest_Tcp_Pdu2B
         Other receptions are discarded, TcpIp_TcpReceived is still called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00600</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>214</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1821</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_13_00_RoutingGroup_DisableRouting_Tx</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_13_RoutingGroups/source/application/SoAd_ConTest_1300_RoutingGroups.c</sourcefile>
      <sourceline>223</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that routing can be disabled via SoAd_DisableRouting().
  
Test Object: 
    PDU Routing Groups
  
Test Precondition: 
    SoAdRoutingGroup_Pdu1A: SoAdRoutingGroupIsEnabledAtInit = true
    SoAdRoutingGroup_Pdu1B: SoAdRoutingGroupIsEnabledAtInit = false
    SoAdRoutingGroup_Pdu1C: SoAdRoutingGroupIsEnabledAtInit = false
  
Test Execution: 
    01: Disable routing for SoAdRoutingGroup_Pdu1A
    02: Transmit SoAdPduRoute_Udp_Pdu1
    03: VP(SoAd.SWS_SoAd_00601):
        SoAd_Transmit() returns E_NOT_OK; No routing group is active.
    04: VP(SoAd.SWS_SoAd_00601):
        No transmissions are executed.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00601</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1822</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_13_00_RoutingGroup_DisableRouting_Tx_Blocked_By_Active_Group</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_13_RoutingGroups/source/application/SoAd_ConTest_1300_RoutingGroups.c</sourcefile>
      <sourceline>280</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that routing checks if there are other active groups for the referenced virtual destinations.
  
Test Object: 
    PDU Routing Groups
  
Test Precondition: 
    SoAdRoutingGroup_Pdu1A: SoAdRoutingGroupIsEnabledAtInit = true
    SoAdRoutingGroup_Pdu1B: SoAdRoutingGroupIsEnabledAtInit = false
    SoAdRoutingGroup_Pdu1C: SoAdRoutingGroupIsEnabledAtInit = false
  
Test Execution: 
    01: Enable routing for SoAdRoutingGroup_Pdu1A_Trigger
    02: Disable routing for SoAdRoutingGroup_Pdu1A
    03: Transmit SoAdPduRoute_Udp_Pdu1
    03: VP():
        SoAd_Transmit() returns E_OK; One routing group is active.
    04: VP():
        Transmission could happen.
    05: Mainfunction to handle pending txconfirmation
    06: VP()
        TxConfirmation is sent to upper layer PDU
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00601</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1823</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_13_00_RoutingGroup_EnableRouting_Rx</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_13_RoutingGroups/source/application/SoAd_ConTest_1300_RoutingGroups.c</sourcefile>
      <sourceline>353</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that routing can be enabled via SoAd_EnableRouting().
  
Test Object: 
    PDU Routing Groups
  
Test Precondition: 
    SoAdRoutingGroup_Pdu2A: SoAdRoutingGroupIsEnabledAtInit = false
    SoAdRoutingGroup_Pdu2B: SoAdRoutingGroupIsEnabledAtInit = true
    SoAdRoutingGroup_Pdu2C: SoAdRoutingGroupIsEnabledAtInit = false
  
Test Execution: 
    01: Enable routing for SoAdConf_SoAdRoutingGroup_Pdu2A and SoAdConf_SoAdRoutingGroup_Pdu2C
    02: Receive one frame on each of the three socket connections:
        SoAdSocketConnection_Tcp_2A
        SoAdSocketConnection_Tcp_2B
        SoAdSocketConnection_Tcp_2C
    03 VP(SoAd.SWS_SoAd_00600):
        PduR_RxIndication is called for SoAdConf_SoAdRoutingGroup_Pdu2A,
        SoAdSocketRouteDest_Tcp_Pdu2B and SoAdConf_SoAdRoutingGroup_Pdu2C.
        TcpIp_TcpReceived is called on all three sockets.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00600</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>214</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1824</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_13_00_SpecificEnable_GlobalRoutingGroup</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_13_RoutingGroups/source/application/SoAd_ConTest_1300_RoutingGroups.c</sourcefile>
      <sourceline>445</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if SoAd_EnableSpecificRouting() is called to enable a global
    SoAdRoutingGroup, TESTLIB_SOAD_E_INV_ARG will be reported to DET.
  
Test Object: 
    PDU Routing Groups
  
Test Precondition: 
    SoAdRoutingGroup_Pdu2A is a global routing group.
  
Test Execution: 
    01: Call SoAd_EnableSpecificRouting() for SoAdConf_SoAdRoutingGroup_Pdu2A, which is a global
        routing group.
    02: VP(): Verify that E_NOT_OK was returned.
    03: VP(): Verify that TESTLIB_SOAD_E_INV_ARG is reported to DET.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SpecificEnable_GlobalRoutingGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>587</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1825</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_13_00_SpecificRoutingGroup_Enabled_If_Tx</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_13_RoutingGroups/source/application/SoAd_ConTest_1300_RoutingGroups.c</sourcefile>
      <sourceline>501</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies for an enabled specific routing group, that a frame can be sent via
    SoAd_IfTransmit().
  
Test Object: 
    PDU Routing Groups
  
Test Precondition: 
    * SoAd is initialized
    * Specific routing group is configured and enabled.
    * UDP socket connection is online.
  
Test Execution: 
    01: Call SoAd_IfTransmit() with TxPduId of the specific routing group.
    02: VP(SoAd.EB.SpecificRoutingGroup_Enable_Tx_If): Verify that E_OK was returned.
    03: VP(SoAd.EB.SpecificRoutingGroup_Enable_Tx_If): Verify that Udp_Transmit() was called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SpecificRoutingGroup_Enable_Tx_If</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>588</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1826</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_13_00_SpecificRoutingGroup_InitDisabled_If_Tx</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_13_RoutingGroups/source/application/SoAd_ConTest_1300_RoutingGroups.c</sourcefile>
      <sourceline>579</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies for specific routing group with SoAdRoutingGroupIsEnabledAtInit disabled,
    that SoAd_IfTransmit() returns E_NOT_OK and no frame was sent.
  
Test Object: 
    PDU Routing Groups
  
Test Precondition: 
    * SoAd is initialized
    * UDP socket connection is online.
    * SoAdRoutingGroupIsEnabledAtInit is disabled.
  
Test Execution: 
    01: Call SoAd_IfTransmit() with TxPduId of the specific routing group.
    02: VP(SoAd.EB.SpecificRoutingGroup_InitDisable_Tx_If): Verify that E_NOT_OK was returned.
    03: VP(SoAd.EB.SpecificRoutingGroup_InitDisable_Tx_If): Verify that no frame was sent.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SpecificRoutingGroup_InitDisable_Tx_If</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>590</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1827</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_13_00_SpecificRoutingGroup_Disabled_If_Tx</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_13_RoutingGroups/source/application/SoAd_ConTest_1300_RoutingGroups.c</sourcefile>
      <sourceline>648</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies for specific routing group,
    that SoAd_IfTransmit() returns E_NOT_OK and no frame was sent
    if the routing group is disabled via SoAd_DisableRouting().
  
Test Object: 
    PDU Routing Groups
  
Test Precondition: 
    * SoAd is initialized
    * UDP socket connection is online.
  
Test Execution: 
    01: Enable the specific routing group.
    02: Disable the specific routing group.
    03: Call SoAd_IfTransmit() with TxPduId of the specific routing group.
    04: VP(SoAd.EB.SpecificRoutingGroup_Disable_Tx_If): Verify that E_NOT_OK was returned.
    05: VP(SoAd.EB.SpecificRoutingGroup_Disable_Tx_If): Verify that no frame was sent.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SpecificRoutingGroup_Disable_Tx_If</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>589</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1828</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_13_00_RoutingGroup_DisabledAtInit_Rx</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_13_RoutingGroups/source/application/SoAd_ConTest_1300_RoutingGroups.c</sourcefile>
      <sourceline>740</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if the related routing group of the socket connection is
    disabled received PDU shall be discarded, and if only a part of the PDU was received
    remote node shall be informed by resetting the Tcp connection
  
Test Object: 
    PDU Routing Groups
  
Test Precondition: 
    Socket SoAdSocketConnection_Tcp_2A is disabled
  
Test Execution: 
    01: Receive a segmented frame on socket SoAdSocketConnection_Tcp_2A.
    02 VP(SoAd.SWS_SoAd_00600):
       Verify that no frame was sent.
    03: Call SoAd_MainFunction().
    04 VP(SoAd.EB.CloseSoCon_SegmentedPDU, SoAd.SWS_SoAd_00642.b.TCP):
       Verify that TcpIp_Close(FALSE) was called for socket SoAdSocketConnection_Tcp_2A.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00600</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>214</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.CloseSoCon_SegmentedPDU</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1026</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00642.b.TCP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>431</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1829</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_13_00_SpecificRoutingGroup_Disabled_Trigger_Tx</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_13_RoutingGroups/source/application/SoAd_ConTest_1300_RoutingGroups.c</sourcefile>
      <sourceline>803</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that a frame can be sent via SoAd_IfSpecificRoutingGroupTransmit()
    on an disabled specific routing group.
  
Test Object: 
    PDU Routing Groups
  
Test Precondition: 
    * SoAd is initialized
    * Specific routing group is configured and disabled.
    * SoAdIfTriggerTransmit is enabled
    * UDP socket connection is online.
  
Test Execution: 
    01: Call SoAd_IfSpecificRoutingGroupTransmit()
    02: VP(SoAd.SWS_SoAd_00720):
        Verify that E_OK was returned.
    03: VP(SoAd.SWS_SoAd_00720):
        Verify that no immediate actions are taken.
    04: Call SoAd_MainFunction().
    05: VP(SoAd.EB.Trigger_Disabled_SpecRoutGrTransmit, SoAd.SWS_SoAd_00665.1):
        Verify that PduR_SoAdIfTriggerTransmit() was called.
    06: VP(SoAd.EB.Trigger_Disabled_SpecRoutGrTransmit, SoAd.SWS_SoAd_00665.2):
        Verify that TcpIp_UdpTransmit() was called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.Trigger_Disabled_SpecRoutGrTransmit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1027</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00720</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>326</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00665.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>446</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00665.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>447</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1830</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_13_00_SpecificRouting_Trigger_Tx</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_13_RoutingGroups/source/application/SoAd_ConTest_1300_RoutingGroups.c</sourcefile>
      <sourceline>914</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that a transmission with
    SoAd_IfSpecificRoutingGroupTransmit() is performed on the corresponding socket connection.
  
Test Object: 
    Trigger transmit on a specific socket connection.
  
Test Precondition: 
    * SoAd is initialized
    * Specific routing group is configured.
    * SoAdIfTriggerTransmit is enabled.
    * UDP socket connection is online.
    * Socket connection group contains at least 2 socket.
    * The second socket connection shall be used.
  
Test Execution: 
    01: Call SoAd_IfSpecificRoutingGroupTransmit()
    02: VP(SoAd.SWS_SoAd_00720):
        Verify that E_OK was returned.
    03: VP(SoAd.SWS_SoAd_00720):
        Verify that no immediate actions are taken.
    04: Call SoAd_MainFunction().
    06: VP(SoAd.EB.Trigger_Disabled_SpecRoutGrTransmit, SoAd.SWS_SoAd_00665.2):
        Verify that TcpIp_UdpTransmit() was called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00720</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>326</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00665.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>447</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1831</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_13_00_GenUL_noTriggerTransmitFlag</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_13_RoutingGroups/source/application/SoAd_ConTest_1300_RoutingGroups.c</sourcefile>
      <sourceline>1014</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that a frame will not be sent via SoAd_IfSpecificRoutingGroupTransmit()
    on an disabled specific routing group if upper layer module does not support the
    TriggerTransmit API.
  
Test Object: 
    PDU Routing Groups
  
Test Precondition: 
    * SoAd is initialized
    * Specific routing group is configured and disabled.
    * SoAdIfTriggerTransmit is disabled
    * UDP socket connection is online.
  
Test Execution: 
    01: Call SoAd_IfSpecificRoutingGroupTransmit()
    02: VP(SoAd.SWS_SoAd_00720):
        Verify that E_OK was returned.
    03: VP(SoAd.SWS_SoAd_00720):
        Verify that no immediate actions are taken.
    04: Call SoAd_MainFunction().
    05: VP(SoAd.SWS_SoAd_00665.3):
        Verify that PduR_SoAdIfTriggerTransmit() was not called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00720</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>326</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00665.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>448</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1832</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_13_00_EnableSpecificRouting_InvRoutingGroup</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_13_RoutingGroups/source/application/SoAd_ConTest_1300_RoutingGroups.c</sourcefile>
      <sourceline>1108</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if SoAd_EnableSpecificRouting() is called using an invalid routing
    group id, E_NOT_OK will be returned and SOAD_E_INV_ARG will be reported to DET.
  
Test Object: 
    SoAd_EnableSpecificRouting()
  
Test Precondition: 
    * SoAd is initialized.
    * UDP socket connection with Specific routing group is online.
  
Test Execution: 
    01: Call Call SoAd_EnableSpecificRouting() with invalid routing group id within
        RoutingGroupCnt range.
    02: VP(): Error is returned with E_NOT_OK.
    03: VP(): Verify that SOAD_E_INV_ARG is reported to DET.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00716</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>322</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1833</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_13_00_SpecificRoutingGroup_Enabled_If_Rx</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_13_RoutingGroups/source/application/SoAd_ConTest_1300_RoutingGroups.c</sourcefile>
      <sourceline>1160</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies for an enabled specific routing group, that a frame can be received via
    SoAd_RxIndication().
  
Test Object: 
    PDU Routing Groups
  
Test Precondition: 
    * SoAd is initialized
    * Specific routing group is configured and enabled.
    * UDP socket connection is online.
  
Test Execution: 
    01: Enable specific routing group.
    02: VP(): Check that the return value of SoAd_EnableSpecific is E_OK
    03: Call SoAd_RxIndication() for the SoCon enabled in 01
    04: VP(): Verify that the IfRxIndication does work by checking for E_Ok and Looking into the Stub
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SpecificRoutingGroup_Enable_Rx_If</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>591</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1834</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_13_00_SpecificRoutingGroup_Enabled_If_Rx_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_13_RoutingGroups/source/application/SoAd_ConTest_1300_RoutingGroups.c</sourcefile>
      <sourceline>1246</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies for an enabled specific routing group, that a frame can be received via
    SoAd_RxIndication().
    This test shall use SoConId 0 to challenge the enable algorithm with lower boarder of index
    values.
  
Test Object: 
    PDU Routing Groups
  
Test Precondition: 
    * SoAd is initialized
    * UDP socket connection is online.
  
Test Execution: 
    01: Call SoAd_RxIndication() with valid parameters for the socket connection under test.
    02: VP(): Verify that frame was dropped since routing group is not enabled.
    03: Call SoAd_EnableSpecificRouting() to enable a routing group.
    04: Call SoAd_RxIndication() with valid parameters for the socket connection under test.
    05: VP(): Verify that SoAdGenUL_SoAdIfRxIndication was called indication that the frame was
        passed to the upper layer.
  
Test Input: 
    Socket Route: EbTest_SoAdSocketRoute_Rx_Specific_Single_Dest
    Socket ID: EBTEST_SOCON_UDP_SINGLE_DEST_SOCKETID
    Routing Group ID EBTEST_ROUTINGGROUP_RX_SPECIFIC_ENABLED_2
  
Test Output: 
    Frame passed to EbTest_SoAdSocketRoute_Rx_Specific_Single_Dest.ULRxPduId
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SpecificRoutingGroup_Enable_Rx_If</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>591</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1835</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_13_00_SpecificRoutingGroup_Enabled_If_Rx_No_SocketRoute</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_13_RoutingGroups/source/application/SoAd_ConTest_1300_RoutingGroups.c</sourcefile>
      <sourceline>1352</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Enable Specific SoAdConnectionGroup that is not configured at any SocketRoutes
  
Test Object: 
    PDU Routing Groups
  
Test Precondition: 
    * SoAd is initialized
    * Specific routing group is configured and enabled.
    * UDP socket connection is online.
  
Test Execution: 
    01: Enable specific routing group.
    02: VP(): Check that the return value of SoAd_EnableSpecific is E_OK
    03: Call SoAd_RxIndication() for the SoCon enabled in 02
    04: VP(): Verify that the IfRxIndication did't work and that the trace is empty
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SpecificRoutingGroup_Enable_Rx_If</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>591</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1836</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_13_00_SpecificRoutingGroup_Single_SocketRouteDest_Multi_RoutingGroup</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_13_RoutingGroups/source/application/SoAd_ConTest_1300_RoutingGroups.c</sourcefile>
      <sourceline>1433</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Single SocketRouteDestination that has at least 2 RoutingGroups configured.
    Both enabled pointing towards the same Destination. Check if IfRxIndication works correctly,
    then disable one of the RoutingGroups and see if IfRxIndication still works correctly.
  
Test Object: 
    PDU Routing Groups
  
Test Precondition: 
    * SoAd is initialized
    * Specific routing group is configured and enabled.
    * UDP socket connection is online.
  
Test Execution: 
    01: Enable specific routing group.
    02: VP(): Check that the return value of SoAd_EnableSpecific is E_OK
    03: Enable second specific routing group.
    04: VP(): Check that the return value of SoAd_EnableSpecific is E_OK
    05: Call SoAd_RxIndication() for the SoCon enabled in 02.
    06: VP(): Verify that the IfRxIndication does work by checking for E_Ok and Looking into the Stub
    07: Disable specific routing group from 03.
    08: VP(): Check that the return value of SoAd_DisableSpecific is E_OK
    09: Call SoAd_RxIndication() for the SoCon enabled in 01.
    10: VP(): Verify that the IfRxIndication does work by checking for E_Ok and Looking into the Stub
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SpecificRoutingGroup_Enable_Rx_If</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>591</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1837</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_13_00_GlobalRoutingGroup_Single_SocketRouteDest_Multi_RoutingGroup</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_13_RoutingGroups/source/application/SoAd_ConTest_1300_RoutingGroups.c</sourcefile>
      <sourceline>1559</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Global RoutingGroup with SocketRouteDestination that has at least 2 Routinggroups configured.
    Check if IfRxIndication works correctly on both activated RoutingGroups,
    then disable one of the RoutingGroups and see if IfRxIndication still works correctly.
  
Test Object: 
    PDU Routing Groups
  
Test Precondition: 
    * SoAd is initialized
    * Specific routing group is configured and enabled.
    * UDP socket connection is online.
  
Test Execution: 
    01: Enable specific routing group.
    02: VP(): Check that the return value of SoAd_EnableSpecific is E_OK
    03: Enable second specific routing group.
    04: VP(): Check that the return value of SoAd_EnableSpecific is E_OK
    05: Call SoAd_RxIndication() for the SoCon enabled in 02.
    06: VP(): Verify that the IfRxIndication does work by checking for E_Ok and Looking into the Stub
    07: Disable specific routing group from 03.
    08: VP(): Check that the return value of SoAd_DisableSpecific is E_OK
    09: Call SoAd_RxIndication() for the SoCon enabled in 01.
    10: VP(): Verify that the IfRxIndication does work by checking for E_Ok and Looking into the Stub
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SpecificRoutingGroup_Enable_Rx_If</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>591</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1838</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SoAd_ConTest_13_01_IfRoutingGroupTransmit_SinglePduRouteDest</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_13_RoutingGroups/source/application/SoAd_ConTest_1301_IfRoutingGroupTransmit.c</sourcefile>
      <sourceline>38</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that SoAd_IfRoutingGroupTransmit() triggers the transmission
    of a single PduRouteDests related to the given RoutingGroupId in the context of the next
    SoAd_MainFunction().
  
Test Object: 
    IfRoutingGroupTransmit
  
Test Precondition: 
  
Test Execution: 
    01: Trigger transmission for RoutinGroup SoAdConf_SoAdRoutingGroup_Pdu1A_Trigger
    02 VP(SoAd.SWS_SoAd_00662): No immediate actions are taken.
    03: Call SoAd_MainFunction()
    04: VP(SoAd.SWS_SoAd_00662, SoAd.SWS_SoAd_00665.1, SoAd.SWS_SoAd_00728):
        PduR_SoAdIfTriggerTransmit() was called correctly
    05: VP(SoAd.SWS_SoAd_00662, SoAd.SWS_SoAd_00665.2):
        The Pdu was only transmitted over SoAdSocketConnection_Udp_1A
    06: Call SoAd_MainFunction()
    07: VP(SoAd.SWS_SoAd_00544):
        PduR_SoAdIfTxConfirmation was called correctly
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00662</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>268</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00665.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>446</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00665.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>447</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00544</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00728</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>332</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1839</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_13_01_IfRoutingGroupTransmit_MultiplePduRouteDest</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_13_RoutingGroups/source/application/SoAd_ConTest_1301_IfRoutingGroupTransmit.c</sourcefile>
      <sourceline>117</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that SoAd_IfRoutingGroupTransmit() triggers the transmission
    of PduRouteDests related to the given RoutingGroupId in the context of the next
    SoAd_MainFunction().
  
Test Object: 
    IfRoutingGroupTransmit
  
Test Precondition: 
  
Test Execution: 
    01: Trigger transmission for RoutinGroup SoAdConf_SoAdRoutingGroup_Pdu1A_Trigger
    02 VP(SWS_SoAd_00662): No immediate actions are taken.
    03: Call SoAd_MainFunction()
    04: VP(SWS_SoAd_00662, SoAd.SWS_SoAd_00665.1):
       PduR_TriggerTransmit() was called correctly twice
    05: VP(SWS_SoAd_00662, SoAd.SWS_SoAd_00665.1):
       The Pdu is only transmitted over SoAdSocketConnection_Udp_1B and
       SoAdSocketConnection_Tcp_2C
    06: Call SoAd_MainFunction()
    07: VP(SoAd.SWS_SoAd_00544):
       PduR_SoAdIfTxConfirmation was called correctly for EBTEST_PDURROUTINGPATH_OUT1
    08: VP(SoAd.SWS_SoAd_00665.2):
       No transmissions on other PduRouteDests
    09 Call SoAdIfTxConfirmation
    10: VP(SoAd.SWS_SoAd_00545):
        PduR_SoAdIfTxConfirmation was called correctly for EBTEST_PDURROUTINGPATH_OUT2
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00662</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>268</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00665.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>446</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00665.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>447</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00544</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00545</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>165</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1840</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_13_01_IfRoutingGroupTransmit_TriggerTransmit_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_13_RoutingGroups/source/application/SoAd_ConTest_1301_IfRoutingGroupTransmit.c</sourcefile>
      <sourceline>221</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that SoAd_IfRoutingGroupTransmit() triggers the transmission
    of a single PduRouteDests related to the given RoutingGroupId in the context of the next
    SoAd_MainFunction().
  
Test Object: 
    IfRoutingGroupTransmit
  
Test Precondition: 
  
Test Execution: 
    01: Trigger transmission for RoutinGroup SoAdConf_SoAdRoutingGroup_Pdu1A_Trigger.
    02: VP(SoAd.EB.SoAdIfTriggerTransmit_NOT_OK): No immediate actions are taken.
    03: Call SoAd_MainFunction().
    04 VP(): PduR_SoAdIfTriggerTransmit() was called correctly.
    05: Call SoAd_MainFunction().
    06 VP(SoAd.EB.SoAdIfTriggerTransmit_NOT_OK): No function is called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.SoAdIfTriggerTransmit_NOT_OK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>601</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1841</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_13_01_IfRoutingGroupTransmit_WrongRoutingGrId</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_13_RoutingGroups/source/application/SoAd_ConTest_1301_IfRoutingGroupTransmit.c</sourcefile>
      <sourceline>283</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that in case of invalid routing group parameter
    SoAd_IfRoutingGroupTransmit() shall raise the development error SOAD_E_INV_ARG.
  
Test Object: 
    SoAd_IfRoutingGroupTransmit()
  
Test Precondition: 
    SoAd module is initialized.
  
Test Execution: 
    01: Call SoAd_IfRoutingGroupTransmit().
    02: VP(): Error is returned with E_NOT_OK.
    03: VP(): Verify that SOAD_E_INV_ARG is reported to DET.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00658</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>264</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1842</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_13_01_RxIndication_RoutingGroup</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_13_RoutingGroups/source/application/SoAd_ConTest_1301_IfRoutingGroupTransmit.c</sourcefile>
      <sourceline>329</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies data reception and transmission for a socket connection group.
  
Test Object: 
    SoAd_IfRoutingGroupTransmit()
  
Test Precondition: 
    SoAd module is initialized.
  
Test Execution: 
    01: Call SoAd_RxIndication().
    02: Call SoAd_MainFunction().
    03: VP(SoAd.SWS_SoAd_00567.2, SoAd.SWS_SoAd_00562.1, SoAd.SWS_SoAd_00562.2
           SoAd.SWS_SoAd_00562.5): Verify that PduR_SoAdIfRxIndication() is called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00562.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>456</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00562.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>457</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00562.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>462</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00567.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>468</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1843</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_13_01_IfRoutingGroupTransmit_SduLength_Bigger</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_13_RoutingGroups/source/application/SoAd_ConTest_1301_IfRoutingGroupTransmit.c</sourcefile>
      <sourceline>387</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that when a transmission of routing group was triggered,
    if upper layer exceeds the configured max PDU size SoAd_MainFunction() shall raise
    the development error SOAD_E_TRIGGERTXBUF.
  
Test Object: 
    SoAd_IfRoutingGroupTransmit()
  
Test Precondition: 
    SoAd module is initialized.
  
Test Execution: 
    01: Call SoAd_IfRoutingGroupTransmit() for RoutinGroup SoAdConf_SoAdRoutingGroup_Pdu1A_Trigger
    02: VP(SWS_SoAd_00662): No immediate actions are taken.
    03: Call SoAd_MainFunction()
    04: VP(SWS_SoAd_00662, SoAd.SWS_SoAd_00665.1):
        PduR_SoAdIfTriggerTransmit() was called.
    05: VP(SoAd.EB.SoAd_TriggeredRoutingGroups_SduLengthBigger):
        Verify that SOAD_E_TRIGGERTXBUF is reported to DET.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00662</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>268</internalId></provcov>
        <provcov>
          <linksto>SoAd.EB.SoAd_TriggeredRoutingGroups_SduLengthBigger</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>674</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1844</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SOAD_nPduUdpTx_TRIGGER_ALWAYS_PDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_15_nPduUdpTx/source/application/SoAd_ConTest_15_nPduUdpTx.c</sourcefile>
      <sourceline>317</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that the whole content of the nPduUdpTx Buffer is transmitted when
    SoAd_IfTransmit is called for a PDU with SoAdTxUdpTriggerMode set to TRIGGER_ALWAYS.
  
Test Object: 
    nPduUdpTx Feature
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
  
Test Execution: 
    01: Transmit PDU with SoAdTxUdpTriggerMode set to TRIGGER_NEVER.
    02: VP(SoAd.SWS_SoAd_00546): Verify that nPduUdpTxBuffer is used, i.e. TcpIp_UdpTransmit()
        not called after SoAd_IfTransmit(). This is because there is at least one PDU on this socket
        connection with SoAdTxUdpTriggerMode set to TRIGGER_NEVER and all related PDUs are "IF".
    03: VP(SoAd.SWS_SoAd_00544): Since nPduUdpTxBuffer is used for a socket connection verify
        that SoAd copies the PDU to the socket specific nPduUdpTxBuffer (instead of calling
        TcpIp_UdpTransmit()).
    04: Transmit PDU with SoAdTxUdpTriggerMode set to TRIGGER_ALWAYS.
    05: VP(SoAd.SWS_SoAd_00548): TcpIp_UdpTransmit is called
       The frame containing both PDUs.
    06: Call SoAd_MainFunction().
    07: VP(SoAd.SWS_SoAd_00544): Verify that PduR_SoAdIfTxConfirmation() is called for
        both PDUs.
    08: VP(SoAd.SWS_SoAd_00548): Verify that frame contains the content and PduHeaders of
        both PDUs.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00546</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>166</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00547</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00548</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>168</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00544</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1845</internalId></specobject>
    <specobject>
      <id>TS_SOAD_nPduUdpTx_TRIGGER_NEVER_PDU_TIMEOUT</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_15_nPduUdpTx/source/application/SoAd_ConTest_15_nPduUdpTx.c</sourcefile>
      <sourceline>432</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that two TRIGGER_NEVER PDUs with different SoAdTxUdpTriggerTimeouts
    are transmitted in one UDP frame after the lower timeout expires.
  
Test Object: 
    nPduUdpTx Feature
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
  
Test Execution: 
    01: Transmit PDU with SoAdTxUdpTriggerMode set to TRIGGER_NEVER
    02: VP (SoAd.SWS_SoAd_00544):
        TcpIp_UdpTransmit is not called (PDU is buffered internally)
    03: Call SoAd_MainFunction
        first case:  until timeout of TRIGGGER_NEVER_30 in udp tx buffer is
                     bigger by one
        second case: until timeout of TRIGGGER_NEVER_30 in udp tx buffer is
                     equal to TRIGGGER_NEVER_10
        third case:  until timeout of TRIGGGER_NEVER_30 in udp tx buffer is
                     smaller by 1
    04: VP:
        TcpIp_UdpTransmit is not called (timeout did not occur yet)
    05: Transmit PDU with SoAdTxUdpTriggerMode set to TRIGGER_NEVER
    06: Call SoAd_MainFunction until one tick before the timeout
        first/second case: data will be transmitted after TRIGGGER_NEVER_10 timeout
        third case: data will be transmitted after TRIGGGER_NEVER_30 timeout
    07: VP:
        TcpIp_UdpTransmit is not called (timeout did not occur yet)
    08: Call SoAd_MainFunction once again to trigger timeout
    09: VP (SoAd.SWS_SoAd_00550):
        TcpIp_UdpTransmit is called The frame containing both PDUs.
    10: VP (SoAd.SWS_SoAd_00544):
        Call SoAd_MainFunction(), PduR_SoAdIfTxConfirmation() is called for both PDUs
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00547</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00550</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>171</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00544</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1846</internalId></specobject>
    <specobject>
      <id>TS_SOAD_nPduUdpTx_TRIGGER_NEVER_PDU_BUFFER_OVERFLOW</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_15_nPduUdpTx/source/application/SoAd_ConTest_15_nPduUdpTx.c</sourcefile>
      <sourceline>603</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that buffered TRIGGER_NEVER Pdus are flushed if a TRIGGER_NEVER Pdu
    is transmitted which is bigger than the remaining buffer size. The last
    transmitted TRIGGER_NEVER Pdu will remain in the nPduUdpTxBuffer until
    the SoAdTxUdpTriggerTimeout occurs.
  
Test Object: 
    nPduUdpTx Feature
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
  
Test Execution: 
    01: Fill nPduUdpTxBuffer with TRIGGER_NEVER Pdus until buffer is full
    02: VP (SoAd.SWS_SoAd_00544):
        TcpIp_UdpTransmit is not called (PDUs are buffered internally)
    03: Transmit TRIGGER_NEVER with a payload length of 1 byte
    04: VP (SoAd.SWS_SoAd_00549):
        TcpIp_UdpTransmit is called to transmit buffered TRIGGER_NEVER because
        last TRIGGER_NEVER did not fit into the nPduUdpTxBuffer
    05: VP (SoAd.SWS_SoAd_00544):
        Call SoAd_MainFunction() and verify that PduR_SoAdIfTxConfirmation() is
        called for both PDUs
    06: Call SoAd_MainFunctions until one tick before the timeout of the
        buffered TRIGGER_NEVER would expire
    07: VP(): TcpIp_UdpTransmit was not called because timeout has not occurred yet
    08: Call SoAd_MainFunction to trigger nPduUdpTxBuffer flush
    09: VP (SoAd.SWS_SoAd_00550):
        TcpIp_UdpTransmit is called to transmit buffered TRIGGER_NEVER because
        timeout occurred
    10: VP (SoAd.SWS_SoAd_00544):
        Call SoAd_MainFunction() and verify that PduR_SoAdIfTxConfirmation() is
        called for transmitted TRIGGER_NEVER Pdu
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00547</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00549</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>170</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00550</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>171</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00544</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1847</internalId></specobject>
    <specobject>
      <id>TS_SOAD_nPduUdpTx_TRIGGER_ALWAYS_PDU_BUFFER_OVERFLOW</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_15_nPduUdpTx/source/application/SoAd_ConTest_15_nPduUdpTx.c</sourcefile>
      <sourceline>783</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that buffered TRIGGER_NEVER Pdus are flushed if a TRIGGER_ALWAYS Pdu
    is transmitted which is bigger than the remaining buffer size. The TRIGGER_ALWAYS
    will be sent immediately in a separate udp package.
  
Test Object: 
    nPduUdpTx Feature
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
  
Test Execution: 
    01: Fill nPduUdpTxBuffer with some TRIGGER_NEVER Pdus
    02: VP(SoAd.SWS_SoAd_00544):
        TcpIp_UdpTransmit is not called (PDUs are buffered internally)
    03: Transmit TRIGGER_ALWAYS PDU which is bigger than remaining nPduUdpTxBuffer size
    04: VP(SoAd.SWS_SoAd_00685):
        TcpIp_UdpTransmit is called to transmit buffered TRIGGER_NEVER Pdus
        (TRIGGER_ALWAYS Pdu does not fit into buffer)
    05: VP(SoAd.SWS_SoAd_00685):
        TcpIp_UdpTransmit is called again to transmit the TRIGGER_ALWAYS Pdu
    06: VP(SoAd.SWS_SoAd_00544):
        Call SoAd_MainFunction() and verify that PduR_SoAdIfTxConfirmation() is
        called for transmitted Pdus
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00547</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00544</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00685</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>169</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1848</internalId></specobject>
    <specobject>
      <id>TS_SOAD_nPduUdpTx_TRIGGER_NEVER_PDU_OVERSIZED</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_15_nPduUdpTx/source/application/SoAd_ConTest_15_nPduUdpTx.c</sourcefile>
      <sourceline>936</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_IfTransmit does not accept TRIGGER_NEVER Pdus which are bigger
    than the nPduUdpTxBuffer and returns E_NOT_OK.
  
Test Object: 
    nPduUdpTx Feature
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
  
Test Execution: 
    01: Set RetVal of TcpIp_UdpTransmit to E_NOT_OK to decline the transmit
        request of the oversized Pdu
    02: VP(SoAd.dsn.Func0102.Tx.If.Trigger_Never.OversizedPDU,
           SoAd.dsn.Func0102.Tx.If.OversizedPDU.NotOK):
        Try to transmit TRIGGER_NEVER which is too large for buffer and verify that
        function returns E_NOT_OK
    03: Set RetVal of TcpIp_UdpTransmit to E_OK to accept the transmit request
        of the oversized Pdu
    04: VP(SoAd.dsn.Func0102.Tx.If.Trigger_Never.OversizedPDU):
        Try to transmit TRIGGER_NEVER which is too large for buffer and verify that
        function returns E_OK
    05: VP():
        Try to transmit TRIGGER_NEVER which barely fits into nPduUdpTxBuffer and verify that
        function returns E_OK
    06: Call SoAd_MainFunction() until one tick before TRIGGER_NEVER would be transmitted
    07: VP: Verify that TRIGGER_NEVER Pdu has not been transmitted yet
    08: Call SoAd_MainFunction once again to trigger timeout
    09: VP():
        Verify that TcpIp_UdpTransmit is called to transmit TRIGGER_NEVER Pdu
    10: VP():
        Call SoAd_MainFunction() and verify that PduR_SoAdIfTxConfirmation() is
        called for transmitted Pdus
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Tx.If.Trigger_Never.OversizedPDU</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>971</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Tx.If.OversizedPDU.NotOK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>973</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1849</internalId></specobject>
    <specobject>
      <id>TS_SOAD_nPduUdpTx_TRIGGER_ALWAYS_PDU_OVERSIZED</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_15_nPduUdpTx/source/application/SoAd_ConTest_15_nPduUdpTx.c</sourcefile>
      <sourceline>1090</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_IfTransmit does not accept TRIGGER_ALWAYS Pdus which are bigger
    than the nPduUdpTxBuffer and returns E_NOT_OK.
  
Test Object: 
    nPduUdpTx Feature
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
  
Test Execution: 
    01: Set RetVal of TcpIp_UdpTransmit to E_NOT_OK to decline the transmit
        request of the oversized Pdu
    02: VP(SoAd.dsn.Func0102.Tx.If.Trigger_Always.OversizedPDU,
           SoAd.dsn.Func0102.Tx.If.OversizedPDU.NotOK):
        Try to transmit TRIGGER_ALWAYS which is too large for buffer and verify that
        function returns E_NOT_OK
    03: Set RetVal of TcpIp_UdpTransmit to E_OK to accept the transmit request
        of the oversized Pdu
    04: VP(SoAd.dsn.Func0102.Tx.If.Trigger_Always.OversizedPDU):
        Try to transmit TRIGGER_ALWAYS which is too large for buffer and verify that
        function returns E_OK
    05: VP():
        Try to transmit TRIGGER_ALWAYS which barely fits into nPduUdpTxBuffer and verify that
        function returns E_OK
    06: VP():
        Verify that TcpIp_UdpTransmit is immediately called to transmit TRIGGER_ALWAYS Pdu
    07: VP():
        Call SoAd_MainFunction() and verify that PduR_SoAdIfTxConfirmation() is
        called for transmitted Pdu
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Tx.If.Trigger_Always.OversizedPDU</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>972</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Tx.If.OversizedPDU.NotOK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>973</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1850</internalId></specobject>
    <specobject>
      <id>TS_SOAD_nPduUdpTx_NEVER_ALWAYS_PDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_15_nPduUdpTx/source/application/SoAd_ConTest_15_nPduUdpTx.c</sourcefile>
      <sourceline>1228</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that no message is lost in the following case:
    - A UDP SoAdSocketConnectionGroup contains multiple socket connections.
    - SoAdSocketnPduUdpTxBufferMin is enabled for this SoAdSocketConnectionGroup.
    - At least one SoAdPduRouteDest with SoAdTxUdpTriggerMode = TRIGGER_NEVER
      and linked to this SoAdSocketConnectionGroup has a PDU stored in the Tx buffer.
    - Another SoAdPduRouteDest with SoAdTxUdpTriggerMode = TRIGGER_ALWAYS performs
      a transmission on another socket connection of the same SoAdSocketConnectionGroup.
  
Test Object: 
    Message lost or corruption with multiple PduRouteDest + nPduUdpTxBuffer + TRIGGER_NEVER
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
  
Test Execution: 
    01: Transmit PDU with SoAdTxUdpTriggerMode set to TRIGGER_NEVER.
    02: VP(SoAd.SWS_SoAd_00546): Verify that nPduUdpTxBuffer is used, i.e. TcpIp_UdpTransmit()
        not called after SoAd_IfTransmit(). This is because there is at least one PDU on this socket
        connection with SoAdTxUdpTriggerMode set to TRIGGER_NEVER and all related PDUs are "IF".
    03: VP(SoAd.SWS_SoAd_00544): Since nPduUdpTxBuffer is used for a socket connection verify
        that SoAd copies the PDU to the socket specific nPduUdpTxBuffer (instead of calling
        TcpIp_UdpTransmit()).
    04: Transmit PDU with SoAdTxUdpTriggerMode set to TRIGGER_ALWAYS.
    05: VP(SoAd.SWS_SoAd_00548): TcpIp_UdpTransmit is called
        The frame containing TRIGGER_ALWAYS PDU is sent.
    06: Call SoAd_MainFunction() until timeout for pdu trigger never occurs
    07: VP(SoAd.SWS_SoAd_00544): Verify that PduR_SoAdIfTxConfirmation() is called for
        TRIGGER_ALWAYS_PDU.
    08: VP(SoAd.SWS_SoAd_00548): Verify that TcpIp_UdpTransmit() is called and
        the frame containing TRIGGER_NEVER PDU is sent.
    09: VP(SoAd.SWS_SoAd_00544): Verify that PduR_SoAdIfTxConfirmation() is called for
        TRIGGER_NEVER_PDU.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00546</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>166</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00547</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00548</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>168</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00544</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1851</internalId></specobject>
    <specobject>
      <id>TS_SOAD_nPduUdpTx_TRIGGER_NEVER_PDU_CAPACITY_OVERFLOW</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_15_nPduUdpTx/source/application/SoAd_ConTest_15_nPduUdpTx.c</sourcefile>
      <sourceline>1363</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if a buffered TRIGGER_NEVER Pdu is flushed because a TRIGGER_NEVER Pdu
    is transmitted which is bigger than the remaining buffer size, then an intercepting Transmit
    can not overload the shadow buffer and is rejected. The first Pdu will be sent. The second
    transmitted TRIGGER_NEVER Pdu will remain in the nPduUdpTxBuffer and the intercepting
    third one will be rejected.
  
Test Object: 
    nPduUdpTx Feature
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
    3 TRIGGER_NEVER Pdus that fullfill the following criteria:
    (PDU_SIZE1 + PDU_SIZE2) &gt; buffer capacity to trigger sending of nPduUdpTxBuffer
    (PDU_SIZE1 + PDU_SIZE3) &gt; buffer capacity to test if the Buffermanagement is correct
  
Test Execution: 
    01: Call Transmit with first PDU of Len 14 (6PL+8Header)
    02: VP (SoAd.SWS_SoAd_00544):
        TcpIp_UdpTransmit is not called (PDUs are buffered internally)
    03: Transmit TRIGGER_NEVER PDU2 with a payload length of 43 (35PL+8Header) byte. This call
        will be intercepted and also a Transmit for PDU3 is called.
    04: VP(SoAd.SWS_SoAd_00549):
        The TransmitCall of the PDU3 must not be ok because it should be rejected because the
        capacity size is not big enough.
    05: VP (SoAd.dsn.Func0102.Udp.Tx.If.Interrupt_OversizedPdu):
        TcpIp_UdpTransmit is called to transmit buffered TRIGGER_NEVER because
        last TRIGGER_NEVER did not fit into the nPduUdpTxBuffer
    06: VP (SoAd.SWS_SoAd_00544):
        Call SoAd_MainFunction() and verify that PduR_SoAdIfTxConfirmation() is
        called for first PDU
    07: Call SoAd_MainFunctions until one tick before the timeout of the
        buffered TRIGGER_NEVER would expire
    08: VP(): TcpIp_UdpTransmit was not called because timeout has not occurred yet
    09: Call SoAd_MainFunction to trigger nPduUdpTxBuffer flush
    10: VP (SoAd.SWS_SoAd_00550):
        TcpIp_UdpTransmit is called to transmit buffered TRIGGER_NEVER because
        timeout occurred and Pdu2 is sent. Not Pdu3.
    11: VP (SoAd.SWS_SoAd_00544):
        Call SoAd_MainFunction() and verify that PduR_SoAdIfTxConfirmation() is
        called for transmitted TRIGGER_NEVER Pdu
  
Test Input: 
    3 NON Trigger Pdus
    1. Non Trigger PDU:
      LENGTH: Pdu1_Payload_Len
      HEADERID: SoAdConf_SoAdPduRoute_Pdu_TRIGGER_NEVER_20_HeaderId
    2. Non Trigger PDU:
      LENGTH: Pdu2_Payload_Len
      HEADERID: SoAdConf_SoAdPduRoute_Pdu_TRIGGER_NEVER_30_HeaderId
    3. Non Trigger PDU:
      LENGTH: Pdu3_Payload_Len
      HEADERID: SoAdConf_SoAdPduRoute_Pdu_TRIGGER_NEVER_10_HeaderId
  
Test Output: 
    1. Non Trigger PDU --&gt; Was sent
    2. Non Trigger PDU --&gt; Was sent
    3. Non Trigger PDU --&gt; Was discarded
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00547</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00549</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>170</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00550</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>171</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00544</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1852</internalId></specobject>
    <specobject>
      <id>TS_SOAD_nPduUdpTx_TRIGGER_NEVER_BufferPool_Unavailable</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_15_nPduUdpTx/source/application/SoAd_ConTest_15_nPduUdpTx.c</sourcefile>
      <sourceline>1540</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that the buffer pooling does work.
    There are 2 Buffers for 3 SocketConnections. First one buffer will get occupied by
    SoAdConf_SoAdPduRoute_Trigger_never_50.
    Then the remaining buffer will be repeatedly used by either SoAdConf_SoAdPduRoute_Trigger_never_40
    or SoAdConf_SoAdPduRoute_Trigger_never_60 while the other one is sent directly without buffering.
    After the udptriggertimeout the buffered pdu is sent as well and then the other pdu uses the
    buffer.
  
Test Object: 
    buffer pooling Feature
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
    3 TRIGGER_NEVER Pdus with Bufferpooling size only 2
  
Test Execution: 
    01: Call Transmit with first PDU of Len 14 (6PL+8Header) to occupy first buffer
    02: Prepare Payload 1 for PDU 40 and send
    03 VP (): Check that no TcpIp_UdpTransmit was called (and therefore the pdu was saved in buffer)
    04: Prepare Payload 2 for PDU 60 and send
    05 VP(): Check that TcpIp_UdpTransmit was called and that the buffer was with payload 2 was sent
    immediately and not stored to buffer.
    06 Sanity Check: Make sure after calling SoAd_MainFunction() PduR_SoAdIfTxConfirmation was
    called and that the PDU 40 with payload 1 is sent after the timeout has been reached.
    07: Prepare Payload 2 for PDU 60 and send
    08 VP (): Check that no TcpIp_UdpTransmit was called (and therefore the pdu was saved in buffer)
    09: Prepare Payload 1 for PDU 40 and send
    10 VP(): Check that TcpIp_UdpTransmit was called and that the buffer was with payload 1 was sent
    immediately and not stored to buffer.
    11 Sanity Check: Make sure after calling SoAd_MainFunction() PduR_SoAdIfTxConfirmation was
    called and that the PDU 40 with payload 2 is sent after the timeout has been reached.
  
Test Input: 

  
Test Output: 
    1. Non Trigger PDU --&gt; Was sent
    2. Non Trigger PDU --&gt; Was sent
    3. Non Trigger PDU --&gt; Was discarded
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0141.Tx.Udp.If.TriggerNever.BufferUnavailable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1125</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1853</internalId></specobject>
    <specobject>
      <id>TS_SOAD_UDP_RETRY_TRIGGER_NEVER_BufferPool_Unavailable</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_15_nPduUdpTx/source/application/SoAd_ConTest_15_nPduUdpTx.c</sourcefile>
      <sourceline>1751</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that in the case of UDP Retry if there are no NPDU Tx Buffers available
    configured, the pdu will be dropped.
  
Test Object: 
    Shadow Buffer in context of Bufferpooling
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
    3 TRIGGER_NEVER Pdus with Bufferpooling size only 2
  
Test Execution: 
    01: Setup first TriggerNever PDU to occupy first Buffer of Bufferpool
    02: Setup second TriggerNever PDU to occupy second Buffer of Bufferpool
    03: Prepare PDU for 3rd Transmit Request
    04: Set TcpIp_UdpTransmit_Stub return value to TCPIP_E_PHYS_ADDR_MISS
    05: Call SoAd_IfTransmit(): No Buffer available anymore pdu must be dropped
    06 VP(): Check that RetVal of Transmit is E_NOK and TcpIp_UdpTransmit was called.
    07: Call MainFunction to make sure that no transmission is called.
    08 VP(): Check that stack is empty
    09: Sanity Check - Send Buffers
  
Test Input: 
    3. Trigger Never PDUs
  
Test Output: 
    3. Trigger Never PDU --&gt; Was discarded
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0141.Tx.Udp.If.UDPRetry.BufferUnavailable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1127</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1854</internalId></specobject>
    <specobject>
      <id>TS_SOAD_UDP_RETRY_TRIGGER_NEVER_BufferPool_Available</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_15_nPduUdpTx/source/application/SoAd_ConTest_15_nPduUdpTx.c</sourcefile>
      <sourceline>1918</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that in the case of UDP Retry if there are no NPDU Tx Buffers available
    configured, the pdu will be dropped.
  
Test Object: 
    Shadow Buffer in context of Bufferpooling
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
    3 TRIGGER_NEVER Pdus with Bufferpooling size only 2
  
Test Execution: 
    01: Setup first TriggerNever PDU to occupy first Buffer of Bufferpool
    02: Setup second TriggerNever PDU to occupy second Buffer of Bufferpool
    03: Prepare PDU for 3rd Transmit Request
    04: Set TcpIp_UdpTransmit_Stub return value to TCPIP_E_PHYS_ADDR_MISS
    05: Call SoAd_IfTransmit(): No Buffer available anymore pdu must be dropped
    06 VP(): Check that RetVal of Transmit is E_NOK and TcpIp_UdpTransmit was called.
    07: Call MainFunction to make sure that no transmission is called.
    08 VP(): Check that stack is empty
    09: Sanity Check - Send Buffers
  
Test Input: 
    3. Trigger Never PDUs
  
Test Output: 
    3. Trigger Never PDU --&gt; Was discarded
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0141.Tx.Udp.If.UDPRetry.BufferUnavailable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1127</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1855</internalId></specobject>
    <specobject>
      <id>TS_SOAD_nPduUdpTx_INTERRUPT_SAME_SOCKET_DIFFERENT_PDU_NO_SHADOWBUFFER_SOCKETINUSE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_15_nPduUdpTx/source/application/SoAd_ConTest_15_nPduUdpTx.c</sourcefile>
      <sourceline>2058</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This Test verifies that Pdus of Tx Requests that interrupt a suspended Trigger Never PDU that
    use the same Socket Connection and which is using the UDP socket at the moment and that does not
    have a Shadow Buffer configured will be dropped.
  
Test Object: 
    Shadow Buffer in context of Bufferpooling
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
    3 TRIGGER_NEVER Pdus with Bufferpooling size only 2
  
Test Execution: 
    01: Prepare Callout for interrupt.
    02: Setup TriggerNever PDU with Output_Pdu1_PayLoad and send it to be stored in the Tx Buffer
    03 VP(): Make Sure Ret_val is E_OK and that TcpIp_UdpTransmit() was not called
    04: Call SoAd_MainFunction() until Udp Trigger Timeout is reached and Buffer will be sent.
    05 VP(): Make Sure TcpIp_UdpTransmit() was called with Output_Pdu1_PayLoad and
    Output_Pdu100_Payload of the interrupt was dropped.
  
Test Input: 
    3. Trigger Never PDUs
  
Test Output: 
    3. Trigger Never PDU --&gt; Was discarded
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0141.Tx.Udp.If.ShadowBuffer.Unavailable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1128</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1856</internalId></specobject>
    <specobject>
      <id>TS_SOAD_nPduUdpTx_INTERRUPT_SAME_SOCKET_DIFFERENT_PDU_NO_SHADOWBUFFER_TXACTIVE</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_15_nPduUdpTx/source/application/SoAd_ConTest_15_nPduUdpTx.c</sourcefile>
      <sourceline>2154</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This Test verifies that Pdus of Tx Requests that interrupt a sending PDU that use the
    same Socket Connection and which is using the UDP socket at the moment and that does not have a
    Shadow Buffer configured will be dropped.
  
Test Object: 
    Shadow Buffer in context of Bufferpooling
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
    3 TRIGGER_NEVER Pdus with Bufferpooling size only 2
  
Test Execution: 
    01: Prepare Callout for interrupt.
    02: Setup TriggerAlways PDU with Output_Pdu1_PayLoad and send it
    03 VP(): Make Sure Ret_val is E_OK and that TcpIp_UdpTransmit() was called and only
    Output_Pdu1_PayLoad and that Output_Pdu100_Payload of the interrupt was dropped
    04 Sanity Check: Close Send Request and make sure no more calls were done
  
Test Input: 
    1. Trigger Never PDU
    1. Trigger Always PDU
  
Test Output: 
    1. Trigger Never PDU --&gt; Was discarded
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0141.Tx.Udp.If.ShadowBuffer.Unavailable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1128</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1857</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_15_nPduUdpT_BufferWhileSocketOccupied</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_15_nPduUdpTx/source/application/SoAd_ConTest_15_nPduUdpTx.c</sourcefile>
      <sourceline>2235</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This Test verifies a call of SoAd_IfTransmit() interrupting another transmission for another
    Socket connection of the same group will be buffered and transmitted in context of next main
    function.
  
Test Object: 
    Tx PDUs interrupting each other.
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
  
Test Execution: 
    01: Prepare TcpIp_UdpTransmit() Callout to simulate a interrupting SoAd_IfTransmit() call.
    02: Call SoAd_IfTransmit() for a TRIGGER_NEVER PDU.
    03: Call SoAd_MainFunction() until TRIGGER_NEVER timeout elapsed.
    04 VP(): Verify that TRIGGER_NEVER PDU was send first
    05 VP(): Verify that the interrupting TRIGGER_ALWAYS PDU was
             sent afterwards. Note: The correct order indicates that TRIGGER_ALWAYS is stored and
             processed afterwards although in the same main function cycle.
  
Test Input: 
    TRIGGER_NEVER PDU
    TRIGGER_ALWAYS PDU on other socket connection.
  
Test Output: 
    TRIGGER_NEVER PDU gets send first while interrupting TRIGGER_ALWAYS PDU gets stored first and
    transmitted afterwards.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Tx.If.Interrupt.StoreToBuffer.MainFuncContext</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>977</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1858</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_15_nPduUdpTx_NoBufferWhileSocketOccupied</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_15_nPduUdpTx/source/application/SoAd_ConTest_15_nPduUdpTx.c</sourcefile>
      <sourceline>2354</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test shall verify that if all Tx buffers are occupied another
     interrupting request will be rejected.
    function.
  
Test Object: 
    Tx PDUs interrupting each other.
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
  
Test Execution: 
    01: Prepare TcpIp_UdpTransmit() Callout to simulate a interrupting SoAd_IfTransmit() call.
    02: Call SoAd_IfTransmit() to occupy all buffers of the buffer pool.
    03: Call SoAd_MainFunction() until TRIGGER_NEVER timeout elapsed.
    04 VP(): Verify that the interrupting call on another socket of the group was rejected
             since no buffers are available.
  
Test Input: 
    Tx Transmission on 2 socket connections occupy the all Tx buffers.
  
Test Output: 
    An interrupting Tx PDU gets rejected.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0141.Tx.Udp.If.BufferUnavailable</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1126</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1859</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_15_nPduUdpTx_TriggerTransmission</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_15_nPduUdpTx/source/application/SoAd_ConTest_15_nPduUdpTx.c</sourcefile>
      <sourceline>2454</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test shall verify for nPDU buffering in case that a TRIGGER_NEVER PDU exceeds the remaining
    buffer, the buffer gets sent and the TRIGGER_NEVER PDU gets stored in the buffer.
    function.
  
Test Object: 
    Tx PDUs interrupting each other.
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is TcpIp
  
Test Execution: 
    01: Prepare TcpIp_UdpTransmit() Callout to simulate a interrupting SoAd_IfTransmit() call.
    02: Call SoAd_IfTransmit() for a TRIGGER_NEVER PDU.
    03: Call SoAd_IfTransmit() for a TRIGGER_NEVER PDU to exceed the buffer.
    04 VP(): Verify that the first PDU was sent while the second PDU gets stored in the buffer.
    05: Call SoAd_MainFunction() until TRIGGER_NEVER timeout elapsed.
    06 VP(): Verify the second PDU got sent.
  
Test Input: 
    2 TRIGGER_NEVER PDUs which do not fit into the same buffer.
  
Test Output: 
    TRIGGER_NEVER PDU in buffer was sent triggered by second PDU.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Tx.If.TriggerTxBufferTransmission</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>974</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1860</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SoAd_ConTest_UdpIfTransmit_64kb</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_17_64k/source/application/SoAd_ConTest_64k.c</sourcefile>
      <sourceline>262</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if PduLengthType is set to UINT32, SoAd_TpTransmit() shall
    report to DET SOAD_E_INV_ARG because Udp can't handle more than 64kbytes of data.
  
Test Object: 
    SoAd_TpTransmit()
  
Test Precondition: 
    * SoAd is initialized.
    * PduLengthType is UINT32
  
Test Execution: 
    01: Open the Udp socket connection.
    02: Call SoAd_IfTransmit() to transmit the frame.
    03: VP(): Verify that SoAd_IfTransmit() returns E_NOT_OK.
    04: VP(): Verify SOAD_E_INV_ARG was reported to det.
    05: Call SoAd_MainFunction() and verify that nothing else took place.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.PDULENGTHTYPE001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>747</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1861</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_TcpTpTransmit_64kb</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_17_64k/source/application/SoAd_ConTest_64k.c</sourcefile>
      <sourceline>376</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if PduLengthType is set to UINT32, SoAd_TpTransmit() shall be capable
    of transmitting more than 64 kbytes of data.
  
Test Object: 
    SoAd_TxConfirmation().
  
Test Precondition: 
  
Test Execution: 
    01: Bring TCP socket to ONLINE state.
    02: Call SoAd_TpTransmit() to transmit a pdu with more than 64 kbytes of data.
    03: Call SoAd_MainFunction().
    04: VP(): Verify that TcpIp_TcpTransmit() was called to transmit the 64 kbytes of data.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.PDULENGTHTYPE001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>747</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1862</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_TcpIfTransmit_64kb</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_17_64k/source/application/SoAd_ConTest_64k.c</sourcefile>
      <sourceline>456</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if PduLengthType is set to UINT32, SoAd_IfTransmit() shall be capable
    of transmitting more than 64 kbytes of data.
  
Test Object: 
    SoAd_TpTransmit()
  
Test Precondition: 
    * SoAd is initialized.
    * PduLengthType is UINT32
  
Test Execution: 
    01: Open the Tcp socket connection.
    02: Call SoAd_IfTransmit() to transmit the frame.
    03: VP(): Verify that SoAd_IfTransmit returns E_OK.
    04: Call SoAd_TxConfirmation() for all buffers.
    05: VP(): Verify that PduR_SoAdIfTxConfirmation() was called for transmitted pdu.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.PDULENGTHTYPE001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>747</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1863</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_TcpIfReceive_64kb</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_17_64k/source/application/SoAd_ConTest_64k.c</sourcefile>
      <sourceline>553</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if PduLengthType is set to UINT32, SoAd_RxIndication() shall be capable
    of transmitting more than 64 kbytes of data.
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
    * SoAd is initialized.
    * PduLengthType is UINT32
  
Test Execution: 
    01: Construct the testdata as well as the expected output data.
    02: Open the Tcp server connection
    03: Call SoAd_RxIndication() for as long as all data is transmitted.
    04: VP(SoAd.EB.PDULENGTHTYPE001): Verify that received data matches the original .
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.PDULENGTHTYPE001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>747</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1864</internalId></specobject>
    <specobject>
      <id>SoAd_ConTest_UdpTpTransmit_64kb</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConTest_17_64k/source/application/SoAd_ConTest_64k.c</sourcefile>
      <sourceline>682</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if PduLengthType is set to UINT32, SoAd_TpTransmit() shall
    report to DET SOAD_E_INV_ARG because Udp can't handle more than 64kbytes of data.
  
Test Object: 
    SoAd_TpTransmit().
  
Test Precondition: 
  
Test Execution: 
    01: Open the Udp socket connection.
    02: Call SoAd_TpTransmit() to transmit the frame.
    03: VP(): Verify that SoAd_TpTransmit() returns E_NOT_OK.
    04: VP(): Verify SOAD_E_INV_ARG was reported to det.
    05: Call SoAd_MainFunction() and verify that nothing else took place.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.PDULENGTHTYPE001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>747</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1865</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>Ts_SoAd_RxIndication_PduR_Tcp_Client</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConfTest_SoAd_RxIndication_01/source/application/Tst_SoAf_RxIndication_Tcp_Client.c</sourcefile>
      <sourceline>108</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_RxIndication() passes the correct pdu to the PduR when
    called with a complete pdu and confirm the reception of all data by calling
    TcpIp_TcpReceived().
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
    Upperlayer is PduR.
    Lowerlayer is Tcp.
    Initialize SoAd, init Stubs, prepare Testdata.
  
Test Execution: 
    01: Call SoAd_RxIndication() with a testpdu.
    02: VP(SoAd.SWS_SoAd_00567.2): Verify that PduR_SoadRxIndication() was called.
    03: VP(SoAd.SWS_SoAd_00567.2): Correct PduId was received.
    04: VP(SoAd.SWS_SoAd_00567.2): Correct Pdu Data was received.
    05: VP(SoAd.SWS_SoAd_00564):
        TcpIp_TcpReceived() was called with the right socket and length.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00564</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00567.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>468</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1866</internalId></specobject>
    <specobject>
      <id>Ts_SoAd_RxIndication_PduR_Tcp_Client_Split_Header</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConfTest_SoAd_RxIndication_01/source/application/Tst_SoAf_RxIndication_Tcp_Client.c</sourcefile>
      <sourceline>170</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_RxIndication() passes the correct pdu to the PduR when
    called with Pdu split inside the header and confirm the reception of all data by calling
    TcpIp_TcpReceived().
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
    Upperlayer is PduR.
    Lowerlayer is Tcp.
    Initialize SoAd, init Stubs, prepare Testdata.
  
Test Execution: 
    01: Call SoAd_RxIndication() with a testpdu split inside the header.
    02: VP (SoAd.SWS_SoAd_00559.1): Nothing happened after incomplete PDU.
    03: Call SoAd_RxIndication() with the remaining part of the testpdu.
    04: VP (SoAd.SWS_SoAd_00567.2): PduR_SoadRxIndication() stub was called.
    05: VP (SoAd.SWS_SoAd_00559.2, SoAd.SWS_SoAd_00559.2):
        Correct PduId was received from the extracted PDU Header.
    06: VP (SoAd.SWS_SoAd_00559.4): Correct Pdu Data was received.
    07: VP (SoAd.SWS_SoAd_00564):
        TcpIp_TcpReceived() Stub was called with the right socket and length.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00564</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00559.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>463</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00559.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>464</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00559.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>465</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00559.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>466</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00567.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>468</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1867</internalId></specobject>
    <specobject>
      <id>Ts_SoAd_RxIndication_PduR_Tcp_Client_Split_Payload</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConfTest_SoAd_RxIndication_01/source/application/Tst_SoAf_RxIndication_Tcp_Client.c</sourcefile>
      <sourceline>248</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_RxIndication() passes the correct pdu to the PduR when
    called with Pdu split inside the payload and confirm the reception of all data by calling
    TcpIp_TcpReceived().
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
    Upperlayer is PduR.
    Lowerlayer is Tcp.
    Initialize SoAd, init Stubs, prepare Testdata.
  
Test Execution: 
    01: Call SoAd_RxIndication() with a testpdu split inside the payload.
    02: VP(): Nothing happened after incomplete PDU.
    03: Call SoAd_RxIndication() with the remaining part of the testpdu.
    04: VP(SoAd.SWS_SoAd_00567.2): PduR_SoadRxIndication stub was called.
    05: VP(SoAd.SWS_SoAd_00567.2): Correct PduId was received.
    06: VP(SoAd.SWS_SoAd_00567.1): Correct Pdu Data was received.
    07: VP(SoAd.SWS_SoAd_00564):
        TcpIp_TcpReceived Stub was called with the right socket and length.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00564</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00567.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>467</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00567.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>468</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1868</internalId></specobject>
    <specobject>
      <id>Ts_SoAd_RxIndication_PduR_Tcp_Client_Multi</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConfTest_SoAd_RxIndication_01/source/application/Tst_SoAf_RxIndication_Tcp_Client.c</sourcefile>
      <sourceline>322</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_RxIndication() passes the correct pdus to the PduR when
    called with multiple Pdus is one packet.
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is Tcp
    Initialize SoAd, init Stubs, prepare Testdata  (precondition)
  
Test Execution: 
    01: call SoAd_RxIndication() with a two testpdu in one buffer
    02: VP (): PduR_SoadRxIndication stub was called
    03: VP (): Correct PduId was received as Pdu1
    04: VP (): Correct Pdu Data was received as Pdu1
    05: VP (): PduR_SoadRxIndication stub was called
    06: VP (): Correct PduId was received as Pdu2
    07: VP (): Correct Pdu Data was received as Pdu2
    08: VP (): No Det was called
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00567.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>468</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00567.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>469</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1869</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>Ts_SoAd_RxIndication_PduR_Tcp_Client_NoHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConfTest_SoAd_RxIndication_01/source/application/Tst_SoAf_RxIndication_Tcp_Client_NoHeader.c</sourcefile>
      <sourceline>102</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_RxIndication() passes the correct pdu to the PduR when
    called with a complete pdu
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is Tcp
    SoAD is initialized using config with a Tcp Client connection
  
Test Execution: 
    Initialize SoAd, init Stubs, prepare Testdata  (precondition)
    01: call SoAd_RxIndication() with a testpdu
    02: VP (SoAd.SWS_SoAd_00567.2): PduR_SoadRxIndication stub was called
    03: VP (SoAd.SWS_SoAd_00563): Correct PduId was received
    04: VP (SoAd.SWS_SoAd_00563): Correct Pdu Data was received
    05: VP (SoAd.SWS_SoAd_00564): TcpIp_TcpReceived Stub was called with the right socket and length
    06: VP (): No Det was called
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00563</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00564</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00567.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>468</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1870</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>Ts_SoAd_RxIndication_PduR_Tcp_Server</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConfTest_SoAd_RxIndication_01/source/application/Tst_SoAf_RxIndication_Tcp_Server.c</sourcefile>
      <sourceline>108</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_RxIndication() passes the correct pdu to the PduR when
    called with a complete pdu
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is Tcp
    SoAD is initialized using config with a Tcp Server connection
  
Test Execution: 
    Initialize SoAd, init Stubs, prepare Testdata  (precondition)
    01: call SoAd_RxIndication() with a testpdu
    02: VP (SoAd.SWS_SoAd_00567.2): PduR_SoadRxIndication stub was called
    03: VP (SoAd.SWS_SoAd_00559.3): Correct PduId was received
    04: VP (SoAd.SWS_SoAd_00559.4): Correct Pdu Data was received
    05: VP (SoAd.SWS_SoAd_00564): TcpIp_TcpReceived Stub was called with the right socket and length
    06: VP (): No Det was called
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00559.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>465</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00559.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>466</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00564</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00567.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>468</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1871</internalId></specobject>
    <specobject>
      <id>Ts_SoAd_RxIndication_PduR_Tcp_Server_Split_Header</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConfTest_SoAd_RxIndication_01/source/application/Tst_SoAf_RxIndication_Tcp_Server.c</sourcefile>
      <sourceline>174</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_RxIndication() passes the correct pdu to the PduR when
    called with Pdu split inside the header
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is Tcp
    SoAD is initialized using config with a Tcp Server connection
  
Test Execution: 
    Initialize SoAd, init Stubs, prepare Testdata  (precondition)
    01: call SoAd_RxIndication() with a testpdu split inside the header
    02: VP (): TcpIp_TcpReceived Stub was called with the right socket and length
    03: VP (): nothing happened after incomplete PDU
    04: call SoAd_RxIndication() with the remainging part of the testpdu
    05: VP (SoAd.SWS_SoAd_00567.2): PduR_SoadRxIndication stub was called
    06: VP (SoAd.SWS_SoAd_00559.1, SoAd.SWS_SoAd_00559.2,
            SoAd.SWS_SoAd_00559.3):
            Correct PduId was received from the assembled header
    07: VP (SoAd.SWS_SoAd_00559.4): Correct Pdu Data was received
    08: VP (SoAd.SWS_SoAd_00564): TcpIp_TcpReceived Stub was called with the right socket and length
    09: VP (): No Det was called
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00559.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>463</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00559.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>464</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00559.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>465</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00559.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>466</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00564</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00567.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>468</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1872</internalId></specobject>
    <specobject>
      <id>Ts_SoAd_RxIndication_PduR_Tcp_Server_Split_Payload</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConfTest_SoAd_RxIndication_01/source/application/Tst_SoAf_RxIndication_Tcp_Server.c</sourcefile>
      <sourceline>258</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_RxIndication() passes the correct pdu to the PduR when
    called with Pdu split inside the payload
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is Tcp
    SoAD is initialized using config with a Tcp Server connection
  
Test Execution: 
    Initialize SoAd, init Stubs, prepare Testdata  (precondition)
    01: call SoAd_RxIndication() with a testpdu split inside the payload
    02: VP (): TcpIp_TcpReceived Stub was called with the right socket and length
    03: VP (): nothing happened after incomplete PDU
    04: call SoAd_RxIndication() with the remainging part of the testpdu
    05: VP (SoAd.SWS_SoAd_00567.2): PduR_SoadRxIndication stub was called
    06: VP (SoAd.SWS_SoAd_00567.2): Correct PduId was received
    07: VP (SoAd.SWS_SoAd_00567.1): Correct Pdu Data was received
    08: VP (SoAd.SWS_SoAd_00564):
        TcpIp_TcpReceived Stub was called with the right socket and length
    09: VP (): No Det was called
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00567.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>467</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00567.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>468</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00564</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1873</internalId></specobject>
    <specobject>
      <id>Ts_SoAd_RxIndication_PduR_Tcp_Server_Multi</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConfTest_SoAd_RxIndication_01/source/application/Tst_SoAf_RxIndication_Tcp_Server.c</sourcefile>
      <sourceline>339</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_RxIndication() passes the correct pdus to the PduR when
    called with multiple Pdus is one packet
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is Tcp
    SoAD is initialized using config with a Tcp Server connection
  
Test Execution: 
    Initialize SoAd, init Stubs, prepare Testdata  (precondition)
    01: call SoAd_RxIndication() with a two testpdu in one buffer
    02: VP (SoAd.SWS_SoAd_00567.2): PduR_SoadRxIndication stub was called
    03: VP (SoAd.SWS_SoAd_00559.3): Correct PduId was received as Pdu1
    04: VP (SoAd.SWS_SoAd_00559.4, SoAd.SWS_SoAd_00566):
            Correct Pdu Data was received as Pdu1
    05: VP (SoAd.SWS_SoAd_00564): TcpIp_TcpReceived stub was called
    06: VP (SoAd.SWS_SoAd_00567.2, SoAd.SWS_SoAd_00567.3):
            PduR_SoadRxIndication stub was called
    07: VP (SoAd.SWS_SoAd_00559.3): Correct PduId was received as Pdu2
    08: VP (SoAd.SWS_SoAd_00559.4, SoAd.SWS_SoAd_00566):
            Correct Pdu Data was received as Pdu2
    09: VP (SoAd.SWS_SoAd_00564): TcpIp_TcpReceived stub was called
    10: VP (): No Det was called
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00559.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>465</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00559.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>466</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00564</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00566</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>187</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00567.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>468</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00567.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>469</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1874</internalId></specobject>
    <specobject>
      <id>Ts_SoAd_RxIndication_PduR_Tcp_Server_Multi_UnknownPduHeaderId_Split</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConfTest_SoAd_RxIndication_01/source/application/Tst_SoAf_RxIndication_Tcp_Server.c</sourcefile>
      <sourceline>428</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_RxIndication() passes the correct PDUs to the PduR when
    called with multiple Pdus is one frame, given the first PDU is segmented and
    the PduHeaderId is unknown (i.e. no related SocketRoute is configured).
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
    Upperlayer is PduR
    Lowerlayer is Tcp
    SoAD is initialized using config with a Tcp Server connection
  
Test Execution: 
    Initialize SoAd, init Stubs, prepare Testdata  (precondition)
    01: call SoAd_RxIndication() with a four bytes of the first testpdu
    02: call SoAd_RxIndication() with a the rest of the two testpdu in one buffer
        (first Pdu has an unknown PduHeaderId)
    03: VP (): SoAd reports SOAD_E_INV_PDUHEADER_ID to DET
    04: VP (SoAd.SWS_SoAd_00564): TcpIp_TcpReceived was called
    05: VP (SoAd.SWS_SoAd_00567.2): PduR_SoadRxIndication stub was called
    06: VP (SoAd.SWS_SoAd_00567.2): Correct PduId was received as Pdu2
    07: VP (SoAd.SWS_SoAd_00567.1): Correct Pdu Data was received as Pdu2
    08: VP (SoAd.SWS_SoAd_00564): TcpIp_TcpReceived was called
    09: VP (): No other functions were called
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00567.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>467</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00567.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>468</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00564</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1875</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>Ts_SoAd_RxIndication_PduR_Udp</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConfTest_SoAd_RxIndication_01/source/application/Tst_SoAf_RxIndication_Udp.c</sourcefile>
      <sourceline>111</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 

  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
    SoAd is initialized with a Configuration that has an Udp Connection
  
Test Execution: 
    01: call SoAd_RxIndication() with a testpdu
    02: VP (SoAd.SWS_SoAd_00567.2): PduR_SoadRxIndication stub was called
    03: VP (SoAd.SWS_SoAd_00559.3): Correct PduId was received
    04: VP (SoAd.SWS_SoAd_00559.4): Correct Pdu Data was received
    05: VP (): No Det was called
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00559.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>465</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00559.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>466</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00567.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>468</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1876</internalId></specobject>
    <specobject>
      <id>Ts_SoAd_RxIndication_PduR_Udp_BinarySearch_UnderflowProtection</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConfTest_SoAd_RxIndication_01/source/application/Tst_SoAf_RxIndication_Udp.c</sourcefile>
      <sourceline>170</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This Test checks the protection against an underflow in binary search of
    PduHeaderId which causes an index out of bounds access.
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
    SoAd is initialized with a Configuration that has an Udp Connection with
    SoConFirstId == 0 and PduHeaderId &gt; 0
  
Test Execution: 
    01: call SoAd_RxIndication() with a testpdu
    02: VP (SoAd.SWS_SoAd_00559.3,
            SoAd.Dsn.ExtractPduHeader.BinarySearch.IndexOutOfBoundsProtection):
           SoAd reports SOAD_E_INV_PDUHEADER_ID to DET
    03: Sanity Check
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00559.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>465</internalId></provcov>
        <provcov>
          <linksto>SoAd.Dsn.ExtractPduHeader.BinarySearch.IndexOutOfBoundsProtection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>968</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1877</internalId></specobject>
    <specobject>
      <id>Ts_SoAd_RxIndication_PduR_Udp_Multi</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConfTest_SoAd_RxIndication_01/source/application/Tst_SoAf_RxIndication_Udp.c</sourcefile>
      <sourceline>220</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 

  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
    SoAd is initialized with a Configuration that has an Udp Connection
  
Test Execution: 
    01: call SoAd_RxIndication() with a two testpdu in one buffer
    02: VP (SoAd.SWS_SoAd_00567.2, SoAd.SWS_SoAd_00566):
            PduR_SoadRxIndication stub was called for Pdu1
    03: VP (SoAd.SWS_SoAd_00559.4): Correct PduId was received as Pdu1
    04: VP (SoAd.SWS_SoAd_00559.4): Correct Pdu Data was received as Pdu1
    05: VP (SoAd.SWS_SoAd_00567.2, SoAd.SWS_SoAd_00567.3,
            SoAd.SWS_SoAd_00566):
            PduR_SoadRxIndication stub was called for Pdu2
    06: VP (SoAd.SWS_SoAd_00559.4): Correct PduId was received as Pdu2
    07: VP (SoAd.SWS_SoAd_00559.4): Correct Pdu Data was received as Pdu2
    08: VP (): No Det was called
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00559.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>465</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00559.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>466</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00567.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>468</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00567.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>469</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00566</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>187</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1878</internalId></specobject>
    <specobject>
      <id>Ts_SoAd_RxIndication_PduR_Udp_Multi_UnknownPduHeaderId</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConfTest_SoAd_RxIndication_01/source/application/Tst_SoAf_RxIndication_Udp.c</sourcefile>
      <sourceline>292</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_RxIndication() passes the correct PDUs to the PduR when
    called with multiple Pdus is one frame, given the PduHeaderId of the first
    PDU is unknown (i.e. no related SocketRoute is configured).
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
    SoAd is initialized with a Configuration that has an Udp Connection
  
Test Execution: 
    01: call SoAd_RxIndication() with a two testpdu in one buffer
        (first Pdu has an unknown PduHeaderId)
    02: VP (SoAd.SWS_SoAd_00559.3): SoAd reports SOAD_E_INV_PDUHEADER_ID to DET
    03: VP (SoAd.SWS_SoAd_00567.2): PduR_SoadRxIndication stub was called
    04: VP (SoAd.SWS_SoAd_00559.3): Correct PduId was received as Pdu2
    05: VP (SoAd.SWS_SoAd_00559.4): Correct Pdu Data was received as Pdu2
    06: VP (): No other functions were called
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00559.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>465</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00559.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>466</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00567.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>468</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1879</internalId></specobject>
    <specobject>
      <id>TS_SOAD_GetRemoteAddr_DomainNotMatch</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConfTest_SoAd_RxIndication_01/source/application/Tst_SoAf_RxIndication_Udp.c</sourcefile>
      <sourceline>359</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    This test verifies that if the domain set in IpAddrPtr does not match the TcpIp_DomainType of
    the local address, E_NOT_OK will be returned, and SOAD_E_INV_ARG reported to DET.
  &lt;/para&gt;
  
Test Object: 
    SoAd_GetRemoteAddr()
  
Test Precondition: 
  
Test Execution: 
    01: Call SoAd_GetRemoteAddr().
    02: VP(): Verify that E_NOT_OK was returned.
    03: VP(): Verify that SOAD_E_INV_ARG was reported to DET.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00698</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>304</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1880</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>Ts_SoAd_RxIndication_PduR_Udp_NoHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Conformance/IN/SoAd_ConfTest_SoAd_RxIndication_01/source/application/Tst_SoAf_RxIndication_Udp_NoHeader.c</sourcefile>
      <sourceline>102</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that SoAd_RxIndication() passes the correct pdu to the PduR when
    called with a complete pdu.
  
Test Object: 
    SoAd_RxIndication()
  
Test Precondition: 
    SoAd is initialised with a Configuration that has an Udp Connection
  
Test Execution: 
    01: call SoAd_RxIndication() with a testpdu
    02: VP (SoAd.SWS_SoAd_00567.2): PduR_SoadRxIndication stub was called
    03: VP (SoAd.SWS_SoAd_00563): Correct PduId was received
    04: VP (SoAd.SWS_SoAd_00563): Correct Pdu Data was received
    05: VP (): No Det was called
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00563</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00567.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>468</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1881</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SoAd_GenTest01003_BswModules_InvalidName</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>28</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If configuration parameter SoAdBswModules doesn't have the same name as the upper layer module
    they represent (e.g. PduR or Sd) the generator shall raise an error message.
  
Test Object: XDM check
Test Precondition: 
    SoAdBswModules has an invalid name.
  
Test Execution: 
    VP: The generator shall report an error which says that the configuration parameter
        SoAdBswModules is not configured correctly.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.XdmCheck.SoAdBswModules.Name</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>625</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1882</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01004_Tcp_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>49</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If configuration parameters SoAdSocketTcpInitiate and SoAdSocketAutomaticSoConSetup are set to
    true and the SocketConnection has the SoAdSocketRemoteIpAddress configured to "ANY",
    the generator shall raise an error message.
  
Test Object: XDM check
Test Precondition: 
    SocketConnection has an invalid SoAdSocketRemoteIpAddress.
  
Test Execution: 
    VP: The generator shall report an error which says that the configuration parameter
        SoAdSocketRemoteIpAddress is not configured correctly.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.XdmCheck.SocketConnection.Tcp.Ip_Port</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>626</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1883</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01005_Tcp_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>73</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If configuration parameters SoAdSocketTcpInitiate and SoAdSocketAutomaticSoConSetup are set to
    true and the SocketConnection has the SoAdSocketRemoteIpAddress configured to "0.0.0.0",
    the generator shall raise an error message.
  
Test Object: XDM check
Test Precondition: 
    SocketConnection has an invalid SoAdSocketRemoteIpAddress.
  
Test Execution: 
    VP: The generator shall report an error which says that the configuration parameter
        SoAdSocketRemoteIpAddress is not configured correctly.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.XdmCheck.SocketConnection.Tcp.Ip_Port</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>626</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1884</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01006_Tcp_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>97</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If configuration parameters SoAdSocketTcpInitiate and SoAdSocketAutomaticSoConSetup are set to
    true and the SocketConnection has the SoAdSocketRemotePort configured to "0",
    the generator shall raise an error message.
  
Test Object: XDM check
Test Precondition: 
    SocketConnection has an invalid SoAdSocketRemotePort.
  
Test Execution: 
    VP: The generator shall report an error which says that the configuration parameter
        SoAdSocketRemotePort is not configured correctly.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.XdmCheck.SocketConnection.Tcp.Ip_Port</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>626</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1885</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01007_Udp_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>121</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If configuration parameters SoAdSocketMsgAcceptanceFilterEnabled and SoAdSocketUdpListenOnly
    are set to false and the SocketConnection has the SoAdSocketRemoteIpAddress configured to "ANY",
    the generator shall raise an error message.
  
Test Object: XDM check
Test Precondition: 
    SocketConnection has an invalid SoAdSocketRemoteIpAddress.
  
Test Execution: 
    VP: The generator shall report an error which says that the configuration parameter
        SoAdSocketRemoteIpAddress is not configured correctly.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.XdmCheck.SocketConnection.Udp.Ip_Port</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>627</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1886</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01008_Udp_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>145</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If configuration parameters SoAdSocketMsgAcceptanceFilterEnabled and SoAdSocketUdpListenOnly
    are set to false and the SocketConnection has the SoAdSocketRemoteIpAddress configured to
    "0.0.0.0", the generator shall raise an error message.
  
Test Object: XDM check
Test Precondition: 
    SocketConnection has an invalid SoAdSocketRemoteIpAddress.
  
Test Execution: 
    VP: The generator shall report an error which says that the configuration parameter
        SoAdSocketRemoteIpAddress is not configured correctly.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.XdmCheck.SocketConnection.Udp.Ip_Port</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>627</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1887</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01009_Udp_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>169</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If configuration parameters SoAdSocketMsgAcceptanceFilterEnabled and SoAdSocketUdpListenOnly
    are set to false and the SocketConnection has the SoAdSocketRemotePort configured to "0",
    the generator shall raise an error message.
  
Test Object: XDM check
Test Precondition: 
    SocketConnection has an invalid SoAdSocketRemotePort.
  
Test Execution: 
    VP: The generator shall report an error which says that the configuration parameter
        SoAdSocketRemotePort is not configured correctly.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.XdmCheck.SocketConnection.Udp.Ip_Port</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>627</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1888</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01010_UnreferencedRoutingGroup</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>193</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If a configured routing group is not referenced by any SoAdSocketRoute or SoAdPduRoute, the
    generator shall raise an error message pointing the routing group that is unreferenced and its
    ID.
  
Test Object: XDM check
Test Precondition: 
    SoAdRoutingGroup is not referenced by any SoAdSocketRoute or SoAdPduRoute.
  
Test Execution: 
    VP: The generator shall report an error which says the ID of the routing groups is not
    referenced.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.XdmCheck.UnreferencedRoutingGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>628</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1889</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01011_Ipv6</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>217</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If configuration parameter SoAdIPv6AddressEnabled is set to false and there is at least
    one referenced local IP address of type IPv6, the generator shall raise an error message.
  
Test Object: XDM check
Test Precondition: 
    SoAdIPv6AddressEnabled is set to false.
    One socket connection group refers to a local address of IPv6 type.
  
Test Execution: 
    VP: The generator shall report an error which says that the SoAdIPv6AddressEnabled needs to be
    set to true if at least one referenced local address is of type IPv6.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.XdmCheck.IPv6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>622</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1890</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01012_RefToRam</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>239</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If configuration parameter SoAdDataMemSize is greater than 65536 and SoAdDataMemSizeExtension
    is set to false, the generator shall raise an error message.
  
Test Object: XDM check
Test Precondition: 
    SoAdDataMemSize set to 65537.
    SoAdDataMemSizeExtension set to false.
  
Test Execution: 
    VP: The generator shall report an error which says that the SoAdDataMemSize exceeds 16 bits
    limit and SoAdDataMemSizeExtension should be activated to increase SoAdDataMemSize to 32 bits.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.XdmCheck.RefToRam</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>618</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1891</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01013_LastIsBest</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>261</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    SoAd shall reject configurations in which the transmit properties of the PDUs which
    are assigned to a socket connection are mixed. Furthermore all socket connnections of
    a socket connection group shall either be refered solely by PDUs with
    SOAD_COLLECT_LAST_IS_BEST or solely by PDUs with SOAD_COLLECT_QUEUED semantic.
  
Test Object: XDM check
Test Precondition: 
    SoAdSocketnPduUdpTxBufferMin set to true.
    One PduRoute has semantics set to SOAD_COLLECT_QUEUED and one to SOAD_COLLECT_LAST_IS_BEST,
    both have reference to the same socket connection.
  
Test Execution: 
    VP: The generator shall report an error which says that the SoCon(s) with the ID(s) {0}
    is/are referenced in one or more PDUR that has the SoAdTxPduCollectionSemantics
    SOAD_COLLECT_QUEUED as well as one or more PDUR that has the SoAdTxPduCollectionSemantics
    SOAD_COLLECT_LAST_IS_BEST.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.XdmCheck.LastIsBest</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>620</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1892</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01014_LastIsBest</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>288</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    The MCG shall check that a PduRoute with SOAD_COLLECT_LAST_IS_BEST
    belongs to an upper layer with TriggerTransmit enabled.
  
Test Object: XDM check
Test Precondition: 
    SoAdSocketnPduUdpTxBufferMin set to true.
    One PduRoute has semantics set to SOAD_COLLECT_LAST_IS_BEST.
  
Test Execution: 
    VP: The generator shall report an error which says that:
    Shall only be set to SOAD_COLLECT_LAST_IS_BEST if the UL is configured with
    SoAdIfTriggerTransmit set to TRUE.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.XdmCheck.LastIsBestULTriggerTransmitEnabled</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>621</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1893</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01015_NoTpFanOut</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>312</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    The MCG shall check that a fan out is only allowed for If API.
  
Test Object: XDM check
Test Precondition: 
    A SoAdPduRoute using TP API contains multiple destinations.
  
Test Execution: 
    VP: The generator shall report an error which says that:
    Not possible to configure more than one PduRoute Dest for Tp API.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.XdmCheck.NoTpFanOut</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>629</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1894</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01016_N2MConfigNotAllowed</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>333</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    The MCG shall check that N:M configuration is not allowed.
  
Test Object: XDM check
Test Precondition: 
    A global ECUC PDU reference more than one SoAdPduRoute.
  
Test Execution: 
    VP: The generator shall report an error which says that:
    Each global PDU must not be referenced by more than one SoAdPduRoute.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.XdmCheck.N2MConfigNotAllowed</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>630</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1895</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01017_MaxUdpIpv6</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>354</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    The number of SoAd UDP Ipv6 Socket Connection exceeds the number of TcpIp UDP Ipv6 Sockets
    (TcpIp/TcpIpGeneral/TcpIpUdpV6SocketMax)
  
Test Object: XDM check
Test Precondition: 
    TcpIpUdpV6SocketMax set to 1.
    2 Udp sockets that are configured to Ipv6.
  
Test Execution: 
    VP: The generator shall report an error which says that:
    The number of SoAd UDP Ipv6 Socket Connection exceeds the number of TcpIp UDP Ipv6 Sockets
    (TcpIp/TcpIpGeneral/TcpIpUdpV6SocketMax)
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.XdmCheck.MaxUdpIPv6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>623</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1896</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01018_MaxTcpIpv6</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>377</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    The number of SoAd TCP Ipv6 Socket Connection exceeds the number of TcpIp TCP Ipv6 Sockets
    (TcpIp/TcpIpGeneral/TcpIpUdpV6SocketMax)
  
Test Object: XDM check
Test Precondition: 
    TcpIpUdpV6SocketMax set to 1.
    2 Tcp sockets that are configured to Ipv6.
  
Test Execution: 
    VP: The generator shall report an error which says that:
    The number of SoAd TCP Ipv6 Socket Connection exceeds the number of TcpIp TCP Ipv6 Sockets
    (TcpIp/TcpIpGeneral/TcpIpUdpV6SocketMax)
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.XdmCheck.MaxTcpIPv6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>624</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1897</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01019_SoAdTxSocketConnOrSocketConnBundleRef</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>400</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    The reference to a SocketConnectionGroup shall only be used for
    upper layers with IF API or when Meta data with SOCKET_CONNECTION_ID_16 are configured for
    the PDU.
  
Test Object: XDM check
Test Precondition: 
    SoAdTxSocketConnOrSocketConnBundleRef set to SocketConnectionGroup.
    Upper layer with TP API
    Meta data SOCKET_CONNECTION_ID_16 not configured for the PDU.
  
Test Execution: 
    VP: The generator shall report an error which says that:
    The reference to a SocketConnectionGroup shall only be used for upper layers with IF API or
    when Meta data with SOCKET_CONNECTION_ID_16 are configured for the PDU.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.XdmCheck.ECUC_SoAd_00034</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>631</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.XdmCheck.MetaData.Tx.Tp.SoConGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1143</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1898</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01020_SoAdRxSocketConnOrSocketConnBundleRef</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>428</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    The reference to a SocketConnectionGroup shall only be used for
    upper layers with IF API or when Meta data with SOCKET_CONNECTION_ID_16 are configured for
    the PDU.
  
Test Object: XDM check
Test Precondition: 
    SoAdRxSocketConnOrSocketConnBundleRef set to SocketConnectionGroup.
    Upper layer with TP API
    Meta data SOCKET_CONNECTION_ID_16 not configured for the PDU.
  
Test Execution: 
    VP: The generator shall report an error which says that:
    The reference to a SocketConnectionGroup shall only be used for upper layers with IF API or
    when Meta data with SOCKET_CONNECTION_ID_16 are configured for the PDU.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.XdmCheck.ECUC_SoAd_00035</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>632</internalId></provcov>
        <provcov>
          <linksto>SoAd.dsn.XdmCheck.MetaData.Rx.Tp.SoConGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1144</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1899</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01021_SoAdSocketUdpTriggerTimeoutLtSoAdMainFunctionPeriod</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>456</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    SoAdSocketUdpTriggerTimeout shall not be smaller than SoAdMainFunctionPeriod.
  
Test Object: XDM check
Test Precondition: 
    SoAdTxUdpTriggerTimeout set to a value smaller than SoAdMainFunctionPeriod.
  
Test Execution: 
    VP: The generator shall report an error which says that:
    SoAdSocketUdpTriggerTimeout shall not be smaller than SoAdMainFunctionPeriod
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.XdmCheck.ECUC_SoAd_00150</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>633</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1900</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01022_nPduWithoutPduHeaderId</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>476</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    SoAdSocketUdpTriggerTimeout shall not be smaller than SoAdMainFunctionPeriod.
  
Test Object: XDM check
Test Precondition: 
    SoAdSocketnPduUdpTxBufferMin is configured but SoAdPduHeaderEnable of corresponding socket
    connection group is disabled
  
Test Execution: 
    VP: The generator shall report an error which says that:
    If SoAdSocketnPduUdpTxBufferMin is enabled, SoAdPduHeaderEnable must be enabled too.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.Xdm.nPduBuffer.HeaderModeDisabled</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1142</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1901</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01023_MemoryDataExtentionNeedsToBeSet</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>499</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    There shall be a Unit test that verifies that an error message is shown when less
    than 64 of PB RAM is used and SoAdDataMemSize is not set.
  
Test Object: MCG check
Test Precondition: 
    SoAdSocketnPduUdpTxBufferMin is configured to max and PDU HeaderModeEnable is true.
  
Test Execution: 
    VP: The generator shall report an error which says that:
    For SoAdSocketRoute with multiple SoAdSocketRouteDest all SoAdRxUpperLayerType shall be IF.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.MCG.GeneratorOperationStatus.MemoryDataExtentionNeedsToBeSet</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1145</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1902</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01024_MultiplePSI_NoTpApi</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>523</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    The Upper Layer Interface Type of all SocketRouteDestinations must be IF if there are multiple
    Destinations configured.
  
Test Object: MCG check
Test Precondition: 
    A SocketRoute referencing a SocketConnectiongroup with multiple SocketRouteDestinations
    configured with at least one being of type TP
  
Test Execution: 
    VP: The generator shall report an error which says that:
    For SoAdSocketRoute with multiple SoAdSocketRouteDest all SoAdRxUpperLayerType shall be IF.
  
Test Input: Configuration according to SoAd_Invalid_22.xdm
Test Output: Generator error according to execution VP&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0130.XdmCheck.MultiplePSI.NoTpApi</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1147</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1903</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01025_MultiplePSI_NoRoutingGroupRef</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>548</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    There shall be a Unit test that verifies that an error message is shown if there are multiple
    SocketRouteDestinations and at least one of them has no Routing Group configured to it.
  
Test Object: MCG check
Test Precondition: 
    A SocketRoute with multiple SocketRouteDestinations where at least one does not
    reference a SoAdRxRoutingGroupRef
  
Test Execution: 
    VP: The generator shall report an error which says that:
    The SoAdSocketRoute has multiple SoAdSocketRouteDest, each SoAdSocketRouteDest shall have
    at least one SoAdRxRoutingGroupRef entry.
  
Test Input: Configuration according to SoAd_Invalid_23.xdm
Test Output: Generator error according to execution VP&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0130.XdmCheck.MultiplePSI.NoRoutingGroupRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1904</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01026_MultiplePSI_SameRoutingGroupRef</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>574</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    There shall be a Unit test that verifies that an error message is shown when there multiple
    SocketRouteDestinations referencing the same SoAdRxRoutingGroupRef.
  
Test Object: MCG check
Test Precondition: 
    A SocketRoute with multiple SocketRouteDestinations where at least two reference the same
    SoAdRxRoutingGroupRef
  
Test Execution: 
    VP: The generator shall report an error which says that:
    The SoAdSocketRoute has multiple SoAdSocketRouteDest and this SoAdRxRoutingGroupRef is already
    used by another SoAdSocketRouteDest of this SoAdSocketRoute. The same SoAdRoutingGroup shall not
    be referenced by multiple SoAdSocketRouteDest of the same SoAdSocketRoute.
  
Test Input: Configuration according to SoAd_Invalid_24.xdm
Test Output: Generator error according to execution VP&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0130.XdmCheck.MultiplePSI.SameRoutingGroupRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1149</internalId></provcov>
        <provcov>
          <linksto>SoAd.ECUC_SoAd_00117</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1905</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01027_MultiplePSI_NoSoConGroupRef</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>605</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    There shall be a Unit test that verifies that an error message is shown if there are multiple
    SocketRouteDestinations configured but the SocketRoute does not reference a SoConGroupRef.
  
Test Object: MCG check
Test Precondition: 
    A SocketRoute that has multiple SocketRouteDestinations but does not reference a SoConGroupRef
  
Test Execution: 
    VP: The generator shall report an error which says that:
    The SoAdSocketRoute has multiple SoAdSocketRouteDestinations. Therefore the
    SoAdRxSocketConnOrSocketConnBundleRef shall refer to a SoAdSocketConnectionGroup.
  
Test Input: Configuration according to SoAd_Invalid_25.xdm
Test Output: Generator error according to execution VP&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0130.XdmCheck.MultiplePSI.NoSoConGroupRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1150</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1906</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01028_MultiplePSI_SoAdRoutingGroupIsEnabledAtInit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>630</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    For a configuration with a SocketRoute that has multiple SocketRouteDestinations with
    SoAdRoutingGroup set and at least one of those SoAdRoutingGroup has EnabledAtInit set
    an error shall be reported.
  
Test Object: MCG check
Test Precondition: 
    A SocketRoute that has multiple SocketRouteDestinations with SoAdRoutingGroup. At least one of
    those SoAdRoutingGroup has EnabledAtInit set.
  
Test Execution: 
    VP: The generator shall report an error which says that:
    SoAdSocketRoute has multiple SoAdSocketRouteDest. SoAdRoutingGroupIsEnabledAtInit of referenced
    SoAdRoutingGroup shall be disabled.
  
Test Input: Configuration according to SoAd_Invalid_26.xdm
Test Output: Generator error according to execution VP&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0130.XdmCheck.MultiplePSI.SoAdRoutingGroupIsEnabledAtInit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1151</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1907</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01029_MultiplePSI_NoGlobalRoutingGroupAllowed</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>657</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    For a configuration with a SocketRoute that has multiple SocketRouteDestinations with
    a SoConGroupRef set that is not referenced by exactly one SoAdSocketConnectionGroup
    an error shall be reported.
  
Test Object: MCG check
Test Precondition: 
    A SocketRoute that has multiple SocketRouteDestinations with SoAdRoutingGroup. At least one of
    those SoAdRoutingGroup does not reference exactly one SoAdSocketConnectionGroup.
  
Test Execution: 
    VP: The generator shall report an error which says that:
    SoAdRoutingGroup refers to SoAdSocketRoute with multiple SoAdSocketRouteDest. SoAdRoutingGroup
    must be specific which means that the SoAdSocketRoute and SoAdPduRoute belonging to this
    SoAdRoutingGroup can only reference exactly one SoAdSocketConnectionGroup.
  
Test Input: Configuration according to SoAd_Invalid_27.xdm
Test Output: Generator error according to execution VP&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0130.XdmCheck.MultiplePSI.NoGlobalRoutingGroupAllowed</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1152</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1908</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01030_NPduTxBuffer_Tp_Mix</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>685</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    PduRoutes belonging to a SoAdSocketConnectionGroup with SoAdSocketnPduUdpTxBufferMin enabled
    shall only be of API type IF.
  
Test Object: XDM check
Test Precondition: 
    A PduRoutes belonging to a SoAdSocketConnectionGroup with SoAdSocketnPduUdpTxBufferMin enabled
    is of type TP
  
Test Execution: 
    VP: The generator shall report an error which says that:
        TP PDU routes can not be used for SoAdSOcketConnectionGroups with
        SoAdSocketnPduUdpTxBufferMin enabled.
  
Test Input: Configuration according to SoAd_Invalid_28.xdm
Test Output: Generator error according to execution VP&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0102.XdmCheck.nPdu.TP</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1154</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1909</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01031_BufferPool_MaxRange</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>711</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    For a configuration with SoAdTxBufferPoolSize set and the value exceeds the
    number of socket connections configured for this socket connection group,
    an error shall be reported.
  
Test Object: XDM check
Test Precondition: 
    SoAdTxBufferPoolSize &gt; number of socket connections
  
Test Execution: 
    VP: The generator shall report an error which says that: Value out of range
  
Test Input: Configuration according to SoAd_Invalid_29.xdm
Test Output: Generator error according to execution VP&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0141.XdmCheck.BufferPool.MaxRange</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1153</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1910</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01032_Dtls_AutomaticSetup</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>735</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    For a configuration with SoAdDatagramTlsConnectionRef set and the SoAdSocketAutomaticSoConSetup 
    set, an error shall be reported.
  
Test Object: XDM check
Test Precondition: 
    SoAdDatagramTlsConnectionRef set
    SoAdSocketAutomaticSoConSetup enabled
  
Test Execution: 
    VP: The generator shall report an error which says that: SoAdSocketAutomaticSoConSetup shall not
    be used in combination with DTLS.
  
Test Input: Configuration according to SoAd_Invalid_30.xdm
Test Output: Generator error according to execution VP&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling.AutomaticSetup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1155</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1911</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01033_Dtls_Not_With_Tcp</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>760</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    For a configuration with SoAdTlsConnectionRef where the referenced connection has TlsDtls set,
    an error shall be reported.
  
Test Object: XDM check
Test Precondition: 
    SoAdTlsConnectionRef set
  
Test Execution: 
    VP: The generator shall report an error which says that: This reference shall point to a Tls 
    connection with disabled TlsDtls config parameter.
  
Test Input: Configuration according to SoAd_Invalid_31.xdm
Test Output: Generator error according to execution VP&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling.Dtls_Not_With_Tcp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1156</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1912</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01034_Dtls_UDP_Without_TlsDtls</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>784</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    For a configuration with a UDP Connection that has SoAdDatagramTlsConnectionRef set 
    and referencing Tls connection having TlsDtls disabled, an error shall be reported.
  
Test Object: XDM check
Test Precondition: 
    SoAdTlsConnectionRef set
  
Test Execution: 
    VP: The generator shall report an error which says that: This reference shall point to a Tls 
    connection with enabled TlsDtls config parameter.
  
Test Input: Configuration according to SoAd_Invalid_32.xdm
Test Output: Generator error according to execution VP&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling.Dtls_UDP_Without_TlsDtls</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1157</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1913</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01035_Dtls_UDP_With_Tls_On_Connection</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>808</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    For a configuration with a UDP Connection that has SoAdTlsConnectionRef, an error shall be 
    reported.
  
Test Object: XDM check
Test Precondition: 
    SoAdTlsConnectionRef set
  
Test Execution: 
    VP: The generator shall report an error which says that: This reference shall only be used for 
    TCP TLS connections. For UDP DTLS communication please use SoAdDatagramTlsConnectionRef.
  
Test Input: Configuration according to SoAd_Invalid_33.xdm
Test Output: Generator error according to execution VP&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling.Dtls_UDP_With_Tls_On_Connection</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1158</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1914</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01036_Dtls_UDP_With_No_TlsInstances</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>832</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    For a configuration with a UDP Connection that has a SoAdDatagramTlsConnectionRef that
    contains no TlsInstances, a warning shall be reported.
  
Test Object: XDM check
Test Precondition: 
    SoAdDatagramTlsConnectionRef set
  
Test Execution: 
    VP: The generator shall report a warning which says that: This SoAdSocketConnectionGroup
    contains more than one SoAdSocketConnection. DTLS requires for each configured
    SoAdSocketConnection a corresponding TlsInstance. The referenced TLSConnection
    has no TlsInstance configured.
  
Test Input: Configuration according to SoAd_Invalid_34.xdm
Test Output: Generator error according to execution VP&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling.NoTlsInstance</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1159</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1915</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01037_Dtls_UDP_With_Too_Few_TlsInstances</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>858</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    For a configuration with a UDP Connection that has more SoAdSocketConnections than
    TlsInstances in the referenced TlsConnection, a warning shall be reported.
  
Test Object: XDM check
Test Precondition: 
    SoAdDatagramTlsConnectionRef set
  
Test Execution: 
    VP: The generator shall report a warning which says that:
    This SoAdSocketConnectionGroup contains more than one SoAdSocketConnection. DTLS requires
    for each configured SoAdSocketConnection a corresponding TlsInstance. The number of TlsInstance
    of the referenced TLSConnection is smaller than the number of SoAdSocketConnection.
  
Test Input: Configuration according to SoAd_Invalid_35.xdm
Test Output: Generator error according to execution VP&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling.TooFewTlsInstance</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1160</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1916</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01038_IdsM_No_References</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>884</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    For a configuration that enables SoAdEnableSecurityEventReporting and has no
    IdsM references, an error shall be reported.
  
Test Object: XDM check
Test Precondition: 
    SoAdEnableSecurityEventReporting enabled
  
Test Execution: 
    VP: The generator shall report an error which says that:
    If SoAdEnableSecurityEventReporting is enabled, at least one reference has to be added.
  
Test Input: Configuration according to SoAd_Invalid_36.xdm
Test Output: Generator error according to execution VP&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0145.SecurityEventReporting.No_References</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1163</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1917</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01039_IdsM_Invalid_Reference</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>908</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    For a configuration that enables SoAdEnableSecurityEventReporting and has
    a reference enabled that points to an invalid node, an error should be reported.
  
Test Object: XDM check
Test Precondition: 
    SoAdEnableSecurityEventReporting enabled
  
Test Execution: 
    VP: The generator shall report an error which says that
    the reference shall point to a valid node or must be disabled.
  
Test Input: Configuration according to SoAd_Invalid_37.xdm
Test Output: Generator error according to execution VP&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0145.SecurityEventReporting.Invalid_Reference</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1164</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1918</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01040_IdsM_Duplicated_Reference</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>932</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    For a configuration that enables SoAdEnableSecurityEventReporting and has
    references enabled that point to the same node, an error should be reported.
  
Test Object: XDM check
Test Precondition: 
    SoAdEnableSecurityEventReporting enabled
  
Test Execution: 
    VP: The generator shall report an error which says that the reference must be unique.
  
Test Input: Configuration according to SoAd_Invalid_38.xdm
Test Output: Generator error according to execution VP&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0145.SecurityEventReporting.Duplicated_Reference</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1165</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1919</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01041_Tls_Duplicated_Reference</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>955</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    For a TCP SocketConnection that references a Tls Connection that
    is also referenced by at least one other TCP SocketConnection,
    an error shall be reported.
  
Test Object: XDM check
Test Precondition: 
    SoAdTlsEnabled is true
  
Test Execution: 
    VP: The generator shall report an error which says that the reference must be unique.
  
Test Input: Configuration according to SoAd_Invalid_39.xdm
Test Output: Generator error according to execution VP&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.Dsn.Func.TLS.TCP_With_DuplicatedTlsRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1162</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1920</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01042_DTls_Duplicated_Reference</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>979</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    For a UDP SocketConnectionGroup that references a DTls Connection that
    is also referenced by at least one other UDP SocketConnectionGroup,
    an error shall be reported.
  
Test Object: XDM check
Test Precondition: 
    SoAdTlsEnabled is true
  
Test Execution: 
    VP: The generator shall report an error which says that the reference must be unique.
  
Test Input: Configuration according to SoAd_Invalid_40.xdm
Test Output: Generator error according to execution VP&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.Func0143.DtlsPooling.Dtls_UDP_With_Duplicated_DtlsRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1161</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1921</internalId></specobject>
    <specobject>
      <id>SoAd_GenTest01043_RoutingGroup_References_SocketConnectionGroup_With_Multiple_SoCon</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Generic/IN/SoAd_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>1003</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    There shall be a Unit test that verifies that an warning message is shown if a TCP socket connection group
    is configured with more than one socket connection.
  
Test Object: XDM check
Test Precondition: 
    A SocketRoute that has a reference to a SocketConnectionGroup with at least two SocketConnections.
  
Test Execution: 
    VP: The generator shall report a warning that says:
    Socket route linking to a TCP socket connection group with more than one socket connection is not supported.
  
Test Input: Configuration according to SoAd_Invalid_41.xdm
Test Output: Generator warning according to execution VP&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.dsn.XdmCheck.SocketRoute.SoAdRxSocketConnOrSocketConnBundleRef.SocketConnectionGroup.TcpMaxSize</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1166</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1922</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SoAd_Imp02001_Udp_CLOSED_Connecting</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp02_UnitTest_UDP/source/application/SoAd_Imp02_UnitTest_UDP.c</sourcefile>
      <sourceline>40</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if Connecting trigger is called in state CLOSED the SoAd shall report
    SOAD_SOCON_RECONNECT to the upper layer and binds the socket connection to a TcpIp socket
    and change the socket state to CONNECTING.
  
Test Object: 
    Unit:Udp
  
Test Precondition: 
  
Test Execution: 
    01: Call SoAd_Int_01_UdpSM_Connecting().
    02: Verify that the transition returned success = TRUE.
    03: VP(): Verify that SoAdGenUL_SoConModeChg(), TcpIp_GetSocket() and TcpIp_Bind() are called.
    04: VP(): Verify that socket state is CONNECTING.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UdpSM_CLOSED_Connecting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>979</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1923</internalId></specobject>
    <specobject>
      <id>SoAd_Imp02002_Udp_CONNECTING_Closed</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp02_UnitTest_UDP/source/application/SoAd_Imp02_UnitTest_UDP.c</sourcefile>
      <sourceline>99</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if Closed trigger is called in state CONNECTING the socket state will
    be changed to RESTART.
  
Test Object: 
    Unit:Udp
  
Test Precondition: 
  
Test Execution: 
    01: Call helper function to bring the module in state CONNECTING.
    02: Call SoAd_Int_01_UdpSM_Closed().
    03: Verify that the transition returned success = TRUE.
    04: VP(): Verify that socket state is RESTART.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UdpSM_CONNECTING_Closed</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>980</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1924</internalId></specobject>
    <specobject>
      <id>SoAd_Imp02003_Udp_CONNECTING_Error</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp02_UnitTest_UDP/source/application/SoAd_Imp02_UnitTest_UDP.c</sourcefile>
      <sourceline>154</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if Error trigger is called in state CONNECTING SoAd will close the
    socket connection using TcpIp_Close() and change the socket state to SHUTDOWN.
  
Test Object: 
    Unit:Udp
  
Test Precondition: 
  
Test Execution: 
    01: Call helper function to bring the module in state CONNECTING.
    02: Call SoAd_Int_01_UdpSM_Error().
    03: Verify that the transition returned success = TRUE.
    04: VP(): Verify that TcpIp_Close() was called with Abort set to FALSE.
    05: VP(): Verify that socket state is SHUTDOWN.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UdpSM_CONNECTING_Error</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>981</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1925</internalId></specobject>
    <specobject>
      <id>SoAd_Imp02004_Udp_CONNECTING_Connected</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp02_UnitTest_UDP/source/application/SoAd_Imp02_UnitTest_UDP.c</sourcefile>
      <sourceline>214</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if Connected trigger is called in state CONNECTING SoAd shall report
    SOAD_SOCON_ONLINE to the upper layer and change the socket state to ONLINE.
  
Test Object: 
    Unit:Udp
  
Test Precondition: 
  
Test Execution: 
    01: Call helper function to bring the module in state CONNECTING.
    02: Call SoAd_Int_01_UdpSM_Connected().
    03: Verify that the transition returned success = TRUE.
    04: VP(): Verify that SoAdGenUL_SoConModeChg(SOAD_SOCON_ONLINE) was called.
    05: VP(): Verify that socket state is ONLINE.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UdpSM_CONNECTING_Connected</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>982</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1926</internalId></specobject>
    <specobject>
      <id>SoAd_Imp02005_Udp_CONNECTING_UpClosing</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp02_UnitTest_UDP/source/application/SoAd_Imp02_UnitTest_UDP.c</sourcefile>
      <sourceline>274</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if UpClosing trigger is called in state CONNECTING SoAd shall report
    SOAD_SOCON_OFFLINE to the upper layer and the socket connection will be closed.
  
Test Object: 
    Unit:Udp
  
Test Precondition: 
  
Test Execution: 
    01: Call helper function to bring the module in state CONNECTING.
    02: Call SoAd_Int_01_UdpSM_UpClosing().
    03: Verify that the transition returned success = TRUE.
    04: VP(): Verify that SoAdGenUL_SoConModeChg(SOAD_SOCON_OFFLINE) and TcpIp_Close() were called.
    05: VP(): Verify that socket state is CLOSING.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UdpSM_CONNECTING_UpClosing</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>983</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1927</internalId></specobject>
    <specobject>
      <id>SoAd_Imp02006_Udp_SHUTDOWN_Closed</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp02_UnitTest_UDP/source/application/SoAd_Imp02_UnitTest_UDP.c</sourcefile>
      <sourceline>336</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if Closed trigger is called in state SHUTDOWN the socket state will
    be changed to RESTART.
  
Test Object: 
    Unit:Udp
  
Test Precondition: 
  
Test Execution: 
    01: Call helper function to bring the module in state SHUTDOWN.
    02: Call SoAd_Int_01_UdpSM_Closed().
    03: Verify that the transition returned success = TRUE.
    04: VP(): Verify that socket state is RESTART.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UdpSM_SHUTDOWN_Closed</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>984</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1928</internalId></specobject>
    <specobject>
      <id>SoAd_Imp02007_Udp_SHUTDOWN_UpClosing</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp02_UnitTest_UDP/source/application/SoAd_Imp02_UnitTest_UDP.c</sourcefile>
      <sourceline>394</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if UpClosing trigger is called in state SHUTDOWN SoAd shall report
    SOAD_SOCON_OFFLINE to the upper layer.
  
Test Object: 
    Unit:Udp
  
Test Precondition: 
  
Test Execution: 
    01: Call helper function to bring the module in state SHUTDOWN.
    02: Call SoAd_Int_01_UdpSM_UpClosing().
    03: Verify that the transition returned success = TRUE.
    04: VP(): Verify that SoAdGenUL_SoConModeChg(SOAD_SOCON_OFFLINE) was called.
    05: VP(): Verify that socket state is CLOSING.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UdpSM_SHUTDOWN_UpClosing</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>985</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1929</internalId></specobject>
    <specobject>
      <id>SoAd_Imp02008_Udp_RESTART_UpClosing</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp02_UnitTest_UDP/source/application/SoAd_Imp02_UnitTest_UDP.c</sourcefile>
      <sourceline>454</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if UpClosing trigger is called in state RESTART SoAd shall report
    SOAD_SOCON_OFFLINE to the upper layer and change the socket state to CLOSED.
  
Test Object: 
    Unit:Udp
  
Test Precondition: 
  
Test Execution: 
    01: Call helper function to bring the module in state RESTART.
    02: Call SoAd_Int_01_UdpSM_UpClosing().
    03: Verify that the transition returned success = TRUE.
    04: VP(): Verify that SoAdGenUL_SoConModeChg(SOAD_SOCON_OFFLINE) is called.
    05: VP(): Verify that socket state is CLOSED.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UdpSM_RESTART_UpClosing</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>986</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1930</internalId></specobject>
    <specobject>
      <id>SoAd_Imp02009_Udp_RESTART_Connecting</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp02_UnitTest_UDP/source/application/SoAd_Imp02_UnitTest_UDP.c</sourcefile>
      <sourceline>514</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if Connecting trigger is called in state RESTART SoAd shall bind the
    socket connection to a TcpIp socket and change the socket state to RESTART.
  
Test Object: 
    Unit:Udp
  
Test Precondition: 
  
Test Execution: 
    01: Call helper function to bring the module in state RESTART.
    02: Call SoAd_Int_01_UdpSM_Connecting().
    03: Verify that the transition returned success = TRUE.
    04: VP(): Verify that TcpIp_GetSocket() and TcpIp_Bind() were called.
    05: VP(): Verify that socket state is CONNECTING.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UdpSM_RESTART_Connecting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>987</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1931</internalId></specobject>
    <specobject>
      <id>SoAd_Imp02010_Udp_ONLINE_Closed</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp02_UnitTest_UDP/source/application/SoAd_Imp02_UnitTest_UDP.c</sourcefile>
      <sourceline>574</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if Closed trigger is called in state ONLINE SoAd shall report
    SOAD_SOCON_RECONNECT to the upper layer and set the socket state to RESTART.
  
Test Object: 
    Unit:Udp
  
Test Precondition: 
  
Test Execution: 
    01: Call helper function to bring the module in state ONLINE.
    02: Call SoAd_Int_01_UdpSM_Closed().
    03: Verify that the transition returned success = TRUE.
    04: VP(): Verify that SoAdGenUL_SoConModeChg(SOAD_SOCON_RECONNECT) is called.
    05: VP(): Verify that socket state is RESTART.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UdpSM_RESTART_Closed</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>988</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1932</internalId></specobject>
    <specobject>
      <id>SoAd_Imp02011_Udp_ONLINE_Error</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp02_UnitTest_UDP/source/application/SoAd_Imp02_UnitTest_UDP.c</sourcefile>
      <sourceline>634</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if Error trigger is called in state ONLINE SoAd shall report
    SOAD_SOCON_RECONNECT to the upper layer, close the socket and set the socket state to SHUTDOWN.
  
Test Object: 
    Unit:Udp
  
Test Precondition: 
  
Test Execution: 
    01: Call helper function to bring the module in state ONLINE.
    02: Call SoAd_Int_01_UdpSM_Error().
    03: Verify that the transition returned success = TRUE.
    04: VP(): Verify that SoAdGenUL_SoConModeChg(SOAD_SOCON_RECONNECT) was called.
    05: VP(): Verify that TcpIp_Close() was called with Abort set to FALSE.
    06: VP(): Verify that socket state is SHUTDOWN.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UdpSM_ONLINE_Error</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>989</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1933</internalId></specobject>
    <specobject>
      <id>SoAd_Imp02012_Udp_ONLINE_Disconnected</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp02_UnitTest_UDP/source/application/SoAd_Imp02_UnitTest_UDP.c</sourcefile>
      <sourceline>699</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if Disconnected trigger is called in state ONLINE SoAd shall report
    SOAD_SOCON_RECONNECT to the upper layer and set the socket state to CONNECTING.
  
Test Object: 
    Unit:Udp
  
Test Precondition: 
  
Test Execution: 
    01: Call helper function to bring the module in state ONLINE.
    02: Call SoAd_Int_01_UdpSM_Disconnected().
    03: Verify that the transition returned success = TRUE.
    04: VP(): Verify that SoAdGenUL_SoConModeChg(SOAD_SOCON_RECONNECT) was called.
    05: VP(): Verify that socket state is CONNECTING.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UdpSM_ONLINE_Disconnected</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>990</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1934</internalId></specobject>
    <specobject>
      <id>SoAd_Imp02013_Udp_ONLINE_UpClosingPre</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp02_UnitTest_UDP/source/application/SoAd_Imp02_UnitTest_UDP.c</sourcefile>
      <sourceline>759</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if UpClosingPre trigger is called in state ONLINE, SoAd shall be
    in state SOAD_SOCON_WAITOFFLINE.
  
Test Object: 
    Unit:Udp
  
Test Precondition: 
  
Test Execution: 
    01: Call helper function to bring the module in state ONLINE.
    02: Call SoAd_Int_01_UdpSM_UpClosingPre().
    03: Verify that the transition returned success = TRUE.
    04: VP(): Verify that the module is in state WAITOFFLINE.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UdpSM_ONLINE_UpClosingPre</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>991</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1935</internalId></specobject>
    <specobject>
      <id>SoAd_Imp02014_Udp_CLOSING_Closed</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp02_UnitTest_UDP/source/application/SoAd_Imp02_UnitTest_UDP.c</sourcefile>
      <sourceline>814</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if Closed trigger is called in state CLOSING SoAd shall set
    the socket state to CLOSED.
  
Test Object: 
    Unit:Udp
  
Test Precondition: 
  
Test Execution: 
    01: Call helper function to bring the module in state CLOSING.
    02: Call SoAd_Int_01_UdpSM_Closed().
    03: Verify that the transition returned success = TRUE.
    04: VP(): Verify that socket state is CLOSED.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UdpSM_CLOSING_Closed</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>995</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1936</internalId></specobject>
    <specobject>
      <id>SoAd_Imp02015_Udp_CLOSED_Invalid_Triggers</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp02_UnitTest_UDP/source/application/SoAd_Imp02_UnitTest_UDP.c</sourcefile>
      <sourceline>869</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that calling the following triggers:
      - UpClosing, Closed, Error, Connected, Disconnected
    in socket state CLOSED, will have no effect.
  
Test Object: 
    Unit:Udp
  
Test Precondition: 
    Socket state is CLOSED.
  
Test Execution: 
    01: Call SoAd_Int_01_UdpSM_UpClosing().
    02: Verify that the transition returned success = FALSE.
    03: Call SoAd_Int_01_UdpSM_Closed().
    04: Verify that the transition returned success = FALSE.
    05: Call SoAd_Int_01_UdpSM_Error().
    06: Verify that the transition returned success = FALSE.
    07: Call SoAd_Int_01_UdpSM_Connected().
    08: Verify that the transition returned success = FALSE.
    09: Call SoAd_Int_01_UdpSM_Disconnected().
    10: Verify that the transition returned success = FALSE.
    11: Verify that socket state is still CLOSED.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UdpSM_CLOSED_InvalidTriggers</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>996</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1937</internalId></specobject>
    <specobject>
      <id>SoAd_Imp02016_Udp_CLOSING_Invalid_Triggers</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp02_UnitTest_UDP/source/application/SoAd_Imp02_UnitTest_UDP.c</sourcefile>
      <sourceline>954</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that calling the following triggers:
      - UpClosing, Connecting, Error, Connected, Disconnected
    in socket state CLOSING, will have no effect.
  
Test Object: 
    Unit:Udp
  
Test Precondition: 
    Socket state is CLOSING.
  
Test Execution: 
    01: Call SoAd_Int_01_UdpSM_UpClosing().
    02: Verify that the transition returned success = FALSE.
    03: Call SoAd_Int_01_UdpSM_Connecting().
    04: Verify that the transition returned success = FALSE.
    05: Call SoAd_Int_01_UdpSM_Error().
    06: Verify that the transition returned success = FALSE.
    07: Call SoAd_Int_01_UdpSM_Connected().
    08: Verify that the transition returned success = FALSE.
    09: Call SoAd_Int_01_UdpSM_Disconnected().
    10: Verify that the transition returned success = FALSE.
    11: Verify that socket state is still CLOSING.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UdpSM_CLOSING_InvalidTriggers</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>997</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1938</internalId></specobject>
    <specobject>
      <id>SoAd_Imp02017_Udp_Online_Invalid_Triggers</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp02_UnitTest_UDP/source/application/SoAd_Imp02_UnitTest_UDP.c</sourcefile>
      <sourceline>1042</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that calling the following triggers:
      - Connecting, Connected, UpClosing
    in socket state ONLINE, will have no effect.
  
Test Object: 
    Unit:Udp
  
Test Precondition: 
    Socket state is ONLINE.
  
Test Execution: 
    01: Call SoAd_Int_01_UdpSM_Connecting().
    02: Verify that the transition returned success = FALSE.
    03: Call SoAd_Int_01_UdpSM_Connected().
    04: Verify that the transition returned success = FALSE.
    05: Call SoAd_Int_01_UdpSM_UpClosing().
    06: Verify that the transition returned success = FALSE.
    07: Verify that socket state is still ONLINE.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UdpSM_ONLINE_InvalidTriggers</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>998</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1939</internalId></specobject>
    <specobject>
      <id>SoAd_Imp02018_Udp_RESTART_Invalid_Triggers</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp02_UnitTest_UDP/source/application/SoAd_Imp02_UnitTest_UDP.c</sourcefile>
      <sourceline>1114</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that calling the following triggers:
      - Error, Connected, Disconnected, Closed
    in socket state RESTART, will have no effect.
  
Test Object: 
    Unit:Udp
  
Test Precondition: 
    Socket state is RESTART.
  
Test Execution: 
    01: Call SoAd_Int_01_UdpSM_Error().
    02: Verify that the transition returned success = FALSE.
    03: Call SoAd_Int_01_UdpSM_Connected().
    04: Verify that the transition returned success = FALSE.
    05: Call SoAd_Int_01_UdpSM_Disconnected().
    06: Verify that the transition returned success = FALSE.
    07: Call SoAd_Int_01_UdpSM_Closed().
    08: Verify that the transition returned success = FALSE.
    09: Verify that socket state is still RESTART.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UdpSM_RESTART_InvalidTriggers</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>999</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1940</internalId></specobject>
    <specobject>
      <id>SoAd_Imp02019_Udp_SHUTDOWN_Invalid_Triggers</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp02_UnitTest_UDP/source/application/SoAd_Imp02_UnitTest_UDP.c</sourcefile>
      <sourceline>1194</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that calling the following triggers:
      - Connecting, Error, Connected, Disconnected
    in socket state SHUTDOWN, will have no effect.
  
Test Object: 
    Unit:Udp
  
Test Precondition: 
    Socket state is SHUTDOWN.
  
Test Execution: 
    01: Call SoAd_Int_01_UdpSM_Connecting().
    02: Verify that the transition returned success = FALSE.
    03: Call SoAd_Int_01_UdpSM_Error().
    04: Verify that the transition returned success = FALSE.
    05: Call SoAd_Int_01_UdpSM_Connected().
    06: Verify that the transition returned success = FALSE.
    07: Call SoAd_Int_01_UdpSM_Disconnected().
    08: Verify that the transition returned success = FALSE.
    09: Verify that socket state is still SHUTDOWN.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UdpSM_SHUTDOWN_InvalidTriggers</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1000</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1941</internalId></specobject>
    <specobject>
      <id>SoAd_Imp02020_Udp_CONNECTING_Invalid_Triggers</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp02_UnitTest_UDP/source/application/SoAd_Imp02_UnitTest_UDP.c</sourcefile>
      <sourceline>1274</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that calling the following triggers:
      - Connecting, Disconnected
    in socket state CONNECTING, will have no effect.
  
Test Object: 
    Unit:Udp
  
Test Precondition: 
    Socket state is CONNECTING.
  
Test Execution: 
    01: Call SoAd_Int_01_UdpSM_Connecting().
    02: Verify that the transition returned success = FALSE.
    03: Call SoAd_Int_01_UdpSM_Disconnected().
    04: Verify that the transition returned success = FALSE.
    05: Verify that socket state is still CONNECTING.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UdpSM_CONNECTING_InvalidTriggers</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1001</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1942</internalId></specobject>
    <specobject>
      <id>SoAd_Imp02021_Udp_PREPAREOFFLINE_UpClosing</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp02_UnitTest_UDP/source/application/SoAd_Imp02_UnitTest_UDP.c</sourcefile>
      <sourceline>1339</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if UpClosing trigger is called in state WAITOFFLINE,
    SoAd shall close the socket connection and set the socket state to CLOSING.
  
Test Object: 
    Unit:Udp
  
Test Precondition: 
  
Test Execution: 
    01: Call helper function to bring the module in state WAITOFFLINE.
    02: Call SoAd_Int_01_UdpSM_UpClosing().
    03: Verify that the transition returned success = TRUE.
    04: VP(): Verify that SoAdGenUL_SoConModeChg(SOAD_SOCON_OFFLINE) and TcpIp_Close() were called.
    05: VP(): Verify that socket state is CLOSING.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UdpSM_PREPAREOFFLINE_UpClosing</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>992</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1943</internalId></specobject>
    <specobject>
      <id>SoAd_Imp02022_Udp_PREPAREOFFLINE_Closed</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp02_UnitTest_UDP/source/application/SoAd_Imp02_UnitTest_UDP.c</sourcefile>
      <sourceline>1401</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if Closed trigger is called in state WAITOFFLINE SoAd shall report,
    SoAd shall close the socket connection and set the socket state to CLOSED.
  
Test Object: 
    Unit:Udp
  
Test Precondition: 
  
Test Execution: 
    01: Call helper function to bring the module in state WAITOFFLINE.
    02: Call SoAd_Int_01_UdpSM_Closed().
    03: Verify that the transition returned success = TRUE.
    04: VP(): Verify that SoAdGenUL_SoConModeChg(SOAD_SOCON_OFFLINE) was called.
    05: VP(): Verify that socket state is CLOSING.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UdpSM_PREPAREOFFLINE_Closed</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>993</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1944</internalId></specobject>
    <specobject>
      <id>SoAd_Imp02023_Udp_WAITOFFLINE_Invalid_Triggers</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp02_UnitTest_UDP/source/application/SoAd_Imp02_UnitTest_UDP.c</sourcefile>
      <sourceline>1462</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that calling the following triggers:
      - Connecting, Disconnected, Connected, UpClosingPre, Error
    in socket state WAITOFFLINE, will have no effect.
  
Test Object: 
    Unit:Udp
  
Test Precondition: 
    Socket state is WAITOFFLINE.
  
Test Execution: 
    01: Call SoAd_Int_01_UdpSM_Connecting().
    02: Verify that the transition returned success = FALSE.
    03: Call SoAd_Int_01_UdpSM_Disconnected().
    04: Verify that the transition returned success = FALSE.
    05: Call SoAd_Int_01_UdpSM_Connected().
    06: Verify that the transition returned success = FALSE.
    07: Call SoAd_Int_01_UdpSM_UpClosingPre().
    08: Verify that the transition returned success = FALSE.
    09: Call SoAd_Int_01_UdpSM_Error().
    10: Verify that the transition returned success = FALSE.
    11: Verify that socket state is still WAITOFFLINE.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.UdpSM_PREPAREOFFLINE_InvalidTriggers</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>994</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1945</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SoAd_Imp03001_Tcp_CLOSED_Connecting</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp03_UnitTest_TCP/source/application/SoAd_Imp03_UnitTest_TCP.c</sourcefile>
      <sourceline>40</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if Connecting trigger is called in state CLOSED the SoAd shall get an
    appropriate socket from TcpIp, bind it to the local address and port, change the socket
    specific parameters, open a listen socket and change the socket state to CONNECTING.
  
Test Object: 
    Unit:Tcp
  
Test Precondition: 
  
Test Execution: 
    01: Call SoAd_Int_04_TcpSM_Connecting().
    02: Verify that the transition returned success = TRUE.
    03: VP(): Verify that TcpIp_GetSocket(), TcpIp_Bind(),
        TcpIp_ChangeParameter() and TcpIp_TcpListen() are called.
    04: VP(): Verify that socket state is CONNECTING.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpSM_CLOSED_Connecting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1004</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1946</internalId></specobject>
    <specobject>
      <id>SoAd_Imp03002_Tcp_CONNECTING_Closed</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp03_UnitTest_TCP/source/application/SoAd_Imp03_UnitTest_TCP.c</sourcefile>
      <sourceline>100</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if Closed trigger is called in state CONNECTING the socket state will
    be changed to RESTART.
  
Test Object: 
    Unit:Tcp
  
Test Precondition: 
  
Test Execution: 
    01: Call helper function to bring the module in state CONNECTING.
    02: Call SoAd_Int_04_TcpSM_Closed().
    03: Verify that the transition returned success = TRUE.
    04: VP(): Verify that socket state is RESTART.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpSM_CONNECTING_Closed</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1005</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1947</internalId></specobject>
    <specobject>
      <id>SoAd_Imp03003_Tcp_CONNECTING_LoClosing</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp03_UnitTest_TCP/source/application/SoAd_Imp03_UnitTest_TCP.c</sourcefile>
      <sourceline>155</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if LoClosing trigger is called in state CONNECTING SoAd will close the
    socket connection using TcpIp_Close() and change the socket state to SHUTDOWN.
  
Test Object: 
    Unit:Udp
  
Test Precondition: 
  
Test Execution: 
    01: Call helper function to bring the module in state CONNECTING.
    02: Call SoAd_Int_04_TcpSM_LoClosing().
    03: Verify that the transition returned success = TRUE.
    04: VP(): Verify that TcpIp_Close() was called with Abort set to FALSE.
    05: VP(): Verify that socket state is SHUTDOWN.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpSM_CONNECTING_LoClosing</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1006</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1948</internalId></specobject>
    <specobject>
      <id>SoAd_Imp03004_Tcp_CONNECTING_Connected</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp03_UnitTest_TCP/source/application/SoAd_Imp03_UnitTest_TCP.c</sourcefile>
      <sourceline>215</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if Connected trigger is called in state CONNECTING SoAd shall call
    PduR_SoAdTpStartOfReception(), meaning that it's ready for reception and change the socket
    state to ONLINE.
  
Test Object: 
    Unit:Tcp
  
Test Precondition: 
  
Test Execution: 
    01: Call helper function to bring the module in state CONNECTING.
    02: Call SoAd_Int_04_TcpSM_Connected().
    03: Verify that the transition returned success = TRUE.
    04: VP(): Verify that PduR_SoAdTpStartOfReception() was called.
    05: VP(): Verify that socket state is ONLINE.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpSM_CONNECTING_Connected</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1007</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1949</internalId></specobject>
    <specobject>
      <id>SoAd_Imp03005_Tcp_CONNECTING_UpClosing</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp03_UnitTest_TCP/source/application/SoAd_Imp03_UnitTest_TCP.c</sourcefile>
      <sourceline>275</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if UpClosing trigger is called in state CONNECTING SoAd shall close the
    socket connection and also change the socket state to CLOSING.
  
Test Object: 
    Unit:Udp
  
Test Precondition: 
  
Test Execution: 
    01: Call helper function to bring the module in state CONNECTING.
    02: Call SoAd_Int_04_TcpSM_UpClosing().
    03: Verify that the transition returned success = TRUE.
    04: VP(): Verify that TcpIp_Close() was called.
    05: VP(): Verify that socket state is CLOSING.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpSM_CONNECTING_UpClosing</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1008</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1950</internalId></specobject>
    <specobject>
      <id>SoAd_Imp03006_Tcp_SHUTDOWN_Closed</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp03_UnitTest_TCP/source/application/SoAd_Imp03_UnitTest_TCP.c</sourcefile>
      <sourceline>337</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if Closed trigger is called in state SHUTDOWN the socket state will
    be changed to RESTART.
  
Test Object: 
    Unit:Tcp
  
Test Precondition: 
  
Test Execution: 
    01: Call helper function to bring the module in state SHUTDOWN.
    02: Call SoAd_Int_04_TcpSM_Closed().
    03: Verify that the transition returned success = TRUE.
    04: VP(): Verify that socket state is RESTART.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpSM_SHUTDOWN_Closed</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1009</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1951</internalId></specobject>
    <specobject>
      <id>SoAd_Imp03007_Tcp_SHUTDOWN_UpClosing</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp03_UnitTest_TCP/source/application/SoAd_Imp03_UnitTest_TCP.c</sourcefile>
      <sourceline>392</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if UpClosing trigger is called in state SHUTDOWN SoAd shall change the
    state to CLOSING.
  
Test Object: 
    Unit:Tcp
  
Test Precondition: 
  
Test Execution: 
    01: Call helper function to bring the module in state SHUTDOWN.
    02: Call SoAd_Int_04_TcpSM_UpClosing().
    03: Verify that the transition returned success = TRUE.
    04: VP(): Verify that socket state is CLOSING.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpSM_SHUTDOWN_UpClosing</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1010</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1952</internalId></specobject>
    <specobject>
      <id>SoAd_Imp03008_Tcp_RESTART_UpClosing</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp03_UnitTest_TCP/source/application/SoAd_Imp03_UnitTest_TCP.c</sourcefile>
      <sourceline>450</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if UpClosing trigger is called in state RESTART SoAd shall
    change the socket state to CLOSED.
  
Test Object: 
    Unit:Tcp
  
Test Precondition: 
  
Test Execution: 
    01: Call helper function to bring the module in state RESTART.
    02: Call SoAd_Int_04_TcpSM_UpClosing().
    03: Verify that the transition returned success = TRUE.
    04: VP(): Verify that socket state is CLOSED.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpSM_RESTART_UpClosing</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1011</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1953</internalId></specobject>
    <specobject>
      <id>SoAd_Imp03009_Tcp_RESTART_Connecting</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp03_UnitTest_TCP/source/application/SoAd_Imp03_UnitTest_TCP.c</sourcefile>
      <sourceline>505</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if Connecting trigger is called in state RESTART SoAd shall
    change the socket state to CONNECTING.
  
Test Object: 
    Unit:Tcp
  
Test Precondition: 
  
Test Execution: 
    01: Call helper function to bring the module in state RESTART.
    02: Call SoAd_Int_04_TcpSM_Connecting().
    03: Verify that the transition returned success = TRUE.
    04: VP(): Verify that socket state is CONNECTING.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpSM_RESTART_Connecting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1012</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1954</internalId></specobject>
    <specobject>
      <id>SoAd_Imp03010_Tcp_ONLINE_Closed</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp03_UnitTest_TCP/source/application/SoAd_Imp03_UnitTest_TCP.c</sourcefile>
      <sourceline>560</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if Closed trigger is called in state ONLINE SoAd shall call
    PduR_SoAdTpRxIndication() and set the socket state to RESTART.
  
Test Object: 
    Unit:Tcp
  
Test Precondition: 
  
Test Execution: 
    01: Call helper function to bring the module in state ONLINE.
    02: Call SoAd_Int_04_TcpSM_Closed().
    03: Verify that the transition returned success = TRUE.
    04: VP(): Verify that PduR_SoAdTpRxIndication() is called.
    05: VP(): Verify that socket state is RESTART.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpSM_ONLINE_Closed</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1013</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1955</internalId></specobject>
    <specobject>
      <id>SoAd_Imp03011_Tcp_ONLINE_LoClosing</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp03_UnitTest_TCP/source/application/SoAd_Imp03_UnitTest_TCP.c</sourcefile>
      <sourceline>619</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if Error trigger is called in state ONLINE SoAd shall call
    SoAdGenUL_SoConModeChg(), close the socket and set the socket state to SHUTDOWN.
  
Test Object: 
    Unit:Tcp
  
Test Precondition: 
  
Test Execution: 
    01: Call helper function to bring the module in state ONLINE.
    02: Call SoAd_Int_04_TcpSM_LoClosing().
    03: Verify that the transition returned success = TRUE.
    04: VP(): Verify that SoAdGenUL_SoConModeChg() was called.
    05: VP(): Verify that TcpIp_Close() was called with Abort set to FALSE.
    06: VP(): Verify that socket state is SHUTDOWN.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpSM_ONLINE_LoClosing</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1014</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1956</internalId></specobject>
    <specobject>
      <id>SoAd_Imp03012_Tcp_ONLINE_UpClosingPre</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp03_UnitTest_TCP/source/application/SoAd_Imp03_UnitTest_TCP.c</sourcefile>
      <sourceline>683</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if UpClosingPre trigger is called in state ONLINE SoAd shall report
    SOAD_SOCON_WAITOFFLINE to the upper layer. After calling the UpClosing trigger in the state
    WAITOFFLINE, SoAd shall close the socket connection and set the socket state to CLOSING.
  
Test Object: 
    Unit:Tcp
  
Test Precondition: 
  
Test Execution: 
    01: Call helper function to bring the module in state ONLINE.
    02: Call SoAd_Int_04_TcpSM_UpClosingPre().
    03: Verify that the transition returned success = TRUE.
    04: VP(): Verify that socket state is WAITOFFLINE.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpSM_ONLINE_UpClosingPre</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1015</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1957</internalId></specobject>
    <specobject>
      <id>SoAd_Imp03013_Tcp_CLOSING_Closed</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp03_UnitTest_TCP/source/application/SoAd_Imp03_UnitTest_TCP.c</sourcefile>
      <sourceline>739</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if Closed trigger is called in state CLOSING SoAd shall set
    the socket state to CLOSED.
  
Test Object: 
    Unit:Tcp
  
Test Precondition: 
  
Test Execution: 
    01: Call helper function to bring the module in state CLOSING.
    02: Call SoAd_Int_04_TcpSM_Closed().
    03: Verify that the transition returned success = TRUE.
    04: VP(): Verify that socket state is CLOSED.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpSM_CLOSING_Closed</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1019</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1958</internalId></specobject>
    <specobject>
      <id>SoAd_Imp03014_Tcp_CLOSED_Invalid_Triggers</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp03_UnitTest_TCP/source/application/SoAd_Imp03_UnitTest_TCP.c</sourcefile>
      <sourceline>794</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that calling the following triggers:
      - Closed, LoClosing, Connected
    in socket state CLOSED, will have no effect.
  
Test Object: 
    Unit:Tcp
  
Test Precondition: 
    Socket state is CLOSED.
  
Test Execution: 
    01: Call SoAd_Int_04_TcpSM_Closed().
    02: Verify that the transition returned success = FALSE.
    03: Call SoAd_Int_04_TcpSM_LoClosing().
    04: Verify that the transition returned success = FALSE.
    05: Call SoAd_Int_04_TcpSM_Connected().
    06: Verify that the transition returned success = FALSE.
    07: Verify that socket state is still CLOSED.

  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpSM_CLOSED_InvalidTriggers</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1020</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1959</internalId></specobject>
    <specobject>
      <id>SoAd_Imp03015_Tcp_CLOSING_Invalid_Triggers</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp03_UnitTest_TCP/source/application/SoAd_Imp03_UnitTest_TCP.c</sourcefile>
      <sourceline>864</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that calling the following triggers:
      - UpClosing, Connecting, LoClosing, Connected
    in socket state CLOSING, will have no effect.
  
Test Object: 
    Unit:Tcp
  
Test Precondition: 
    Socket state is CLOSING.
  
Test Execution: 
    01: Call SoAd_Int_04_TcpSM_UpClosing().
    02: Verify that the transition returned success = FALSE.
    03: Call SoAd_Int_04_TcpSM_Connecting().
    04: Verify that the transition returned success = FALSE.
    05: Call SoAd_Int_04_TcpSM_LoClosing().
    06: Verify that the transition returned success = FALSE.
    07: Call SoAd_Int_04_TcpSM_Connected().
    08: Verify that the transition returned success = FALSE.
    09: Verify that socket state is still CLOSING.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpSM_CLOSING_InvalidTriggers</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1021</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1960</internalId></specobject>
    <specobject>
      <id>SoAd_Imp03016_Tcp_Online_Invalid_Triggers</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp03_UnitTest_TCP/source/application/SoAd_Imp03_UnitTest_TCP.c</sourcefile>
      <sourceline>944</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that calling the following triggers:
      - Connecting, Connected, UpClosing
    in socket state ONLINE, will have no effect.
  
Test Object: 
    Unit:Tcp
  
Test Precondition: 
    Socket state is ONLINE.
  
Test Execution: 
    01: Call SoAd_Int_04_TcpSM_Connecting().
    02: Verify that the transition returned success = FALSE.
    03: Call SoAd_Int_04_TcpSM_Connected().
    04: Verify that the transition returned success = FALSE.
    05: Call SoAd_Int_04_TcpSM_UpClosing().
    06: Verify that the transition returned success = FALSE.
    07: Verify that socket state is still ONLINE.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpSM_ONLINE_InvalidTriggers</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1022</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1961</internalId></specobject>
    <specobject>
      <id>SoAd_Imp03017_Tcp_RESTART_Invalid_Triggers</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp03_UnitTest_TCP/source/application/SoAd_Imp03_UnitTest_TCP.c</sourcefile>
      <sourceline>1016</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that calling the following triggers:
      - LoClosing, Connected, Closed
    in socket state RESTART, will have no effect.
  
Test Object: 
    Unit:Tcp
  
Test Precondition: 
    Socket state is RESTART.
  
Test Execution: 
    01: Call SoAd_Int_04_TcpSM_LoClosing().
    02: Verify that the transition returned success = FALSE.
    03: Call SoAd_Int_04_TcpSM_Connected().
    04: Verify that the transition returned success = FALSE.
    05: Call SoAd_Int_04_TcpSM_Closed().
    06: Verify that the transition returned success = FALSE.
    07: Verify that socket state is still RESTART.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpSM_RESTART_InvalidTriggers</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1023</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1962</internalId></specobject>
    <specobject>
      <id>SoAd_Imp03018_Tcp_SHUTDOWN_Invalid_Triggers</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp03_UnitTest_TCP/source/application/SoAd_Imp03_UnitTest_TCP.c</sourcefile>
      <sourceline>1088</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that calling the following triggers:
      - Connecting, LoClosing, Connected
    in socket state SHUTDOWN, will have no effect.
  
Test Object: 
    Unit:Tcp
  
Test Precondition: 
    Socket state is SHUTDOWN.
  
Test Execution: 
    01: Call SoAd_Int_04_TcpSM_Connecting().
    02: Verify that the transition returned success = FALSE.
    03: Call SoAd_04_TcpSM_LoClosing().
    04: Verify that the transition returned success = FALSE.
    05: Call SoAd_Int_04_TcpSM_Connected().
    06: Verify that the transition returned success = FALSE.
    07: Verify that socket state is still SHUTDOWN.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpSM_SHUTDOWN_InvalidTriggers</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1024</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1963</internalId></specobject>
    <specobject>
      <id>SoAd_Imp03019_Tcp_CONNECTING_Invalid_Triggers</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp03_UnitTest_TCP/source/application/SoAd_Imp03_UnitTest_TCP.c</sourcefile>
      <sourceline>1160</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that calling the following trigger:
      - Connecting
    in socket state CONNECTING, will have no effect.
  
Test Object: 
    Unit:Tcp
  
Test Precondition: 
    Socket state is CONNECTING.
  
Test Execution: 
    01: Call SoAd_Int_04_TcpSM_Connecting().
    02: Verify that the transition returned success = FALSE.
    03: Verify that socket state is still CONNECTING.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpSM_CONNECTING_InvalidTriggers</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1025</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1964</internalId></specobject>
    <specobject>
      <id>SoAd_Imp03020_Tcp_PREPAREOFFLINE_UpClosing</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp03_UnitTest_TCP/source/application/SoAd_Imp03_UnitTest_TCP.c</sourcefile>
      <sourceline>1216</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if UpClosing trigger is called in state WAITOFFLINE,
    SoAd shall close the socket connection and set the socket state to CLOSING.
  
Test Object: 
    Unit:Udp
  
Test Precondition: 
  
Test Execution: 
    01: Call helper function to bring the module in state WAITOFFLINE.
    02: Call SoAd_Int_04_TcpSM_UpClosing().
    03: Verify that the transition returned success = TRUE.
    04: VP(): Verify that SoAdGenUL_SoConModeChg(SOAD_SOCON_OFFLINE) and TcpIp_Close() were called.
    05: VP(): Verify that socket state is CLOSING.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpSM_PREPAREOFFLINE_UpClosing</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1016</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1965</internalId></specobject>
    <specobject>
      <id>SoAd_Imp03021_Tcp_PREPAREOFFLINE_Closed</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp03_UnitTest_TCP/source/application/SoAd_Imp03_UnitTest_TCP.c</sourcefile>
      <sourceline>1280</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that if Closed trigger is called in state WAITOFFLINE SoAd shall report,
    SoAd shall close the socket connection and set the socket state to CLOSED.
  
Test Object: 
    Unit:Udp
  
Test Precondition: 
  
Test Execution: 
    01: Call helper function to bring the module in state WAITOFFLINE.
    02: Call SoAd_Int_04_TcpSM_Closed().
    03: Verify that the transition returned success = TRUE.
    04: VP(): Verify that SoAdGenUL_SoConModeChg(SOAD_SOCON_OFFLINE) was called.
    05: VP(): Verify that socket state is CLOSING.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpSM_PREPAREOFFLINE_Closed</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1017</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1966</internalId></specobject>
    <specobject>
      <id>SoAd_Imp03022_Tcp_WAITOFFLINE_Invalid_Triggers</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_Imp03_UnitTest_TCP/source/application/SoAd_Imp03_UnitTest_TCP.c</sourcefile>
      <sourceline>1343</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that calling the following triggers:
      - Connected, UpClosingPre, LoClosing, Connecting
    in socket state WAITOFFLINE, will have no effect.
  
Test Object: 
    Unit:Udp
  
Test Precondition: 
    Socket state is WAITOFFLINE.
  
Test Execution: 
    01: Call SoAd_Int_04_TcpSM_Connected().
    02: Verify that the transition returned success = FALSE.
    03: Call SoAd_Int_04_TcpSM_UpClosingPre().
    04: Verify that the transition returned success = FALSE.
    05: Call SoAd_Int_04_TcpSM_LoClosing().
    06: Verify that the transition returned success = FALSE.
    07: Call SoAd_Int_04_TcpSM_Connecting().
    08: Verify that the transition returned success = FALSE.
    09: Verify that socket state is still WAITOFFLINE.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.EB.TcpSM_PREPAREOFFLINE_InvalidTriggers</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1018</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1967</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SOAD_WrapAroundRingbuffer</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_ImpTest_01_General/source/application/SoAd_ImpTest_01_General.c</sourcefile>
      <sourceline>73</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Verifies that a PDU that is buffered in segments is delivered to the upper
  layer as intended.
  At first a PDU with 64 bytes is stored in the ring buffer, that can hold 72
  bytes. After it is delivered to the upper layer a second PDU with 32 bytes is
  received and has to be buffered in segments (8 bytes and 24 bytes). This
  test verifies the second PDU is also delivered correctly.
&lt;/para&gt;

Test Object: 
  SoAd_RxIndication()
  SoAd_MainFunction()
  SoAd Tp Ring Buffer

Test Precondition: 
  Considered socket connection is opened (inherent call of SoAd_Mainfunction)

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>479</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00571.1d</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>482</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00574.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>484</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00574.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>485</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00574.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>486</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1968</internalId></specobject>
    <specobject>
      <id>TS_SOAD_WrapAroundRingbuffer_NoHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SoAd)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SoAd/test/ts5/Implementation/IN/SoAd_ImpTest_01_General/source/application/SoAd_ImpTest_01_General.c</sourcefile>
      <sourceline>264</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test verifies the complete delivery of a large amount of data in the correct
  order when using the TP-API without PduHeaderMode on a UDP socket connection in
  case data is buffered locally in the SoAd ring buffer.
  SoAd receives Udp datagrams with a length of 14 bytes containing the values 0 to 14
  and buffers them in the local ring buffer. In the context of the MainFunction SoAd
  delivers chunks of 15 bytes to the upper layer. That way the position in the ring
  buffer and the payload for the upper are constantly shifting.
&lt;/para&gt;

Test Object: 
  SoAd_RxIndication()
  SoAd_MainFunction()
  SoAd Tp Ring Buffer

Test Precondition: 
  Considered socket connection is opened (inherent call of SoAd_Mainfunction)

Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00566</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>187</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00568.1a</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>470</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00568.1c</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>472</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00568.1d</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>473</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00569.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>475</internalId></provcov>
        <provcov>
          <linksto>SoAd.SWS_SoAd_00569.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>476</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1969</internalId></specobject>
  </specobjects>
  </specdocument>
  <violations/>
  <oreqmViolations/>
</tracingresults>
