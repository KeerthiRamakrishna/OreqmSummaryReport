<?xml version="1.0" encoding="UTF-8"?>
<tracingresults>
  <environment>
    <toolname>ReqM2</toolname>
    <toolversion>1.30.0 (stable)</toolversion>
    <toolcopyright>Copyright 2010 - 2018 Elektrobit Automotive GmbH</toolcopyright>
    <libxmlversion>2.0207</libxmlversion>
    <libxml2compileversion>2.9.10</libxml2compileversion>
    <libxml2runtimeversion>20912</libxml2runtimeversion>
    <perlversion>v5.32.1</perlversion>
    <perlptrsize>64</perlptrsize>
    <commandline>-t -q -o asc_Can_tracing_cmdb.oreqm -O /cygdrive/e/work/workspace/TEST_TRACING/TestProtocols/LogBase/requirements -c /cygdrive/e/work/workspace/TEST_TRACING/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules.xml -s approved,rejected --wfatal WDUPLICATEID,WDUPLICATEIDANDVER /cygdrive/e/work/workspace/TEST_TRACING/asc_Can/build/reqm/ReqM2_Native/asc_Can_requirements_AUTOSAR_SWS_CAN_Driver.reqm /cygdrive/e/work/workspace/TEST_TRACING/asc_Can/build/reqm/ReqM2_Native/asc_Can_requirements_EB_Requirements_CAN_Driver.reqm /cygdrive/e/work/workspace/TEST_TRACING/asc_Can/build/reqm/ReqM2_Native/asc_Can_test_WinCore_CAN_MCAL_ReviewGuideline.reqm /cygdrive/e/work/workspace/TEST_TRACING/asc_Can/build/reqm/ReqM2_GenericImporter/reqm_DEV.reqm /cygdrive/e/work/workspace/TEST_TRACING/asc_Can/build/reqm/ReqM2_GenericImporter/reqm_SRC.reqm /cygdrive/e/work/workspace/TEST_TRACING/asc_Can/build/reqm/ReqM2_OldCImporter/reqm_TCS_LEGACY.reqm /cygdrive/e/work/workspace/TEST_TRACING/asc_Can/build/reqm/ReqM2_OldReqImporter/reqm_TSO.reqm</commandline>
    <timestamp>Fri Mar  8 19:47:43 2024</timestamp>
  </environment>
  <cmdline>
    <cmdparam>
      <name>I</name>
      <values>
        <value>/cygdrive/e/work/workspace/TEST_TRACING/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>O</name>
      <values>
        <value>/cygdrive/e/work/workspace/TEST_TRACING/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>c</name>
      <values>
        <value>/cygdrive/e/work/workspace/TEST_TRACING/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules.xml</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>o</name>
      <values>
        <value>asc_Can_tracing_cmdb.oreqm</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>q</name>
    </cmdparam>
    <cmdparam>
      <name>s</name>
      <values>
        <value>approved</value>
        <value>rejected</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>t</name>
    </cmdparam>
    <cmdparam>
      <name>wfatal</name>
      <values>
        <value>WDUPLICATEID</value>
        <value>WDUPLICATEIDANDVER</value>
      </values>
    </cmdparam>
  </cmdline>
  <inputfiles>
    <inputfile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/build/reqm/ReqM2_Native/asc_Can_requirements_AUTOSAR_SWS_CAN_Driver.reqm</inputfile>
    <inputfile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/build/reqm/ReqM2_Native/asc_Can_requirements_EB_Requirements_CAN_Driver.reqm</inputfile>
    <inputfile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/build/reqm/ReqM2_Native/asc_Can_test_WinCore_CAN_MCAL_ReviewGuideline.reqm</inputfile>
    <inputfile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/build/reqm/ReqM2_GenericImporter/reqm_DEV.reqm</inputfile>
    <inputfile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/build/reqm/ReqM2_GenericImporter/reqm_SRC.reqm</inputfile>
    <inputfile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/build/reqm/ReqM2_OldCImporter/reqm_TCS_LEGACY.reqm</inputfile>
    <inputfile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/build/reqm/ReqM2_OldReqImporter/reqm_TSO.reqm</inputfile>
  </inputfiles>
  <configuration>
    <doctypes>
    <regexs>
      <!-- external level -->
      <regex>creq</regex>       <!-- since 10/2018: introduced for updated tracing model-->

      <!-- product line level -->
      <regex>fea</regex>
      <regex>feavc</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swpad</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swts</regex>
      <regex>pdoc</regex>       <!-- since 10/2018: introduced for updated tracing model-->
      <regex>dev</regex>

      <!-- bundle level -->
      <regex>swrs</regex>
      <regex>swad</regex>
      <regex>swadvc</regex>     <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swintts</regex>

      <!-- module level -->
      <regex>swdd</regex>
      <regex>swurs</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swuvc</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swmts</regex>      <!-- since 01/2020: introduced for updated tracing model RMP4.0-->
      <regex>swuts</regex>
      <regex>impl</regex>
      <regex>doc</regex>

      <!-- legacy items -->
      <regex>req</regex>        <!-- deprecated 10/2017: old swrs type -->
      <regex>dsn</regex>        <!-- deprecated 10/2017: old swdd -->
      <regex>src</regex>        <!-- deprecated 10/2017: old impl type -->
      <regex>tcs</regex>        <!-- deprecated 10/2017: replaced by swintts and swuts -->
      <regex>dsn_arch</regex>   <!-- deprecated 10/2017: old swad type -->
      <regex>man</regex>
      <regex>tso</regex>
      <regex>lim</regex>
    </regexs>
  </doctypes>
    <rules>

    <rule>
      <name>ERR.general.status</name>
      <description>All specification objects must be either in status=approved or in status=rejected. Other
        statuses are not allowed. How to fix: Set status to rejected or approved.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status!='approved') and (./status!='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.rejected</name>
      <description>Status status=rejected is only allowed for requirements. How to fix: set to approved for specification object that are not requirements.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype!='req') and (../@doctype!='swrs')  and (../@doctype!='swmrs') and (../@doctype!='swurs') and (./status='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.comment</name>
      <description>Specification objects with status=rejected shall have a comment or rationale that
        starts with on of the following texts: "This requirement is informational only", "This requirement is not applicable".
        How to fix: Add some text starting with "This requirement is informational only"
        or "This requirement is not applicable" to either the comment or to the rationale.
        Comment: Implementation of check checks for contains instead of starts-with since there is
        no trim function in the used XPATH engine.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>contains(./comment,"This requirement is informational only") or contains(./rationale,"This requirement is informational only") or contains(./comment,"This requirement is not applicable") or contains(./rationale,"This requirement is not applicable")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.rejected</name>
      <description>Specification objects with status=rejected shall not need coverage. How to fix: remove need for coverage.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>count(./needscoverage)=0</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.needscoverage.count</name>
      <description>Requirements with status=approved need to be covered, exceptions from
      this rule: configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") and requirements with
      a comment starting with "The adherence to this requirement is ensured by the following
      release check (URL to the checklist template plus ID of the check):".
      How to fix: Provide a needsobj element for those specobjects or comment according to the rule.
      </description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='req') and (./status='approved') and count(./needscoverage/needsobj)=0 and count(./fulfilledby/ffbObj)=0]</applyto>
          <!--This condition is false if the id of a specification object does not end with '_Conf' or '_CONF' or does not start with ECUC_ -->
          <condition>substring-after(./id,"ECUC_")!="" or substring-before(./id,"_Conf")!="" or substring-before(./id,"_CONF")!="" or contains(./comment,"The adherence to this requirement is ensured by the following release check (URL to the checklist template plus ID of the check):")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.needscoverage.rationale</name>
      <description>Requirements with status=approved and without coverage needs that are
        configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") shall have a comment or rationale
        with the following text: "This is a configuration parameter requirement without functional
        specification.". How to fix: Add some text starting with "This is a configuration parameter
        requirements without functional specification" to either the comment or to the rationale.</description>
      <regexchecks>
        <regexcheck>
          <applyto>//specobject[(../@doctype='req') and (./status='approved') and count(./needscoverage/needsobj)=0 and (substring-after(./id,"ECUC_")!="" or substring-before(./id,"_CONF")!="" or substring-before(./id,"_Conf")!="")]</applyto>
          <regex>This is a configuration parameter requirement without functional specification.</regex>
        </regexcheck>
      </regexchecks>
    </rule>

    <rule>
      <name>ERR.req.releases</name>
      <description>Requirements which originates from AUTOSAR (source tag contains term 'AUTOSAR_SWS', 'AUTOSAR_TPS',
        'AUTOSAR_ASWS' or 'AUTOSAR_TR') shall have their release tag set to 'AUTOSAR {major}.{minor}.{patch}' (e.g. 'AUTOSAR 4.3.0').
        Other requirements (including refinements of AUTOSAR requirements) must not contain any of the listed prefixes as
        part of the source tag.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[((../@doctype='req') or (../@doctype='swrs')) and (contains(./source,'AUTOSAR_SWS') or contains(./source,'AUTOSAR_TPS') or contains(./source,'AUTOSAR_ASWS') or contains(./source,'AUTOSAR_TR'))]</applyto>
          <condition>contains(./releases/release,'AUTOSAR')</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dsn.needscoverage.count</name>
      <description>Design elements with status=approved need to be covered.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[((../@doctype='swdd') or (../@doctype='dsn')) and (./status='approved') and count(./needscoverage/needsobj)=0]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.needscoverage.doctypes</name>
      <description>Requirements can be covered only by req, dsn_arch, dev, lim, dsn, src, tcs, or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='req')]</applyto>
          <condition>(./needscoverage/needsobj="req" or ./needscoverage/needsobj="dsn_arch" or ./needscoverage/needsobj="dev" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="dsn" or ./needscoverage/needsobj="src" or ./needscoverage/needsobj="tcs" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swrs.needscoverage.doctypes</name>
      <description>Requirements of type swrs can be covered only by swrs, swad, dev, lim, swurs, swdd, src, swuts, swintts or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swrs')]</applyto>
          <condition>(./needscoverage/needsobj="swrs" or ./needscoverage/needsobj="swad" or ./needscoverage/needsobj="dev" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swintts" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dsn.needscoverage.doctypes</name>
      <description>Design elements can only be covered by dsn, src, tcs, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dsn')]</applyto>
          <condition>(./needscoverage/needsobj="dsn" or ./needscoverage/needsobj="src" or ./needscoverage/needsobj="tcs" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>
    <rule>
      <name>ERR.swdd.needscoverage.doctypes</name>
      <description>Design elements of type swdd can only be covered by swdd, swurs, impl, swuts, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swdd')]</applyto>
          <condition>(./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swmts" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dev.needscoverage.count</name>
      <description>Deviations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dev')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.tcs.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='tcs')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.needscoverage.count</name>
      <description>Manual test cases shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.src.needscoverage.count</name>
      <description>Source code shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='src')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.lim.needscoverage.count</name>
      <description>Limitations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='lim')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>


    <rule>
      <name>ERR.fea.needscoverage.test</name>
      <description>Features shall be tested by software test ('swts') or manuel test ('man'). If no test is planned a justification shall be given.
                   A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>(
               ./needscoverage/needsobj="swts" or ./needscoverage/needsobj="man" or ./fulfilledby/ffbObj/ffbType="swts" or ./fulfilledby/ffbObj/ffbType="tsc" or ./fulfilledby/ffbObj/ffbType="man" or contains(./furtherinfo,"fea.needscoverage.test") or contains(./furtherinfo,"fea.needscoverage.doctypes") )</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>WRN.fea.needscoverage.impl</name>
      <description>Features shall be covered by implementation fea, swrs, swad, swpad, swurs, man and swts. For lagacy features a justification is acceppted. A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>( ./needscoverage/needsobj="swrs" or ./fulfilledby/ffbObj/ffbType="swrs" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swpad" or ./fulfilledby/ffbObj/ffbType="swpad" or ./needscoverage/needsobj="dsn_arch" or ./fulfilledby/ffbObj/ffbType="dsn_arch" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="req" or ./fulfilledby/ffbObj/ffbType="req" or ./needscoverage/needsobj="fea" or ./fulfilledby/ffbObj/ffbType="fea" or contains(./furtherinfo,"fea.needscoverage.impl"))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>



    <rule>
      <name>ERR.dsn_arch.needscoverage.doctypes</name>
      <description>Architectural design objects can only be covered by dsn_arch, dsn, src, tcs, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dsn_arch')]</applyto>
          <condition>(./needscoverage/needsobj="dsn_arch" or ./needscoverage/needsobj="dsn" or ./needscoverage/needsobj="src" or ./needscoverage/needsobj="tcs" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>


    <rule>
      <name>ERR.swad.fulfilledby.doctypes</name>
      <description>Architectural design objects of type swad can only be covered by swurs, swad, swdd, swintts, man, req, otherwise they should be refined with swrs</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swad')]</applyto>
          <condition>(./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="req" or ./needscoverage/needsobj="req" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swad" or ./fulfilledby/ffbObj/ffbType="swdd" or ./fulfilledby/ffbObj/ffbType="swintts" or ./needscoverage/needsobj="swintts" or ./fulfilledby/ffbObj/ffbType="man" or ./needscoverage/needsobj="man") </condition>
         </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.tcs.providescoverage.doctypes</name>
      <description>Test case specifications (tcs) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='tcs')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.providescoverage.doctypes</name>
      <description>Manual test case specification (man) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swuts.providescoverage.doctypes</name>
      <description>Software unit test case specification (swuts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swuts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swintts.providescoverage.doctypes</name>
      <description>Software integration test case specification (swintts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swintts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swts.providescoverage.doctypes</name>
      <description>Software test case specification (swts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>
  </rules>
    <oreqmRules>
          <rule>
            <name>WRN.tsc.needscoverage.count</name>
            <description>Violated if there are more than 10 tsc specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='tcs']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='tsc'])) &gt; 10]/furtherinfo</applyto>
                    <regex>tsc.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>

        <rule>
            <name>WRN.req.needscoverage.count</name>
            <description>Violated if there are more than 10 req specobjects covering one specobject and no appropriate information is provided in furtherinfo, refinement on req to req are excluded. Refinements of requirements Req to Req and Req to Fea are excluded from this rule since this is tracing on the same level. The justification in furtherinfo must contain the rule name.</description>
           <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(../@doctype != 'req') and (../@doctype != 'fea') and ((count(./needscoverage/needscov[needsobj='req']/coveredby/linkedfrom)) &gt; 10)]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='req'])) &gt; 10]/furtherinfo</applyto>
                    <regex>req.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
     </rule>

        <rule>
            <name>WRN.src.needscoverage.count</name>
            <description>Violated if there are more than 10 src specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='src']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='dsn'])) &gt; 10]/furtherinfo</applyto>
                    <regex>dsn.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>

        <rule>
            <name>WRN.dsn.needscoverage.count</name>
            <description>Violated if there are more than 10 dsn specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='dsn']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='dsn'])) &gt; 10]/furtherinfo</applyto>
                    <regex>dsn.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>

        <rule>
            <name>WRN.dsn_arch.needscoverage.count</name>
            <description>Violated if there are more than 10 dsn_arch specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='dsn_arch']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='dsn_arch'])) &gt; 10]/furtherinfo</applyto>
                    <regex>dsn_arch.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>
  </oreqmRules>
  </configuration>
  <specdocument>
    <specobjects doctype="req">
    <specobject>
      <id>CAN237</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>2</version>
      <description>
        The Can module shall not transmit messages triggered by remote
        transmission requests.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>0</internalId></specobject>

    <specobject>
      <id>CAN236</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module shall initialize the CAN HW to ignore any remote
        transmission requests.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1</internalId></specobject>

    <specobject>
      <id>CAN238</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If the CAN controller is on-chip, the Can module shall not use any service
        of other drivers.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>2</internalId></specobject>

    <specobject>
      <id>CAN239</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_Init shall initialize all on-chip hardware resources that are
        used by the CAN controller. The only exception to this is the digital I/O
        pin configuration (of pins used by CAN), which is done by the port driver.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>3</internalId></specobject>

    <specobject>
      <id>CAN240</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Mcu module (SPAL see [8]) shall configure register settings that are
        'shared' with other modules.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>4</internalId></specobject>

    <specobject>
      <id>CAN242</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If an off-chip CAN controller is used 3 , the Can module shall use services of
        other MCAL drivers (e.g. SPI).
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>5</internalId></specobject>

    <specobject>
      <id>CAN244</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module shall use the synchronous APIs of the underlying MCAL drivers and
        shall not provide callback functions that can be called by the MCAL drivers.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>6</internalId></specobject>

    <specobject>
      <id>CAN280</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        In special hardware cases, the Can module shall poll for events of the hardware.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>7</internalId></specobject>

    <specobject>
      <id>CAN281</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module shall use the free running timer provided by the system service
        for timeout detection in case the hardware does not react in the expected
        time (hardware malfunction) to prevent endless loops.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.TimingParams</srcid><srcstatus/><internalId>277</internalId></linkedfrom><linkedfrom><srcid>dev.Can.NoHardwareCencellation</srcid><srcstatus/><internalId>283</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>8</internalId></specobject>

    <specobject>
      <id>CAN058</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module interacts among other modules (eg. Diagnostic Event Manager
        (DEM), Development Error Tracer (DET), Ecu State Manager (ECUM)) with the
        CanIf module in a direct way. This document never specifies the actual
        origin of a request or the actual destination of a notification. The
        driver only sees the CanIf module as origin and destination.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10503</srcid><srcstatus/><internalId>290</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10601</srcid><srcstatus/><internalId>292</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10404</srcid><srcstatus/><internalId>296</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10207</srcid><srcstatus/><internalId>307</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10401</srcid><srcstatus/><internalId>317</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10506</srcid><srcstatus/><internalId>320</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10403</srcid><srcstatus/><internalId>324</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10202</srcid><srcstatus/><internalId>331</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10206</srcid><srcstatus/><internalId>343</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10203</srcid><srcstatus/><internalId>354</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10205</srcid><srcstatus/><internalId>355</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10603</srcid><srcstatus/><internalId>360</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10501</srcid><srcstatus/><internalId>361</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations><ruleid>WRN.tsc.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>9</internalId></specobject>

    <specobject>
      <id>CAN078</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The code file structure shall not be defined within this specification
        completely. At this point it shall be pointed out that the code-file
        structure shall include the following file named: Can_PBcfg.c. This file
        shall contain all post-build time configurable parameters. Can_Lcfg.c is
        not required because the Can module does not support link-time configuration.
      </description>
      <comment>
        No post-build configuration supported.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NoPostBuild</srcid><srcstatus/><internalId>279</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>10</internalId></specobject>

    <specobject>
      <id>CAN034</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
         Figure 5-1: File structure for the Can module.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>11</internalId></specobject>

    <specobject>
      <id>CAN043</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The header file Can.h contains the declaration of the Can module API.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>12</internalId></specobject>

    <specobject>
      <id>CAN037</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The header file Can.h only contains 'extern' declarations of constants, global
        data, type definitions and services that are specified in the Can module SWS.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>13</internalId></specobject>

    <specobject>
      <id>CAN418</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Constants, global data types and functions that are only used by the Can
        module internally, are declared in Can.c.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>14</internalId></specobject>

    <specobject>
      <id>CAN388</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The header file Can.h shall include the header file ComStack_Types.h.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>15</internalId></specobject>

    <specobject>
      <id>CAN389</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The implementation of the Can module shall provide the header file Can_Cfg.h
        that shall contain the pre-compile-time configuration parameters.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>16</internalId></specobject>

    <specobject>
      <id>CAN035</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The file Can_Irq.c contains the implementation of interrupt frames [BSW00314].
        The implementation of the interrupt service routine shall be in Can.c.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>17</internalId></specobject>

    <specobject>
      <id>CAN036</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module shall include the header file CanIf_Cbk.h, in which the callback
        functions called by the Can module at the CAN Interface module are declared.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>18</internalId></specobject>

    <specobject>
      <id>CAN390</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module shall include the header file EcuM_Cbk.h, in which the callback
        functions called by the Can module at the Ecu State Manager module are declared.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>19</internalId></specobject>

    <specobject>
      <id>CAN391</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Can module implementations for off-chip CAN controllers shall include
        the header file Spi.h. By this inclusion, the APIs to access an external
        CAN controller by the SPI module [12] are included.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>20</internalId></specobject>

    <specobject>
      <id>CAN392</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If an implementation defines implementation specific production errors, the Can
        module shall include the header file Dem.h. By this inclusion, the APIs
        to report production errors as well as the required Event Id symbols are included.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>21</internalId></specobject>

    <specobject>
      <id>CAN393</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If the development error detection for the Can module is enabled, the Can module
        shall include the header file Det.h. By this inclusion, the APIs to report
        development errors are included.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>22</internalId></specobject>

    <specobject>
      <id>CAN394</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module shall include the header file MemMap.h and apply the memory
        mapping abstraction mechanisms as specified by [13].
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>23</internalId></specobject>

    <specobject>
      <id>CAN397</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module shall include the header file Os.h file. By this inclusion, the
        API to read a free running timer value (GetCounterValue) provided by the
        system service shall be included.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>24</internalId></specobject>

    <specobject>
      <id>CAN406</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module shall include the header file SchM_Can.h in order to access the
        module specific functionality provided by the BSW Scheduler [14].
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>25</internalId></specobject>

    <specobject>
      <id>CAN033</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module shall implement the interrupt service routines for all CAN
        Hardware Unit interrupts that are needed.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10601</srcid><srcstatus/><internalId>292</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10401</srcid><srcstatus/><internalId>317</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>26</internalId></specobject>

    <specobject>
      <id>CAN419</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module shall disable all unused interrupts in the CAN controller.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>27</internalId></specobject>

    <specobject>
      <id>CAN420</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module shall reset the interrupt flag at the end of the ISR (if not done
        automatically by hardware).
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>28</internalId></specobject>

    <specobject>
      <id>CAN079</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module shall fulfill all design and implementation guidelines described
        in [11].
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>29</internalId></specobject>

    <specobject>
      <id>CAN077</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        For CAN Hardware Units of different type, different Can modules shall be
        implemented.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>30</internalId></specobject>

    <specobject>
      <id>CAN284</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        In case several CAN Hardware Units (of same or different vendor) are
        implemented in one ECU the function names, and global variables of the
        Can modules shall be implemented such that no two functions with the
        same name are generated.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>31</internalId></specobject>

    <specobject>
      <id>CAN385</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The naming conventions shall be used only in that case, if multiple different
        CAN controller types on one ECU have to be supported.
      </description>
      <comment>
        Multiple different CAN controller types are not supported.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>32</internalId></specobject>

    <specobject>
      <id>CAN386</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If only one controller type is used, the original naming conventions without any
        &lt;driver abbreviation&gt; extensions are sufficient.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>33</internalId></specobject>

    <specobject>
      <id>CAN103</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        After power-up/reset, the Can module shall be in the state CAN_UNINIT.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10008</srcid><srcstatus/><internalId>298</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10004</srcid><srcstatus/><internalId>302</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10007</srcid><srcstatus/><internalId>303</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10003</srcid><srcstatus/><internalId>337</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10005</srcid><srcstatus/><internalId>338</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10006</srcid><srcstatus/><internalId>348</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>34</internalId></specobject>

    <specobject>
      <id>CAN246</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_Init shall change the module state to CAN_READY, after
        initializing all controllers inside the HW Unit.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>35</internalId></specobject>

    <specobject>
      <id>CAN245</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_Init shall initialize all CAN controllers according to their
        configuration.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>36</internalId></specobject>

    <specobject>
      <id>CAN257</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        When the CAN hardware supports sleep mode and is triggered to transition into
        SLEEP state, the Can module shall set the controller to the SLEEP state
        from which the hardware can be woken over CAN Bus.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.SleepWakeup</srcid><srcstatus/><internalId>274</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>37</internalId></specobject>

    <specobject>
      <id>CAN258</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        When the CAN hardware does not support sleep mode and is triggered to transition
        into SLEEP state, the Can module shall emulate a logical SLEEP state from
        which it returns only, when it is triggered by software to transition
        into STOPPED state.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_20003</srcid><srcstatus/><internalId>289</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>38</internalId></specobject>

    <specobject>
      <id>CAN404</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The CAN hardware shall remain in state STOPPED, while the logical SLEEP state is
        active.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>39</internalId></specobject>

    <specobject>
      <id>CAN259</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_Init shall set all CAN controllers in the state STOPPED.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_20001</srcid><srcstatus/><internalId>357</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>40</internalId></specobject>

    <specobject>
      <id>CAN256</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module’s environment shall only call Can_InitController when the CAN
        controller is in state STOPPED.
      </description>
      <comment>
        This is a requirement on the environment, not on CAN.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NoRequirementsOnCan</srcid><srcstatus/><internalId>282</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>41</internalId></specobject>

    <specobject>
      <id>CAN260</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_InitController shall maintain the CAN controller in the state
        STOPPED.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_20005</srcid><srcstatus/><internalId>288</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10028</srcid><srcstatus/><internalId>353</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>42</internalId></specobject>

    <specobject>
      <id>CAN422</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_InitController shall ensure that any settings that will cause
        the CAN controller to participate in the network are not set.
      </description>
      <comment>
        There is no feedback about the bus state from EB tresos inspector.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>43</internalId></specobject>

    <specobject>
      <id>CAN370</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>2</version>
      <description>
        The functions Can_SetControllerMode shall poll a flag of the CAN status register
        until the flag signals that the change takes effect and notify the upper
        layer with function CanIf_ControllerModeIndication about a successful
        state transition.
      </description>
      <comment>
        Switching the controller mode does always succeed synchronously.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.TimingParams</srcid><srcstatus/><internalId>277</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>44</internalId></specobject>

    <specobject>
      <id>CAN371</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>2</version>
      <description>
        This polling shall take the maximum time of CanTimeoutDuration for blocking
        function and thus the polling time is limited.
      </description>
      <comment>
        Switching the controller mode does always succeed synchronously.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.TimingParams</srcid><srcstatus/><internalId>277</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>45</internalId></specobject>

    <specobject>
      <id>CAN398</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_SetControllerMode shall use the system service GetCounterValue
        for timeout monitoring to avoid blocking functions.
      </description>
      <comment>
        There are no blocking functions
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.TimingParams</srcid><srcstatus/><internalId>277</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>46</internalId></specobject>

    <specobject>
      <id>CAN372</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        In case the flag signals that the change takes no effect and the maximum time
        CanTimeoutDuration is elapsed, the function Can_SetControllerMode shall
        be left and the function Can_Mainfunction_Mode shall continue to poll the flag.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>47</internalId></specobject>

    <specobject>
      <id>CAN373</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_Mainfunction_Mode shall call the function
        CanIf_ControllerModeIndication to notify the upper layer about a
        successful state transition of the CAN controller, in case the state
        transition was triggered by function Can_SetControllerMode.
      </description>
      <comment>
        Since there is no underlying CAN hardware and thus a state takes effect immediately,
        CanIf_ControllerModeIndication is always called by Can_SetControllerMode.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_20003</srcid><srcstatus/><internalId>289</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>48</internalId></specobject>

    <specobject>
      <id>CAN261</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_SetControllerMode(CAN_T_START) shall set the hardware registers
        in a way that makes the CAN controller participating on the network.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_20001</srcid><srcstatus/><internalId>357</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>49</internalId></specobject>

    <specobject>
      <id>CAN262</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_SetControllerMode(CAN_T_START) shall wait for limited time
        until the CAN controller is fully operational. Compare to CAN371.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.TimingParams</srcid><srcstatus/><internalId>277</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>50</internalId></specobject>

    <specobject>
      <id>CAN409</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        When the function Can_SetControllerMode(CAN_T_START) is entered and the CAN
        controller is not in state STOPPED it shall detect a invalid state
        transition (Compare to CAN200).
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10020</srcid><srcstatus/><internalId>342</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>51</internalId></specobject>

    <specobject>
      <id>CAN263</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_SetControllerMode(CAN_T_STOP) shall set the bits inside the CAN
        hardware such that the CAN controller stops participating on the network.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_20002</srcid><srcstatus/><internalId>308</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>52</internalId></specobject>

    <specobject>
      <id>CAN264</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_SetControllerMode(CAN_T_STOP) shall wait for a limited time
        until the CAN controller is really switched off. Compare to CAN371.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.TimingParams</srcid><srcstatus/><internalId>277</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>53</internalId></specobject>

    <specobject>
      <id>CAN282</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_SetControllerMode(CAN_T_STOP) shall cancel pending messages.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10201</srcid><srcstatus/><internalId>304</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>54</internalId></specobject>

    <specobject>
      <id>CAN283</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_SetControllerMode(CAN_T_STOP) shall not call a cancellation
        notification.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10201</srcid><srcstatus/><internalId>304</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>55</internalId></specobject>

    <specobject>
      <id>CAN410</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        When the function Can_SetControllerMode(CAN_T_STOP) is entered and the CAN
        controller is neither in state STARTED nor in state STOPPED, it shall
        detect a invalid state transition (Compare to CAN200).
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_20003</srcid><srcstatus/><internalId>289</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>56</internalId></specobject>

    <specobject>
      <id>CAN265</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_SetControllerMode(CAN_T_SLEEP) shall set the controller into
        sleep mode.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.SleepWakeup</srcid><srcstatus/><internalId>274</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>57</internalId></specobject>

    <specobject>
      <id>CAN266</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If the CAN HW does support a sleep mode, the function
        Can_SetControllerMode(CAN_T_SLEEP) shall wait for a limited time until
        the CAN controller is in SLEEP state and it is assured that the CAN
        hardware is wake able. Compare to CAN371.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.SleepWakeup</srcid><srcstatus/><internalId>274</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>58</internalId></specobject>

    <specobject>
      <id>CAN290</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If the CAN HW does not support a sleep mode, the function
        Can_SetControllerMode(CAN_T_SLEEP) shall set the CAN controller to the
        logical sleep mode.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_20003</srcid><srcstatus/><internalId>289</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>59</internalId></specobject>

    <specobject>
      <id>CAN405</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        This logical sleep mode shall left only, if function
        Can_SetControllerMode(CAN_T_WAKEUP) is called.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10027</srcid><srcstatus/><internalId>345</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>60</internalId></specobject>

    <specobject>
      <id>CAN411</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        When the function Can_SetControllerMode(CAN_T_SLEEP) is entered and the CAN
        controller is neither in state STOPPED nor in state SLEEP, it shall
        detect a invalid state transition (Compare to CAN200).
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_20003</srcid><srcstatus/><internalId>289</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>61</internalId></specobject>

    <specobject>
      <id>CAN267</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If the CAN HW does not support a sleep mode, the function
        Can_SetControllerMode(CAN_T_WAKEUP) shall return from the logical sleep
        mode, but have no effect to the CAN controller state (as the controller
        is already in stopped state).
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_20004</srcid><srcstatus/><internalId>333</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>62</internalId></specobject>

    <specobject>
      <id>CAN268</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_SetControllerMode(CAN_T_WAKEUP) shall wait for a limited time
        until the CAN controller is in STOPPED state. Compare to CAN371.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>63</internalId></specobject>

    <specobject>
      <id>CAN412</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        When the function Can_SetControllerMode(CAN_T_WAKEUP) is entered and the CAN
        controller is neither in state SLEEP nor in state STOPPED, it shall
        detect a invalid state transition (Compare to CAN200).
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_20003</srcid><srcstatus/><internalId>289</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>64</internalId></specobject>

    <specobject>
      <id>CAN270</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        On hardware wakeup (triggered by a wake-up event from CAN bus), the CAN
        controller shall transition into the state STOPPED.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.SleepWakeup</srcid><srcstatus/><internalId>274</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>65</internalId></specobject>

    <specobject>
      <id>CAN271</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        On hardware wakeup (triggered by a wake-up event from CAN bus), the Can module
        shall call the function EcuM_CheckWakeup either in interrupt context or
        in the context of Can_MainFunction_Wakeup.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.SleepWakeup</srcid><srcstatus/><internalId>274</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>66</internalId></specobject>

    <specobject>
      <id>CAN269</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module shall not further process the L-PDU that caused a wakeup.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.SleepWakeup</srcid><srcstatus/><internalId>274</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>67</internalId></specobject>

    <specobject>
      <id>CAN048</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        In case of a CAN bus wake-up during sleep transition, the function
        Can_SetControllerMode(CAN_T_WAKEUP) shall return CAN_NOT_OK.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.SleepWakeup</srcid><srcstatus/><internalId>274</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>68</internalId></specobject>

    <specobject>
      <id>CAN020</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        - STARTED -&gt; STOPPED
        - triggered by hardware if the CAN controller reaches bus-off state
        - The CanIf module is notified with the function CanIf_ControllerBusOff
          after STOPPED state is reached.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.BusOff</srcid><srcstatus/><internalId>275</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>69</internalId></specobject>

    <specobject>
      <id>CAN272</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        After bus-off detection, the CAN controller shall transition to the state
        STOPPED and the Can module shall ensure that the CAN controller doesn't
        participate on the network anymore.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.BusOff</srcid><srcstatus/><internalId>275</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>70</internalId></specobject>

    <specobject>
      <id>CAN273</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        After bus-off detection, the Can module shall cancel still pending messages
        without raising a cancellation notification.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.BusOff</srcid><srcstatus/><internalId>275</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>71</internalId></specobject>

    <specobject>
      <id>CAN274</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module shall disable or suppress automatic bus-off recovery.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.BusOff</srcid><srcstatus/><internalId>275</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>72</internalId></specobject>

    <specobject>
      <id>CAN250</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_Init shall initialize:
        - static variables, including flags,
        - Common setting for the complete CAN HW unit
        - CAN controller specific settings for each CAN controller
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>73</internalId></specobject>

    <specobject>
      <id>CAN053</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Can_Init shall not change registers of CAN controller Hardware resources.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>74</internalId></specobject>

    <specobject>
      <id>CAN407</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        - If the hardware allows for only one usage of the register, the Can module
          implementing that functionality is responsible initializing the register.
        - If the register can affect several hardware modules and if it is an
          I/O register it  shall be initialized by the PORT driver.
        - If the register can affect several hardware modules and if it is not an I/O 
          register it shall be initialized by the MCU driver.
        - One-time writable registers that require initialization directly after reset shall
          be initialized by the startup code.
        - All other registers shall be initialized by the startup code.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>75</internalId></specobject>

    <specobject>
      <id>CAN056</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Post-Build configuration elements that are marked as 'multiple' ('M' or 'x') in
        chapter 10 can be selected by passing the pointer 'Config' to the init
        function of the module.
      </description>
      <comment>
        Post-Build configuration is not supported.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NoPostBuild</srcid><srcstatus/><internalId>279</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>76</internalId></specobject>

    <specobject>
      <id>CAN023</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The consistency of the configuration must be checked by the configuration
        tool(s).
      </description>
      <comment>
        Post-Build configuration is not supported.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NoPostBuild</srcid><srcstatus/><internalId>279</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>77</internalId></specobject>

    <specobject>
      <id>CAN062</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_InitController shall re-initialize the CAN controller and the
        controller specific settings.
      </description><releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10305</srcid><srcstatus/><internalId>310</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>78</internalId></specobject>

    <specobject>
      <id>CAN255</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_InitController shall only affect register areas that contain
        specific configuration for a single CAN controller.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>79</internalId></specobject>

    <specobject>
      <id>CAN021</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The desired CAN controller configuration can be selected with the parameter
        Config.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>80</internalId></specobject>

    <specobject>
      <id>CAN291</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Config is a pointer into an array of implementation specific data structure
        stored in ROM. The different controller configuration sets are located as
        data structures in ROM.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>81</internalId></specobject>

    <specobject>
      <id>CAN059</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Data mapping by CAN to memory is defined in a way that the CAN data byte which
        is sent out first is array element 0, the CAN data byte which is sent out
        last is array element 7.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10204</srcid><srcstatus/><internalId>306</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10402</srcid><srcstatus/><internalId>352</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>82</internalId></specobject>

    <specobject>
      <id>CAN427</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If the presentation inside the CAN Hardware buffer differs from AUTOSAR
        definition, the Can module must provide an adapted SDU-Buffer for the
        upper layers.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>83</internalId></specobject>

    <specobject>
      <id>CAN100</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Several TX hardware objects with unique HTHs may be configured. The CanIf module
        provides the HTH as parameter of the TX request. See Figure 7-3 for a
        possible configuration.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10207</srcid><srcstatus/><internalId>307</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>84</internalId></specobject>

    <specobject>
      <id>CAN276</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_Write shall store the swPduHandle that is given inside the
        parameter PduInfo until the Can module calls the CanIf_TxConfirmation for
        this request where the swPduHandle is given as parameter.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10202</srcid><srcstatus/><internalId>331</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>85</internalId></specobject>

    <specobject>
      <id>CAN016</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module shall call CanIf_TxConfirmation to indicate a successful
        transmission. It shall either called by the TX-interrupt service routine
        of the corresponding HW resource or inside the Can_MainFunction_Write in
        case of polling mode.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10202</srcid><srcstatus/><internalId>331</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>86</internalId></specobject>

    <specobject>
      <id>CAN277</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module shall allow that the functionality “Multiplexed Transmission”
        is statically configurable (ON | OFF) at pre-compile time.
      </description>
      <comment>
        There is no underlying CAN hardware and only synchronous instant-transmission.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>87</internalId></specobject>

    <specobject>
      <id>CAN401</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Several transmit hardware objects shall be assigned by one HTH to represent one
        transmit entity to the upper layer.
      </description>
      <comment>There is no underlying CAN hardware.</comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>88</internalId></specobject>

    <specobject>
      <id>CAN402</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module shall support multiplexed transmission mechanisms for devices
        where either
        - Multiple transmit hardware objects, which are grouped to a
          transmit entity can be filled over the same register set, and the
          microcontroller stores the L-PDU into a free buffer autonomously,
        or
        - The Hardware provides registers or functions to identify a free transmit
          hardware object within a transmit entity.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>89</internalId></specobject>

    <specobject>
      <id>CAN403</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module shall support multiplexed transmission for devices, which send
        L-PDUs in order of L-PDU priority.
      </description>
      <comment>
        Only synchronous unbuffered transmission is supported.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>90</internalId></specobject>

    <specobject>
      <id>CAN076</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module shall NOT support software emulation for the transmission in
        order of LPDU-priority.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>91</internalId></specobject>

    <specobject>
      <id>CAN278</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module shall allow that the functionality "Transmit Cancellation" is
        statically configurable (ON | OFF) at pre-compile time.
      </description>
      <comment>
        Only synchronous unbuffered transmission is supported.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>92</internalId></specobject>

    <specobject>
      <id>CAN432</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module shall allow that the cancellation of pending L-PDUs with
        identical priority is statically configurable at pre-compile time by
        parameter CanIdenticalIdCancellation.
      </description>
      <comment>
        Only synchronous unbuffered transmission is supported.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NoHardwareCencellation</srcid><srcstatus/><internalId>283</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>93</internalId></specobject>

    <specobject>
      <id>CAN285</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Transmit cancellation may only be used when transmit buffers are enabled inside
        the CanIf module.
      </description>
      <comment>
        Only synchronous unbuffered transmission is supported.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NoHardwareCencellation</srcid><srcstatus/><internalId>283</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>94</internalId></specobject>

    <specobject>
      <id>CAN286</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module shall initiate a cancellation, when the hardware transmit object
        assigned by a HTH is busy and an L-PDU with higher priority is requested
        to be transmitted.
      </description>
      <comment>
        Only synchronous unbuffered transmission is supported.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>95</internalId></specobject>

    <specobject>
      <id>CAN433</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module shall initiate a cancellation, when the hardware transmit object
        assigned by a HTH is busy, an L-PDU with identical priority is requested
        to be transmitted and CanIdenticalIdCancellation is enabled.
      </description>
      <comment>
        Only synchronous unbuffered transmission is supported.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NoHardwareCencellation</srcid><srcstatus/><internalId>283</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>96</internalId></specobject>

    <specobject>
      <id>CAN399</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module shall initiate a cancellation of the L-PDU with the lowest
        priority, when all hardware transmit objects assigned by the HTH are busy
        and an LPDU with a higher priority is requested to be transmitted.
      </description>
      <comment>
        Only synchronous unbuffered transmission is supported.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NoHardwareCencellation</srcid><srcstatus/><internalId>283</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>97</internalId></specobject>

    <specobject>
      <id>CAN400</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module shall initiate a cancellation, when one of the hardware transmit
        objects assigned by the HTH is busy, an L-PDU with identical priority is
        requested to be transmitted and CanIdenticalIdCancellation is enabled.
      </description>
      <comment>
        There is no underlying CAN Hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NoHardwareCencellation</srcid><srcstatus/><internalId>283</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>98</internalId></specobject>

    <specobject>
      <id>CAN287</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module shall raise a notification when the cancellation was successful
        by calling the function CanIf_CancelTxConfirmation.
      </description>
      <comment>
        Only synchronous unbuffered transmission is supported.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NoHardwareCencellation</srcid><srcstatus/><internalId>283</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>99</internalId></specobject>

    <specobject>
      <id>CAN288</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The TX request for the new L-PDU shall be repeated by the CanIf module, inside
        the notification function CanIf_CancelTxConfirmation.
      </description>
      <comment>
        Only synchronous unbuffered transmission is supported.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NoHardwareCencellation</srcid><srcstatus/><internalId>283</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>100</internalId></specobject>

    <specobject>
      <id>CAN011</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module shall directly copy the data from the upper layer buffers. It is
        the responsibility of the upper layer to keep the buffer consistent until
        return of function call (Can_Write).
      </description>
      <comment>
        Only synchronous unbuffered transmission is supported.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>101</internalId></specobject>

    <specobject>
      <id>CAN279</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        On L-PDU reception, the Can module shall call the RX indication callback
        function CanIf_RxIndication with ID, DLC and pointer to the L-SDU buffer
        as parameter.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10503</srcid><srcstatus/><internalId>290</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10601</srcid><srcstatus/><internalId>292</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10502</srcid><srcstatus/><internalId>305</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10506</srcid><srcstatus/><internalId>320</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10604</srcid><srcstatus/><internalId>323</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10504</srcid><srcstatus/><internalId>332</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10602</srcid><srcstatus/><internalId>336</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10603</srcid><srcstatus/><internalId>360</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10501</srcid><srcstatus/><internalId>361</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>102</internalId></specobject>

    <specobject>
      <id>CAN423</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If necessary, the Can module shall convert the ID and DLC to a standardized
        format (i.e. MSB that marks extended identifiers).
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>103</internalId></specobject>

    <specobject>
      <id>CAN396</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The RX-interrupt service routine of the corresponding HW resource or the
        function Can_MainFunction_Read in case of polling mode shall call the
        callback function CanIf_RxIndication.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10501</srcid><srcstatus/><internalId>361</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>104</internalId></specobject>

    <specobject>
      <id>CAN060</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Data mapping by CAN to memory is defined in a way that the CAN data byte which
        is received first is array element 0, the CAN data byte which is received
        last is array element 7. If the presentation inside the CAN Hardware
        buffer differs from AUTOSAR definition, the Can module must provide an
        adapted SDU-Buffer for the upper layers.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10503</srcid><srcstatus/><internalId>290</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10601</srcid><srcstatus/><internalId>292</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10603</srcid><srcstatus/><internalId>360</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10501</srcid><srcstatus/><internalId>361</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>105</internalId></specobject>

    <specobject>
      <id>CAN299</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module shall copy the L-SDU in a shadow buffer after reception, if the
        RX buffer cannot be protected (locked) by CAN Hardware against overwriting
        by a newly received message.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10507</srcid><srcstatus/><internalId>334</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>106</internalId></specobject>

    <specobject>
      <id>CAN300</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module shall copy the L-SDU in a shadow buffer, if the CAN Hardware is
        not globally accessible.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>107</internalId></specobject>

    <specobject>
      <id>CAN012</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module shall guarantee that neither the ISRs nor the function
        Can_MainFunction_Read can be interrupted by itself. The CAN hardware (or
        shadow) buffer is always consistent, because it is written and read in
        sequence in exactly one function that is never interrupted by itself.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>108</internalId></specobject>

    <specobject>
      <id>CAN395</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If the development error detection for the Can module is enabled, the Can module
        shall raise the error CAN_E_DATALOST in case of “overwrite” or
        “overrun” event detection.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10031</srcid><srcstatus/><internalId>344</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>109</internalId></specobject>

    <specobject>
      <id>CAN364</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If the ISR for wakeup events is called, it shall call EcuM_CheckWakeup in turn.
        The parameter passed to EcuM_CheckWakeup shall be the ID of the wakeup
        source referenced by the CanWakeupSourceRef configuration parameter.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.SleepWakeup</srcid><srcstatus/><internalId>274</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>110</internalId></specobject>

    <specobject>
      <id>CAN099</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The hardware events may be detected by an interrupt or by polling status flags
        of the hardware objects. The configuration possibilities regarding
        polling is hardware dependent (i.e. which events can be polled, which
        events need to be polled), and not restricted by this standard.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10601</srcid><srcstatus/><internalId>292</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10401</srcid><srcstatus/><internalId>317</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10203</srcid><srcstatus/><internalId>354</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10501</srcid><srcstatus/><internalId>361</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>111</internalId></specobject>

    <specobject>
      <id>CAN007</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        It shall be possible to configure the driver such that no interrupts at all are
        used (complete polling).
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>112</internalId></specobject>

    <specobject>
      <id>CAN104</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module shall be able to detect the following errors and exceptions
        depending on its configuration (development/production).
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10018</srcid><srcstatus/><internalId>291</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10017</srcid><srcstatus/><internalId>293</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10014</srcid><srcstatus/><internalId>294</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10022</srcid><srcstatus/><internalId>297</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10008</srcid><srcstatus/><internalId>298</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10026</srcid><srcstatus/><internalId>301</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10004</srcid><srcstatus/><internalId>302</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10007</srcid><srcstatus/><internalId>303</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10001</srcid><srcstatus/><internalId>309</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10023</srcid><srcstatus/><internalId>311</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10025</srcid><srcstatus/><internalId>315</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10029</srcid><srcstatus/><internalId>319</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10015</srcid><srcstatus/><internalId>325</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10013</srcid><srcstatus/><internalId>328</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10003</srcid><srcstatus/><internalId>337</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10005</srcid><srcstatus/><internalId>338</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10019</srcid><srcstatus/><internalId>340</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10021</srcid><srcstatus/><internalId>341</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10020</srcid><srcstatus/><internalId>342</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10027</srcid><srcstatus/><internalId>345</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10006</srcid><srcstatus/><internalId>348</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10024</srcid><srcstatus/><internalId>350</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10002</srcid><srcstatus/><internalId>358</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10016</srcid><srcstatus/><internalId>359</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations><ruleid>WRN.tsc.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>113</internalId></specobject>

    <specobject>
      <id>CAN026</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module shall indicate errors that are caused by erroneous usage of the
        Can module API. This covers API parameter checks and call sequence
        errors.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10018</srcid><srcstatus/><internalId>291</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10017</srcid><srcstatus/><internalId>293</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10014</srcid><srcstatus/><internalId>294</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10022</srcid><srcstatus/><internalId>297</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10008</srcid><srcstatus/><internalId>298</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10026</srcid><srcstatus/><internalId>301</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10004</srcid><srcstatus/><internalId>302</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10007</srcid><srcstatus/><internalId>303</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10001</srcid><srcstatus/><internalId>309</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10023</srcid><srcstatus/><internalId>311</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10025</srcid><srcstatus/><internalId>315</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10029</srcid><srcstatus/><internalId>319</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10015</srcid><srcstatus/><internalId>325</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10013</srcid><srcstatus/><internalId>328</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10003</srcid><srcstatus/><internalId>337</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10005</srcid><srcstatus/><internalId>338</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10019</srcid><srcstatus/><internalId>340</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10021</srcid><srcstatus/><internalId>341</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10020</srcid><srcstatus/><internalId>342</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10027</srcid><srcstatus/><internalId>345</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10006</srcid><srcstatus/><internalId>348</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10024</srcid><srcstatus/><internalId>350</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10002</srcid><srcstatus/><internalId>358</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10016</srcid><srcstatus/><internalId>359</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations><ruleid>WRN.tsc.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>114</internalId></specobject>

    <specobject>
      <id>CAN028</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module shall call the Development Error Tracer when DET is switched on
        and the Can module detects an error.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10018</srcid><srcstatus/><internalId>291</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10017</srcid><srcstatus/><internalId>293</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10014</srcid><srcstatus/><internalId>294</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10022</srcid><srcstatus/><internalId>297</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10008</srcid><srcstatus/><internalId>298</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10026</srcid><srcstatus/><internalId>301</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10004</srcid><srcstatus/><internalId>302</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10007</srcid><srcstatus/><internalId>303</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10001</srcid><srcstatus/><internalId>309</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10023</srcid><srcstatus/><internalId>311</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10025</srcid><srcstatus/><internalId>315</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10029</srcid><srcstatus/><internalId>319</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10015</srcid><srcstatus/><internalId>325</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10013</srcid><srcstatus/><internalId>328</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10003</srcid><srcstatus/><internalId>337</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10005</srcid><srcstatus/><internalId>338</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10019</srcid><srcstatus/><internalId>340</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10021</srcid><srcstatus/><internalId>341</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10020</srcid><srcstatus/><internalId>342</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10027</srcid><srcstatus/><internalId>345</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10006</srcid><srcstatus/><internalId>348</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10024</srcid><srcstatus/><internalId>350</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10002</srcid><srcstatus/><internalId>358</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10016</srcid><srcstatus/><internalId>359</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations><ruleid>WRN.tsc.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>115</internalId></specobject>

    <specobject>
      <id>CAN091</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        After return of the DET the Can module's function that raised the development
        error shall return immediately.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>116</internalId></specobject>

    <specobject>
      <id>CAN089</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module's environment shall indicate development errors only in the
        return values of a function of the Can module when DET is switched on and
        the function provides a return value. The returned value is CAN_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10022</srcid><srcstatus/><internalId>297</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10008</srcid><srcstatus/><internalId>298</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10026</srcid><srcstatus/><internalId>301</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10004</srcid><srcstatus/><internalId>302</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10023</srcid><srcstatus/><internalId>311</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10029</srcid><srcstatus/><internalId>319</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10021</srcid><srcstatus/><internalId>341</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10020</srcid><srcstatus/><internalId>342</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10027</srcid><srcstatus/><internalId>345</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10024</srcid><srcstatus/><internalId>350</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10016</srcid><srcstatus/><internalId>359</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations><ruleid>WRN.tsc.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>117</internalId></specobject>

    <specobject>
      <id>CAN080</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Development error values are of type uint8.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>118</internalId></specobject>

    <specobject>
      <id>CAN082</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The detection of development errors is configurable (ON / OFF) at precompile
        time. The switch CanDevErrorDetection (see chapter 10) shall activate or
        deactivate the detection of all development errors.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_00001</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>119</internalId></specobject>

    <specobject>
      <id>CAN083</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If the CanDevErrorDetection switch is enabled API parameter checking is enabled.
        The detailed Description of the detected errors can be found in chapter
        7.10.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10018</srcid><srcstatus/><internalId>291</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10017</srcid><srcstatus/><internalId>293</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10014</srcid><srcstatus/><internalId>294</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10022</srcid><srcstatus/><internalId>297</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10001</srcid><srcstatus/><internalId>309</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10023</srcid><srcstatus/><internalId>311</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10015</srcid><srcstatus/><internalId>325</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10019</srcid><srcstatus/><internalId>340</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10021</srcid><srcstatus/><internalId>341</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10024</srcid><srcstatus/><internalId>350</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10002</srcid><srcstatus/><internalId>358</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10016</srcid><srcstatus/><internalId>359</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations><ruleid>WRN.tsc.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>120</internalId></specobject>

    <specobject>
      <id>CAN084</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The detection of production code errors cannot be switched off.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>121</internalId></specobject>

    <specobject>
      <id>CAN027</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Detected development errors shall be reported to the Det_ReportError service of
        the Development Error Tracer (DET) if the pre-processor switch
        CanDevErrorDetection is set (see chapter 10).
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10018</srcid><srcstatus/><internalId>291</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10017</srcid><srcstatus/><internalId>293</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10014</srcid><srcstatus/><internalId>294</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10022</srcid><srcstatus/><internalId>297</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10008</srcid><srcstatus/><internalId>298</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10026</srcid><srcstatus/><internalId>301</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10004</srcid><srcstatus/><internalId>302</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10007</srcid><srcstatus/><internalId>303</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10001</srcid><srcstatus/><internalId>309</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10023</srcid><srcstatus/><internalId>311</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10025</srcid><srcstatus/><internalId>315</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10029</srcid><srcstatus/><internalId>319</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10015</srcid><srcstatus/><internalId>325</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10013</srcid><srcstatus/><internalId>328</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10003</srcid><srcstatus/><internalId>337</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10005</srcid><srcstatus/><internalId>338</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10019</srcid><srcstatus/><internalId>340</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10021</srcid><srcstatus/><internalId>341</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10020</srcid><srcstatus/><internalId>342</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10027</srcid><srcstatus/><internalId>345</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10006</srcid><srcstatus/><internalId>348</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10024</srcid><srcstatus/><internalId>350</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10002</srcid><srcstatus/><internalId>358</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10016</srcid><srcstatus/><internalId>359</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations><ruleid>WRN.tsc.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>122</internalId></specobject>

    <specobject>
      <id>CAN424</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        No code for catching development errors shall be generated, when development
        errors are switched off.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>123</internalId></specobject>

    <specobject>
      <id>CAN111</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The CAN module shall perform Inter Module Checks to avoid integration of
        incompatible files. The imported included files shall be checked by
        preprocessing directives.
      </description><releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>124</internalId></specobject>

    <specobject>
      <id>CAN365</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Each variable that shall be accessible by AUTOSAR Debugging, shall be defined as
        global variable.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>125</internalId></specobject>

    <specobject>
      <id>CAN366</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        All type definitions of variables which shall be debugged, shall be accessible
        by the header file Can.h.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>126</internalId></specobject>

    <specobject>
      <id>CAN367</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The declaration of variables in the header file shall be such, that it is
        possible to calculate the size of the variables by C-"sizeof" operation.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>127</internalId></specobject>

    <specobject>
      <id>CAN222</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Module          Imported Type
        CanIf           CanIf_ControllerModeType
        ComStack_Types  PduIdType
        Dem             Dem_EventIdType
                        Dem_EventStatusType
        EcuM            EcuM_WakeupSourceType
        Os              CounterType
                        StatusType
                        TickRefType
        Std_Types       Std_ReturnType 
                        Std_VersionInfoType 
      </description>
      <comment>
        This is a requirement on the included header files, not on CAN.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NoRequirementsOnCan</srcid><srcstatus/><internalId>282</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>128</internalId></specobject>

    <specobject>
      <id>CAN413</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name:         Can_ConfigType
        Type:         Structure
        Range:        Implementation specific.
        Description:  This is the type of the external data structure containing the
                      overall initialization data for the CAN driver and SFR settings
                      affecting all controllers. Furthermore it contains pointers to
                      controller configuration structures. The contents of the
                      initialization data structure are CAN hardware specific.
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>129</internalId></specobject>

    <specobject>
      <id>CAN414</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name:         Can_ControllerBaudrateConfigType
        Type:         Structure
        Range:        Implementation specific.
        Description:  This is the type of the external data structure containing
                      the bit timing related initialization data for one CAN
                      controller. The contents of the initialization data structure
                      are CAN hardware specific.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>130</internalId></specobject>

    <specobject>
      <id>CAN415</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name:         Can_PduType
        Type:         Structure
        Element:      PduIdType   swPduHandle  --
                      uint8       length       --
                      Can_IdType  id           --
                      uint8*      sdu          --
        Description:  This type is used to provide ID, DLC and SDU
                      from CAN interface to CAN driver.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>131</internalId></specobject>

    <specobject>
      <id>CAN416</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name:         Can_IdType
        Type:         uint16, uint32
        Range:        Standard  --  0..0x7FF
                      Extended  --  0..0xFFFFFFFF
        Description:  Represents the Identifier of an L-PDU. 
                      For extended IDs the most significant bit is set.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>132</internalId></specobject>

    <specobject>
      <id>CAN429</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name:         Can_HwHandleType
        Type:         uint8, uint16
        Range:        Standard  --  0..0x0FF
                      Extended  --  0..0xFFFF
        Description:  Represents the hardware object handles of a CAN
                      hardware unit. For CAN  hardware units with more
                      than 255 HW objects use extended range.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>133</internalId></specobject>

    <specobject>
      <id>CAN417</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name:         Can_StateTransitionType
        Type:         Enumeration
        Range:        CAN_T_START  CAN controller transition value to request state STARTED.
                      CAN_T_STOP   CAN controller transition value to request state STOPPED.
                      CAN_T_SLEEP  CAN controller transition value to request state SLEEP.
                      CAN_T_WAKEUP CAN controller transition value to request state STOPPED
                                   from state SLEEP.
        Description:  State transitions that are used by the function
                      CAN_SetControllerMode.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>134</internalId></specobject>

    <specobject>
      <id>CAN039</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name:         Can_ReturnType
        Type:         Enumeration
        Range:        CAN_OK     success
                      CAN_NOT_OK error occurred or wakeup event occurred during sleep transition
                      CAN_BUSY   transmit request could not be processed because no transmit
                                 object was available
        Description:  Return values of CAN driver API.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>135</internalId></specobject>

    <specobject>
      <id>CAN223</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Service name:       Can_Init
        Syntax:             void Can_Init(
                                const Can_ConfigType* Config
                            )
        Service ID[hex]:    0x00
        Sync/Async:         Synchronous
        Reentrancy:         Non Reentrant
        Parameters (in):    Config  Pointer to driver configuration. 
        Parameters (inout): None
        Parameters (out):   None
        Return value:       None
        Description:        This function initializes the module. 
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10001</srcid><srcstatus/><internalId>309</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00001</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>136</internalId></specobject>

    <specobject>
      <id>CAN174</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If development error detection for the Can module is enabled: The function
        Can_Init shall raise the error CAN_E_TRANSITION if the driver is not in
        state CAN_UNINIT.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10013</srcid><srcstatus/><internalId>328</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>137</internalId></specobject>

    <specobject>
      <id>CAN408</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If development error detection for the Can module is enabled: The function
        Can_Init shall raise the error CAN_E_TRANSITION if the CAN controllers
        are not in state UNINIT.
      </description>
      <comment>
        There is no underlying Can Hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>138</internalId></specobject>

    <specobject>
      <id>CAN175</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If development error detection for the Can module is enabled: The function
        Can_Init shall raise the error CAN_E_PARAM_POINTER if a NULL pointer was
        given as config parameter.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10001</srcid><srcstatus/><internalId>309</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>139</internalId></specobject>

    <specobject>
      <id>CAN224</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Service name:       Can_GetVersionInfo
        Syntax:             void Can_GetVersionInfo(
                                Std_VersionInfoType* versioninfo
                            )
        Service ID[hex]:    0x07
        Sync/Async:         Synchronous
        Reentrancy:         Non Reentrant
        Parameters (in):    None
        Parameters (inout): None
        Parameters (out):   versioninfo  Pointer to where to store
                                         the version information of this module.
        Return value:       None
        Description:        This function returns the version information of this module. 
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_00001</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>140</internalId></specobject>

    <specobject>
      <id>CAN105</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_GetVersionInfo shall return the version information of
        this module. The version information includes:
        - Module Id
        - Vendor Id
        - Vendor specific version numbers (BSW00407).
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10301</srcid><srcstatus/><internalId>339</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>141</internalId></specobject>

    <specobject>
      <id>CAN251</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If source code for caller and callee is available, the function
        Can_GetVersionInfo should be realized as a macro, defined in the Can
        module’s header file.
      </description>
      <comment>
        The callee cannot determine if the caller is available as source code.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.VersionInfoIsFunction</srcid><srcstatus/><internalId>280</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>142</internalId></specobject>

    <specobject>
      <id>CAN177</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If development error detection for the Can module is enabled: The function
        Can_GetVersionInfo shall raise the error CAN_E_PARAM_POINTER if the
        parameter versionInfo is a null pointer.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10002</srcid><srcstatus/><internalId>358</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>143</internalId></specobject>

    <specobject>
      <id>CAN252</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_GetVersionInfo shall be pre compile time configurable (On/Off)
        by the configuration parameter: CanVersionInfoApi.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_00001</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>144</internalId></specobject>

    <specobject>
      <id>CAN229</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Service name:       Can_InitController
        Syntax:             void Can_InitController(
                                uint8 Controller,
                                const Can_ControllerBaudrateConfigType* Config
                            )
        Service ID[hex]:    0x02
        Sync/Async:         Synchronous
        Reentrancy:         Non Reentrant 
        Parameters (in):    Controller  CAN controller to be initialized
                            Config      --
        Parameters (inout): None
        Parameters (out):   None
        Return value:       None
        Description:        This function initializes the bit timing related settings of
                            a CAN controller.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_00001</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>145</internalId></specobject>

    <specobject>
      <id>CAN187</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If development error detection for the Can module is enabled: The function
        Can_InitController shall raise the error CAN_E_UNINIT if the driver is
        not yet initialized.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10003</srcid><srcstatus/><internalId>337</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_20001</srcid><srcstatus/><internalId>357</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>146</internalId></specobject>

    <specobject>
      <id>CAN188</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If development error detection for the Can module is enabled: The function
        Can_InitController shall raise the error CAN_E_PARAM_POINTER if the
        parameter Config is an null pointer
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10014</srcid><srcstatus/><internalId>294</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>147</internalId></specobject>

    <specobject>
      <id>CAN189</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If development error detection for the Can module is enabled: The function
        Can_InitController shall raise the error CAN_E_PARAM_CONTROLLER if the
        parameter Controller is out of range.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10015</srcid><srcstatus/><internalId>325</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>148</internalId></specobject>

    <specobject>
      <id>CAN190</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If development error detection for the Can module is enabled: if the controller
        is not in state STOPPED, the function Can_InitController shall raise the
        error CAN_E_TRANSITION.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10025</srcid><srcstatus/><internalId>315</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>149</internalId></specobject>

    <specobject>
      <id>CAN230</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Service name:       Can_SetControllerMode
        Syntax:             Can_ReturnType Can_SetControllerMode(
                                uint8 Controller,
                                Can_StateTransitionType Transition
                            )
        Service ID[hex]:    0x03
        Sync/Async:         Asynchronous 
        Reentrancy:         Non Reentrant
        Parameters (in):    Controller      CAN controller for which the status
                                            shall be changed
                            Transition      Transition value to request new CAN
                                            controller state
        Parameters (inout): None
        Parameters (out):   None
        Return value:       Can_ReturnType  CAN_OK:     request accepted
                                            CAN_NOT_OK: request not accepted,
                                                        a development error occurred
        Description:        This function performs software triggered state transitions
                            of the CAN controller  State machine.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_00001</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>150</internalId></specobject>

    <specobject>
      <id>CAN017</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_SetControllerMode shall perform software triggered state
        transitions of the CAN controller State machine. See also [BSW12169].
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_20005</srcid><srcstatus/><internalId>288</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_20003</srcid><srcstatus/><internalId>289</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_20002</srcid><srcstatus/><internalId>308</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_20006</srcid><srcstatus/><internalId>318</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_20004</srcid><srcstatus/><internalId>333</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_20001</srcid><srcstatus/><internalId>357</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>151</internalId></specobject>

    <specobject>
      <id>CAN384</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Each time the CAN controller state machine is triggered with the state
        transition value CAN_T_START, the function Can_SetControllerMode shall
        reinitialize the CAN controller with the same controller configuration
        set previously used by functions Can_InitController or Can_Init.
      </description>
      <comment>
        There is no underlying CAN hardware and thus no delay for a state change.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>152</internalId></specobject>

    <specobject>
      <id>CAN294</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_SetControllerMode shall disable the wake-up interrupt, while
        checking the wake-up status.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.SleepWakeup</srcid><srcstatus/><internalId>274</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>153</internalId></specobject>

    <specobject>
      <id>CAN196</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_SetControllerMode shall enable interrupts that are needed in
        the new state.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>154</internalId></specobject>

    <specobject>
      <id>CAN425</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Enabling of CAN interrupts shall not be executed, when CAN interrupts have been
        disabled by function Can_DisableControllerInterrupts.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>155</internalId></specobject>

    <specobject>
      <id>CAN197</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_SetControllerMode shall disable interrupts that are not allowed
        in the new state.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>156</internalId></specobject>

    <specobject>
      <id>CAN426</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Disabling of CAN interrupts shall not be executed, when CAN interrupts have been
        disabled by function Can_DisableControllerInterrupts.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>157</internalId></specobject>

    <specobject>
      <id>CAN198</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If development error detection for the Can module is enabled: if the module is
        not yet initialized, the function Can_SetControllerMode shall raise
        development error CAN_E_UNINIT and return CAN_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10004</srcid><srcstatus/><internalId>302</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>158</internalId></specobject>

    <specobject>
      <id>CAN199</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If development error detection for the Can module is enabled: if the parameter
        Controller is out of range, the function Can_SetControllerMode shall
        raise development error CAN_E_PARAM_CONTROLLER and return CAN_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10016</srcid><srcstatus/><internalId>359</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>159</internalId></specobject>

    <specobject>
      <id>CAN200</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If development error detection for the Can module is enabled: if an invalid
        transition has been requested, the function Can_SetControllerMode shall
        raise the error CAN_E_TRANSITION and return CAN_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10026</srcid><srcstatus/><internalId>301</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10029</srcid><srcstatus/><internalId>319</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10020</srcid><srcstatus/><internalId>342</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10027</srcid><srcstatus/><internalId>345</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>160</internalId></specobject>

    <specobject>
      <id>CAN231</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Service name:       Can_DisableControllerInterrupts
        Syntax:             void Can_DisableControllerInterrupts(
                                uint8 Controller
                            )
        Service ID[hex]:    0x04
        Sync/Async:         Synchronous
        Reentrancy:         Reentrant
        Parameters (in):    Controller  CAN controller for which interrupts shall be disabled.
        Parameters (inout): None
        Parameters (out):   None
        Return value:       None
        Description:        This function disables all interrupts for this CAN controller.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_00001</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>161</internalId></specobject>

    <specobject>
      <id>CAN049</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_DisableControllerInterrupts shall access the CAN controller
        registers to disable all interrupts for that CAN controller only, if
        interrupts for that CAN Controller are enabled.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10702</srcid><srcstatus/><internalId>326</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10703</srcid><srcstatus/><internalId>346</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>162</internalId></specobject>

    <specobject>
      <id>CAN202</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        When Can_DisableControllerInterrupts has been called several times,
        Can_EnableControllerInterrupts must be called as many times before the
        interrupts are re-enabled.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10704</srcid><srcstatus/><internalId>314</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>163</internalId></specobject>

    <specobject>
      <id>CAN204</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module shall track all individual enabling and disabling of interrupts
        in other functions (i.e. Can_SetControllerMode) , so that the correct
        interrupt enable state can be restored.
      </description>
      <comment>
        No interrupts are enabled / disabled in other functions.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/Can.c_517</srcid><srcstatus/><internalId>285</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/Can.c_569</srcid><srcstatus/><internalId>286</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>164</internalId></specobject>

    <specobject>
      <id>CAN205</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If development error detection for the Can module is enabled: The function
        Can_DisableControllerInterrupts shall raise the error CAN_E_UNINIT if the
        driver not yet initialized.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10005</srcid><srcstatus/><internalId>338</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>165</internalId></specobject>

    <specobject>
      <id>CAN206</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If development error detection for the Can module is enabled:
        The function Can_DisableControllerInterrupts shall raise the error
        CAN_E_PARAM_CONTROLLER if the parameter Controller is out of range.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10017</srcid><srcstatus/><internalId>293</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>166</internalId></specobject>

    <specobject>
      <id>CAN232</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Service name:       Can_EnableControllerInterrupts
        Syntax:             void Can_EnableControllerInterrupts(
                                uint8 Controller
                            )
        Service ID[hex]:    0x05
        Sync/Async:         Synchronous
        Reentrancy:         Reentrant
        Parameters (in):    Controller  CAN controller for which interrupts shall be re-enabled
        Parameters (inout): None
        Parameters (out):   None
        Return value:       None
        Description:        This function enables all allowed interrupts.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_00001</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>167</internalId></specobject>

    <specobject>
      <id>CAN050</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_EnableControllerInterrupts shall enable all interrupts that
        must be enabled according the current software status.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10702</srcid><srcstatus/><internalId>326</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10703</srcid><srcstatus/><internalId>346</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>168</internalId></specobject>

    <specobject>
      <id>CAN208</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_EnableControllerInterrupts shall perform no action when
        Can_DisableControllerInterrupts has not been called before.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10701</srcid><srcstatus/><internalId>300</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>169</internalId></specobject>

    <specobject>
      <id>CAN209</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If development error detection for the Can module is enabled: The function
        Can_EnableControllerInterrupts shall raise the error CAN_E_UNINIT if the
        driver not yet initialized.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10006</srcid><srcstatus/><internalId>348</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>170</internalId></specobject>

    <specobject>
      <id>CAN210</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If development error detection for the Can module is enabled: The function
        Can_EnableControllerInterrupts shall raise the error
        CAN_E_PARAM_CONTROLLER if the parameter Controller is out of range.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10018</srcid><srcstatus/><internalId>291</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>171</internalId></specobject>

    <specobject>
      <id>CAN360</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Service name:       Can_CheckWakeup
        Syntax:             Can_ReturnType Can_CheckWakeup(
                                uint8 Controller
                            )
        Service ID[hex]:    0x0b
        Sync/Async:         Synchronous
        Reentrancy:         Non Reentrant
        Parameters (in):    Controller      Controller to be for a wakeup.
        Parameters (inout): None
        Parameters (out):   None
        Return value:       Can_ReturnType  CAN_OK:     A wakeup was detected for
                                                        the given controller.
                                            CAN_NOT_OK: No wakeup was detected for
                                                        the given controller.
        Description:        This function checks if a wakeup has occurred
                            for the given controller.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_00001</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>172</internalId></specobject>

    <specobject>
      <id>CAN361</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_CheckWakeup shall check if the requested CAN controller has
        detected a wakeup. If a wakeup event was successfully detected since the
        last go to SLEEP, the function shall return CAN_OK, otherwise CAN_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10302</srcid><srcstatus/><internalId>295</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10007</srcid><srcstatus/><internalId>303</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>173</internalId></specobject>

    <specobject>
      <id>CAN362</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If development error detection for the Can module is enabled: The function
        Can_CheckWakeup shall raise the error CAN_E_UNINIT if the driver is not
        yet initialized.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10007</srcid><srcstatus/><internalId>303</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>174</internalId></specobject>

    <specobject>
      <id>CAN363</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If development error detection for the Can module is enabled: The function
        Can_CheckWakeup shall raise the error CAN_E_PARAM_CONTROLLER if the
        parameter Controller is out of range.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10019</srcid><srcstatus/><internalId>340</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>175</internalId></specobject>

    <specobject>
      <id>CAN233</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Service name:       Can_Write
        Syntax:             Can_ReturnType Can_Write(
                                Can_HwHandleType Hth,
                                const Can_PduType* PduInfo
                            )
        Service ID[hex]:    0x06
        Sync/Async:         Synchronous
        Reentrancy:         Reentrant (thread-safe)
        Parameters (in):    Hth             information which HW-transmit handle shall be
                                            used for transmit. Implicitly this is also
                                            the information about the controller to use because
                                            the Hth numbers are unique inside one hardware unit.
                            PduInfo         Pointer to SDU user memory, DLC and Identifier.
        Parameters (inout): None
        Parameters (out):   None
        Return value:       Can_ReturnType  CAN_OK:     Write command has been accepted
                                            CAN_NOT_OK: development error occurred
                                            CAN_BUSY:   No TX hardware buffer available
                                                        or pre-emptive call of Can_Write
                                                        that can't be implemented re-entrant
        Description:        --
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10008</srcid><srcstatus/><internalId>298</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00001</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>176</internalId></specobject>

    <specobject>
      <id>CAN212</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_Write shall perform following actions if the hardware transmit
        object is free:
        - The mutex for that HTH is set to 'signaled'
        - The ID, DLC and SDU are put in a format appropriate for the hardware
          (if necessary) and copied in the appropriate hardware registers/buffers.
        - All necessary control operations to initiate the transmit are done.
        - The mutex for that HTH is released.
        - The function returns with CAN_OK.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10204</srcid><srcstatus/><internalId>306</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10402</srcid><srcstatus/><internalId>352</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>177</internalId></specobject>

    <specobject>
      <id>CAN213</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_Write shall perform no actions if the hardware transmit object
        is busy with another transmit request for an L-PDU that has higher
        priority than that for the current request:
        - The transmission of the L-PDU with higher priority shall not be cancelled and
          the function Can_Write is left without any actions.
        - The function Can_Write shall return CAN_BUSY.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10205</srcid><srcstatus/><internalId>355</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>178</internalId></specobject>

    <specobject>
      <id>CAN215</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_Write shall perform following actions if the hardware transmit
        object is busy with another transmit request for an L-PDU that has lower
        priority than that for the current request:
        - The transmission of the L-PDU with lower priority shall be cancelled 
          (asynchronously) in case transmit cancellation functionality is enabled.
          Compare  to chapter 7.5.1.2.
        - The function CAN_Write shall return CAN_BUSY.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10205</srcid><srcstatus/><internalId>355</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>179</internalId></specobject>

    <specobject>
      <id>CAN434</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_Write shall perform following actions if the hardware transmit
        object is busy with another transmit request for an L-PDU that has
        identical priority than that for the current request:
        - The transmission of the L-PDU with identical priority shall be cancelled 
          (asynchronously) in case CanIdenticalIdCancellation is enabled. Compare
          to chapter 7.5.1.2.
        - The transmission of the L-PDU with identical priority shall not be cancelled
          in case CanIdenticalIdCancellation is disabled and the function Can_Write
          is left without any actions.
        - The function CAN_Write shall return CAN_BUSY.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>180</internalId></specobject>

    <specobject>
      <id>CAN214</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_Write shall return CAN_BUSY if a preemptive call of Can_Write
        has been issued, that could not be handled reentrant (i.e. a call with
        the same HTH).
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10404</srcid><srcstatus/><internalId>296</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10207</srcid><srcstatus/><internalId>307</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10403</srcid><srcstatus/><internalId>324</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10206</srcid><srcstatus/><internalId>343</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>181</internalId></specobject>

    <specobject>
      <id>CAN275</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_Write shall be non-blocking.
      </description>
      <comment>
        The underlying Windows-API is blocking.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.TimingParams</srcid><srcstatus/><internalId>277</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>182</internalId></specobject>

    <specobject>
      <id>CAN216</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If development error detection for the Can module is enabled: The function
        Can_Write shall raise the error CAN_E_UNINIT and shall return CAN_NOT_OK
        if the driver is not yet initialized.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10008</srcid><srcstatus/><internalId>298</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>183</internalId></specobject>

    <specobject>
      <id>CAN217</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If development error detection for the Can module is enabled: The function
        Can_Write shall raise the error CAN_E_PARAM_HANDLE and shall return
        CAN_NOT_OK if the parameter Hth is not a configured Hardware Transmit
        Handle.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10021</srcid><srcstatus/><internalId>341</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>184</internalId></specobject>

    <specobject>
      <id>CAN218</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If development error detection for the Can module is enabled: The function
        Can_Write shall raise the error CAN_E_PARAM_DLC and shall return
        CAN_NOT_OK if the length is more than 8 byte.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10022</srcid><srcstatus/><internalId>297</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>185</internalId></specobject>

    <specobject>
      <id>CAN219</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If development error detection for the Can module is enabled: The function
        Can_Write shall raise the error CAN_E_PARAM_POINTER and shall return
        CAN_NOT_OK if the parameter PduInfo or the SDU pointer inside PduInfo is
        a nullpointer.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10023</srcid><srcstatus/><internalId>311</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10024</srcid><srcstatus/><internalId>350</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>186</internalId></specobject>

    <specobject>
      <id>CAN443</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The L-PDU-Callout API shall be defined as:
        FUNC(boolean, COM_APPL_CODE) &lt;LPDU_CalloutName&gt;
        (
            uint8 Hrh,
            Can_IdType CanId,
            uint8 CanDlc,
            const uint8 *CanSduPtr
        )
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10601</srcid><srcstatus/><internalId>292</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>187</internalId></specobject>

    <specobject>
      <id>CAN444</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If the L-PDU callout returns false, the L-PDU shall not be processed any
        further.
      </description>
      <comment>
        This is not a requirement no the CAN module.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NoRequirementsOnCan</srcid><srcstatus/><internalId>282</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>188</internalId></specobject>

    <specobject>
      <id>CAN431</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If these main functions are called from the BSW Scheduler and the Can module is
        not initialized, then it shall return immediately without performing any
        functionality and without raising a production error.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>189</internalId></specobject>

    <specobject>
      <id>CAN110</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        There is no requirement regarding the execution order of the CAN main processing
        functions.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>190</internalId></specobject>

    <specobject>
      <id>CAN225</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Service name:     Can_MainFunction_Write
        Syntax:           void Can_MainFunction_Write(
                              void
                          )
        Service ID[hex]:  0x01
        Timing:           FIXED_CYCLIC
        Description:      This function performs the polling of TX confirmation and TX
                          cancellation confirmation when CAN_TX_PROCESSING is set to POLLING.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_00001</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>191</internalId></specobject>

    <specobject>
      <id>CAN031</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_MainFunction_Write shall perform the polling of TX confirmation
        and TX cancellation confirmation when CanTxProcessing is set to POLLING.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10401</srcid><srcstatus/><internalId>317</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10203</srcid><srcstatus/><internalId>354</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>192</internalId></specobject>

    <specobject>
      <id>CAN178</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module may implement the function Can_MainFunction_Write as empty define
        in case no polling at all is used.
      </description>
      <comment>
        The function is not implemented as empty.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.MainFunctionsAreFunctions</srcid><srcstatus/><internalId>281</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>193</internalId></specobject>

    <specobject>
      <id>CAN179</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If development error detection for the module Can is enabled: The function
        Can_MainFunction_Write shall raise the error CAN_E_UNINIT if the driver
        is not yet initialized.
      </description>
      <comment>
        MainFunctions shall not raise a DET error if the module is not yet
        initialized (see ASCCB-1403).
        </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.DetFromMainFunction</srcid><srcstatus/><internalId>278</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>194</internalId></specobject>

    <specobject>
      <id>CAN441</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The API name of Can_MainFunction_Write() shall obey the following pattern:
        - Can_MainFunction_Wrtte_0()
        - Can_MainFunction_Write_1()
        - Can_MainFunction_Write_2()
        - Can_MainFunction_Write_3()
        - ... and so on, if more than one period (see CAN356_Conf) is supported.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>195</internalId></specobject>

    <specobject>
      <id>CAN226</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Service name:     Can_MainFunction_Read
        Syntax:           void Can_MainFunction_Read(
                              void
                          )
        Service ID[hex]:  0x08
        Timing:           FIXED_CYCLIC
        Description:      This function performs the polling of RX indications when
                          CAN_RX_PROCESSING is set to POLLING.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_00001</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>196</internalId></specobject>

    <specobject>
      <id>CAN108</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_MainFunction_Read shall perform the polling of RX indications
        when CanRxProcessing is set to POLLING.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10503</srcid><srcstatus/><internalId>290</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10502</srcid><srcstatus/><internalId>305</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10506</srcid><srcstatus/><internalId>320</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10504</srcid><srcstatus/><internalId>332</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10501</srcid><srcstatus/><internalId>361</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>197</internalId></specobject>

    <specobject>
      <id>CAN180</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module may implement the function Can_MainFunction_Read as empty define
        in case no polling at all is used.
      </description>
      <comment>
        The function is not implemented as empty.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.MainFunctionsAreFunctions</srcid><srcstatus/><internalId>281</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>198</internalId></specobject>

    <specobject>
      <id>CAN181</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If development error detection for the Can module is enabled: The function
        Can_MainFunction_Read shall raise the error CAN_E_UNINIT if the driver is
        not yet initialized.
      </description>
      <comment>
        MainFunctions shall not raise a DET error if the module is not yet
        initialized (see ASCCB-1403).
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.DetFromMainFunction</srcid><srcstatus/><internalId>278</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>199</internalId></specobject>

    <specobject>
      <id>CAN442</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The API name of Can_MainFunction_Read() shall obey the following pattern:
        - Can_MainFunction_Read_0()
        - Can_MainFunction_Read_2()
        - Can_MainFunction_Read_3()
        - ... and so on, if more than one period (see CAN358_Conf) is supported.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>200</internalId></specobject>

    <specobject>
      <id>CAN227</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Service name:     Can_MainFunction_BusOff
        Syntax:           void Can_MainFunction_BusOff(
                              void
                          )
        Service ID[hex]:  0x09
        Timing:           FIXED_CYCLIC
        Description:      This function performs the polling of bus-off events
                          that are configured statically as 'to be polled'.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10303</srcid><srcstatus/><internalId>313</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00001</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>201</internalId></specobject>

    <specobject>
      <id>CAN109</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_MainFunction_BusOff shall perform the polling of bus-off events
        that are configured statically as 'to be polled'.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.BusOff</srcid><srcstatus/><internalId>275</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>202</internalId></specobject>

    <specobject>
      <id>CAN183</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module may implement the function Can_MainFunction_BusOff as empty
        define in case no polling at all is used.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>203</internalId></specobject>

    <specobject>
      <id>CAN184</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If development error detection for the Can module is enabled: The function
        Can_MainFunction_BusOff shall raise the error CAN_E_UNINIT if the driver
        is not yet initialized.
      </description>
      <comment>
        MainFunctions shall not raise a DET error if the module is not yet
        initialized (see ASCCB-1403).
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.DetFromMainFunction</srcid><srcstatus/><internalId>278</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>204</internalId></specobject>

    <specobject>
      <id>CAN228</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Service name:     Can_MainFunction_Wakeup
        Syntax:           void Can_MainFunction_Wakeup(
                              void
                          )
        Service ID[hex]:  0x0a
        Timing:           FIXED_CYCLIC
        Description:      This function performs the polling of wake-up events
                          that are configured statically as 'to be polled'.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_00001</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10304</srcid><srcstatus/><internalId>347</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>205</internalId></specobject>

    <specobject>
      <id>CAN112</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_MainFunction_Wakeup shall perform the polling of wakeup events
        that are configured statically as 'to be polled'.
      </description>
      <comment>
        Wakeup is not supported.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.SleepWakeup</srcid><srcstatus/><internalId>274</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>206</internalId></specobject>

    <specobject>
      <id>CAN185</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The Can module may implement the function Can_MainFunction_Wakeup as empty
        define in case no polling at all is used.
      </description>
      <comment>
        Polling is supported.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.MainFunctionsAreFunctions</srcid><srcstatus/><internalId>281</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>207</internalId></specobject>

    <specobject>
      <id>CAN186</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If development error detection for the Can module is enabled: The function
        Can_MainFunction_Wakeup shall raise the error CAN_E_UNINIT if the driver
        is not yet initialized.
      </description>
      <comment>
        MainFunctions shall not raise a DET error if the module is not yet
        initialized (see ASCCB-1403).
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.DetFromMainFunction</srcid><srcstatus/><internalId>278</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>208</internalId></specobject>

    <specobject>
      <id>CAN368</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Service name:     Can_MainFunction_Mode
        Syntax:           void Can_MainFunction_Mode(
                              void
                          )
        Service ID[hex]:  0x0c
        Timing:           FIXED_CYCLIC
        Description:      This function performs the polling of CAN controller
                          mode transitions.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>209</internalId></specobject>

    <specobject>
      <id>CAN369</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The function Can_MainFunction_Mode shall implement the polling of CAN status
        register flags to detect transition of CAN Controller state. Compare to
        chapter 7.3.2.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>210</internalId></specobject>

    <specobject>
      <id>CAN379</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        If development error detection for the Can module is enabled: The function
        Can_MainFunction_Mode shall raise the error CAN_E_UNINIT if the driver is
        not yet initialized.
      </description>
      <comment>
        MainFunctions shall not raise a DET error if the module is not yet
        initialized (see ASCCB-1403).
        </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.DetFromMainFunction</srcid><srcstatus/><internalId>278</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>211</internalId></specobject>

    <specobject>
      <id>CAN234</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        API function                    Description
        CanIf_ControllerBusOff          This service indicates a Controller BusOff event
                                        referring to the corresponding CAN Controller.
        CanIf_ControllerModeIndication  This service indicates a controller state transition
                                        referring to the corresponding CAN controller.
        CanIf_RxIndication              This service indicates a successful reception of a
                                        received CAN Rx L PDU to the CanIf after passing all
                                        filters and validation checks.
        CanIf_TxConfirmation            This service confirms a previously successfully
                                        processed transmission of a CAN TxPDU.
        GetCounterValue                 This service reads the current count value of a counter
                                        (returning either the hardware timer ticks if counter
                                        is driven by hardware or the  software ticks when user
                                        drives counter).
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10701</srcid><srcstatus/><internalId>300</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10501</srcid><srcstatus/><internalId>361</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>212</internalId></specobject>

    <specobject>
      <id>CAN235</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        API function                Description
        CanIf_CancelTxConfirmation  This service confirms a previously successfully performed
                                    cancellation of a pending Tx L-PDU transmit request.
        Dem_ReportErrorStatus       Queues the reported events from the BSW modules (API is
                                    only used by BSW modules). The interface has an asynchronous
                                    behavior, because the processing of the event is done
                                    within the Dem main function.
        Det_ReportError             Service to report development errors.
        EcuM_CheckWakeup            This callout is called by the EcuM to poll a wakeup source.
                                    It shall also be called by the ISR of a wakeup source to
                                    set up the PLL and check other wakeup sources that may be
                                    connected to the same interrupt.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10018</srcid><srcstatus/><internalId>291</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10017</srcid><srcstatus/><internalId>293</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10014</srcid><srcstatus/><internalId>294</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10022</srcid><srcstatus/><internalId>297</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10008</srcid><srcstatus/><internalId>298</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10026</srcid><srcstatus/><internalId>301</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10004</srcid><srcstatus/><internalId>302</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10007</srcid><srcstatus/><internalId>303</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10001</srcid><srcstatus/><internalId>309</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10023</srcid><srcstatus/><internalId>311</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10025</srcid><srcstatus/><internalId>315</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10029</srcid><srcstatus/><internalId>319</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10015</srcid><srcstatus/><internalId>325</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10013</srcid><srcstatus/><internalId>328</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10003</srcid><srcstatus/><internalId>337</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10005</srcid><srcstatus/><internalId>338</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10019</srcid><srcstatus/><internalId>340</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10021</srcid><srcstatus/><internalId>341</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10020</srcid><srcstatus/><internalId>342</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10027</srcid><srcstatus/><internalId>345</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10006</srcid><srcstatus/><internalId>348</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10024</srcid><srcstatus/><internalId>350</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10002</srcid><srcstatus/><internalId>358</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10016</srcid><srcstatus/><internalId>359</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NoHardwareCencellation</srcid><srcstatus/><internalId>283</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations><ruleid>WRN.tsc.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>213</internalId></specobject>

    <specobject>
      <id>CAN022</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The code configuration of the Can module is CAN controller specific. If the CAN
        controller is sited on-chip, the code generation tool for the Can module
        is µController specific. If the CAN controller is an external device,
        the generation tool must not be µController specific.
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>214</internalId></specobject>

    <specobject>
      <id>CAN047</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The configuration data shall be human readable.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>man</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>man.Can.ReviewGuideline</srcid><srcstatus/><internalId>273</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>215</internalId></specobject>

    <specobject>
      <id>CAN024</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        The valid values that can be configured are hardware dependent. Therefore the
        rules and constraints can't be given in the standard. The configuration
        tool is responsible to do a static configuration checking, also regarding
        dependencies between modules (i.e. Port driver, MCU driver etc.)
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>216</internalId></specobject>

    <specobject>
      <id>CAN220</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        VARIANT-PRE-COMPILE: Only pre-compile configuration parameters.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_00001</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>217</internalId></specobject>

    <specobject>
      <id>CAN221</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        VARIANT-POST-BUILD: Mix of pre compile- and post build time configuration
        parameters.
      </description>
      <comment>Post-Build is not supported.</comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NoPostBuild</srcid><srcstatus/><internalId>279</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>218</internalId></specobject>

    <specobject>
      <id>CAN328_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Container Name            CanGeneral{CanDriverGeneralConfiguration}
        Description               This container contains the parameters related
                                  each CAN Driver Unit.
        Configuration Parameters
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_00001</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>219</internalId></specobject>

    <specobject>
      <id>CAN064_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanDevErrorDetection {CAN_DEV_ERROR_DETECT}
        Description         Switches the Development Error Detection and Notification ON or OFF.
        Multiplicity        1
        Type                EcucBooleanParamDef
        Default value       --
        ConfigurationClass  Pre-compile time  X  All Variants
                            Link time         --
                            Post-build time   --
        Scope/Dependency    scope:            Can module
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_00001</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>220</internalId></specobject>

    <specobject>
      <id>CAN069_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanHardwareCancellation {CAN_HW_TRANSMIT_CANCELLATION}
        Description         Specifies if hardware cancellation shall be supported.ON or OFF.
        Multiplicity        1
        Type                EcucBooleanParamDef
        Default value       --
        ConfigurationClass  Pre-compile time  X  All Variants
                            Link time         --
                            Post-build time   --
        Scope/Dependency    scope:            Can module, CanIf module
                            dependency:       CanIf module is configured to support hardware
                                              cancellation
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NumOfBusses</srcid><srcstatus/><internalId>276</internalId></linkedfrom><linkedfrom><srcid>dev.Can.NoHardwareCencellation</srcid><srcstatus/><internalId>283</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>221</internalId></specobject>

    <specobject>
      <id>CAN378_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanIdenticalIdCancellation {CAN_IDENTICAL_ID_CANCELLATION}
        Description         Enables/disables cancellation of pending PDUs with identical ID.
        Multiplicity        1
        Type                EcucBooleanParamDef
        Default value       --
        ConfigurationClass  Pre-compile time  X  All Variants
                            Link time         --
                            Post-build time   --
        Scope/Dependency    scope:            Can module
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>222</internalId></specobject>

    <specobject>
      <id>CAN320_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanIndex
        Description         Specifies the InstanceId of this module instance. If only one
                            instance is  present it shall have the Id 0.
        Multiplicity        1
        Type                EcucIntegerParamDef
        Range               0..255
        Default value       --
        ConfigurationClass  Pre-compile time  X  All Variants
                            Link time         --
                            Post-build time   --
        Scope/Dependency
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_00001</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>223</internalId></specobject>

    <specobject>
      <id>CAN434_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanLPduReceiveCalloutFunction
        Description         This parameter defines the existence and the name of a callout
                            function that is called after a successful reception of a
                            received CAN Rx L-PDU. If this parameter is omitted no callout
                            shall take place.
        Multiplicity        0..1
        Type                EcucFunctionNameDef
        Default value       --
        maxLength           --
        minLength           --
        regularExpression   --
        ConfigurationClass  Pre-compile time  X  All Variants
                            Link time         --
                            Post-build time   --
        Scope/Dependency    scope:            module
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>224</internalId></specobject>

    <specobject>
      <id>CAN355_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanMainFunctionBusoffPeriod
        Description         This parameter describes the period for cyclic call to
                            Can_MainFunction_Busoff. Unit is seconds.
        Multiplicity        0..1
        Type                EcucFloatParamDef
        Range               0.001..65.535
        Default value       --
        ConfigurationClass  Pre-compile time  X  All Variants
                            Link time         --
                            Post-build time   --
        Scope/Dependency
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>225</internalId></specobject>

    <specobject>
      <id>CAN376_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanMainFunctionModePeriod
        Description         This parameter describes the period for cyclic call to
                            Can_MainFunction_Mode. Unit is seconds.
        Multiplicity        1
        Type                EcucFloatParamDef
        Range               0.001..65.535
        Default value       --
        ConfigurationClass  Pre-compile time  X  All Variants
                            Link time         --
                            Post-build time   --
        Scope/Dependency
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>226</internalId></specobject>

    <specobject>
      <id>CAN356_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanMainFunctionReadPeriod
        Description         This parameter describes the period for cyclic call to
                            Can_MainFunction_Read. Unit is seconds. Different poll-cycles
                            will be configurable if more than one CanMainFunctionReadPeriod
                            is configured. In this case multiple Can_MainFunction_Read()
                            will be  provided by the CAN Driver module.
        Multiplicity        0..*
        Type                EcucFloatParamDef
        Range               0.001..65.535
        Default value       --
        ConfigurationClass  Pre-compile time  X  All Variants
                            Link time         --
                            Post-build time   --
        Scope/Dependency
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>227</internalId></specobject>

    <specobject>
      <id>CAN357_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanMainFunctionWakeupPeriod
        Description         This parameter describes the period for cyclic call to
                            Can_MainFunction_Wakeup. Unit is seconds.
        Multiplicity        0..1
        Type                EcucFloatParamDef
        Range               0.001..65.535
        Default value       --
        ConfigurationClass  Pre-compile time  X  All Variants
                            Link time         --
                            Post-build time   --
        Scope/Dependency
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>228</internalId></specobject>

    <specobject>
      <id>CAN358_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanMainFunctionWritePeriod
        Description         This parameter describes the period for cyclic call to
                            Can_MainFunction_Write. Unit is seconds. Different poll-cycles
                            will be configurable if more than one CanMainFunctionWritePeriod
                            is configured. In this case multiple Can_MainFunction_Write()
                            will be provided by the CAN Driver module.
        Multiplicity        0..*
        Type                EcucFloatParamDef
        Range               0.001..65.535
        Default value       --
        ConfigurationClass  Pre-compile time  X  All Variants
                            Link time         --
                            Post-build time   --
        Scope/Dependency
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>229</internalId></specobject>

    <specobject>
      <id>CAN095_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanMultiplexedTransmission {CAN_MULTIPLEXED_TRANSMISSION}
        Description         Specifies if multiplexed transmission shall be supported.ON or OFF.
        Multiplicity        1
        Type                EcucBooleanParamDef
        Default value       --
        ConfigurationClass  Pre-compile time  X  All Variants
                            Link time         --
                            Post-build time   --
        Scope/Dependency    scope:            Can module, CanIf module
                            dependency:       CAN Hardware Unit supports multiplexed
                                              transmission
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>230</internalId></specobject>

    <specobject>
      <id>CAN113_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanTimeoutDuration {CAN_TIMEOUT_DURATION}
        Description         Specifies the maximum time for blocking function until a timeout
                            is detected. Unit is seconds.
        Multiplicity        1
        Type                EcucFloatParamDef
        Range               0.001..65.535
        Default value       --
        ConfigurationClass  Pre-compile time  X  All Variants
                            Link time         --
                            Post-build time   --
        Scope/Dependency    scope:            Can module
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>231</internalId></specobject>

    <specobject>
      <id>CAN106_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanVersionInfoApi {CAN_VERSION_INFO_API}
        Description         Switches the Can_GetVersionInfo() API ON or OFF.
        Multiplicity        1
        Type                EcucBooleanParamDef
        Default value       --
        ConfigurationClass  Pre-compile time  X  All Variants
                            Link time         --
                            Post-build time   --
        Scope/Dependency    scope:            Can module
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_00001</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>232</internalId></specobject>

    <specobject>
      <id>CAN431_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanCounterRef
        Description         This parameter contains a reference to the counter,
                            which is used by the CAN driver.
        Multiplicity        1
        Type                Reference to [OsCounter]
        ConfigurationClass  Pre-compile time  X  All Variants
                            Link time         --
                            Post-build time   --
        Scope/Dependency
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>233</internalId></specobject>

    <specobject>
      <id>CAN432_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanMainFunctionReadPeriodRef
        Description         Reference to CAN Hardware Object which shall be polled with
                            the configured CanMainFunctionReadPeriod. This reference shall
                            only be configurable if more than one period is configured via
                            CanMainFunctionReadPeriod.
        Multiplicity        0..1
        Type                Reference to [CanHardwareObject]
        ConfigurationClass  Pre-compile time  X  All Variants
                            Link time         --
                            Post-build time   --
        Scope/Dependency    dependency:       CanMainFunctionReadPeriod (This reference
                                              is optional and is only available if more
                                              than one period is conifgured per
                                              CanMainFunctionRead).
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>234</internalId></specobject>

    <specobject>
      <id>CAN433_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanMainFunctionWritePeriodRef
        Description         Reference to CAN Hardware Object which shall be polled with
                            the configured CanMainFunctionWritePeriod. This reference shall
                            only be configurable if more than one period is configured via
                            CanMainFunctionWritePeriod.
        Multiplicity        0..1
        Type                Reference to [CanHardwareObject]
        ConfigurationClass  Pre-compile time  X  All Variants
                            Link time         --
                            Post-build time   --
        Scope/Dependency    dependency:       CanMainFunctionWritePeriod (This reference
                                              is optional and is only available if more
                                              than one period is conifgured per
                                              CanMainFunctionWrite).
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>235</internalId></specobject>

    <specobject>
      <id>CAN430_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanSupportTTCANRef
        Description         The parameter refers to CanIfSupportTTCAN parameter in the
                            CAN Interface Module configuration. The CanIfSupportTTCAN
                            parameter defines whether TTCAN is supported.
        Multiplicity        1
        Type                Reference to [CanIfPrivateCfg]
        ConfigurationClass  Pre-compile time  X  All Variants
                            Link time         --
                            Post-build time   --
        Scope/Dependency
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>236</internalId></specobject>

    <specobject>
      <id>CAN354_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Container Name            CanController{CanController}
        Description               This container contains the configuration parameters of
                                  the CAN controller(s).
        Configuration Parameters
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_00001</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>237</internalId></specobject>

    <specobject>
      <id>CAN314_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanBusoffProcessing {CAN_BUSOFF_PROCESSING}
        Description         Enables/disables API Can_MainFunction_BusOff() for handling
                            busoff events in polling mode.
        Multiplicity        1
        Type                EcucEnumerationParamDef
        Range               INTERRUPT         Interrupt Mode of operation.
                            POLLING           Polling Mode of operation.
        ConfigurationClass  Pre-compile time  X  All Variants
                            Link time         --
                            Post-build time   --
        Scope/Dependency
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>238</internalId></specobject>

    <specobject>
      <id>CAN315_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanControllerActivation {CAN_CONTROLLER_ACTIVATION}
        Description         Defines if a CAN controller is used in the configuration.
        Multiplicity        1
        Type                EcucBooleanParamDef
        Default value       --
        ConfigurationClass  Pre-compile time  X  All Variants
                            Link time         --
                            Post-build time   --
        Scope/Dependency    scope:            Can module
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>239</internalId></specobject>

    <specobject>
      <id>CAN382_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanControllerBaseAddress {CAN_CONTROLLER_BASE_ADDRESS}
        Description         Specifies the CAN controller base address.
        Multiplicity        1
        Type                EcucIntegerParamDef
        Range               0..4294967295
        Default value       --
        ConfigurationClass  Pre-compile time  X  All Variants
                            Link time         --
                            Post-build time   --
        Scope/Dependency
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>240</internalId></specobject>

    <specobject>
      <id>CAN316_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanControllerId {CAN_DRIVER_CONTROLLER_ID}
        Description         This parameter provides the controller ID which is unique in
                            a given CAN Driver. The value for this parameter starts with
                            0 and continue without any gaps.
        Multiplicity        1
        Type                EcucIntegerParamDef (Symbolic Name generated for this parameter)
        Range               0..255
        Default value       --
        ConfigurationClass  Pre-compile time  X  All Variants
                            Link time         --
                            Post-build time   --
        Scope/Dependency
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_00001</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>241</internalId></specobject>

    <specobject>
      <id>CAN317_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanRxProcessing {CAN_RX_PROCESSING}
        Description         Enables/disables API Can_MainFunction_Read() for handling
                            PDU reception events in polling mode.
        Multiplicity        1
        Type                EcucEnumerationParamDef
        Range               INTERRUPT         Interrupt Mode of operation.
                            POLLING           Polling Mode of operation.
        ConfigurationClass  Pre-compile time  X  All Variants
                            Link time         --
                            Post-build time   --
        Scope/Dependency
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_00001</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>242</internalId></specobject>

    <specobject>
      <id>CAN318_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanTxProcessing {CAN_TX_PROCESSING}
        Description         Enables/disables API Can_MainFunction_Write() for handling
                            PDU transmission events in polling mode.
        Multiplicity        1
        Type                EcucEnumerationParamDef
        Range               INTERRUPT         Interrupt Mode of operation.
                            POLLING           Polling Mode of operation.
        ConfigurationClass  Pre-compile time  X  All Variants
                            Link time         --
                            Post-build time   --
        Scope/Dependency
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_00001</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>243</internalId></specobject>

    <specobject>
      <id>CAN319_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanWakeupProcessing {CAN_WAKEUP_PROCESSING}
        Description         Enables/disables API Can_MainFunction_Wakeup() for handling
                            wakeup events in polling mode.
        Multiplicity        1
        Type                EcucEnumerationParamDef
        Range               INTERRUPT         Interrupt Mode of operation.
                            POLLING           Polling Mode of operation.
        ConfigurationClass  Pre-compile time  X  All Variants
                            Link time         --
                            Post-build time   --
        Scope/Dependency
      </description>
      <comment>
        There is no underlying CAN hardware.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.SleepWakeup</srcid><srcstatus/><internalId>274</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>244</internalId></specobject>

    <specobject>
      <id>CAN330_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanWakeupSupport {CAN_WAKEUP_SUPPORT}
        Description         CAN driver support for wakeup over CAN Bus.
        Multiplicity        1
        Type                EcucBooleanParamDef
        Default value       --
        ConfigurationClass  Pre-compile time  X  All Variants
                            Link time         --
                            Post-build time   --
        Scope/Dependency
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>245</internalId></specobject>

    <specobject>
      <id>CAN313_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanCpuClockRef {CAN_CPU_CLOCK_REFERENCE}
        Description         Reference to the CPU clock configuration, which is set
                            in the MCU driver configuration.
        Multiplicity        1
        Type                Reference to [McuClockReferencePoint]
        ConfigurationClass  Pre-compile time  X  All Variants
                            Link time         --
                            Post-build time   --
        Scope/Dependency
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>246</internalId></specobject>

    <specobject>
      <id>CAN359_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanWakeupSourceRef
        Description         This parameter contains a reference to the Wakeup Source
                            for this controller as defined in the ECU State Manager.
                            Implementation Type: reference to EcuM_WakeupSourceType.
        Multiplicity        0..1
        Type                Reference to [EcuMWakeupSource]
        ConfigurationClass  Pre-compile time  X  All Variants
                            Link time         --
                            Post-build time   --
        Scope/Dependency scope: Can module 
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_00001</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>247</internalId></specobject>

    <specobject>
      <id>CAN387_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Container Name            CanControllerBaudrateConfig{CanControllerBaudrateConfig}
        Description               This container contains bit timing related configuration
                                  parameters of the CANcontroller(s).
        Configuration Parameters
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>248</internalId></specobject>

    <specobject>
      <id>CAN005_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanControllerBaudRate {CAN_CONTROLLER_BAUD_RATE}
        Description         Specifies the baudrate of the controller in kbps.
        Multiplicity        1
        Type                EcucIntegerParamDef
        Range               0..2000
        Default value       --
        ConfigurationClass  Pre-compile time  X  VARIANT-PRE-COMPILE
                            Link time         --
                            Post-build time   X  VARIANT-POST-BUILD 
        Scope/Dependency    scope:            Can module
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>249</internalId></specobject>

    <specobject>
      <id>CAN073_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanControllerPropSeg {CAN_CONTROLLER_PROP_SEG}
        Description         Specifies propagation delay in time quantas.
        Multiplicity        1
        Type                EcucIntegerParamDef
        Range               0..255
        Default value       --
        ConfigurationClass  Pre-compile time  X  VARIANT-PRE-COMPILE
                            Link time         --
                            Post-build time   X  VARIANT-POST-BUILD
        Scope/Dependency    scope:            Can module
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>250</internalId></specobject>

    <specobject>
      <id>CAN074_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanControllerSeg1 {CAN_CONTROLLER_PHASE_SEG1}
        Description         Specifies phase segment 1 in time quantas.
        Multiplicity        1
        Type                EcucIntegerParamDef
        Range               0..255
        Default value       --
        ConfigurationClass  Pre-compile time  X  VARIANT-PRE-COMPILE
                            Link time         --
                            Post-build time   X  VARIANT-POST-BUILD
        Scope/Dependency    scope:            Can module
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>251</internalId></specobject>

    <specobject>
      <id>CAN075_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanControllerSeg2 {CAN_CONTROLLER_PHASE_SEG2}
        Description         Specifies phase segment 2 in time quantas.
        Multiplicity        1
        Type                EcucIntegerParamDef
        Range               0..255
        Default value       --
        ConfigurationClass  Pre-compile time  X  VARIANT-PRE-COMPILE
                            Link time         --
                            Post-build time   X  VARIANT-POST-BUILD
        Scope/Dependency    scope:            Can module
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>252</internalId></specobject>

    <specobject>
      <id>CAN383_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanControllerSyncJumpWidth {CAN_CONTROLLER_SJW}
        Description         Specifies the synchronization jump width for the controller
                            in time quantas.
        Multiplicity        1
        Type                EcucIntegerParamDef
        Range               0..255
        Default value       --
        ConfigurationClass  Pre-compile time  X  VARIANT-PRE-COMPILE
                            Link time         --
                            Post-build time   X  VARIANT-POST-BUILD
        Scope/Dependency
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>253</internalId></specobject>

    <specobject>
      <id>CAN324_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Container Name            CanHardwareObject{CanHardwareObject}
        Description               This container contains the configuration (parameters)
                                  of CAN Hardware Objects.
        Configuration Parameters
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_00001</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>254</internalId></specobject>

    <specobject>
      <id>CAN323_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanHandleType {CAN_HANDLE_TYPE}
        Description         Specifies the type (Full-CAN or Basic-CAN) of a hardware object.
        Multiplicity        1
        Type                EcucEnumerationParamDef
        Range               BASIC             For several L-PDUs are handled by the 
                                              hardware object
                            FULL              For only one L-PDU (identifier) is  handled by the
                                              hardware object
        ConfigurationClass  Pre-compile time  X  VARIANT-PRE-COMPILE
                            Link time         --
                            Post-build time   X  VARIANT-POST-BUILD
        Scope/Dependency    scope:            CanIf module
                            dependency:       This configuration element is used as
                                              information for the CAN  Interface only.
                                              The relevant CAN driver configuration is
                                              done with the filter mask and identifier.
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>255</internalId></specobject>

    <specobject>
      <id>CAN065_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name CanIdType {CAN_ID_TYPE}
        Description Specifies whether the IdValue is of
        type - standard identifier - extended  identifier - mixed mode
        ImplementationType: Can_IdType 
        Multiplicity 1
        Type
        EcucEnumerationParamDef
        Range               EXTENDED          All the CANIDs are of type extended
                                              only (29 bit).
                            MIXED             The type of CANIDs can be both  Standard
                                              or Extended.
                            STANDARD          All the CANIDs are of type standard
                                              only (11bit).
        ConfigurationClass  Pre-compile time  X  VARIANT-PRE-COMPILE
                            Link time         --
                            Post-build time   X  VARIANT-POST-BUILD
        Scope/Dependency    scope:            Can module, CanIf module
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_00001</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>256</internalId></specobject>

    <specobject>
      <id>CAN325_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanIdValue {CAN_ID_VALUE}
        Description         Specifies (together with the filter mask) the identifiers
                            range that passes the hardware filter.
        Multiplicity        1
        Type                EcucIntegerParamDef
        Range               0..4294967295
        Default value       --
        ConfigurationClass  Pre-compile time  X  VARIANT-PRE-COMPILE
                            Link time         --
                            Post-build time   X  VARIANT-POST-BUILD
        Scope/Dependency    scope:            Can module, CanIf module
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_00001</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>257</internalId></specobject>

    <specobject>
      <id>CAN326_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanObjectId {CAN_OBJECT_HANDLE_ID}
        Description         Holds the handle ID of HRH or HTH. The value of this parameter
                            is unique in a given CAN Driver, and it should start with 0 and
                            continue without any gaps. The HRH and HTH Ids are defined under
                            two different name-spaces. Example: HRH0-0, HRH1-1, HTH0-2, HTH1-3.
        Multiplicity        1
        Type                EcucIntegerParamDef (Symbolic Name generated for this parameter)
        Range               0..65535
        Default value       --
        ConfigurationClass  Pre-compile time  X  VARIANT-PRE-COMPILE
                            Link time         --
                            Post-build time   X  VARIANT-POST-BUILD
        Scope/Dependency    scope:            Can module, CanIf module
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_00001</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>258</internalId></specobject>

    <specobject>
      <id>CAN327_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanObjectType {CAN_OBJECT_TYPE}
        Description         Specifies if the HardwareObject is used as Transmit or
                            as Receive object.
        Multiplicity        1
        Type                EcucEnumerationParamDef
        Range               RECEIVE           Receive HOH
                            TRANSMIT          Transmit HOH
        ConfigurationClass  Pre-compile time  X  VARIANT-PRE-COMPILE
                            Link time         --
                            Post-build time   X  VARIANT-POST-BUILD 
        Scope/Dependency    scope:            Can module, CanIf module
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_00001</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>259</internalId></specobject>

    <specobject>
      <id>CAN322_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanControllerRef {CAN_CONTROLLER_REFERENCE}
        Description         Reference to CAN Controller to which the HOH is associated to.
        Multiplicity        1
        Type                Reference to [CanController]
        ConfigurationClass  Pre-compile time  X  VARIANT-PRE-COMPILE
                            Link time         --
                            Post-build time   X  VARIANT-POST-BUILD
        Scope/Dependency
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_00001</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>260</internalId></specobject>

    <specobject>
      <id>CAN321_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanFilterMaskRef {CAN_MASK_REFERENCE}
        Description         Reference to the filter mask that is used for hardware
                            filtering together with the CAN_ID_VALUE.
        Multiplicity        0..1
        Type                Reference to [ CanFilterMask ]
        ConfigurationClass  Pre-compile time  X  VARIANT-PRE-COMPILE
                            Link time         --
                            Post-build time   X  VARIANT-POST-BUILD 
        Scope/Dependency
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_00001</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>261</internalId></specobject>

    <specobject>
      <id>CAN351_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Container Name            CanFilterMask{CanFilterMask}
        Description               This container contains the configuration (parameters)
                                  of the CAN Filter Mask(s).
        Configuration Parameters
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_00001</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>262</internalId></specobject>

    <specobject>
      <id>CAN066_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Name                CanFilterMaskValue {CAN_FILTER_MASK_VALUE}
        Description         Describes a mask for hardware-based filtering of CAN identifiers.
                            The CAN identifiers of incoming messages are masked with the
                            appropriate CanFilterMaskValue. Bits holding a 0 mean don't care,
                            i.e. do not compare the message's identifier in the respective
                            bit position. The  mask shall be build by filling with leading 0.
                            In case of CanIdType EXTENDED or MIXED a 29 bit mask shall be
                            build. In case of CanIdType STANDARD a 11 bit mask shall be build.
        Multiplicity        1
        Range               0..4294967295
        Default value       --
        ConfigurationClass  Pre-compile time  X  VARIANT-PRE-COMPILE
                            Link time         --
                            Post-build time   X  VARIANT-POST-BUILD
        Scope/Dependency    scope:            Can module, CanIf module
                            dependency:       The filter mask settings must be known
                                              by the CanIf configuration for optimization
                                              of the SW filters.
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_00001</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>263</internalId></specobject>

    <specobject>
      <id>CAN343_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver_4.0.pdf, V3.1.0</source>
      <version>1</version>
      <description>
        Container Name            CanConfigSet [Multi Config Container]
        Description               This is the multiple configuration set container
                                  for CAN Driver.
        Configuration Parameters
      </description>
      <releases>
        <release>AUTOSAR 4.0.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_00001</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00003</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_00002</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>264</internalId></specobject>
  </specobjects>
    <specobjects doctype="req">

    <specobject>
      <id>EBREQ_CAN001</id>
      <status>approved</status>
      <source>WinCore_CAN_MCAL_Design.pdf</source>
      <version>1</version>
      <description>
        The function Can_Write shall return CAN_NOT_OK if the frame could not
        be transmitted due to connection problems.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10208</srcid><srcstatus/><internalId>312</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10405</srcid><srcstatus/><internalId>327</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>265</internalId></specobject>

    <specobject>
      <id>EBREQ_CAN002</id>
      <status>approved</status>
      <source>WinCore_CAN_MCAL_Design.pdf</source>
      <version>1</version>
      <description>
        The simulated Rx buffer shall offer the strategies KEEP_OLDEST
        (discard newly arriving frames) and KEEP_NEWWEST (overwrite
        oldest frames) in case of a full buffer.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_20101</srcid><srcstatus/><internalId>299</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_20201</srcid><srcstatus/><internalId>329</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>266</internalId></specobject>

    <specobject>
      <id>EBREQ_CAN003</id>
      <status>approved</status>
      <source>WinCore_CAN_MCAL_Design.pdf</source>
      <version>1</version>
      <description>
        Defensive programming branches, which can be reached (e.g. final
        default-cases, which can be reached if API parameter checking is
        switched off by CanDevErrorDetection) shall have no malicious effect.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_20006</srcid><srcstatus/><internalId>318</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>267</internalId></specobject>

    <specobject>
      <id>EBREQ_CAN004</id>
      <status>approved</status>
      <source>WinCore_CAN_MCAL_Design.pdf</source>
      <version>1</version>
      <description>
        The MainFunctions Can_MainFunction_Mode(), Can_MainFunciton_Read(),
        Can_MainFunction_Write(), Can_MainFunction_BusOff() and
        Can_MainFunction_Wakeup() shall not report a DET error if they are
        called without a prior call to Can_Init(). Instead they shall simply exit.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_10011</srcid><srcstatus/><internalId>316</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10010</srcid><srcstatus/><internalId>321</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10009</srcid><srcstatus/><internalId>335</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10012</srcid><srcstatus/><internalId>349</internalId></linkedfrom><linkedfrom><srcid>TS_CAN_10030</srcid><srcstatus/><internalId>351</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>268</internalId></specobject>

    <specobject>
      <id>EBREQ_CAN_DebugNTrace0001</id>
      <status>approved</status>
      <source>Elektrobit Automotive GmbH</source>
      <version>1</version>
      <description>
        The module shall provide DebugNTrace capabilities.
      </description>
      <comment>
        Debug and Trace is not supported in ACG6.1.
      </comment>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.Can.NoDebugNTrace</srcid><srcstatus/><internalId>284</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>269</internalId></specobject>

    <specobject>
      <id>Can.EB.BSWMDGeneration_1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The Can module's generator shall generate a basic software
        module description (BSWMD) based on the Can module's
        configuration containing information on the exclusive areas
        required by the Can module's implementation.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_SCHM</srcid><srcstatus/><internalId>287</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>270</internalId></specobject>

    <specobject>
      <id>Can.EB.BSWMDGeneration_2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The Can module's generator shall generate a basic software
        module description (BSWMD) based on the Can module's
        configuration containing information on the scheduled
        MainFunctions together with the scheduling period.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_SCHM</srcid><srcstatus/><internalId>287</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>271</internalId></specobject>

    <specobject>
      <id>Can.EB.BSWMDGeneration_3</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The Can module's BSWMD shall be generated using a generator
        mode named "generate_swcd".
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_CAN_SCHM</srcid><srcstatus/><internalId>287</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>272</internalId></specobject>
  </specobjects>
    <specobjects doctype="man">
    <specobject>
      <id>man.Can.ReviewGuideline</id>
      <status>approved</status>
      <source>EB test spec</source>
      <version>1</version>
      <description>
        The reviewer shall carefully read the requirement specification
        and verify that all items are fully addressed by the implementation.
        If a requirement is not fully implemented, it shall be marked
        as deviated by setting its coverage to DEVIATION.
      </description>
      <providescoverage>
        <provcov>
          <linksto>CAN034</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
        <provcov>
          <linksto>CAN043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
        <provcov>
          <linksto>CAN037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
        <provcov>
          <linksto>CAN418</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>14</internalId></provcov>
        <provcov>
          <linksto>CAN388</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
        <provcov>
          <linksto>CAN389</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
        <provcov>
          <linksto>CAN035</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>CAN036</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>CAN390</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
        <provcov>
          <linksto>CAN391</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
        <provcov>
          <linksto>CAN392</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
        <provcov>
          <linksto>CAN393</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
        <provcov>
          <linksto>CAN394</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>CAN397</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>CAN406</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>CAN079</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
        <provcov>
          <linksto>CAN386</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
        <provcov>
          <linksto>CAN372</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>CAN268</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
        <provcov>
          <linksto>CAN250</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
        <provcov>
          <linksto>CAN427</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
        <provcov>
          <linksto>CAN076</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>91</internalId></provcov>
        <provcov>
          <linksto>CAN423</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
        <provcov>
          <linksto>CAN012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
        <provcov>
          <linksto>CAN091</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>116</internalId></provcov>
        <provcov>
          <linksto>CAN080</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
        <provcov>
          <linksto>CAN084</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>CAN424</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>123</internalId></provcov>
        <provcov>
          <linksto>CAN111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>CAN365</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
        <provcov>
          <linksto>CAN366</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
        <provcov>
          <linksto>CAN367</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>127</internalId></provcov>
        <provcov>
          <linksto>CAN413</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>129</internalId></provcov>
        <provcov>
          <linksto>CAN414</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>130</internalId></provcov>
        <provcov>
          <linksto>CAN415</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
        <provcov>
          <linksto>CAN416</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
        <provcov>
          <linksto>CAN429</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
        <provcov>
          <linksto>CAN417</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
        <provcov>
          <linksto>CAN039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>135</internalId></provcov>
        <provcov>
          <linksto>CAN425</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
        <provcov>
          <linksto>CAN426</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
        <provcov>
          <linksto>CAN431</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>189</internalId></provcov>
        <provcov>
          <linksto>CAN110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>190</internalId></provcov>
        <provcov>
          <linksto>CAN441</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
        <provcov>
          <linksto>CAN442</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
        <provcov>
          <linksto>CAN183</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>203</internalId></provcov>
        <provcov>
          <linksto>CAN369</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>210</internalId></provcov>
        <provcov>
          <linksto>CAN047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>273</internalId></specobject>
  </specobjects>
    <specobjects doctype="dev">
    <specobject>
      <id>dev.Can.SleepWakeup</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>23</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CAN257</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
        <provcov>
          <linksto>CAN265</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
        <provcov>
          <linksto>CAN266</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
        <provcov>
          <linksto>CAN270</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>65</internalId></provcov>
        <provcov>
          <linksto>CAN271</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
        <provcov>
          <linksto>CAN269</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>67</internalId></provcov>
        <provcov>
          <linksto>CAN364</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>110</internalId></provcov>
        <provcov>
          <linksto>CAN048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
        <provcov>
          <linksto>CAN294</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>153</internalId></provcov>
        <provcov>
          <linksto>CAN112</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>206</internalId></provcov>
        <provcov>
          <linksto>CAN319_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>244</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>274</internalId></specobject>
    <specobject>
      <id>dev.Can.BusOff</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>50</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CAN020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>69</internalId></provcov>
        <provcov>
          <linksto>CAN272</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>70</internalId></provcov>
        <provcov>
          <linksto>CAN273</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
        <provcov>
          <linksto>CAN274</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>72</internalId></provcov>
        <provcov>
          <linksto>CAN109</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>202</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>275</internalId></specobject>
    <specobject>
      <id>dev.Can.NumOfBusses</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>81</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CAN237</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
        <provcov>
          <linksto>CAN236</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>1</internalId></provcov>
        <provcov>
          <linksto>CAN238</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>2</internalId></provcov>
        <provcov>
          <linksto>CAN239</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>3</internalId></provcov>
        <provcov>
          <linksto>CAN240</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>4</internalId></provcov>
        <provcov>
          <linksto>CAN242</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>5</internalId></provcov>
        <provcov>
          <linksto>CAN244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>6</internalId></provcov>
        <provcov>
          <linksto>CAN280</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
        <provcov>
          <linksto>CAN419</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
        <provcov>
          <linksto>CAN420</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
        <provcov>
          <linksto>CAN077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
        <provcov>
          <linksto>CAN284</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
        <provcov>
          <linksto>CAN246</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
        <provcov>
          <linksto>CAN245</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
        <provcov>
          <linksto>CAN404</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
        <provcov>
          <linksto>CAN053</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>74</internalId></provcov>
        <provcov>
          <linksto>CAN407</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
        <provcov>
          <linksto>CAN255</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>CAN021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
        <provcov>
          <linksto>CAN291</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
        <provcov>
          <linksto>CAN277</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>87</internalId></provcov>
        <provcov>
          <linksto>CAN401</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>88</internalId></provcov>
        <provcov>
          <linksto>CAN402</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>89</internalId></provcov>
        <provcov>
          <linksto>CAN403</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>90</internalId></provcov>
        <provcov>
          <linksto>CAN278</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
        <provcov>
          <linksto>CAN286</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
        <provcov>
          <linksto>CAN011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
        <provcov>
          <linksto>CAN300</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>107</internalId></provcov>
        <provcov>
          <linksto>CAN384</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
        <provcov>
          <linksto>CAN196</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
        <provcov>
          <linksto>CAN197</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>156</internalId></provcov>
        <provcov>
          <linksto>CAN434</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>CAN022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>214</internalId></provcov>
        <provcov>
          <linksto>CAN024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
        <provcov>
          <linksto>CAN408</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
        <provcov>
          <linksto>CAN385</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>32</internalId></provcov>
        <provcov>
          <linksto>CAN422</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
        <provcov>
          <linksto>CAN069_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>276</internalId></specobject>
    <specobject>
      <id>dev.Can.TimingParams</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>115</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CAN281</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>CAN398</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
        <provcov>
          <linksto>CAN262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
        <provcov>
          <linksto>CAN264</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>CAN275</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
        <provcov>
          <linksto>CAN370</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
        <provcov>
          <linksto>CAN371</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>277</internalId></specobject>
    <specobject>
      <id>dev.Can.DetFromMainFunction</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>141</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CAN179</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>194</internalId></provcov>
        <provcov>
          <linksto>CAN181</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
        <provcov>
          <linksto>CAN184</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>204</internalId></provcov>
        <provcov>
          <linksto>CAN186</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>208</internalId></provcov>
        <provcov>
          <linksto>CAN379</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>211</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>278</internalId></specobject>
    <specobject>
      <id>dev.Can.NoPostBuild</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>167</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CAN078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
        <provcov>
          <linksto>CAN056</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
        <provcov>
          <linksto>CAN023</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
        <provcov>
          <linksto>CAN221</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>279</internalId></specobject>
    <specobject>
      <id>dev.Can.VersionInfoIsFunction</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>195</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CAN251</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>280</internalId></specobject>
    <specobject>
      <id>dev.Can.MainFunctionsAreFunctions</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>223</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CAN178</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>193</internalId></provcov>
        <provcov>
          <linksto>CAN180</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>198</internalId></provcov>
        <provcov>
          <linksto>CAN185</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>207</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>281</internalId></specobject>
    <specobject>
      <id>dev.Can.NoRequirementsOnCan</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>249</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CAN256</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>CAN222</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>128</internalId></provcov>
        <provcov>
          <linksto>CAN444</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>282</internalId></specobject>
    <specobject>
      <id>dev.Can.NoHardwareCencellation</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>275</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CAN287</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>99</internalId></provcov>
        <provcov>
          <linksto>CAN432</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>CAN285</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>94</internalId></provcov>
        <provcov>
          <linksto>CAN281</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>CAN433</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>96</internalId></provcov>
        <provcov>
          <linksto>CAN399</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>97</internalId></provcov>
        <provcov>
          <linksto>CAN400</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
        <provcov>
          <linksto>CAN288</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>100</internalId></provcov>
        <provcov>
          <linksto>CAN069_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
        <provcov>
          <linksto>CAN235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>283</internalId></specobject>
    <specobject>
      <id>dev.Can.NoDebugNTrace</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>301</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>EBREQ_CAN_DebugNTrace0001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>269</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>284</internalId></specobject>
  </specobjects>
    <specobjects doctype="src">
    <specobject>
      <id>src/Autosar/src/Can.c_517</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/src/Autosar/src/Can.c</sourcefile>
      <sourceline>517</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CAN204</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>285</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/Can.c_569</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/src/Autosar/src/Can.c</sourcefile>
      <sourceline>569</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>CAN204</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>286</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_CAN_SCHM</id>
      <status>approved</status>
      <source>EB test case specification (asc_Can)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/test/ts5/Compile/IN/Can_CompTest_SchM/source/application/Can_CompTest_SchM.c</sourcefile>
      <sourceline>73</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
     This test checks that the Can module's generator generates a
     syntactically and semantically valid basic software module
     description (BSWMD) when the generator mode "generate_swcd" is
     invoked. It further tests that the SchM exclusive area API is
     correctly generated by the RTE generator based on the CanTp module's
     generated BSWMD.
  
Test Object: None.
Test Precondition: None.
Test Execution: 
    Ts5 build environment steps:
      The module configuration generator produces the BSWMD containing
      the information on the required exclusive areas.  This information
      is then used by the RTE generator to create the required SchM API
      for these exclusive areas. This implicitly verifies that the BSWMD
      is syntactically and semantically correct.  Can's static code
      makes use of this API (and the respective #defines) thus causing
      compile/link errors if the BSWMD does not contain the correct
      information.
  
Test Input: 
    Usage of a common ASR configuration having all adjacent ASR modules
    configured.
  
Test Output: 
    Compile succeeds.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Can.EB.BSWMDGeneration_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>270</internalId></provcov>
        <provcov>
          <linksto>Can.EB.BSWMDGeneration_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>271</internalId></provcov>
        <provcov>
          <linksto>Can.EB.BSWMDGeneration_3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>272</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>287</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_CAN_20005</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>6392</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN260</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>CAN017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>288</internalId></specobject>
    <specobject>
      <id>TS_CAN_20003</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>6245</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN258</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
        <provcov>
          <linksto>CAN290</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
        <provcov>
          <linksto>CAN017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
        <provcov>
          <linksto>CAN373</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>CAN411</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>61</internalId></provcov>
        <provcov>
          <linksto>CAN412</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>64</internalId></provcov>
        <provcov>
          <linksto>CAN410</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>289</internalId></specobject>
    <specobject>
      <id>TS_CAN_10503</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>5047</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN279</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
        <provcov>
          <linksto>CAN108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
        <provcov>
          <linksto>CAN058</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>CAN060</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>290</internalId></specobject>
    <specobject>
      <id>TS_CAN_10018</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>2350</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>CAN210</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>171</internalId></provcov>
        <provcov>
          <linksto>CAN026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>CAN028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>CAN027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>CAN235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>CAN083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>120</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>291</internalId></specobject>
    <specobject>
      <id>TS_CAN_10601</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>5388</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN279</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
        <provcov>
          <linksto>CAN058</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>CAN033</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
        <provcov>
          <linksto>CAN099</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
        <provcov>
          <linksto>CAN060</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
        <provcov>
          <linksto>CAN443</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>187</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>292</internalId></specobject>
    <specobject>
      <id>TS_CAN_10017</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>2266</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>CAN206</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>166</internalId></provcov>
        <provcov>
          <linksto>CAN026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>CAN028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>CAN027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>CAN235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>CAN083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>120</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>293</internalId></specobject>
    <specobject>
      <id>TS_CAN_10014</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>1997</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>CAN188</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
        <provcov>
          <linksto>CAN026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>CAN028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>CAN027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>CAN235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>CAN083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>120</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>294</internalId></specobject>
    <specobject>
      <id>TS_CAN_10302</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>4216</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN361</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>173</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>295</internalId></specobject>
    <specobject>
      <id>TS_CAN_10404</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>4700</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN214</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
        <provcov>
          <linksto>CAN058</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>296</internalId></specobject>
    <specobject>
      <id>TS_CAN_10022</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>2765</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>CAN218</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
        <provcov>
          <linksto>CAN026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>CAN028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>CAN027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>CAN235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>CAN089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
        <provcov>
          <linksto>CAN083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>120</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>297</internalId></specobject>
    <specobject>
      <id>TS_CAN_10008</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>1659</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>CAN233</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>CAN216</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
        <provcov>
          <linksto>CAN103</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
        <provcov>
          <linksto>CAN026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>CAN028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>CAN027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>CAN235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>CAN089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>298</internalId></specobject>
    <specobject>
      <id>TS_CAN_20101</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>6531</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EBREQ_CAN002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>266</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>299</internalId></specobject>
    <specobject>
      <id>TS_CAN_10701</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>5693</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN208</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>169</internalId></provcov>
        <provcov>
          <linksto>CAN234</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>212</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>300</internalId></specobject>
    <specobject>
      <id>TS_CAN_10026</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>3134</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>CAN200</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>160</internalId></provcov>
        <provcov>
          <linksto>CAN026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>CAN028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>CAN027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>CAN235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>CAN089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>301</internalId></specobject>
    <specobject>
      <id>TS_CAN_10004</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>1284</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>CAN198</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
        <provcov>
          <linksto>CAN103</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
        <provcov>
          <linksto>CAN026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>CAN028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>CAN027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>CAN235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>CAN089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>302</internalId></specobject>
    <specobject>
      <id>TS_CAN_10007</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>1553</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>CAN362</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>174</internalId></provcov>
        <provcov>
          <linksto>CAN361</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>173</internalId></provcov>
        <provcov>
          <linksto>CAN103</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
        <provcov>
          <linksto>CAN026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>CAN028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>CAN027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>CAN235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>303</internalId></specobject>
    <specobject>
      <id>TS_CAN_10201</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>3566</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN282</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
        <provcov>
          <linksto>CAN283</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>304</internalId></specobject>
    <specobject>
      <id>TS_CAN_10502</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>4952</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN279</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
        <provcov>
          <linksto>CAN108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>305</internalId></specobject>
    <specobject>
      <id>TS_CAN_10204</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>3802</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
        <provcov>
          <linksto>CAN059</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>306</internalId></specobject>
    <specobject>
      <id>TS_CAN_10207</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>4060</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN214</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
        <provcov>
          <linksto>CAN058</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>CAN100</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>84</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>307</internalId></specobject>
    <specobject>
      <id>TS_CAN_20002</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>6096</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN263</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
        <provcov>
          <linksto>CAN017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>308</internalId></specobject>
    <specobject>
      <id>TS_CAN_10001</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>1019</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>CAN175</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>139</internalId></provcov>
        <provcov>
          <linksto>CAN026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>CAN028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>CAN027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>CAN235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>CAN083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>120</internalId></provcov>
        <provcov>
          <linksto>CAN223</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>309</internalId></specobject>
    <specobject>
      <id>TS_CAN_10305</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>4386</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN062</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>310</internalId></specobject>
    <specobject>
      <id>TS_CAN_10023</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>2865</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>CAN219</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>186</internalId></provcov>
        <provcov>
          <linksto>CAN026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>CAN028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>CAN027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>CAN235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>CAN089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
        <provcov>
          <linksto>CAN083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>120</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>311</internalId></specobject>
    <specobject>
      <id>TS_CAN_10208</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>4122</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EBREQ_CAN001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>312</internalId></specobject>
    <specobject>
      <id>TS_CAN_10303</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>4273</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN227</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>313</internalId></specobject>
    <specobject>
      <id>TS_CAN_10704</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>5930</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN202</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>163</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>314</internalId></specobject>
    <specobject>
      <id>TS_CAN_10025</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>3041</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>CAN190</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>149</internalId></provcov>
        <provcov>
          <linksto>CAN026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>CAN028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>CAN027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>CAN235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>315</internalId></specobject>
    <specobject>
      <id>TS_CAN_10011</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>1773</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EBREQ_CAN004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>268</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>316</internalId></specobject>
    <specobject>
      <id>TS_CAN_10401</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>4480</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>192</internalId></provcov>
        <provcov>
          <linksto>CAN058</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>CAN033</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
        <provcov>
          <linksto>CAN099</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>317</internalId></specobject>
    <specobject>
      <id>TS_CAN_20006</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>6457</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EBREQ_CAN003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>267</internalId></provcov>
        <provcov>
          <linksto>CAN017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>318</internalId></specobject>
    <specobject>
      <id>TS_CAN_10029</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>3396</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>CAN200</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>160</internalId></provcov>
        <provcov>
          <linksto>CAN026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>CAN028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>CAN027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>CAN235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>CAN089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>319</internalId></specobject>
    <specobject>
      <id>TS_CAN_10506</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>5207</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN279</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
        <provcov>
          <linksto>CAN108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
        <provcov>
          <linksto>CAN058</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>320</internalId></specobject>
    <specobject>
      <id>TS_CAN_10010</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>1735</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EBREQ_CAN004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>268</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>321</internalId></specobject>
    <specobject>
      <id>TS_CAN_00001</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>323</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN082</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
        <provcov>
          <linksto>CAN252</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
        <provcov>
          <linksto>CAN220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>217</internalId></provcov>
        <provcov>
          <linksto>CAN223</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>CAN224</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>140</internalId></provcov>
        <provcov>
          <linksto>CAN229</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
        <provcov>
          <linksto>CAN230</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
        <provcov>
          <linksto>CAN231</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
        <provcov>
          <linksto>CAN232</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
        <provcov>
          <linksto>CAN360</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
        <provcov>
          <linksto>CAN233</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>CAN225</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>191</internalId></provcov>
        <provcov>
          <linksto>CAN226</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>196</internalId></provcov>
        <provcov>
          <linksto>CAN227</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
        <provcov>
          <linksto>CAN228</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
        <provcov>
          <linksto>CAN328_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
        <provcov>
          <linksto>CAN064_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
        <provcov>
          <linksto>CAN320_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>223</internalId></provcov>
        <provcov>
          <linksto>CAN106_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>232</internalId></provcov>
        <provcov>
          <linksto>CAN354_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>237</internalId></provcov>
        <provcov>
          <linksto>CAN316_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>241</internalId></provcov>
        <provcov>
          <linksto>CAN317_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>242</internalId></provcov>
        <provcov>
          <linksto>CAN318_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>243</internalId></provcov>
        <provcov>
          <linksto>CAN359_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>247</internalId></provcov>
        <provcov>
          <linksto>CAN324_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>254</internalId></provcov>
        <provcov>
          <linksto>CAN065_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>256</internalId></provcov>
        <provcov>
          <linksto>CAN325_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>257</internalId></provcov>
        <provcov>
          <linksto>CAN326_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>258</internalId></provcov>
        <provcov>
          <linksto>CAN327_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>259</internalId></provcov>
        <provcov>
          <linksto>CAN322_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>260</internalId></provcov>
        <provcov>
          <linksto>CAN321_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>261</internalId></provcov>
        <provcov>
          <linksto>CAN351_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
        <provcov>
          <linksto>CAN066_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>263</internalId></provcov>
        <provcov>
          <linksto>CAN343_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>264</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>322</internalId></specobject>
    <specobject>
      <id>TS_CAN_10604</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>5583</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN279</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>323</internalId></specobject>
    <specobject>
      <id>TS_CAN_10403</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>4623</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN214</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
        <provcov>
          <linksto>CAN058</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>324</internalId></specobject>
    <specobject>
      <id>TS_CAN_10015</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>2081</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>CAN189</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
        <provcov>
          <linksto>CAN026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>CAN028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>CAN027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>CAN235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>CAN083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>120</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>325</internalId></specobject>
    <specobject>
      <id>TS_CAN_10702</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>5771</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN049</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>162</internalId></provcov>
        <provcov>
          <linksto>CAN050</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>168</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>326</internalId></specobject>
    <specobject>
      <id>TS_CAN_10405</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>4759</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EBREQ_CAN001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>327</internalId></specobject>
    <specobject>
      <id>TS_CAN_10013</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>1913</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>CAN174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>137</internalId></provcov>
        <provcov>
          <linksto>CAN026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>CAN028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>CAN027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>CAN235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>328</internalId></specobject>
    <specobject>
      <id>TS_CAN_20201</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>6605</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EBREQ_CAN002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>266</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>329</internalId></specobject>
    <specobject>
      <id>TS_CAN_00003</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>922</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN082</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
        <provcov>
          <linksto>CAN252</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
        <provcov>
          <linksto>CAN220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>217</internalId></provcov>
        <provcov>
          <linksto>CAN223</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>CAN224</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>140</internalId></provcov>
        <provcov>
          <linksto>CAN229</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
        <provcov>
          <linksto>CAN230</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
        <provcov>
          <linksto>CAN231</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
        <provcov>
          <linksto>CAN232</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
        <provcov>
          <linksto>CAN360</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
        <provcov>
          <linksto>CAN233</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>CAN225</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>191</internalId></provcov>
        <provcov>
          <linksto>CAN226</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>196</internalId></provcov>
        <provcov>
          <linksto>CAN227</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
        <provcov>
          <linksto>CAN228</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
        <provcov>
          <linksto>CAN328_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
        <provcov>
          <linksto>CAN064_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
        <provcov>
          <linksto>CAN320_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>223</internalId></provcov>
        <provcov>
          <linksto>CAN106_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>232</internalId></provcov>
        <provcov>
          <linksto>CAN354_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>237</internalId></provcov>
        <provcov>
          <linksto>CAN316_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>241</internalId></provcov>
        <provcov>
          <linksto>CAN317_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>242</internalId></provcov>
        <provcov>
          <linksto>CAN318_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>243</internalId></provcov>
        <provcov>
          <linksto>CAN359_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>247</internalId></provcov>
        <provcov>
          <linksto>CAN324_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>254</internalId></provcov>
        <provcov>
          <linksto>CAN065_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>256</internalId></provcov>
        <provcov>
          <linksto>CAN325_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>257</internalId></provcov>
        <provcov>
          <linksto>CAN326_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>258</internalId></provcov>
        <provcov>
          <linksto>CAN327_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>259</internalId></provcov>
        <provcov>
          <linksto>CAN322_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>260</internalId></provcov>
        <provcov>
          <linksto>CAN321_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>261</internalId></provcov>
        <provcov>
          <linksto>CAN351_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
        <provcov>
          <linksto>CAN066_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>263</internalId></provcov>
        <provcov>
          <linksto>CAN343_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>264</internalId></provcov>
        <provcov>
          <linksto>CAN007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>112</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>330</internalId></specobject>
    <specobject>
      <id>TS_CAN_10202</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>3647</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN276</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>85</internalId></provcov>
        <provcov>
          <linksto>CAN058</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>CAN016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>86</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>331</internalId></specobject>
    <specobject>
      <id>TS_CAN_10504</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>5120</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN279</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
        <provcov>
          <linksto>CAN108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>332</internalId></specobject>
    <specobject>
      <id>TS_CAN_20004</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>6318</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN267</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
        <provcov>
          <linksto>CAN017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>333</internalId></specobject>
    <specobject>
      <id>TS_CAN_10507</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>5282</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN299</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>106</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>334</internalId></specobject>
    <specobject>
      <id>TS_CAN_10009</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>1697</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EBREQ_CAN004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>268</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>335</internalId></specobject>
    <specobject>
      <id>TS_CAN_10602</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>5447</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN279</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>336</internalId></specobject>
    <specobject>
      <id>TS_CAN_10003</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>1185</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>CAN187</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>146</internalId></provcov>
        <provcov>
          <linksto>CAN103</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
        <provcov>
          <linksto>CAN026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>CAN028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>CAN027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>CAN235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>337</internalId></specobject>
    <specobject>
      <id>TS_CAN_10005</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>1369</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>CAN205</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>165</internalId></provcov>
        <provcov>
          <linksto>CAN103</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
        <provcov>
          <linksto>CAN026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>CAN028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>CAN027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>CAN235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>338</internalId></specobject>
    <specobject>
      <id>TS_CAN_10301</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>4178</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN105</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>339</internalId></specobject>
    <specobject>
      <id>TS_CAN_10019</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>2434</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>CAN363</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
        <provcov>
          <linksto>CAN026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>CAN028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>CAN027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>CAN235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>CAN083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>120</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>340</internalId></specobject>
    <specobject>
      <id>TS_CAN_10021</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>2665</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>CAN217</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
        <provcov>
          <linksto>CAN026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>CAN028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>CAN027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>CAN235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>CAN089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
        <provcov>
          <linksto>CAN083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>120</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>341</internalId></specobject>
    <specobject>
      <id>TS_CAN_10020</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>2554</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>CAN409</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>CAN200</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>160</internalId></provcov>
        <provcov>
          <linksto>CAN026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>CAN028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>CAN027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>CAN235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>CAN089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>342</internalId></specobject>
    <specobject>
      <id>TS_CAN_10206</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>3973</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN214</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
        <provcov>
          <linksto>CAN058</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>343</internalId></specobject>
    <specobject>
      <id>TS_CAN_10031</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>3492</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN395</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>344</internalId></specobject>
    <specobject>
      <id>TS_CAN_10027</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>3234</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>CAN200</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>160</internalId></provcov>
        <provcov>
          <linksto>CAN026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>CAN405</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
        <provcov>
          <linksto>CAN028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>CAN027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>CAN235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>CAN089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>345</internalId></specobject>
    <specobject>
      <id>TS_CAN_10703</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>5851</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN049</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>162</internalId></provcov>
        <provcov>
          <linksto>CAN050</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>168</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>346</internalId></specobject>
    <specobject>
      <id>TS_CAN_10304</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>4329</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN228</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>347</internalId></specobject>
    <specobject>
      <id>TS_CAN_10006</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>1454</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>CAN209</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>170</internalId></provcov>
        <provcov>
          <linksto>CAN103</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
        <provcov>
          <linksto>CAN026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>CAN028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>CAN027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>CAN235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>348</internalId></specobject>
    <specobject>
      <id>TS_CAN_10012</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>1811</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EBREQ_CAN004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>268</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>349</internalId></specobject>
    <specobject>
      <id>TS_CAN_10024</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>2965</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>CAN219</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>186</internalId></provcov>
        <provcov>
          <linksto>CAN026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>CAN028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>CAN027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>CAN235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>CAN089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
        <provcov>
          <linksto>CAN083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>120</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>350</internalId></specobject>
    <specobject>
      <id>TS_CAN_10030</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>3434</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>EBREQ_CAN004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>268</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>351</internalId></specobject>
    <specobject>
      <id>TS_CAN_10402</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>4547</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN212</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
        <provcov>
          <linksto>CAN059</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>352</internalId></specobject>
    <specobject>
      <id>TS_CAN_10028</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>3295</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN260</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>353</internalId></specobject>
    <specobject>
      <id>TS_CAN_10203</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>3735</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>192</internalId></provcov>
        <provcov>
          <linksto>CAN058</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>CAN099</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>354</internalId></specobject>
    <specobject>
      <id>TS_CAN_10205</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>3894</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN213</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>178</internalId></provcov>
        <provcov>
          <linksto>CAN215</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>179</internalId></provcov>
        <provcov>
          <linksto>CAN058</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>355</internalId></specobject>
    <specobject>
      <id>TS_CAN_00002</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>619</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN082</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
        <provcov>
          <linksto>CAN252</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
        <provcov>
          <linksto>CAN220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>217</internalId></provcov>
        <provcov>
          <linksto>CAN223</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>CAN224</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>140</internalId></provcov>
        <provcov>
          <linksto>CAN229</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
        <provcov>
          <linksto>CAN230</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
        <provcov>
          <linksto>CAN231</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
        <provcov>
          <linksto>CAN232</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
        <provcov>
          <linksto>CAN360</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
        <provcov>
          <linksto>CAN233</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>CAN225</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>191</internalId></provcov>
        <provcov>
          <linksto>CAN226</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>196</internalId></provcov>
        <provcov>
          <linksto>CAN227</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
        <provcov>
          <linksto>CAN228</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
        <provcov>
          <linksto>CAN368</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
        <provcov>
          <linksto>CAN328_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
        <provcov>
          <linksto>CAN064_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
        <provcov>
          <linksto>CAN320_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>223</internalId></provcov>
        <provcov>
          <linksto>CAN106_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>232</internalId></provcov>
        <provcov>
          <linksto>CAN354_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>237</internalId></provcov>
        <provcov>
          <linksto>CAN316_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>241</internalId></provcov>
        <provcov>
          <linksto>CAN317_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>242</internalId></provcov>
        <provcov>
          <linksto>CAN318_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>243</internalId></provcov>
        <provcov>
          <linksto>CAN359_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>247</internalId></provcov>
        <provcov>
          <linksto>CAN324_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>254</internalId></provcov>
        <provcov>
          <linksto>CAN065_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>256</internalId></provcov>
        <provcov>
          <linksto>CAN325_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>257</internalId></provcov>
        <provcov>
          <linksto>CAN326_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>258</internalId></provcov>
        <provcov>
          <linksto>CAN327_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>259</internalId></provcov>
        <provcov>
          <linksto>CAN322_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>260</internalId></provcov>
        <provcov>
          <linksto>CAN321_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>261</internalId></provcov>
        <provcov>
          <linksto>CAN351_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
        <provcov>
          <linksto>CAN066_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>263</internalId></provcov>
        <provcov>
          <linksto>CAN343_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>264</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>356</internalId></specobject>
    <specobject>
      <id>TS_CAN_20001</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>6033</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN187</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>146</internalId></provcov>
        <provcov>
          <linksto>CAN259</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
        <provcov>
          <linksto>CAN261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
        <provcov>
          <linksto>CAN017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>357</internalId></specobject>
    <specobject>
      <id>TS_CAN_10002</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>1102</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>CAN177</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
        <provcov>
          <linksto>CAN026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>CAN028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>CAN027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>CAN235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>CAN083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>120</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>358</internalId></specobject>
    <specobject>
      <id>TS_CAN_10016</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>2182</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>CAN199</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
        <provcov>
          <linksto>CAN026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>CAN028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>CAN027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>CAN235</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>CAN089</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
        <provcov>
          <linksto>CAN083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>120</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>359</internalId></specobject>
    <specobject>
      <id>TS_CAN_10603</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>5524</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN279</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
        <provcov>
          <linksto>CAN058</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>CAN060</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>360</internalId></specobject>
    <specobject>
      <id>TS_CAN_10501</id>
      <status>approved</status>
      <source>EB test case specification (TS5)</source>
      <sourcefile>/cygdrive/e/work/workspace/TEST_TRACING/asc_Can/doc/project/test/WinCore_CAN_MCAL_TestSpecification.xml</sourcefile>
      <sourceline>4879</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;no description&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>CAN279</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
        <provcov>
          <linksto>CAN234</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>212</internalId></provcov>
        <provcov>
          <linksto>CAN108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
        <provcov>
          <linksto>CAN058</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>CAN099</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
        <provcov>
          <linksto>CAN060</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
        <provcov>
          <linksto>CAN396</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>104</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>361</internalId></specobject>
  </specobjects>
  </specdocument>
  <violations/>
  <oreqmViolations/>
</tracingresults>
