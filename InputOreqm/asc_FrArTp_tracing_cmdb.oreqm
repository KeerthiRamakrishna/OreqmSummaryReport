<?xml version="1.0" encoding="UTF-8"?>
<tracingresults>
  <environment>
    <toolname>ReqM2</toolname>
    <toolversion>1.30.0 (stable)</toolversion>
    <toolcopyright>Copyright 2010 - 2018 Elektrobit Automotive GmbH</toolcopyright>
    <libxmlversion>2.0207</libxmlversion>
    <libxml2compileversion>2.9.10</libxml2compileversion>
    <libxml2runtimeversion>20912</libxml2runtimeversion>
    <perlversion>v5.32.1</perlversion>
    <perlptrsize>64</perlptrsize>
    <commandline>-t -q -o asc_FrArTp_tracing_cmdb.oreqm -O /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements -c /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules.xml -s approved,rejected --wfatal WDUPLICATEID,WDUPLICATEIDANDVER /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/build/reqm/ReqM2_Native/asc_FrArTp_public_modulereference_integration_req.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/build/reqm/ReqM2_Native/asc_FrArTp_requirements_AUTOSAR_SWS_FlexRayARTransportLayer.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/build/reqm/ReqM2_Native/asc_FrArTp_requirements_FrArTp_EBExtensions.xml.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/build/reqm/ReqM2_Native/asc_FrArTp_requirements_Zusatzspezifikation_AUTOSAR_SWS_FlexRayARTransportLayer_V1.1.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/build/reqm/common_req/FrArTp_DbgInst_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/build/reqm/common_req/FrArTp_PbcfgM_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/build/reqm/common_req/FrArTp_PduLengthType_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/build/reqm/common_req/FrArTp_VerifyStub_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/build/reqm/ReqM2_GenericImporter/reqm_DEV.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/build/reqm/ReqM2_DocBookImporter/reqm_DSN.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/build/reqm/ReqM2_GenericImporter/reqm_SRC.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/build/reqm/ReqM2_GenericImporter/reqm_SRCXML.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/build/reqm/ReqM2_OldCImporter/reqm_TCS_LEGACY.reqm</commandline>
    <timestamp>Mon Jun 17 22:00:25 2024</timestamp>
  </environment>
  <cmdline>
    <cmdparam>
      <name>I</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>O</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>c</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules.xml</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>o</name>
      <values>
        <value>asc_FrArTp_tracing_cmdb.oreqm</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>q</name>
    </cmdparam>
    <cmdparam>
      <name>s</name>
      <values>
        <value>approved</value>
        <value>rejected</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>t</name>
    </cmdparam>
    <cmdparam>
      <name>wfatal</name>
      <values>
        <value>WDUPLICATEID</value>
        <value>WDUPLICATEIDANDVER</value>
      </values>
    </cmdparam>
  </cmdline>
  <inputfiles>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/build/reqm/ReqM2_Native/asc_FrArTp_public_modulereference_integration_req.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/build/reqm/ReqM2_Native/asc_FrArTp_requirements_AUTOSAR_SWS_FlexRayARTransportLayer.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/build/reqm/ReqM2_Native/asc_FrArTp_requirements_FrArTp_EBExtensions.xml.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/build/reqm/ReqM2_Native/asc_FrArTp_requirements_Zusatzspezifikation_AUTOSAR_SWS_FlexRayARTransportLayer_V1.1.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/build/reqm/common_req/FrArTp_DbgInst_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/build/reqm/common_req/FrArTp_PbcfgM_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/build/reqm/common_req/FrArTp_PduLengthType_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/build/reqm/common_req/FrArTp_VerifyStub_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/build/reqm/ReqM2_GenericImporter/reqm_DEV.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/build/reqm/ReqM2_DocBookImporter/reqm_DSN.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/build/reqm/ReqM2_GenericImporter/reqm_SRC.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/build/reqm/ReqM2_GenericImporter/reqm_SRCXML.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/build/reqm/ReqM2_OldCImporter/reqm_TCS_LEGACY.reqm</inputfile>
  </inputfiles>
  <configuration>
    <doctypes>
    <regexs>
      <!-- external level -->
      <regex>creq</regex>       <!-- since 10/2018: introduced for updated tracing model-->

      <!-- product line level -->
      <regex>fea</regex>
      <regex>feavc</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swpad</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swts</regex>
      <regex>pdoc</regex>       <!-- since 10/2018: introduced for updated tracing model-->
      <regex>dev</regex>

      <!-- bundle level -->
      <regex>swrs</regex>
      <regex>swad</regex>
      <regex>swadvc</regex>     <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swintts</regex>

      <!-- module level -->
      <regex>swdd</regex>
      <regex>swurs</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swuvc</regex>      <!-- since 10/2018: introduced for updated tracing model-->
      <regex>swmts</regex>      <!-- since 01/2020: introduced for updated tracing model RMP4.0-->
      <regex>swuts</regex>
      <regex>impl</regex>
      <regex>doc</regex>

      <!-- legacy items -->
      <regex>req</regex>        <!-- deprecated 10/2017: old swrs type -->
      <regex>dsn</regex>        <!-- deprecated 10/2017: old swdd -->
      <regex>src</regex>        <!-- deprecated 10/2017: old impl type -->
      <regex>tcs</regex>        <!-- deprecated 10/2017: replaced by swintts and swuts -->
      <regex>dsn_arch</regex>   <!-- deprecated 10/2017: old swad type -->
      <regex>man</regex>
      <regex>tso</regex>
      <regex>lim</regex>
    </regexs>
  </doctypes>
    <rules>

    <rule>
      <name>ERR.general.status</name>
      <description>All specification objects must be either in status=approved or in status=rejected. Other
        statuses are not allowed. How to fix: Set status to rejected or approved.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status!='approved') and (./status!='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.rejected</name>
      <description>Status status=rejected is only allowed for requirements. How to fix: set to approved for specification object that are not requirements.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype!='req') and (../@doctype!='swrs')  and (../@doctype!='swmrs') and (../@doctype!='swurs') and (./status='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.comment</name>
      <description>Specification objects with status=rejected shall have a comment or rationale that
        starts with on of the following texts: "This requirement is informational only", "This requirement is not applicable".
        How to fix: Add some text starting with "This requirement is informational only"
        or "This requirement is not applicable" to either the comment or to the rationale.
        Comment: Implementation of check checks for contains instead of starts-with since there is
        no trim function in the used XPATH engine.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>contains(./comment,"This requirement is informational only") or contains(./rationale,"This requirement is informational only") or contains(./comment,"This requirement is not applicable") or contains(./rationale,"This requirement is not applicable")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.rejected</name>
      <description>Specification objects with status=rejected shall not need coverage. How to fix: remove need for coverage.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>count(./needscoverage)=0</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.needscoverage.count</name>
      <description>Requirements with status=approved need to be covered, exceptions from
      this rule: configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") and requirements with
      a comment starting with "The adherence to this requirement is ensured by the following
      release check (URL to the checklist template plus ID of the check):".
      How to fix: Provide a needsobj element for those specobjects or comment according to the rule.
      </description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='req') and (./status='approved') and count(./needscoverage/needsobj)=0 and count(./fulfilledby/ffbObj)=0]</applyto>
          <!--This condition is false if the id of a specification object does not end with '_Conf' or '_CONF' or does not start with ECUC_ -->
          <condition>substring-after(./id,"ECUC_")!="" or substring-before(./id,"_Conf")!="" or substring-before(./id,"_CONF")!="" or contains(./comment,"The adherence to this requirement is ensured by the following release check (URL to the checklist template plus ID of the check):")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.needscoverage.rationale</name>
      <description>Requirements with status=approved and without coverage needs that are
        configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") shall have a comment or rationale
        with the following text: "This is a configuration parameter requirement without functional
        specification.". How to fix: Add some text starting with "This is a configuration parameter
        requirements without functional specification" to either the comment or to the rationale.</description>
      <regexchecks>
        <regexcheck>
          <applyto>//specobject[(../@doctype='req') and (./status='approved') and count(./needscoverage/needsobj)=0 and (substring-after(./id,"ECUC_")!="" or substring-before(./id,"_CONF")!="" or substring-before(./id,"_Conf")!="")]</applyto>
          <regex>This is a configuration parameter requirement without functional specification.</regex>
        </regexcheck>
      </regexchecks>
    </rule>

    <rule>
      <name>ERR.req.releases</name>
      <description>Requirements which originates from AUTOSAR (source tag contains term 'AUTOSAR_SWS', 'AUTOSAR_TPS',
        'AUTOSAR_ASWS' or 'AUTOSAR_TR') shall have their release tag set to 'AUTOSAR {major}.{minor}.{patch}' (e.g. 'AUTOSAR 4.3.0').
        Other requirements (including refinements of AUTOSAR requirements) must not contain any of the listed prefixes as
        part of the source tag.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[((../@doctype='req') or (../@doctype='swrs')) and (contains(./source,'AUTOSAR_SWS') or contains(./source,'AUTOSAR_TPS') or contains(./source,'AUTOSAR_ASWS') or contains(./source,'AUTOSAR_TR'))]</applyto>
          <condition>contains(./releases/release,'AUTOSAR')</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dsn.needscoverage.count</name>
      <description>Design elements with status=approved need to be covered.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[((../@doctype='swdd') or (../@doctype='dsn')) and (./status='approved') and count(./needscoverage/needsobj)=0]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.req.needscoverage.doctypes</name>
      <description>Requirements can be covered only by req, dsn_arch, dev, lim, dsn, src, tcs, or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='req')]</applyto>
          <condition>(./needscoverage/needsobj="req" or ./needscoverage/needsobj="dsn_arch" or ./needscoverage/needsobj="dev" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="dsn" or ./needscoverage/needsobj="src" or ./needscoverage/needsobj="tcs" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swrs.needscoverage.doctypes</name>
      <description>Requirements of type swrs can be covered only by swrs, swad, dev, lim, swurs, swdd, src, swuts, swintts or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swrs')]</applyto>
          <condition>(./needscoverage/needsobj="swrs" or ./needscoverage/needsobj="swad" or ./needscoverage/needsobj="dev" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swintts" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dsn.needscoverage.doctypes</name>
      <description>Design elements can only be covered by dsn, src, tcs, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dsn')]</applyto>
          <condition>(./needscoverage/needsobj="dsn" or ./needscoverage/needsobj="src" or ./needscoverage/needsobj="tcs" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>
    <rule>
      <name>ERR.swdd.needscoverage.doctypes</name>
      <description>Design elements of type swdd can only be covered by swdd, swurs, impl, swuts, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swdd')]</applyto>
          <condition>(./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swmts" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dev.needscoverage.count</name>
      <description>Deviations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dev')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.tcs.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='tcs')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.needscoverage.count</name>
      <description>Manual test cases shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.src.needscoverage.count</name>
      <description>Source code shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='src')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.lim.needscoverage.count</name>
      <description>Limitations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='lim')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>


    <rule>
      <name>ERR.fea.needscoverage.test</name>
      <description>Features shall be tested by software test ('swts') or manuel test ('man'). If no test is planned a justification shall be given.
                   A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>(
               ./needscoverage/needsobj="swts" or ./needscoverage/needsobj="man" or ./fulfilledby/ffbObj/ffbType="swts" or ./fulfilledby/ffbObj/ffbType="tsc" or ./fulfilledby/ffbObj/ffbType="man" or contains(./furtherinfo,"fea.needscoverage.test") or contains(./furtherinfo,"fea.needscoverage.doctypes") )</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>WRN.fea.needscoverage.impl</name>
      <description>Features shall be covered by implementation fea, swrs, swad, swpad, swurs, man and swts. For lagacy features a justification is acceppted. A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>( ./needscoverage/needsobj="swrs" or ./fulfilledby/ffbObj/ffbType="swrs" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swpad" or ./fulfilledby/ffbObj/ffbType="swpad" or ./needscoverage/needsobj="dsn_arch" or ./fulfilledby/ffbObj/ffbType="dsn_arch" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="req" or ./fulfilledby/ffbObj/ffbType="req" or ./needscoverage/needsobj="fea" or ./fulfilledby/ffbObj/ffbType="fea" or contains(./furtherinfo,"fea.needscoverage.impl"))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>



    <rule>
      <name>ERR.dsn_arch.needscoverage.doctypes</name>
      <description>Architectural design objects can only be covered by dsn_arch, dsn, src, tcs, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dsn_arch')]</applyto>
          <condition>(./needscoverage/needsobj="dsn_arch" or ./needscoverage/needsobj="dsn" or ./needscoverage/needsobj="src" or ./needscoverage/needsobj="tcs" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>


    <rule>
      <name>ERR.swad.fulfilledby.doctypes</name>
      <description>Architectural design objects of type swad can only be covered by swurs, swad, swdd, swintts, man, req, otherwise they should be refined with swrs</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swad')]</applyto>
          <condition>(./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="req" or ./needscoverage/needsobj="req" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swad" or ./fulfilledby/ffbObj/ffbType="swdd" or ./fulfilledby/ffbObj/ffbType="swintts" or ./needscoverage/needsobj="swintts" or ./fulfilledby/ffbObj/ffbType="man" or ./needscoverage/needsobj="man") </condition>
         </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.tcs.providescoverage.doctypes</name>
      <description>Test case specifications (tcs) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='tcs')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.providescoverage.doctypes</name>
      <description>Manual test case specification (man) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swuts.providescoverage.doctypes</name>
      <description>Software unit test case specification (swuts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swuts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swintts.providescoverage.doctypes</name>
      <description>Software integration test case specification (swintts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swintts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swts.providescoverage.doctypes</name>
      <description>Software test case specification (swts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>
  </rules>
    <oreqmRules>
          <rule>
            <name>WRN.tsc.needscoverage.count</name>
            <description>Violated if there are more than 10 tsc specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='tcs']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='tsc'])) &gt; 10]/furtherinfo</applyto>
                    <regex>tsc.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>

        <rule>
            <name>WRN.req.needscoverage.count</name>
            <description>Violated if there are more than 10 req specobjects covering one specobject and no appropriate information is provided in furtherinfo, refinement on req to req are excluded. Refinements of requirements Req to Req and Req to Fea are excluded from this rule since this is tracing on the same level. The justification in furtherinfo must contain the rule name.</description>
           <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(../@doctype != 'req') and (../@doctype != 'fea') and ((count(./needscoverage/needscov[needsobj='req']/coveredby/linkedfrom)) &gt; 10)]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='req'])) &gt; 10]/furtherinfo</applyto>
                    <regex>req.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
     </rule>

        <rule>
            <name>WRN.src.needscoverage.count</name>
            <description>Violated if there are more than 10 src specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='src']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='dsn'])) &gt; 10]/furtherinfo</applyto>
                    <regex>dsn.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>

        <rule>
            <name>WRN.dsn.needscoverage.count</name>
            <description>Violated if there are more than 10 dsn specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='dsn']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='dsn'])) &gt; 10]/furtherinfo</applyto>
                    <regex>dsn.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>

        <rule>
            <name>WRN.dsn_arch.needscoverage.count</name>
            <description>Violated if there are more than 10 dsn_arch specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='dsn_arch']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
            <regexchecks>
                <regexcheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='dsn_arch'])) &gt; 10]/furtherinfo</applyto>
                    <regex>dsn_arch.needscoverage.count</regex>
                </regexcheck>
            </regexchecks>
        </rule>
  </oreqmRules>
  </configuration>
  <specdocument>
    <specobjects doctype="lim">

    <specobject>
      <id>lim.FrArTp.EB_INTREQ_FrArTp_0001</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        The integrator must assure that the following functions do not interrupt each other or themselves:
        FrArTp_RxIndication, FrArTp_TxConfirmation, FrArTp_TriggerTransmit, FrArTp_MainFunction;
      </description>
      <rationale>This limitation reduces code size and execution time.</rationale>
      <providescoverage>
        <provcov>
          <linksto>dsn.FrArTp.Preemption1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>624</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>0</internalId></specobject>

    <specobject>
      <id>lim.FrArTp.EB_INTREQ_FrArTp_0002</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        The integrator must assure that the following functions are not preempted by any other function:
        FrArTp_RxIndication, FrArTp_TxConfirmation, FrArTp_TriggerTransmit;
      </description>
      <rationale>This limitation reduces code size and execution time.</rationale>
      <providescoverage>
        <provcov>
          <linksto>dsn.FrArTp.Preemption2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>625</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1</internalId></specobject>

    <specobject>
      <id>lim.FrArTp.EB_INTREQ_FrArTp_0003</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        The integrator must assure that the following functions are not preempted and do not preempt any other function:
        FrArTp_Init;
      </description>
      <rationale>This limitation reduces code size and execution time.</rationale>
      <providescoverage>
        <provcov>
          <linksto>dsn.FrArTp.Preemption3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>626</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>2</internalId></specobject>

    <specobject>
      <id>lim.FrArTp.EB_INTREQ_FrArTp_0004</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        The integrator must assure that only the last transmit PDU (in temporal order) of each PDU
        pool has a TxConfirmation in FrIf configured. It follows that all other PDUs must not
        have a TxConfirmation in FrIf configured. The temporal order corresponds to the FrArTpPduId,
        see lim.FrArTp.EB_INTREQ_FrArTp_0005.
      </description>
      <rationale>This limitation originates from the FrArTp SWS: SWS_FrArTp_00182.</rationale>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00182</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>378</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>3</internalId></specobject>

    <specobject>
      <id>lim.FrArTp.EB_INTREQ_FrArTp_0005</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        The integrator must assure that the FrIf transmits N-PDUs of a pool in temporal order
        according to ascending FrArTpPduId from FrArTp. Additionally, all PDUs of a pool shall be
        arranged such that they are always received in the same order in which they have been
        transmitted, independent of the current cycle in the FlexRay communication round.
      </description>
      <rationale>This limitation originates from the FrArTp SWS: SWS_FrArTp_00174.</rationale>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00174</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>376</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>4</internalId></specobject>

  </specobjects>
    <specobjects doctype="req">

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00195</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The Header file structure shall include the following files
        named:<pre>
        - FrArTp.h - general header file
        - FrArTp_Cfg.h - pre-compile time configuration parameters
        - Det.h - header file of the Development Error Tracer
        - PduR_FrArTp.h - header file of PDU Router
        - FrIf.h - header file of FrIf
        - SchM_FrArTp.h - header file of TP related SchM declarations
        - FrArTp_MemMap.h - header file for Memory Mapping
        - Std_Types.h - header file for standard types
        - ComStack_Types.h - header file for ComStack types
        - FrArTp_Types.h - header file for FrArTp specific types</pre>
        (SRS_BSW_00346, SRS_BSW_00381, SRS_BSW_00383, SRS_BSW_00404, SRS_BSW_00435, SRS_BSW_00436)
      </description>
      <comment>
        This requirement is informational only.
        Headerfile structure is internally defined, however, main interfaces provided (FrArTp.h) are compatible.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>5</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00222</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The FrArTp.h file shall include FrArTp_Types.h.
      </description>
      <comment>
        This requirement is informational only.
        Headerfile structure is internally defined, however, main interfaces provided (FrArTp.h) are compatible.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>6</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00213</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The source code of the FrArTp shall not be processor and
        compiler dependent.(SRS_BSW_00006)
      </description>
      <comment>
        This requirement is informational only.
        No module specific functional requirement.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>7</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00192</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The FlexRay AUTOSAR Transport Layer provides full
        duplex capabilities for PDU pools and connections.
      </description>
      <comment>
        This requirement is informational only.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>8</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00201</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The FrArTp shall perform a preprocessor-check if its source
        and header files belong to the same version.(SRS_BSW_00004)
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.ConsChck</srcid><srcstatus/><internalId>543</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>9</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00009</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Beside the features according to ISO 15765-2 (7 byte data per frame, 4 kByte message length,
        unsegmented 1:n connections, multiple logical channels concurrently, flow control,
        service request confirmation), FrArTp allows to configure independently of each other the following
        features for a specific channel at both pre- and post-compile time:<br/>
          * Acknowledgement (with or without Retry) for 1:1 connections<br/>
          * Segmented 1:n connections (without flow control)<br/>
          * Transmission cancellation<br/>
          * Up to ((2^32) - 1) Byte message length<br/>
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00009.1</srcid><srcstatus/><internalId>11</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00009.2</srcid><srcstatus/><internalId>12</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00009.3</srcid><srcstatus/><internalId>13</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00009.4</srcid><srcstatus/><internalId>14</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00009.5</srcid><srcstatus/><internalId>15</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>10</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00009.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The FrArTp allows to configure independently of each other the following feature for a specific
        channel at both pre- and post-compile time:<br/>
          * Acknowledgement with Retry for 1:1 connections
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.RetryFunctionality</srcid><srcstatus/><internalId>537</internalId></linkedfrom><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>11</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00009.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The FrArTp allows to configure independently of each other the following feature for a specific
        channel at both pre- and post-compile time:<br/>
          * Acknowledgement without Retry for 1:1 connections
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>12</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00009.3</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The FrArTp allows to configure independently of each other the following feature for a specific
        channel at both pre- and post-compile time:<br/>
          * Segmented 1:n connections (without flow control)
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.SegmentedCommunication</srcid><srcstatus/><internalId>539</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>13</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00009.4</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The FrArTp allows to configure independently of each other the following feature for a specific
        channel at both pre- and post-compile time:<br/>
          * Transmission cancellation
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00150</srcid><srcstatus/><internalId>303</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>14</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00009.5</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The FrArTp allows to configure independently of each other the following feature for a specific
        channel at both pre- and post-compile time:<br/>
          * Up to ((2^32) - 1) Byte message length
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00238</srcid><srcstatus/><internalId>59</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>15</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00255</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        When the FrArTp frame does not require the whole length of
        its N-PDU (in a SingleFrame, a FirstFrame, or the last ConsecutiveFrame in a
        transfer), the remaining space (bits) in the N-PDU shall be set to 0.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.PaddingValue</srcid><srcstatus/><internalId>547</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>16</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00021</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Overview of the different frame formats, not including addressing information:<pre>
        +---------+------+--------+--------+------+-------+------+------+------+-----------------------+
        | ISO     | Name | 1st Byte        | 2nd  | 3rd   | 4th         | 5th  | Description           |
        | 15765-2 |      | 1st/2nd Nibble  | Byte | Byte  | Byte        | Byte |                       |
        +---------+------+------+----------+------+-------+-------------+------+-----------------------+
        | YES     | SF-I | 0x0  | DL       | data (1 to 7 Bytes)               | ISO 15765-2 SF-I      |
        +---------+------+------+----------+------+---------------------+------+-----------------------+
        | NO      | SF-E | 0x4  | Res(0x0) | DL   | data (1 to 250 or 248)     | Extended SF-E         |
        +---------+------+------+----------+------+---------------------+------+-----------------------+
        | YES     | FF-I | 0x1  | DL       | data                              | ISO 15765-2 FF-I      |
        +---------+------+------+----------+------+-------+-------------+------+-----------------------+
        | NO      | FF-E | 0x5  | Res(0x0) | DL (4 Bytes)         | data from 6th Byte | Extended FF-E |
        +---------+------+------+----------+------+-------+-------------+------+-----------------------+
        | YES/NO  | CF   | 0x2  | SN       | data (1 to 7)                     | ISO 15765-2 CF        |
        |         |      |      |          | data (1 to 251 or 249)            | Extended CF           |
        +---------+------+------+----------+------+-------+-------------+------+-----------------------+
        | NO      | CF2  | 0x6  | SN       | data                          | CF used in Retry Channels |
        +---------+------+------+----------+------+-------+-------------+------+-----------------------+
        | YES/NO  | FC   | 0x3  | FS       | BS   | STmin | --          | --   | (ISO 15765-2) FC      |
        +---------+------+------+----------+------+-------+------+------+------------------------------+
        | NO      | AF   | 0x7  | FS       | BS   | STmin | ACK (4 Bit) | --   | Acknowledgement Frame |
        |         |      |      |          |      |       |  SN (4 Bit) |      |                       |
        +---------+------+------+----------+------+-------+------+------+------+-----------------------+</pre>
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00023</srcid><srcstatus/><internalId>19</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00029</srcid><srcstatus/><internalId>31</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00237</srcid><srcstatus/><internalId>52</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00238</srcid><srcstatus/><internalId>59</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00239</srcid><srcstatus/><internalId>72</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00239.1</srcid><srcstatus/><internalId>73</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00240</srcid><srcstatus/><internalId>87</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00241</srcid><srcstatus/><internalId>108</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>17</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00022</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        An SF is sent when a message does not exceed the available amount of payload
        of this frame type or if ISO 15765-2 compliance is required.
        To be compliant with ISO 15765-2 on the one hand and to allow using the possibilities
        of FlexRay on the other hand, there are two types of Single Frames.
        In ISO 15765-2 compliant channels only SF-I is allowed, in non ISO 15765-2
        compliant channels (i.e. FrArTpLm = FRARTP_L4G) only SF-E is allowed.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00023</srcid><srcstatus/><internalId>19</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00029</srcid><srcstatus/><internalId>31</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>18</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00023</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        An SF-I looks as follows:<pre>
        +------------+-----------+-------------------------------------------+
        | FT (4 Bit) | DL (4Bit) |                  Data                     |
        +------------+-----------+-------------------------------------------+
        |       PCI (1 Byte )    |                1-7 Byte                   |
        +------------+-----------+-------------------------------------------+</pre>
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Reception</srcid><srcstatus/><internalId>887</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Transfer</srcid><srcstatus/><internalId>918</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_SF</srcid><srcstatus/><internalId>964</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_138</srcid><srcstatus/><internalId>653</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_155</srcid><srcstatus/><internalId>658</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_206</srcid><srcstatus/><internalId>705</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_283</srcid><srcstatus/><internalId>715</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>19</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00024</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        For ISO 15765-2 Single Frames (SF-I) the FT field shall be set to 0x0.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Reception</srcid><srcstatus/><internalId>887</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Transfer</srcid><srcstatus/><internalId>918</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_SF</srcid><srcstatus/><internalId>964</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_486</srcid><srcstatus/><internalId>691</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_208</srcid><srcstatus/><internalId>706</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>20</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00025</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The DL field states the amount of the actual data bytes,
        according to ISO 15765-2 the values 0x1 - 0x7 (0x6 in FRARTP_ISO6 mode) are
        valid, so in an ISO 15765-2 compliant connection the size of the associated N-PDU
        has to be, depending on the addressing mode, 10 (9) or 12 (11) Bytes long, since the
        SF has this length.
      </description>
      <comment>
        Note that since padding is left to the FrIf, the stated lengths are maximums.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00025.1</srcid><srcstatus/><internalId>22</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00025.2</srcid><srcstatus/><internalId>23</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00025.3</srcid><srcstatus/><internalId>24</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00025.4</srcid><srcstatus/><internalId>25</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00028.3</srcid><srcstatus/><internalId>29</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>21</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00025.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        In FRARTP_ISO mode, the size of an N-PDU associated with an SF-I is at most 10 or 12 bytes,
        depending on address size.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00028.1</srcid><srcstatus/><internalId>27</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_152</srcid><srcstatus/><internalId>657</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00025</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>22</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00025.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        In FRARTP_ISO6 mode with one (two) byte addressing, the size of an N-PDU associated with an
        SF-I is at most 9 (11) bytes.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.FrArTpLm</srcid><srcstatus/><internalId>546</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00025</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>23</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00025.3</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The DL field states the amount of the actual data bytes,
        in FRARTP_ISO, the values 0x1 - 0x7 are valid.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Reception</srcid><srcstatus/><internalId>887</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_149</srcid><srcstatus/><internalId>656</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SduMng.c_108</srcid><srcstatus/><internalId>813</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00028.1</srcid><srcstatus/><internalId>27</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00025</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>24</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00025.4</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The DL field states the amount of the actual data bytes,
        in FRARTP_ISO6 mode, the values 0x1 - 0x6 are valid.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.FrArTpLm</srcid><srcstatus/><internalId>546</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00025</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>25</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00028</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Incoming SF-I frames with an invalid DL value of 0x0 or higher than 0x7 (0x6 in
        FRARTP_ISO6 mode) shall be ignored. This shall also be done if a value arrives
        which is higher than the amount of payload that can be derived from the length
        statement of the corresponding PduInfoType struct in the configuration and the
        addressing mode.
        If acknowledgement is configured, additionally an AF with a negative
        acknowledgement shall be sent back to the sender in the cases above.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00028.1</srcid><srcstatus/><internalId>27</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00028.2</srcid><srcstatus/><internalId>28</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00028.3</srcid><srcstatus/><internalId>29</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00028.4</srcid><srcstatus/><internalId>30</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>26</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00028.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        In FRARTP_ISO mode, incoming SF-I frames with an invalid DL value
        of 0x0 or higher than 0x7, shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Invalid_Datalength</srcid><srcstatus/><internalId>941</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_149</srcid><srcstatus/><internalId>656</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00025.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00025.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>27</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00028.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        In FRARTP_ISO mode, incoming SF-I frames with a DL value higher than the amount of payload
        that can be derived from the length statement of the corresponding PduInfoType struct in the
        configuration and the addressing mode shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_147</srcid><srcstatus/><internalId>655</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Invalid_Datalength</srcid><srcstatus/><internalId>941</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>28</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00028.3</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        In FRARTP_ISO6 mode, incoming SF-I frames with an invalid DL value of 0x0, higher than 0x6
        or higher than the amount of payload that can be derived from the length statement of the
        corresponding PduInfoType struct in the configuration and the addressing mode shall be
        ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.FrArTpLm</srcid><srcstatus/><internalId>546</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00025</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>29</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00028.4</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        In both FRARTP_ISO6 and FRARTP_ISO mode, if acknowledgement is configured and an SF-I frame
        with invalid DL value is received, an AF with a negative acknowledgement shall be sent back
        to the sender.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>30</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00029</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        An SF-E looks as follows:<pre>
        +------------+-----------+-------------------+-------------------------------------------+
        | FT (4 Bit) | Res (4Bit)|     DL (8Bit)     |                  Data                     |
        +------------+-----------+-------------------+-------------------------------------------+
        |                 PCI (2 Byte )              |      Length depending on configuration    |
        +------------------------+-------------------+-------------------------------------------+</pre>
      </description>
      <comment>
        An SF-E allows using the whole possible FlexRay payload of 254 Bytes for an unsegmented
        transfer.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Transfer_SFE</srcid><srcstatus/><internalId>920</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Unsegmented_Reception</srcid><srcstatus/><internalId>938</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_SF_E</srcid><srcstatus/><internalId>966</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_240</srcid><srcstatus/><internalId>668</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_198</srcid><srcstatus/><internalId>703</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_277</srcid><srcstatus/><internalId>714</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>31</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00030</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The PCI of an SF-E consists of two bytes. The FT field is 4 Bit long; for an SF-E, it shall
        be set to 0x4. The following nibble is reserved; it shall be set to 0x0.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00030.1</srcid><srcstatus/><internalId>33</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00030.2</srcid><srcstatus/><internalId>34</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>32</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00030.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The FT field of an SF-E is 4 Bit long and shall be set to 0x4.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Transfer_SFE</srcid><srcstatus/><internalId>920</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Unsegmented_Reception</srcid><srcstatus/><internalId>938</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_SF_E</srcid><srcstatus/><internalId>966</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_507</srcid><srcstatus/><internalId>694</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_200</srcid><srcstatus/><internalId>704</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>32</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>33</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00030.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The second nibble of PCI in an SF-E shall be set to 0x0.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Transfer_SFE</srcid><srcstatus/><internalId>920</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Unsegmented_Reception</srcid><srcstatus/><internalId>938</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_SF_E</srcid><srcstatus/><internalId>966</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_200</srcid><srcstatus/><internalId>704</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>32</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>34</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00031</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The next byte is the DL field and states the amount of payload contained in the SF-E.
        Depending on the configuration of the addressing mode (1 Byte or 2 Byte) and the length of
        the associated N-PDU, all values except 0x00 and above 0xFA (1 Byte addressing) or above
        0xF8 (2 Byte addressing) are valid here.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00286.1</srcid><srcstatus/><internalId>37</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00286.2</srcid><srcstatus/><internalId>38</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00286.3</srcid><srcstatus/><internalId>39</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.SFE.FRAME_LENGTH</srcid><srcstatus/><internalId>417</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>35</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00286</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If the DL field of an SF-E contains the value 0x00 or, depending on the addressing mode, a
        value higher than 0xFA or higher than 0xF8, the SF-E shall be ignored.
        If acknowledgement is configured, additionally an AF with a negative
        acknowledgement shall be sent back to the sender.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00286.1</srcid><srcstatus/><internalId>37</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00286.2</srcid><srcstatus/><internalId>38</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00286.3</srcid><srcstatus/><internalId>39</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>36</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00286.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If the DL field of an SF-E contains the value 0x00 the SF-E shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Invalid_SFE_Reception</srcid><srcstatus/><internalId>942</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_SF_E_2</srcid><srcstatus/><internalId>969</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_266</srcid><srcstatus/><internalId>671</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00286</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>37</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00286.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If one byte addressing is configured and the DL field of an SF-E contains a value higher
        than 0xFA, the SF-E shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Invalid_SFE_Reception</srcid><srcstatus/><internalId>942</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_SF_E_2</srcid><srcstatus/><internalId>969</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_268</srcid><srcstatus/><internalId>672</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00286</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>38</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00286.3</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If two byte addressing is configured and the DL field of an SF-E contains a value higher
        than 0xF8, the SF-E shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Invalid_SFE_Reception</srcid><srcstatus/><internalId>942</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_SF_E_3</srcid><srcstatus/><internalId>970</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_268</srcid><srcstatus/><internalId>672</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00286</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>39</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00286.4</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If acknowledgement is configured and an SF-E frame with invalid DL value
        (0x0, higher than 0xFA (1 byte addressing) or 0xF8 (two byte addressing) is received, an AF
        with a negative acknowledgement shall be sent back to the sender.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>40</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00287</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If messages longer than allowed by ISO 15765-2 are not configured (FrArTpLm) for
        the corresponding channel, SF-E frame shall be ignored. This shall also be done if
        a value arrives which is higher than the amount of payload that can be derived from
        the length statement of the corresponding PduInfoType struct and the addressing mode
        or if a value different from 0x0 arrives in the reserved nibble.
        If acknowledgement is configured, additionally an AF with a negative acknowledgement
        shall be sent back to the sender in the cases above.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00287.1</srcid><srcstatus/><internalId>42</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00287.2</srcid><srcstatus/><internalId>43</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00287.3</srcid><srcstatus/><internalId>44</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00287.4</srcid><srcstatus/><internalId>45</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>41</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00287.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If messages longer than allowed by ISO 15765-2 (longer than 2^12 - 1)
        are not configured (FrArTpLm) for the corresponding channel,
        SF-E frame shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00083.15</srcid><srcstatus/><internalId>141</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00287</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>42</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00287.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Incoming SF-E frames with a DL value higher than the amount of payload that can be derived
        from the length statement of the corresponding PduInfoType struct in the configuration and
        the addressing mode shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Invalid_SFE_Reception</srcid><srcstatus/><internalId>942</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_SF_E_4</srcid><srcstatus/><internalId>971</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_SF_E_5</srcid><srcstatus/><internalId>972</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_275</srcid><srcstatus/><internalId>673</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00287</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>43</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00287.3</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Incoming SF-E frames with a value different from 0x0 in the reserved nibble shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Invalid_SFE_Reception</srcid><srcstatus/><internalId>942</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_SF_E_1</srcid><srcstatus/><internalId>968</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_259</srcid><srcstatus/><internalId>670</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00287</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>44</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00287.4</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If acknowledgement is configured and an SF-E with invalid DL field value (according to
        FrArTp.ASR42.SWS_FrArTp_00287.2) or Res field value arrives, an AF with a negative
        acknowledgement shall be sent back to the sender.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00287</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>45</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00034</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The FrArTp takes the decision whether a message has to be
        segmented based on the message length, the possibility (depending on per channel
        configuration) to use SF-E frames and the size of the assigned N-PDU (see also
        section 7.4.1). Therefore, to start the transfer of such a long message,
        a First Frame is used.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00034.1</srcid><srcstatus/><internalId>47</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00034.2</srcid><srcstatus/><internalId>48</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00034.3</srcid><srcstatus/><internalId>49</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00091</srcid><srcstatus/><internalId>177</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>46</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00034.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        In FRARTP_ISO mode, to start the transmission of a message too long for an SF-I, an FF-I is used.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_TriggerTransmit_EnoughBuffer</srcid><srcstatus/><internalId>883</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception</srcid><srcstatus/><internalId>943</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transfer</srcid><srcstatus/><internalId>948</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SduMng.c_108</srcid><srcstatus/><internalId>813</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00034</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>47</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00034.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        In FRARTP_ISO6 mode, to start the transmission of a message too long for an SF-I, an FF-I is used.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.FrArTpLm</srcid><srcstatus/><internalId>546</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00034</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>48</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00034.3</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        In FRARTP_L4G mode, to start the transmission of a message too long for an SF-E, an FF-E is used.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_TriggerTransmit_EnoughBuffer</srcid><srcstatus/><internalId>883</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SduMng.c_108</srcid><srcstatus/><internalId>813</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00034</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>49</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00035</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        To enable compliance with ISO 15765-2 on the one hand
        and to allow messages longer than 2^12-1 Byte on the other hand, there are several
        types of First Frames.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00237</srcid><srcstatus/><internalId>52</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00238</srcid><srcstatus/><internalId>59</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>50</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00036</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        It can be statically per channel configured, whether a First Frame can also start a
        segmented message in a 1:n connection.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.SegmentedCommunication</srcid><srcstatus/><internalId>539</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>51</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00237</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        An FF-I looks as follows:<pre>
        +------------+-------+-------+-------+---------------------------------------+
        | FT (4 Bit) |      DL (12 Bit)      |                Data                   |
        +------------+-------+-------+-------+---------------------------------------+
        |           PCI (2 Byte )            |    Length depending on configuration  |
        +--------------------+---------------+---------------------------------------+</pre>
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception</srcid><srcstatus/><internalId>943</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transfer</srcid><srcstatus/><internalId>948</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_FF</srcid><srcstatus/><internalId>965</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_188</srcid><srcstatus/><internalId>662</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_226</srcid><srcstatus/><internalId>709</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_301</srcid><srcstatus/><internalId>717</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00035</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>52</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00037</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        For a FF-I, the FT field shall be set to 0x1.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception</srcid><srcstatus/><internalId>943</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transfer</srcid><srcstatus/><internalId>948</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_FF</srcid><srcstatus/><internalId>965</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_493</srcid><srcstatus/><internalId>692</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_228</srcid><srcstatus/><internalId>710</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>53</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00299</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The DL field contains the length of the whole message.
      </description>
      <comment>
        Due to the 12 bit length of this field, messages up to 2^12 - 1 Bytes can be transferred.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception_BlockSizeZero</srcid><srcstatus/><internalId>893</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transfer</srcid><srcstatus/><internalId>948</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_188</srcid><srcstatus/><internalId>662</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_301</srcid><srcstatus/><internalId>717</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>54</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00039</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Incoming FF-I frames with DL = 0x000 shall be ignored. Moreover, if the DL value is lower than
        the possible (from the PDU size, the addressing type and the channel specific Long Messages switch
        derivable) payload of a SF, the frame shall also be ignored.
        If acknowledgement is configured, in all the cases above additionally an AF with a negative
        acknowledgement shall be sent back to the sender.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00039.1</srcid><srcstatus/><internalId>56</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00039.2</srcid><srcstatus/><internalId>57</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00039.3</srcid><srcstatus/><internalId>58</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>55</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00039.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Incoming FF-I frames with DL = 0x000 shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_FF_Error_Handling</srcid><srcstatus/><internalId>896</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_FF_1</srcid><srcstatus/><internalId>988</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_CF_DL0</srcid><srcstatus/><internalId>1064</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_198</srcid><srcstatus/><internalId>663</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>56</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00039.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If the DL value of an incoming FF-I is lower than the possible (from the PDU size, the
        addressing type and the channel specific Long Messages switch derivable) payload of an SF-I,
        the frame shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_FF_Error_Handling</srcid><srcstatus/><internalId>896</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_FF_0</srcid><srcstatus/><internalId>987</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_181</srcid><srcstatus/><internalId>660</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_200</srcid><srcstatus/><internalId>664</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>57</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00039.3</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If acknowledgement is configured and the DL field of an incoming FF-I is invalid, an AF with
        a negative acknowledgement shall be sent back to the sender.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>58</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00238</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        An FF-E looks as follows:<pre>
        +-----------+-----------+---------------------------+-----------------------------------+
        | FT(4 Bit) | Res(4 Bit)|      DL (32 Bit)          |        Data                       |
        +-----------+-----------+---------------------------+-----------------------------------+
        |                     PCI (5 Byte)                  | Length depending on configuration |
        +-----------------------+------+------+------+------+-----------------------------------+</pre>
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Transfer_FFE</srcid><srcstatus/><internalId>947</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_FF_E</srcid><srcstatus/><internalId>974</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_320</srcid><srcstatus/><internalId>678</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_218</srcid><srcstatus/><internalId>707</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_293</srcid><srcstatus/><internalId>716</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.EB.FFE.FRAME_LENGTH</srcid><srcstatus/><internalId>420</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00035</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00009.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>59</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00054</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The DL field of an FF-E is 4 Byte long, so it allows transporting up to 2^32 - 1 bytes.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00054.1</srcid><srcstatus/><internalId>61</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00054.2</srcid><srcstatus/><internalId>62</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>60</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00054.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The DL field of an FF-E is 4 Byte long, if module is build with UINT32
        it allows transporting messages larger than (2^16 - 1) and up to 2^32 - 1 bytes.
        When transmitting the message larger than 2^16 - 1, FrArTp_Transmit shall return E_OK,
        and FF-E shall have embedded length encoded on 4 bytes.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Segmented_Transmission_MaxDL</srcid><srcstatus/><internalId>931</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00054</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>61</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00054.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The DL field of an FF-E is 4 Byte long, if module is build with UINT32
        it allows transporting messages larger than (2^16 - 1) and up to 2^32 - 1 bytes.
        When receiving the message larger than 2^16 - 1, FrArTp_RxIndication shall decode
        FF-E embedded message encoded on 4 bytes and initiate start of a new reception.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Segmented_Reception_MaxDL</srcid><srcstatus/><internalId>895</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00054</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>62</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00055</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The FT field of an FF-E is set to 0x5.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_FF_E</srcid><srcstatus/><internalId>974</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_514</srcid><srcstatus/><internalId>695</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_220</srcid><srcstatus/><internalId>708</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>63</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00056</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The Res field (reserved) of an FF-E is set to 0x0.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_FF_E_1</srcid><srcstatus/><internalId>976</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_311</srcid><srcstatus/><internalId>676</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_220</srcid><srcstatus/><internalId>708</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>64</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00057</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If the FR_DL value is lower than the possible (from the PDU size and the
        addressing type derivable) payload of an SF, the frame shall be ignored.
        If acknowledgement is configured for the corresponding channel, an AF with a
        negative acknowledgement shall be sent back to the sender.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00057.1</srcid><srcstatus/><internalId>66</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00057.2</srcid><srcstatus/><internalId>67</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>65</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00057.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If the DL value of an FF-E can fit in SF-E (derivable from the PDU size and
        the addressing type), received FF-E shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_FFE_Error_Handling</srcid><srcstatus/><internalId>897</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_FF_E_2</srcid><srcstatus/><internalId>977</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_FF_E_3</srcid><srcstatus/><internalId>978</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_FF_E_4</srcid><srcstatus/><internalId>979</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_FF_E_5</srcid><srcstatus/><internalId>980</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_344</srcid><srcstatus/><internalId>680</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>65</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>66</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00057.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If an FF-E with invalid DL value is received and acknowledgement is configured for the
        corresponding channel, an AF with a negative acknowledgement shall be sent back to the sender.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>65</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>67</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00058</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If no error occurred, an FF-x is followed by Consecutive Frames until the whole message is
        transmitted.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00058.1</srcid><srcstatus/><internalId>69</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00058.2</srcid><srcstatus/><internalId>70</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>68</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00058.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If no error occurred, an FF-I is followed by Consecutive Frames until the whole message is
        transmitted.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transfer</srcid><srcstatus/><internalId>948</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_234</srcid><srcstatus/><internalId>711</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00058</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>69</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00058.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If no error occurred, an FF-E is followed by Consecutive Frames until the whole message is
        transmitted.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Segmented_Transmission_With_Reception</srcid><srcstatus/><internalId>929</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_234</srcid><srcstatus/><internalId>711</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00058</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>70</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00059</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If configured for the specific channel, a Consecutive Frame can also appear in a 1:n
        connection.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.SegmentedCommunication</srcid><srcstatus/><internalId>539</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>71</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00239</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        A CF looks as follows:<pre>
        +------------+------------+------------------------------------------------------+
        | FT (4 Bit) | SN (4 Bit) |                             Data                     |
        +------------+------------+------------------------------------------------------+
        |      PCI (1 Byte )      |            Length depending on configuration         |
        +-------------------------+------------------------------------------------------+</pre>
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception</srcid><srcstatus/><internalId>943</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transfer</srcid><srcstatus/><internalId>948</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_CF</srcid><srcstatus/><internalId>973</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_229</srcid><srcstatus/><internalId>667</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_239</srcid><srcstatus/><internalId>712</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>72</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00239.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        A CF2 looks as follows:<pre>
        +------------+------------+------------------------------------------------------+
        | FT (4 Bit) | SN (4 Bit) |                             Data                     |
        +------------+------------+------------------------------------------------------+
        |      PCI (1 Byte )      |            Length depending on configuration         |
        +-------------------------+------------------------------------------------------+</pre>
      </description>
      <comment>
        Note that CF2 frames are only required for the Retry mechanism.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.RetryFunctionality</srcid><srcstatus/><internalId>537</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>73</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00060</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The FT field again states the frame type, for a CF it shall be set to 0x2,
        for a CF2 it shall be 0x6 (CF2 frames are Not compliant to ISO 15765-2).
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00060.1</srcid><srcstatus/><internalId>75</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00060.2</srcid><srcstatus/><internalId>76</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>74</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00060.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        For a CF, the FT field shall be set to 0x2.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception</srcid><srcstatus/><internalId>943</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transfer</srcid><srcstatus/><internalId>948</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_CF</srcid><srcstatus/><internalId>973</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_500</srcid><srcstatus/><internalId>693</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_241</srcid><srcstatus/><internalId>713</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00060</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>74</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>75</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00060.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        For a CF2, the FT field shall be set to 0x6.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.RetryFunctionality</srcid><srcstatus/><internalId>537</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00060</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>74</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>76</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00061</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The SN (Sequence Number) field gives the current sequence number of
        the Consecutive Frame. Please note that the SN of the CF that immediately
        follows the FF-x is set to 1 and then incremented with each frame
        until it wraps around to 0 and so on.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00061.1</srcid><srcstatus/><internalId>78</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00061.2</srcid><srcstatus/><internalId>79</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>77</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00061.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The SN of the CF that immediately follows the FF-x is set to 1 and then
        incremented with each frame.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transfer</srcid><srcstatus/><internalId>948</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_866</srcid><srcstatus/><internalId>764</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_714</srcid><srcstatus/><internalId>793</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_889</srcid><srcstatus/><internalId>802</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00061</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>78</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00061.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The SN of the CF that immediately follows the CF with SN 0xF shall be set to 0.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transfer_BlockSizeZero</srcid><srcstatus/><internalId>922</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_700</srcid><srcstatus/><internalId>757</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_891</srcid><srcstatus/><internalId>803</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00061</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>79</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00063</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If no acknowledgement is configured, then in case of a wrong SN, i.e. after SN x
        does not follow SN x+1, the transfer shall be aborted and within PduR_FrArTpRxIndication
        the result E_NOT_OK shall be returned.
        If acknowledgement is configured, after the block end, a negative acknowledgement
        shall take place and then the transfer shall be aborted as described above.
        If Retry is configured too, then the transfer shall not be aborted but
        the Retry shall take place (up to FrArTpMaxRn times).
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00063.1</srcid><srcstatus/><internalId>81</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00063.2</srcid><srcstatus/><internalId>82</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00063.3</srcid><srcstatus/><internalId>83</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>80</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00063.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If a CF with wrong SN is received and no acknowledgement is configured, the transfer shall
        be aborted and within PduR_FrArTpRxIndication the result E_NOT_OK shall be returned.
      </description>
      <comment>
        In the current implementation the transfer is immediately aborted.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception_WrongSN</srcid><srcstatus/><internalId>898</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_302</srcid><srcstatus/><internalId>748</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_750</srcid><srcstatus/><internalId>761</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00063</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>81</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00063.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If a CF with wrong SN is received and acknowledgement (without retry) is configured, after
        the block end, a negative acknowledgement shall take place, then the transfer shall be
        aborted and within PduR_FrArTpRxIndication the result E_NOT_OK shall be returned.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00063</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>82</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00063.3</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If a CF with wrong SN is received and acknowledgement with retry is configured, then the
        transfer shall not be aborted but the Retry shall take place (up to FrArTpMaxRn times).
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.RetryFunctionality</srcid><srcstatus/><internalId>537</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00063</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>83</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00064</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        A Flow Control frame is used in segmented 1:1 connections (see section 7.2.1.1).
        Thus, it cannot appear in a 1:n connection.
        It allows the receiver to send information to the sender.
        It is sent after reception of an FF-x and after the last CF of a block
        if no error occurred.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Encode</tag>
        <tag>Unit:Decode</tag>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00064.1</srcid><srcstatus/><internalId>85</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00064.2</srcid><srcstatus/><internalId>86</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>84</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00064.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        In a 1:1 connection, the receiver transmits an FC frame after
        it receives an FF-x, or the last CF of a block if no error occurred.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Encode</tag>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception_BlockSizeZero</srcid><srcstatus/><internalId>893</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Segmented_Reception</srcid><srcstatus/><internalId>894</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception</srcid><srcstatus/><internalId>943</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_406</srcid><srcstatus/><internalId>721</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_597</srcid><srcstatus/><internalId>732</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_558</srcid><srcstatus/><internalId>752</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_729</srcid><srcstatus/><internalId>759</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>84</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>85</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00064.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        In a 1:1 connection, the sender expects reception of an FC after
        it transmits an FF-x, or the last CF of a block if no error occurred.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transfer_BlockSizeZero</srcid><srcstatus/><internalId>922</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transfer_1</srcid><srcstatus/><internalId>949</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_521</srcid><srcstatus/><internalId>696</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_310</srcid><srcstatus/><internalId>784</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_350</srcid><srcstatus/><internalId>786</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_612</srcid><srcstatus/><internalId>790</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_718</srcid><srcstatus/><internalId>794</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_842</srcid><srcstatus/><internalId>798</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_981</srcid><srcstatus/><internalId>806</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>84</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>86</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00240</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        An FC frame looks as follows:<pre>
        +-----------+-----------+-----------+-----------+-----------+-----------+
        | FT(4 Bit) | FS(4 Bit) |      BS (8 Bit)       |      STmin (8 Bit)    |
        +-----------+-----------+-----------+-----------+-----------+-----------+
        |                           PCI (3 Byte )                               |
        +-----------------------+-----------------------+-----------------------+</pre>
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception</srcid><srcstatus/><internalId>943</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_FC_CTS</srcid><srcstatus/><internalId>961</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_FC_WT</srcid><srcstatus/><internalId>962</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_FC_OVFLW</srcid><srcstatus/><internalId>963</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_373</srcid><srcstatus/><internalId>682</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_348</srcid><srcstatus/><internalId>718</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>87</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00065</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        A Flow Control frame only consists of Protocol Control Information.
      </description>
      <comment>
        This requirement is informational only. It does not state a functional requirement.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>88</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00066</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The FT field for Flow control frames shall be set to 0x3.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception</srcid><srcstatus/><internalId>943</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_521</srcid><srcstatus/><internalId>696</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_358</srcid><srcstatus/><internalId>719</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>89</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00067</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The FS field, for an FC frame, may contain the following three flow status
        values (see also section 7.2.1.1):<br/>
        * CTS (value 0x0): Clear To Send
        The sender can continue transmitting the message.<br/>
        * WT (value 0x1): Wait
        The sender shall wait for another FC frame (and therefore restart
        its timer FrArTpTimeoutBs). If the number of consecutive Flow Control
        frames with FS = WT reaches a per channel defined maximum, the transfer
        shall be aborted.<br/>
        * OVFLW (value 0x2): Overflow
        The transfer shall be aborted, because the receiver has not enough buffer
        for the whole message available (according to the value of the DL field of
        the FF-x).
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00067.1</srcid><srcstatus/><internalId>91</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00067.2</srcid><srcstatus/><internalId>92</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00067.3</srcid><srcstatus/><internalId>93</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00067.4</srcid><srcstatus/><internalId>94</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>90</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00067.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If an FC frame with FS field set to CTS (value 0x0) is received after transmitting
        a block of CFs, the sender shall continue transmitting the message.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transfer_MultipleFC</srcid><srcstatus/><internalId>926</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_377</srcid><srcstatus/><internalId>683</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_317</srcid><srcstatus/><internalId>785</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_1075</srcid><srcstatus/><internalId>808</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00067</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>90</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>91</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00067.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If a FC frame with FS field set to WT (value 0x1) is received after transmitting
        a block of CFs, the sender shall restart its timer FrArTpTimeoutBs.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transfer_1</srcid><srcstatus/><internalId>949</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transfer_2</srcid><srcstatus/><internalId>950</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_400</srcid><srcstatus/><internalId>687</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_353</srcid><srcstatus/><internalId>787</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_788</srcid><srcstatus/><internalId>797</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00067</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>90</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>92</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00067.3</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If the number of consecutive Flow Control frames with FS field set to WT (value 0x1) reaches
        FrArTpMaxWft, the transfer shall be aborted.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_FrArTpTimeBr</srcid><srcstatus/><internalId>912</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_FrArTpTimeBr_CF</srcid><srcstatus/><internalId>913</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_614</srcid><srcstatus/><internalId>754</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00067</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>90</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00295</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>280</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>93</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00067.4</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If an FC frame with FS field set to OVFLW (value 0x2) is received, the transfer
        shall be aborted, because the receiver has not enough buffer for
        the whole message available (according to the value of the DL field of
        the FF-x).
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transfer_OVFLW</srcid><srcstatus/><internalId>951</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_407</srcid><srcstatus/><internalId>688</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_390</srcid><srcstatus/><internalId>788</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00067</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>90</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00117</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>283</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>94</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00068</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        BS field of an FC frame states the block size (the number of CFs between
        the Flow Control frames).
        If no acknowledgement is configured, all values from 0x00 to 0xFF are valid
        whereas 0x00 indicates that no more flow control shall take place and
        the rest of the pending message will be transmitted within one big block.
        Otherwise, only the values 0x01 - 0x10 are valid.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00068.1</srcid><srcstatus/><internalId>96</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00068.2</srcid><srcstatus/><internalId>97</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00068.3</srcid><srcstatus/><internalId>98</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>95</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00068.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If no acknowledgement is configured and the BS field of an FC frame is set to 0x00,
        the rest of the pending message shall be transmitted within one big block.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception_BlockSizeZero</srcid><srcstatus/><internalId>893</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Segmented_Reception</srcid><srcstatus/><internalId>894</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transfer_BlockSizeZero</srcid><srcstatus/><internalId>922</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transfer_1</srcid><srcstatus/><internalId>949</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_731</srcid><srcstatus/><internalId>760</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_526</srcid><srcstatus/><internalId>789</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_617</srcid><srcstatus/><internalId>791</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_844</srcid><srcstatus/><internalId>799</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_881</srcid><srcstatus/><internalId>801</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_1047</srcid><srcstatus/><internalId>807</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00068</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>96</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00068.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If acknowledgement is enabled, the valid values for the BS field of
        an FC frame are 0x01 - 0x10.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00068</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>97</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00068.3</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If acknowledgement is disabled, the valid values for the BS field of
        an FC frame are 0x00 - 0xFF.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception_BlockSizeZero</srcid><srcstatus/><internalId>893</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Segmented_Reception</srcid><srcstatus/><internalId>894</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_383</srcid><srcstatus/><internalId>685</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00068</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>98</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00069</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The last byte of an FC frame contains STmin, which defines the minimum gap between two CFs.
        The valid values range from 0x00 to 0x7F and from 0xF1 to 0xF9.
        The range from 0x00 to 0x7F specifies the minimum gap in milliseconds (0ms .. 127ms),
        the one from 0xF1 to 0xF9 defines the gap in microseconds
        (100 micros, 200 micros, .. 900micros).
        The supported values of STmin are restricted by the placement of N-PDUs in FlexRay cycles,
        and are subject to the jitter created by the placement of N-PDUs in the slots of a cycle.
      </description>
      <comment>
        This requirement is informational only. Invalid values for the STmin field are handled by
        FrArTp.ASR42.SWS_FrArTp_00245.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>99</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00285</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Error Handling - FS field of an FC frame:
        If acknowledgement with Retry is configured, instead of abortion of the transfer,
        the frame shall be ignored.
      </description>
      <comment>
        This is being interpreted as:
        If a FC frame with an invalid FS value (greater than 0x2) is received,
        on FRARTP_ISO or FRARTP_L4G connection, when FC is expected:
        - The frame shall be ignored if acknowledgement with retry is configured.
        - The transmission shall be aborted and PduR_FrArTpTxConfirmation shall be called with
          E_NOT_OK if acknowledgement with retry is not configured.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00285.1</srcid><srcstatus/><internalId>101</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00285.2</srcid><srcstatus/><internalId>102</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00083.11</srcid><srcstatus/><internalId>137</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00083.12</srcid><srcstatus/><internalId>138</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00283.11</srcid><srcstatus/><internalId>153</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00283.12</srcid><srcstatus/><internalId>154</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>100</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00285.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If a FC frame with an invalid FS value (greater than 0x2) is received,
        on FRARTP_ISO or FRARTP_L4G connection, when FC is expected:
        - The transmission shall be aborted and PduR_FrArTpTxConfirmation shall be called with
          E_NOT_OK if acknowledgement with retry is not configured.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transmission_InvalidFS</srcid><srcstatus/><internalId>928</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_414</srcid><srcstatus/><internalId>689</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00285</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>100</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>101</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00285.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If a FC frame with an invalid FS value (greater than 0x2) is received,
        on FRARTP_ISO or FRARTP_L4G connection, when FC is expected:
        - The frame shall be ignored if acknowledgement with retry is configured.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00285</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>100</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>102</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00244</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        For the BS field of an FC frame, all values are valid if no acknowledgement is configured.
        Otherwise, only the values from 0x1 to 0x10 are valid.
        If no Retry is configured in the latter case, the transfer shall be
        aborted and PduR_FrArTpTxConfirmation shall be called with E_NOT_OK,
        otherwise the frame shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00244.1</srcid><srcstatus/><internalId>104</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00244.2</srcid><srcstatus/><internalId>105</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>103</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00244.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If acknowledgement without retry is configured and an FC frame with an invalid BS value (not
        in 0x1 to 0x10) is received, the transfer shall be aborted and PduR_FrArTpTxConfirmation
        shall be called with E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>104</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00244.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If acknowledgement with retry is configured and an FC frame with an invalid BS value (not
        in 0x1 to 0x10) is received, the frame shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.RetryFunctionality</srcid><srcstatus/><internalId>537</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00244</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>105</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00245</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If an FC frame with invalid value for the STmin field is received
        (0x80 to 0xF0 and 0xFA to 0xFF), the value 0x7F shall be taken instead.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_FC_1</srcid><srcstatus/><internalId>982</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_SM_TX_SEGMENTED_TRANSMISSION_STMIN_DEFAULT</srcid><srcstatus/><internalId>1093</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_387</srcid><srcstatus/><internalId>686</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>106</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00072</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If acknowledgement is configured, every block of CFs is in the case of
        a positive acknowledgement acknowledged by an FC frame (as it is in
        unacknowledged connections).
        Additionally an SF-x, the last block of CFs is acknowledged by an AF
        in 1:1 connections, and, in the case of a negative acknowledgement,
        also other blocks.
        This frame type cannot appear in a 1:n connection.
        This type of frame looks similar to an FC frame (section 7.3.5) but it has
        an additional byte.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>107</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00241</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        An AF looks as follows:<pre>
        +-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+
        | FT(4 Bit) | FS(4 Bit) |       BS (8 Bit)      |      STmin (8 Bit)    | ACK(4 Bit)| SN(4 Bit) |
        +-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+
        |                                    PCI (4 Byte )                                              |
        +-----------------------+-----------------------+-----------------------+-----------------------+ </pre>
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>108</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00073</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        An AF is identified by the value 0x7 of the FT field.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>109</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00074</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The FS field of an AF is the same as in an FC frame.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>110</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00075</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The BS field of an AF frame can only be set to the values 0x01 to 0x10 due to
        the 4 Bit Sequence Number counter in a CF (section 7.3.4).
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>111</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00076</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The STmin field of an AF is the same as in FC frames.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>112</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00077</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The ACK field of an AF gives the type of the acknowledgement, Positive (0x0)
        or Negative (0x1). All other values are reserved.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>113</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00078</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The SN field of an AF contains the number of the first faulty CF within
        the last block. All values are valid.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>114</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00284</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        FS field of an AF frame.
        In a segmented transfer, all values higher than 0x2 shall lead to the abortion of the
        transfer and PduR_FrArTpTxConfirmation shall be called with the result E_NOT_OK.
        If additionally Retry is configured, such values shall not lead to the abortion of the
        transfer. Instead, the frame shall be ignored.
        If additionally Retry is configured, such values shall not lead to the abortion of the
        transfer. Instead, the frame shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.RetryFunctionality</srcid><srcstatus/><internalId>537</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>115</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00251</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        FS field of an AF frame with Acknowledgement.
        In case an AF with negative acknowledgement and FS = OVFLW arrives in an
        unsegmented acknowledged transfer or at the end of an segmented acknowledged
        transfer at the sender, regardless of Retry being configured or not, the transfer shall
        be aborted and PduR_FrArTpTxConfirmation shall be called with the result
        E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>116</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00246</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        BS field of an AF frame.
        The value 0x00 and all values higher than 0x10 shall cause the abortion of the
        transfer and PduR_FrArTpTxConfirmation shall be called with the result E_NOT_OK.
        If additionally Retry is configured, such values shall not lead to the abortion
        of the transfer. Instead, the frame shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>117</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00247</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        STmin field of an AF frame.
        The invalid values of this parameter range from 0x80 to 0xF0 and from 0xFA to
        0xFF. If such a value is received, the value 0x7F shall be taken instead.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>118</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00248</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        ACK field of an AF frame.
        Values higher than 0x1 are invalid and shall cause the abortion of the transfer and
        PduR_FrArTpTxConfirmation shall be called with the result E_NOT_OK.
        If additionally Retry is configured, such values shall not lead to the abortion of the
        transfer. Instead, the frame shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>119</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00249</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        SN field of an AF frame.
        If a frame arrives that contains an SN of a CF that has not been transmitted within
        the block, e.g. block size is 10 and this field has value 12, the transfer shall be
        aborted and PduR_FrArTpTxConfirmation shall be called with the result E_NOT_OK.
        If additionally Retry is configured, the transfer shall not be aborted.
        Instead, the frame shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>120</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00250</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If for the channel no acknowledgement is configured, an AF frame type shall be ignored.
        In an unsegmented acknowledged transfer, the expected value for the fields BS, STmin,
        and SN is 0x0. Other values shall be tolerated.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00250.1</srcid><srcstatus/><internalId>122</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00250.2</srcid><srcstatus/><internalId>123</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>121</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00250.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If for the channel no acknowledgement is configured, an AF frame type shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00082.1</srcid><srcstatus/><internalId>125</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00250</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>122</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00250.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        In an unsegmented acknowledged transfer, the expected value, of an AF frame,
        for the fields BS, STmin, and SN is 0x0. Other values shall be tolerated.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00250</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>123</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00082</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        A value of the FR_FT field higher than 0x7 shall always be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00082.1</srcid><srcstatus/><internalId>125</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.RetryFunctionality</srcid><srcstatus/><internalId>537</internalId></linkedfrom><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>124</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00082.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If no acknowledgement with retry is configured, the frame with value of
        the FT field higher than 0x5 shall always be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_FT_Error_Handling</srcid><srcstatus/><internalId>944</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_Invalid_FT</srcid><srcstatus/><internalId>983</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_528</srcid><srcstatus/><internalId>697</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00082</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00250.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00252.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>125</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00083</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If the corresponding channel and connection is set to be ISO 15765-2 compliant,
        then the following table holds:<pre>
        +--------------+-------------------+-------------------+---------------+-----------------+
        |   TP Layer   |        SF-I       |     FF-I (1:1)    |    CF (1:1)   |        FC       |
        |    Status    |                   |                   |               |                 |
        +--------------+-------------------+-------------------+---------------+-----------------+
        | Segmented    | If reception      | If reception      | If reception  | If awaited      |
        | Transmit     | is in progress    | is in progress    | is in         | then            |
        | within this  | within            | within the        | progress      | process,        |
        | connection   | the connection,   | connection,       | within the    | otherwise       |
        | in progress  | see               | see               | connection,   | ignore it.      |
        |              | corresponding     | corresponding     | see           |                 |
        |              | cell below.       | cell below.       | corresponding |                 |
        |              | Otherwise,        | Otherwise,        | cell below.   |                 |
        |              | process           | process           | Otherwise,    |                 |
        |              | the SF-I as       | the FF-I          | ignore it.    |                 |
        |              | start of          | as start of       |               |                 |
        |              | a new reception.  | a new reception.  |               |                 |
        +--------------+-------------------+-------------------+---------------+-----------------+
        | Segmented    | Terminate         | Terminate the     | If awaited    | If transmission |
        | Receive      | the current       | current           | then process, | is in progress  |
        | within this  | reception,        | reception,        | otherwise     | within the      |
        | connection   | report a          | report            | ignore        | connection,     |
        | in progress  | a PduR_Fr         | a PduR_Fr         |               | see             |
        |              | ArTpRxIndication  | ArTpRxIndication  |               | corresponding   |
        |              | with the result   | with the result   |               | cell above.     |
        |              | E_NOT_OK          | E_NOT_OK          |               | Otherwise       |
        |              | and process       | and process       |               | ignore it       |
        |              | the SF-I as       | the FF-I as       |               |                 |
        |              | the start of      | the start of      |               |                 |
        |              | a new reception.  | a new reception.  |               |                 |
        +--------------+-------------------+-------------------+---------------+-----------------+
        | Idle         | Process the SF-I  | Process the FF-I  | Ignore        | Ignore          |</pre>
        Other: Ignore
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00083.1</srcid><srcstatus/><internalId>127</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00083.2</srcid><srcstatus/><internalId>128</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00083.3</srcid><srcstatus/><internalId>129</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00083.4</srcid><srcstatus/><internalId>130</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00083.5</srcid><srcstatus/><internalId>131</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00083.6</srcid><srcstatus/><internalId>132</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00083.7</srcid><srcstatus/><internalId>133</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00083.8</srcid><srcstatus/><internalId>134</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00083.9</srcid><srcstatus/><internalId>135</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00083.10</srcid><srcstatus/><internalId>136</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00083.11</srcid><srcstatus/><internalId>137</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00083.12</srcid><srcstatus/><internalId>138</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00083.13</srcid><srcstatus/><internalId>139</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00083.14</srcid><srcstatus/><internalId>140</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00083.15</srcid><srcstatus/><internalId>141</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>126</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00083.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpLm is set to FRARTP_ISO and an SF-I frame is received on a connection with
        a segmented transmit and no segmented receive in progress, the SF-I shall be processed
        as start of a new reception.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transmission_With_Reception</srcid><srcstatus/><internalId>924</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_256</srcid><srcstatus/><internalId>745</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>127</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00083.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpLm is set to FRARTP_ISO and an SF-I frame is received on a connection with
        a segmented receive in progress:<br/>
          1. terminate the current reception,<br/>
          2. report a PduR_FrArTpRxIndication with the result E_NOT_OK and<br/>
          3. process the SF-I as the start of a new reception.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Preempted_SF_Reception_FF_CF__CF</srcid><srcstatus/><internalId>899</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Preempted_SF_Reception_FF__CF</srcid><srcstatus/><internalId>900</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Preempted_SF_Reception_FF_BS_CF__CF</srcid><srcstatus/><internalId>901</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Preempted_SF_Reception_FF_BS__FC</srcid><srcstatus/><internalId>902</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Preempted_SF_Reception_FF__FC</srcid><srcstatus/><internalId>903</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_240</srcid><srcstatus/><internalId>744</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>128</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00083.3</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpLm is set to FRARTP_ISO and a SF-I frame is received on an idle connection,
        the SF-I shall be processed as start of a new reception.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Reception</srcid><srcstatus/><internalId>887</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_256</srcid><srcstatus/><internalId>745</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>129</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00083.4</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpLm is set to FRARTP_ISO and an FF-I frame is received on a connection with
        a segmented transmit and no segmented receive in progress, the FF-I shall be processed
        as start of a new reception.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transmission_With_Reception</srcid><srcstatus/><internalId>924</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Full_Duplex</srcid><srcstatus/><internalId>927</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_1243</srcid><srcstatus/><internalId>770</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>130</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00083.5</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpLm is set to FRARTP_ISO and an FF-I frame is received on a connection with
        a segmented receive in progress:<br/>
          1. terminate the current reception,<br/>
          2. report a PduR_FrArTpRxIndication with the result E_NOT_OK and<br/>
          3. process the FF-I as the start of a new reception.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Preempted_FF_Reception_FF_CF__CF</srcid><srcstatus/><internalId>904</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Preempted_FF_Reception_FF__CF</srcid><srcstatus/><internalId>905</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Preempted_FF_Reception_FF_FF__CF_CF</srcid><srcstatus/><internalId>906</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_269</srcid><srcstatus/><internalId>746</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>131</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00083.6</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpLm is set to FRARTP_ISO and a FF-I frame is received on an idle connection,
        the FF-I shall be processed as start of a new reception.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception</srcid><srcstatus/><internalId>943</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_1243</srcid><srcstatus/><internalId>770</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>132</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00083.7</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpLm is set to FRARTP_ISO and a CF is received on a connection with
        a segmented transmit and no segmented receive in progress, the CF shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transmission_With_Reception</srcid><srcstatus/><internalId>924</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_1278</srcid><srcstatus/><internalId>774</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>133</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00083.8</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpLm is set to FRARTP_ISO, a CF is received on a connection with
        a segmented receive in progress and the CF is expected, the CF shall be processed.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Preempted_FF_Reception_FF_CF__CF</srcid><srcstatus/><internalId>904</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Preempted_FF_Reception_FF__CF</srcid><srcstatus/><internalId>905</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Preempted_FF_Reception_FF_FF__CF_CF</srcid><srcstatus/><internalId>906</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_302</srcid><srcstatus/><internalId>748</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>134</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00083.9</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpLm is set to FRARTP_ISO, a CF is received on a connection with
        a segmented receive in progress and the CF is not expected, the CF shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Preempted_CF_Reception_FF__FC_CF</srcid><srcstatus/><internalId>907</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Preempted_CF_Reception_FF_BS__FC</srcid><srcstatus/><internalId>908</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_CF_UNEXPECTED</srcid><srcstatus/><internalId>1059</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_302</srcid><srcstatus/><internalId>748</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>135</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00083.10</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpLm is set to FRARTP_ISO and a CF is received on an idle connection,
        the CF shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Idle_CF_Reception</srcid><srcstatus/><internalId>909</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_1278</srcid><srcstatus/><internalId>774</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>136</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00083.11</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpLm is set to FRARTP_ISO, an FC is received on a connection with
        a segmented transmit in progress and the FC is expected, the FC shall be processed.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transmission_With_Reception</srcid><srcstatus/><internalId>924</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_310</srcid><srcstatus/><internalId>784</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00285</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>100</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>137</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00083.12</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpLm is set to FRARTP_ISO, an FC is received on a connection with
        a segmented transmit in progress and the FC is not expected, the FC shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transmission_With_Reception_FC</srcid><srcstatus/><internalId>925</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transmission_InvalidFS</srcid><srcstatus/><internalId>928</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_FC_Invalid_FS</srcid><srcstatus/><internalId>984</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_305</srcid><srcstatus/><internalId>783</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00285</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>100</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>138</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00083.13</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpLm is set to FRARTP_ISO and an FC is received on a connection with
        a segmented receive and segmented transmit in progress, if FC is expected,
        it shall be processed.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Preempted_FF_Reception_FF_CF__CF</srcid><srcstatus/><internalId>904</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Preempted_FF_Reception_FF__CF</srcid><srcstatus/><internalId>905</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Preempted_FF_Reception_FF_FF__CF_CF</srcid><srcstatus/><internalId>906</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_310</srcid><srcstatus/><internalId>784</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>139</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00083.14</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpLm is set to FRARTP_ISO and an FC is received on an idle connection,
        the FC shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Idle_FC_Reception</srcid><srcstatus/><internalId>910</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_302</srcid><srcstatus/><internalId>782</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>140</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00083.15</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpLm is set to FRARTP_ISO and a frame type other than SF-I, FF-I, CF or FC is received,
        the frame shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_FrArTpISO_SFE_FFE_CF2_AF_Reception</srcid><srcstatus/><internalId>911</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Invalid_SFE_Reception</srcid><srcstatus/><internalId>942</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_SF_E_0</srcid><srcstatus/><internalId>967</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_FF_E_0</srcid><srcstatus/><internalId>975</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_145</srcid><srcstatus/><internalId>654</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_178</srcid><srcstatus/><internalId>659</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00287.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>141</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00283</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        SF-x, FF-x, CF/CF2 and FC frames
        If the corresponding channel and connection is not set to be ISO 15765-2 compliant,
        but for use of Extended frames instead, the behavior shall be as depicted in Table 3
        [SWS_FrArTp_00083] (also for 1:n connections), with exceptions mentioned below.
        The ignoring of an FF-E shall be according to the value of FrArTpLm.
        Regarding CF and CF2 frames there is a special error handling in case Retry is
        configured (otherwise CF2 frames are ignored):
        If the sender starts a block with another frame than expected, i.e. CF instead of CF2
        or CF2 instead of CF, then the sender is doing a Retry that has not been requested
        by the receiver (maybe because of losing the FC-CTS frame on the bus). Therefore,
        the receiver always has to remember the old block size and send another FC-CTS at
        the end of this retransmitted block. Errors in the unnecessarily retransmitted block
        shall be ignored.
      </description>
      <comment>
        Note that segmented 1:n connections are not supported. Note that acknowledgement with retry
        (only case were CF2 frames are used) is not supported.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00283.1</srcid><srcstatus/><internalId>143</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00283.2</srcid><srcstatus/><internalId>144</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00283.3</srcid><srcstatus/><internalId>145</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00283.4</srcid><srcstatus/><internalId>146</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00283.5</srcid><srcstatus/><internalId>147</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00283.6</srcid><srcstatus/><internalId>148</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00283.7</srcid><srcstatus/><internalId>149</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00283.8</srcid><srcstatus/><internalId>150</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00283.9</srcid><srcstatus/><internalId>151</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00283.10</srcid><srcstatus/><internalId>152</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00283.11</srcid><srcstatus/><internalId>153</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00283.12</srcid><srcstatus/><internalId>154</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00283.13</srcid><srcstatus/><internalId>155</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00283.14</srcid><srcstatus/><internalId>156</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00283.15</srcid><srcstatus/><internalId>157</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00283.16</srcid><srcstatus/><internalId>158</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00283.17</srcid><srcstatus/><internalId>159</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>142</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00283.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpLm is set to FRARTP_L4G and an SF-E frame is received on a connection with
        a segmented transmit and no segmented receive in progress, the SF-E shall be processed
        as start of a new reception.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Segmented_Transmission_With_Reception</srcid><srcstatus/><internalId>929</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_FT_Error_Handling</srcid><srcstatus/><internalId>944</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_256</srcid><srcstatus/><internalId>745</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>143</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00283.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpLm is set to FRARTP_L4G and an SF-E frame is received on a connection with a
        segmented receive in progress:<br/>
          1. terminate the current reception,<br/>
          2. report a PduR_FrArTpRxIndication with the result E_NOT_OK and<br/>
          3. process the SF-E as the start of a new reception.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Preempted_SF_Reception_FF_CF__CF</srcid><srcstatus/><internalId>899</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Preempted_SF_Reception_FF__CF</srcid><srcstatus/><internalId>900</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Preempted_SF_Reception_FF_BS_CF__CF</srcid><srcstatus/><internalId>901</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Preempted_SF_Reception_FF_BS__FC</srcid><srcstatus/><internalId>902</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Preempted_SF_Reception_FF__FC</srcid><srcstatus/><internalId>903</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_240</srcid><srcstatus/><internalId>744</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>144</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00283.3</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpLm is set to FRARTP_L4G and a SF-E frame is received on an idle connection,
        the SF-E shall be processed as start of a new reception.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Unsegmented_Reception</srcid><srcstatus/><internalId>938</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_256</srcid><srcstatus/><internalId>745</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>145</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00283.4</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpLm is set to FRARTP_L4G and an FF-E frame is received on a connection with
        a segmented transmit and no segmented receive in progress, the FF-E shall be processed
        as start of a new reception.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Segmented_Transmission_With_Reception</srcid><srcstatus/><internalId>929</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_1243</srcid><srcstatus/><internalId>770</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>146</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00283.5</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpLm is set to FRARTP_L4G and an FF-E frame is received on a connection with
        a segmented receive in progress:<br/>
          1. terminate the current reception,<br/>
          2. report a PduR_FrArTpRxIndication with the result E_NOT_OK and<br/>
          3. process the FF-E as the start of a new reception.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Preempted_FF_Reception_FF_CF__CF</srcid><srcstatus/><internalId>904</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Preempted_FF_Reception_FF__CF</srcid><srcstatus/><internalId>905</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Preempted_FF_Reception_FF_FF__CF_CF</srcid><srcstatus/><internalId>906</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_269</srcid><srcstatus/><internalId>746</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>147</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00283.6</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpLm is set to FRARTP_L4G and a FF-E frame is received on an idle connection,
        the FF-E shall be processed as start of a new reception.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Segmented_Reception</srcid><srcstatus/><internalId>894</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_1243</srcid><srcstatus/><internalId>770</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>148</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00283.7</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpLm is set to FRARTP_L4G and a CF is received on a connection with
        a segmented transmit and no segmented receive in progress, the CF shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Segmented_Transmission_With_Reception</srcid><srcstatus/><internalId>929</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_1278</srcid><srcstatus/><internalId>774</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>149</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00283.8</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpLm is set to FRARTP_L4G, a CF is received on a connection with
        a segmented receive in progress and the CF is expected, the CF shall be processed.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Preempted_FF_Reception_FF_CF__CF</srcid><srcstatus/><internalId>904</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Preempted_FF_Reception_FF__CF</srcid><srcstatus/><internalId>905</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Preempted_FF_Reception_FF_FF__CF_CF</srcid><srcstatus/><internalId>906</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_302</srcid><srcstatus/><internalId>748</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>150</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00283.9</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpLm is set to FRARTP_L4G, a CF is received on a connection with
        a segmented receive in progress and the CF is not expected, the CF shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Preempted_CF_Reception_FF__FC_CF</srcid><srcstatus/><internalId>907</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Preempted_CF_Reception_FF_BS__FC</srcid><srcstatus/><internalId>908</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_302</srcid><srcstatus/><internalId>748</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>151</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00283.10</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpLm is set to FRARTP_L4G and a CF is received on an idle connection,
        the CF shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Segmented_Reception</srcid><srcstatus/><internalId>894</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_1278</srcid><srcstatus/><internalId>774</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>152</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00283.11</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpLm is set to FRARTP_L4G, an FC is received on a connection with
        a segmented transmit in progress and the FC is expected, the FC shall be processed.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Segmented_Transmission_With_Reception</srcid><srcstatus/><internalId>929</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Segmented_Transmission_With_Reception_FC</srcid><srcstatus/><internalId>930</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_310</srcid><srcstatus/><internalId>784</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00285</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>100</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>153</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00283.12</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpLm is set to FRARTP_L4G, an FC is received on a connection with
        a segmented transmit in progress and the FC is not expected, the FC shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transmission_InvalidFS</srcid><srcstatus/><internalId>928</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Segmented_Transmission_With_Reception</srcid><srcstatus/><internalId>929</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Segmented_Transmission_With_Reception_FC</srcid><srcstatus/><internalId>930</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_FC_E_OB_Invalid_FS</srcid><srcstatus/><internalId>985</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_FC_E_TB_Invalid_FS</srcid><srcstatus/><internalId>986</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_305</srcid><srcstatus/><internalId>783</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00285</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>100</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>154</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00283.13</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpLm is set to FRARTP_L4G and an FC is received on a connection with
        a segmented receive and segmented transmit in progress, if FC is expected,
        it shall be processed.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Preempted_FF_Reception_FF_CF__CF</srcid><srcstatus/><internalId>904</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Preempted_FF_Reception_FF__CF</srcid><srcstatus/><internalId>905</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Preempted_FF_Reception_FF_FF__CF_CF</srcid><srcstatus/><internalId>906</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_310</srcid><srcstatus/><internalId>784</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>155</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00283.14</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpLm is set to FRARTP_L4G and an FC is received on an idle connection,
        the FC shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Segmented_Reception</srcid><srcstatus/><internalId>894</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_302</srcid><srcstatus/><internalId>782</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>156</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00283.15</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpLm is set to FRARTP_L4G and a frame type other than SF-E, FF-E, CF or FC is received,
        the frame shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Segmented_Reception</srcid><srcstatus/><internalId>894</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_252</srcid><srcstatus/><internalId>669</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_304</srcid><srcstatus/><internalId>674</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>157</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00283.16</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Regarding CF and CF2 frames there is a special error handling in case Retry is
        configured (otherwise CF2 frames are ignored):
        If the sender starts a block with another frame than expected, i.e. CF instead of CF2
        or CF2 instead of CF, then the sender is doing a Retry that has not been requested
        by the receiver (maybe because of losing the FC-CTS frame on the bus). Therefore,
        the receiver always has to remember the old block size and send another FC-CTS at
        the end of this retransmitted block. Errors in the unnecessarily retransmitted block
        shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.RetryFunctionality</srcid><srcstatus/><internalId>537</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>158</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00283.17</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The behavior shall be as depicted in Table from FrArTp.ASR42.SWS_FrArTp_00083
        (also for 1:n connections.)
      </description>
      <comment>
        1:n connections are not supported for segmented transfer.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.SegmentedCommunication</srcid><srcstatus/><internalId>539</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>159</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00252</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If no acknowledgement is activated, this frame shall be ignored.
        Otherwise, on the receiver side or in idle state, these frames shall be ignored, too.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00252.1</srcid><srcstatus/><internalId>161</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00252.2</srcid><srcstatus/><internalId>162</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>160</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00252.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If no acknowledgement is activated, a received AF frame shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00082.1</srcid><srcstatus/><internalId>125</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00252</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>160</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>161</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00252.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If acknowledgement is activated, on the receiver side or in idle state, received AF frames
        shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00252</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>160</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>162</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00269</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If an AF arrives when it is expected, the action is as
        described in section 7.2.1.3 and in section error handling of section 7.3.6.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>163</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00270</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If a non-faulty AF with positive acknowledgement
        arrives during a block, it shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>164</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00271</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If a non-faulty AF with negative acknowledgement arrives during a block,
        it shall be processed depending on the activation of the Retry mechanism.
        If no Retry is configured the transfer shall be aborted.
        Otherwise, the AF shall be processed, i.e. starting with the stated sequence
        number the Retry shall take place.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>165</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00272</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If a faulty AF arrives during a block, it shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>166</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00086</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        FF-x and CF frames<br/>
        If not explicitly configured by the parameter FrArTpGrpSeg for the particular channel,
        a FF-x or CF in a 1:n connection shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00086.1</srcid><srcstatus/><internalId>168</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00086.2</srcid><srcstatus/><internalId>169</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00086.3</srcid><srcstatus/><internalId>170</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00086.4</srcid><srcstatus/><internalId>171</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00086.5</srcid><srcstatus/><internalId>172</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00086.6</srcid><srcstatus/><internalId>173</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>167</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00086.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpGrpSeg is activated for the particular
        channel, a FF-I in a 1:n connection shall be processed.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.SegmentedCommunication</srcid><srcstatus/><internalId>539</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00086</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>168</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00086.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpGrpSeg is activated for the particular
        channel, a FF-E in a 1:n connection shall be processed.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.SegmentedCommunication</srcid><srcstatus/><internalId>539</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00086</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>169</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00086.3</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpGrpSeg is activated for the particular
        channel, a CF in a 1:n connection shall be processed.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.SegmentedCommunication</srcid><srcstatus/><internalId>539</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00086</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>170</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00086.4</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpGrpSeg is deactivated for the particular
        channel, a FF-I in a 1:n connection shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_1ToN_Rx_Ignored</srcid><srcstatus/><internalId>917</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_184</srcid><srcstatus/><internalId>661</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00086</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>171</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00086.5</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpGrpSeg is deactivated for the particular
        channel, a FF-E in a 1:n connection shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_1ToN_Rx_Ignored</srcid><srcstatus/><internalId>917</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_307</srcid><srcstatus/><internalId>675</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00086</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>172</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00086.6</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpGrpSeg is deactivated for the particular
        channel, a CF in a 1:n connection shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_1ToN_Rx_Ignored</srcid><srcstatus/><internalId>917</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_226</srcid><srcstatus/><internalId>666</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00086</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>173</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00087</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        FC and AF frames<br/>
        These frame types are not allowed to appear in 1:n connections; thus, they shall be
        ignored in that case.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00087.1</srcid><srcstatus/><internalId>175</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00087.2</srcid><srcstatus/><internalId>176</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>174</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00087.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        FC frame types are not allowed to appear in 1:n connections; thus, they shall be
        ignored in that case.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_1ToN_Rx_Ignored</srcid><srcstatus/><internalId>917</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_370</srcid><srcstatus/><internalId>681</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00087</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>174</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>175</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00087.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        AF frame types are not allowed to appear in 1:n connections; thus, they shall be
        ignored in that case.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00087</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>174</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>176</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00091</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The amount of bytes of an N-PDU that is usable for payload, i.e. for the N-SDU,
        depends on the length of the PCI of the used frames, i.e. if two or four bytes
        (FrArTpAdrType) are needed to state to address information.
        The frames that are allowed to be utilized, and the payload they can carry depend on
        the value of FrArTpLm (e.g. SF-E is allowed or not, SF-I can carry 7 or 6 bytes etc.).
        In case the connection is a 1:n connection (FrArTpMultRec), the parameter FrArTpGrpSeg
        states whether segmentation is allowed or not.
        With all this information and the length of the to-be-transmitted N-SDU, the FrArTp
        can decide whether it has to segment the N-SDU or not.
      </description>
      <comment>
        Since segmented 1:n transmissions and FRARTP_ISO6 are not supported,
        FrArTpGrpSeg and FrArTpLm = FRARTP_ISO6 do no influence the decision whether to segment or
        not.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00091.1</srcid><srcstatus/><internalId>178</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00091.2</srcid><srcstatus/><internalId>179</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00091.3</srcid><srcstatus/><internalId>180</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00091.4</srcid><srcstatus/><internalId>181</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00091.5</srcid><srcstatus/><internalId>182</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00091.6</srcid><srcstatus/><internalId>183</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.FrArTpLm</srcid><srcstatus/><internalId>546</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00034</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>177</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00091.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpLm is set to FRARTP_ISO and the length of the to-be-transmitted N-SDU is greater
        than the maximum payload of an SF-I (7 bytes), segmented transmission shall be used.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_SegmentationDecision</srcid><srcstatus/><internalId>882</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SduMng.c_108</srcid><srcstatus/><internalId>813</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00091</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>178</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00091.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpLm is set to FRARTP_ISO and the length of the to-be-transmitted N-SDU is not greater
        than the maximum payload of an SF-I (7 bytes), unsegmented transmission shall be used.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_SegmentationDecision</srcid><srcstatus/><internalId>882</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SduMng.c_125</srcid><srcstatus/><internalId>815</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00091</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>179</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00091.3</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpLm is set to FRARTP_L4G and the length of the to-be-transmitted N-SDU is greater
        than the length of the associated N-PDU minus the lengths of PCI and address information of
        an SF-E, segmented transmission shall be used.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_SegmentationDecision</srcid><srcstatus/><internalId>882</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SduMng.c_108</srcid><srcstatus/><internalId>813</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00091</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>180</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00091.4</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpLm is set to FRARTP_L4G and the length of the to-be-transmitted N-SDU is not greater
        than the length of the associated N-PDU minus the lengths of PCI and address information of
        an SF-E, unsegmented transmission shall be used.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_SegmentationDecision</srcid><srcstatus/><internalId>882</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SduMng.c_125</srcid><srcstatus/><internalId>815</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00091</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>181</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00091.5</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        In case the connection is a 1:n connection (FrArTpMultRec) and the parameter FrArTpGrpSeg
        is activated, segmentation is allowed.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.SegmentedCommunication</srcid><srcstatus/><internalId>539</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00091</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>182</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00091.6</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        In case the connection is a 1:n connection (FrArTpMultRec) and the parameter FrArTpGrpSeg
        is deactivated, segmentation is not allowed.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_1ToN_Tx_Rejected</srcid><srcstatus/><internalId>936</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SduMng.c_118</srcid><srcstatus/><internalId>814</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00091</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>183</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00256</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        To achieve an even distribution of PDUs to all currently transmitting and/or
        receiving connections associated with a PDU pool, the PDUs of this pool
        shall be assigned to active connections using round robin scheduling.
        A connection that is currently receiving and transmitting may claim two PDUs
        in one round of the assignment: one for the FC, and one for an SF/FF/CF.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00256.1</srcid><srcstatus/><internalId>185</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00256.2</srcid><srcstatus/><internalId>186</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>184</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00256.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        To achieve an even distribution of PDUs to all currently transmitting and/or receiving
        connections associated with a PDU pool, the PDUs of this pool shall be assigned to active
        connections using round robin scheduling.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_ENCODE_TRANSMISSION_MULTI_CONN_SINGLE_CHAN_CONSECUTIVE</srcid><srcstatus/><internalId>997</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_ENCODE_TRANSMISSION_MULTI_CONN_SINGLE_CHAN_CANCEL</srcid><srcstatus/><internalId>998</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00256</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>185</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00256.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        A connection that is currently receiving and transmitting may claim two PDUs in one round of
        the assignment: one for the FC, and one for an SF/FF/CF.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_ENCODE_TRANSMISSION_MULTI_CONN_SINGLE_CHAN_CONSECUTIVE</srcid><srcstatus/><internalId>997</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_ENCODE_TRANSMISSION_MULTI_CONN_SINGLE_CHAN_CANCEL</srcid><srcstatus/><internalId>998</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00256</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>186</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00257</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The scheduling of PDUs from a PDU pool to active connections shall be executed in
        the context of the main function, and shall start with the connection where
        the scheduling stopped in the previous cycle.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00257.1</srcid><srcstatus/><internalId>188</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00257.2</srcid><srcstatus/><internalId>189</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>187</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00257.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The scheduling of PDUs from a PDU pool to active connections shall be executed in
        the context of the main function.
      </description>
      <comment>
        Test by checking that data is transmitted only in the next main function cycle after a transmit.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_ENCODE_FCDATATRANSMISSION</srcid><srcstatus/><internalId>993</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_699</srcid><srcstatus/><internalId>738</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00257</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>187</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>188</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00257.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The scheduling of PDUs from a PDU pool to active connections shall start with
        the connection where the scheduling stopped in the previous cycle.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_ENCODE_TRANSMISSION_MULTI_CONN_SINGLE_CHAN_CONSECUTIVE</srcid><srcstatus/><internalId>997</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_377</srcid><srcstatus/><internalId>720</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00257</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>187</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>189</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00258</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Each PDU assignment cycle shall start with the prioritized PDUs.
        In this phase, PDUs are only assigned to active connections with
        prioritized PDUs, until their needs are satisfied.
        Afterwards, PDU assignment continues for all active connections.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.PduPriority</srcid><srcstatus/><internalId>544</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>190</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00259</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        It must be ensured that the last PDU of a PDU pool within a FlexRay cycle is
        always used by the scheduling.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transmission_With_Reception_FC</srcid><srcstatus/><internalId>925</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_460</srcid><srcstatus/><internalId>723</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>191</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00260</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If not all PDUs of the pool are used, the positions of the unused PDUs
        are not relevant; gaps are allowed in any place.
      </description>
      <comment>This requirement is informational only</comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>192</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00261</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If the receiving connection is not active, and all state machines of the associated channel
        are in use, the incoming message shall be ignored.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_FF_NO_FREE_CONNECTION</srcid><srcstatus/><internalId>1057</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_479</srcid><srcstatus/><internalId>690</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>193</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00262</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        No state machine shall be used for the reception of an SF-x.
        When the corresponding connection is free, the single frame shall be forwarded
        immediately by calling PduR_FrArTpStartOfReception and, upon successful return
        of this function, PduRFrArTpCopyRxData and PduR_FrArTpRxIndication.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Reception</srcid><srcstatus/><internalId>887</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Unsegmented_Reception</srcid><srcstatus/><internalId>938</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_IDLE_OK_SF_1</srcid><srcstatus/><internalId>1001</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_SF_STARTOFRECEPTION_BUSY</srcid><srcstatus/><internalId>1054</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_FF_STARTOFRECEPTION_BUSY</srcid><srcstatus/><internalId>1055</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_240</srcid><srcstatus/><internalId>744</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>194</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00094</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The FrArTp shall be implemented to support both sending and receiving within one connection.
      </description>
      <comment>
        Excluded repetition sentence: So the same connection can be utilized for sending and receiving.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transmission_With_Reception</srcid><srcstatus/><internalId>924</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Segmented_Transmission_With_Reception</srcid><srcstatus/><internalId>929</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>195</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00095</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The behavior in case a timeout occurs depends on the value of FrArTpAckType,
        i.e. what kind of acknowledgement is configured for the corresponding channel.
      </description>
      <comment>This requirement is informational only</comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>196</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00302</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The FrArTp shall abort the connection when FrIf_Transmit returns E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception_FC_Transmit_Fail</srcid><srcstatus/><internalId>891</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_FrIfTransmit_Fail</srcid><srcstatus/><internalId>937</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_506</srcid><srcstatus/><internalId>726</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>197</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00282</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If no acknowledgement is configured and the AS timer (FrArTpTimeoutAs) expires,
        depending on the value of FrArTpMaxAs, sending shall be retried (because of still
        remaining attempts) or the transmission shall be aborted, and within PduR_TxConfirmation
        the result E_NOT_OK shall be returned.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00282.1</srcid><srcstatus/><internalId>199</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00282.2</srcid><srcstatus/><internalId>200</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>198</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00282.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If no acknowledgement is configured and the AS timer (FrArTpTimeoutAs) expires,
        the transmission shall be aborted, and within PduR_TxConfirmation
        the result E_NOT_OK shall be returned.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_FrArTpTimeAsTimeout</srcid><srcstatus/><internalId>952</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_216</srcid><srcstatus/><internalId>775</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00282</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>198</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>199</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00282.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If no acknowledgement is configured and the AS timer (FrArTpTimeoutAs) expires,
        depending on the value of FrArTpMaxAs, sending shall be retried (because of still
        remaining attempts).
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.TxRetry</srcid><srcstatus/><internalId>540</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00282</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>198</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>200</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00263</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If no acknowledgement is configured and the AR timer (FrArTpTimeoutAr) expires,
        depending on the value of FrArTpMaxAr, sending shall be retried (because of still
        remaining attempts) or the transmission shall be aborted, and within PduR_RxIndication
        the result E_NOT_OK shall be returned.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00263.1</srcid><srcstatus/><internalId>202</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00263.2</srcid><srcstatus/><internalId>203</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>201</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00263.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If no acknowledgement is configured and the AR timer (FrArTpTimeoutAr) expires,
        the transmission shall be aborted, and within PduR_RxIndication
        the result E_NOT_OK shall be returned.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_FrArTpTimeoutAr</srcid><srcstatus/><internalId>915</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_629</srcid><srcstatus/><internalId>755</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00263</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>202</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00263.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If no acknowledgement is configured and the AR timer (FrArTpTimeoutAr) expires,
        depending on the value of FrArTpMaxAr, sending shall be retried (because of still
        remaining attempts).
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.TxRetry</srcid><srcstatus/><internalId>540</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00263</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>203</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00264</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If no acknowledgement is configured and the BS timer (FrArTpTimeoutBs) expires,
        the transmission shall be aborted, and within PduR_TxConfirmation
        the result E_NOT_OK shall be returned.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_FrArTpTimeBsTimeout</srcid><srcstatus/><internalId>953</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_225</srcid><srcstatus/><internalId>776</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>204</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00265</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If the CR timer (FrArTpTimeoutCr) expires, the transmission shall be aborted,
        and within PduR_RxIndication, the result E_NOT_OK shall be returned.
        If previously in the current block a sequence error occurred, this error
        shall be reported at the block end in PduR_RxIndication.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00265.1</srcid><srcstatus/><internalId>206</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00265.2</srcid><srcstatus/><internalId>207</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>205</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00265.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If no acknowledgement is configured and the CR timer FrArTpTimeoutCr expires,
        the transmission shall be aborted, and within PduR_RxIndication,
        the result E_NOT_OK shall be returned.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_FrArTpTimeoutCr</srcid><srcstatus/><internalId>914</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_638</srcid><srcstatus/><internalId>756</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00265</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>206</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00265.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If no acknowledgement is configured, the CR timer FrArTpTimeoutCr expires and
        previously in the current block a sequence error occurred, this error shall be
        reported at the block end in PduR_RxIndication.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.FrArTpTimeoutCrInvalidSN</srcid><srcstatus/><internalId>541</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00265</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>207</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00281</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If acknowledgement without retry is configured, in case of a timeout of timer AS, AR or BS,
        the behavior shall be as mentioned in section 7.4.6.1
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>208</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00266</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If acknowledgement without retry is configured and the CR timer (FrArTpTimeoutCr) expires,
        an AF with negative acknowledgement shall be sent, the transmission shall be aborted,
        and within PduR_RxIndication, the result E_NOT_OK shall be returned.
        If previously in the current block a sequence error occurred,
        this error shall be reported at the block end in PduR_RxIndication.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>209</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00280</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If acknowledgement with retry is configured, in case of a timeout of timer AS or AR, the behavior
        shall be as mentioned in section 7.4.6.1.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>210</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00267</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If acknowledgement with retry is configured and the BS timer (FrArTpTimeoutBs) expires,
        the sender shall retransmit the whole block up to FrArTpMaxRn times.
        After that, the transmission shall be aborted, and within PduR_TxConfirmation
        the result E_NOT_OK shall be returned.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>211</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00268</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If acknowledgement with retry is configured and the CR timer (FrArTpTimeoutCr) expires,
        the receiver shall send an AF with negative acknowledgement and the sequence
        number of the missed CF. This shall be done up to FrArTpMaxRn times.
        After that, the transmission shall be aborted, and within PduR_RxIndication,
        the result E_NOT_OK shall be returned. If previously in the current block
        a sequence error occurred, this error shall be reported at the block end in
        PduR_RxIndication.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>212</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00099</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Transmit Cancellation can be (de)activated by static configuration
        (parameter FrArTpTc). Transmit Cancellation is triggered by
        the call of FrArTp_CancelTransmit. (SRS_Fr_05093)
      </description>
      <comment>This requirement is informational only</comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>213</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00236</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        When a transmission is still in progress, FrArTp_CancelTransmit shall return E_OK,
        and the transmission shall be stopped.
        When a connection is not active, or when the last N-PDU of a transmission
        without acknowledgement has already been forwarded to the FrIf,
        FrArTp_CancelTransmit shall return E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00236.1</srcid><srcstatus/><internalId>215</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00236.2</srcid><srcstatus/><internalId>216</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00236.3</srcid><srcstatus/><internalId>217</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>214</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00236.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        When a transmission is still in progress, FrArTp_CancelTransmit shall return E_OK,
        and the transmission shall be stopped.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_CancelTransmit_AfterCopyTxData</srcid><srcstatus/><internalId>852</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_CancelTransmit_TxRequestPending</srcid><srcstatus/><internalId>853</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_269</srcid><srcstatus/><internalId>781</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00236</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>214</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>215</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00236.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        When a connection is not active, FrArTp_CancelTransmit shall return E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_CancelTransmit_InactiveConnection</srcid><srcstatus/><internalId>851</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_250</srcid><srcstatus/><internalId>777</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00236</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>214</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>216</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00236.3</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        When the last N-PDU of a transmission without acknowledgement has already been
        forwarded to the FrIf, FrArTp_CancelTransmit shall return E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_CancelTransmit_TxRequestPending</srcid><srcstatus/><internalId>853</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_258</srcid><srcstatus/><internalId>778</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00236</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>214</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>217</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00279</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        When FrArTp_CancelTransmit is called and no transmit request is pending for the
        corresponding connection, there is nothing to do.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_CancelTransmit_InactiveConnection</srcid><srcstatus/><internalId>851</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_CancelTransmit_AfterCopyTxData</srcid><srcstatus/><internalId>852</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_258</srcid><srcstatus/><internalId>778</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>218</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00273</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        When FrArTp_CancelTransmit is called and a request is pending but the transmission has not
        been started, the FrArTp shall immediately call PduR_FrArTpTxConfirmation and free the
        connection.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_CancelTransmit_AfterCopyTxData</srcid><srcstatus/><internalId>852</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_CancelTransmit_TxRequestPending</srcid><srcstatus/><internalId>853</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_262</srcid><srcstatus/><internalId>779</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>219</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00274</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If the transmission already has been started when FrArTp_CancelTransmit is called,
        the FrArTp shall immediately call PduR_FrArTpTxConfirmation, and remember that
        the N-PDUs that have already been allocated for this connection cannot be used
        again before they have been confirmed.
        When requested via TriggerTransmit, the pending N-PDUs shall either be transferred
        to the FrIf as if they had not been canceled, or E_NOT_OK shall be returned.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00274.1</srcid><srcstatus/><internalId>221</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00274.2</srcid><srcstatus/><internalId>222</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>220</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00274.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If the transmission already has been started when FrArTp_CancelTransmit is called,
        the FrArTp shall immediately call PduR_FrArTpTxConfirmation, and remember that
        the N-PDUs that have already been allocated for this connection cannot be used
        again before they have been confirmed.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_CancelTransmit_StartedTransmission</srcid><srcstatus/><internalId>854</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_688</srcid><srcstatus/><internalId>737</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00274</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>221</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00274.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        When requested via TriggerTransmit, the N-PDUs pending due to a prior call to
        FrArTp_CancelTransmit, shall either be transferred to the FrIf as
        if they had not been canceled, or E_NOT_OK shall be returned.
      </description>
      <comment>
        Depending on implementation, the N-PDUs pending shall either be transferred to the FrIf
        as if they had not been canceled, or E_NOT_OK shall be returned.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_CancelTransmit_TxRequestPending</srcid><srcstatus/><internalId>853</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_597</srcid><srcstatus/><internalId>732</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00274</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>222</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00103</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If a transfer was cancelled by the call of FrArTp_CancelTransmit,
        PduR_FrArTpTxConfirmation shall be called with E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_CancelTransmit_TxRequestPending</srcid><srcstatus/><internalId>853</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_CancelTransmit_StartedTransmission</srcid><srcstatus/><internalId>854</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_267</srcid><srcstatus/><internalId>780</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>223</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00224</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If development error detection is enabled the function FrArTp_CancelReceive
        shall check the validity of FrArTpRxSduId parameter.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.EB.ASR42.SWS_FrArTp_00229.E_INVALID_PDU_SDU_ID</srcid><srcstatus/><internalId>397</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>224</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00226</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The FrArTp shall abort the reception of the current N-SDU if
        the service FrArTp_CancelReceive provides a valid FrArTpRxSduId.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_CancelReceive_AfterFF</srcid><srcstatus/><internalId>847</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_CancelReceive_AfterFC</srcid><srcstatus/><internalId>848</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_CancelReceive_AfterCF</srcid><srcstatus/><internalId>849</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SduMng.c_186</srcid><srcstatus/><internalId>819</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>225</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00227</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The FrArTp shall reject the request for receive cancellation by returning E_NOT_OK when<br/>
        a) the cancelled connection is not active, or when<br/>
        b) the FrArTp has already received the last frame of an unacknowledged connection, or when<br/>
        c) the FrArTp has already provided the final AF of an acknowledged connection.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00227.1</srcid><srcstatus/><internalId>227</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00227.2</srcid><srcstatus/><internalId>228</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00227.3</srcid><srcstatus/><internalId>229</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>226</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00227.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The FrArTp shall reject the request for receive cancellation by returning E_NOT_OK
        when the cancelled connection is not active.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_CancelReceive_InactiveConnection</srcid><srcstatus/><internalId>846</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_CANCELRX_IGNORE</srcid><srcstatus/><internalId>1060</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_429</srcid><srcstatus/><internalId>749</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00227</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>227</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00227.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The FrArTp shall reject the request for receive cancellation by returning E_NOT_OK
        when the FrArTp has already received the last frame of an unacknowledged connection.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_CancelReceive_AfterLastFrame</srcid><srcstatus/><internalId>850</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_429</srcid><srcstatus/><internalId>749</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00227</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>228</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00227.3</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The FrArTp shall reject the request for receive cancellation by returning E_NOT_OK
        when the FrArTp has already provided the final AF of an acknowledged connection.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00227</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>229</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00228</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If the FrArTp_CancelReceive service has been successfully executed,
        the FrArTp shall call the PduR_FrArTpRxIndication with E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_CancelReceive_AfterFF</srcid><srcstatus/><internalId>847</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_CancelReceive_AfterFC</srcid><srcstatus/><internalId>848</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_CancelReceive_AfterCF</srcid><srcstatus/><internalId>849</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_452</srcid><srcstatus/><internalId>750</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>230</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00104</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The FrArTp also supports the optional service for changing the parameters
        FrArTpMaxBs and FrArTpStMin / FrArTpStMinGrpSeg mentioned in [13] via
        the API call FrArTp_ChangeParameter.<br/>

        A change is not possible during an ongoing reception and shall lead to
        the return value E_NOT_OK. (SRS_Fr_05090)
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00104.1</srcid><srcstatus/><internalId>232</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00104.2</srcid><srcstatus/><internalId>233</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00104.3</srcid><srcstatus/><internalId>234</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00104.4</srcid><srcstatus/><internalId>235</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>231</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00104.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The parameter FrArTpMaxBs can be changed via the API call FrArTp_ChangeParameter when
        no reception is currently ongoing.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception_BlockSizeZero</srcid><srcstatus/><internalId>893</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Segmented_Reception</srcid><srcstatus/><internalId>894</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_CHANGEPARAMETER</srcid><srcstatus/><internalId>1016</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM.c_268</srcid><srcstatus/><internalId>743</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00115</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>273</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>232</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00104.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The parameter FrArTpStMin can be changed via the API call FrArTp_ChangeParameter when
        no reception is currently ongoing.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception_BlockSizeZero</srcid><srcstatus/><internalId>893</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Segmented_Reception</srcid><srcstatus/><internalId>894</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_CHANGEPARAMETER</srcid><srcstatus/><internalId>1016</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM.c_261</srcid><srcstatus/><internalId>742</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.1to1ConWithoutAck_Segmented.STmin.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>445</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>233</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00104.3</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The parameter FrArTpStMinGrpSeg can be changed via the API call FrArTp_ChangeParameter when
        no reception is currently ongoing.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.SegmentedCommunication</srcid><srcstatus/><internalId>539</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>234</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00104.4</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTp_ChangeParameter is called during an ongoing reception, it shall not change
        the parameter and shall return E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception_BlockSizeZero</srcid><srcstatus/><internalId>893</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Segmented_Reception</srcid><srcstatus/><internalId>894</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_CHANGEPARAMETER</srcid><srcstatus/><internalId>1016</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM.c_255</srcid><srcstatus/><internalId>741</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>235</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00221</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        When a new reception is initiated by the reception of a FF or SF,
        the TP checks for the availability of the associated channel and then calls
        PduR_FrArTpStartOfReception to inform the upper layer of the expected message size,
        and to retrieve information about the currently available buffer. With this call,
        the FrArTp provides the total size of the received data (SDU), and the data and
        size of the FF or SF to the upper layer. When this call succeeds, the connection
        is set to established, and PduR_FrArTpCopyRxData is called to provide the payload
        of the frame to the upper layer.
      </description>
      <comment>
        NOTE:
        Current SWS diagrams for reception of FF-x or SF-x are different from requirements.
        Diagrams are showing retry of buffer acquire, if buffer is not large enough for FF or SF payload,
        but there is no such requirement.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00221.1</srcid><srcstatus/><internalId>237</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00221.2</srcid><srcstatus/><internalId>238</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00221.3</srcid><srcstatus/><internalId>239</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>236</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00221.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        When a new reception is initiated by the reception of an FF, the TP checks for
        the availability of the associated channel and then calls PduR_FrArTpStartOfReception
        to inform the upper layer of the expected message size, and to retrieve information
        about the currently available buffer.
      </description>
      <comment>
        With this call (PduR_FrArTpStartOfReception), the FrArTp provides the total size of
        the received data (SDU) to the upper layer.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Segmented_Reception</srcid><srcstatus/><internalId>894</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception</srcid><srcstatus/><internalId>943</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_1243</srcid><srcstatus/><internalId>770</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00221</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>236</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>237</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00221.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        When a new reception is initiated by the reception of an SF, the TP checks for
        the availability of the associated channel and then calls PduR_FrArTpStartOfReception
        to inform the upper layer of the expected message size, and to retrieve information
        about the currently available buffer.
      </description>
      <comment>
        With this call (PduR_FrArTpStartOfReception), the FrArTp provides the total size of
        the received data (SDU) to the upper layer.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Reception</srcid><srcstatus/><internalId>887</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Unsegmented_Reception</srcid><srcstatus/><internalId>938</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_1189</srcid><srcstatus/><internalId>765</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00221</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>236</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>238</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00221.3</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        When the call to PduR_FrArTpStartOfReception succeeded, the connection is set
        to established, and PduR_FrArTpCopyRxData is called to provide the payload of
        the frame to the upper layer.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Reception</srcid><srcstatus/><internalId>887</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Segmented_Reception</srcid><srcstatus/><internalId>894</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Unsegmented_Reception</srcid><srcstatus/><internalId>938</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception</srcid><srcstatus/><internalId>943</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_859</srcid><srcstatus/><internalId>763</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_1202</srcid><srcstatus/><internalId>766</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00221</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>236</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>239</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00230</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        When a new transmission is initiated by the call of
        FrArTp_Transmit, the TP checks for the availability of the associated channel, and
        sets the connection to established. Then the TP calls PduR_FrArTpCopyTxData to
        acquire the data for the SF or FF and following CFs.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Transfer</srcid><srcstatus/><internalId>918</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_664</srcid><srcstatus/><internalId>792</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_869</srcid><srcstatus/><internalId>800</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>240</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00105</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Depending on the message length and configuration of the FrArTp,
        a segmented or an unsegmented transfer will take place.
      </description>
      <comment>
        This requirement is informational only.
        The decision for segmented/unsegmented transfer is detailed in other requirements.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>241</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00232</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The API function PduR_FrArTpCopyTxData has a
        parameter named retry, which is a pointer to a structure of type RetryInfoType.
        When Retry is disabled, retry shall always be set to NULL. Otherwise, the different
        values of retry.TpDataState shall be used to handle retries.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00232.1</srcid><srcstatus/><internalId>243</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00232.2</srcid><srcstatus/><internalId>244</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>242</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00232.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        When Retry is disabled, the parameter retry of PduR_FrArTpCopyTxData shall always
        be set to NULL.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Transfer</srcid><srcstatus/><internalId>918</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Transfer_SFE</srcid><srcstatus/><internalId>920</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_760</srcid><srcstatus/><internalId>795</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_869</srcid><srcstatus/><internalId>800</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00232</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>242</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>243</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00232.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        When Retry is enabled, the different values of retry.TpDataState of the parameter
        retry of PduR_FrArTpCopyTxData shall be used to handle retries.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.RetryFunctionality</srcid><srcstatus/><internalId>537</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00232</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>242</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00106</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>244</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00106</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        At the sender side, the principle for the unsegmented transmission
        works as follows:<br/>
        1. The PDU Router calls the service FrArTp_Transmit.<br/>
        2. The FrArTp shall call PduR_FrArTpCopyTxData in order to get all the data
        bytes of the SF-x. retry.TpDataState shall be set to TP_CONFPENDING
        when Retry is enabled.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00232.2</srcid><srcstatus/><internalId>244</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00106.1</srcid><srcstatus/><internalId>246</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00106.2</srcid><srcstatus/><internalId>247</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>245</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00106.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        At the sender side, the principle for the unsegmented transmission
        works as follows:<br/>
        1. The PDU Router calls the service FrArTp_Transmit.<br/>
        2. The FrArTp shall call PduR_FrArTpCopyTxData in order to get all the data
        bytes of the SF-x.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Transfer</srcid><srcstatus/><internalId>918</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Transfer_ReqFromTxConf</srcid><srcstatus/><internalId>919</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Transfer_SFE</srcid><srcstatus/><internalId>920</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_869</srcid><srcstatus/><internalId>800</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00106</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>246</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00106.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        When Retry is enabled. At the sender side, the principle for the unsegmented
        transmission works as follows:<br/>
          1. The PDU Router calls the service FrArTp_Transmit.<br/>
          2. The FrArTp shall call PduR_FrArTpCopyTxData in order to get all the data
          bytes of the SF-x. retry.TpDataState shall be set to TP_CONFPENDING.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.RetryFunctionality</srcid><srcstatus/><internalId>537</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00106</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>247</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00107</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If PduR_FrArTpCopyTxData for the SF-x returns BUFREQ_E_BUSY,
        the call shall be repeated until FrArTpTimeCs expires.
        When the return value is BUFREQ_E_NOT_OK or after FrArTpTimeCs expired,
        the transfer shall be aborted by calling PduR_FrArTpTxConfirmation with E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00107.1</srcid><srcstatus/><internalId>249</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00107.2</srcid><srcstatus/><internalId>250</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00107.3</srcid><srcstatus/><internalId>251</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>248</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00107.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If PduR_FrArTpCopyTxData for the SF-x returns BUFREQ_E_BUSY,
        the call shall be repeated until FrArTpTimeCs expires.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_FrArTpTimeCsTimeout</srcid><srcstatus/><internalId>932</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_900</srcid><srcstatus/><internalId>804</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00107</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>248</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>249</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00107.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If PduR_FrArTpCopyTxData for the SF-x returns BUFREQ_E_BUSY and FrArTpTimeCs has expired,
        the transfer shall be aborted by calling PduR_FrArTpTxConfirmation with E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_FrArTpTimeCsTimeout</srcid><srcstatus/><internalId>932</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00107</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>248</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>250</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00107.3</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If PduR_FrArTpCopyTxData for the SF-x returns BUFREQ_E_NOT_OK, the transfer shall be aborted
        by calling PduR_FrArTpTxConfirmation with E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_FrArTpTimeCsTimeout</srcid><srcstatus/><internalId>932</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_771</srcid><srcstatus/><internalId>796</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_907</srcid><srcstatus/><internalId>805</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00107</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>248</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>251</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00233</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If Retry is enabled, the SF-x shall be sent again after
        reception of a negative AF. The FrArTp shall finish the transfer after reception of a
        positive AF by the call to PduR_FrArTpTxConfirmation with E_OK.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.RetryFunctionality</srcid><srcstatus/><internalId>537</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>252</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00108</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        At the receiver side, the principle for the unsegmented reception
        works as follows:<br/>
          1. FrIf calls the service FrArTp_RxIndication.<br/>
          2. The FrArTp shall call PduR_FrArTpStartOfReception to prepare reception.<br/>
          3. The FrArTp shall call PduR_FrArTpCopyRxData to forward SF data.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
        <tag>Unit:SM</tag>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Reception</srcid><srcstatus/><internalId>887</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Unsegmented_Reception</srcid><srcstatus/><internalId>938</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Reception_PduR_Fault</srcid><srcstatus/><internalId>939</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Unsegmented_Reception_PduR_Fault</srcid><srcstatus/><internalId>940</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_541</srcid><srcstatus/><internalId>698</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_1189</srcid><srcstatus/><internalId>765</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_1202</srcid><srcstatus/><internalId>766</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SduMng.c_253</srcid><srcstatus/><internalId>823</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>253</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00298</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If PduR_FrArTpStartOfReception for the SF-x returns BUFREQ_E_NOT_OK or BUFREQ_E_OVFL,
        the transfer shall be aborted immediately without calling PduR_FrArTpRxIndication.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00298.1</srcid><srcstatus/><internalId>255</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00298.2</srcid><srcstatus/><internalId>256</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00298.3</srcid><srcstatus/><internalId>257</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00298.4</srcid><srcstatus/><internalId>258</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_1223</srcid><srcstatus/><internalId>769</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>254</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00298.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If PduR_FrArTpStartOfReception for the SF-I returns BUFREQ_E_NOT_OK,
        the transfer shall be aborted immediately without calling PduR_FrArTpRxIndication.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Reception_PduR_Fault</srcid><srcstatus/><internalId>939</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_SF_STARTOFRECEPTION_NOTOK</srcid><srcstatus/><internalId>1058</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00298</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>254</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>255</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00298.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If PduR_FrArTpStartOfReception for the SF-I returns BUFREQ_E_OVFL,
        the transfer shall be aborted immediately without calling PduR_FrArTpRxIndication.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Reception_PduR_Fault</srcid><srcstatus/><internalId>939</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_SF_STARTOFRECEPTION_NOTOK</srcid><srcstatus/><internalId>1058</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00298</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>254</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>256</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00298.3</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If PduR_FrArTpStartOfReception for the SF-E returns BUFREQ_E_NOT_OK,
        the transfer shall be aborted immediately without calling PduR_FrArTpRxIndication.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Unsegmented_Reception_PduR_Fault</srcid><srcstatus/><internalId>940</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00298</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>254</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>257</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00298.4</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If PduR_FrArTpStartOfReception for the SF-E returns BUFREQ_E_OVFL,
        the transfer shall be aborted immediately without calling PduR_FrArTpRxIndication.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Unsegmented_Reception_PduR_Fault</srcid><srcstatus/><internalId>940</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00298</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>254</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>258</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00289</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If the available buffer reported by PduR_FrArTpStartOfReception is too small for the SF-x,
        or if PduR_FrArTpCopyRxData for the SF-x returns BUFREQ_E_NOT_OK,
        the FrArTp shall abort the transfer and call PduR_FrArTpRxIndication with E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00289.1</srcid><srcstatus/><internalId>260</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00289.2</srcid><srcstatus/><internalId>261</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00289.3</srcid><srcstatus/><internalId>262</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00289.4</srcid><srcstatus/><internalId>263</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>259</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00289.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If the available buffer reported by PduR_FrArTpStartOfReception is too small for the SF-I,
        the FrArTp shall abort the transfer and call PduR_FrArTpRxIndication with E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Reception_PduR_Fault</srcid><srcstatus/><internalId>939</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_OVFLW_Unsegmented_1</srcid><srcstatus/><internalId>945</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_1216</srcid><srcstatus/><internalId>768</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00289</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>259</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>260</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00289.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If PduR_FrArTpCopyRxData for the SF-I returns BUFREQ_E_NOT_OK,
        the FrArTp shall abort the transfer and call PduR_FrArTpRxIndication with E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Reception_PduR_Fault</srcid><srcstatus/><internalId>939</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_OVFLW_Unsegmented_1</srcid><srcstatus/><internalId>945</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_1209</srcid><srcstatus/><internalId>767</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00289</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>259</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00295</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>280</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>261</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00289.3</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If the available buffer reported by PduR_FrArTpStartOfReception is too small for the SF-E,
        the FrArTp shall abort the transfer and call PduR_FrArTpRxIndication with E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Unsegmented_Reception_PduR_Fault</srcid><srcstatus/><internalId>940</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_1216</srcid><srcstatus/><internalId>768</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00289</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>259</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>262</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00289.4</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If PduR_FrArTpCopyRxData for the SF-E returns BUFREQ_E_NOT_OK,
        the FrArTp shall abort the transfer and call PduR_FrArTpRxIndication with E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Unsegmented_Reception_PduR_Fault</srcid><srcstatus/><internalId>940</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_1209</srcid><srcstatus/><internalId>767</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00289</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>259</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00295</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>280</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>263</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00253</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If acknowledgement is configured, in case of failing to copy
        the received data (either BUFREQ_E_NOT_OK or BUFREQ_E_OVFL was returned, or
        the available buffer is too small), an AF with a negative acknowledgement and
        FS = OVFLW is sent back to the sender.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>264</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00110</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        At the sender side, the principle for a segmented transmission
        works as follows:<br/>
          1. The PDU Router calls the service FrArTp_Transmit.<br/>
          2. The FrArTp shall call PduR_FrArTpCopyTxData in order to get the data bytes
          of the FF and following CFs.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transfer</srcid><srcstatus/><internalId>948</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_869</srcid><srcstatus/><internalId>800</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>265</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00111</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        When Retry is enabled, the TP sends the FF-x without data.
        After reception of an FC, the data for the first CF is acquired with
        retry.TpDataState set to TP_DATACONF. For the following CFs,
        retry.TpDataState shall be set to TP_CONFPENDING.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.RetryFunctionality</srcid><srcstatus/><internalId>537</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>266</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00234</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        When Retry is enabled, after reception of a negative AF, the last block
        must be retransmitted. To achieve this, the data for the first CF of the block
        is acquired with retry.TpDataState set to TP_DATARETRY while retry.TxTpDataCnt
        contains the size of the previously sent block in bytes.
        The buffer of the last block in the upper layer is only freed after reception
        of a positive AF by the call to PduR_FrArTpTxConfirmation with E_OK .
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.RetryFunctionality</srcid><srcstatus/><internalId>537</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>267</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00296</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If PduR_FrArTpCopyTxData for the FF-x (Retry not configured) or any of the CFs
        returns BUFREQ_E_BUSY, the call shall be repeated until FrArTpTimeCs expires.
      </description>
      <comment>
        This implementation will wait for a new buffer also if BUFREQ_OK is returned.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_FrArTpTimeCsTimeout</srcid><srcstatus/><internalId>932</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_FrArTpTimeCsTimeout_CF</srcid><srcstatus/><internalId>933</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_FrArTpTimeCs_CF_PduR_Fault</srcid><srcstatus/><internalId>934</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_900</srcid><srcstatus/><internalId>804</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>268</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00293</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If PduR_FrArTpCopyTxData returns BUFREQ_E_NOT_OK or
        when FrArTpTimeCs expired, the transfer shall be aborted by calling
        PduR_FrArTpTxConfirmation with E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00293.1</srcid><srcstatus/><internalId>270</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00293.2</srcid><srcstatus/><internalId>271</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>269</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00293.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If PduR_FrArTpCopyTxData, for the FF-x or any of the CFs, returns BUFREQ_E_BUSY
        when FrArTpTimeCs has expired, the transfer shall be aborted by calling
        PduR_FrArTpTxConfirmation with E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_FrArTpTimeCsTimeout</srcid><srcstatus/><internalId>932</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_FrArTpTimeCsTimeout_CF</srcid><srcstatus/><internalId>933</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00293</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>269</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>270</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00293.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If PduR_FrArTpCopyTxData, for the FF-x or any of the CFs, returns BUFREQ_E_NOT_OK,
        the transfer shall be aborted by calling PduR_FrArTpTxConfirmation with E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_FrArTpTimeCsTimeout</srcid><srcstatus/><internalId>932</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_FrArTpTimeCs_CF_PduR_Fault</srcid><srcstatus/><internalId>934</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_771</srcid><srcstatus/><internalId>796</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Tx.c_907</srcid><srcstatus/><internalId>805</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00293</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>269</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>271</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00114</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        At the receiver side, the principle for a segmented reception
        works as follows:<br/>
          1. FrIf calls the service FrArTp_RxIndication.<br/>
          2. The FrArTp shall call PduR_FrArTpStartOfReception to prepare reception.<br/>
          3. The FrArTp shall call PduR_FrArTpCopyRxData to forward FF and CF data.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Decode</tag>
        <tag>Unit:SM</tag>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Extended_Segmented_Reception</srcid><srcstatus/><internalId>894</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception</srcid><srcstatus/><internalId>943</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_541</srcid><srcstatus/><internalId>698</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_288</srcid><srcstatus/><internalId>747</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_302</srcid><srcstatus/><internalId>748</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_716</srcid><srcstatus/><internalId>758</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_859</srcid><srcstatus/><internalId>763</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_1243</srcid><srcstatus/><internalId>770</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_1262</srcid><srcstatus/><internalId>772</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SduMng.c_253</srcid><srcstatus/><internalId>823</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>272</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00115</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The block size used during reception is constant.
        The value is configured via FrArTpMaxBs, and can be changed via
        the API FrArTp_ChangeParameter.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00104.1</srcid><srcstatus/><internalId>232</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.ECUC_FrArTp_00023_Conf</srcid><srcstatus/><internalId>336</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>273</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00294</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If Retry is not enabled, and PduR_FrArTpStartOfReception returns
        an available buffer size that is too small for the FF-x, FrArTp shall abort
        the transfer and call PduR_FrArTpRxIndication with E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception_PduR_Fault</srcid><srcstatus/><internalId>888</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_FF_BUFFER_TOO_SMALL</srcid><srcstatus/><internalId>1056</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_1253</srcid><srcstatus/><internalId>771</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>274</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00300</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If Retry is enabled, and PduR_FrArTpStartOfReception
        returns an available buffer size that is too small for the first block, FrArTp shall call
        PduR_FrArTpCopyRxData with info.SduLength equal to 0 until the available
        buffer is large enough for the first block. The calls shall be repeated until
        FrArTpTimeBr expires.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.RetryFunctionality</srcid><srcstatus/><internalId>537</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>275</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00297</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If PduR_FrArTpCopyRxData for the FF-x (Retry not enabled) or for the last CF of a block
        (independent of Retry configuration) returns an available buffer size that is not
        large enough for the next block, PduR_FrArTpCopyRxData shall be called repeatedly
        with info.SduLength equal to 0 until the available buffer is large enough.
        The calls shall be repeated until FrArTpTimeBr expires.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00297.1</srcid><srcstatus/><internalId>277</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00297.2</srcid><srcstatus/><internalId>278</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>276</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00297.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If PduR_FrArTpCopyRxData for the FF-x (Retry not enabled)
        returns an available buffer size that is not large enough for the next block,
        PduR_FrArTpCopyRxData shall be called repeatedly with info.SduLength equal to 0
        until the available buffer is large enough.
        The calls shall be repeated until FrArTpTimeBr expires.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_FrArTpTimeBr</srcid><srcstatus/><internalId>912</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_553</srcid><srcstatus/><internalId>751</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00297</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>276</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>277</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00297.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If PduR_FrArTpCopyRxData for the last CF of a block (independent of Retry configuration)
        returns an available buffer size that is not large enough for the next block,
        PduR_FrArTpCopyRxData shall be called repeatedly with info.SduLength equal to 0
        until the available buffer is large enough.
        The calls shall be repeated until FrArTpTimeBr expires.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_FrArTpTimeBr_CF</srcid><srcstatus/><internalId>913</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_553</srcid><srcstatus/><internalId>751</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00297</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>276</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>278</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00301</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        When FrArTpTimeBr expires during calls to PduR_FrArTpCopyRxData with info.SduLength equal to 0,
        a WAIT frame (FC frame with FS = WT) shall be sent, and the retry phase shall start again,
        but at most FrArTpMaxWft times.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_FrArTpTimeBr</srcid><srcstatus/><internalId>912</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_FrArTpTimeBr_CF</srcid><srcstatus/><internalId>913</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_609</srcid><srcstatus/><internalId>753</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>279</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00295</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If PduR_FrArTpCopyRxData returns BUFREQ_E_NOT_OK, or when FrArTpMaxWft expired,<br/>
        the transfer shall be aborted and PduR_FrArTpRxIndication shall be called with E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00067.3</srcid><srcstatus/><internalId>93</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00289.2</srcid><srcstatus/><internalId>261</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00289.4</srcid><srcstatus/><internalId>263</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00295.1</srcid><srcstatus/><internalId>281</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00295.2</srcid><srcstatus/><internalId>282</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>280</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00295.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If PduR_FrArTpCopyRxData returns BUFREQ_E_NOT_OK, the transfer shall be aborted and<br/>
        PduR_FrArTpRxIndication shall be called with E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception_PduR_Fault</srcid><srcstatus/><internalId>888</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception_PduR_Fault_CF</srcid><srcstatus/><internalId>889</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_760</srcid><srcstatus/><internalId>762</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00295</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>280</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>281</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00295.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If FrArTpTimeBr has expired and FrArTpMaxWft has reached its limit, the transfer shall be<br/>
        aborted and PduR_FrArTpRxIndication shall be called with E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_FrArTpTimeBr</srcid><srcstatus/><internalId>912</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_FrArTpTimeBr_CF</srcid><srcstatus/><internalId>913</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_614</srcid><srcstatus/><internalId>754</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00295</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>280</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.1to1ConWithoutAck_Segmented.7.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>441</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>282</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00117</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        In case of failing to copy the received data, the remaining
        CFs of the current block shall be discarded. When the failure occured in the last
        block, and acknowledgement is enabled, an AF with a negative acknowledgement
        and FS = OVFLW shall be sent back to the sender. Otherwise, an FC with FS = OVFLW
        shall be sent back, but only if the initial call to PduR_FrTpStartOfReception
        returned BUFREQ_E_OVFL.
      </description>
      <comment>
        EB PduR is based on AUTOSAR R20-11:
          SWS:
            PduR_LoTpStartOfReception can return BUFREQ_OK, BUFREQ_E_BUSY, BUFREQ_E_NOT_OK, BUFREQ_E_OVFL;
            PduR_LoTpCopyRxData can return BUFREQ_OK, BUFREQ_E_BUSY, BUFREQ_E_NOT_OK;
          EB Implementation:
            PduR_LoTpStartOfReception can return BUFREQ_OK, BUFREQ_E_NOT_OK, BUFREQ_E_OVFL;
            PduR_LoTpCopyRxData can return BUFREQ_OK, BUFREQ_E_BUSY, BUFREQ_E_NOT_OK;

        Instead of "the last block", probably "the last CF of a block" is meant.
        When reading this requirement, consider that FC should be transmitted from receiver,
        only when sender expects FC. FC is expected after sender transmits an FF, or
        the last CF of a block.<br/>
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00067.4</srcid><srcstatus/><internalId>94</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00117.1</srcid><srcstatus/><internalId>284</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00117.2</srcid><srcstatus/><internalId>285</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00117.3</srcid><srcstatus/><internalId>286</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>283</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00117.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        In case of failing to copy the received data, the remaining CFs of the current block shall
        be discarded.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_FrArTpTimeBr_CF</srcid><srcstatus/><internalId>913</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00117</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>283</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>284</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00117.2</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If acknowledgement is enabled, in case of failing to copy the received data,
        in the last CF of a block an AF with a negative acknowledgement and FS = OVFLW
        shall be sent back to the sender.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00117</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>283</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>285</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00117.3</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If acknowledgement is not enabled, in case of failing to copy the received FF data,
        an FC with FS = OVFLW shall be sent back if the initial call to
        PduR_FrArTpStartOfReception returned BUFREQ_E_OVFL.
      </description>
      <comment>
        Text is fixed to describe correct behavior.<br/>
        Explained transmission of an FC with FS = OVFLW in case of failing to
        copy the received FF data.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_1266</srcid><srcstatus/><internalId>773</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception_PduR_Fault</srcid><srcstatus/><internalId>888</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00117</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>283</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>286</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00120</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        As stated in 7.4.10.2, if acknowledgement with Retry is configured for the
        corresponding channel, no payload is sent within an FF-x if a segmented transfer
        takes place.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>287</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00121</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If acknowledgement without Retry or no acknowledgement is configured,
        there are data bytes within an FF-x.
      </description>
      <comment>This requirement is informational only</comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>288</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00139</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Throughout this specification, many times the ignoring of
        frames is mentioned. Please note that an ignored frame does never affect a timer,
        i.e. never causes the restarting of a timer.
      </description>
      <comment>This requirement is informational only</comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>289</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00140</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The only exception is at the receiver side when retry is
        configured and due to an erroneous frame an AF with negative acknowledgement is
        sent and therefore it is waited for the retry frame(s). In this case, the timer CR will be
        reset by the erroneous frame.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.RetryFunctionality</srcid><srcstatus/><internalId>537</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>290</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00187</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The FrArTp shall be implemented being able to work both
        with N-PDUs configured (in the FlexRay Interface) for Immediate Buffer Access and
        for Decoupled Buffer Access, i.e. it shall reuse its channel specific temporary buffers,
        in case the local peer is the sender, not before the TxConfirmation for the respective
        PDU pool has arrived.
      </description>
      <comment>
        In the receiving case, from FrArTp's point of view, there is no difference between an
        N-PDU being configured for Decoupled Buffer Access or Immediate Buffer Access.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.ImmediateTransmission</srcid><srcstatus/><internalId>545</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>291</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00179</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Error classification table<pre>
        +----------------------------------------------------+-------------+-----------------------------+-----+
        | Type or error                                      | Relevance   | Related error code          |Value|
        +----------------------------------------------------+-------------+-----------------------------+-----+
        | API service called while module is not initialized | Development | FRARTP_E_UNINIT             | 0x1 |
        +----------------------------------------------------+-------------+-----------------------------+-----+
        | API service called with invalid pointer            | Development | FRARTP_E_PARAM_POINTER      | 0x2 |
        +----------------------------------------------------+-------------+-----------------------------+-----+
        | API service called with invalid SDU or PDU ID      | Development | FRARTP_E_INVALID_PDU_SDU_ID | 0x3 |
        +----------------------------------------------------+-------------+-----------------------------+-----+
        | Invalid configuration set selection                | Development | FRARTP_E_INIT_FAILED        | 0x4 |
        +----------------------------------------------------+-------------+-----------------------------+-----+</pre>
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:FrArTp</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00179.E_PARAM_POINTER</srcid><srcstatus/><internalId>293</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00179.E_INIT_FAILED</srcid><srcstatus/><internalId>294</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00291</srcid><srcstatus/><internalId>295</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00292</srcid><srcstatus/><internalId>296</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>292</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00179.E_PARAM_POINTER</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If an API service is called with an invalid pointer, the FrArTp shall report
        FRARTP_E_PARAM_POINTER to Det.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:FrArTp</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.EB.ASR42.SWS_FrArTp_00215.E_PARAM_POINTER</srcid><srcstatus/><internalId>386</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.ASR42.SWS_FrArTp_00147.FRARTP_E_PARAM_POINTER</srcid><srcstatus/><internalId>387</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.ASR42.SWS_FrArTp_00149.E_PARAM_POINTER</srcid><srcstatus/><internalId>391</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.ASR42.SWS_FrArTp_00154.E_PARAM_POINTER</srcid><srcstatus/><internalId>402</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.ASR42.SWS_FrArTp_00152.E_PARAM_POINTER</srcid><srcstatus/><internalId>405</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00179</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>292</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>293</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00179.E_INIT_FAILED</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If an invalid configuration set is selected, the FrArTp shall report
        FRARTP_E_INIT_FAILED to Det.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.NotSupportedDevelopmentErrors</srcid><srcstatus/><internalId>548</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00179</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>292</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>294</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00291</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If development error detection is enabled, all APIs with a
        parameter containing an SDU or a PDU identifier shall check the identifier and raise
        the development error FRARTP_E_INVALID_PDU_SDU_ID when the identifier has
        not been configured.(SRS_BSW_00323)
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:FrArTp</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.EB.ASR42.SWS_FrArTp_00149.E_INVALID_PDU_SDU_ID</srcid><srcstatus/><internalId>390</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.ASR42.SWS_FrArTp_00150.E_INVALID_PDU_SDU_ID</srcid><srcstatus/><internalId>393</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.ASR42.SWS_FrArTp_00229.E_INVALID_PDU_SDU_ID</srcid><srcstatus/><internalId>397</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.ASR42.SWS_FrArTp_00151.E_INVALID_PDU_SDU_ID</srcid><srcstatus/><internalId>399</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.ASR42.SWS_FrArTp_00154.E_INVALID_PDU_SDU_ID</srcid><srcstatus/><internalId>401</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.ASR42.SWS_FrArTp_00152.E_INVALID_PDU_SDU_ID</srcid><srcstatus/><internalId>404</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.ASR42.SWS_FrArTp_00153.E_INVALID_PDU_SDU_ID</srcid><srcstatus/><internalId>408</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00179</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>292</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>295</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00292</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If development error detection is enabled, the FrArTp shall raise the development
        error FRARTP_E_UNINIT when any API (other than FrArTp_GetVersionInfo) is called
        before initialization via FrArTp_Init. (SRS_BSW_00407)
      </description>
      <comment>
        This requirement is not applicable to FrArTp_MainFunction(). See deviation.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:FrArTp</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.EB.ASR42.SWS_FrArTp_00149.E_UNINIT</srcid><srcstatus/><internalId>389</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.ASR42.SWS_FrArTp_00150.E_UNINIT</srcid><srcstatus/><internalId>392</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.ASR42.SWS_FrArTp_00162.E_UNINIT</srcid><srcstatus/><internalId>394</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.ASR42.SWS_FrArTp_00215.E_UNINIT</srcid><srcstatus/><internalId>395</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.ASR42.SWS_FrArTp_00229.E_UNINIT</srcid><srcstatus/><internalId>396</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.ASR42.SWS_FrArTp_00151.E_UNINIT</srcid><srcstatus/><internalId>398</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.ASR42.SWS_FrArTp_00154.E_UNINIT</srcid><srcstatus/><internalId>400</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.ASR42.SWS_FrArTp_00152.E_UNINIT</srcid><srcstatus/><internalId>403</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.ASR42.SWS_FrArTp_00153.E_UNINIT</srcid><srcstatus/><internalId>407</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.MainFunction</srcid><srcstatus/><internalId>542</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00179</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>292</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>296</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00141</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The following types are defined within AUTOSAR and used for the FrArTp:<pre>
        | Module         | Imported Type       |
        +----------------+---------------------+
        | ComStack_Types | BufReq_ReturnType   |
        |                | PduIdType           |
        |                | PduInfoType         |
        |                | PduLengthType       |
        |                | RetryInfoType       |
        |                | TPParameterType     |
        +----------------+---------------------+
        | Std_Types      | Std_ReturnType      |
        |                | Std_VersionInfoType |
        +----------------+---------------------+</pre>
      </description>
      <comment>This requirement is informational only</comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>297</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00288</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The following FrArTp specific types shall be defined in
        FrArTp_Types.h:<pre>
        Name: FrArTp_ConfigType
        Type: Structure
        | Range        | implementation specific | --                               |
        | Description  | This is the base type for the configuration of the FlexRay |
        |              | Transport Protocol.                                        |
        |              | A pointer to an instance of this structure will be used in |
        |              | the initialization of the FlexRay Transport Protocol.      |
        |              | The outline of the structure is defined in                 |
        |              | chapter 10 Configuration Specification.                    |</pre>
      </description>
      <comment>This requirement is informational only</comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>298</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00215</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Service name: FrArTp_GetVersionInfo <pre>
        | Syntax:             | void FrArTp_GetVersionInfo                          |
        |                     | (                                                   |
        |                     |   Std_VersionInfoType* versioninfo                  |
        |                     | )                                                   |
        | Service ID[hex]:    | 0x27                                                |
        | Sync/Async:         | Synchronous                                         |
        | Reentrancy:         | Reentrant                                           |
        | Parameters (in):    | None                                                |
        | Parameters (inout): | None                                                |
        | Parameters (out):   | versioninfo | Pointer to where to store the version |
        |                     |             | information of this module.           |
        | Return value:       | None                                                |
        | Description:        | Returns the version information.                    |</pre>
        (SRS_BSW_00411)

      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:FrArTp</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_General_GetVersionInfo_Uninit</srcid><srcstatus/><internalId>880</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/FrArTp_Api.h_21</srcid><srcstatus/><internalId>627</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/FrArTp_Api.h_141</srcid><srcstatus/><internalId>638</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp.c.m4_88</srcid><srcstatus/><internalId>648</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>299</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00147</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Service name: FrArTp_Init <pre>
        | Syntax:             | void FrArTp_Init( const FrArTp_ConfigType* configPtr )           |
        | Service ID[hex]:    | 0x00                                                             |
        | Sync/Async:         | Synchronous                                                      |
        | Reentrancy:         | Non Reentrant                                                    |
        | Parameters (in):    | configPtr | Pointer to FlexRay Transport Protocol configuration. |
        | Parameters (inout): | None                                                             |
        | Parameters (out):   | None                                                             |
        | Return value:       | None                                                             |
        | Description:        | This service initializes all global variables of the FlexRay     |
        |                     | AUTOSAR Transport Layer and sets all states to idle.             |</pre>
        (SRS_BSW_00101, SRS_Fr_05088)
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:FrArTp</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception_StandardFunctions</srcid><srcstatus/><internalId>892</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transmission_StandardFunctions</srcid><srcstatus/><internalId>921</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/FrArTp_Api.h_27</srcid><srcstatus/><internalId>628</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/FrArTp_Api.h_126</srcid><srcstatus/><internalId>637</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp.c.m4_66</srcid><srcstatus/><internalId>647</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>300</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00148</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Service name: FrArTp_Shutdown <pre>
        | Syntax:             | void FrArTp_Shutdown( void )                                   |
        | Service ID[hex]:    | 0x01                                                           |
        | Sync/Async:         | Synchronous                                                    |
        | Reentrancy:         | Non Reentrant                                                  |
        | Parameters (in):    | None                                                           |
        | Parameters (inout): | None                                                           |
        | Parameters (out):   | None                                                           |
        | Return value:       | None                                                           |
        | Description:        | This service closes all pending transport protocol connections |
        |                     | by simply stopping operation, frees all resources and stops    |
        |                     | the FrArTp Module.                                             |</pre>
        (SRS_BSW_00336)
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:FrArTp</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.ShutDown</srcid><srcstatus/><internalId>549</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>301</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00149</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Service name: FrArTp_Transmit <pre>
        | Syntax:             | Std_ReturnType FrArTp_Transmit                                      |
        |                     | (                                                                   |
        |                     |   PduIdType FrArTpTxSduId,                                          |
        |                     |   const PduInfoType* FrArTpTxSduInfoPtr                             |
        |                     | )                                                                   |
        | Service ID[hex]:    | 0x02                                                                |
        | Sync/Async:         | Asynchronous                                                        |
        | Reentrancy:         | Reentrant                                                           |
        | Parameters (in):    | FrArTpTxSduId      | This parameter contains the unique identifier  |
        |                     |                    | of the FrArTp N-SDU to be transmitted.         |
        |                     | FrArTpTxSduInfoPtr | Tx N-SDU Information Structure which contains  |
        |                     |                    | a) pointer to the FrArTp Tx N-SDU              |
        |                     |                    | b) the length of the FrArTp Tx N-SDU           |
        | Parameters (inout): | None                                                                |
        | Parameters (out):   | None                                                                |
        | Return value:       | Std_ReturnType | E_OK: The request has been accepted                |
        |                     |                | E_NOT_OK: The request has not been accepted, e. g. |
        |                     |                | because the parameter check has failed (invalid    |
        |                     |                | N-SDU ID or size), the corresponding connection is |
        |                     |                | still occupied, or no state machine is free        |
        |                     |                | (FrTpConcurrentConnections).                       |
        | Description:        | This service is utilized to request the transfer of data.           |
        |                     | This function has to be called with FrArTp's SDU-Id, i.e. the upper |
        |                     | layer has to translate its own PDU-Id into the FrArTp's SDU-ID      |
        |                     | for the corresponding message.                                      |
        |                     | Within the provided FrArTpSduInfoPtr only                           |
        |                     | SduLength is valid (no data)!                                       |
        |                     | If this function returns E_OK then there will arise an call of      |
        |                     | PduR_FrArTpCopyTxData in order to get data for sending.             |</pre>
        (SRS_BSW_00369, SRS_Fr_05075)
      </description>
      <comment>
        It should be FrArTpConcurrentConnections instead of FrTpConcurrentConnections.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Transfer</srcid><srcstatus/><internalId>918</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/FrArTp_Api.h_33</srcid><srcstatus/><internalId>629</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/FrArTp_Api.h_164</srcid><srcstatus/><internalId>639</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SduMng.c_52</srcid><srcstatus/><internalId>809</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>302</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00150</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Service name: FrArTp_CancelTransmit <pre>
        | Syntax:             | Std_ReturnType FrArTp_CancelTransmit                               |
        |                     | (                                                                  |
        |                     |   PduIdType FrArTpTxSduId                                          |
        |                     | )                                                                  |
        | Service ID[hex]:    | 0x03                                                               |
        | Sync/Async:         | Synchronous                                                        |
        | Reentrancy:         | Non Reentrant                                                      |
        | Parameters (in):    | FrArTpTxSduId | This parameter contains the unique identifier of   |
        |                     |               | the transmitted Fr N-SDU which has to be canceled. |
        | Parameters (inout): | None                                                               |
        | Parameters (out):   | None                                                               |
        | Return value:       | Std_ReturnType | E_OK: Transmit cancellation request of            |
        |                     |                | the specified Fr N-SDU is accepted.               |
        |                     |                | E_NOT_OK: Transmit cancellation request of        |
        |                     |                | the specified Fr N-SDU is rejected.               |
        | Description:        | This service primitive is used to cancel the transfer              |
        |                     | of pending Fr N-SDUs.                                              |
        |                     | The connection is identified by FrArTpTxSduId.                     |
        |                     | When the function returns, no transmission is in progress anymore  |
        |                     | with the given N-SDU identifier.                                   |</pre>
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_CancelTransmit</srcid><srcstatus/><internalId>955</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/FrArTp_Api.h_39</srcid><srcstatus/><internalId>630</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/FrArTp_Api.h_202</srcid><srcstatus/><internalId>640</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SduMng.c_147</srcid><srcstatus/><internalId>816</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00009.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>14</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>303</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00229</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Service name: FrArTp_CancelReceive <pre>
        | Syntax:             | Std_ReturnType FrArTp_CancelReceive                              |
        |                     | (                                                                |
        |                     |   PduIdType FrArTpRxSduId                                        |
        |                     | )                                                                |
        | Service ID[hex]:    | 0x08                                                             |
        | Sync/Async:         | Synchronous                                                      |
        | Reentrancy:         | Non Reentrant                                                    |
        | Parameters (in):    | FrArTpRxSduId  | SDU-Id of currently ongoing reception           |
        | Parameters (inout): | None                                                             |
        | Parameters (out):   | None                                                             |
        | Return value:       | Std_ReturnType | E_OK: Reception was terminated sucessfully.     |
        |                     |                | E_NOT_OK: Reception was not terminated.         |
        | Description:        | By calling this API with the corresponding RxSduId the currently |
        |                     | ongoing data reception is terminated immediately.                |
        |                     | When the function returns, no reception is in progress           |
        |                     | anymore with the given N-SDU identifier.                         |</pre>
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_CancelReceive</srcid><srcstatus/><internalId>954</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/FrArTp_Api.h_45</srcid><srcstatus/><internalId>631</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/FrArTp_Api.h_229</srcid><srcstatus/><internalId>641</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SduMng.c_186</srcid><srcstatus/><internalId>819</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>304</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00151</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Service name: FrArTp_ChangeParameter <pre>
        | Syntax:             | Std_ReturnType FrArTp_ChangeParameter                       |
        |                     | (                                                           |
        |                     |   PduIdType id,                                             |
        |                     |   TPParameterType parameter,                                |
        |                     |   uint16 value                                              |
        |                     | )                                                           |
        | Service ID[hex]:    | 0x04                                                        |
        | Sync/Async:         | Synchronous                                                 |
        | Reentrancy:         | Non Reentrant                                               |
        | Parameters (in):    | id        | Identifies the affected N-SDU.                  |
        |                     | parameter | Specifies the parameter which shall be changed. |
        |                     | value     | The new value of the parameter.                 |
        | Parameters (inout): | None                                                        |
        | Parameters (out):   | None                                                        |
        | Return value:       | Std_ReturnType | E_OK: request is accepted                  |
        |                     |                | E_NOT_OK: request is not accepted          |
        | Description:        | This service is used to request the change of the reception |
        |                     | parameters STmin and BS for the specified N-SDU.            |</pre>
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception_StandardFunctions</srcid><srcstatus/><internalId>892</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/FrArTp_Api.h_51</srcid><srcstatus/><internalId>632</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/FrArTp_Api.h_253</srcid><srcstatus/><internalId>642</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_SduMng.c_303</srcid><srcstatus/><internalId>827</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>305</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00154</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Service name: FrArTp_TriggerTransmit <pre>
        | Syntax:             | Std_ReturnType FrArTp_TriggerTransmit                              |
        |                     | (                                                                  |
        |                     |   PduIdType TxPduId,                                               |
        |                     |   PduInfoType* PduInfoPtr                                          |
        |                     | )                                                                  |
        | Service ID[hex]:    | 0x41                                                               |
        | Sync/Async:         | Synchronous                                                        |
        | Reentrancy:         | Reentrant for different PduIds. Non reentrant for the same PduId.  |
        | Parameters (in):    | TxPduId    | ID of the SDU that is requested to be transmitted.    |
        | Parameters (inout): | PduInfoPtr | Contains a pointer to a buffer (SduDataPtr) to where  |
        |                     |            | the SDU data shall be copied, and the available       |
        |                     |            | buffer size in SduLengh.                              |
        |                     |            | On return, the service will indicate the length of    |
        |                     |            | the copied SDU data in SduLength.                     |
        | Parameters (out):   | None                                                               |
        | Return value:       | Std_ReturnType | E_OK: SDU has been copied and SduLength indicates |
        |                     |                | the number of copied bytes.                       |
        |                     |                | E_NOT_OK: No SDU data has been copied.            |
        |                     |                | PduInfoPtr must not be used since it may contain  |
        |                     |                | a NULL pointer or point to invalid data.          |
        | Description:        | Within this API, the upper layer module (called module) shall      |
        |                     | check whether the available data fits into the buffer size         |
        |                     | reported by PduInfoPtr-&gt;SduLength.                                 |
        |                     | If it fits, it shall copy its data into the buffer provided by     |
        |                     | PduInfoPtr-&gt;SduDataPtr and update the length of the actual         |
        |                     | copied data in PduInfoPtr-&gt;SduLength.                              |
        |                     | If not, it returns E_NOT_OK without changing PduInfoPtr.           |</pre>
        (SRS_BSW_00369)
      </description>
      <verifycrit>
        This can be tested with a conformance test:
        1. If the available data FITS into the buffer size reported by PduInfoPtr-&gt;SduLength, the
           upper layer module shall copy its data into the buffer provided by
           PduInfoPtr-&gt;SduDataPtr.
          1.1. After copying data, the upper layer module shall update the length of the actual
               copied data in PduInfoPtr-&gt;SduLength.
          1.2. FrArTp_TriggerTransmit shall return E_OK.
        2. If available data DOESN'T FIT into the buffer size reported by PduInfoPtr-&gt;SduLength,
           FrArTp_TriggerTransmit shall return E_NOT_OK and shall not change PduInfoPtr.
      </verifycrit>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_TriggerTransmit_EnoughBuffer</srcid><srcstatus/><internalId>883</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_TriggerTransmit_NotEnoughBuffer</srcid><srcstatus/><internalId>884</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception_FC_TriggerTransmit_Fail</srcid><srcstatus/><internalId>890</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception_FC_Transmit_Fail</srcid><srcstatus/><internalId>891</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception_StandardFunctions</srcid><srcstatus/><internalId>892</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transmission_StandardFunctions</srcid><srcstatus/><internalId>921</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/FrArTp_Api.h_57</srcid><srcstatus/><internalId>633</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/FrArTp_Cbk.h_57</srcid><srcstatus/><internalId>645</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_545</srcid><srcstatus/><internalId>727</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>306</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00152</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Service name: FrArTp_RxIndication <pre>
        | Syntax:             | void FrArTp_RxIndication                                               |
        |                     | (                                                                      |
        |                     |   PduIdType RxPduId,                                                   |
        |                     |   const PduInfoType* PduInfoPtr                                        |
        |                     | )                                                                      |
        | Service ID[hex]:    | 0x42                                                                   |
        | Sync/Async:         | Synchronous                                                            |
        | Reentrancy:         | Reentrant for different PduIds. Non reentrant for the same PduId.      |
        | Parameters (in):    | RxPduId    | ID of the received I-PDU.                                 |
        |                     | PduInfoPtr | Contains the length (SduLength) of the received I-PDU and |
        |                     |            | a pointer to a buffer (SduDataPtr) containing the I-PDU.  |
        | Parameters (inout): | None                                                                   |
        | Parameters (out):   | None                                                                   |
        | Return value:       | None                                                                   |
        | Description:        | Indication of a received I-PDU from a lower layer communication        |
        |                     | interface module.                                                      |</pre>
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.EB.FrArTp_RxIndication</srcid><srcstatus/><internalId>451</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.RxIndicationPduInfoPtr</srcid><srcstatus/><internalId>553</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>307</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00153</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Service name: FrArTp_TxConfirmation <pre>
        | Syntax:             | void FrArTp_TxConfirmation( PduIdType TxPduId )                   |
        | Service ID[hex]:    | 0x40                                                              |
        | Sync/Async:         | Synchronous                                                       |
        | Reentrancy:         | Reentrant for different PduIds. Non reentrant for the same PduId. |
        | Parameters (in):    | TxPduId | ID of the I-PDU that has been transmitted.              |
        | Parameters (inout): | None                                                              |
        | Parameters (out):   | None                                                              |
        | Return value:       | None                                                              |
        | Description:        | The lower layer communication interface module confirms           |
        |                     | the transmission of an I-PDU.                                     |</pre>
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception_StandardFunctions</srcid><srcstatus/><internalId>892</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transmission_StandardFunctions</srcid><srcstatus/><internalId>921</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/FrArTp_Api.h_69</srcid><srcstatus/><internalId>635</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/FrArTp_Cbk.h_36</srcid><srcstatus/><internalId>644</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_615</srcid><srcstatus/><internalId>733</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>308</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00162</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Service name: FrArTp_MainFunction <pre>
        | Syntax:          | void FrArTp_MainFunction( void )                       |
        | Service ID[hex]: | 0x10                                                   |
        | Description:     | Schedules the FlexRay TP. (Entry point for scheduling) |</pre>
      </description>
      <comment>
        Please note: This function is called directly by the Basic Software Scheduler (SchM).
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:FrArTp</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception_StandardFunctions</srcid><srcstatus/><internalId>892</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transmission_StandardFunctions</srcid><srcstatus/><internalId>921</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/FrArTp_Api.h_75</srcid><srcstatus/><internalId>636</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/FrArTp_Api.h_277</srcid><srcstatus/><internalId>643</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp.c.m4_112</srcid><srcstatus/><internalId>650</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>309</internalId></specobject>

    <specobject>
      <id>FrArTp.ASRR20-11.SWS_FrArTp_00219</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, vR20-11</source>
      <version>1</version>
      <description>
        All interfaces that are required to fulfill the core functionality of the module.<pre>
        | API function                | Description                                                     |
        +-----------------------------+-----------------------------------------------------------------+
        | FrIf_Transmit               | Requests transmission of a PDU.                                 |
        +-----------------------------+-----------------------------------------------------------------+
        | PduR_FrArTpCopyRxData       | This function is called to provide the received data            |
        |                             | of an I-PDU segment (N-PDU) to the upper layer.                 |
        |                             | Each call to this function provides the next part of            |
        |                             | the I-PDU data.                                                 |
        |                             | The size of the remaining buffer is written to the position     |
        |                             | indicated by bufferSizePtr.                                     |
        +-----------------------------+-----------------------------------------------------------------+
        | PduR_FrArTpCopyTxData       | This function is called to acquire the transmit data of         |
        |                             | an I-PDU segment (N-PDU). Each call to this function provides   |
        |                             | the next part of the I-PDU data unless retry-&gt;TpDataState       |
        |                             | is TP_DATARETRY. In this case the function restarts to copy     |
        |                             | the data beginning at the offset from the current position      |
        |                             | indicated by retry-&gt;TxTpDataCnt. The size of the remaining data |
        |                             | is written to the position indicated by availableDataPtr.       |
        +-----------------------------+-----------------------------------------------------------------+
        | PduR_FrArTpRxIndication     | Called after an I-PDU has been received via the TP API,         |
        |                             | the result indicates whether the transmission                   |
        |                             | was successful or not.                                          |
        +-----------------------------+-----------------------------------------------------------------+
        | PduR_FrArTpStartOfReception | This function is called at the start of receiving an N-SDU.     |
        |                             | The N-SDU might be fragmented into multiple N-PDUs (FF with one |
        |                             | or more following CFs) or might consist of a single N-PDU (SF). |
        |                             | The service shall provide the currently available maximum       |
        |                             | buffer size when invoked with TpSduLength equal to 0.           |
        +-----------------------------+-----------------------------------------------------------------+
        | PduR_FrArTpTxConfirmation   | This function is called after the I-PDU has been transmitted    |
        |                             | on its network, the result indicates whether the transmission   |
        |                             | was successful or not.                                          |
        +-----------------------------+-----------------------------------------------------------------+</pre>
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <tags>
        <tag>Unit:Encode</tag>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASRR20-11.SWS_FrArTp_00219.FrIf_Transmit</srcid><srcstatus/><internalId>311</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASRR20-11.SWS_FrArTp_00219.PduR_FrArTpCopyRxData</srcid><srcstatus/><internalId>312</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASRR20-11.SWS_FrArTp_00219.PduR_FrArTpCopyTxData</srcid><srcstatus/><internalId>313</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASRR20-11.SWS_FrArTp_00219.PduR_FrArTpRxIndication</srcid><srcstatus/><internalId>314</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASRR20-11.SWS_FrArTp_00219.PduR_FrArTpStartOfReception</srcid><srcstatus/><internalId>315</internalId></linkedfrom><linkedfrom><srcid>FrArTp.ASRR20-11.SWS_FrArTp_00219.PduR_FrArTpTxConfirmation</srcid><srcstatus/><internalId>316</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>310</internalId></specobject>

    <specobject>
      <id>FrArTp.ASRR20-11.SWS_FrArTp_00219.FrIf_Transmit</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, vR20-11</source>
      <version>1</version>
      <description>
        The FrIf_Transmit interface is required to fulfill the core functionality of the module.
      </description>
      <verifycrit>
        This can be tested with a compile test: Enable only required api functions in the stub and
        module must be compilable.
      </verifycrit>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FRARTP_COMTEST_002_ONLY_MANDATORY_INTERFACES</srcid><srcstatus/><internalId>841</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_485</srcid><srcstatus/><internalId>725</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASRR20-11.SWS_FrArTp_00219</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>310</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>311</internalId></specobject>

    <specobject>
      <id>FrArTp.ASRR20-11.SWS_FrArTp_00219.PduR_FrArTpCopyRxData</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, vR20-11</source>
      <version>1</version>
      <description>
        The PduR_FrArTpCopyRxData interface is required to fulfill the core functionality of the
        module.
      </description>
      <verifycrit>
        This can be tested with a compile test: Enable only required api functions in the stub and
        module must be compilable.
      </verifycrit>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FRARTP_COMTEST_002_ONLY_MANDATORY_INTERFACES</srcid><srcstatus/><internalId>841</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SduMng.c_253</srcid><srcstatus/><internalId>823</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASRR20-11.SWS_FrArTp_00219</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>310</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>312</internalId></specobject>

    <specobject>
      <id>FrArTp.ASRR20-11.SWS_FrArTp_00219.PduR_FrArTpCopyTxData</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, vR20-11</source>
      <version>1</version>
      <description>
        The PduR_FrArTpCopyTxData interface is required to fulfill the core functionality of the
        module.
      </description>
      <verifycrit>
        This can be tested with a compile test: Enable only required api functions in the stub and
        module must be compilable.
      </verifycrit>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FRARTP_COMTEST_002_ONLY_MANDATORY_INTERFACES</srcid><srcstatus/><internalId>841</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SduMng.c_285</srcid><srcstatus/><internalId>825</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASRR20-11.SWS_FrArTp_00219</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>310</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>313</internalId></specobject>

    <specobject>
      <id>FrArTp.ASRR20-11.SWS_FrArTp_00219.PduR_FrArTpRxIndication</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, vR20-11</source>
      <version>1</version>
      <description>
        The PduR_FrArTpRxIndication interface is required to fulfill the core functionality of the
        module.
      </description>
      <verifycrit>
        This can be tested with a compile test: Enable only required api functions in the stub and
        module must be compilable.
      </verifycrit>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FRARTP_COMTEST_002_ONLY_MANDATORY_INTERFACES</srcid><srcstatus/><internalId>841</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SduMng.c_269</srcid><srcstatus/><internalId>824</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASRR20-11.SWS_FrArTp_00219</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>310</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>314</internalId></specobject>

    <specobject>
      <id>FrArTp.ASRR20-11.SWS_FrArTp_00219.PduR_FrArTpStartOfReception</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, vR20-11</source>
      <version>1</version>
      <description>
        The PduR_FrArTpStartOfReception interface is required to fulfill the core functionality of the
        module.
      </description>
      <verifycrit>
        This can be tested with a compile test: Enable only required api functions in the stub and
        module must be compilable.
      </verifycrit>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FRARTP_COMTEST_002_ONLY_MANDATORY_INTERFACES</srcid><srcstatus/><internalId>841</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SduMng.c_239</srcid><srcstatus/><internalId>822</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASRR20-11.SWS_FrArTp_00219</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>310</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>315</internalId></specobject>

    <specobject>
      <id>FrArTp.ASRR20-11.SWS_FrArTp_00219.PduR_FrArTpTxConfirmation</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, vR20-11</source>
      <version>1</version>
      <description>
        The PduR_FrArTpTxConfirmation interface is required to fulfill the core functionality of the
        module.
      </description>
      <verifycrit>
        This can be tested with a compile test: Enable only required api functions in the stub and
        module must be compilable.
      </verifycrit>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FRARTP_COMTEST_002_ONLY_MANDATORY_INTERFACES</srcid><srcstatus/><internalId>841</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SduMng.c_299</srcid><srcstatus/><internalId>826</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASRR20-11.SWS_FrArTp_00219</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>310</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>316</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00220</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        API function: Det_ReportError
        Description:  Service to report development errors.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:FrArTp</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00220.1</srcid><srcstatus/><internalId>318</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>317</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00220.1</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If Development Error Tracing is enabled, the interface Det_ReportError is required to
        fulfill functionality of the module.
      </description>
      <verifycrit>
        This can be tested with a compile test: Enable only required api functions in the stub and
        module must be compilable.
      </verifycrit>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <tags>
        <tag>Unit:FrArTp</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FRARTP_COMTEST_002_ONLY_MANDATORY_INTERFACES</srcid><srcstatus/><internalId>841</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Int.h.m4_83</srcid><srcstatus/><internalId>740</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00220</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>317</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>318</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00001_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Module Name: FrArTp
        Module Description: Configuration of the FrArTp (FlexRay Transport Protocol) module.
        Post-Build Variant Support: true
        Included Containers
        Container Name: FrArTpGeneral
        Multiplicity: 1
        Scope/Dependency: This container contains the general configuration (parameters)
        of the FlexRay TP.
        Container Name: FrArTpMultipleConfig
        Multiplicity: 1
        Scope/Dependency: This container contains the Configuration Parameters and sub containers
        of the AUTOSAR FrArTp module.
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>319</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00012_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Container Name: FrArTpGeneral
        Description: This container contains the general configuration (parameters)
        of the FlexRay TP.

        Configuration Parameters
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>320</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00011_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpDevErrorDetect
        Description: Switches the Default Error Tracer (Det) detection and notification ON or OFF.<br/>
        * true: enabled (ON).<br/>
        * false: disabled (OFF).<br/>
        Multiplicity: 1
        Type: EcucBooleanParamDef
        Default value: --
        Post-Build Variant Value: false

        <pre>Value Configuration Class:
        | Pre-compile time | X  | All Variants        |
        | Link time        | -- |                     |
        | Post-build time  | -- |                     |</pre>

        Scope / Dependency: scope: local
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_PreCompileSwitches_0</srcid><srcstatus/><internalId>956</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_PreCompileSwitches_1</srcid><srcstatus/><internalId>957</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_PreCompileSwitches_2</srcid><srcstatus/><internalId>958</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_PreCompileSwitches_3</srcid><srcstatus/><internalId>959</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_PreCompileSwitches_4</srcid><srcstatus/><internalId>960</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>321</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00014_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpHaveAckRt
        Description: Preprocessor switch for enabling the Acknowledgement and retry mechanisms.
        Multiplicity: 1
        Type: EcucBooleanParamDef
        Default value: --
        Post-Build Variant Value: false

        <pre>Value Configuration Class:
        | Pre-compile time | X  | All Variants        |
        | Link time        | -- |                     |
        | Post-build time  | -- |                     |</pre>

        Scope / Dependency: scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>322</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00015_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpHaveGrpSeg
        Description: Preprocessor switch for enabling segmentation of 1:n messages.
        Multiplicity: 1
        Type: EcucBooleanParamDef
        Default value: --
        Post-Build Variant Value: false

        <pre>Value Configuration Class:
        | Pre-compile time | X  | All Variants        |
        | Link time        | -- |                     |
        | Post-build time  | -- |                     |</pre>

        Scope / Dependency: scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>323</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00016_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpHaveLm
        Description: Preprocessor switch for enabling the mechanism for
        message longer than allowed by.
        Multiplicity: 1
        Type: EcucBooleanParamDef
        Default value: --
        Post-Build Variant Value: false

        <pre>Value Configuration Class:
        | Pre-compile time | X  | All Variants        |
        | Link time        | -- |                     |
        | Post-build time  | -- |                     |</pre>

        Scope / Dependency: scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>324</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00017_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpHaveTc
        Description: Preprocessor switch for enabling Transmit Cancellation and Receive Cancellation.
        Multiplicity: 1
        Type: EcucBooleanParamDef
        Default value: --
        Post-Build Variant Value: false

        <pre>Value Configuration Class:
        | Pre-compile time | X  | All Variants        |
        | Link time        | -- |                     |
        | Post-build time  | -- |                     |</pre>

        Scope / Dependency: scope: local
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_PreCompileSwitches_0</srcid><srcstatus/><internalId>956</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_PreCompileSwitches_1</srcid><srcstatus/><internalId>957</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_PreCompileSwitches_2</srcid><srcstatus/><internalId>958</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_PreCompileSwitches_3</srcid><srcstatus/><internalId>959</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_PreCompileSwitches_4</srcid><srcstatus/><internalId>960</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>325</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00020_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpMainFuncCycle
        Description: This parameter contains the calling period of the TPs Main Function.
        The parameter is specified in seconds.
        Multiplicity: 1
        Type: EcucFloatParamDef
        Range: 0 .. 1.024
        Default value: --
        Post-Build Variant Value: true

        <pre>Value Configuration Class:
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        Scope / Dependency: scope: ECU
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>326</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00054_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpVersionInfoApi
        Description: Preprocessor switch for enabling the Version info API.
        Multiplicity: 1
        Type: EcucBooleanParamDef
        Default value: --
        Post-Build Variant Value: false

        <pre>Value Configuration Class:
        | Pre-compile time | X  | All Variants        |
        | Link time        | -- |                     |
        | Post-build time  | -- |                     |</pre>

        Scope / Dependency: scope: local
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_PreCompileSwitches_0</srcid><srcstatus/><internalId>956</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_PreCompileSwitches_1</srcid><srcstatus/><internalId>957</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_PreCompileSwitches_2</srcid><srcstatus/><internalId>958</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_PreCompileSwitches_3</srcid><srcstatus/><internalId>959</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_PreCompileSwitches_4</srcid><srcstatus/><internalId>960</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>327</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00005_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Container Name: FrArTpChannel
        Description: This container contains the configuration (parameters)
        of one FlexRay TP channel.
        Post-Build Variant Multiplicity: true

        <pre>Multiplicity Configuration Class
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        Configuration Parameters
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>328</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00002_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpAckType
        Description: This parameter defines the type of acknowledgement which is used for
        the specific channel.
        Multiplicity: 1
        Type: EcucEnumerationParamDef

        <pre>Range:
        | FRARTP_ACK_WITHOUT_RT | Acknowledgement without retry |
        | FRARTP_ACK_WITH_RT    | Acknowledgement with retry    |
        | FRARTP_NO             | No acknowledgement            |</pre>

        Post-Build Variant Value: true

        <pre>Value Configuration Class:
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        Scope / Dependency: scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>329</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00008_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpAdrType
        Description: This parameter states the addressing type this connection has.
        The meanings of the values are one byte and two byte.
        Multiplicity: 1
        Type: EcucEnumerationParamDef
        <pre>Range:
        | FRARTP_OB | One Byte  |
        | FRARTP_TB | Two Bytes |</pre>

        Post-Build Variant Value: true

        <pre>Value Configuration Class:
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        Scope / Dependency: scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>330</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00057_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpConcurrentConnections
        Description: This parameter defines the number of connections that can be active at
        the same time. If set to 0, all configured connections can be active at the same time.
        Multiplicity: 0..1
        Type: EcucIntegerParamDef
        Range: 0 .. 255
        Default value: 0
        Post-Build Variant Multiplicity: true
        Post-Build Variant Value: true

        <pre>Multiplicity Configuration Class
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        <pre>Value Configuration Class:
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        Scope / Dependency: scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>331</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00013_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpGrpSeg
        Description: Here can be specified, whether segmentation within a 1:n connection
        is allowed or not.
        Multiplicity: 1
        Type: EcucBooleanParamDef
        Default value: --
        Post-Build Variant Value: true

        <pre>Value Configuration Class:
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        Scope / Dependency: scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>332</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00019_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpLm
        Description: This specifies the maximum message length for the particular channel.
        Multiplicity: 1
        Type: EcucEnumerationParamDef

        <pre>Range:
        | FRARTP_ISO  | Up to (2**12)-1 Byte message length                                 |
        |             | (No FF-Ex or SF-E or AF shall be used and recognized)               |
        | FRARTP_ISO6 | As ISO, but the maximum payload length is limited to 6 byte         |
        |             | (SF-I, FF-I, CF). This is necessary to route TP on CAN              |
        |             | when using Extended Addressing or Mixed Addressing on CAN.          |
        | FRARTP_L4G  | SF-E allowed (SF of arbitrary length depending on FrArTpPduLength), |
        |             | up to (2**32)-1 byte message length (all FF-x allowed).             |</pre>

        Post-Build Variant Value: true

        <pre>Value Configuration Class:
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        Scope / Dependency: scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>333</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00021_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpMaxAr
        Description: This parameter defines the maximum number of trying to send a frame when
        a TIMEOUT AR occurs.
        Multiplicity: 1
        Type: EcucIntegerParamDef
        Range: 0 .. 255
        Default value: --
        Post-Build Variant Value: true

        <pre>Value Configuration Class:
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        Scope / Dependency: scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>334</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00022_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpMaxAs
        Description: This parameter defines the maximum number of trying to send a frame when
        a TIMEOUT AS occurs.
        Multiplicity: 1
        Type: EcucIntegerParamDef
        Range: 0 .. 255
        Default value: --
        Post-Build Variant Value: true

        <pre>Value Configuration Class:
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        Scope / Dependency: scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>335</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00023_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpMaxBs
        Description: This parameter defines the number of consecutive CFs between two FCs (block size).
        Valid values are 1 .. 16 when retry is activated, and 0 .. 255 otherwise.
        Multiplicity: 1
        Type: EcucIntegerParamDef
        Range: 0 .. 255
        Default value: --
        Post-Build Variant Value: true

        <pre>Value Configuration Class:
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        Scope / Dependency: scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00115</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>273</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>336</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00026_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpMaxRn
        Description: This parameter defines the maximum number of retries
        (if retry is configured for the particular channel).
        Multiplicity: 1
        Type: EcucIntegerParamDef
        Range: 0 .. 255
        Default value: --
        Post-Build Variant Value: true

        <pre>Value Configuration Class:
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        Scope / Dependency: scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>337</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00059_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpMaxWft
        Description: This parameter defines the maximal number of wait frames to be sent for
        a pending connection.
        Multiplicity: 0..1
        Type: EcucIntegerParamDef
        Range: 0 .. 255
        Default value: --
        Post-Build Variant Multiplicity: true
        Post-Build Variant Value: true

        <pre>Multiplicity Configuration Class
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>


        <pre>Value Configuration Class:
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        Scope / Dependency: scope: local
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.FrArTpMaxWft</srcid><srcstatus/><internalId>554</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>512</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>338</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00042_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpStMin
        Description: This parameter defines the minimum amount of time between two
        succeeding CFs of a 1:1 segmented transmission in seconds. Valid values are
        0, 100micros, 200micros .. 900micros, 1ms, 2ms .. 127ms.
        The value can be changed at runtime using the FrArTp_ChangeParameter interface.
        FrArTpStMin must be an integer multiple of the cycle length multiplied with
        the multiplexing factor, i.e. FrArTpStMin = n * FrIfGdCycle * m, where n is
        an integer &gt;= 0 and m is the cycle multiplexor of those cycles where PDUs of
        the PDU pool are scheduled.
        Please note: Due to the scheduling strategies of FrArTp, FrArTpStMin can only be kept to
        a degree defined by the maximum temporal distance of the PDUs of a PDU pool within
        one FlexRay cycle.
        Multiplicity: 1
        Type: EcucFloatParamDef
        Range: 0 .. 0.127
        Default value: --
        Post-Build Variant Value: true

        <pre>Value Configuration Class:
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        Scope / Dependency: scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>339</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00060_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpStMinGrpSeg
        Description: This parameter defines the minimum amount of time between two succeeding
        CFs of a 1:n segmented transmission in seconds. Valid values are 0, 100micros,
        200micros ... 900micros, 1ms, 2ms .. 127ms. The value can be changed at runtime using
        the FrArTp_ChangeParameter interface.
        FrArTpStMinGrpSeg must be an integer multiple of the cycle length multiplied with
        the multiplexing factor, i.e. FrArTpStMinGrpSeg = n * FrIfGdCycle * m,
        where n is an integer &gt;= 0 and m is the cycle multiplexor of those cycles
        where PDUs of the PDU pool are scheduled.
        Please note: Due to the scheduling strategies of FrArTp, FrArTpStMinGrpSeg can only
        be kept to a degree defined by the maximum temporal distance of the PDUs of
        a PDU pool within one FlexRay cycle.
        Multiplicity: 0..1
        Type: EcucFloatParamDef
        Range: 0 .. 0.127
        Default value: --
        Post-Build Variant Multiplicity: true
        Post-Build Variant Value: true

        <pre>Multiplicity Configuration Class
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>


        <pre>Value Configuration Class:                     |
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        Scope / Dependency: scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>340</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00043_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpTc
        Description: With this switch Transmit Cancellation and Receive Cancellation can
        be turned on or off for this channel.
        Multiplicity: 1
        Type: EcucBooleanParamDef
        Default value: false
        Post-Build Variant Value: true

        <pre>Value Configuration Class:
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        Scope / Dependency: scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>341</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00044_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpTimeBr
        Description: This parameter defines the time in seconds between receiving
        the last CF of a block or an FF-x (or SF-x) and sending out an FC or AF.
        It is obvious that
        FRARTP_TIME_BR + (FRARTP_TIMEOUT_AR * FRARTP_MAX_AR) &lt; FRARTP_TIMEOUT_BS
        must hold (because the transmission duration on the bus has also to be considered).
        This parameter is defined in ISO 15765-2. It is contained in the configuration as
        a performance requirement.
        Multiplicity: 1
        Type: EcucFloatParamDef
        Range: 0 .. 65.535
        Default value: --
        Post-Build Variant Value: true

        <pre>Value Configuration Class:
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        Scope / Dependency: scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>342</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00046_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpTimeCs
        Description: This parameter defines the time in seconds between the sending of
        two consecutive CFs or between reception of an FC or AF and sending of the next CF.
        It is obvious that
        FRARTP_TIME_CS + (FRARTP_TIMEOUT_AS * FRARTP_MAX_AS) &lt; FRARTP_TIMEOUT_CR
        must hold (because the transmission duration on the bus has also to be considered).
        This parameter is defined in ISO 15765-2. It is contained in the configuration as
        a performance requirement.
        Multiplicity: 1
        Type: EcucFloatParamDef
        Range: 0 .. 65.535
        Default value: --
        Post-Build Variant Value: true

        <pre>Value Configuration Class:
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        Scope / Dependency: scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>343</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00048_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpTimeoutAr
        Description: This parameter states the timeout in seconds between the PDU transmit
        request of the Transport Layer to the FlexRay Interface and the corresponding
        confirmation of the FlexRay Interface on the receiver side (for FC or AF).
        Multiplicity: 1
        Type: EcucFloatParamDef
        Range: 0 .. 65.535
        Default value: --
        Post-Build Variant Value: true

        <pre>Value Configuration Class:
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        Scope / Dependency: scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>344</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00049_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpTimeoutAs
        Description: This parameter states the timeout in seconds between the PDU transmit
        request for the first PDU of the group used in the current connection of
        the Transport Layer to the FlexRay Interface and the corresponding confirmation
        of the FlexRay Interface (when having sent the last PDU of the group used in
        this connection) on the sender side (SF-x, FF-x, CF).
        Multiplicity: 1
        Type: EcucFloatParamDef
        Range: 0 .. 65.535
        Default value: --
        Post-Build Variant Value: true

        <pre>Value Configuration Class:
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        Scope / Dependency: scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>345</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00050_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpTimeoutBs
        Description: This parameter defines the timeout in seconds for waiting for
        an FC or AF on the sender side in a 1:1 connection.
        Multiplicity: 1
        Type: EcucFloatParamDef
        Range: 0 .. 65.535
        Default value: --
        Post-Build Variant Value: true

        <pre>Value Configuration Class:
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        Scope / Dependency: scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>346</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00051_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpTimeoutCr
        Description: This parameter defines the timeout value in seconds for waiting for
        a CF or FF-x (in case of retry) after receiving the last CF or after sending
        an FC or AF on the receiver side.
        Multiplicity: 1
        Type: EcucFloatParamDef
        Range: 0 .. 65.535
        Default value: --
        Post-Build Variant Value: true

        <pre>Value Configuration Class:
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        Scope / Dependency: scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>347</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00029_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Container Name FrArTpPdu
        Description: Container to hold the PDU parameters.
        ImplementationType: PduInfoType
        Post-Build Variant Multiplicity: true

        <pre>Multiplicity Configuration Class
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        Configuration Parameters
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>348</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00030_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpPduDirection
        Description: This parameter defines the direction of the PDU.
        Multiplicity: 1
        Type: EcucEnumerationParamDef
        Range: FRARTP_RX| Received PDU
        FRARTP_TX| Transmitted PDU
        Post-Build Variant Value: true

        <pre>Value Configuration Class:
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        Scope / Dependency: scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>349</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00035_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpPduId
        Description: This is the identifier of the FlexRay Interface PDUs (Fr N-PDU, Fr L-SDU)
        in which the Transport Layer Frames of this channel should be transmitted.
        For FrArTpPduDirection == FRARTP_RX, this parameter specifies the ID that is used
        by FrIf when calling FrArTp_RxIndication, while for FrArTpPduDirection == FRARTP_TX
        this ID is used by FrIf when calling FrArTp_TxConfirmation or FrArTp_TriggerTransmit.
        ImplementationType: PduIdType
        Multiplicity: 1
        Type: EcucIntegerParamDef (Symbolic Name generated for this parameter)
        Range: 0 .. 65535
        Default value: --
        Post-Build Variant Value: false

        <pre>Value Configuration Class:
        | Pre-compile time | X  | All Variants        |
        | Link time        | -- |                     |
        | Post-build time  | -- |                     |</pre>

        Scope / Dependency: scope: ECU
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>350</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00036_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpPduRef
        Description: --
        Multiplicity: 1
        Type: Reference to [ Pdu ]
        Post-Build Variant Value: true

        <pre>Value Configuration Class:
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        Scope / Dependency: scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>351</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00010_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Container Name: FrArTpConnection
        Description: This container contains the configuration (parameters)
        of one FlexRay TP connection.
        A connection can only belong to one channel.
        Post-Build Variant Multiplicity: true

        <pre>Multiplicity Configuration Class
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        Configuration Parameters
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>352</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00058_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpConPrioPdus
        Description: This parameter defines the number of TxNPdus to which this connection has
        prioritized access. It must be ensured that the number of prioritized PDUs of
        all connections is smaller than the total number of TxNPdus in the associated PDU pool.
        Multiplicity: 0..1
        Type: EcucIntegerParamDef
        Range: 0 .. 255
        Default value: 0
        Post-Build Variant Multiplicity: true
        Post-Build Variant Value: true

        <pre>Multiplicity Configuration Class
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        <pre>Value Configuration Class:
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        Scope / Dependency: scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>353</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00018_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpLa
        Description: This parameter defines the Local Address for the respective connection.
        When the local instance is the sender, this is the Source Address within the TP frame.
        When the local instance is the receiver, this is the Target Address within the TP frame.
        Note that in case of 1 byte addressing only the values from 0x0000 - 0x00FF are valid.
        Multiplicity: 1
        Type: EcucIntegerParamDef
        Range: 0 .. 65535
        Default value: --
        Post-Build Variant Value: true

        <pre>Value Configuration Class:
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        Scope / Dependency: scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>354</internalId></specobject>
    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00027_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpMultRec
        Description: This parameter defines, whether this connection is an 1:1 ('false') or
        an 1:n ('true') connection.
        Of course, if the channel to which the connection is configured has retry or
        acknowledgement enabled, no retry or acknowledgement will occur in case
        the connection is an 1:n connection.
        Multiplicity: 1
        Type: EcucBooleanParamDef
        Default value: --
        Post-Build Variant Value: true

        <pre>Value Configuration Class:
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        Scope / Dependency: scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>355</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00037_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpRa
        Description: This parameter defines the Remote Address for the respective connection.
        When the local instance is the sender, this is the Target Address within the TP frame.
        When the local instance is the receiver, this is the Source Address within the TP frame.
        Note that in case of 1 byte addressing only the values from 0x0000 - 0x00FF are valid.
        Multiplicity: 1
        Type: EcucIntegerParamDef
        Range: 0 .. 65535
        Default value: --
        Post-Build Variant Value: true

        <pre>Value Configuration Class:
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        Scope / Dependency: scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>356</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00055_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Container Name FrArTpTxSdu
        Description: Describes the Tx SDU
        Post-Build Variant Multiplicity: true

        <pre>Multiplicity Configuration Class
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        Configuration Parameters
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>357</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00041_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpSduTxId
        Description: This is a unique identifier for a received or a to be transmitted message.
        With this (and by means of e.g. a lookup table) the PDU Router can route the message
        appropriately without dealing with the particularities of the Transport Layer.
        This parameter can also be seen as the identifier of a connection.
        ImplementationType: PduIdType
        Multiplicity: 1
        Type: EcucIntegerParamDef (Symbolic Name generated for this parameter)
        Range: 0 .. 65535
        Default value: --
        Post-Build Variant Value: false

        <pre>Value Configuration Class:
        | Pre-compile time | X  | All Variants        |
        | Link time        | -- |                     |
        | Post-build time  | -- |                     |</pre>

        Scope / Dependency: scope: ECU
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>358</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00052_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpTxSduRef
        Description: Reference to a PDU in the global PDU structure.
        Multiplicity: 1
        Type: Reference to [ Pdu ]
        Post-Build Variant Value: true

        <pre>Value Configuration Class:
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        Scope / Dependency: scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>359</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00038_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Container Name FrArTpRxSdu
        Description: Describes the Rx SDU
        Post-Build Variant Multiplicity: true

        <pre>Multiplicity Configuration Class
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        Configuration Parameters
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>360</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00040_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpSduRxId
        Description: This is a unique identifier for a received message. This Id is used in
        the CancelReceive and ChangeParameter API call.
        ImplementationType: PduIdType
        Multiplicity: 1
        Type: EcucIntegerParamDef (Symbolic Name generated for this parameter)
        Range: 0 .. 65535
        Default value: --
        Post-Build Variant Value: false

        <pre>Value Configuration Class:
        | Pre-compile time | X  | All Variants        |
        | Link time        | -- |                     |
        | Post-build time  | -- |                     |</pre>

        Scope / Dependency: scope: ECU
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>361</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00039_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Name: FrArTpRxSduRef
        Description: Reference to a PDU in the global PDU structure.
        Multiplicity: 1
        Type: Reference to [ Pdu ]
        Post-Build Variant Value: true

        <pre>Value Configuration Class:
        | Pre-compile time | X  | VARIANT-PRE-COMPILE |
        | Link time        | -- |                     |
        | Post-build time  | X  | VARIANT-POST-BUILD  |</pre>

        Scope / Dependency: scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>362</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.ECUC_FrArTp_00028_Conf</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Container Name FrArTpMultipleConfig
        Description: This container contains the
        Configuration Parameters and sub containers of the AUTOSAR FrArTp module.
        Configuration Parameters

        Included Containers
        Container Name: FrArTpChannel
        Multiplicity: 1..*
        Scope / Dependency: This container contains the configuration (parameters) of
        one FlexRay TP channel.
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>363</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00169</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        This table gives an overview when the time of each of these parameters start to run and when
        it is stopped. Note that if SF-x is mentioned it is meant in the case acknowledgement is
        configured (the same for AF).<pre>
        +------------------+----------------------------------+----------------------------------+
        | Timing Parameter | Start                            | Stop                             |
        +------------------+----------------------------------+----------------------------------+
        | FrArTpTimeoutAs  | FrIf_Transmit                    | FrArTp_TxConfirmation            |
        |                  | (first PDU of the group used by  | (for the last PDU of the group   |
        |                  | the current connection)          | used by the current connection)  |
        +------------------+----------------------------------+----------------------------------+
        | FrArTpTimeoutAr  | FrIf_Transmit (FC or AF)         | FrArTp_TxConfirmation (FC or AF) |
        +------------------+----------------------------------+----------------------------------+
        | FrArTpTimeoutBs  | FrArTp_TxConfirmation (SF-x,     | FrArTp_RxIndication (FC or AF)   |
        |                  | FF-x or last CF of a block),     |                                  |
        |                  | FrArTp_RxIndication (FC or AF,   |                                  |
        |                  | both in case of FR_FS = WAIT)    |                                  |
        +------------------+----------------------------------+----------------------------------+
        | FrArTpTimeBr     | FrArTp_RxIndication (FF-x,       | FrIf_Transmit (FC or AF)         |
        |                  | last CF of a block or SF-x),     |                                  |
        |                  | FrArTp_TxConfirmation (FC or AF, |                                  |
        |                  | both in case of FR_FS = WAIT)    |                                  |
        +------------------+----------------------------------+----------------------------------+
        | FrArTpTimeoutCr  | FrArTp_RxIndication (CF),        | FrArTp_RxIndication              |
        |                  | FrArTp_TxConfirmation (FC or AF) | (CF or SF-x, FF-x (the latter    |
        |                  |                                  | two in case of retry))           |
        +------------------+----------------------------------+----------------------------------+
        | FrArTpTimeCs     | FrArTp_TxConfirmation (CF),      |FrIf_Transmit (CF)                |
        |                  | FrArTp_RxIndication (FC or AF    |                                  |
        |                  | (not after the last one))        |                                  |
        +------------------+----------------------------------+----------------------------------+</pre>
      </description>
      <comment>
        This requirement is informational only. It does not state a functional requirement.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>364</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00170</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        For 1:n connections only the parameters FrArTpTimeoutAs, FrArTpTimeCs (only CF) and
        FrArTpTimeoutCr (only CF) hold, since no flow control or acknowledgement is allowed in that
        case.
      </description>
      <comment>
        This requirement is informational only. It does not state a functional requirement.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>365</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00171</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        To achieve ISO 15765-2 compliance within a channel/connection, there are restrictions for
        some parameters. Those marked with a "*" are only relevant, if the features are compiled
        in (see section 10.2).<pre>
        +-------------------+-----------------------------------------------------------+
        | Parameter         | Allowed values                                            |
        +-------------------+-----------------------------------------------------------+
        | FrArTpAckType (*) | 'FRARTP_NO'                                               |
        | FrArTpGrpSeg  (*) | false                                                     |
        | FrArTpTc      (*) | false                                                     |
        | FrArTpLm      (*) | 'FRARTP_ISO', 'FRARTP_ISO6'                               |
        +-------------------+-----------------------------------------------------------+
        | N-PDU length      |  9 [FrArTpAdrType == FRARTP_OB, FrArTpLm == FRARTP_ISO6], |
        |                   | 10 [FrArTpAdrType == FRARTP_OB, FrArTpLm == FRARTP_ISO],  |
        |                   | 11 [FrArTpAdrType == FRARTP_TB, FrArTpLm == FRARTP_ISO6], |
        |                   | 12 [FrArTpAdrType == FRARTP_TB, FrArTpLm == FRARTP_ISO]   |
        +-------------------+-----------------------------------------------------------+</pre>
      </description>
      <comment>
        This requirement is informational only. It does not state a functional requirement.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>366</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00172</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        There are several dependencies among the connection specific and
        channel specific configuration parameters:<br/>
        * If FrArTpMultRec sets the connection to be a 1:1 connection, then the value of
        FrArTpGrpSeg does not play a role for this connection since it is only relevant
        for 1:n connections.<br/>
        * If FrArTpMultRec sets the connection to be a 1:n connection, then the values
        of FrArTpAckType, FrArTpMaxBs, and FrArTpMaxRn do not play a role for
        this connection, since they are only relevant for 1:1 connections.<br/>
        * If FrArTpMultRec sets the connection to be a 1:n connection or FrArTpAckType
        does not activate retry (FRARTP_NO, FRARTP_ACK_WITHOUT_RT) then the value
        of FrArTpMaxBs does not play a role for this connections since it is only
        relevant in 1:1 connections within channels with retry being activated.
      </description>
      <comment>
        This requirement is informational only. It does not state a functional requirement.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>367</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00242</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The following constraint shall hold for the timing parameters:
        VE + FrArTpTimeBr + (FrArTpTimeoutAr * FrArTpMaxAr) + VS &lt; FrArTpTimeoutBs
      </description>
      <comment>
        Where VE is the time from starting the BS timer until recognition
        of the frame in the receiver TP.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.TimingParamsVeVs</srcid><srcstatus/><internalId>550</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>368</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00243</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The following constraint shall hold for the timing parameters:
        VS + FrArTpTimeCs + (FrArTpTimeoutAs * FrArTpMaxAs)+ VE &lt; FrArTpTimeoutCr
      </description>
      <comment>
        Where VS is the time from starting the CR timer until recognition
        of the frame in the sender TP
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.TimingParamsVeVs</srcid><srcstatus/><internalId>550</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>369</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00180</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        It has to be assured, that FrArTpStMin &lt; FrArTpTimeoutCr since
        there will always be a timeout of the latter one otherwise. (SRS_BSW_00159)
      </description>
      <comment>
        This requirement is informational only. This is a configuration issue.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>370</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00181</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The configuration of a connection and a channel shall be, of course, the same
        at the sender and the receiver side.
        Only the values of FrArTpLa and FrArTpRa are swapped. (SRS_BSW_00159)
      </description>
      <comment>
        This requirement is informational only. This is a configuration issue.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>371</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00275</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If a channel references one PDU of a certain direction
        (received or transmitted) that is also referenced by another channel, both channels
        must reference exactly the same set of PDUs for this direction. This restriction
        ensures the pool semantics of referenced PDUs.
      </description>
      <comment>
        This requirement is informational only. This is a configuration issue.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>372</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00276</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        All PDUs of a PDU pool must have the same size, and all
        channels that reference these PDUs must have the same addressing type.
      </description>
      <comment>
        This requirement is informational only. This is a configuration issue.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>373</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00277</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        In the set of connections that are associated with a PDU pool,
        no two connections have the same address information, not even with reversed addresses.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_GenTest01002_Err_AddressesNotUnique</srcid><srcstatus/><internalId>845</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/FrArTp.xdm.m4_786</srcid><srcstatus/><internalId>834</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>374</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00278</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        The number of prioritized PDUs of all connections
        associated with a PDU pool must be less than the number of PDUs in the pool;
        otherwise, a set of active prioritized connections can lead to timeout in other
        connections.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.PduPriority</srcid><srcstatus/><internalId>544</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>375</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00174</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        If more than one N-PDU is used for one N-SDU within a connection,
        the FrIf shall guarantee, that the N-PDUs (L-SDUs) are scheduled
        (sent over the bus) in the same order the FlexRay AUTOSAR Transport Layer uses them,
        i.e. in ascending order regarding the N-PDU IDs used in the FlexRay AUTOSAR
        Transport Layer. To simplify configuration, all PDUs of a pool shall be arranged such
        that they are always received in the same order in which they have been transmitted,
        independent of the current cycle in the FlexRay communication round.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>lim</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>lim.FrArTp.EB_INTREQ_FrArTp_0005</srcid><srcstatus/><internalId>4</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>376</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00175</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        For every FrArTp L-SDU the PDU-Update/Valid Information
        of the FrIf shall be activated unless this is the only PDU in a frame.
      </description>
      <comment>
        This requirement is informational only. This is a FrIf configuration issue.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>377</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00182</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        For the last PDU in temporal order of each PDU pool,
        a TxConfirmation shall be configured.
      </description>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>lim</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>lim.FrArTp.EB_INTREQ_FrArTp_0004</srcid><srcstatus/><internalId>3</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>378</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.SWS_FrArTp_00999</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        These requirements are not applicable to this specification.
        (BSW00161, BSW00162, BSW00172, SRS_BSW_00301, SRS_BSW_00302,
        SRS_BSW_00307, SRS_BSW_00321, SRS_BSW_00325, SRS_BSW_00326,
        SRS_BSW_00334, SRS_BSW_00335, SRS_BSW_00339, SRS_BSW_00341,
        SRS_BSW_00342, SRS_BSW_00344, SRS_BSW_00347, SRS_BSW_00348,
        SRS_BSW_00375, SRS_BSW_00395, SRS_BSW_00400, SRS_BSW_00405,
        SRS_BSW_00409, SRS_BSW_00412, SRS_BSW_00415, SRS_BSW_00416,
        SRS_BSW_00417, SRS_BSW_00419, SRS_BSW_00422, SRS_BSW_00425,
        SRS_BSW_00426, SRS_BSW_00427, SRS_BSW_00428, SRS_BSW_00429,
        BSW00431, SRS_BSW_00433, BSW00434, SRS_BSW_00005, SRS_BSW_00010,
        SRS_BSW_00164, SRS_BSW_00168, and SRS_BSW_00170)
      </description>
      <comment>
        This requirement is informational only. It does not state a functional requirement.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>379</internalId></specobject>

    <specobject>
      <id>FrArTp.ASR42.Section_7.2</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_FlexRayARTransportLayer.pdf, v4.2.2</source>
      <version>1</version>
      <description>
        Section 7.2 of the SWS is an overview and does not contain any formally defined AUTOSAR
        requirements. The described behavior and functionality is covered in sufficient detail by
        requirements stated in the following sections.
      </description>
      <comment>
        This requirement is informational only.
      </comment>
      <releases>
        <release>AUTOSAR 4.2.2</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>380</internalId></specobject>

  </specobjects>
    <specobjects doctype="req">

    <specobject>
      <id>FrArTp.EB.RelocatablePBCfg</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In order to support post-build-time configuration data handled by relative offsets to the
        configuration start address, the container FrArTpGeneral must be extended by the configuration
        parameter FrArTpRelocatablePbcfgEnable.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Test_PBcfgM_Off</srcid><srcstatus/><internalId>838</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Test_PBcfgM_On</srcid><srcstatus/><internalId>839</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_PreCompileSwitches_0</srcid><srcstatus/><internalId>956</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_PreCompileSwitches_1</srcid><srcstatus/><internalId>957</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_PreCompileSwitches_2</srcid><srcstatus/><internalId>958</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_PreCompileSwitches_3</srcid><srcstatus/><internalId>959</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_PreCompileSwitches_4</srcid><srcstatus/><internalId>960</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>381</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.FrArTp_ChangeParameter.E_INVALID_PARAMETER</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error detection is enabled, and an invalid parameter is passed to
        FrArTp_ChangeParameter, the FrArTp shall raise the development error
        FRARTP_E_INVALID_PARAMETER (0x05) and shall return with error code E_NOT_OK.
      </description>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.EB.FrArTp_ChangeParameter.E_INVALID_PARAMETER.1</srcid><srcstatus/><internalId>383</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.FrArTp_ChangeParameter.E_INVALID_PARAMETER.2</srcid><srcstatus/><internalId>384</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.FrArTp_ChangeParameter.E_INVALID_PARAMETER.3</srcid><srcstatus/><internalId>385</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>382</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.FrArTp_ChangeParameter.E_INVALID_PARAMETER.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error detection is enabled, the service
        FrArTp_ChangeParameter() shall raise the development error
        FRARTP_E_INVALID_PARAMETER and shall return with error code E_NOT_OK
        if the user of this function hands over
        an invalid Stmin value range from 0x80 to 0xF0 and from 0xFA to
        0xFF.
      </description>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Det07_FrArTp_ChangeParameter_InvalidStminValue</srcid><srcstatus/><internalId>871</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SduMng.c_342</srcid><srcstatus/><internalId>832</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FrArTp_ChangeParameter.E_INVALID_PARAMETER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>382</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>383</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.FrArTp_ChangeParameter.E_INVALID_PARAMETER.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error detection is enabled, the service
        FrArTp_ChangeParameter() shall raise the development error
        FRARTP_E_INVALID_PARAMETER and shall return with error code E_NOT_OK
        if the user of this function hands over
        an invalid value (for BS or Stmin) greater than 0xFF.
      </description>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Det07_FrArTp_ChangeParameter_InvalidStminValue</srcid><srcstatus/><internalId>871</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Det07_FrArTp_ChangeParameter_InvalidBsValue</srcid><srcstatus/><internalId>872</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SduMng.c_337</srcid><srcstatus/><internalId>831</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FrArTp_ChangeParameter.E_INVALID_PARAMETER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>382</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>384</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.FrArTp_ChangeParameter.E_INVALID_PARAMETER.3</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error detection is enabled, the service
        FrArTp_ChangeParameter() shall raise the development error
        FRARTP_E_INVALID_PARAMETER and shall return with error code E_NOT_OK
        if the user of this function hands over
        an invalid parameter id (other than Stmin or BS).
      </description>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Det07_FrArTp_ChangeParameter_InvalidParam</srcid><srcstatus/><internalId>870</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SduMng.c_332</srcid><srcstatus/><internalId>830</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FrArTp_ChangeParameter.E_INVALID_PARAMETER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>382</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>385</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.ASR42.SWS_FrArTp_00215.E_PARAM_POINTER</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error detection is enabled, the service
        FrArTp_GetVersionInfo() shall raise the development error
        FRARTP_E_PARAM_POINTER, if the user of this function hands over a
        NULL-pointer as versioninfo.
      </description>
      <tags>
        <tag>Unit:FrArTp</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Det01_GetVersionInfo_InvalidParam</srcid><srcstatus/><internalId>855</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp.c.m4_97</srcid><srcstatus/><internalId>649</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00179.E_PARAM_POINTER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>386</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.ASR42.SWS_FrArTp_00147.FRARTP_E_PARAM_POINTER</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error detection is enabled, the service
        FrArTp_Init() shall raise the development error
        FRARTP_E_PARAM_POINTER, if the user of this function hands over a
        NULL-pointer as configPtr.
      </description>
      <tags>
        <tag>Unit:CfgAccess</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Det02_FrArTp_Init_InvalidParam</srcid><srcstatus/><internalId>856</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_CfgAccess.c_116</srcid><srcstatus/><internalId>651</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00179.E_PARAM_POINTER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>387</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.ASR42.SWS_FrArTp_00147.FRARTP_E_INVALID_PARAMETER</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error detection is enabled, the service
        FrArTp_Init() shall raise the development error
        FRARTP_E_INVALID_PARAMETER, if the user of this function hands over a
        pointer to configuration with invalid signature(s) as configPtr.
      </description>
      <tags>
        <tag>Unit:CfgAccess</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Det02_FrArTp_Init_InvalidSignature</srcid><srcstatus/><internalId>857</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_CfgAccess.c_123</srcid><srcstatus/><internalId>652</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>388</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.ASR42.SWS_FrArTp_00149.E_UNINIT</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error detection is enabled, the service FrArTp_Transmit()
        shall raise the development error FRARTP_E_UNINIT and shall return with error code E_NOT_OK
        if invoked uninitialized.
      </description>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Det03_Uninit_FrArTp_Transmit</srcid><srcstatus/><internalId>858</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SduMng.c_68</srcid><srcstatus/><internalId>810</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00292</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>296</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>389</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.ASR42.SWS_FrArTp_00149.E_INVALID_PDU_SDU_ID</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error detection is enabled, the service
        FrArTp_Transmit() shall raise the development error
        FRARTP_E_INVALID_PDU_SDU_ID and shall return with error code E_NOT_OK
        if the user of this function hands over
        an invalid SDU or a PDU ID.
      </description>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Det04_FrArTp_Transmit_InvalidFrArTpTxSduId</srcid><srcstatus/><internalId>865</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SduMng.c_74</srcid><srcstatus/><internalId>811</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00291</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>295</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>390</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.ASR42.SWS_FrArTp_00149.E_PARAM_POINTER</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error detection is enabled, the service
        FrArTp_Transmit() shall raise the development error
        FRARTP_E_PARAM_POINTER and shall return with error code E_NOT_OK
        if the user of this function hands over an invalid pointer.
      </description>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Det04_FrArTp_Transmit_InvalidFrArTpTxSduInfoPtr</srcid><srcstatus/><internalId>866</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SduMng.c_81</srcid><srcstatus/><internalId>812</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00179.E_PARAM_POINTER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>391</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.ASR42.SWS_FrArTp_00150.E_UNINIT</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error detection is enabled, the service FrArTp_CancelTransmit()
        shall raise the development error FRARTP_E_UNINIT and shall return with error code E_NOT_OK
        if invoked uninitialized.
      </description>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Det03_Uninit_FrArTp_CancelTransmit</srcid><srcstatus/><internalId>859</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SduMng.c_163</srcid><srcstatus/><internalId>817</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00292</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>296</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>392</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.ASR42.SWS_FrArTp_00150.E_INVALID_PDU_SDU_ID</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error detection is enabled, the service
        FrArTp_CancelTransmit() shall raise the development error
        FRARTP_E_INVALID_PDU_SDU_ID and shall return with error code E_NOT_OK
        if the user of this function hands over
        an invalid SDU or a PDU ID.
      </description>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Det05_FrArTp_CancelTransmit_InvalidParam</srcid><srcstatus/><internalId>867</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SduMng.c_169</srcid><srcstatus/><internalId>818</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00291</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>295</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>393</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.ASR42.SWS_FrArTp_00162.E_UNINIT</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error detection is enabled, the service FrArTp_MainFunction() shall not
        raise the development error FRARTP_E_UNINIT if invoked uninitialized.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_General_FrArTp_MainFunction_Uninit</srcid><srcstatus/><internalId>881</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00292</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>296</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>394</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.ASR42.SWS_FrArTp_00215.E_UNINIT</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error detection is enabled, the service FrArTp_GetVersionInfo() shall not
        raise the development error FRARTP_E_UNINIT if invoked uninitialized.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_General_GetVersionInfo_Uninit</srcid><srcstatus/><internalId>880</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00292</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>296</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>395</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.ASR42.SWS_FrArTp_00229.E_UNINIT</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error detection is enabled, the service FrArTp_CancelReceive()
        shall raise the development error FRARTP_E_UNINIT and shall return with error code E_NOT_OK
        if invoked uninitialized.
      </description>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Det03_Uninit_FrArTp_CancelReceive</srcid><srcstatus/><internalId>860</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SduMng.c_203</srcid><srcstatus/><internalId>820</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00292</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>296</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>396</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.ASR42.SWS_FrArTp_00229.E_INVALID_PDU_SDU_ID</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error detection is enabled, the service
        FrArTp_CancelReceive() shall raise the development error
        FRARTP_E_INVALID_PDU_SDU_ID and shall return with error code E_NOT_OK
        if the user of this function hands over
        an invalid SDU or a PDU ID.
      </description>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Det06_FrArTp_CancelReceive_InvalidParam</srcid><srcstatus/><internalId>868</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SduMng.c_209</srcid><srcstatus/><internalId>821</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00291</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>295</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00224</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>224</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>397</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.ASR42.SWS_FrArTp_00151.E_UNINIT</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error detection is enabled, the service FrArTp_ChangeParameter()
        shall raise the development error FRARTP_E_UNINIT and shall return with error code E_NOT_OK
        if invoked uninitialized.
      </description>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Det03_Uninit_FrArTp_ChangeParameter</srcid><srcstatus/><internalId>861</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SduMng.c_321</srcid><srcstatus/><internalId>828</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00292</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>296</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>398</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.ASR42.SWS_FrArTp_00151.E_INVALID_PDU_SDU_ID</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error detection is enabled, the service
        FrArTp_ChangeParameter() shall raise the development error
        FRARTP_E_INVALID_PDU_SDU_ID and shall return with error code E_NOT_OK
        if the user of this function hands over an invalid SDU or a PDU ID.
      </description>
      <tags>
        <tag>Unit:SduMng</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Det07_FrArTp_ChangeParameter_InvalidId</srcid><srcstatus/><internalId>869</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SduMng.c_326</srcid><srcstatus/><internalId>829</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00291</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>295</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>399</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.ASR42.SWS_FrArTp_00154.E_UNINIT</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error detection is enabled, the service FrArTp_TriggerTransmit()
        shall raise the development error FRARTP_E_UNINIT and shall return with error code E_NOT_OK
        if invoked uninitialized.
      </description>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Det03_Uninit_FrArTp_TriggerTransmit</srcid><srcstatus/><internalId>862</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_572</srcid><srcstatus/><internalId>729</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00292</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>296</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>400</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.ASR42.SWS_FrArTp_00154.E_INVALID_PDU_SDU_ID</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error detection is enabled, the service FrArTp_TriggerTransmit()
        shall raise the development error FRARTP_E_INVALID_PDU_SDU_ID and shall return with error
        code E_NOT_OK if the user of this function hands over an invalid SDU or a PDU ID.
      </description>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Det10_FrArTp_TriggerTransmit_InvalidFrArTpTxSduId</srcid><srcstatus/><internalId>875</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_578</srcid><srcstatus/><internalId>730</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00291</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>295</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>401</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.ASR42.SWS_FrArTp_00154.E_PARAM_POINTER</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error detection is enabled, the service FrArTp_TriggerTransmit()
        shall raise the development error E_PARAM_POINTER and shall return with error
        code E_NOT_OK if the user of this function hands over an invalid pointer.
      </description>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Det10_FrArTp_TriggerTransmit_InvalidFrArTpRxSduInfoPtr</srcid><srcstatus/><internalId>876</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_585</srcid><srcstatus/><internalId>731</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00179.E_PARAM_POINTER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>402</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.ASR42.SWS_FrArTp_00152.E_UNINIT</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error detection is enabled, the service FrArTp_RxIndication()
        shall raise the development error FRARTP_E_UNINIT if invoked uninitialized.
      </description>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Det03_Uninit_FrArTp_RxIndication</srcid><srcstatus/><internalId>863</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_567</srcid><srcstatus/><internalId>700</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00292</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>296</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>403</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.ASR42.SWS_FrArTp_00152.E_INVALID_PDU_SDU_ID</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error detection is enabled, the service
        FrArTp_RxIndication() shall raise the development error
        FRARTP_E_INVALID_PDU_SDU_ID and shall return with error code E_NOT_OK
        if the user of this function hands over
        an invalid SDU or a PDU ID.
      </description>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Det08_FrArTp_RxIndication_InvalidFrArTpRxSduId</srcid><srcstatus/><internalId>873</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_573</srcid><srcstatus/><internalId>701</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00291</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>295</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>404</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.ASR42.SWS_FrArTp_00152.E_PARAM_POINTER</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error detection is enabled, the service
        FrArTp_RxIndication() shall raise the development error
        FRARTP_E_PARAM_POINTER and shall return with error code E_NOT_OK
        if the user of this function hands over a
        NULL-pointer as PduInfoPtr.
      </description>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Det09_FrArTp_RxIndication_InvalidFrArTpRxSduInfoPtr</srcid><srcstatus/><internalId>874</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_580</srcid><srcstatus/><internalId>702</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00179.E_PARAM_POINTER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>293</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>405</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.ASR42.SWS_FrArTp_00152.FRARTP_E_INVALID_PARAMETER</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error detection is enabled, the service FrArTp_RxIndication()
        shall raise the development error FRARTP_E_INVALID_PARAMETER,
        if the user of this function hands over embedded message length of
        an FF-E larger than 0xFFFF and PduLengthType is size of 16-bit.
      </description>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Det12_Extended_Segmented_Reception_InvalidMaxDL</srcid><srcstatus/><internalId>879</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_332</srcid><srcstatus/><internalId>679</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>406</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.ASR42.SWS_FrArTp_00153.E_UNINIT</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error detection is enabled, the service FrArTp_TxConfirmation()
        shall raise the development error FRARTP_E_UNINIT if invoked uninitialized.
      </description>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Det03_Uninit_FrArTp_TxConfirmation</srcid><srcstatus/><internalId>864</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_639</srcid><srcstatus/><internalId>735</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00292</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>296</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>407</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.ASR42.SWS_FrArTp_00153.E_INVALID_PDU_SDU_ID</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If development error detection is enabled, the service
        FrArTp_TxConfirmation() shall raise the development error
        FRARTP_E_INVALID_PDU_SDU_ID and shall return with error code E_NOT_OK
        if the user of this function hands over
        an invalid SDU or a PDU ID.
      </description>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Det11_FrArTp_TxConfirmation_InvalidFrArTpRxSduId</srcid><srcstatus/><internalId>877</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_645</srcid><srcstatus/><internalId>736</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00291</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>295</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>408</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.FrArTp_Encode.NOACTIVECONNECTION</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If FrArTp_MainFunction() gets called and there is no active connection, no external
        function call shall be made.
      </description>
      <tags>
        <tag>Unit:Encode</tag>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_ENCODE_NOACTIVECONNECTION</srcid><srcstatus/><internalId>989</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_448</srcid><srcstatus/><internalId>722</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>409</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.FrArTp_Encode.NOTRANSMISSION</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If FrArTp_MainFunction() gets called and there is an active connection, but no
        pending frame, no external function call shall be made.
      </description>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_ENCODE_NOTRANSMISSION</srcid><srcstatus/><internalId>990</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_448</srcid><srcstatus/><internalId>722</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>410</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.FrArTp_Encode.FCTRANSMISSION</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If FrArTp_MainFunction() gets called and there is an active connection with a Flow
        Control frame transmission pending, the frame shall be transmitted by calling
        FrIf_Transmit().
      </description>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_ENCODE_FCTRANSMISSION</srcid><srcstatus/><internalId>991</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_485</srcid><srcstatus/><internalId>725</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>411</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.FrArTp_Encode.DATATRANSMISSION</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If FrArTp_MainFunction() gets called and there is an active connection with a Data
        frame transmission pending, the frame shall be transmitted by calling FrIf_Transmit().
      </description>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_ENCODE_DATATRANSMISSION</srcid><srcstatus/><internalId>992</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_485</srcid><srcstatus/><internalId>725</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>412</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.FrArTp_Encode.FCDATATRANSMISSION</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If FrArTp_MainFunction() gets called and there is one active connection with both Flow
        Control frame and Data frame transmissions pending, the frames shall be transmitted by
        calling one FrIf_Transmit() for each frame.
      </description>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_ENCODE_FCDATATRANSMISSION</srcid><srcstatus/><internalId>993</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_479</srcid><srcstatus/><internalId>724</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>413</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.FrArTp_Encode.TRANSMISSION_MULTI_CONN_SINGLE_CHAN</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If FrArTp_MainFunction() gets called and there are multiple active connections with
        both Flow Control frame and Data frame transmissions pending, the frames shall be
        transmitted by calling one FrIf_Transmit() for each frame in each active connection.
      </description>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_ENCODE_TRANSMISSION_MULTI_CONN_SINGLE_CHAN</srcid><srcstatus/><internalId>994</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_ENCODE_TRANSMISSION_MULTI_CONN_SINGLE_CHAN_TRANSMIT_FAIL</srcid><srcstatus/><internalId>995</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_460</srcid><srcstatus/><internalId>723</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>414</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.FrArTp_Encode.TRANSMISSION_MULTI_CONN_SINGLE_CHAN_OVFL</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If FrArTp_MainFunction() gets called and there are multiple active connections with
        more frame transmissions pending then the limit defined in the Tx Pool, only the
        frames that fit into the Tx Pool shall be transmitted by calling FrIf_Transmit().
        First the Flow Control frames shall be transmitted, then Data frames.
      </description>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_ENCODE_TRANSMISSION_MULTI_CONN_SINGLE_CHAN_OVFL</srcid><srcstatus/><internalId>996</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_460</srcid><srcstatus/><internalId>723</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>415</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.FrArTp_Encode.TRANSMISSION_MULTI_CONN_MULTI_CHAN</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If FrArTp_MainFunction() gets called and there are active connections in multiple
        channels, with Data frame transmissions pending, the frames shall be transmitted
        by calling FrIf_Transmit(). Frames from one pool shall be transmitted first,
        then the frames of each subsequent pool.
      </description>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_ENCODE_TRANSMISSION_MULTI_CONN_MULTI_CHAN</srcid><srcstatus/><internalId>999</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_710</srcid><srcstatus/><internalId>739</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>416</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.SFE.FRAME_LENGTH</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The next byte is the DL field and states the amount of
        payload contained in the SF-E. Depending on the configuration of the addressing
        mode (1 Byte or 2 Byte) and the length of the associated N-PDU, all values except
        0x00 and above 0xFA (1 Byte addressing) or above 0xF8 (2 Byte addressing) are
        valid here.
        The minimum length of such a frame is 5 Byte (1 Byte addressing, 1 Byte payload),
        the maximum is 254 Byte (FlexRay limit according to [15]). The actual frame length
        can be derived considering the addressing mode and looking in the length statement
        of the corresponding PduInfoType struct.
      </description>
      <comment>
        Copied from SWS guideline.
      </comment>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.EB.SFE.FRAME_LENGTH.1</srcid><srcstatus/><internalId>418</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.SFE.FRAME_LENGTH.2</srcid><srcstatus/><internalId>419</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>417</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.SFE.FRAME_LENGTH.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        When 1 byte addressing is configured, SF-E PduLength configuration payload
        shall range from 5 to 254.
      </description>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_GenTest01001_Err_PduLengthInvalid</srcid><srcstatus/><internalId>844</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_SM_TX_SFE</srcid><srcstatus/><internalId>1090</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.SFE.FRAME_LENGTH</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>417</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>418</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.SFE.FRAME_LENGTH.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        When 2 byte addressing is configured, SF-E PduLength configuration payload
        shall range from 7 to 254.
      </description>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_GenTest01001_Err_PduLengthInvalid</srcid><srcstatus/><internalId>844</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_SM_TX_SFE</srcid><srcstatus/><internalId>1090</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.SFE.FRAME_LENGTH</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>417</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>419</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.FFE.FRAME_LENGTH</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        An FF-E looks as follows:<pre>
        +------------+-----------+-------------------+---------------------------------------+
        | FT (4 Bit) | Res(4 Bit)|      DL (32 Bit)  |        Data                           |
        +------------+-----------+-------------------+---------------------------------------+
        |              PCI (5 Byte )                 |    Length depending on configuration  |
        +------------------------------------------------------------------------------------+</pre>

        The overall length of an FF-E reaches from 7 Byte to a connection specific maximum, which
        depends on the size of the associated N-PDU.
      </description>
      <comment>
        Copied from SWS guideline.
      </comment>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.EB.FFE.FRAME_LENGTH.1</srcid><srcstatus/><internalId>421</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.FFE.FRAME_LENGTH.2</srcid><srcstatus/><internalId>422</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00238</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>420</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.FFE.FRAME_LENGTH.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        When 1 byte addressing is configured, FF-E PduLength configuration payload
        shall range from 7 to 254.
      </description>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_GenTest01001_Err_PduLengthInvalid</srcid><srcstatus/><internalId>844</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_SM_TX_FFE</srcid><srcstatus/><internalId>1091</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_315</srcid><srcstatus/><internalId>677</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FFE.FRAME_LENGTH</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>420</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>421</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.FFE.FRAME_LENGTH.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        When 2 byte addressing is configured, FF-E PduLength configuration payload
        shall range from 9 to 254.
      </description>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_GenTest01001_Err_PduLengthInvalid</srcid><srcstatus/><internalId>844</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_SM_TX_FFE</srcid><srcstatus/><internalId>1091</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_315</srcid><srcstatus/><internalId>677</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FFE.FRAME_LENGTH</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>420</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>422</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.FFI.FRAME_LENGTH</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The overall length of a First Frame including address information lasts (depending on
        the per channel configuration) from 4 Byte to a connection specific maximum.
        This maximum on its part depends on the use case (e.g. for communication with
        CAN for which full ISO 15765-2 compliance is necessary, it will be 10 or 12 (9 or 11
        in FRARTP_ISO6 mode)) as well as on the size of the associated N-PDU.

        The actual amount of payload of an FF-I can be derived by considering the addressing type (1 or
        2 Byte) and e.g. looking in the length designation of the corresponding PduInfoType struct.
      </description>
      <comment>
        Copied from SWS guideline.
        Note: FF-I has fixed size of 10 or 12 bytes in ISO 15765-2 mode. There is an error in text.
      </comment>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.EB.FFI.FRAME_LENGTH.1</srcid><srcstatus/><internalId>424</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.FFI.FRAME_LENGTH.2</srcid><srcstatus/><internalId>425</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.FFI.PAYLOAD_LENGTH</srcid><srcstatus/><internalId>426</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>423</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.FFI.FRAME_LENGTH.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The length of a First Frame including address information in ISO 15765-2 mode
        shall be 10 or 12 bytes.
      </description>
      <comment>
        This shall be set through the FrArTp channel configuration.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_GenTest01001_Err_PduLengthInvalid</srcid><srcstatus/><internalId>844</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception_BlockSizeZero</srcid><srcstatus/><internalId>893</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transmission_With_Reception</srcid><srcstatus/><internalId>924</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FFI.FRAME_LENGTH</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>423</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>424</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.FFI.FRAME_LENGTH.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The length of a First Frame including address information in FRARTP_ISO6 mode
        shall be 9 or 11 bytes.
      </description>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.FrArTpLm</srcid><srcstatus/><internalId>546</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FFI.FRAME_LENGTH</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>423</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>425</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.FFI.PAYLOAD_LENGTH</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The actual amount of payload of an FF-I can be derived by considering the addressing type (1 or
        2 Byte) and e.g. looking in the length designation of the corresponding PduInfoType struct.
      </description>
      <comment>
        Copied from SWS guideline.
      </comment>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transfer</srcid><srcstatus/><internalId>948</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_206</srcid><srcstatus/><internalId>665</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FFI.FRAME_LENGTH</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>423</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>426</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.FC.FRAME_LENGTH</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Depending on addressing configuration, a Flow Control frame is 5 or 7 byte long.
      </description>
      <comment>
        Copied from SWS guideline.
      </comment>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_FC_0</srcid><srcstatus/><internalId>981</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_380</srcid><srcstatus/><internalId>684</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>427</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.1to1Con</id>
      <status>rejected</status>
      <source>EB</source>
      <version>1</version>
      <description>
        1:1 Connections
        This type of connections exists between two nodes and is bidirectional.
        Within the FlexRay AUTOSAR Transport Layer, the following subtypes are possible.
      </description>
      <comment>
        Copied from SWS guideline.
        This requirement is informational only.
      </comment>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>428</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.1to1ConWithoutAck</id>
      <status>rejected</status>
      <source>EB</source>
      <version>1</version>
      <description>
        1:1 Connection in a channel without Acknowledgement
        This type of connection exists in both unsegmented and segmented transfer.
      </description>
      <comment>
        Copied from SWS guideline.
        This requirement is informational only.
      </comment>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>429</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.1to1ConWithoutAck_Unsegmented</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Unsegmented Transfer
        When a message does not exceed the possible amount of payload for a SF (which
        can be derived from the N-PDU length, FrArTpAdrType and FrArTpLm), there is no
        need to segment this message.
        The sending Transport Layer packs the payload (N-SDU) into an N-PDU and sends it
        to the receiving Transport Layer. This is done via a Single Frame (SF).
      </description>
      <comment>
        Copied from SWS guideline.
      </comment>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.EB.1to1ConWithoutAck_Unsegmented.1</srcid><srcstatus/><internalId>431</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.1to1ConWithoutAck_Unsegmented.2</srcid><srcstatus/><internalId>432</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>430</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.1to1ConWithoutAck_Unsegmented.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        When a message does not exceed the possible amount of payload for a SF (which
        can be derived from the N-PDU length, FrArTpAdrType and FrArTpLm), there is no
        need to segment this message.
      </description>
      <comment>
        Copied from SWS guideline.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Transfer</srcid><srcstatus/><internalId>918</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.1to1ConWithoutAck_Unsegmented</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>430</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>431</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.1to1ConWithoutAck_Unsegmented.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The sending Transport Layer packs the payload (N-SDU) into an N-PDU and sends it
        to the receiving Transport Layer. This is done via a Single Frame (SF).
      </description>
      <comment>
        Copied from SWS guideline.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Transfer</srcid><srcstatus/><internalId>918</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.1to1ConWithoutAck_Unsegmented</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>430</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>432</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.1to1ConWithoutAck_Segmented</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Segmented Transfer
        In case a message does not fit into an SF, it needs to be split up into several parts
        and flow control is applied to control the data flow taking into account the needs of
        the receiver.
        The transfer starts with sending a First Frame (FF) from the sender to the receiver.
        This frame contains the length of the whole message (e.g. 1000 Byte) and even the
        first data bytes.
        The receiving peer reacts to the reception of a FF with sending of a Flow Control
        frame (FC) back to the sender.
        This FC frame contains the value of three parameters: FS,BS and STmin.
        FS states the flow status. The possible values are:
          CTS: Clear To Send
            The sender can continue transmitting the message
          WT: Wait
            The sender shall wait for another FC frame.
          OVFLW: Overflow
            The sender shall abort the transfer, because the receiver has not
            enough buffer space for the whole message available.
        There shall be a statically defined upper limit (FrArTpMaxWft) for the number of
        allowed WT’s.
        If this number has been reached, the transmission shall be aborted
        and within PduR_FrArTpTxConfirmation, the result E_NOT_OK shall be returned.
        BS specifies the block size. This is the number of Consecutive Frames (CF) the
        sender is allowed to send between two FC Frames. The possible range is from 0x00
        to 0xFF, whereas 0x00 states that no more FC Frames will be transmitted by the
        receiver.
        STmin defines the minimum gap between two CFs in milliseconds or microseconds.
        The valid values range from 0x00 to 0x7F and from 0xF1 to 0xF9.
        The supported values of STmin are restricted by the placement of N-PDUs in FlexRay
        cycles, and are subject to the jitter created by the placement of N-PDUs in the slots
        of a cycle.
        The STmin parameter can be changed during runtime by using the respective API
        call.
        The alternating transmission of CF blocks and a FC frame lasts, until the whole
        message is sent.
      </description>
      <comment>
        Copied from SWS guideline.
      </comment>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.EB.1to1ConWithoutAck_Segmented.1</srcid><srcstatus/><internalId>434</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.1to1ConWithoutAck_Segmented.2</srcid><srcstatus/><internalId>435</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.1to1ConWithoutAck_Segmented.3</srcid><srcstatus/><internalId>436</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.1to1ConWithoutAck_Segmented.4</srcid><srcstatus/><internalId>437</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.1to1ConWithoutAck_Segmented.5</srcid><srcstatus/><internalId>438</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.1to1ConWithoutAck_Segmented.6</srcid><srcstatus/><internalId>439</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.1to1ConWithoutAck_Segmented.7.1</srcid><srcstatus/><internalId>440</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.1to1ConWithoutAck_Segmented.7.2</srcid><srcstatus/><internalId>441</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.1to1ConWithoutAck_Segmented.BS</srcid><srcstatus/><internalId>442</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.1to1ConWithoutAck_Segmented.STmin.1</srcid><srcstatus/><internalId>443</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.1to1ConWithoutAck_Segmented.STmin.2</srcid><srcstatus/><internalId>444</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.1to1ConWithoutAck_Segmented.STmin.3</srcid><srcstatus/><internalId>445</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.1to1ConWithoutAck_Segmented.8</srcid><srcstatus/><internalId>446</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>433</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.1to1ConWithoutAck_Segmented.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In case a message does not fit into an SF, it needs to be split up into several parts
        and flow control is applied to control the data flow taking into account the needs of
        the receiver.
      </description>
      <comment>
        Copied from SWS guideline.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transfer_1</srcid><srcstatus/><internalId>949</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.1to1ConWithoutAck_Segmented</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>433</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>434</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.1to1ConWithoutAck_Segmented.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The transfer starts with sending a First Frame (FF) from the sender to the receiver.
      </description>
      <comment>
        Copied from SWS guideline.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transfer_1</srcid><srcstatus/><internalId>949</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.1to1ConWithoutAck_Segmented</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>433</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>435</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.1to1ConWithoutAck_Segmented.3</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        This frame contains the length of the whole message (e.g. 1000 Byte) and even the
        first data bytes.
      </description>
      <comment>
        Copied from SWS guideline.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transfer_1</srcid><srcstatus/><internalId>949</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.1to1ConWithoutAck_Segmented</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>433</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>436</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.1to1ConWithoutAck_Segmented.4</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The receiving peer reacts to the reception of a FF with sending of a Flow Control
        frame (FC) back to the sender.
      </description>
      <comment>
        Copied from SWS guideline.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transfer_1</srcid><srcstatus/><internalId>949</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.1to1ConWithoutAck_Segmented</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>433</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>437</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.1to1ConWithoutAck_Segmented.5</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        This FC frame contains the value of three parameters: FS, BS and STmin.
      </description>
      <comment>
        Copied from SWS guideline.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transfer_1</srcid><srcstatus/><internalId>949</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.1to1ConWithoutAck_Segmented</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>433</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>438</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.1to1ConWithoutAck_Segmented.6</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        FS states the flow status. The possible values are:
          CTS: Clear To Send
            The sender can continue transmitting the message
          WT: Wait
            The sender shall wait for another FC frame.
          OVFLW: Overflow
            The sender shall abort the transfer, because the receiver has not
            enough buffer space for the whole message available.
      </description>
      <comment>
        Copied from SWS guideline.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transfer_1</srcid><srcstatus/><internalId>949</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transfer_OVFLW</srcid><srcstatus/><internalId>951</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_FC_CTS</srcid><srcstatus/><internalId>961</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_FC_WT</srcid><srcstatus/><internalId>962</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_DECODE_FC_OVFLW</srcid><srcstatus/><internalId>963</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.1to1ConWithoutAck_Segmented</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>433</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>439</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.1to1ConWithoutAck_Segmented.7.1</id>
      <status>rejected</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall be a statically defined upper limit (FrArTpMaxWft) for the number of
        allowed WT’s.
      </description>
      <comment>
        Copied from SWS guideline.
        This requirement is informational only.
      </comment>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.1to1ConWithoutAck_Segmented</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>433</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>440</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.1to1ConWithoutAck_Segmented.7.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If this number (FrArTpMaxWft) has been reached, the transmission shall be aborted
        and within PduR_FrArTpTxConfirmation, the result E_NOT_OK shall be returned.
      </description>
      <comment>
        Copied from SWS guideline.<br/>
        <b>Text correction:</b> PduR_FrArTpTxConfirmation =&gt; PduR_FrArTpRxIndication
      </comment>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00295.2</srcid><srcstatus/><internalId>282</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.1to1ConWithoutAck_Segmented</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>433</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>441</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.1to1ConWithoutAck_Segmented.BS</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        BS specifies the block size. This is the number of Consecutive Frames (CF) the
        sender is allowed to send between two FC Frames. The possible range is from 0x00
        to 0xFF, whereas 0x00 states that no more FC Frames will be transmitted by the
        receiver.
      </description>
      <comment>
        i.e. the whole message shall be sent in one big block.
        Copied from SWS guideline.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transfer_1</srcid><srcstatus/><internalId>949</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.1to1ConWithoutAck_Segmented</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>433</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>442</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.1to1ConWithoutAck_Segmented.STmin.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        STmin defines the minimum gap between two CFs in milliseconds or microseconds.
        The valid values range from 0x00 to 0x7F and from 0xF1 to 0xF9.
      </description>
      <comment>
        The range from 0x00 to 0x7F specifies the minimum gap in milliseconds (0ms .. 127ms), the one
        from 0xF1 to 0xF9 defines the gap in microseconds (100, 200, .. 900 ).
        Copied from SWS guideline.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_TX_SEGMENTED_TRANSMISSION_STMIN_DEFAULT</srcid><srcstatus/><internalId>1093</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.1to1ConWithoutAck_Segmented</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>433</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>443</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.1to1ConWithoutAck_Segmented.STmin.2</id>
      <status>rejected</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The supported values of STmin are restricted by the placement of N-PDUs in FlexRay
        cycles, and are subject to the jitter created by the placement of N-PDUs in the slots
        of a cycle.
      </description>
      <comment>
        Copied from SWS guideline.
        This requirement is informational only.
      </comment>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.1to1ConWithoutAck_Segmented</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>433</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>444</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.1to1ConWithoutAck_Segmented.STmin.3</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The STmin parameter can be changed during runtime by using the respective API
        call.
      </description>
      <comment>
        Copied from SWS guideline.
      </comment>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.SWS_FrArTp_00104.2</srcid><srcstatus/><internalId>233</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.1to1ConWithoutAck_Segmented</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>433</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>445</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.1to1ConWithoutAck_Segmented.8</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The alternating transmission of CF blocks and a FC frame lasts, until the whole
        message is sent.
      </description>
      <comment>
        Copied from SWS guideline.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transfer_1</srcid><srcstatus/><internalId>949</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.1to1ConWithoutAck_Segmented</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>433</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>446</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.TransmitAfterCancelTransmit</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If ongoing transmission has been canceled with FrArTp_CancelTransmit call, new transmission
        on the same channel with the same connection shall be possible.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_CancelTransmit_TxRequestPending</srcid><srcstatus/><internalId>853</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>447</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.PduR_FrArTpStartOfReception_Segmented.BufferError</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If PduR_FrArTpStartOfReception for the FF-x returns BUFREQ_E_NOT_OK or BUFREQ_E_OVFL,
        the transfer shall be aborted immediately without calling PduR_FrArTpRxIndication.
      </description>
      <comment>
        Text copied from <b>SWS_FrArTp 00298</b> for SF-x and changed to FF-x according to SWS
        titles <u>9.2.1 Unsegmented N-SDU Reception</u> and <u>9.2.3 Segmented N-SDU Reception</u>.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception_PduR_Fault</srcid><srcstatus/><internalId>888</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>448</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.AUDI_ASR_FrTP_014.1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In case of the PduR_FrArTpStartOfReception returning BUFREQ_E_OVFLW, FrArTp shall reply
        with a Flow Control frame with status FS=OVFLW.
      </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_OVFLW_Segmented</srcid><srcstatus/><internalId>916</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_SM_Rx.c_1266</srcid><srcstatus/><internalId>773</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_014</linksto>
          <dstversion>1.1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>490</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>449</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.AUDI_ASR_FrTP_014.2</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In case of the PduR_FrArTpStartOfReception returning BUFREQ_E_NOT_OK, FrArTp shall reply
        with no Flow Control frame.
      </description>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.StartOfReceptionENotOk</srcid><srcstatus/><internalId>552</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_014</linksto>
          <dstversion>1.1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>490</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>450</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.FrArTp_RxIndication</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Service name: FrArTp_RxIndication <pre>
        | Syntax:             | void FrArTp_RxIndication                                               |
        |                     | (                                                                      |
        |                     |   PduIdType RxPduId,                                                   |
        |                     |   PduInfoType* PduInfoPtr                                              |
        |                     | )                                                                      |
        | Service ID[hex]:    | 0x42                                                                   |
        | Sync/Async:         | Synchronous                                                            |
        | Reentrancy:         | Reentrant for different PduIds. Non reentrant for the same PduId.      |
        | Parameters (in):    | RxPduId    | ID of the received I-PDU.                                 |
        |                     | PduInfoPtr | Contains the length (SduLength) of the received I-PDU and |
        |                     |            | a pointer to a buffer (SduDataPtr) containing the I-PDU.  |
        | Parameters (inout): | None                                                                   |
        | Parameters (out):   | None                                                                   |
        | Return value:       | None                                                                   |
        | Description:        | Indication of a received I-PDU from a lower layer communication        |
        |                     | interface module.                                                      |</pre>
      </description>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Reception_StandardFunctions</srcid><srcstatus/><internalId>892</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transmission_StandardFunctions</srcid><srcstatus/><internalId>921</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/FrArTp_Api.h_63</srcid><srcstatus/><internalId>634</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/FrArTp_Cbk.h_91</srcid><srcstatus/><internalId>646</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_541</srcid><srcstatus/><internalId>698</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00152</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>307</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>451</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.HandleIdGenerator</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The module shall support the correct automatic calculation of the handle IDs for the
        following parameters:
          - FrArTpSduRxId
          - FrArTpSduTxId
          - FrArTpPduId
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_ComTest_HandleIdGenerator</srcid><srcstatus/><internalId>842</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>452</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.TransmissionRequestFromTxConfirmation</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The FrArTp module shall support a transmission request via FrArTp_Transmit called within the
        context of PduR_FrArTpTxConfirmation for the same TxPduId.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Transfer_ReqFromTxConf</srcid><srcstatus/><internalId>919</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transfer_ReqFromTxConf</srcid><srcstatus/><internalId>923</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>453</internalId></specobject>

  </specobjects>
    <specobjects doctype="req">

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_011</id>
      <status>rejected</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        In Ergänzung zu FRTP289 soll für den Fall, dass PduR_FrTpProvideRxBuffer noch nicht erfolgreich
        aufgerufen wurde, ebenfalls NTFRSLT_E_NO_BUFFER zurückgegeben werden.
      </description>
      <comment>
        This requirement is not applicable.
        In the AUTOSAR version this implementation is based upon the API does not exist anymore.
      </comment>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>454</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_013</id>
      <status>rejected</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        In Ergänzung zu FRTP116 soll für den Fall, dass PduR_FrTpProvideRxBuffer noch nicht erfolgreich
        aufgerufen wurde, ebenfalls NTFRSLT_E_NO_BUFFER zurückgegeben werden.
      </description>
      <comment>
        This requirement is not applicable.
        In the AUTOSAR version this implementation is based upon the API does not exist anymore.
      </comment>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>455</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_036</id>
      <status>rejected</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Es soll ein externes LowLevelRouting-Modul an das FrTp angebunden werden können.
      </description>
      <comment>
        This requirement is informational only.
      </comment>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>456</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_037</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Die Anbindung und Verwendung des LowLevelRouting-Moduls und der hier unter dem
        Kapitel LowLevelRouting beschriebenen Zusatzanforderungen soll per
        Konfigurationsschalter aktiviert und deaktiviert werden können.
      </description>
      <comment>
        English translation:
        It shall be possible to activate and deactivate the connection and usage of the
        LowLevelRouting module as well as the additional requirements described in the chapter
        LowLevelRouting via a configuration parameter.
      </comment>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.VAG.AUDI_ASR_FrTP_064</srcid><srcstatus/><internalId>486</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>457</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_038</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Es soll für das externe LowLevelRouting-Modul ein mittels GUI konfigurierbares Präfix
        definiert (&lt;LLRPräfix&gt;) werden können, dass dem Header-Namen sowie den extern
        aufzurufenden Funktionsnamen und ggf. notwendigen Typdefinitionen vorangestellt
        wird. Hintergrund: Vermeidung von Namenskonflikten.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_PreCompileSwitches_0</srcid><srcstatus/><internalId>956</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_PreCompileSwitches_1</srcid><srcstatus/><internalId>957</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_PreCompileSwitches_2</srcid><srcstatus/><internalId>958</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_PreCompileSwitches_3</srcid><srcstatus/><internalId>959</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_PreCompileSwitches_4</srcid><srcstatus/><internalId>960</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>458</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_039</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Es soll ein HeaderFile des externen RoutingModuls eingebunden werden, um die
        Definition der externen APIs im FrTp bekannt zu machen &lt;LLRPräfix&gt;LLR.h
      </description>
      <comment>
        English translation:
        The header file &lt;LLRpraefix&gt;LLR.h of the external routing module shall be included by
        FrArTp to resolve external APIs.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Transfer</srcid><srcstatus/><internalId>918</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>459</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_040</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Es soll ein externen Funktionsaufruf aus folgende Funktionen heraus in das LowLevelRouting-Modul stattfinden:
        - FrTp_TriggerTransmit ( PduIdType FrTxPduId, PduInfoType* PduInfoPtr )
        - FrTp_TxConfirmation ( PduIdType FrTxPduId )
        - FrTp_RxIndication ( PduIdType FrRxPduId, const PduInfoType* PduInfoPtr )
        Die aufzurufenden Funktionen sind in Kapitel 2.1.2.1, 2.1.2.2 sowie in Kaptiel 2.1.2.3 beschrieben.
      </description>
      <comment>
        English translation:
        An external function call to the LowLevelRouting module shall occur from the following
        functions:
        - FrArTp_TriggerTransmit ( PduIdType FrTxPduId, PduInfoType* PduInfoPtr )
        - FrArTp_TxConfirmation ( PduIdType FrTxPduId )
        - FrArTp_RxIndication ( PduIdType FrRxPduId, const PduInfoType* PduInfoPtr )
        The functions to be called are described in chapters 2.1.2.1, 2.1.2.2 and 2.1.2.3.
      </comment>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.VAG.AUDI_ASR_FrTP_044</srcid><srcstatus/><internalId>464</internalId></linkedfrom><linkedfrom><srcid>FrArTp.VAG.AUDI_ASR_FrTP_049</srcid><srcstatus/><internalId>469</internalId></linkedfrom><linkedfrom><srcid>FrArTp.VAG.AUDI_ASR_FrTP_054</srcid><srcstatus/><internalId>474</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>460</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_041</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Es soll vor dem Aufruf der folgenden API am FrIf aus dem FrTp heraus eine Funktionsaufruf
        in das LowLevelRouting-Modul stattfinden:
        - FrIf_Transmit (PduIdType FrIf_TxPduId, const PduInfoType* FrIf_PduInfoPtr)
        Die aufzurufende Funktion ist in Kapitel 2.1.2.4 beschrieben.
      </description>
      <comment>
        English translation:
        A call to the LowLevelRouting module shall occur from FrArTp before the following FrIf API
        is called:
        - FrIf_Transmit (PduIdType FrIf_TxPduId, const PduInfoType* FrIf_PduInfoPtr)
        The function to be called is described in chapter 2.1.2.4.
      </comment>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.VAG.AUDI_ASR_FrTP_059</srcid><srcstatus/><internalId>479</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>461</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_042</id>
      <status>rejected</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Die entsprechend eingeführten externen Funktionsaufrufe und deren Verhalten sollen
        in der technischen Dokumentation des AN für den Endanwender ohne Kenntnis dieser
        Spezifikation verständlich beschrieben sein.
      </description>
      <comment>
        This requirement is informational only.<br/>
        English translation:<br/>
        The respectively introduced external function calls and their behavior shall be described
        in the documentation of the contractor, in a manner that is understandable to the end user
        without any knowledge of this specification.
      </comment>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>462</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_043</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1.2</version>
      <description>
        Es sollen alle notwendigen IDs, die bei der Kommunikation zwischen FrIf und FrTp
        notwendig sind, zusätzlich als SymbolicNameValues (Name der PDU laut GenyKonfiguration
        verfügbar gemacht werden. Dabei soll folgendes Namensschema verwendet werden:
        MSN_Botschaftsname Datenbasis_Tp[_(Tx|Rx)].
        MSN: Modul-Short-Name (nach AUTOSAR) - CanIf
        Botschaftsname Datenbasis: Botschaftsname laut Datenbasis (ggf. FrameName)
        _Tx|Rx (optional): Nur bei Multiple Identity falls SplitTxRx für eine Botschaft
        definiert wird
        RxRichtung im FrTp
        TxRichtung im FrIf
      </description>
      <comment>
        English translation:
        All necessary IDs that are required for the communication between FrIf and FrArTp shall
        additionally be made available as SymbolicNameValues (name of the PDU according to the Geny
        configuration). The following naming scheme shall be used:
        &lt;MSN&gt;_&lt;message name data basis&gt;_Tp[_(Tx|Rx)]
        MSN: module short name (according to AUTOSAR) - CanIf
        message name data basis: message name according to data basis (FrameName where applicable)
        _Tx|Rx (optional): Only in case of Multiple Identity if PlitTxRx is defined for a message
        RxDirection in FrArTp
        TxDirection in FrIf
      </comment>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.SymbolicNameValues</srcid><srcstatus/><internalId>551</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>463</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_044</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Es soll unmittelbar nach dem Aufruf von FrTp_TriggerTransmit durch das FrIf,
        noch vor der Ausführung der Parameter Prüfungen (DET-Prüfungen) oder anderer
        Prüfungen, die die Verarbeitung der PDU einschränken würden, die nachfolgende
        API aufgerufen werden: LLR_FrIf_FrTp_TriggerTransmit.
      </description>
      <comment>
        English translation:
        Immediately after the call of FrArTp_TriggerTransmit from FrIf, even before executing
        parameter checks (DET checks) or other check that could affect the processing of the PDU,
        the following API shall be called: LLR_FrIf_FrTp_TriggerTransmit.
      </comment>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Det03_Uninit_FrArTp_TriggerTransmit</srcid><srcstatus/><internalId>862</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_TriggerTransmit_EnoughBuffer</srcid><srcstatus/><internalId>883</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_TriggerTransmit_NotEnoughBuffer</srcid><srcstatus/><internalId>884</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_TriggerTransmit_LLR_IgnoreFrArTpTriggerTransmit</srcid><srcstatus/><internalId>885</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_TriggerTransmit_LLR_IgnoreAllTriggerTransmit</srcid><srcstatus/><internalId>886</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_557</srcid><srcstatus/><internalId>728</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_040</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>460</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>464</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_045</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1.1</version>
      <description>
        Service name:
        &lt;LLRPräfix&gt;LLR_FrIf_FrTp_TriggerTransmit Syntax:
        Std_ReturnType &lt;LLRPräfix&gt;LLR_FrIf_FrTp_TriggerTransmit(
                    PduIdType FrTxPduId,
                    PduInfoType* PduInfoPtr,
                    Std_ReturnType* FrIf_TriggerTransmitStatus)
        Service D[hex]: Durch den AN zu vergeben
        Sync/Async: Synchronous
        Reentrancy: Nicht-Reentrant für die selbe FrIf_TxPduId, Reentrant für unterschiedliche FrIf_TxPduId
        Parameters (in):
        FrIf_TxPduId
            ID der FlexRay PDU, die übertragen werden soll. SNV: FrTp_&lt;BotschaftsName&gt;_Tp
        Parameters (inout):
        PduInfoPtr
            Pointer auf eine Struktur, in die die FrTp-Daten kopiert werden sollen.
        Parameters (out):
        FrIf_TriggerTransmitStatus
            Status, der als Rückgabewert an das FrIf zurückgegeben werden soll,
            falls LLR_FrIf_FrTp_TriggerTransmit die Weiterverarbeitung des TriggerTransmit
            Aufrufs mittels Re-turn value E_NOT_OK im FrTp unterbunden hat.
        Return value:
        Std_ReturnType
            E_OK: Die Weiterverarbeitung soll durch FrTp erfolgen.
            E_NOT_OK: Die Weiterverarbeitung im FrTp wurde durch den LLR nicht freigegeben.
            Other Values: Sollen so behandelt werden, als wäre E_OK zurückgeliefert worden.
        Description:
        Anfrage bei LLR, ob TriggerTransmit Aufruf des FrIf durch das FrTp oder den LLR bearbeitet werden soll.
        Im Falle der Bearbeitung durch den LLR ist der PduInfoPtr durch den LLR mit den korrekten TpDaten zu
        füllen und der FrIf_TriggerTransmitStatus ist auf E_OK zu setzen sowie als Return Value E_NOT_OK
        zurückzuliefern. Soll das FrTp den Aufruf nicht verarbeiten und der LLR will den Aufruf ablehnen,
        ist der FrIf_TriggerTransmitStatus auf E_NOT_OK zu setzen sowie als Return Value E_NOT_OK zurückzuliefern.
        Soll das FrTp den Aufruf verarbeiten, soll als Return Value E_OK zurückgeliefert werden.
      </description>
      <comment>
        English translation:
        Service name: &lt;LLRPraefix&gt;LLR_FrIf_FrTp_TriggerTransmit
        Syntax:
          Std_ReturnType &lt;LLRPraefix&gt;LLR_FrIf_FrTp_TriggerTransmit(
                      PduIdType FrTxPduId,
                      PduInfoType* PduInfoPtr,
                      Std_ReturnType* FrIf_TriggerTransmitStatus)
        Service D[hex]: Assigned by the contractor
        Sync/Async: Synchronous
        Reentrancy: Non-reentrant for the same FrIf_TxPduId, reentrant for different FrIf_TxPduId
        Parameters (in):
          FrIf_TxPduId: ID of the FlexRay PDU which shall be transmitted.
            SNV: FrArTp_&lt;message name&gt;_Tp
        Parameters (inout):
          PduInfoPtr
            Pointer to a structure, where the FrArTp data shall be copied to.
        Parameters (out):
          FrIf_TriggerTransmitStatus
              Status which shall be returned to the FrIf if LLR_FrIf_FrTp_TriggerTransmit has
              terminated further processing of the TriggerTransmit by FrArTp call via return value
              E_NOT_OK.
        Return value:
        Std_ReturnType
            E_OK: Further processing shall be performed by FrArTp.
            E_NOT_OK: Further processing by FrArTp has not been approved by LLR.
            Other Values: Should be handled as if E_OK was returned.
        Description:
        Request to the LLR if the TriggerTransmit call of the FrIf shall be processed by FrArTp or
        LLR.
        1. In case of processing by LLR the PduInfoPtr shall be filled with the correct Tp data,
        FrIf_TriggerTransmitStatus shall be set to E_OK and as a return value E_NOT_OK shall be
        returned.
        2. In case FrArTp shall not process the call and LLR wants to refuse the call,
        FrIf_TriggerTransmitStatus shall be set to E_NOT_OK and the return value should be set to
        E_NOT_OK.
        3. If FrArTp shall process the call LLR shall set the return the value to E_OK.
      </comment>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_TriggerTransmit_EnoughBuffer</srcid><srcstatus/><internalId>883</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_TriggerTransmit_NotEnoughBuffer</srcid><srcstatus/><internalId>884</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_TriggerTransmit_LLR_IgnoreFrArTpTriggerTransmit</srcid><srcstatus/><internalId>885</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_TriggerTransmit_LLR_IgnoreAllTriggerTransmit</srcid><srcstatus/><internalId>886</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_557</srcid><srcstatus/><internalId>728</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>465</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_046</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Das FrTp soll die Parameter des FrTp_TriggerTransmit-Aufrufs direkt als Parameter des
        LLR_FrIf_FrTp_TriggerTransmit Aufrufs verwenden und somit weiterleiten.
        Mapping: FrTxPduId -&gt; FrTxPduId
                 PduInfoPtr -&gt; PduInfoPtr
      </description>
      <comment>
        English translation:
        FrArTp shall use the parameters of the FrArTp_TriggerTransmit call directly as parameters
        for the LLR_FrIf_FrTp_TriggerTransmit call and therefore forward them.
        Mapping: FrTxPduId -&gt; FrTxPduId
                 PduInfoPtr -&gt; PduInfoPtr
      </comment>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_TriggerTransmit_EnoughBuffer</srcid><srcstatus/><internalId>883</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_TriggerTransmit_NotEnoughBuffer</srcid><srcstatus/><internalId>884</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_TriggerTransmit_LLR_IgnoreFrArTpTriggerTransmit</srcid><srcstatus/><internalId>885</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_TriggerTransmit_LLR_IgnoreAllTriggerTransmit</srcid><srcstatus/><internalId>886</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_557</srcid><srcstatus/><internalId>728</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>466</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_047</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Wenn die API LLR_FrIf_FrTp_TriggerTransmit E_OK zurückliefert, soll das FrTp den
        TriggerTransmit-Aufruf des FrIf gemäß FrTp-Spezifikation bearbeiten und einen
        entsprechenden Rückgabewert zurückliefern.
      </description>
      <comment>
        English translation:
        If the API LLR_FrIf_FrTp_TriggerTransmit returns E_OK, FrArTp shall process the
        TriggerTransmit according to the FrArTp specification and provide a return value
        accordingly.
      </comment>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_TriggerTransmit_EnoughBuffer</srcid><srcstatus/><internalId>883</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_557</srcid><srcstatus/><internalId>728</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>467</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_048</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Wenn die API LLR_FrIf_FrTp_TriggerTransmit E_NOT_OK zurückliefert, soll das
        FrTp die Verarbeitung des FrIf TriggerTransmit-Aufrufs sofort beenden und
        als Return Value den Status aus FrIf_TriggerTransmitStatus zurückliefern.
      </description>
      <comment>
        English translation:
        If the API LLR_FrIf_FrTp_TriggerTransmit returns E_NOT_OK, FrArTp shall immediately
        terminate the TriggerTransmit call of FrIf and as return value pass the status from
        FrIf_TriggerTransmitStatus.
      </comment>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_TriggerTransmit_LLR_IgnoreFrArTpTriggerTransmit</srcid><srcstatus/><internalId>885</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_TriggerTransmit_LLR_IgnoreAllTriggerTransmit</srcid><srcstatus/><internalId>886</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_557</srcid><srcstatus/><internalId>728</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>468</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_049</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Es soll unmittelbar nach dem Aufruf von FrTp_TxConfirmation durch das FrIf,
        noch vor der Ausführung der Parameter Prüfungen (DET-Prüfungen) oder anderer
        Prüfungen, die die Verarbeitung der PDU einschränken würden, die nachfolgende
        API aufgerufen werden: LLR_FrIf_FrTp_TxConfirmation.
      </description>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Det03_Uninit_FrArTp_TxConfirmation</srcid><srcstatus/><internalId>864</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Transfer</srcid><srcstatus/><internalId>918</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_TxConfirmation_LLR_Fault</srcid><srcstatus/><internalId>935</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_626</srcid><srcstatus/><internalId>734</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_040</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>460</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>469</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_050</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1.1</version>
      <description>
        Service name: &lt;LLRPräfix&gt;LLR_FrIf_FrTp_TxConfirmation
        Syntax: Std_ReturnType &lt;LLRPräfix&gt;LLR_FrIf_FrTp_TxConfirmation(
                               PduIdType FrTxPduId )
        Service D[hex]: Durch den AN zu vergeben
        Sync/Async: Synchronous
        Reentrancy: Nicht-Reentrant für die selbe FrIf_TxPduId, Reentrant für unterschiedliche FrIf_TxPduId
        Parameters (in): FrIf_TxPduId
            ID der FlexRay PDU, deren Übertragung bestätigt werden soll. SNV: FrTp_BotschaftsName_Tp
        Parameters (inout): none
        Parameters (out): none
        Return value: Std_ReturnType
            E_OK: Die Weiterverarbeitung soll durch FrTp erfolgen.
            E_NOT_OK: Die Weiterverarbeitung wurde im LLR durchgeführt und soll im FrTp abgebrochen werden.
            Other Values: Sollen so behandelt werden, als wäre E_OK zurückgeliefert worden.
        Description:
        Anfrage bei LLR, ob der TxConfirmation Aufruf des FrIf am FrTp durch den LLR oder das
        FrTp durchgeführt werden soll.
      </description>
      <comment>
        English translation:
        Service name: &lt;LLRPraefix&gt;LLR_FrIf_FrTp_TxConfirmation
        Syntax: Std_ReturnType &lt;LLRPraefix&gt;LLR_FrIf_FrTp_TxConfirmation( PduIdType FrTxPduId )
        Service D[hex]: Assigned by the contractor
        Sync/Async: Synchronous
        Reentrancy: Non-reentrant for the same FrIf_TxPduId, reentrant for different FrIf_TxPduId
        Parameters (in):
          FrIf_TxPduId: ID of the FlexRay PDU, whose transmission shall be confirmed
            SNV: FrArTp_&lt;message name&gt;_Tp
        Parameters (inout): none
        Parameters (out): none
        Return value: Std_ReturnType
            E_OK: Further processing shall be performed by FrArTp.
            E_NOT_OK: Further processing is performed by LLR and shall be aborted by FrArTp.
            Other Values: Should be handled as if E_OK was returned.
        Description:
        Request to the LLR if the TxConfirmation call of the FrIf to FrArTp shall be handled by LLR
        or FrArTp.
      </comment>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Transfer</srcid><srcstatus/><internalId>918</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_TxConfirmation_LLR_Fault</srcid><srcstatus/><internalId>935</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_626</srcid><srcstatus/><internalId>734</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>470</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_051</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Das FrTp soll bei Return Value E_OK die Verarbeitung des TxConfirmation Aufrufs
        durch das FrIf selbst durchführen.
      </description>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Transfer</srcid><srcstatus/><internalId>918</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_626</srcid><srcstatus/><internalId>734</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>471</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_052</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Das FrTp soll bei Return Value E_NOT_OK die Verarbeitung des TxConfirmation
        Aufrufs durch das FrIf ohne weitere Prüfung direkt abbrechen.
      </description>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_TxConfirmation_LLR_Fault</srcid><srcstatus/><internalId>935</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_626</srcid><srcstatus/><internalId>734</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>472</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_053</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Das FrTp soll den Parameter des FrTp_TxConfirmation-Aufrufs direkt als Parameter
        des LLR_FrIf_FrTp_TxConfirmation Aufrufs verwenden und somit weiterleiten.
        Mapping: FrTxPduId -&gt; FrTxPduId
      </description>
      <tags>
        <tag>Unit:Encode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Transfer</srcid><srcstatus/><internalId>918</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_TxConfirmation_LLR_Fault</srcid><srcstatus/><internalId>935</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Encode.c_626</srcid><srcstatus/><internalId>734</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>473</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_054</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Es soll unmittelbar nach dem Aufruf von FrTp_RxIndication durch das FrIf,
        noch vor der Ausführung der Parameter Prüfungen (DET-Prüfungen) oder anderer
        Prüfungen, die die Verarbeitung der PDU einschränken würden, die nachfolgende
        API aufgerufen werden: LLR_FrIf_FrTp_RxIndication.
      </description>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Det03_Uninit_FrArTp_RxIndication</srcid><srcstatus/><internalId>863</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_RxIndication_LLR_Fault</srcid><srcstatus/><internalId>946</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_553</srcid><srcstatus/><internalId>699</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_040</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>460</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>474</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_055</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1.1</version>
      <description>
        Service name: &lt;LLRPräfix&gt;LLR_FrIf_FrTp_RxIndication
        Syntax: Std_ReturnType &lt;LLRPräfix&gt;LLR_FrIf_FrTp_RxIndication(
                               PduIdType FrRxPduId,
                               const PduInfoType* PduInfoPtr)
        Service D[hex]: Durch den AN zu vergeben
        Sync/Async: Synchronous
        Reentrancy: Nicht-Reentrant für die selbe FrIf_TxPduId, Reentrant für unterschiedliche FrIf_RxPduId
        Parameters (in): FrIf_RxPduId
            ID der FlexRay PDU, deren Empfang angezeigt werden soll. SNV: FrTp_BotschaftsName_Tp
        Parameters (inout): none
        Parameters (out): none
        Return value: Std_ReturnType
            E_OK: Die Weiterverarbeitung soll durch FrTp erfolgen.
            E_NOT_OK: Die Weiterverarbeitung wurde im LLR durchgeführt und soll im FrTp abgebrochen werden.
            Other Values: Sollen so behandelt werden, als wäre E_OK zurückgeliefert worden.
        Description:
        Anfrage bei LLR, ob der RxIndication Aufruf des FrIf am FrTp durch den LLR oder das
        FrTp durchgeführt werden soll.
      </description>
      <comment>
        English translation:
        Service name: &lt;LLRPraefix&gt;LLR_FrIf_FrTp_RxIndication
        Syntax: Std_ReturnType &lt;LLRPräfix&gt;LLR_FrIf_FrTp_RxIndication(
                               PduIdType FrRxPduId,
                               const PduInfoType* PduInfoPtr)
        Service D[hex]: Assigned by the contractor
        Sync/Async: Synchronous
        Reentrancy: Non-reentrant for the same FrIf_TxPduId, reentrant for different FrIf_RxPduId
        Parameters (in):
          FrIf_RxPduId: ID of the FlexRay PDU, whose reception shall be indicated.
            SNV: FrArTp_&lt;message name&gt;_Tp
        Parameters (inout): none
        Parameters (out): none
        Return value: Std_ReturnType
          E_OK: Further processing shall be performed by FrArTp.
          E_NOT_OK: Further processing is performed by LLR and shall be aborted by FrArTp.
          Other Values: Should be handled as if E_OK was returned.
        Description:
        Request to the LLR if the RxIndication call of the FrIf to FrArTp shall be handled by LLR
        or FrArTp.
      </comment>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Reception</srcid><srcstatus/><internalId>887</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_RxIndication_LLR_Fault</srcid><srcstatus/><internalId>946</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_553</srcid><srcstatus/><internalId>699</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>475</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_056</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Das FrTp soll bei Return Value E_OK die Verarbeitung des RxIndication-Aufrufs
        durch das FrIf selbst durchführen.
      </description>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Reception</srcid><srcstatus/><internalId>887</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_553</srcid><srcstatus/><internalId>699</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>476</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_057</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Das FrTp soll bei Return Value E_NOT_OK die Verarbeitung des RxIndication-Aufrufs
        durch das FrIf ohne weitere Prüfung direkt abbrechen.
      </description>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Invalid_FctPtr_RxIndication</srcid><srcstatus/><internalId>878</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_RxIndication_LLR_Fault</srcid><srcstatus/><internalId>946</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_553</srcid><srcstatus/><internalId>699</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>477</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_058</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1.1</version>
      <description>
        Das FrTp soll den Parameter des FrTp_RxIndication-Aufrufs direkt als Parameter
        des LLR_FrIf_FrTp_RxIndication Aufrufs verwenden und somit weiterleiten.
        Mapping: FrRxPduId -&gt; FrRxPduId
                 PduInfoPtr -&gt; PduInfoPtr
      </description>
      <tags>
        <tag>Unit:Decode</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_RxIndication_LLR_Fault</srcid><srcstatus/><internalId>946</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/FrArTp_Decode.c_553</srcid><srcstatus/><internalId>699</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>478</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_059</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Es soll unmittelbar vor jedem FrIf_Transmit Aufruf im FrTp die nachfolgende
        API aufgerufen werden: LLR_FrTp_FrIf_Transmit.
      </description>
      <comment>
        English translation:
        Immediately preceding every FrIf_Transmit call in FrArTp the following API shall be called:
        LLR_FrTp_FrIf_Transmit.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_TriggerTransmit_EnoughBuffer</srcid><srcstatus/><internalId>883</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_TriggerTransmit_LLR_IgnoreFrArTpTriggerTransmit</srcid><srcstatus/><internalId>885</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_TriggerTransmit_LLR_IgnoreAllTriggerTransmit</srcid><srcstatus/><internalId>886</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Transfer</srcid><srcstatus/><internalId>918</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transfer_BlockSizeZero</srcid><srcstatus/><internalId>922</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_041</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>461</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>479</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_060</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1.1</version>
      <description>
        Service name: &lt;LLRPräfix&gt;LLR_FrTp_FrIf_Transmit
        Syntax: Std_ReturnType &lt;LLRPräfix&gt;LLR_FrTp_FrIf_Transmit(
                               PduIdType FrTxPduId,
                               const PduInfoType* FrIf_PduInfoPtr)
        Service D[hex]: Durch den AN zu vergeben
        Sync/Async: Synchronous
        Reentrancy: Nicht-Reentrant für die selbe FrIf_TxPduId, Reentrant für unterschiedliche FrIf_TxPduId
        Parameters (in): FrIf_RxPduId
            ID der FlexRay PDU, die übertragen werden soll. SNV: FrIf_BotschaftsName_Tp
        Parameters (inout): none
        Parameters (out): none
        Return value: Std_ReturnType
            E_OK: Die Weiterverarbeitung/das Versenden der PDU wurde vom LLR freigegeben.
            E_NOT_OK: Die Weiterverarbeitung durch den LLR wurde nicht freigegeben.
            Other Values: Sollen so behandelt werden, als wäre E_OK zurückgeliefert worden.
        Description:
        Anfrage bei LLR, ob Transmit-Aufruf aus dem FrTp durchgeführt warden soll oder nicht.
      </description>
      <comment>
        *Note: Note: In Audi specification document PDF, there is inconsistency between function
        name in "Service name" and in "Syntax". Under "Service name", function is named
        "&lt;LLRPräfix&gt;LLR_FrTp_FrIf_Transmit" without "_", and under "Syntax", it's named
        "&lt;LLRPräfix&gt;_LLR_FrTp_FrIf_Transmit" with "_". Other services don't have this "_"
        after "&lt;LLRPräfix&gt;.

        English translation:
        Service name: &lt;LLRPraefix&gt;LLR_FrTp_FrIf_Transmit
        Syntax: Std_ReturnType &lt;LLRPräfix&gt;LLR_FrTp_FrIf_Transmit(
                               PduIdType FrTxPduId,
                               const PduInfoType* FrIf_PduInfoPtr)
        Service D[hex]: Assigned by the contractor
        Sync/Async: Synchronous
        Reentrancy: Non-reentrant for the same FrIf_TxPduId, reentrant for different FrIf_TxPduId
        Parameters (in):
          FrIf_RxPduId: ID of the FlexRay PDU, which shall be transmitted.
            SNV: FrIf_&lt;message name&gt;_Tp
        Parameters (inout): none
        Parameters (out): none
        Return value: Std_ReturnType:
            E_OK: Further processing / the transmission has been approved by the LLR.
            E_NOT_OK: Further processing has not been approved by LLR.
            Other Values: Should be handled as if E_OK was returned.
        Description:
        Request to LLR if Transmit call shall be handled by FrArTp or not.
      </comment>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.VAG.AUDI_ASR_FrTP_061</srcid><srcstatus/><internalId>481</internalId></linkedfrom><linkedfrom><srcid>FrArTp.VAG.AUDI_ASR_FrTP_062</srcid><srcstatus/><internalId>482</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>480</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_061</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Wenn die API LLR_FrTP_FrIf_Transmit E_OK zurückliefert, soll das FrTp den
        FrIf_Transmit-Aufruf durchführen.
      </description>
      <comment>
        English translation:
        If the API LLR_FrTp_FrIf_Transmit returns E_OK, FrArTp shall call FrIf_Transmit.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_TriggerTransmit_EnoughBuffer</srcid><srcstatus/><internalId>883</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Transfer</srcid><srcstatus/><internalId>918</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Conformance_1_Segmented_Transfer_BlockSizeZero</srcid><srcstatus/><internalId>922</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_060</linksto>
          <dstversion>1.1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>480</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>481</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_062</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Wenn die API LLR_FrTP_FrIf_Transmit E_NOT_OK zurückliefert,
        soll das FrTp den FrIf_Transmit nicht durchführen und im weiteren Verlauf
        analog zum Fall verfahren, dass der FrIf_Transmit-Aufruf selbst E_NOT_OK
        zurückgeliefert hätte.
      </description>
      <comment>
        English translation:
        If the API LLR_FrT_FrIf_Transmit returns E_NOT_OK, FrArTp shall not call FrIf_Transmit
        and proceed as if the FrIf_Transmit call itself returned E_NOT_OK.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_TriggerTransmit_LLR_IgnoreAllTriggerTransmit</srcid><srcstatus/><internalId>886</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_060</linksto>
          <dstversion>1.1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>480</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>482</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_019</id>
      <status>rejected</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Falls der Konfigurationsparameter FrTpProvide2RxBufferCall auf den Wert true
        gesetzt ist, soll für den Fall, dass das FrTp auf dieser Connection einen
        neuen Empfangsvorgang mittels FF einleitet, folgendes gelten
        (Feature: 2ProvideRxBufferCalls):
      </description>
      <comment>
        This requirement is not applicable.
        In the AUTOSAR version this implementation is based upon the API does not exist anymore.
      </comment>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>483</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_020</id>
      <status>rejected</status>
      <source>VAG</source>
      <version>1.1</version>
      <description>
        1. Es soll im selben Kontext, in dem FrTp PduR_FrTpProvideRxBuffer das erste Mal
           im Rahmen der neuen Verbindungsanfrage (FF Empfang) aufgerufen wird, der FF
           in den bereitgestellten Puffer kopiert und die API PduR_FrTpProvideRxBuffer
           ein zweites Mal aufgerufen werden.
        Hinweis: Der UpperLayer soll sicherzustellen, dass bei Verwendung des Features
        immer mindesten payload (FF) bytes Buffer zur Verfügung gestellt werden.
      </description>
      <comment>
        This requirement is not applicable.
        In the AUTOSAR version this implementation is based upon the API does not exist anymore.
      </comment>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>484</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_063</id>
      <status>rejected</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        2. Der zweite Aufrufe von PduR_FrTpProvideRxBuffer soll den vom PduR beim
           ersten Aufruf zur Verfügung gestellten Puffer sofort für das Routing des
           FF im PduR freigeben .
      </description>
      <comment>
        This requirement is not applicable.
        In the AUTOSAR version this implementation is based upon the API does not exist anymore.
      </comment>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>485</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_064</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Der Anwender soll mittels Konfigurationsschalter SupportLowLevelRouting das
        Feature LowLevelRouting im FrTp aktivieren und deaktivieren können.
      </description>
      <comment>
        English translation:
        The user shall be able to activate and deactivate the feature LowLevelRouting in FrArTp
        via the configuration parameter switch SupportLowLevelRouting.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Transfer</srcid><srcstatus/><internalId>918</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>457</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>486</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_065</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1.1</version>
      <description>
        Alle entsprechenden Aufrufe und Include-Anweisungen, die nur im Zusammenhang
        mit LowLevelRouting notwendig sind, sollen per Compile-Switch gekapselt sein
        und dessen Status in Abhängigkeit vom Konfigurationsschalter
        SupportLowLevelRouting bestimmt werden.
      </description>
      <comment>
        English translation:
        All respective calls and include instructions that are related to LowLevelRouting, shall be
        encapsulated in compile switches and their state shall be dependent on the configuration
        parameter SupportLowLevelRouting.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FRARTP_COMTEST_002_ONLY_MANDATORY_INTERFACES</srcid><srcstatus/><internalId>841</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>487</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_066</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Der Anwender soll bei aktiviertem Konfigurationsschalter SupportLowLevelRouting
        mittels Textfeld LowLevelRoutingPraefix das Praefix &lt;LLRPräfix&gt; festlegen können.
      </description>
      <comment>
        English translation:
        If the configuration parameter SupportLowLevelRouting is enabled, the user shall be able to
        set the prefix &lt;LLRPraefix&gt; via the text field LowLevelRoutingPraefix.
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Unsegmented_Transfer</srcid><srcstatus/><internalId>918</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>488</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_022</id>
      <status>rejected</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Das FrTp soll mittels Konfigurationsschalter FrTpProvide2RxBufferCalls das
        Feature 2ProvideRxBufferCalls im FrTp unterstützen.
      </description>
      <comment>
        This requirement is not applicable.
        In the AUTOSAR version this implementation is based upon the API does not exist anymore.
      </comment>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>489</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_014</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1.1</version>
      <description>
        FRTP117 soll entgegen [1] nur dann einen FC: mit Status FS=OVFLW zurücksenden,
        wenn der Aufruf PduR_FrTpProvideRxBuffer BUFREQ_E_OVFLW zurückliefert.
        Bei BUFREQ_E_NOT_OK soll kein FC gesendet werden.
      </description>
      <comment>
        1st call to PduR_FrTpProvideRxBuffer =&gt; PduR_FrArTpStartOfReception
        nth call to PduR_FrTpProvideRxBuffer =&gt; PduR_FrArTpCopyRxData

        English translation:
        Contrary to [1] FrTp 117 shall reply with a FC with Status FS=OVFLW only in case of the
        call to PduR_FrTpProvideRxBuffer returning BUFREQ_E_OVFLW. In case of BUFREQ_E_NOT_OK not FC
        shall be sent.
      </comment>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.EB.AUDI_ASR_FrTP_014.1</srcid><srcstatus/><internalId>449</internalId></linkedfrom><linkedfrom><srcid>FrArTp.EB.AUDI_ASR_FrTP_014.2</srcid><srcstatus/><internalId>450</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>490</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_035</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1.1</version>
      <description>
        Die Timing Constraints aus Kapitel 10.4.4 sollen ausgewertet werden,
        aber bei einer Verletzung lediglich zu Warnungen im Konfigurationstool führen.
      </description>
      <comment>
        English translation:
        The timing constraints from chapter 10.4.4 should be evaluated, but in case of a violation
        only a warning in the configuration tool should be output.
      </comment>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.TimingParamsVeVs</srcid><srcstatus/><internalId>550</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>491</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_034</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Die Timingparameter VE und VS sollen nicht konfigurierbar sein und
        mit jeweils 0.005 abgeschätzt werden.
      </description>
      <comment>
        These parameters are mentioned in FrArTp.ASR42.SWS_FrArTp_00242 and FrArTp.ASR42.SWS_FrArTp_00243

        English translation:
        The timing parameters VE and VS shall not be configurable and are estimated as 0.005
        respectively.
      </comment>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.TimingParamsVeVs</srcid><srcstatus/><internalId>550</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>492</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_001</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        FRTP009 – Entgegen [1] sollen folgende Anforderungen nicht umgesetzt werden:
        1. Acknowledgement (with or without Retry) for 1:1 connections
        2. Segmented 1:n connections (without flow control)
      </description>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.RetryFunctionality</srcid><srcstatus/><internalId>537</internalId></linkedfrom><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom><linkedfrom><srcid>dev.FrArTp.SegmentedCommunication</srcid><srcstatus/><internalId>539</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>493</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_002</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Kapitel 7.2.1.2 aus [1] soll nicht umgesetzt werden.
      </description>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>494</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_003</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Kapitel 7.2.1.3 aus [1] soll nicht umgesetzt werden.
      </description>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.RetryFunctionality</srcid><srcstatus/><internalId>537</internalId></linkedfrom><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>495</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_004</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Kapitel 7.2.2 aus [1]: Der Unterpunkt Segmented Transfer soll nicht umgesetzt werden.
      </description>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.SegmentedCommunication</srcid><srcstatus/><internalId>539</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>496</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_005</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Alle Anforderungen aus [1], die explizit für folgende Feature gelten, sollen nicht umgesetzt werden:
        - Acknowledgement with and without retry
        - Segmented 1:n connections
        Dies betrifft Teile der folgenden Anforderungen:
        FRTP028, FRTP286, FRTP287, FRTP039, FRTP057, FRTP063, FRTP068, FRTP244, FRTP283, FRTP252, FRTP111
      </description>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.RetryFunctionality</srcid><srcstatus/><internalId>537</internalId></linkedfrom><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom><linkedfrom><srcid>dev.FrArTp.SegmentedCommunication</srcid><srcstatus/><internalId>539</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>497</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_006</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        FRTP285 – Entgegen [1] sollen die Anforderung nicht umgesetzt werden
      </description>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.RetryFunctionality</srcid><srcstatus/><internalId>537</internalId></linkedfrom><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>498</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_007</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Kapitel 7.3.6 aus [1] soll nicht umgesetzt werden.
      </description>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>499</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_008</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        FRTP269, FRTP270, FRTP271 und FRTP272 aus [1] soll nicht umgesetzt werden.
      </description>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>500</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_009</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Kapitel 7.4.6.2 aus [1] soll nicht umgesetzt werden.
      </description>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>501</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_010</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Kapitel 7.4.6.3 aus [1] soll nicht umgesetzt werden.
      </description>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.RetryFunctionality</srcid><srcstatus/><internalId>537</internalId></linkedfrom><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>502</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_012</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        FRTP254 aus [1] soll nicht umgesetzt werden.
      </description>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>503</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_015</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        FRTP120 aus [1] soll nicht umgesetzt werden.
      </description>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.RetryFunctionality</srcid><srcstatus/><internalId>537</internalId></linkedfrom><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>504</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_016</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        FRTP140 aus [1] soll nicht umgesetzt werden.
      </description>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.RetryFunctionality</srcid><srcstatus/><internalId>537</internalId></linkedfrom><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>505</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_017</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Die Konfiguration FrTpHaveAckRt=True soll nicht unterstützt werden.
        Der Parameter soll nur mit Wert False unterstützt werden.
      </description>
      <comment>
        FrArTpHaveAckRt
      </comment>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.RetryFunctionality</srcid><srcstatus/><internalId>537</internalId></linkedfrom><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>506</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_018</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Die Konfiguration FrTpHaveGrpSeg=True soll nicht unterstützt werden.
        Der Parameter soll nur mit Wert False unterstützt werden.
      </description>
      <comment>
        FrArTpHaveGrpSeg
      </comment>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.SegmentedCommunication</srcid><srcstatus/><internalId>539</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>507</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_023</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Der Konfigurationsparameter FrTpAckType soll nur die Option FRTP_NO unterstützen.
        Acknowledgement with/Wihtout Retry sollen nicht aktiviert werden können.
      </description>
      <comment>
        FrArTpAckType
      </comment>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.RetryFunctionality</srcid><srcstatus/><internalId>537</internalId></linkedfrom><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>508</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_024</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Die Konfiguration FrTpGrpSeg=True soll nicht unterstützt werden.
        Der Parameter soll nur mit Wert False unterstützt werden.
      </description>
      <comment>
        FrArTpGrpSeg
      </comment>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.SegmentedCommunication</srcid><srcstatus/><internalId>539</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>509</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_025</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Der Konfigurationsparameter FrTpLm soll nur die Optionen FRTP_ISO
        und FRTP_L4G unterstützen. FRTP_ISO6 soll nicht aktiviert werden können.
      </description>
      <comment>
        FrArTpLm
      </comment>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.FrArTpLm</srcid><srcstatus/><internalId>546</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>510</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_026</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Der Konfigurationsparameter FrTpMaxBS soll nicht konfiguriert werden können,
        da er nur bei Acknowledgement with/wihtout Retry relevant ist. Dies
        ist mittels AUDI_ASR_FrTP_017 ausgeschlossen.
      </description>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.RetryFunctionality</srcid><srcstatus/><internalId>537</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>511</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_027</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Der Konfigurationsparameter FrTpMaxBufReq soll nicht konfiguriert werden können,
        da er veraltet ist und durch FrTpMaxWft ersetzt wurde.
      </description>
      <comment>
        FrArTpMaxWft
      </comment>
      <needscoverage>
        <needscov><needsobj>req</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp.ASR42.ECUC_FrArTp_00059_Conf</srcid><srcstatus/><internalId>338</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>512</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_028</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Der Konfigurationsparameter FrTpMaxFrIf soll nicht konfiguriert werden können,
        da er nur bei Acknowledgement with/wihtout Retry relevant ist.
        Dies ist mittels AUDI_ASR_FrTP_017 ausgeschlossen.
      </description>
      <comment>
        FrArTpMaxFrIf
      </comment>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>513</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_029</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Der Konfigurationsparameter FrTpMaxRn soll nicht konfiguriert werden können,
        da er nur bei Acknowledgement with/wihtout Retry relevant ist.
        Dies ist mittels AUDI_ASR_FrTP_017 ausgeschlossen.
      </description>
      <comment>
        FrArTpMaxRn
      </comment>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>514</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_030</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Der Konfigurationsparameter FrTpStMinGrpSeg soll nicht konfiguriert werden
        können, da er nur bei GroupSegmentation relevant ist. Dies ist mittels
        AUDI_ASR_FrTP_018 ausgeschlossen.
      </description>
      <comment>
        FrArTpStMinGrpSeg
      </comment>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.SegmentedCommunication</srcid><srcstatus/><internalId>539</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>515</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_031</id>
      <status>approved</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Der Konfigurationsparameter FrTpTimeBuffer soll nicht konfiguriert werden
        können, da er nur bei Acknowledgement with/wihtout Retry relevant ist.
        Dies ist mittels AUDI_ASR_FrTP_017 ausgeschlossen.
      </description>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.FrArTp.AcknowledgeFunctionality</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>516</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_032</id>
      <status>rejected</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Der Konfigurationsparameter FrTpUsePduFc soll nicht konfiguriert werden
        können, da er veraltet und seit ASR 3.2 Rev2 überflüssig ist.
      </description>
      <comment>
        This requirement is not applicable.
        In the AUTOSAR version this implementation is based upon the configuration parameter does
        not exist anymore.
      </comment>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>517</internalId></specobject>

    <specobject>
      <id>FrArTp.VAG.AUDI_ASR_FrTP_033</id>
      <status>rejected</status>
      <source>VAG</source>
      <version>1</version>
      <description>
        Das Kapitel 10.2.6 FrTpPduFc, welches den Container FrTpPduFc mit den
        Parametern FrTpPduFcDirection, FrTpPduFcId und FrTpPduFcRef soll vollständig
        ignoriert werden, da der Container veraltet und seit ASR 3.2 Rev2 überflüssig ist.
      </description>
      <comment>
        This requirement is not applicable.
        In the AUTOSAR version this implementation is based upon the configuration parameter does
        not exist anymore.
      </comment>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>518</internalId></specobject>

  </specobjects>
    <specobjects doctype="req">

    <specobject>
      <id>FrArTp.EB.DBGINST001</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Every public API of the module shall have debug instrumentation.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FrArTp_DBGINST_001</srcid><srcstatus/><internalId>835</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>519</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.DBGINST002</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The parameter of a API shall be available in the entry instrumentation.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FrArTp_DBGINST_001</srcid><srcstatus/><internalId>835</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>520</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.DBGINST003</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The parameter of a API shall be available in the exit instrumentation.
        If the API has a return value, the very first parameter of the macro shall contain the expected return value.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FrArTp_DBGINST_001</srcid><srcstatus/><internalId>835</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>521</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.DBGINST004</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The default implementation of the debug instrumentation shall be an empty macro.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FrArTp_DBGINST_001</srcid><srcstatus/><internalId>835</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>522</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.DBGINST005</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The module shall include the header files Base_Dbg.h in order to allow changing the default implementation of the debug instrumentation.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FrArTp_DBGINST_001</srcid><srcstatus/><internalId>835</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>523</internalId></specobject>

  </specobjects>
    <specobjects doctype="req">

    <specobject>
      <id>FrArTp.EB.PBCFGM101</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Service name: FrArTp_IsValidConfig
        Syntax: Std_ReturnType FrArTp_IsValidConfig( void* ConfigPtr )
        Sync/Async: Synchronous
        Reentrancy: Reentrant
        Parameters (in): ConfigPtr, post build configuration manager
        configuration.
        Parameters (inout): None
        Parameters (out): None
        Return value: Returns E_OK if the FrArTp configuration is valid otherwise E_NOT_OK. A
        null pointer is interpreted as invalid configuration.
        Description: This function determines if the FrArTp configuration is valid. This
        function can be called also before the FrArTp is initialized. No error reporting
        is necessary within this function.
      </description>
      <comment> </comment>
      <!-- Can be tested by an conformance and a compile test -->
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Test_IsValidConfig</srcid><srcstatus/><internalId>836</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>524</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.PBCFGM102</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        A configuration is valid
        - if the platform signature in the post build configuration equals the value
          determined by the macro TS_PlatformSigIsValid.
        - if the compile time signature in the post build configuration equals the value of
          the macro FRARTP_CFG_SIGNATURE.
        - if the compile time signature of Published information in the post build configuration
          equals the value of the macro FRARTP_PUBLIC_INFO_SIGNATURE.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Test_IsValidConfig</srcid><srcstatus/><internalId>836</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>525</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.PBCFGM104</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        For generalized consistency of the post build configuration versus the compile time
        configuration:
        - the post build configuration structure shall contain the uint32 value
          CfgSignature.
        - the FrArTp_Cfg.h file shall contain the macro
          FRARTP_CFG_SIGNATURE.
        - the MCG shall generate this signature value of compile time parameters. The x-path
          function asc:getConfigSignature(nodeset) shall be used to determine the signature out
          of a list of parameters. The list of compile time parameters shall determined with the
          function asc:getConfigClassNodeList(cassString).
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Test_IsValidConfig</srcid><srcstatus/><internalId>836</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>526</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.PBCFGM104_1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        For generalized consistency of the post build configuration versus the compile time
        configuration:
        - the post build configuration structure shall contain the uint32 value
          PublicInfoSignature.
        - the FrArTp_Cfg.h file shall contain the macro
          FRARTP_PUBLIC_INFO_SIGNATURE.
        - The MCG shall generate this signature value from the list of parameters of
          configuration class 'PublishedInformation' except 'Release'. The XPath function
          asc:getConfigSignature(nodeset) shall be used to determine the signature out of the
          list of parameters. The list of parameters shall be determined with the function
          asc:getConfigClassNodeList(cassString).
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Test_IsValidConfig</srcid><srcstatus/><internalId>836</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>527</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.PBCFGM106</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        For Platform verification:
        - the FrArTp post build configuration structure shall contain the value
          uint32 PlatformSignature. This uint32 must be the first value of the post build
          configuration structure to guarantee the correct access not disturbed by any padding
          bytes.
        - the MCG shall generate this signature for the selected target. The generator shall
          use the x-path function asc:getPlatformSignature() to determine this value.
      </description>
      <comment>
        See also:
        https://infohub.automotive.elektrobit.com/display/PRJEBTRESOS/PostBuild#PostBuild-Consistencypostbuildconfig
        https://issue.ebgroup.elektrobit.com/browse/ASCBASE-1485
      </comment>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Test_IsValidConfig</srcid><srcstatus/><internalId>836</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>528</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.PBCFGM107</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The PbcfgM support shall be enabled or disabled via the macro
        FRARTP_PBCFGM_SUPPORT_ENABLED defined in the file
        FrArTp_Cfg.h.
        If the PbcfgM configuration references the FrArTp configuration
        the macro is set to STD_ON otherwise, or if no PbcfgM configuration is
        available it is set to STD_OFF.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Test_IsValidConfig</srcid><srcstatus/><internalId>836</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Test_PBcfgM_Off</srcid><srcstatus/><internalId>838</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>529</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.PBCFGM108</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the FrArTp is referenced by the PbcfgM, the parameter regarding the
        relocatable feature, shall not be editable and the MCG shall use the configuration of
        the PbcfgM.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Test_PBcfgM_Off</srcid><srcstatus/><internalId>838</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Test_PBcfgM_On</srcid><srcstatus/><internalId>839</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>src</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/FrArTp.xdm.m4_174</srcid><srcstatus/><internalId>833</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>530</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.PBCFGM110</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The FrArTp_Init() function must be extended to enable the PbcgfM
        features.
        The initialization function shall obtain the FrArTp configuration
        from the PbcfgM if the PbcfgM support is enabled within this FrArTp
        and the initialization function is called with a null pointer.
        The validity of the configuration shall be checked by the function
        FrArTp_IsValidConfig(). The validity shall be check regardless the PbcfgM
        support is enabled or not.
        If no valid configuration can be obtained the initialization function shall
        return, leaving the FrArTp uninitialized.
        In the case error reporting is enabled and no valid configuration can be obtained
        an erroneous parameter shall be indicated.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Test_VerifyInitWithPcfgM</srcid><srcstatus/><internalId>837</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>531</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.PostBuild_1</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The FrArTp module shall compile and build an executable even in the absence
        of a post build configuration, i.e. without any post build generated .c and .h files
        available.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FRARTP_COMTEST_NoPbCfg</srcid><srcstatus/><internalId>843</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>532</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.PbcfgM_General_3</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The FrArTp shall provide the following macros in the header file
        FrArTp_Cfg.h:
        - FRARTP_RELOCATABLE_CFG_ENABLE which is set to STD_ON
          if relocatable config shall be enabled, otherwise it's set to STD_OFF.
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Test_PBcfgM_On</srcid><srcstatus/><internalId>839</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>533</internalId></specobject>

    <specobject>
      <id>FrArTp.EB.PbcfgM_General_6</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If PbcfgM support is enabled FrArTp shall define the following macros in
        FrArTp_PBCfg.c:
        - TS_PB_CFG_LAYOUT_TYPE: Shall expand to the type definition of the Postbuild
          configuration layout type (e.g. FrArTp_ConstConfigLayoutType)
        - TS_PB_CFG_NAME: Shall expand to the name of the structure defining the Postbuild
          configuration layout (e.g. FrArTp_ConfigLayout)
      </description>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Test_PBcfgM_Off</srcid><srcstatus/><internalId>838</internalId></linkedfrom><linkedfrom><srcid>FrArTp_Test_PBcfgM_On</srcid><srcstatus/><internalId>839</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>534</internalId></specobject>

  </specobjects>
    <specobjects doctype="req">

    <specobject>
      <id>FrArTp.EB.PDULENGTHTYPE001</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The FrArTp module shall support the following values of PduLengthType:
        [UINT32, UINT16]
      </description>
      <verifycrit>
        Use case 1 - Modules not capable of handling more than 64 kbytes of data:
          - use PduLengthType value 'UINT32' with conformance test
          - verify successful test run, verify absence of metric violations
            (MISRA-C:2012, static code analysis, compiler warnings)
        Use case 2 - Modules capable of handling more than 64 kbytes of data:
          - use conformance test which handles more than 64 kbytes of data
          - apply "boundary" tests using data length of:
            [&lt;&lt;65535,65535, 65536, &gt;131072][bytes]
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FrArTp_Conformance_1_Det12_Extended_Segmented_Reception_InvalidMaxDL</srcid><srcstatus/><internalId>879</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>535</internalId></specobject>

  </specobjects>
    <specobjects doctype="req">

    <specobject>
      <id>FrArTp.EB.Interface.Consistency</id>
       <status>approved</status>
       <source>EB</source>
       <version>1</version>
       <description>
        The module shall provide a mechanism to guarantee consistency of interfaces and
        types between its implementation and its code stub.
       </description>
       <comment>
        The code stub of a module shall provide the same external view than the module itself.
        This is mandatory because unit test of modules test against the code stubs of
        adjacent modules. Inconsistent stubs may result in the situation that incompatible
        interfaces are not detected as unit test stage.
       </comment>
       <verifycrit>
        Create a compile test with two permutations that call all interfaces of a module
        (in both permutations).
        p0: Behave like a regular compile test; call the module generator and compile against
        the implementation of the module.
        p1: Do not generate module code and do not compile the implementation of the module.
        Instead the module shall be replaced with its own code stub.
       </verifycrit>
       <needscoverage>
          <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_FrArTp_VerifyCodeStub</srcid><srcstatus/><internalId>840</internalId></linkedfrom></coveredby></needscov>
       <containerCovstatus>covered</containerCovstatus></needscoverage>
       
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>536</internalId></specobject>

  </specobjects>
    <specobjects doctype="dev">
    <specobject>
      <id>dev.FrArTp.RetryFunctionality</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>33</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00009.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00060.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00063.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00082</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00106.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>247</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>266</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00140</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>290</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00232.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>244</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00233</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>252</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00234</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>267</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00239.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00244.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.16</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00284</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00300</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>275</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>495</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>497</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>498</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>502</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>504</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>505</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>506</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_023</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>508</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>511</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>537</internalId></specobject>
    <specobject>
      <id>dev.FrArTp.AcknowledgeFunctionality</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>117</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00009.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00009.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00028.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00039.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00057.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>67</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00063.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00068.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>97</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00072</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>107</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00073</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00074</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>110</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00075</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00076</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>112</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00078</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00082</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00087.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00117.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>285</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00120</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>287</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00227.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00241</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00244.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>104</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00246</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00247</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00248</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00249</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>120</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00250.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>123</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00251</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>116</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00252.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>162</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00253</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>264</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00266</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00267</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>211</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00268</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>212</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00269</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>163</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00270</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00271</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>165</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00272</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>166</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00280</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>210</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00281</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>208</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00285.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00286.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00287.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>494</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>495</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>497</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>498</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>499</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>500</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>501</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>502</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>503</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>504</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>505</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>506</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_023</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>508</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>513</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>514</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>516</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>538</internalId></specobject>
    <specobject>
      <id>dev.FrArTp.SegmentedCommunication</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>201</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00009.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00036</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00059</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00086.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>168</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00086.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>169</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00086.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>170</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00091.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00104.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>234</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.17</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>493</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>496</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>497</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_018</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>507</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>509</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>515</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>539</internalId></specobject>
    <specobject>
      <id>dev.FrArTp.TxRetry</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>239</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00263.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>203</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00282.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>540</internalId></specobject>
    <specobject>
      <id>dev.FrArTp.FrArTpTimeoutCrInvalidSN</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>262</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00265.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>207</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>541</internalId></specobject>
    <specobject>
      <id>dev.FrArTp.MainFunction</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>292</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00292</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>296</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>542</internalId></specobject>
    <specobject>
      <id>dev.FrArTp.ConsChck</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>315</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00201</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>543</internalId></specobject>
    <specobject>
      <id>dev.FrArTp.PduPriority</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>334</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00258</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>190</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00278</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>375</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>544</internalId></specobject>
    <specobject>
      <id>dev.FrArTp.ImmediateTransmission</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>357</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00187</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>291</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>545</internalId></specobject>
    <specobject>
      <id>dev.FrArTp.FrArTpLm</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>381</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00025.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00025.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00028.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00034.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00091</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_025</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>510</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.FFI.FRAME_LENGTH.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>425</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>546</internalId></specobject>
    <specobject>
      <id>dev.FrArTp.PaddingValue</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>408</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00255</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>547</internalId></specobject>
    <specobject>
      <id>dev.FrArTp.NotSupportedDevelopmentErrors</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>430</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00179.E_INIT_FAILED</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>294</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>548</internalId></specobject>
    <specobject>
      <id>dev.FrArTp.ShutDown</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>453</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00148</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>301</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>549</internalId></specobject>
    <specobject>
      <id>dev.FrArTp.TimingParamsVeVs</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>484</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00242</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>368</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00243</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>369</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_034</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>492</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_035</linksto>
          <dstversion>1.1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>491</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>550</internalId></specobject>
    <specobject>
      <id>dev.FrArTp.SymbolicNameValues</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>508</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_043</linksto>
          <dstversion>1.2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>463</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>551</internalId></specobject>
    <specobject>
      <id>dev.FrArTp.StartOfReceptionENotOk</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>529</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.AUDI_ASR_FrTP_014.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>450</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>552</internalId></specobject>
    <specobject>
      <id>dev.FrArTp.RxIndicationPduInfoPtr</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>554</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00152</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>307</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>553</internalId></specobject>
    <specobject>
      <id>dev.FrArTp.FrArTpMaxWft</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>578</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.ECUC_FrArTp_00059_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>338</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>554</internalId></specobject>
  </specobjects>
    <specobjects doctype="dsn" title="Tx-State Machine">
    <specobject>
      <id>FrArTp.Design.SM.Tx.Ignore</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>2928</sourceline>
      <version>1</version>
      <description>
                    Ignore events not specified as transitions in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_TX_STATE_IDLE_ignore</srcid><srcstatus/><internalId>1084</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_SM_TX_STATE_WAITPDU_ignore</srcid><srcstatus/><internalId>1085</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_SM_TX_STATE_TXPENDING_ignore</srcid><srcstatus/><internalId>1086</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_SM_TX_STATE_WAITTX_ignore</srcid><srcstatus/><internalId>1087</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_SM_TX_STATE_WAITFC_ignore</srcid><srcstatus/><internalId>1088</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_SM_TX_STATE_IDLE_ignore_Inactive</srcid><srcstatus/><internalId>1089</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>555</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Tx.Idle_WaitPdu</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>2941</sourceline>
      <version>1</version>
      <description>
                    Transition from Idle to WaitPdu in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_TX_TR_IDLE_WAITPDU</srcid><srcstatus/><internalId>1065</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>556</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Tx.WaitPdu_WaitPdu</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>2954</sourceline>
      <version>1</version>
      <description>
                    Transition from WaitPdu to WaitPdu in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_TX_TR_WAITPDU_WAITPDU</srcid><srcstatus/><internalId>1066</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>557</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Tx.WaitPdu_TxPending</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>2967</sourceline>
      <version>1</version>
      <description>
                    Transition from WaitPdu to TxPending in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_TX_TR_WAITPDU_TXPENDING</srcid><srcstatus/><internalId>1067</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>558</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Tx.TxPending_TxPending_copyData_Ok</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>2980</sourceline>
      <version>1</version>
      <description>
                    Transition from TxPending to TxPending (event copyData,
                    guard FrArTp_SduMng_copyTxData() == BUFREQ_OK) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_TX_TR_TXPENDING_TXPENDING_SF</srcid><srcstatus/><internalId>1068</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>559</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Tx.TxPending_TxPending_copyData_Busy</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>2994</sourceline>
      <version>1</version>
      <description>
                    Transition from TxPending to TxPending (event copyData,
                    guard FrArTp_SduMng_copyTxData() == BUFREQ_E_BUSY) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_TX_TXPENDING_TXPENDING_COPYDATA_BUSY</srcid><srcstatus/><internalId>1092</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>560</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Tx.TxPending_WaitTx</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3008</sourceline>
      <version>1</version>
      <description>
                    Transition from TxPending to WaitTx in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_TX_TR_TXPENDING_WAITTX</srcid><srcstatus/><internalId>1073</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>561</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Tx.WaitTx_WaitPdu</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3021</sourceline>
      <version>1</version>
      <description>
                    Transition from WaitTx to WaitPdu in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_TX_TR_WAITTX_WAITPDU</srcid><srcstatus/><internalId>1074</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>562</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Tx.TxPending_WaitFC</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3034</sourceline>
      <version>1</version>
      <description>
                    Transition from TxPending to WaitFC in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_TX_TR_TXPENDING_WAITFC</srcid><srcstatus/><internalId>1070</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>563</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Tx.WaitFC_WaitFC</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3047</sourceline>
      <version>1</version>
      <description>
                    Transition from WaitFC to WaitFC in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_TX_TR_WAITFC_WAITFC</srcid><srcstatus/><internalId>1071</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>564</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Tx.WaitFC_WaitPdu</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3060</sourceline>
      <version>1</version>
      <description>
                    Transition from WaitFC to WaitPdu in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_TX_TR_WAITFC_WAITPDU</srcid><srcstatus/><internalId>1072</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>565</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Tx.TxPending_Idle_txConfirmation</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3073</sourceline>
      <version>1</version>
      <description>
                    Transition from TxPending to Idle (event txConfirmation) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_TX_TR_TXPENDING_IDLE_SF</srcid><srcstatus/><internalId>1069</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>566</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Tx.TxPending_Idle_copyData</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3086</sourceline>
      <version>1</version>
      <description>
                    Transition from TxPending to Idle (event copyData) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_TX_TXPENDING_TXPENDING_COPYDATA_BUSY</srcid><srcstatus/><internalId>1092</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>567</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Tx.WaitFC_Idle_timeout</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3099</sourceline>
      <version>1</version>
      <description>
                    Transition from WaitFC to Idle (event timeout) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_TX_TR_WAITFC_IDLE_timeout</srcid><srcstatus/><internalId>1077</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>568</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Tx.WaitPdu_Idle_timeout</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3112</sourceline>
      <version>1</version>
      <description>
                    Transition from WaitPdu to Idle (event timeout) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_TX_TR_WAITPDU_IDLE_timeout</srcid><srcstatus/><internalId>1075</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>569</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Tx.TxPending_Idle_timeout</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3125</sourceline>
      <version>1</version>
      <description>
                    Transition from TxPending to Idle (event timeout) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_TX_TR_TXPENDING_IDLE_timeout</srcid><srcstatus/><internalId>1076</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>570</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Tx.WaitFC_Idle_receivedOVFLW</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3138</sourceline>
      <version>1</version>
      <description>
                    Transition from WaitFC to Idle (event receivedOVFLW) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_TX_TR_WAITFC_IDLE_receivedOVFLW</srcid><srcstatus/><internalId>1078</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>571</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Tx.WaitFC_Idle_receivedInvalidFS</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3151</sourceline>
      <version>1</version>
      <description>
                    Transition from WaitFC to Idle (event receivedInvalidFS) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_TX_TR_WAITFC_IDLE_receivedInvalidFS</srcid><srcstatus/><internalId>1079</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>572</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Tx.WaitFC_Idle_cancelTx</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3164</sourceline>
      <version>1</version>
      <description>
                    Transition from WaitFC to Idle (event cancelTx) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_TX_TR_WAITFC_IDLE_cancelTx</srcid><srcstatus/><internalId>1080</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>573</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Tx.WaitPdu_Idle_cancelTx</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3177</sourceline>
      <version>1</version>
      <description>
                    Transition from WaitPdu to Idle (event cancelTx) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_TX_TR_WAITPDU_IDLE_cancelTx</srcid><srcstatus/><internalId>1081</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>574</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Tx.TxPending_Idle_cancelTx</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3190</sourceline>
      <version>1</version>
      <description>
                    Transition from TxPending to Idle (event cancelTx) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_TX_TR_TXPENDING_IDLE_cancelTx</srcid><srcstatus/><internalId>1082</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>575</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Tx.WaitTx_Idle_cancelTx</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3203</sourceline>
      <version>1</version>
      <description>
                    Transition from WaitTx to Idle (event cancelTx) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_TX_TR_WAITTX_IDLE_cancelTx</srcid><srcstatus/><internalId>1083</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>576</internalId></specobject>
  </specobjects>
    <specobjects doctype="dsn" title="Rx-State Machine">
    <specobject>
      <id>FrArTp.Design.SM.Rx.Ignore</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3234</sourceline>
      <version>1</version>
      <description>
                    Ignore events not specified as transitions in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_STATE_IDLE_ignore</srcid><srcstatus/><internalId>1045</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_STATE_CHECKBUFFER_ignore</srcid><srcstatus/><internalId>1046</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_STATE_WAITWAITPDU_ignore</srcid><srcstatus/><internalId>1047</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_STATE_WAITTXPENDING_ignore</srcid><srcstatus/><internalId>1048</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_STATE_CTSWAITPDU_ignore</srcid><srcstatus/><internalId>1049</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_STATE_CTSTXPENDING_ignore</srcid><srcstatus/><internalId>1050</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_STATE_WAITDATA_ignore</srcid><srcstatus/><internalId>1051</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_STATE_OVFLWWAITPDU_ignore</srcid><srcstatus/><internalId>1052</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_STATE_OVFLWTXPENDING_ignore</srcid><srcstatus/><internalId>1053</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>577</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.Idle_Idle_SF</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3247</sourceline>
      <version>1</version>
      <description>
                    Transition from Idle to Idle (receive SF) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_IDLE_OK_SF</srcid><srcstatus/><internalId>1000</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>578</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.Idle_Idle_NOT_OK</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3260</sourceline>
      <version>1</version>
      <description>
                    Transition from Idle to Idle (startOfReception buffer NOT_OK) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_IDLE_NOT_OK</srcid><srcstatus/><internalId>1002</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>579</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.Idle_Idle_bufferError</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3273</sourceline>
      <version>1</version>
      <description>
                    Transition from Idle to Idle (event rx buffer NOT_OK) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_IDLE_COPYRXDATA_NOT_OK</srcid><srcstatus/><internalId>1063</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>580</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.Idle_CheckBuffer</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3286</sourceline>
      <version>1</version>
      <description>
                    Transition from Idle to CheckBuffer in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_IDLE_CHECKBUFFER</srcid><srcstatus/><internalId>1003</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>581</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.CheckBuffer_CheckBuffer</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3299</sourceline>
      <version>1</version>
      <description>
                    Transition from CheckBuffer to CheckBuffer in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_CHECKBUFFER_CHECKBUFFER</srcid><srcstatus/><internalId>1004</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>582</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.CheckBuffer_Idle_bufferError</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3312</sourceline>
      <version>1</version>
      <description>
                    Transition from CheckBuffer to Idle (event rx buffer NOT_OK) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_CHECKBUFFER_COPYRXDATA_NOT_OK</srcid><srcstatus/><internalId>1061</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>583</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.CheckBuffer_Idle_timeout</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3325</sourceline>
      <version>1</version>
      <description>
                    Transition from CheckBuffer to Idle (event timeout) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_CHECKBUFFER_IDLE_timeout</srcid><srcstatus/><internalId>1023</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>584</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.CheckBuffer_WAITWaitPdu</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3338</sourceline>
      <version>1</version>
      <description>
                    Transition from CheckBuffer to WAITWaitPdu in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_CHECKBUFFER_WAITWAITPDU</srcid><srcstatus/><internalId>1005</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>585</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.WAITWaitPdu_WAITTxPending</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3351</sourceline>
      <version>1</version>
      <description>
                    Transition from  WAITWaitPdu to WAITTxPending in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_WAITWAITPDU_WAITTXPENDING</srcid><srcstatus/><internalId>1006</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>586</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.WAITTxPending_WAITTxPending</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3364</sourceline>
      <version>1</version>
      <description>
                    Transition from  WAITTxPending to WAITTxPending in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_WAITTXPENDING_WAITTXPENDING</srcid><srcstatus/><internalId>1007</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>587</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.WAITTxPending_CheckBuffer</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3377</sourceline>
      <version>1</version>
      <description>
                    Transition from  WAITTxPending to CheckBuffer in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_WAITTXPENDING_CHECKBUFFER</srcid><srcstatus/><internalId>1008</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>588</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.CheckBuffer_CTSWaitPdu</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3390</sourceline>
      <version>1</version>
      <description>
                    Transition from CheckBuffer to CTSWaitPdu in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_CHECKBUFFER_CTSWAITPDU</srcid><srcstatus/><internalId>1009</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>589</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.CTSWaitPdu_CTSTxPending</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3403</sourceline>
      <version>1</version>
      <description>
                    Transition from CTSWaitPdu to CTSTxPending in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_CTSWAITPDU_CTSTXPENDING</srcid><srcstatus/><internalId>1010</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>590</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.CTSTxPending_CTSTxPending</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3416</sourceline>
      <version>1</version>
      <description>
                    Transition from CTSTxPending to CTSTxPending in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_CTSTXPENDING_CTSTXPENDING</srcid><srcstatus/><internalId>1011</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>591</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.CTSTxPending_WaitData</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3429</sourceline>
      <version>1</version>
      <description>
                    Transition from CTSTxPending to WaitData in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_CTSTXPENDING_WAITDATA</srcid><srcstatus/><internalId>1012</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>592</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.WaitData_WaitData</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3442</sourceline>
      <version>1</version>
      <description>
                    Transition from WaitData to WaitData in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_WAITDATA_WAITDATA</srcid><srcstatus/><internalId>1013</internalId></linkedfrom><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_FF_NO_FREE_CONNECTION</srcid><srcstatus/><internalId>1057</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>593</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.WaitData_CheckBuffer</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3455</sourceline>
      <version>1</version>
      <description>
                    Transition from WaitData to CheckBuffer in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_WAITDATA_CHECKBUFFER</srcid><srcstatus/><internalId>1014</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>594</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.WaitData_Idle_receivedData</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3468</sourceline>
      <version>1</version>
      <description>
                    Transition from WaitData to Idle (event receivedData) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_WAITDATA_IDLE</srcid><srcstatus/><internalId>1015</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>595</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.Idle_OVFLWWaitPdu</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3481</sourceline>
      <version>1</version>
      <description>
                    Transition from Idle to OVFLWWaitPdu in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_IDLE_OVFLWWAITPDU</srcid><srcstatus/><internalId>1017</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>596</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.OVFLWWaitPdu_OVFLWTxPending</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3494</sourceline>
      <version>1</version>
      <description>
                    Transition from OVFLWWaitPdu to OVFLWTxPending in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_OVFLWWAITPDU_OVFLWTXPENDING</srcid><srcstatus/><internalId>1018</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>597</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.OVFLWTxPending_OVFLWTxPending</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3507</sourceline>
      <version>1</version>
      <description>
                    Transition from OVFLWTxPending to OVFLWTxPending in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_OVFLWTXPENDING_OVFLWTXPENDING</srcid><srcstatus/><internalId>1019</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>598</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.OVFLWTxPending_Idle_txConfirmation</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3520</sourceline>
      <version>1</version>
      <description>
                    Transition from OVFLWTxPending to Idle (event txConfirmation) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_OVFLWTXPENDING_IDLE</srcid><srcstatus/><internalId>1020</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>599</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.OVFLWWaitPdu_Idle_timeout</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3533</sourceline>
      <version>1</version>
      <description>
                    Transition from OVFLWWaitPdu to Idle (event timeout) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_OVFLWWAITPDU_IDLE_timeout</srcid><srcstatus/><internalId>1021</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>600</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.OVFLWTxPending_Idle_timeout</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3546</sourceline>
      <version>1</version>
      <description>
                    Transition from OVFLWTxPending to Idle (event timeout) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_OVFLWTXPENDING_IDLE_timeout</srcid><srcstatus/><internalId>1022</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>601</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.CTSWaitPdu_Idle_timeout</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3559</sourceline>
      <version>1</version>
      <description>
                    Transition from CTSWaitPdu to Idle (event timeout) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_CTSWAITPDU_IDLE_timeout</srcid><srcstatus/><internalId>1024</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>602</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.CTSTxPending_Idle_timeout</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3572</sourceline>
      <version>1</version>
      <description>
                    Transition from CTSTxPending to Idle (event timeout) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_CTSTXPENDING_IDLE_timeout</srcid><srcstatus/><internalId>1025</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>603</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.WAITWaitPdu_Idle_timeout</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3585</sourceline>
      <version>1</version>
      <description>
                    Transition from WAITWaitPdu to Idle (event timeout) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_WAITWAITPDU_IDLE_timeout</srcid><srcstatus/><internalId>1026</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>604</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.WAITTxPending_Idle_timeout</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3598</sourceline>
      <version>1</version>
      <description>
                    Transition from WAITTxPending to Idle (event timeout) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_WAITTXPENDING_IDLE_timeout</srcid><srcstatus/><internalId>1027</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>605</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.WaitData_Idle_bufferError</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3611</sourceline>
      <version>1</version>
      <description>
                    Transition from WaitData to Idle (event rx buffer NOT_OK) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_WAITDATA_COPYRXDATA_NOT_OK</srcid><srcstatus/><internalId>1062</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>606</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.WaitData_Idle_timeout</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3624</sourceline>
      <version>1</version>
      <description>
                    Transition from WaitData to Idle (event timeout) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_WAITDATA_IDLE_timeout</srcid><srcstatus/><internalId>1028</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>607</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.OVFLWWaitPdu_Idle_cancelRx</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3637</sourceline>
      <version>1</version>
      <description>
                    Transition from OVFLWWaitPdu to Idle (event cancelRx) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_OVFLWWAITPDU_IDLE_cancelRx</srcid><srcstatus/><internalId>1029</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>608</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.OVFLWTxPending_Idle_cancelRx</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3650</sourceline>
      <version>1</version>
      <description>
                    Transition from OVFLWTxPending to Idle (event cancelRx) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_OVFLWTXPENDING_IDLE_cancelRx</srcid><srcstatus/><internalId>1030</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>609</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.CTSWaitPdu_Idle_cancelRx</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3663</sourceline>
      <version>1</version>
      <description>
                    Transition from CTSWaitPdu to Idle (event cancelRx) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_CTSWAITPDU_IDLE_cancelRx</srcid><srcstatus/><internalId>1031</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>610</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.CTSTxPending_Idle_cancelRx</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3676</sourceline>
      <version>1</version>
      <description>
                    Transition from CTSTxPending to Idle (event cancelRx) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_CTSTXPENDING_IDLE_cancelRx</srcid><srcstatus/><internalId>1032</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>611</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.WAITWaitPdu_Idle_cancelRx</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3689</sourceline>
      <version>1</version>
      <description>
                    Transition from WAITWaitPdu to Idle (event cancelRx) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_WAITWAITPDU_IDLE_cancelRx</srcid><srcstatus/><internalId>1033</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>612</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.WAITTxPending_Idle_cancelRx</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3702</sourceline>
      <version>1</version>
      <description>
                    Transition from WAITTxPending to Idle (event cancelRx) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_WAITTXPENDING_IDLE_cancelRx</srcid><srcstatus/><internalId>1034</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>613</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.CheckBuffer_Idle_cancelRx</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3715</sourceline>
      <version>1</version>
      <description>
                    Transition from CheckBuffer to Idle (event cancelRx) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_CHECKBUFFER_IDLE_cancelRx</srcid><srcstatus/><internalId>1035</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>614</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.WaitData_Idle_cancelRx</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3728</sourceline>
      <version>1</version>
      <description>
                    Transition from WaitData to Idle (event cancelRx) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_WAITDATA_IDLE_cancelRx</srcid><srcstatus/><internalId>1036</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>615</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.OVFLWWaitPdu_Idle_newRx</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3741</sourceline>
      <version>1</version>
      <description>
                    Transition from OVFLWWaitPdu to Idle (event newRx) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_OVFLWWAITPDU_IDLE_newRx</srcid><srcstatus/><internalId>1037</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>616</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.OVFLWTxPending_Idle_newRx</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3754</sourceline>
      <version>1</version>
      <description>
                    Transition from OVFLWTxPending to Idle (event newRx) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_OVFLWTXPENDING_IDLE_newRx</srcid><srcstatus/><internalId>1038</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>617</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.CTSWaitPdu_Idle_newRx</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3767</sourceline>
      <version>1</version>
      <description>
                    Transition from CTSWaitPdu to Idle (event newRx) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_CTSWAITPDU_IDLE_newRx</srcid><srcstatus/><internalId>1039</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>618</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.CTSTxPending_Idle_newRx</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3780</sourceline>
      <version>1</version>
      <description>
                    Transition from CTSTxPending to Idle (event newRx) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_CTSTXPENDING_IDLE_newRx</srcid><srcstatus/><internalId>1040</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>619</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.WAITWaitPdu_Idle_newRx</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3793</sourceline>
      <version>1</version>
      <description>
                    Transition from WAITWaitPdu to Idle (event newRx) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_WAITWAITPDU_IDLE_newRx</srcid><srcstatus/><internalId>1041</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>620</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.WAITTxPending_Idle_newRx</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3806</sourceline>
      <version>1</version>
      <description>
                    Transition from WAITTxPending to Idle (event newRx) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_WAITTXPENDING_IDLE_newRx</srcid><srcstatus/><internalId>1042</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>621</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.WaitData_Idle_newRx</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3819</sourceline>
      <version>1</version>
      <description>
                    Transition from WaitData to Idle (event newRx) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_WAITDATA_IDLE_newRx</srcid><srcstatus/><internalId>1044</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>622</internalId></specobject>
    <specobject>
      <id>FrArTp.Design.SM.Rx.CheckBuffer_Idle_newRx</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>3832</sourceline>
      <version>1</version>
      <description>
                    Transition from CheckBuffer to Idle (event newRx) in the diagram.
                </description>
      <tags>
        <tag>Unit:SM</tag>
      </tags>
      <needscoverage>
        <needscov><needsobj>tcs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>FRARTP_UNITTEST_SM_RX_TR_CHECKBUFFER_IDLE_newRx</srcid><srcstatus/><internalId>1043</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>623</internalId></specobject>
  </specobjects>
    <specobjects doctype="dsn" title="Preemption possibilities">
    <specobject>
      <id>dsn.FrArTp.Preemption1</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>4080</sourceline>
      <version>1</version>
      <description>
        The functions FrArTp_RxIndication, FrArTp_TxConfirmation, FrArTp_TriggerTransmit and FrArTp_MainFunction must not preempt each other or themselves.
      </description>
      <needscoverage>
        <needscov><needsobj>lim</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>lim.FrArTp.EB_INTREQ_FrArTp_0001</srcid><srcstatus/><internalId>0</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>624</internalId></specobject>
    <specobject>
      <id>dsn.FrArTp.Preemption2</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>4090</sourceline>
      <version>1</version>
      <description>
        The functions FrArTp_RxIndication, FrArTp_TxConfirmation, FrArTp_TriggerTransmit must not be preempted by any other functions.
      </description>
      <needscoverage>
        <needscov><needsobj>lim</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>lim.FrArTp.EB_INTREQ_FrArTp_0002</srcid><srcstatus/><internalId>1</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>625</internalId></specobject>
    <specobject>
      <id>dsn.FrArTp.Preemption3</id>
      <status>approved</status>
      <source>EB design</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/doc/project/design/pdf/FrArTp_Design-profiled.xml</sourcefile>
      <sourceline>4100</sourceline>
      <version>1</version>
      <description>
        The FrArTp_Init must not preempt any other function and must not be preempted by any other function (i.e. the postbuild configuration may only be updated when no communication is in process).
      </description>
      <needscoverage>
        <needscov><needsobj>lim</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>lim.FrArTp.EB_INTREQ_FrArTp_0003</srcid><srcstatus/><internalId>2</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>626</internalId></specobject>
  </specobjects>
    <specobjects doctype="src">
    <specobject>
      <id>src/Autosar/include/FrArTp_Api.h_21</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/include/FrArTp_Api.h</sourcefile>
      <sourceline>21</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00215</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>299</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>627</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/FrArTp_Api.h_27</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/include/FrArTp_Api.h</sourcefile>
      <sourceline>27</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00147</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>300</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>628</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/FrArTp_Api.h_33</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/include/FrArTp_Api.h</sourcefile>
      <sourceline>33</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00149</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>302</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>629</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/FrArTp_Api.h_39</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/include/FrArTp_Api.h</sourcefile>
      <sourceline>39</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00150</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>303</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>630</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/FrArTp_Api.h_45</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/include/FrArTp_Api.h</sourcefile>
      <sourceline>45</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00229</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>304</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>631</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/FrArTp_Api.h_51</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/include/FrArTp_Api.h</sourcefile>
      <sourceline>51</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00151</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>305</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>632</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/FrArTp_Api.h_57</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/include/FrArTp_Api.h</sourcefile>
      <sourceline>57</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00154</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>306</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>633</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/FrArTp_Api.h_63</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/include/FrArTp_Api.h</sourcefile>
      <sourceline>63</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FrArTp_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>451</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>634</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/FrArTp_Api.h_69</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/include/FrArTp_Api.h</sourcefile>
      <sourceline>69</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00153</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>308</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>635</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/FrArTp_Api.h_75</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/include/FrArTp_Api.h</sourcefile>
      <sourceline>75</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00162</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>309</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>636</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/FrArTp_Api.h_126</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/include/FrArTp_Api.h</sourcefile>
      <sourceline>126</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00147</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>300</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>637</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/FrArTp_Api.h_141</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/include/FrArTp_Api.h</sourcefile>
      <sourceline>141</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00215</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>299</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>638</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/FrArTp_Api.h_164</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/include/FrArTp_Api.h</sourcefile>
      <sourceline>164</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00149</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>302</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>639</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/FrArTp_Api.h_202</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/include/FrArTp_Api.h</sourcefile>
      <sourceline>202</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00150</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>303</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>640</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/FrArTp_Api.h_229</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/include/FrArTp_Api.h</sourcefile>
      <sourceline>229</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00229</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>304</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>641</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/FrArTp_Api.h_253</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/include/FrArTp_Api.h</sourcefile>
      <sourceline>253</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00151</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>305</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>642</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/FrArTp_Api.h_277</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/include/FrArTp_Api.h</sourcefile>
      <sourceline>277</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00162</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>309</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>643</internalId></specobject>
  </specobjects>
    <specobjects doctype="src">
    <specobject>
      <id>src/Autosar/include/FrArTp_Cbk.h_36</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/include/FrArTp_Cbk.h</sourcefile>
      <sourceline>36</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00153</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>308</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>644</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/FrArTp_Cbk.h_57</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/include/FrArTp_Cbk.h</sourcefile>
      <sourceline>57</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00154</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>306</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>645</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/FrArTp_Cbk.h_91</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/include/FrArTp_Cbk.h</sourcefile>
      <sourceline>91</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FrArTp_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>451</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>646</internalId></specobject>
  </specobjects>
    <specobjects doctype="src">
    <specobject>
      <id>src/Autosar/src/FrArTp.c.m4_66</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp.c.m4</sourcefile>
      <sourceline>66</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00147</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>300</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>647</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp.c.m4_88</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp.c.m4</sourcefile>
      <sourceline>88</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00215</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>299</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>648</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp.c.m4_97</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp.c.m4</sourcefile>
      <sourceline>97</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00215.E_PARAM_POINTER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>386</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>649</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp.c.m4_112</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp.c.m4</sourcefile>
      <sourceline>112</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00162</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>309</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>650</internalId></specobject>
  </specobjects>
    <specobjects doctype="src">
    <specobject>
      <id>src/Autosar/src/FrArTp_CfgAccess.c_116</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_CfgAccess.c</sourcefile>
      <sourceline>116</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00147.FRARTP_E_PARAM_POINTER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>387</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>651</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_CfgAccess.c_123</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_CfgAccess.c</sourcefile>
      <sourceline>123</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00147.FRARTP_E_INVALID_PARAMETER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>388</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>652</internalId></specobject>
  </specobjects>
    <specobjects doctype="src">
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_138</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>138</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00023</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>653</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_145</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>145</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.15</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>654</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_147</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>147</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00028.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>655</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_149</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>149</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00025.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00028.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>656</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_152</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>152</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00025.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>657</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_155</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>155</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00023</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>658</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_178</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>178</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.15</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>659</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_181</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>181</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00039.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>660</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_184</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>184</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00086.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>171</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>661</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_188</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>188</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00237</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00299</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>662</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_198</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>198</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00039.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>663</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_200</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>200</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00039.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>664</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_206</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>206</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FFI.PAYLOAD_LENGTH</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>426</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>665</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_226</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>226</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00086.6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>173</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>666</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_229</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>229</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00239</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>72</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>667</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_240</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>240</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>668</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_252</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>252</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.15</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>669</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_259</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>259</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00287.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>670</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_266</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>266</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00286.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>671</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_268</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>268</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00286.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00286.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>672</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_275</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>275</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00287.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>673</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_304</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>304</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.15</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>674</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_307</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>307</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00086.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>675</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_311</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>311</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00056</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>64</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>676</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_315</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>315</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FFE.FRAME_LENGTH.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>421</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.FFE.FRAME_LENGTH.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>422</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>677</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_320</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>320</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00238</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>678</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_332</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>332</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00152.FRARTP_E_INVALID_PARAMETER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>406</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>679</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_344</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>344</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00057.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>680</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_370</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>370</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00087.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>681</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_373</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>373</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00240</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>87</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>682</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_377</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>377</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00067.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>91</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>683</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_380</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>380</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FC.FRAME_LENGTH</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>427</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>684</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_383</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>383</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00068.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>685</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_387</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>387</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00245</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>106</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>686</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_400</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>400</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00067.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>687</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_407</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>407</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00067.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>94</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>688</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_414</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>414</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00285.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>689</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_479</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>479</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>193</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>690</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_486</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>486</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>691</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_493</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>493</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>692</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_500</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>500</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00060.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>693</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_507</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>507</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00030.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>694</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_514</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>514</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>695</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_521</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>521</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00064.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>86</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00066</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>89</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>696</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_528</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>528</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00082.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>697</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_541</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>541</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FrArTp_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>451</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>253</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00114</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>272</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>698</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_553</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>553</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_054</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>474</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_055</linksto>
          <dstversion>1.1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>475</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_056</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>476</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>477</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_058</linksto>
          <dstversion>1.1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>478</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>699</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_567</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>567</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00152.E_UNINIT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>403</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>700</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_573</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>573</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00152.E_INVALID_PDU_SDU_ID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>404</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>701</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Decode.c_580</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Decode.c</sourcefile>
      <sourceline>580</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00152.E_PARAM_POINTER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>405</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>702</internalId></specobject>
  </specobjects>
    <specobjects doctype="src">
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_198</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>198</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>703</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_200</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>200</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00030.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00030.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>704</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_206</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>206</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00023</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>705</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_208</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>208</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>706</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_218</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>218</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00238</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>707</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_220</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>220</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00056</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>64</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>708</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_226</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>226</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00237</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>709</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_228</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>228</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>710</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_234</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>234</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00058.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>69</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00058.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>70</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>711</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_239</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>239</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00239</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>72</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>712</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_241</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>241</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00060.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>713</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_277</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>277</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>714</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_283</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>283</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00023</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>715</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_293</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>293</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00238</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>716</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_301</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>301</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00237</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00299</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>717</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_348</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>348</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00240</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>87</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>718</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_358</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>358</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00066</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>89</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>719</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_377</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>377</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00257.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>189</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>720</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_406</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>406</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00064.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>85</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>721</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_448</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>448</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FrArTp_Encode.NOTRANSMISSION</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>410</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.FrArTp_Encode.NOACTIVECONNECTION</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>409</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>722</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_460</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>460</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00259</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>191</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.FrArTp_Encode.TRANSMISSION_MULTI_CONN_SINGLE_CHAN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>414</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.FrArTp_Encode.TRANSMISSION_MULTI_CONN_SINGLE_CHAN_OVFL</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>415</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>723</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_479</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>479</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FrArTp_Encode.FCDATATRANSMISSION</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>413</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>724</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_485</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>485</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASRR20-11.SWS_FrArTp_00219.FrIf_Transmit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>311</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.FrArTp_Encode.FCTRANSMISSION</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>411</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.FrArTp_Encode.DATATRANSMISSION</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>412</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>725</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_506</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>506</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00302</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>726</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_545</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>545</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00154</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>306</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>727</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_557</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>557</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_044</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>464</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_045</linksto>
          <dstversion>1.1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>465</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_046</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>466</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>467</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>468</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>728</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_572</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>572</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00154.E_UNINIT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>400</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>729</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_578</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>578</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00154.E_INVALID_PDU_SDU_ID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>401</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>730</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_585</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>585</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00154.E_PARAM_POINTER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>402</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>731</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_597</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>597</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00064.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>85</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00274.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>732</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_615</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>615</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00153</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>308</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>733</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_626</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>626</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_049</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>469</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_050</linksto>
          <dstversion>1.1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>470</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_051</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>471</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_052</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>472</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_053</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>473</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>734</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_639</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>639</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00153.E_UNINIT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>407</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>735</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_645</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>645</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00153.E_INVALID_PDU_SDU_ID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>408</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>736</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_688</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>688</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00274.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>737</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_699</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>699</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00257.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>738</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_Encode.c_710</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Encode.c</sourcefile>
      <sourceline>710</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FrArTp_Encode.TRANSMISSION_MULTI_CONN_MULTI_CHAN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>416</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>739</internalId></specobject>
  </specobjects>
    <specobjects doctype="src">
    <specobject>
      <id>src/Autosar/src/FrArTp_Int.h.m4_83</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_Int.h.m4</sourcefile>
      <sourceline>83</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00220.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>318</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>740</internalId></specobject>
  </specobjects>
    <specobjects doctype="src">
    <specobject>
      <id>src/Autosar/src/FrArTp_SM.c_255</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM.c</sourcefile>
      <sourceline>255</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00104.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>235</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>741</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM.c_261</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM.c</sourcefile>
      <sourceline>261</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00104.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>742</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM.c_268</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM.c</sourcefile>
      <sourceline>268</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00104.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>232</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>743</internalId></specobject>
  </specobjects>
    <specobjects doctype="src">
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Rx.c_240</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Rx.c</sourcefile>
      <sourceline>240</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>194</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>128</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>744</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Rx.c_256</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Rx.c</sourcefile>
      <sourceline>256</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>127</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>129</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>745</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Rx.c_269</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Rx.c</sourcefile>
      <sourceline>269</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>746</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Rx.c_288</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Rx.c</sourcefile>
      <sourceline>288</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00114</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>272</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>747</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Rx.c_302</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Rx.c</sourcefile>
      <sourceline>302</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.8</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.9</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>135</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.8</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.9</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00063.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00114</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>272</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>748</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Rx.c_429</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Rx.c</sourcefile>
      <sourceline>429</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00227.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>227</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00227.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>228</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>749</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Rx.c_452</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Rx.c</sourcefile>
      <sourceline>452</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00228</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>750</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Rx.c_553</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Rx.c</sourcefile>
      <sourceline>553</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00297.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>277</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00297.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>278</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>751</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Rx.c_558</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Rx.c</sourcefile>
      <sourceline>558</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00064.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>85</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>752</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Rx.c_609</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Rx.c</sourcefile>
      <sourceline>609</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00301</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>279</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>753</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Rx.c_614</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Rx.c</sourcefile>
      <sourceline>614</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00067.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00295.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>282</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>754</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Rx.c_629</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Rx.c</sourcefile>
      <sourceline>629</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00263.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>202</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>755</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Rx.c_638</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Rx.c</sourcefile>
      <sourceline>638</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00265.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>206</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>756</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Rx.c_700</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Rx.c</sourcefile>
      <sourceline>700</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00061.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>757</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Rx.c_716</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Rx.c</sourcefile>
      <sourceline>716</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00114</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>272</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>758</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Rx.c_729</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Rx.c</sourcefile>
      <sourceline>729</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00064.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>85</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>759</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Rx.c_731</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Rx.c</sourcefile>
      <sourceline>731</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00068.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>96</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>760</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Rx.c_750</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Rx.c</sourcefile>
      <sourceline>750</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00063.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>761</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Rx.c_760</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Rx.c</sourcefile>
      <sourceline>760</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00295.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>281</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>762</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Rx.c_859</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Rx.c</sourcefile>
      <sourceline>859</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00114</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>272</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00221.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>239</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>763</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Rx.c_866</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Rx.c</sourcefile>
      <sourceline>866</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00061.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>764</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Rx.c_1189</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Rx.c</sourcefile>
      <sourceline>1189</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>253</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00221.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>238</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>765</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Rx.c_1202</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Rx.c</sourcefile>
      <sourceline>1202</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>253</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00221.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>239</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>766</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Rx.c_1209</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Rx.c</sourcefile>
      <sourceline>1209</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00289.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>261</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00289.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>263</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>767</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Rx.c_1216</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Rx.c</sourcefile>
      <sourceline>1216</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00289.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>260</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00289.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>768</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Rx.c_1223</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Rx.c</sourcefile>
      <sourceline>1223</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00298</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>254</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>769</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Rx.c_1243</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Rx.c</sourcefile>
      <sourceline>1243</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00114</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>272</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00221.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>237</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>130</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>146</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>770</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Rx.c_1253</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Rx.c</sourcefile>
      <sourceline>1253</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00294</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>274</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>771</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Rx.c_1262</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Rx.c</sourcefile>
      <sourceline>1262</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00114</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>272</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>772</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Rx.c_1266</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Rx.c</sourcefile>
      <sourceline>1266</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.AUDI_ASR_FrTP_014.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>449</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00117.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>286</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>773</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Rx.c_1278</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Rx.c</sourcefile>
      <sourceline>1278</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.7</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.10</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.7</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>149</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.10</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>774</internalId></specobject>
  </specobjects>
    <specobjects doctype="src">
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Tx.c_216</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Tx.c</sourcefile>
      <sourceline>216</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00282.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>775</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Tx.c_225</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Tx.c</sourcefile>
      <sourceline>225</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00264</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>204</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>776</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Tx.c_250</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Tx.c</sourcefile>
      <sourceline>250</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00236.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>777</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Tx.c_258</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Tx.c</sourcefile>
      <sourceline>258</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00279</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00236.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>217</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>778</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Tx.c_262</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Tx.c</sourcefile>
      <sourceline>262</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00273</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>779</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Tx.c_267</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Tx.c</sourcefile>
      <sourceline>267</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00103</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>223</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>780</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Tx.c_269</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Tx.c</sourcefile>
      <sourceline>269</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00236.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>781</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Tx.c_302</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Tx.c</sourcefile>
      <sourceline>302</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.14</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>140</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.14</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>156</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>782</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Tx.c_305</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Tx.c</sourcefile>
      <sourceline>305</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.12</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.12</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>783</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Tx.c_310</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Tx.c</sourcefile>
      <sourceline>310</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00064.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>86</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.11</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>137</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.13</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>139</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.11</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>153</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.13</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>784</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Tx.c_317</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Tx.c</sourcefile>
      <sourceline>317</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00067.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>91</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>785</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Tx.c_350</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Tx.c</sourcefile>
      <sourceline>350</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00064.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>86</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>786</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Tx.c_353</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Tx.c</sourcefile>
      <sourceline>353</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00067.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>787</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Tx.c_390</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Tx.c</sourcefile>
      <sourceline>390</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00067.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>94</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>788</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Tx.c_526</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Tx.c</sourcefile>
      <sourceline>526</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00068.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>96</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>789</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Tx.c_612</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Tx.c</sourcefile>
      <sourceline>612</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00064.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>86</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>790</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Tx.c_617</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Tx.c</sourcefile>
      <sourceline>617</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00068.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>96</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>791</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Tx.c_664</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Tx.c</sourcefile>
      <sourceline>664</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00230</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>240</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>792</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Tx.c_714</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Tx.c</sourcefile>
      <sourceline>714</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00061.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>793</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Tx.c_718</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Tx.c</sourcefile>
      <sourceline>718</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00064.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>86</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>794</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Tx.c_760</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Tx.c</sourcefile>
      <sourceline>760</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00232.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>243</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>795</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Tx.c_771</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Tx.c</sourcefile>
      <sourceline>771</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00107.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>251</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00293.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>271</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>796</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Tx.c_788</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Tx.c</sourcefile>
      <sourceline>788</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00067.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>797</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Tx.c_842</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Tx.c</sourcefile>
      <sourceline>842</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00064.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>86</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>798</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Tx.c_844</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Tx.c</sourcefile>
      <sourceline>844</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00068.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>96</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>799</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Tx.c_869</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Tx.c</sourcefile>
      <sourceline>869</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00106.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>246</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00232.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>243</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00230</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>240</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>800</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Tx.c_881</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Tx.c</sourcefile>
      <sourceline>881</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00068.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>96</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>801</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Tx.c_889</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Tx.c</sourcefile>
      <sourceline>889</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00061.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>802</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Tx.c_891</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Tx.c</sourcefile>
      <sourceline>891</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00061.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>803</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Tx.c_900</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Tx.c</sourcefile>
      <sourceline>900</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00107.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00296</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>268</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>804</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Tx.c_907</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Tx.c</sourcefile>
      <sourceline>907</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00107.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>251</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00293.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>271</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>805</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Tx.c_981</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Tx.c</sourcefile>
      <sourceline>981</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00064.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>86</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>806</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Tx.c_1047</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Tx.c</sourcefile>
      <sourceline>1047</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00068.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>96</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>807</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SM_Tx.c_1075</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SM_Tx.c</sourcefile>
      <sourceline>1075</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00067.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>91</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>808</internalId></specobject>
  </specobjects>
    <specobjects doctype="src">
    <specobject>
      <id>src/Autosar/src/FrArTp_SduMng.c_52</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SduMng.c</sourcefile>
      <sourceline>52</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00149</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>302</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>809</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SduMng.c_68</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SduMng.c</sourcefile>
      <sourceline>68</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00149.E_UNINIT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>389</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>810</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SduMng.c_74</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SduMng.c</sourcefile>
      <sourceline>74</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00149.E_INVALID_PDU_SDU_ID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>390</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>811</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SduMng.c_81</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SduMng.c</sourcefile>
      <sourceline>81</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00149.E_PARAM_POINTER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>391</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>812</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SduMng.c_108</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SduMng.c</sourcefile>
      <sourceline>108</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00091.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>178</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00091.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00034.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00034.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00025.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>813</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SduMng.c_118</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SduMng.c</sourcefile>
      <sourceline>118</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00091.6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>814</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SduMng.c_125</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SduMng.c</sourcefile>
      <sourceline>125</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00091.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>179</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00091.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>815</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SduMng.c_147</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SduMng.c</sourcefile>
      <sourceline>147</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00150</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>303</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>816</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SduMng.c_163</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SduMng.c</sourcefile>
      <sourceline>163</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00150.E_UNINIT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>392</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>817</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SduMng.c_169</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SduMng.c</sourcefile>
      <sourceline>169</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00150.E_INVALID_PDU_SDU_ID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>393</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>818</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SduMng.c_186</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SduMng.c</sourcefile>
      <sourceline>186</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00229</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>304</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00226</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>225</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>819</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SduMng.c_203</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SduMng.c</sourcefile>
      <sourceline>203</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00229.E_UNINIT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>396</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>820</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SduMng.c_209</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SduMng.c</sourcefile>
      <sourceline>209</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00229.E_INVALID_PDU_SDU_ID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>397</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>821</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SduMng.c_239</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SduMng.c</sourcefile>
      <sourceline>239</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASRR20-11.SWS_FrArTp_00219.PduR_FrArTpStartOfReception</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>315</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>822</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SduMng.c_253</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SduMng.c</sourcefile>
      <sourceline>253</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>253</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00114</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>272</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASRR20-11.SWS_FrArTp_00219.PduR_FrArTpCopyRxData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>312</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>823</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SduMng.c_269</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SduMng.c</sourcefile>
      <sourceline>269</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASRR20-11.SWS_FrArTp_00219.PduR_FrArTpRxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>314</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>824</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SduMng.c_285</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SduMng.c</sourcefile>
      <sourceline>285</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASRR20-11.SWS_FrArTp_00219.PduR_FrArTpCopyTxData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>313</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>825</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SduMng.c_299</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SduMng.c</sourcefile>
      <sourceline>299</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASRR20-11.SWS_FrArTp_00219.PduR_FrArTpTxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>316</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>826</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SduMng.c_303</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SduMng.c</sourcefile>
      <sourceline>303</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00151</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>305</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>827</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SduMng.c_321</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SduMng.c</sourcefile>
      <sourceline>321</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00151.E_UNINIT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>398</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>828</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SduMng.c_326</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SduMng.c</sourcefile>
      <sourceline>326</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00151.E_INVALID_PDU_SDU_ID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>399</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>829</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SduMng.c_332</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SduMng.c</sourcefile>
      <sourceline>332</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FrArTp_ChangeParameter.E_INVALID_PARAMETER.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>385</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>830</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SduMng.c_337</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SduMng.c</sourcefile>
      <sourceline>337</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FrArTp_ChangeParameter.E_INVALID_PARAMETER.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>384</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>831</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/FrArTp_SduMng.c_342</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/src/FrArTp_SduMng.c</sourcefile>
      <sourceline>342</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FrArTp_ChangeParameter.E_INVALID_PARAMETER.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>383</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>832</internalId></specobject>
  </specobjects>
    <specobjects doctype="src">
    <specobject>
      <id>src/Autosar/config/FrArTp.xdm.m4_174</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/config/FrArTp.xdm.m4</sourcefile>
      <sourceline>174</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.PBCFGM108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>530</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>833</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/FrArTp.xdm.m4_786</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/src/Autosar/config/FrArTp.xdm.m4</sourcefile>
      <sourceline>786</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00277</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>374</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>834</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_FrArTp_DBGINST_001</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/build/reqm/common_req/FrArTp_DbgInst_Trace_APIs.c</sourcefile>
      <sourceline>40</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
   Test Dbg
&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 
  VP: Successful compilation test.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.DBGINST001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>519</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.DBGINST002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>520</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.DBGINST003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>521</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.DBGINST004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>522</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.DBGINST005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>523</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>835</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>FrArTp_Test_IsValidConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/build/reqm/common_req/FrArTp_PbcfgM_Main_Impl_Test.c</sourcefile>
      <sourceline>71</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that the function FrArTp_IsValidConfig() is implemented as specified.
  
Test Object: 
    FrArTp_IsValidConfig()
  
Test Precondition: 
    The FrArTp module is not initialized.
  
Test Execution: 
    01: Call the function FrArTp_IsValidConfig() with an NULL_PTR.
    02: VP:
        The function must have returned with E_NOT_OK.
    03: Create an invalid configuration regarding the endianness and alignment.
    04: Call the function FrArTp_IsValidConfig() with this invalid configuration.
    05: VP(FrArTp.EB.PBCFGM106):
        The function must have returned with E_NOT_OK.
    The following 3 steps are only executed if the module has a link-time configuration:
        06: Create an invalid configuration regarding the link time configuration.
        07: Call the function FrArTp_IsValidConfig() with this invalid configuration.
        08: VP(FrArTp.EB.PBCFGM105):
                The function must have returned with E_NOT_OK.
    09: Create an invalid configuration regarding the compile time configuration.
    10: Call the function FrArTp_IsValidConfig() with this invalid configuration.
    11: VP(FrArTp.EB.PBCFGM104):
        The function must have returned with E_NOT_OK.
    12: Create an invalid configuration regarding the published information configuration.
    13: Call the function FrArTp_IsValidConfig() with this invalid configuration.
    14: VP(FrArTp.EB.PBCFGM104_1):
        The function must have returned with E_NOT_OK.
    15: Call the function FrArTp_IsValidConfig() with a valid configuration.
    16: VP:
        The function must have returned with E_OK.
    17: VP(FrArTp.EB.PBCFGM107):
        Check if FRARTP_PBCFGM_SUPPORT_ENABLED is set to STD_ON.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.PBCFGM101</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>524</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.PBCFGM102</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>525</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.PBCFGM104</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>526</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.PBCFGM104_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>527</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.PBCFGM106</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>528</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.PBCFGM107</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>529</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>836</internalId></specobject>
    <specobject>
      <id>FrArTp_Test_VerifyInitWithPcfgM</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/build/reqm/common_req/FrArTp_PbcfgM_Main_Impl_Test.c</sourcefile>
      <sourceline>203</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that the FrArTp can be initialized via the PbcfgM.
  
Test Object: 
    FrArTp_IsValidConfig()
  
Test Precondition: 
    The FrArTp module must not have been initialized.
  
Test Execution: 
    01: Create an invalid configuration regarding the endianness and alignment.
    02: Call the function FrArTp_Init() with this invalid configuration.
    03: VP:
        A Det call must have been performed correctly.
    04: Create an invalid configuration regarding the compile time configuration.
    05: Call the function FrArTp_Init() with this invalid configuration.
    06: VP:
        A Det call must have been performed correctly.
    The following 3 steps are only executed if the module has a link-time configuration:
        07: Create an invalid configuration regarding the link time configuration.
        08: Call the function FrArTp_Init() with this invalid configuration.
        09: VP:
            A Det call must have been performed correctly.
    10: Create an invalid configuration regarding the published information configuration.
    11: Call the function FrArTp_Init() with this invalid configuration.
    12: VP:
        A Det call must have been performed correctly.
    13: Initialize the PbcfgM_GetConfig() stub that way that it can return a valid function.
    14: Call the function FrArTp_Init() with a null pointer.
    15: VP:
        The function PbcfgM_GetConfig() must have been called once.
    16: VP:
        No Det call must have been performed.
    17: VP:
        The module internal configuration pointer FrArTp_RootPtr must equal
        the pointer supplied to the initialization function
    18: PbcfgM_GetConfig shall return E_NOT_OK.
        set the configuration pointer which is returned to NULL_PTR
    19: Call FrArTp_Init with NULL_PTR.
    20: VP(FrArTp.EB.PBCFGM110):
        Check if Det error is reported.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.PBCFGM110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>531</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>837</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>FrArTp_Test_PBcfgM_Off</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/build/reqm/common_req/FrArTp_PbcfgM_Off_Compile_Test.c</sourcefile>
      <sourceline>26</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      Verify that if PbcfgM support is disabled then FrArTp_PBCfg.c shall define
      TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME.
      FRARTP_PBCFGM_SUPPORT_ENABLED shall be set to STD_OFF.
      FRARTP_RELOCATABLE_CFG_ENABLE shall be set to STD_OFF.
    
Test Object: None.
Test Precondition: 
      - PbcfgM configuration does not refer to module FrArTp (or no config exists)
      - Include FrArTp_PBcfg.c only for step 01 and 02.
      - Include FrArTp_Cfg.h for step 03.
    
Test Execution: 
        01: VP(FrArTp.EB.PbcfgM_General_6):
            Check that symbols TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME exists.
        02: VP(FrArTp.EB.PbcfgM_General_6):
            Check that symbols TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME has the value
            FrArTp_ConfigLayoutType and FRARTP_CONFIG_NAME respectively.
        03: VP (FrArTp.EB.PBCFGM107):
            Verify that FRARTP_PBCFGM_SUPPORT_ENABLED is set to STD_OFF.
        04: VP(FrArTp.EB.PBCFGM108, FrArTp.EB.RelocatablePBCfg):
            FRARTP_RELOCATABLE_CFG_ENABLE shall be STD_OFF
    
Test Input: 
    
Test Output: 
    &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.PbcfgM_General_6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>534</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.PBCFGM107</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>529</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.PBCFGM108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>530</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.RelocatablePBCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>381</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>838</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>FrArTp_Test_PBcfgM_On</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/build/reqm/common_req/FrArTp_PbcfgM_On_Compile_Test.c</sourcefile>
      <sourceline>24</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
      1.)
      Verify that FRARTP_RELOCATABLE_CFG_ENABLE is defined
      in the header file FrArTp_Cfg.h.
      2.)
      Verify that if PbcfgM support is enabled then FrArTp_PBCfg.c shall NOT define
      TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME.
    
Test Object: None.
Test Precondition: 
        - FRARTP_PBCFGM_SUPPORT_ENABLED = STD_ON
    
Test Execution: 
        ------------------------ 1.) ---------------------
        01: VP (FrArTp.EB.PbcfgM_General_3,
                FrArTp.EB.PBCFGM108,
                FrArTp.EB.RelocatablePBCfg):
            Verify that FRARTP_RELOCATABLE_CFG_ENABLE is set to STD_ON.
        ------------------------ 2.) ---------------------
        02: Include FrArTp_PBcfg.c.
        03: VP(FrArTp.EB.PbcfgM_General_6):
            Check that symbols TS_PB_CFG_LAYOUT_TYPE and TS_PB_CFG_NAME exist.
    
Test Input: 
        None.
    
Test Output: 
        Binary file.
    &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.PbcfgM_General_3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>533</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.PbcfgM_General_6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>534</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.PBCFGM108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>530</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.RelocatablePBCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>381</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>839</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_FrArTp_VerifyCodeStub</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/build/reqm/common_req/FrArTp_VerifyStub_testspec.h</sourcefile>
      <sourceline>7</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that the code stub of the module is consistent with the
    implementation.
  
Test Object: 
    Relocatable post-build configuration macros generation.
  
Test Precondition: 
    Permutation [VerifyStub == true]:
      - Unit test contains its own code stub
      - Module is excluded from generation and compilation
    Permutation [VerifyStub == false]:
      - unit test excludes its own code stub
  
Test Execution: 
    01: Invoke all module APIs
    02: VP(FrArTp.EB.Interface.Consistency):
        Unit test compiles (implicitly tested)
  
Test Input: 
  
Test Output: 
    Test is correctly generated and compiled.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.Interface.Consistency</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>536</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>840</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_FRARTP_COMTEST_002_ONLY_MANDATORY_INTERFACES</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Compile/IN/FrArTp_ComTest_002/source/application/FrArTp_ComTest_002.c</sourcefile>
      <sourceline>35</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test checks if the module compiles with only the mandatory external interfaces available.
  
Test Object: 
    Module compilation
  
Test Precondition: 
    - Development error detection (DET) is disabled.
    - Relocatable Postbuild configuration disabled.
    - Stubs are configured to export the minimum number of required API functions, i.e.:
      PduR: PduR_FrArTpRxIndication, PduR_FrArTpStartOfReception, PduR_FrArTpCopyRxData,
            PduR_FrArTpCopyTxData, PduR_FrArTpTxConfirmation
      FrIf: FrIf_Transmit
      Det: no DET Stub provided at all
      LLR: Low Level Routing headers are included only if Low Level Routing is supported
  
Test Execution: 
    01: Call all API functions
    02: VP (implicit):
        There are no compiler errors
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASRR20-11.SWS_FrArTp_00219.FrIf_Transmit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>311</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASRR20-11.SWS_FrArTp_00219.PduR_FrArTpCopyRxData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>312</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASRR20-11.SWS_FrArTp_00219.PduR_FrArTpCopyTxData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>313</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASRR20-11.SWS_FrArTp_00219.PduR_FrArTpRxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>314</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASRR20-11.SWS_FrArTp_00219.PduR_FrArTpStartOfReception</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>315</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASRR20-11.SWS_FrArTp_00219.PduR_FrArTpTxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>316</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00220.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>318</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_065</linksto>
          <dstversion>1.1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>487</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>841</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>FrArTp_ComTest_HandleIdGenerator</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Compile/IN/FrArTp_ComTest_HandleIdGenerator/source/application/FrArTp_ComTest_HandleIdGenerator.c</sourcefile>
      <sourceline>32</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test checks that invoking the handle ID autocalc wizard creates a valid configuration (i.e.
  a configuration adhering to the constraints of the module's generator, e.g., zero-based, dense,
  and unique) out of an invalid configuration (i.e., a configuration violating the constraints of
  the module's generator.

Test Object: None.
Test Precondition: None.
Test Execution: None.
Test Input: 
  Configuration with deliberately wrong handle IDs.

Test Output: 
  Binary file.
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.HandleIdGenerator</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>452</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>842</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>TS_FRARTP_COMTEST_NoPbCfg</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Compile/IN/FrArTp_ComTest_NoPbCfg/source/application/Test.c</sourcefile>
      <sourceline>34</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
    This test shall prove that that the FrArTp also compiles without any post build information
&lt;/para&gt;

Test Object: None.
Test Precondition: 
    * The merged make file holds a rule which removes all post build files after generation

Test Execution: 
    The test run is successful when the FrArTp compiles under sticking to the precondition.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.PostBuild_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>532</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>843</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>FrArTp_GenTest01001_Err_PduLengthInvalid</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Compile/IN/FrArTp_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>29</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test shall verify that the generator issues an error in case the PDU length of N-PDUs does
  not correspond to the limits set by the specification.
&lt;/para&gt;

Test Object: FrArTp XDM checks.
Test Precondition: Base configuration generation is successful.
Test Execution: 
  01: Start generator with invalid configuration.
  02: VP: The generator aborts generation and prints the expected error message.

Test Input: Invalid configuration.
Test Output: Unsuccessful generation with expected error message.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FFI.FRAME_LENGTH.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>424</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.SFE.FRAME_LENGTH.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>418</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.SFE.FRAME_LENGTH.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>419</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.FFE.FRAME_LENGTH.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>421</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.FFE.FRAME_LENGTH.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>422</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>844</internalId></specobject>
    <specobject>
      <id>FrArTp_GenTest01002_Err_AddressesNotUnique</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Compile/IN/FrArTp_GenTest_01_InvalidConfiguration/source/application/testspec.h</sourcefile>
      <sourceline>54</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test shall verify that the generator issues an error in case two or more connections using
  the same Tx or Rx PDU pool have the same or reversed address pair (local and remote) configured.
&lt;/para&gt;

Test Object: FrArTp XDM checks.
Test Precondition: Base configuration generation is successful.
Test Execution: 
  01: Start generator with invalid configuration.
  02: VP: The generator aborts generation and prints the expected error message.

Test Input: Invalid configuration.
Test Output: Unsuccessful generation with expected error message.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00277</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>374</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>845</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>FrArTp_Conformance_1_CancelReceive_InactiveConnection</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>9</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test calling FrArTp_CancelReceive on inactive connection, using 1 and 2 Byte addressing on ISO and L4G channels.
Test Object: Software
Test Precondition: 
    -   Set appropriate test values to induce wanted transmission.
    -   Initialize module.
    -   Clean up function trace.
  
Test Execution: 
    01: Iterate the test case for active and inactive transmissions
    02: Iterate the test case for multiple connections (ISO/L4G, one/two byte addressing
    03: If applicable to the iteration start a transmission request.
    04: Sanity check - The transmission request succeeded.
    05: PduR calls FrArTp_CancelReceive without pending receive request.
    06: VP(FrArTp.ASR42.SWS_FrArTp_00227.1,1) FrArTp_CancelReceive shall return E_NOT_OK.
    07: Sanity check - No additional function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00227.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>227</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>846</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_CancelReceive_AfterFF</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>35</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test calling FrArTp_CancelReceive after receiving FF, using 1 and 2 Byte addressing on ISO and L4G channels.
Test Object: Software
Test Precondition: 
    -   Set appropriate test values to induce wanted transmission.
    -   Initialize module.
    -   Clean up function trace.
  
Test Execution: 
    01: Receive First Frame.
    02: PduR calls FrArTp_CancelReceive on currently active connection.
    03: VP(FrArTp.ASR42.SWS_FrArTp_00226,1) 1/2: FrArTp_CancelReceive shall return E_OK.
    04: VP(FrArTp.ASR42.SWS_FrArTp_00228,1) FrArTp shall call the PduR_FrArTpRxIndication with E_NOT_OK.
    05: Try to transmit FC to FrIf.
    06: VP(FrArTp.ASR42.SWS_FrArTp_00226,1) 2/2: No additional function shall be called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00226</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>225</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00228</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>847</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_CancelReceive_AfterFC</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>64</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test calling FrArTp_CancelReceive after sending FC, using 1 and 2 Byte addressing on ISO and L4G channels.
Test Object: Software
Test Precondition: 
    -   Set appropriate test values to induce wanted transmission.
    -   Initialize module.
    -   Clean up function trace.
  
Test Execution: 
    01: Iterate the test case complete and partial flow control transmissions
    02: Iterate the test case for active and inactive transmissions
    03: If applicable to the iteration start a transmission request.
    04: Sanity check - The transmission request succeeded.
    05: Receive First Frame.
    06: FrArTp transmits FC.
    07: PduR calls FrArTp_CancelReceive on currently active connection.
    08: VP(FrArTp.ASR42.SWS_FrArTp_00226,1) 1/2: FrArTp_CancelReceive shall return E_OK.
    09: VP(FrArTp.ASR42.SWS_FrArTp_00228,1) FrArTp shall call the PduR_FrArTpRxIndication with E_NOT_OK.
    10: If the FC frame is partially transmitted in this iteration, try to trigger its transmission
    11: Sanity check - FrArTp_TriggerTransmit() fails.
    12: Try to receive a CF from FrIf.
    13: Sanity check - Corresponding Low Level Routing function has been called.
    14: VP(FrArTp.ASR42.SWS_FrArTp_00226,1) 2/2: No additional function shall be called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00226</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>225</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00228</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>848</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_CancelReceive_AfterCF</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>101</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test calling FrArTp_CancelReceive after receiving CF, using 1 and 2 Byte addressing on ISO and L4G channels.
Test Object: Software
Test Precondition: 
    -   Set appropriate test values to induce wanted transmission.
    -   Initialize module.
    -   Clean up function trace.
  
Test Execution: 
    01: Receive First Frame.
    02: Send FC to FrIf.
    03: Receive a CF from FrIf.
    04: PduR calls FrArTp_CancelReceive on currently active connection.
    05: Try to receive another CF from FrIf.
    06: VP(FrArTp.ASR42.SWS_FrArTp_00226,1) 1/2: FrArTp_CancelReceive shall return E_OK.
    07: VP(FrArTp.ASR42.SWS_FrArTp_00228,1) FrArTp shall call the PduR_FrArTpRxIndication with E_NOT_OK.
    08: Sanity check - Corresponding Low Level Routing function has been called.
    09: VP(FrArTp.ASR42.SWS_FrArTp_00226,1) 2/2: No additional function shall be called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00226</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>225</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00228</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>849</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_CancelReceive_AfterLastFrame</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>133</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test calling FrArTp_CancelReceive after receiving last frame, using 1 and 2 Byte addressing on ISO and L4G channels.
Test Object: Software
Test Precondition: 
    -   Set appropriate test values to induce wanted transmission.
    -   Initialize module.
    -   Clean up function trace.
  
Test Execution: 
    01: Receive First Frame.
    02: Send FC to FrIf.
    03: Receive the last CF from FrIf.
    04: Sanity check - FrArTp shall call PduR_FrArTpRxIndication with result E_OK.
    05: PduR calls FrArTp_CancelReceive on after last frame has been received.
    06: VP(FrArTp.ASR42.SWS_FrArTp_00227.2,1) The FrArTp shall reject the request for receive cancellation by returning E_NOT_OK.
    07: Sanity check - No additional function call has been made.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00227.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>228</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>850</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_CancelTransmit_InactiveConnection</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>165</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: Test if the module fails to cancel the transmission on inactive connection.
Test Object: Software
Test Precondition: 
    -   Clean up function trace.
    -   Initialize module.
  
Test Execution: 
    01: PduR calls FrArTp_CancelTransmit without pending transmit request.
    02: VP(FrArTp.ASR42.SWS_FrArTp_00236.2,1) FrArTp_CancelTransmit shall return E_NOT_OK.
    03: VP(FrArTp.ASR42.SWS_FrArTp_00279,1) No additional function has been called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00236.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00279</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>851</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_CancelTransmit_AfterCopyTxData</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>190</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: Test if the module succeeds in canceling transmission when in state TXSTATE_WAITPDU.
Test Object: Software
Test Precondition: 
    -   Clean up function trace.
    -   Initialize module.
    -   Initialize frame buffer.
    -   Set appropriate test values to induce wanted transmission.
    -   Flush the function trace.
  
Test Execution: 
    01: Set module state from TXSTATE_IDLE to TXSTATE_WAITPDU.
    02: FrArTp calls FrArTp_MainFunction.
    03: Sanity check - FrArTp_MainFunction shall call PduR_FrArTpCopyTxData.
    04: PduR calls FrArTp_CancelTransmit without pending transmit request.
    05: VP(FrArTp.ASR42.SWS_FrArTp_00236.1,1) FrArTp_CancelTransmit shall return E_OK.
    06: VP(FrArTp.ASR42.SWS_FrArTp_00273,1) FrArTp shall call PduR_FrArTpTxConfirmation.
    07: Try to set module state to TXSTATE_TXPENDING.
    08: VP(FrArTp.ASR42.SWS_FrArTp_00279,1) No additional function has been called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00236.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00273</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00279</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>852</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_CancelTransmit_TxRequestPending</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>227</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test if the module:
Test Object: Software
Test Precondition: 
    -   Clean up function trace.
    -   Initialize module.
    -   Initialize frame buffer.
    -   Set appropriate test values to induce wanted transmission.
  
Test Execution: 
    01: Set module to TXPENDING state.
    02: PduR calls FrArTp_CancelTransmit.
    03: VP(FrArTp.ASR42.SWS_FrArTp_00236.1,1) FrArTp_CancelTransmit shall return E_OK.
    04: VP(FrArTp.ASR42.SWS_FrArTp_00273,1) FrArTp shall call PduR_FrArTpTxConfirmation.
    05: VP(FrArTp.ASR42.SWS_FrArTp_00103,1) PduR_FrArTpTxConfirmation shall be called with E_NOT_OK.
    06: FrIf calls FrArTp_TriggerTransmit.
    07: VP(FrArTp.ASR42.SWS_FrArTp_00274.2,1) FrArTp_TriggerTransmit shall return E_NOT_OK.
    08: Sanity check - Corresponding Low Level Routing function has been called.
    09: VP(FrArTp.ASR42.SWS_FrArTp_00236.1,1) Transmission shall be stopped.
    10: FrIf calls FrArTp_TxConfirmation.
    11: Sanity check - Corresponding Low Level Routing Function has been called.
    12: Set module to TXPENDING state.
    13: FrIf calls FrArTp_TriggerTransmit.
    14: VP(FrArTp.ASR42.SWS_FrArTp_00273,1) FrArTp shall free the connection.
    15: Sanity check - Corresponding Low Level Routing function has been called.
    16: VP(FrArTp.EB.TransmitAfterCancelTransmit,1) New transmission shall be processed (FrArTp_TriggerTransmit shall call PduR_FrArTpCopyTxData).
    17: FrIf calls FrArTp_TxConfirmation.
    18: Sanity check - Corresponding Low Level Routing function has been called.
    19: Sanity check - FrArTp_TxConfirmation shall call PduR_FrArTpTxConfirmation with correct parameters:
    20: PduR calls FrArTp_CancelTransmit.
    21: VP(FrArTp.ASR42.SWS_FrArTp_00236.3,1) FrArTp_CancelTransmit shall return E_NOT_OK.
    22: Sanity check - No additional function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00236.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00273</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00103</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>223</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00274.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.TransmitAfterCancelTransmit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>447</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00236.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>217</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>853</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_CancelTransmit_StartedTransmission</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>289</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test if the connection can be used again after an already started transmission has been canceled, but not confirmed.
Test Object: Software
Test Precondition: 
    -   Clean up function trace.
    -   Initialize module.
    -   Initialize frame buffers.
    -   Set appropriate test values to induce wanted transmission.
  
Test Execution: 
    01: Set module to TXPENDING state.
    02: FrIf calls FrArTp_TriggerTransmit, FrArTp sends FF to FrIf.
    03: FrArTp shall call FrArTp_MainFunction.
    04: Receive FC from FrIf.
    05: FrArTp shall call FrArTp_MainFunction.
    06: Sanity check - FrArTp_MainFunction shall call corresponding Low Level Routing function and FrIf_Transmit.
    07: PduR calls FrArTp_CancelTransmit.
    08: VP(FrArTp.ASR42.SWS_FrArTp_00274.1,1) 1/3: FrArTp shall immediately call PduR_FrArTpTxConfirmation with result E_NOT_OK.
    09: VP(FrArTp.ASR42.SWS_FrArTp_00103,1) PduR_FrArTpTxConfirmation shall be called with E_NOT_OK.
    10: Try to transmit a new message on the same connection.
    11: VP(FrArTp.ASR42.SWS_FrArTp_00274.1,1) 2/3: N-PDU that has already been allocated for this connection cannot be used again before it has been confirmed.
    12: FrIf calls FrArTp_TxConfirmation.
    13: Sanity check - Corresponding Low Level Routing function has been called.
    14: Try to transmit a new message on the same connection.
    15: VP(FrArTp.ASR42.SWS_FrArTp_00274.1,1) 3/3: N-PDU that has already been allocated for this connection can only be used when again after it has been confirmed.
    16: Sanity check - No additional function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00274.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00103</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>223</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>854</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Det01_GetVersionInfo_InvalidParam</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>335</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test calling of Det when FrArTp_GetVersionInfo() is called with an invalid parameter versioninfo.
Test Object: Software
Test Precondition: 
    -   Clean up function trace.
  
Test Execution: 
    01: Call FrArTp_GetVersionInfo() and pass NULL_PTR as parameter versioninfo.
    02: VP(FrArTp.EB.ASR42.SWS_FrArTp_00215.E_PARAM_POINTER,1) FrArTp_GetVersionInfo() shall call Det_ReportError() with error code FRARTP_E_PARAM_POINTER for module FrArTp.
    03: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00215.E_PARAM_POINTER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>386</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>855</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Det02_FrArTp_Init_InvalidParam</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>355</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test calling of Det when FrArTp_Init() is called with an invalid parameter.
Test Object: Software
Test Precondition: 
    -   Clean up function trace.
  
Test Execution: 
    01: Call FrArTp_Init() and pass NULL_PTR as parameter configPtr.
    02: VP(FrArTp.EB.ASR42.SWS_FrArTp_00147.FRARTP_E_PARAM_POINTER,1) FrArTp_Init() shall call Det_ReportError() with error code FRARTP_E_PARAM_POINTER for module FrArTp.
    03: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00147.FRARTP_E_PARAM_POINTER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>387</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>856</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Det02_FrArTp_Init_InvalidSignature</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>375</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test calling of Det when FrArTp_Init() is called with a configuration with invalid signatures.
Test Object: Software
Test Precondition: 
    -   Copy FrArTpChannel into testConfig.
    -   Clean up function trace.
  
Test Execution: 
    01: Iterate through all combinations of invalid signatures.
    02: Call module initialization with one or more invalid signatures.
    03: VP(FrArTp.EB.ASR42.SWS_FrArTp_00147.FRARTP_E_INVALID_PARAMETER,1) FrArTp_Init() shall call Det_ReportError() with error code FRARTP_E_INVALID_PARAMETER for module FrArTp.
    04: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00147.FRARTP_E_INVALID_PARAMETER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>388</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>857</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Det03_Uninit_FrArTp_Transmit</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>397</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test verifies that FrArTp_Transmit(), will report FRARTP_E_UNINIT if called in uninitialized state.
Test Object: Software
Test Precondition: 
    -   Clean up function trace.
  
Test Execution: 
    01: Call FrArTp_Transmit() and pass valid parameters.
    02: VP(FrArTp.EB.ASR42.SWS_FrArTp_00149.E_UNINIT,1) FrArTp_Transmit() shall call Det_ReportError() with error code FRARTP_E_UNINIT for module FrArTp.
    03: VP(FrArTp.EB.ASR42.SWS_FrArTp_00149.E_UNINIT,1) FrArTp_Transmit() return value is E_NOT_OK.
    04: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00149.E_UNINIT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>389</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>858</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Det03_Uninit_FrArTp_CancelTransmit</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>418</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test verifies that FrArTp_CancelTransmit(), will report FRARTP_E_UNINIT if called in uninitialized state.
Test Object: Software
Test Precondition: 
    -   Clean up function trace.
  
Test Execution: 
    01: Call FrArTp_CancelTransmit() and pass valid parameters.
    02: VP(FrArTp.EB.ASR42.SWS_FrArTp_00150.E_UNINIT,1) FrArTp_CancelTransmit() shall call Det_ReportError() with error code FRARTP_E_UNINIT for module FrArTp.
    03: VP(FrArTp.EB.ASR42.SWS_FrArTp_00150.E_UNINIT,1) FrArTp_CancelTransmit() return value is E_NOT_OK.
    04: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00150.E_UNINIT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>392</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>859</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Det03_Uninit_FrArTp_CancelReceive</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>439</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test verifies that FrArTp_CancelReceive(), will report FRARTP_E_UNINIT if called in uninitialized state.
Test Object: Software
Test Precondition: 
    -   Clean up function trace.
  
Test Execution: 
    01: Call FrArTp_CancelReceive() and pass valid parameters.
    02: VP(FrArTp.EB.ASR42.SWS_FrArTp_00229.E_UNINIT,1) FrArTp_CancelReceive() shall call Det_ReportError() with error code FRARTP_E_UNINIT for module FrArTp.
    03: VP(FrArTp.EB.ASR42.SWS_FrArTp_00229.E_UNINIT,1) FrArTp_Transmit() return value is E_NOT_OK.
    04: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00229.E_UNINIT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>396</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>860</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Det03_Uninit_FrArTp_ChangeParameter</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>460</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test verifies that FrArTp_ChangeParameter(), will report FRARTP_E_UNINIT if called in uninitialized state.
Test Object: Software
Test Precondition: 
    -   Clean up function trace.
  
Test Execution: 
    01: Call FrArTp_ChangeParameter() and pass valid parameters.
    02: VP(FrArTp.EB.ASR42.SWS_FrArTp_00151.E_UNINIT,1) FrArTp_ChangeParameter() shall call Det_ReportError() with error code FRARTP_E_UNINIT for module FrArTp.
    03: VP(FrArTp.EB.ASR42.SWS_FrArTp_00151.E_UNINIT,1) FrArTp_ChangeParameter() return value is E_NOT_OK.
    04: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00151.E_UNINIT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>398</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>861</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Det03_Uninit_FrArTp_TriggerTransmit</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>481</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test verifies that FrArTp_TriggerTransmit(), will report FRARTP_E_UNINIT if called in uninitialized state.
Test Object: Software
Test Precondition: 
    -   Clean up function trace.
  
Test Execution: 
    01: Call FrArTp_TriggerTransmit() and pass valid parameters.
    02: VP(FrArTp.VAG.AUDI_ASR_FrTP_044,1) FrArTp_TriggerTransmit shall call corresponding Low Level Routing function.
    03: VP(FrArTp.EB.ASR42.SWS_FrArTp_00154.E_UNINIT,1) FrArTp_TriggerTransmit() shall call Det_ReportError() with error code FRARTP_E_UNINIT for module FrArTp.
    04: VP(FrArTp.EB.ASR42.SWS_FrArTp_00154.E_UNINIT,1) FrArTp_TriggerTransmit() return value is E_NOT_OK.
    05: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_044</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>464</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00154.E_UNINIT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>400</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>862</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Det03_Uninit_FrArTp_RxIndication</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>507</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test verifies that FrArTp_RxIndication(), will report FRARTP_E_UNINIT if called in uninitialized state.
Test Object: Software
Test Precondition: 
    -   Clean up function trace.
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass valid parameters.
    02: VP(FrArTp.VAG.AUDI_ASR_FrTP_054,1) If low level routing is activated, FrArTp_RxIndication() shall call &amp;lt;prefix&amp;gt;LLR_FrIf_FrTp_RxIndication() immediately after being called, even before parameter and other (e.g. init) checks.
    03: VP(FrArTp.EB.ASR42.SWS_FrArTp_00152.E_UNINIT,1) FrArTp_RxIndication() shall call Det_ReportError() with error code FRARTP_E_UNINIT for module FrArTp.
    04: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_054</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>474</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00152.E_UNINIT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>403</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>863</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Det03_Uninit_FrArTp_TxConfirmation</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>532</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test verifies that FrArTp_TxConfirmation(), will report FRARTP_E_UNINIT if called in uninitialized state.
Test Object: Software
Test Precondition: 
    -   Clean up function trace.
  
Test Execution: 
    01: Call FrArTp_TxConfirmation() and pass valid parameters.
    02: VP(FrArTp.VAG.AUDI_ASR_FrTP_049,1) If low level routing is activated, FrArTp_RxIndication() shall call &amp;lt;prefix&amp;gt;LLR_FrIf_FrTp_TxConfirmation() immediately after being called, even before parameter and other (e.g. init) checks.
    03: VP(FrArTp.EB.ASR42.SWS_FrArTp_00153.E_UNINIT,1) FrArTp_RxIndication() shall call Det_ReportError() with error code FRARTP_E_UNINIT for module FrArTp.
    04: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_049</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>469</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00153.E_UNINIT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>407</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>864</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Det04_FrArTp_Transmit_InvalidFrArTpTxSduId</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>557</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test calling of Det when FrArTp_Transmit() is called with an invalid parameter FrArTpTxSduId.
Test Object: Software
Test Precondition: 
    -   Clean up function trace.
    -   Initialize module.
  
Test Execution: 
    01: Call FrArTp_Transmit() and pass an invalid parameter FrArTpTxSduId.
    02: VP(FrArTp.EB.ASR42.SWS_FrArTp_00149.E_INVALID_PDU_SDU_ID,1) FrArTp_Transmit() shall call Det_ReportError() with error code FRARTP_E_INVALID_PDU_SDU_ID for module FrArTp.
    03: VP(FrArTp.EB.ASR42.SWS_FrArTp_00149.E_INVALID_PDU_SDU_ID,1) FrArTp_Transmit() return value is E_NOT_OK.
    04: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00149.E_INVALID_PDU_SDU_ID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>390</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>865</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Det04_FrArTp_Transmit_InvalidFrArTpTxSduInfoPtr</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>579</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test calling of Det when FrArTp_Transmit() is called with an invalid parameter FrArTpTxSduInfoPtr.
Test Object: Software
Test Precondition: 
    -   Clean up function trace.
    -   Initialize module.
  
Test Execution: 
    01: Call FrArTp_Transmit() and pass an invalid parameter FrArTpTxSduInfoPtr.
    02: VP(FrArTp.EB.ASR42.SWS_FrArTp_00149.E_PARAM_POINTER,1) FrArTp_Transmit() shall call Det_ReportError() with error code FRARTP_E_PARAM_POINTER for module FrArTp.
    03: VP(FrArTp.EB.ASR42.SWS_FrArTp_00149.E_PARAM_POINTER,1) FrArTp_Transmit() return value is E_NOT_OK.
    04: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00149.E_PARAM_POINTER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>391</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>866</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Det05_FrArTp_CancelTransmit_InvalidParam</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>601</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test calling of Det when FrArTp_CancelTransmit() is called with an invalid parameter FrArTpTxSduId.
Test Object: Software
Test Precondition: 
    -   Clean up function trace.
    -   Initialize module.
  
Test Execution: 
    01: Call FrArTp_CancelTransmit() and pass an invalid parameter FrArTpTxSduId.
    02: VP(FrArTp.EB.ASR42.SWS_FrArTp_00150.E_INVALID_PDU_SDU_ID,1) FrArTp_CancelTransmit() shall call Det_ReportError() with error code FRARTP_E_INVALID_PDU_SDU_ID for module FrArTp.
    03: VP(FrArTp.EB.ASR42.SWS_FrArTp_00150.E_INVALID_PDU_SDU_ID,1) FrArTp_CancelTransmit() return value is E_NOT_OK.
    04: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00150.E_INVALID_PDU_SDU_ID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>393</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>867</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Det06_FrArTp_CancelReceive_InvalidParam</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>623</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test calling of Det when FrArTp_CancelReceive() is called with an invalid parameter FrArTpRxSduId.
Test Object: Software
Test Precondition: 
    -   Clean up function trace.
    -   Initialize module
  
Test Execution: 
    01: Call FrArTp_CancelReceive() and pass an invalid parameter FrArTpRxSduId.
    02: VP(FrArTp.EB.ASR42.SWS_FrArTp_00229.E_INVALID_PDU_SDU_ID,1) FrArTp_CancelReceive() shall call Det_ReportError() with error code FRARTP_E_INVALID_PDU_SDU_ID for module FrArTp.
    03: VP(FrArTp.EB.ASR42.SWS_FrArTp_00229.E_INVALID_PDU_SDU_ID,1) FrArTp_CancelReceive() return value is E_NOT_OK.
    04: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00229.E_INVALID_PDU_SDU_ID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>397</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>868</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Det07_FrArTp_ChangeParameter_InvalidId</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>645</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test calling of Det when FrArTp_ChangeParameter() is called with an invalid parameter FrArTpTxRxSduId.
Test Object: Software
Test Precondition: 
    -   Clean up function trace.
    -   Initialize module.
  
Test Execution: 
    01: Call FrArTp_ChangeParameter() and pass an invalid parameter FrArTpTxRxSduId.
    02: VP(FrArTp.EB.ASR42.SWS_FrArTp_00151.E_INVALID_PDU_SDU_ID,1) FrArTp_ChangeParameter() shall call Det_ReportError() with error code FRARTP_E_INVALID_PDU_SDU_ID for module FrArTp.
    03: VP(FrArTp.EB.ASR42.SWS_FrArTp_00151.E_INVALID_PDU_SDU_ID,1) FrArTp_ChangeParameter() return value is E_NOT_OK.
    04: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00151.E_INVALID_PDU_SDU_ID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>399</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>869</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Det07_FrArTp_ChangeParameter_InvalidParam</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>667</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test calling of Det when FrArTp_ChangeParameter() is called with an invalid parameter.
Test Object: Software
Test Precondition: 
    -   Clean up function trace.
    -   Initialize module
  
Test Execution: 
    01: Call FrArTp_ChangeParameter() and pass an invalid parameter.
    02: VP(FrArTp.EB.FrArTp_ChangeParameter.E_INVALID_PARAMETER.3,1) FrArTp_ChangeParameter() shall call Det_ReportError() with error code FRARTP_E_INVALID_PARAMETER for module FrArTp and return E_NOT_OK.
    03: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FrArTp_ChangeParameter.E_INVALID_PARAMETER.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>385</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>870</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Det07_FrArTp_ChangeParameter_InvalidStminValue</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>688</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test calling of Det when FrArTp_ChangeParameter() is called with an invalid parameter STmin.
Test Object: Software
Test Precondition: 
    -   Clean up function trace.
    -   Initialize module.
  
Test Execution: 
    01: Call FrArTp_ChangeParameter() and pass invalid Stmin value.
    02: VP(FrArTp.EB.FrArTp_ChangeParameter.E_INVALID_PARAMETER.1,1)
        VP(FrArTp.EB.FrArTp_ChangeParameter.E_INVALID_PARAMETER.2,1) FrArTp_ChangeParameter() shall call Det_ReportError() with error code FRARTP_E_INVALID_PARAMETER for module FrArTp and return E_NOT_OK.
    03: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FrArTp_ChangeParameter.E_INVALID_PARAMETER.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>383</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.FrArTp_ChangeParameter.E_INVALID_PARAMETER.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>384</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>871</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Det07_FrArTp_ChangeParameter_InvalidBsValue</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>714</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test calling of Det when FrArTp_ChangeParameter() is called with a unsupported parameter values for block size.
Test Object: Software
Test Precondition: 
    -   Clean up function trace.
    -   Initialize module.
  
Test Execution: 
    01: Call FrArTp_ChangeParameter() and pass invalid Bs values as parameter.
    02: VP(FrArTp.EB.FrArTp_ChangeParameter.E_INVALID_PARAMETER.2,1) FrArTp_ChangeParameter() shall call Det_ReportError() with error code FRARTP_E_INVALID_PARAMETER for module FrArTp and return E_NOT_OK.
    03: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FrArTp_ChangeParameter.E_INVALID_PARAMETER.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>384</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>872</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Det08_FrArTp_RxIndication_InvalidFrArTpRxSduId</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>735</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test calling of Det when FrArTp_Transmit() is called with an invalid parameter FrArTpRxSduId.
Test Object: Software
Test Precondition: 
    -   Clean up function trace.
    -   Initialize module.
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass an invalid parameter FrArTpRxSduId.
    02: Sanity check - LLR RxIndication() shall be called with correct parameters.
    03: VP(FrArTp.EB.ASR42.SWS_FrArTp_00152.E_INVALID_PDU_SDU_ID,1) FrArTp_RxIndication() shall call Det_ReportError() with error code FRARTP_E_INVALID_PDU_SDU_ID for module FrArTp.
    04: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00152.E_INVALID_PDU_SDU_ID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>404</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>873</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Det09_FrArTp_RxIndication_InvalidFrArTpRxSduInfoPtr</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>757</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test calling of Det when FrArTp_RxIndication() is called with an invalid parameter FrArTpRxSduInfoPtr.
Test Object: Software
Test Precondition: 
    -   Clean up function trace.
    -   Initialize module.
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass an invalid parameter FrArTpRxSduInfoPtr.
    02: Sanity check - LLR RxIndication() shall be called with correct parameters.
    03: VP(FrArTp.EB.ASR42.SWS_FrArTp_00152.E_PARAM_POINTER,1) FrArTp_RxIndication() shall call Det_ReportError() with error code FRARTP_E_PARAM_POINTER for module FrArTp.
    04: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00152.E_PARAM_POINTER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>405</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>874</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Det10_FrArTp_TriggerTransmit_InvalidFrArTpTxSduId</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>779</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test calling of Det when FrArTp_TriggerTransmit() is called with an invalid parameter FrArTpTxSduId.
Test Object: Software
Test Precondition: 
    -   Clean up function trace.
    -   Initialize module.
  
Test Execution: 
    01: Call FrArTp_Transmit() and pass an invalid parameter FrArTpTxSduId.
    02: Sanity check - No unexpected Low-Level Routing function has been called.
    03: VP(FrArTp.EB.ASR42.SWS_FrArTp_00154.E_INVALID_PDU_SDU_ID,1) FrArTp_TriggerTransmit() shall call Det_ReportError() with error code FRARTP_E_INVALID_PDU_SDU_ID for module FrArTp.
    04: VP(FrArTp.EB.ASR42.SWS_FrArTp_00154.E_INVALID_PDU_SDU_ID,1) FrArTp_TriggerTransmit() return value is E_NOT_OK.
    05: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00154.E_INVALID_PDU_SDU_ID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>401</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>875</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Det10_FrArTp_TriggerTransmit_InvalidFrArTpRxSduInfoPtr</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>802</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test calling of Det when FrArTp_TriggerTransmit() is called with an invalid parameter FrArTpRxSduInfoPtr.
Test Object: Software
Test Precondition: 
    -   Clean up function trace.
    -   Initialize module.
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass an invalid parameter FrArTpRxSduInfoPtr.
    02: Sanity check - No unexpected Low-Level Routing function has been called.
    03: VP(FrArTp.EB.ASR42.SWS_FrArTp_00154.E_PARAM_POINTER,1) FrArTp_TriggerTransmit() shall call Det_ReportError() with error code FRARTP_E_PARAM_POINTER for module FrArTp.
    04: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00154.E_PARAM_POINTER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>402</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>876</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Det11_FrArTp_TxConfirmation_InvalidFrArTpRxSduId</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>824</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test calling of Det when FrArTp_TxConfirmation() is called with an invalid parameter FrArTpTxSduId.
Test Object: Software
Test Precondition: 
    -   Clean up function trace.
    -   Initialize module.
  
Test Execution: 
    01: Call FrArTp_TxConfirmation() and pass an invalid parameter FrArTpTxSduId.
    02: Sanity check - No unexpected function has been called
    03: VP(FrArTp.EB.ASR42.SWS_FrArTp_00153.E_INVALID_PDU_SDU_ID,1) : FrArTp_TxConfirmation() shall call Det_ReportError() with error code FRARTP_E_INVALID_PDU_SDU_ID for module FrArTp.
    04: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00153.E_INVALID_PDU_SDU_ID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>408</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>877</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Invalid_FctPtr_RxIndication</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>846</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test ISO compatible unsegmented reception with FRARTP_LOWLEVELROUTING_ENABLE = STD_ON, and return value of LLRPrafixLLR_FrIf_FrTp_RxIndication E_NOT_OK.
Test Object: Software
Test Precondition: 
    -   Clean up function trace.
    -   MyLLR_FrIf stub shall provide RetVal E_NOT_OK.
    -   Initialize module.
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass valid parameters.
    02: Sanity check - LLR RxIndication() shall be called with correct parameters.
    03: VP(FrArTp.VAG.AUDI_ASR_FrTP_057,1) FrArTp_RxIndication() ignores frame received:
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>477</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>878</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Det12_Extended_Segmented_Reception_InvalidMaxDL</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>868</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test L4G compatible segmented reception, with different 32bit lengths in FF-E, greater than 0xFFFF when size of PduLengthType is uint16, with 1 and 2 byte addressing. Module should not process start of a new reception and should report an error.
Test Object: Software
Test Precondition: 
    -   Initialize the module. Set loop parameters to it's initial values.
  
Test Execution: 
    01: Iterate trough test configurations ISO and L4G with 1 and 2 byte addressing.
    02: Iterate trough test input values of DataLength.
    03: Receive FF-E with different data lengths
    04: Sanity check - FrIf shall call LLR RxIndication, PduR_FrArTpStartOfReception and PduR_FrArTpCopyRxData with correct parameters. Received data shall be checked.
    05: VP(FrArTp.EB.ASR42.SWS_FrArTp_00152.FRARTP_E_INVALID_PARAMETER,1) After FrArTp_RxIndication, if the received FF-E's embedded message length contains length greater than 0xFFFF and PduLengthType is size of 16-bit, FF-E is ignored, FrArTp_RxIndication() shall call Det_ReportError() with error code FRARTP_E_INVALID_PARAMETER for module FrArTp.
    06: VP(FrArTp.EB.PDULENGTHTYPE001,1) After FrArTp_RxIndication, if the received FF-E's embedded message length contains length greater than 0xFFFF and PduLengthType is size of 16-bit, FF-E is ignored, no additional function calls shall be in a trace.
    07: Run FrArTp_MainFunction to check that reception was not started.
    08: Sanity check - After main function call, no additional function calls shall be in a trace.
  
Test Input: DataLength[0x10000 to 0xFFFFFFFF]
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00152.FRARTP_E_INVALID_PARAMETER</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>406</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.PDULENGTHTYPE001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>535</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>879</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_General_GetVersionInfo_Uninit</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>904</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test that calling FrArTp_GetVersionInfo in uninitialized state doesn't report development errors.
Test Object: Software
Test Precondition: 
    -   Clean up function trace.
  
Test Execution: 
    01: Call FrArTp_GetVersionInfo() with parameter versionInfo.
    02: VP(FrArTp.ASR42.SWS_FrArTp_00215,1) FrArTp_GetVersionInfo() shall return correct version information from module FrArTp.
    03: VP(FrArTp.EB.ASR42.SWS_FrArTp_00215.E_UNINIT,1) No DET error has been reported.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00215</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>299</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00215.E_UNINIT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>395</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>880</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_General_FrArTp_MainFunction_Uninit</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>928</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: Test that calling FrArTp_MainFunction in uninitialized state doesn't report development errors.
Test Object: Software
Test Precondition: 
    -   Clean up function trace
  
Test Execution: 
    01: Call FrArTp_MainFunction()
    02: VP(FrArTp.EB.ASR42.SWS_FrArTp_00162.E_UNINIT,1) No DET error has been reported.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.ASR42.SWS_FrArTp_00162.E_UNINIT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>394</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>881</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_SegmentationDecision</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>953</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test segmentation decision on both messages too big and not too big for a SF, using ISO and L4G connections with 1 and 2 byte addressing.
Test Object: Software
Test Precondition: 
    -   Clean up function trace.
    -   Initialize module.
    -   Initialize frame buffer.
    -   Set appropriate test values to induce wanted transmission.
    -   Set module to Transmit state.
  
Test Execution: 
    01: Iterate through test input data array.
    02: Call FrArTp_TriggerTransmit().
    03: Sanity check - FrArTp_TriggerTransmit shall return E_OK after data was successfully copied to txPdu.
    04: Sanity check - FrArTp_TriggerTransmit calls the respective lower layer routing function to indicate a transmission trigger.
    05: Sanity check - FrArTp_TriggerTransmit shall call PduR_FrArTpCopyTxData with correct parameters.
    06: Calculate data length depending on test configuration.
    07: Extract frame type from FT field.
    08: Call FrArTp_TxConfirmation because FrArTp_TriggerTransmit has been previously called.
    09: Sanity check - Corresponding Low Level Routing function has been called.
    10: VP(FrArTp.ASR42.SWS_FrArTp_00091.1,1) If payload on ISO channel doesn't fit into one frame, Frame Type of transmitted frame shall be FF-I. Data length shall reflect that.
    11: Sanity check - FrArTp_TxConfirmation shall make no additional function calls.
    12: VP(FrArTp.ASR42.SWS_FrArTp_00091.2,1) If payload on ISO channel fits into one frame, Frame Type of transmitted frame shall be SF-I. Data length shall reflect that.
    13: Sanity check - FrArTp_TxConfirmation shall call PduR_FrArTpTxConfirmation with E_OK.
    14: VP(FrArTp.ASR42.SWS_FrArTp_00091.3,1) If payload on L4G channel doesn't fit into one frame, Frame Type of transmitted frame shall be FF-E. Data length shall reflect that.
    15: Sanity check - FrArTp_TxConfirmation shall make no additional function calls.
    16: VP(FrArTp.ASR42.SWS_FrArTp_00091.4,1) If payload on L4G channel fits into one frame, Frame Type of transmitted frame shall be SF-E. Data length shall reflect that.
    17: Sanity check - FrArTp_TxConfirmation shall call PduR_FrArTpTxConfirmation with E_OK.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00091.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>178</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00091.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>179</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00091.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00091.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>882</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_TriggerTransmit_EnoughBuffer</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>1009</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test FrArTp_TriggerTransmit functionality with sufficient buffer space.
Test Object: Software
Test Precondition: 
    -   Initialize module.
    -   Clean up function trace.
    -   Initialize frame buffers.
    -   Set appropriate test values to induce wanted transmission.
    -   Provide FrArTp buffer with enough available space.
  
Test Execution: 
    01: Set module to TXPENDING state.
    02: FrIf calls FrArTp_TriggerTransmit.
    03: VP(FrArTp.VAG.AUDI_ASR_FrTP_044,1) FrArTp_TriggerTransmit shall call corresponding Low Level Routing function.
    04: VP(FrArTp.VAG.AUDI_ASR_FrTP_045,1.1) txPdu shall be filled with the correct Tp data.
        VP(FrArTp.VAG.AUDI_ASR_FrTP_046,1) FrArTp shall forward the parameters of the FrArTp_TriggerTransmit to the &amp;lt;LLR&amp;gt;_FrIf_FrTp_TriggerTransmit.
    05: VP(FrArTp.ASR42.SWS_FrArTp_00154,1) PduR shall copy its data into the buffer provided by txPdu.SduDataPtr.
    06: VP(FrArTp.ASR42.SWS_FrArTp_00154,1) PduR shall update length of the actual copied data in txPdu.SduLength.
    07: VP(FrArTp.ASR42.SWS_FrArTp_00154,1) FrArTp_TriggerTransmit shall return E_OK.
    08: FrIf calls FrArTp_TxConfirmation.
    09: Sanity check - FrIf called FrArTp_TxConfirmation with correct parameters, corresponding Low Level Routing function has been called.
    10: VP(FrArTp.ASR42.SWS_FrArTp_00034.1,1) In FRARTP_ISO mode, message is too long for SF-I, so FF-I is used.
        VP(FrArTp.ASR42.SWS_FrArTp_00034.3,1) In FRARTP_L4G mode, message is too long for SF-E, so FF-E is used.
    11: Receive FC from FrIf.
    12: FrArTp shall call FrArTp_MainFunction.
    13: VP(FrArTp.VAG.AUDI_ASR_FrTP_059,1) LLR_FrTp_FrIf_Transmit call shall immediately preceed FrIf_Transmit call.
    14: VP(FrArTp.VAG.AUDI_ASR_FrTP_061,1) If LLR_FrTp_FrIf_Transmit was called and returned E_OK, FrArTp shall call FrIf_Transmit.
    15: FrIf calls FrArTp_TriggerTransmit.
    16: VP(FrArTp.VAG.AUDI_ASR_FrTP_044,1) FrArTp_TriggerTransmit shall call corresponding Low Level Routing function.
    17: VP(FrArTp.VAG.AUDI_ASR_FrTP_045,1.1) txPdu shall be filled with the correct Tp data.
        VP(FrArTp.VAG.AUDI_ASR_FrTP_046,1) FrArTp shall forward the parameters of the FrArTp_TriggerTransmit to the &amp;lt;LLR&amp;gt;_FrIf_FrTp_TriggerTransmit.
    18: VP(FrArTp.ASR42.SWS_FrArTp_00154,1) PduR shall copy its data into the buffer provided by txPdu.SduDataPtr.
        VP(FrArTp.VAG.AUDI_ASR_FrTP_047,1) Because &amp;lt;LLR&amp;gt;_FrIf_FrTp_TriggerTransmit returned E_OK, FrArTp shall process the TriggerTransmit according to the FrArTp specification.
    19: VP(FrArTp.ASR42.SWS_FrArTp_00154,1) FrArTp_TriggerTransmit shall return E_OK.
        VP(FrArTp.VAG.AUDI_ASR_FrTP_047,1) Because &amp;lt;LLR&amp;gt;_FrIf_FrTp_TriggerTransmit returned E_OK, FrArTp shall provide a return value accordingly.
    20: VP(FrArTp.ASR42.SWS_FrArTp_00154,1) PduR shall update length of the actual copied data in txPdu.SduLength.
    21: FrIf calls FrArTp_TxConfirmation.
    22: Sanity check - Lower layer TxConfirmation shall be called with right parameters.
    23: Sanity check - No additional function shall be called, other than PduR_FrArTpTxConfirmation with right parameters and result.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_044</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>464</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_045</linksto>
          <dstversion>1.1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>465</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_046</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>466</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00154</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>306</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00034.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00034.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_059</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>479</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_061</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>467</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>883</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_TriggerTransmit_NotEnoughBuffer</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>1090</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test FrArTp_TriggerTransmit functionality with insufficient buffer space.
Test Object: Software
Test Precondition: 
    -   Initialize module.
    -   Clean up function trace.
    -   Initialize frame buffers.
    -   Set appropriate test values to induce wanted transmission.
    -   Provide FrArTp buffer with not enough available space.
  
Test Execution: 
    01: Set module to TXPENDING state.
    02: Save value of SduLength before FrArTp_TriggerTransmit call.
    03: FrIf calls FrArTp_TriggerTransmit.
    04: VP(FrArTp.VAG.AUDI_ASR_FrTP_044,1) FrArTp_TriggerTransmit shall call corresponding Low Level Routing function.
    05: VP(FrArTp.VAG.AUDI_ASR_FrTP_045,1.1) txPdu shall be filled with the correct Tp data.
        VP(FrArTp.VAG.AUDI_ASR_FrTP_046,1) FrArTp shall forward the parameters of the FrArTp_TriggerTransmit to the &amp;lt;LLR&amp;gt;_FrIf_FrTp_TriggerTransmit.
    06: VP(FrArTp.ASR42.SWS_FrArTp_00154,1) FrArTp shall not update length of the actual copied data in txPdu.SduLength.
    07: VP(FrArTp.ASR42.SWS_FrArTp_00154,1) FrArTp_TriggerTransmit shall return E_NOT_OK.
    08: Call FrArTp_TriggerTransmit with valid SduLength just to check the module still works properly.
    09: Sanity check - Corresponding Low Level Routing function has been called.
    10: Sanity check - FrArTp_TriggerTransmit shall return E_OK and call PduR_FrArTpCopyTxData.
    11: Cancel the transmission to shorten the test.
    12: Sanity check - FrArTp_CancelTransmit has been successfully called, PduR_FrArTpTxConfirmation has been called with result E_NOT_OK.
    13: Call FrArTp_TxConfirmation because FrArTp_TriggerTransmit has been previously called.
    14: Sanity check - Corresponding Low Level Routing function has been called.
    15: Sanity check - No additional function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_044</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>464</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_045</linksto>
          <dstversion>1.1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>465</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_046</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>466</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00154</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>306</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>884</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_TriggerTransmit_LLR_IgnoreFrArTpTriggerTransmit</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>1139</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test that FrArTp_TriggerTransmit is bypassed if &amp;lt;LLR&amp;gt;_FrIf_FrTp_TriggerTransmit returns E_NOT_OK. FrArTp_TriggerTransmit should return E_OK.
Test Object: Software
Test Precondition: 
    -   Initialize module.
    -   Clean up function trace.
    -   Initialize frame buffers.
    -   Set appropriate test values to induce wanted transmission.
    -   Provide FrArTp buffer with not enough available space.
  
Test Execution: 
    01: Set stubbed return value of Low Level Routing function called by FrArTp_TriggerTransmit to E_NOT_OK.
    02: Set stubbed value of parameter FrIf_TriggerTransmitStatus of Low Level Routing function called by FrArTp_TriggerTransmit to E_OK.
    03: Set stubbed return value of Low Level Routing function called by FrIf_Transmit to E_NOT_OK as well to allow FrIf_FrTp_TriggerTransmit to return E_NOT_OK.
    04: PduR calls FrArTp_Transmit.
    05: Sanity check - FrArTp_Transmit shall return E_OK.
    06: Set module to WAITPDU state.
    07: Sanity check - FrArTp shall call PduR_FrArTpCopyTxData with correct parameters.
    08: Set module to TXPENDING state.
    09: VP(FrArTp.VAG.AUDI_ASR_FrTP_059,1) LLR_FrTp_FrIf_Transmit call shall immediately preceed FrIf_Transmit call.
    10: Sanity check - FrArTp calls PduR_FrArTpTxConfirmation with result E_NOT_OK.
    11: FrIf calls FrArTp_TriggerTransmit.
    12: VP(FrArTp.VAG.AUDI_ASR_FrTP_044,1) FrArTp_TriggerTransmit shall call corresponding Low Level Routing function.
    13: VP(FrArTp.VAG.AUDI_ASR_FrTP_045,1.1) txPdu shall be filled with the correct Tp data.
        VP(FrArTp.VAG.AUDI_ASR_FrTP_046,1) FrArTp shall forward the parameters of the FrArTp_TriggerTransmit to the &amp;lt;LLR&amp;gt;_FrIf_FrTp_TriggerTransmit.
    14: VP(FrArTp.VAG.AUDI_ASR_FrTP_045,1.1) FrArTp_TriggerTransmit shall return FrIf_TriggerTransmitStatus E_OK.
        VP(FrArTp.VAG.AUDI_ASR_FrTP_048,1) Because &amp;lt;LLR&amp;gt;_FrIf_FrTp_TriggerTransmit returned E_NOT_OK, FrArTp shall pass the status from FrIf_TriggerTransmitStatus.
    15: FrIf calls FrArTp_TxConfirmation.
    16: Sanity check - Corresponding Low Level Routing function has been called with correct parameter.
    17: Try to induce FrIf_Transmit call from FrArTp_MainFunction.
    18: VP(FrArTp.VAG.AUDI_ASR_FrTP_045,1.1) No additional function has been called, which means that Low Level Routing function called by FrArTp_TriggerTransmit returned E_NOT_OK.
        VP(FrArTp.VAG.AUDI_ASR_FrTP_048,1) Because &amp;lt;LLR&amp;gt;_FrIf_FrTp_TriggerTransmit returned E_NOT_OK, FrArTp shall immediately terminate the TriggerTransmit call of FrIf.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_059</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>479</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_044</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>464</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_045</linksto>
          <dstversion>1.1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>465</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_046</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>466</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>468</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>885</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_TriggerTransmit_LLR_IgnoreAllTriggerTransmit</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>1197</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test that FrArTp_TriggerTransmit is bypassed if &amp;lt;LLR&amp;gt;_FrIf_FrTp_TriggerTransmit returns E_NOT_OK. FrArTp_TriggerTransmit should return E_NOT_OK.
Test Object: Software
Test Precondition: 
    -   Initialize module.
    -   Clean up function trace.
    -   Initialize frame buffers.
    -   Set appropriate test values to induce wanted transmission.
    -   Provide FrArTp buffer with not enough available space.
  
Test Execution: 
    01: Set stubbed return value of Low Level Routing function called by FrArTp_TriggerTransmit to E_NOT_OK.
    02: Set stubbed value of parameter FrIf_TriggerTransmitStatus of Low Level Routing function called by FrArTp_TriggerTransmit to E_NOT_OK.
    03: Set stubbed return value of Low Level Rounting function called by FrIf_Transmit to E_NOT_OK as well to allow FrIf_FrTp_TriggerTransmit to return E_NOT_OK.
    04: PduR calls FrArTp_Transmit.
    05: Sanity check - FrArTp_Transmit shall return E_OK.
    06: Set module to WAITPDU state.
    07: Sanity check - FrArTp shall call PduR_FrArTpCopyTxData with correct parameters.
    08: Set module to TXPENDING state.
    09: VP(FrArTp.VAG.AUDI_ASR_FrTP_059,1) LLR_FrTp_FrIf_Transmit call shall immediately preceed FrIf_Transmit call.
    10: VP(FrArTp.VAG.AUDI_ASR_FrTP_062,1) FrArTp shall not call FrIf_Transmit, but shall instead proceed as if the FrIf_Transmit call itself returned E_NOT_OK, which means FrArTp shall call PduR_FrArTpTxConfirmation with result E_NOT_OK.
    11: FrIf calls FrArTp_TriggerTransmit.
    12: VP(FrArTp.VAG.AUDI_ASR_FrTP_044,1) FrArTp_TriggerTransmit shall call corresponding Low Level Routing function.
    13: VP(FrArTp.VAG.AUDI_ASR_FrTP_045,1.1) txPdu shall be filled with the correct Tp data.
        VP(FrArTp.VAG.AUDI_ASR_FrTP_046,1) FrArTp shall forward the parameters of the FrArTp_TriggerTransmit to the &amp;lt;LLR&amp;gt;_FrIf_FrTp_TriggerTransmit.
    14: VP(FrArTp.VAG.AUDI_ASR_FrTP_045,1.1) FrArTp_TriggerTransmit shall return FrIf_TriggerTransmitStatus E_NOT_OK, which means &amp;lt;LLR&amp;gt;_FrIf_FrTp_TriggerTransmit refused the call.
        VP(FrArTp.VAG.AUDI_ASR_FrTP_048,1) Because &amp;lt;LLR&amp;gt;_FrIf_FrTp_TriggerTransmit returned E_NOT_OK, FrArTp shall pass the status from FrIf_TriggerTransmitStatus.
    15: FrIf calls FrArTp_TxConfirmation.
    16: Sanity check - Corresponding Low Level Routing function has been called with correct parameter.
    17: Try to induce FrIf_Transmit call from FrArTp_MainFunction.
    18: VP(FrArTp.VAG.AUDI_ASR_FrTP_045,1.1) No additional function has been called, which means that Low Level Routing function called by FrArTp_TriggerTransmit returned E_NOT_OK.
        VP(FrArTp.VAG.AUDI_ASR_FrTP_048,1) Because &amp;lt;LLR&amp;gt;_FrIf_FrTp_TriggerTransmit returned E_NOT_OK, FrArTp shall immediately terminate the TriggerTransmit call of FrIf.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_059</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>479</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_062</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>482</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_044</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>464</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_045</linksto>
          <dstversion>1.1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>465</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_046</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>466</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>468</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>886</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Unsegmented_Reception</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>1265</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test unsegmented reception on ISO and L4G compatible channel with 1 and 2 byte addressing and different valid payload lengths.
Test Object: Software
Test Precondition: 
    -   Initialize FrArTp module and set PduR buffer to BUFREQ_OK.
    -   Set SF-x frame properties.
    -   Construct SF-x with correct parameters.
    -   Set buffers to current valid SF-x dataLength.
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a single frame with payload length x.
    02: Sanity check - When low level routing is activated, FrArTp_RxIndication() shall immediately call &amp;lt;prefix&amp;gt;LLR_FrIf_FrTp_RxIndication() and pass correct parameters.
    03: VP(FrArTp.ASR42.SWS_FrArTp_00108,1) Receiver side principle. The FrArTp shall call PduR_FrArTpStartOfReception to prepare reception.
        VP(FrArTp.ASR42.SWS_FrArTp_00083.3,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00221.2,1)
        VP(FrArTp.VAG.AUDI_ASR_FrTP_055,1.1)
        VP(FrArTp.VAG.AUDI_ASR_FrTP_056,1) FrArTp_RxIndication() shall call PduR_FrArTpStartOfReception() with correct parameters:
    04: VP(FrArTp.ASR42.SWS_FrArTp_00108,1) Receiver side principle.
        VP(FrArTp.ASR42.SWS_FrArTp_00221.3,1) After successful call to the PduR_FrArTpStartOfReception the FrArTp shall call PduR_FrArTpCopyRxData with correct parameters to forward SF-x data.
    05: VP(FrArTp.ASR42.SWS_FrArTp_00025.3,1) Copied data length shall correspond with valid SF-x data length.
    06: VP(FrArTp.ASR42.SWS_FrArTp_00221.3,1) When PduR_FrArTpCopyRxData is called to copy data of an SF-X, content of the data provided to the upper layer shall have correct value.
    07: VP(FrArTp.ASR42.SWS_FrArTp_00262,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00023,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00024,1) When correct SF-x parameters were received and copied, FrArTp_RxIndication() shall call PduR_FrArTpRxIndication with correct parameters. PduR_FrArTpRxIndication shall be called with Result set to E_OK.
    08: Sanity check - After each finished reception of SF-x, no additional function shall be called.
  
Test Input: Valid DL for SF-I [1 - 7] bytes. Valid DL for SF-E 1 and 2 byte addressing [1 - 251] and [1 - 249].
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>253</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>129</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00221.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>238</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_055</linksto>
          <dstversion>1.1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>475</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_056</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>476</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00221.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>239</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00025.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>194</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00023</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>887</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Segmented_Reception_PduR_Fault</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>1337</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test ISO and L4G compatible segmented reception (FF-x) with different valid payload lengths where the PduR API function calls return a value indicating an error.
Test Object: Software
Test Precondition: 
    -   Initialize FrArTp module.
    -   Set frame properties.
    -   Set channel block size and ST min.
    -   Construct first frame and flow control frame (FF-x, FC).
  
Test Execution: 
    01: Set the return value of PduR_FrArTpStartOfReception to BUFREQ_E_NOT_OK. Call FrArTp_RxIndication() and pass a first frame.
    02: Sanity check - FrArTp_RxIndication() shall call lower layer routing function with correct parameters.
    03: Sanity check - FrArTp_RxIndication() shall call PduR_FrArTpStartOfReception() with correct parameters.
    04: VP(FrArTp.EB.PduR_FrArTpStartOfReception_Segmented.BufferError,1) FrArTp_RxIndication() shall not call any other function, i.e. the transfer is aborted immediately.
    05: Call FrArTp_MainFunction() after reception has been aborted.
    06: Sanity check - FrArTp_MainFunction() shall not call any additional function on an idle connection.
    07: Set the return value of PduR_FrArTpStartOfReception to BUFREQ_E_OVFL. Call FrArTp_RxIndication() and pass a first frame.
    08: Sanity check - FrArTp_RxIndication() shall call lower layer function with correct parameters.
    09: Sanity check - FrArTp_RxIndication() shall call PduR_FrArTpStartOfReception() with correct parameters.
    10: Call FrArTp_MainFunction() after reception has been aborted.
    11: VP(FrArTp.ASR42.SWS_FrArTp_00117.3,1) When FrArTp_RxIndication() is called, and PduR_FrArTpStartOfReception() returns BUFREQ_E_OVFL, FrArTp shall transmit flow control with FS = OVFLW.
    12: VP(FrArTp.EB.PduR_FrArTpStartOfReception_Segmented.BufferError,1) FrArTp_RxIndication() shall not call PduR_FrArTpRxIndication(), i.e. the transfer is aborted immediately.
    13: Transmit FC with FS = OVFLW.
    14: Sanity check - Check LLR TriggerTransmit trace was called with correct parameters.
    15: VP(FrArTp.ASR42.SWS_FrArTp_00117.3,1) FC shall contain all correct parameters, including FS = OVFLW.
    16: Set PduR_FrArTpStartOfReception available buffer to BUFFERQ_OK, and available buffer size too small for FF-x data.
    17: Call FrArTp_RxIndication() and pass a first frame.
    18: Sanity check - FrArTp_RxIndication() shall call lower layer function with correct parameters.
    19: Sanity check - FrArTp_RxIndication() shall call PduR_FrArTpStartOfReception() with correct parameters.
    20: VP(FrArTp.ASR42.SWS_FrArTp_00294,1) When FrArTp_RxIndication() is called and the available buffer reported by PduR_FrArTpStartOfReception is to small for FF-x data, FrArTp shall abort the transfer and call PduR_FrArTpRxIndication with E_NOT_OK and with correct parameters.
    21: Call FrArTp_MainFunction() after reception has been aborted.
    22: Sanity check - FrArTp_MainFunction() shall not call any additional function on an idle connection.
    23: Set PduR_FrArTpStartOfReception available buffer to BUFREQ_OK. Set PduR_FrArTpCopyRxData set the return value to E_NOT_OK.
    24: Call FrArTp_RxIndication() and pass a first frame.
    25: Sanity check - FrArTp_RxIndication() shall call lower layer function with correct parameters.
    26: Sanity check - FrArTp_RxIndication() shall call PduR_FrArTpStartOfReception() with correct parameters.
    27: Sanity check - FrArTp_RxIndication() shall call PduR_FrArTpCopyRxData() with correct parameters.
    28: VP(FrArTp.ASR42.SWS_FrArTp_00295.1,1) When PduR_FrArTpCopyRxData returns BUFREQ_E_NOT_OK, FrArTp_RxIndication() shall call PduR_FrArTpRxIndication() with correct parameters. The transfer shall be aborted and PduR_FrArTpRxIndication shall be called with E_NOT_OK.
    29: Call FrArTp_MainFunction() after reception has been aborted.
    30: Sanity check - FrArTp_MainFunction() shall not call any additional function on an idle connection.
  
Test Input: FF-x with 1 byte and 2 byte address type and on ISO and L4G channel.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.PduR_FrArTpStartOfReception_Segmented.BufferError</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>448</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00117.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>286</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00294</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>274</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00295.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>281</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>888</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Segmented_Reception_PduR_Fault_CF</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>1400</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test ISO and L4G compatible segmented reception (CF) with different valid payload lengths where the PduR API function calls return a value indicating an error.
Test Object: Software
Test Precondition: 
    -   Initialize FrArTp module.
    -   Set reception buffers to BUFREQ_OK and buffer sizes to OK.
    -   Set frame properties for FF-x, FC and CF.
    -   Set channel block size and ST min.
    -   Construct first frame and flow control frame (FF-I, FF-E, FC).
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a first frame.
    02: Set PduR_FrArTpCopyRxData available buffer size for one block of CF data.
    03: Call FrArTp_MainFunction() after buffer has been set to value that is large enough for one block of CFs.
    04: Sanity check - FrArTp_MainFunction() shall call PduR_FrArTpCopyRxData() with correct parameters.
    05: Sanity check - When PduR_FrArTpCopyRxData(0) returns buffer value BUFREQ_OK and available buffer size is large enough for one block of CFs, FrArTp_MainFunction() shall call lower layer transmit function and FrIf_Transmit().
    06: Transmit FC.
    07: Call FrArTp_TxConfirmation() to confirm transmitted pdu.
    08: Sanity check - FrArTp_TxConfirmation shall call lower layer function.
    09: Set PduR_FrArTpCopyRxData() available buffer size for one block of CF data.
    10: Construct and receive first CF. Frame shall be received.
    11: Set PduR_FrArTpCopyRxData() return buffer value to BUFFERQ_E_NOT_OK, and clear stub function pointer.
    12: Construct and receive second CF.
    13: Sanity check - FrArTp_RxIndication() shall call lower layer routing function with correct parameters.
    14: Sanity check - FrArTp_RxIndication() shall call PduR_FrArTpCopyRxData() with correct parameters. Return value of PduR_FrArTpCopyRxData() shall be BUFFERQ_E_NOT_OK.
    15: VP(FrArTp.ASR42.SWS_FrArTp_00295.1,1) When FrArTp_RxIndication() is called and PduR_FrArTpCopyRxData() fails to copy CF data, FrArTp shall abort the transfer and it shall call PduR_FrArTpRxIndication() with correct parameters. PduR_FrArTpRxIndication() shall return E_NOT_OK.
  
Test Input: CF with 1 byte and 2 byte address type and on ISO and L4G channel.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00295.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>281</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>889</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Segmented_Reception_FC_TriggerTransmit_Fail</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>1437</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test segmented reception where the transmission of the flow control fails due to a Sdu length that is too small.
Test Object: Software
Test Precondition: 
    -   Initialize FrArTp module.
    -   Set reception buffers sizes.
    -   Set frame properties for FF-x.
    -   Construct first frame (FF-I, FF-E).
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a first frame.
    02: Call FrArTp_MainFunction()
    03: Sanity check - FrArTp_MainFunction() shall call PduR_FrArTpCopyRxData().
    04: Sanity check - FrArTp_MainFunction() shall call lower layer transmit function and FrIf_Transmit().
    05: Call FrArTp_TriggerTransmit with a SduLength that is too small to fit the FC frame.
    06: VP(FrArTp.ASR42.SWS_FrArTp_00154,1) FrArTp_TriggerTransmit returns E_NOT_OK and does not modify the SduLength.
    07: Sanity check - The lower layer transmit function is called.
  
Test Input: Connections with 1 byte and 2 byte addressing and ISO and L4G channels.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00154</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>306</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>890</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Segmented_Reception_FC_Transmit_Fail</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>1465</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test segmented reception where the FrIf_Transmi() call of for the flow control frame fails.
Test Object: Software
Test Precondition: 
    -   Initialize FrArTp module.
    -   Set the return value of FrIf_Transmit() to E_NOT_OK.
    -   Set reception buffers sizes.
    -   Set frame properties for FF-x.
    -   Construct first frame (FF-I, FF-E).
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a first frame.
    02: Call FrArTp_MainFunction()
    03: Sanity check - FrArTp_MainFunction() shall call PduR_FrArTpCopyRxData().
    04: Sanity check - FrArTp_MainFunction() shall call lower layer transmit function and FrIf_Transmit().
    05: VP(FrArTp.ASR42.SWS_FrArTp_00302,1) The connection is aborted, PduR_FrArTpRxIndication() is called with E_NOT_OK.
    06: Call FrArTp_TriggerTransmit().
    07: VP(FrArTp.ASR42.SWS_FrArTp_00154,1) FrArTp_TriggerTransmit() returns E_NOT_OK and does not modify the SduLength.
    08: Sanity check - The lower layer transmit function is called.
  
Test Input: Connections with 1 byte and 2 byte addressing and ISO and L4G channels.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00302</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00154</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>306</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>891</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Segmented_Reception_StandardFunctions</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>1499</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Call standard functions in ISO and L4G segmented reception with 1 and 2 byte addressing.
Test Object: Software
Test Precondition: 
    -   Set the stub callout functions. Reset the Rx buffer. Flush trace after init.
    -   Initialize PduInfo lengths.
    -   Construct FF-x.
    -   Construct CF.
  
Test Execution: 
    01: VP(FrArTp.ASR42.SWS_FrArTp_00147,1) Module shall be initialized with call to the FrArTp_Init() with correct configuration.
    02: VP(FrArTp.ASR42.SWS_FrArTp_00151,1) Set BS=1 and STmin=0. PduR shall call FrArTp_ChangeParameter before reception has started with correct parameters.
    03: Sanity check - While FrArTp reception is idle, FrArTp_ChangeParameter shall return E_OK.
    04: VP(FrArTp.EB.FrArTp_RxIndication,1) FrIf shall call FrArTp_RxIndication to pass received FF-x pdu to the module.
    05: Sanity check - FrArTp_RxIndication shall call LLR RxIndication, PduR_FrArTpStartOfReception and PduR_FrArTpCopyRxData with correct parameters.
    06: Sanity check - Check data received.
    07: VP(FrArTp.ASR42.SWS_FrArTp_00162,1) SchM shall call FrArTp_MainFunction to acquire buffer for one block of CFs and to prepare FC for transmission.
    08: Sanity check - FrArTp_MainFunction shall call PduR_FrArTpCopyRxData, LLR Transmit and FrIf_Transmit with correct parameters.
    09: VP(FrArTp.ASR42.SWS_FrArTp_00154,1) Transmit FC with FS = CTS.
    10: Sanity check - Check LLR TriggerTransmit trace was called with correct parameters.
    11: Sanity check - Transmitted FC shall have correct parameters.
    12: VP(FrArTp.ASR42.SWS_FrArTp_00153,1) FrIf shall call FrArTp_TxConfirmation to confirm the transmission of a current pool.
    13: Sanity check - FrArTp_TxConfirmation shall call corresponding Low Level Routing function with correct parameters.
    14: VP(FrArTp.EB.FrArTp_RxIndication,1) FrIf shall call FrArTp_RxIndication to pass received CF pdu to the module.
    15: Sanity check - PduR_FrArTpCopyRxData shall be called after reception of the CF.
    16: Sanity check - Module shall call PduR_FrArTpRxIndication() after all data is received.
    17: Sanity check - No additional function calls shall be in a trace on the end of the test.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00147</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>300</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00151</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>305</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.FrArTp_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>451</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00162</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>309</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00154</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>306</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00153</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>308</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>892</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Segmented_Reception_BlockSizeZero</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>1556</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test ISO compatible segmented reception (receiving FF frame and transmitting FC with BlockSize set to value 0 to 255), with 1 and 2 byte addressing.
Test Object: Software
Test Precondition: 
    -   Setup BlockSize input with min = 1 and max = 255, several mid range values and special no BS = 0.
    -   Setup STmin input with two ranges [0 to 0x7F] and [0xF1 to 0xF9] with several mid range values.
    -   Setup DataLength input message length embeded in FF-I [min = 8 to FF max = 0xFFF (4095)].
    -   Initialize the module. Set loop parameters to it's initial values.
    -   Construct FF and CF.
  
Test Execution: 
    01: Iterate trough test configurations ISO and L4G with 1 and 2 byte addressing.
    02: Iterate trough test input values of block size and ST min.
    03: Iterate trough test input values of DataLength.
    04: VP(FrArTp.ASR42.SWS_FrArTp_00299,1) DL from 8 to 4095 can be received in the segmented reception
    05: VP(FrArTp.ASR42.SWS_FrArTp_00104.1,1) Block Size 00 - FF is allowed when no reception is in progress.
    06: VP(FrArTp.ASR42.SWS_FrArTp_00104.2,1) STmin 00 - 7F and F1 - F9 is allowed when no reception is in progress.
    07: Receive FF with different data lengths
    08: Sanity check - FrArTp_RxIndication shall call LLR RxIndication, PduR_FrArTpStartOfReception and PduR_FrArTpCopyRxData with correct parameters.
    09: VP(FrArTp.EB.FFI.FRAME_LENGTH.1,1) PduLength of the received FF-I shall be of length 10 when 1 byte address size is used, and shall be of length 12 when 2 byte address size is used.
    10: VP(FrArTp.ASR42.SWS_FrArTp_00104.4,1) Set BlockSize and STmin with FrArTp_ChangeParameter() when there is an ongoing reception. FrArTp_ChangeParameter() returns E_NOT_OK.
    11: Set module to transmit
    12: Sanity check - Check PduR_FrArTpCopyRxData() call and FrIf_Transmit() call
    13: VP(FrArTp.ASR42.SWS_FrArTp_00104.4,1) Set BlockSize and STmin with FrArTp_ChangeParameter() when there is an ongoing reception. FrArTp_ChangeParameter() returns E_NOT_OK.
    14: Call FrArTp_TriggerTransmit() to transmit the FC frame.
    15: Sanity check - Check LLR trace of FrArTp_TriggerTransmit() call and transmitted data in Tx buffer
    16: VP(FrArTp.ASR42.SWS_FrArTp_00064.1,1) Check if the frame FC was transmitted in response to the FF-I or the last CF of a block if no error occurred.
    17: VP(FrArTp.ASR42.SWS_FrArTp_00104.1,1) Check if the transmitted blockSize is set according to input parameters.
        VP(FrArTp.ASR42.SWS_FrArTp_00068.3,1) BS field of an FC frame is set to the values specified in tstBlockSizes[] array
    18: VP(FrArTp.ASR42.SWS_FrArTp_00104.2,1) Check if the transmitted STmin is set according to input parameters.
    19: VP(FrArTp.ASR42.SWS_FrArTp_00104.4,1) Set BlockSize and STmin with FrArTp_ChangeParameter() when there is an ongoing reception. FrArTp_ChangeParameter() returns E_NOT_OK.
    20: Call FrArTp_TxConfirmation() to confirm that data is transmitted
    21: Sanity check - Check LLR trace of FrArTp_TxConfirmation() call
    22: VP(FrArTp.ASR42.SWS_FrArTp_00104.4,1) Set BlockSize and STmin with FrArTp_ChangeParameter() when there is an ongoing reception. FrArTp_ChangeParameter() returns E_NOT_OK.
    23: Receive CF frame with iterated sequence number
    24: Sanity check - FrArTp_RxIndication shall call LLR RxIndication and PduR_FrArTpCopyRxData with correct parameters.
    25: VP(FrArTp.ASR42.SWS_FrArTp_00104.4,1) Set BlockSize and STmin with FrArTp_ChangeParameter when there is an ongoing reception. FrArTp_ChangeParameter() returns E_NOT_OK.
    26: Sanity check - Check received data
    27: VP(FrArTp.ASR42.SWS_FrArTp_00068.1,1) BS field of an FC frame is set to 0x00, don't transmit another FlowControl
    28: FrArTp shall call FrArTp_MainFunction.
    29: Sanity check - FrArTp_MainFunction shall call PduR_FrArTpCopyRxData and FrIf_Transmit with correct parameters.
    30: VP(FrArTp.ASR42.SWS_FrArTp_00104.4,1) Set BlockSize and STmin with FrArTp_ChangeParameter() when there is an ongoing reception. FrArTp_ChangeParameter() returns E_NOT_OK.
    31: Sanity check - Check trace of PduR_FrArTpRxIndication() call when no payload data remaining
    32: VP(FrArTp.ASR42.SWS_FrArTp_00104.1,1) Block Size 00 - FF is allowed when no reception is in progress. Reception finished!
    33: VP(FrArTp.ASR42.SWS_FrArTp_00104.2,1) STmin 00 - 7F and F1 - F9 is allowed when no reception is in progress. Reception finished!
  
Test Input: BlockSizes[0 to 255], STmins[0 to 0x7F, 0xF1 to 0xF9], DataLengths[0 to 0xFFF]
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00299</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00104.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>232</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00104.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.FFI.FRAME_LENGTH.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>424</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00104.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>235</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00064.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>85</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00068.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00068.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>96</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>893</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Extended_Segmented_Reception</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>1640</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test L4G compatible segmented reception (receiving FF-E frame and transmitting FC with BlockSize set 0 to 255), with different lengths from minimal to maximum and with 1 and 2 byte addressing.
Test Object: Software
Test Precondition: 
    -   Initialize the module. Set loop parameters to it's initial values.
  
Test Execution: 
    01: VP(FrArTp.ASR42.SWS_FrArTp_00283.10,1) Unexpected CF shall be ignored on an idle L4G connection.
    02: VP(FrArTp.ASR42.SWS_FrArTp_00283.14,1) Unexpected received FC shall be ignored on an idle L4G connection.
    03: VP(FrArTp.ASR42.SWS_FrArTp_00283.15,1) Unexpected received ISO frames shall be ignored on an idle L4G connection.
    04: VP(FrArTp.ASR42.SWS_FrArTp_00104.1,1) Set allowed Block Size 00 - FF with FrArTp_ChangeParameter. When there is no ongoing reception, parameter shall be set, and FrArTp_ChangeParameter shall return E_OK.
    05: VP(FrArTp.ASR42.SWS_FrArTp_00104.2,1) Set allowed STmin 00 - 7F and F1 - F9 with FrArTp_ChangeParameter. When there is no ongoing reception, parameter shall be set, and FrArTp_ChangeParameter shall return E_OK.
    06: Receive FF-E with different data lengths
    07: VP(FrArTp.ASR42.SWS_FrArTp_00114,1) FrIf shall call FrArTp_RxIndication.
    08: VP(FrArTp.ASR42.SWS_FrArTp_00283.6,1) Received FF-E on the L4G, it shall be processed as start of a new reception.
        VP(FrArTp.ASR42.SWS_FrArTp_00221.1,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00114,1) Reception of the FF-E. FrArTp shall call PduR_FrArTpStartOfReception() and shall check buffer.
    09: VP(FrArTp.ASR42.SWS_FrArTp_00221.3,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00114,1) FrArTp shall trigger PduR_FrArTpCopyRxData with correct parameters.
    10: VP(FrArTp.ASR42.SWS_FrArTp_00283.15,1) Unexpected received ISO frames shall be ignored on a L4G connection.
    11: VP(FrArTp.ASR42.SWS_FrArTp_00104.4,1) Set BlockSize and STmin with FrArTp_ChangeParameter() when there is an ongoing reception. FrArTp_ChangeParameter() shall return E_NOT_OK.
    12: Set module to transmit.
    13: VP(FrArTp.ASR42.SWS_FrArTp_00114,1) FrArTp shall trigger PduR_FrArTpCopyRxData with correct parameters.
    14: VP(FrArTp.ASR42.SWS_FrArTp_00104.4,1) Set BlockSize and STmin with FrArTp_ChangeParameter() when there is an ongoing reception. FrArTp_ChangeParameter() shall return E_NOT_OK.
    15: VP(FrArTp.ASR42.SWS_FrArTp_00283.15,1) Unexpected received ISO frames shall be ignored on a L4G connection.
    16: Call FrArTp_TriggerTransmit() to transmit the FC frame.
    17: VP(FrArTp.ASR42.SWS_FrArTp_00064.1,1) FC shall be transmitted in response to an FF-E or the last CF of a block if no error occurred.
    18: VP(FrArTp.ASR42.SWS_FrArTp_00104.1,1) Transmitted blockSize shall be set according to input parameters.
        VP(FrArTp.ASR42.SWS_FrArTp_00068.3,1) BS field of an FC frame shall be set to the values specified in tstBlockSizes[] array.
    19: VP(FrArTp.ASR42.SWS_FrArTp_00104.2,1) Transmitted STmin shall be set according to input parameters.
    20: VP(FrArTp.ASR42.SWS_FrArTp_00104.4,1) Set BlockSize and STmin with FrArTp_ChangeParameter() when there is an ongoing reception. FrArTp_ChangeParameter() shall return E_NOT_OK.
    21: VP(FrArTp.ASR42.SWS_FrArTp_00283.15,1) Unexpected received ISO frames shall be ignored on a L4G connection.
    22: Call FrArTp_TxConfirmation() to confirm that data is transmitted.
    23: VP(FrArTp.ASR42.SWS_FrArTp_00104.4,1) Set BlockSize and STmin with FrArTp_ChangeParameter() when there is an ongoing reception. FrArTp_ChangeParameter() shall return E_NOT_OK.
    24: VP(FrArTp.ASR42.SWS_FrArTp_00283.15,1) Unexpected received ISO frames shall be ignored on a L4G connection.
    25: Receive CF frame with iterated sequence number.
    26: VP(FrArTp.ASR42.SWS_FrArTp_00104.4,1) Set BlockSize and STmin with FrArTp_ChangeParameter() when there is an ongoing reception. FrArTp_ChangeParameter() shall return E_NOT_OK.
    27: VP(FrArTp.ASR42.SWS_FrArTp_00068.1,1) BS field of an FC frame is set to 0x00, FrArTp shall not transmit another FlowControl frame during ongoing reception.
    28: VP(FrArTp.ASR42.SWS_FrArTp_00283.15,1) Unexpected received ISO frames shall be ignored on a L4G connection.
    29: FrArTp shall call FrArTp_MainFunction.
    30: VP(FrArTp.ASR42.SWS_FrArTp_00104.4,1) Set BlockSize and STmin with FrArTp_ChangeParameter() when there is an ongoing reception. FrArTp_ChangeParameter() shall return E_NOT_OK.
    31: VP(FrArTp.ASR42.SWS_FrArTp_00283.15,1) Unexpected received ISO frames shall be ignored on a L4G connection.
    32: VP(FrArTp.ASR42.SWS_FrArTp_00283.15,1) Unexpected received ISO frames shall be ignored on a L4G connection.
    33: VP(FrArTp.ASR42.SWS_FrArTp_00104.1,1) Segmented reception is finished. Set of Block Size 00 - FF shall be allowed when no ongoing reception is in progress. FrArTpChangeParameter shall return E_OK.
    34: VP(FrArTp.ASR42.SWS_FrArTp_00104.2,1) Segmented reception is finished. STmin 00 - 7F and F1 - F9 shall be allowed when no ongoing reception is in progress. FrArTpChangeParameter shall return E_OK.
  
Test Input: Connections with 1 and 2 byte addressing, BlockSizes from 0 to 255, STmin from 0 to 7F and F1 to F9, data lengths from (251 or 249) to FFFF.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.10</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.14</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>156</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.15</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00104.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>232</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00104.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00114</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>272</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00221.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>237</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00221.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>239</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00104.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>235</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00064.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>85</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00068.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00068.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>96</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>894</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Extended_Segmented_Reception_MaxDL</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>1744</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test L4G compatible segmented reception (receiving FF-E frame and transmitting FC with BlockSize set 0 to 255), with different 32bit lengths to maximum and with 1 and 2 byte addressing. The reception is started, but it is canceled to reduce test runtime.
Test Object: Software
Test Precondition: 
    -   Setup BlockSize input with min = 1 and max = 255, several mid range values and special no BS = 0.
    -   Setup STmin input with two ranges [0 to 0x7F] and [0xF1 to 0xF9] with several mid range values.
    -   Setup DataLength input message length embeded in FF-E [min = calc(251 or 249) to max = 0xFFFF (2^16 - 1)].
    -   Initialize the module. Set loop parameters to it's initial values.
  
Test Execution: 
    01: Iterate trough test configurations ISO and L4G with 1 and 2 byte addressing.
    02: Iterate trough test input values of block size and ST min.
    03: Iterate trough test input values of DataLength from (2^16) to (2^32 - 1)
    04: Set allowed Block Size 00 - FF with FrArTp_ChangeParameter.
    05: Set allowed STmin 00 - 7F and F1 - F9 with FrArTp_ChangeParameter.
    06: Receive FF-E with different data lengths
    07: VP(FrArTp.ASR42.SWS_FrArTp_00054.2,1) FrIf shall call LLR RxIndication, PduR_FrArTpStartOfReception and PduR_FrArTpCopyRxData with correct parameters. Received data shall be checked.
    08: VP(FrArTp.ASR42.SWS_FrArTp_00054.2,1) Embedded length of message in an FF-E shall be passed to PduR, and message shall be larger than (2^16 - 1).
    09: Set module to transmit.
    10: Sanity check - FrArTp shall trigger PduR_FrArTpCopyRxData with correct parameters.
    11: Call FrArTp_TriggerTransmit() to transmit the FC frame.
    12: Sanity check - FC shall be transmitted with return status E_OK.
    13: Sanity check - FrArTp_TriggerTransmit shall call corresponding LLR function with correct parameters. FC with correct addresses and parameters shall be transmitted in response to an FF-E or the last CF of a block if no error occurred.
    14: Call FrArTp_TxConfirmation() to confirm that data is transmitted.
    15: Sanity check - FrArTp_TxConfirmation shall call corresponding Low Level Routing function with correct parameters.
    16: Receive CF frame with iterated sequence number.
    17: Sanity check - PduR_FrArTpCopyRxData() shall be called after reception of the CF.
    18: Sanity check - Received data in the module buffer shall match the received data in the pduInfoRx buffer.
    19: BS field of an FC frame is set to 0x00, FrArTp shall not transmit another FlowControl frame during ongoing reception.
    20: FrArTp shall call FrArTp_MainFunction.
    21: Sanity check - FrArTp_MainFunction shall call PduR_FrArTpCopyRxData and FrIf_Transmit with correct parameters.
    22: VP(FrArTp.ASR42.SWS_FrArTp_00054.2,1) Received data shall be larger than (2^16 - 1).
    23: Sanity check - Module shall call PduR_FrArTpRxIndication() after all data is received.
    24: Sanity check - No additional function calls shall be in a trace on the end of each reception.
    25: Sanity check - No additional function calls shall be in a trace on the end of the test.
  
Test Input: BlockSize[0 to 255], STmin[0 to 7F, F1 to F9], DataLength[0x10000 to 0xFFFFFFFF]
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00054.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>895</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_FF_Error_Handling</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>1790</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test segmented reception ISO channel with 1 and 2 byte addressing with invalid datalength values.
Test Object: Software
Test Precondition: 
    -   Setup Pdu Info structure.
    -   Initialize FrArTp module and stubs.
    -   Setup FF-I with different addresses.
  
Test Execution: 
    01: Construct FF-I. Call FrArTp_RxIndication(), and pass a first frame with datalength length 0x0U.
    02: VP(FrArTp.ASR42.SWS_FrArTp_00039.1,1) FrArTp_RxIndication() shall ignore FF-I received with datalength equal to 0U, no function shall be called.
    03: Call FrArTp_RxIndication(), and pass a first frame with datalength length = 0x07U.
    04: VP(FrArTp.ASR42.SWS_FrArTp_00039.2,1) FrArTp_RxIndication() shall ignore FF-I received with datalength value &amp;lt;= 7, no function shall be called.
  
Test Input: DL with values : 0x00 and 0x07U.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00039.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00039.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>896</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_FFE_Error_Handling</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>1818</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test segmented reception L4G channel with 1 and 2 byte addressing with invalid datalength values for an FF-E.
Test Object: Software
Test Precondition: 
    -   Setup Pdu Info structure.
    -   Initialize FrArTp module and stubs.
    -   Setup FF-E with different addresses.
  
Test Execution: 
    01: Construct FF-E. Call FrArTp_RxIndication(), and pass a first frame with datalength = 0.
    02: Construct FF-E. Call FrArTp_RxIndication(), and pass a first frame with half maximum of a datalength that can fit in SF-E.
    03: Construct FF-E. Call FrArTp_RxIndication(), and pass a first frame with maximum datalength that can fit in SF-E.
    04: VP(FrArTp.ASR42.SWS_FrArTp_00057.1,1) FrArTp_RxIndication() shall ignore FF-E received with datalength that can fit in SF-E or it's invalid, no function shall be called.
  
Test Input: DL with values: dataLength &amp;lt;= (SduLength - addrType - PCI_SFE).
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00057.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>897</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Segmented_Reception_WrongSN</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>1842</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test ISO compatible segmented reception with wrong SN for CF lengths, using 1 and 2 byte addressing.
Test Object: Software
Test Precondition: 
    -   Set stub buffers to valid size.
    -   Initialize FrArTp module and stubs.
    -   Prepare FF, CF and FC with diferent addresses and address types.
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a first frame with datalength &amp;gt; EBTEST_MAX_ONE_FRAME_VALUE.
    02: Sanity check - FrArTp_RxIndication shall call corresponding Low Level Routing function with correct parameters.
    03: Sanity check - FrArTp_RxIndication() shall call PduR_FrArTpStartOfReception() with correct parameters:
    04: Sanity check - FrArTp_RxIndication() shall call PduR_FrArTpCopyRxData() with correct parameters:
    05: After FF reception, receiver must send a FC.
    06: Sanity check - MainFunction() shall call PduR_FrArTpCopyRxData(0) and FrIf_Transmit().
    07: Call FrArTp_RxIndication() and pass a CF with wrong SN.
    08: VP(FrArTp.ASR42.SWS_FrArTp_00063.1,1) FrArTp_RxIndication() shall call PduR_FrArTpRxIndication() with correct parameters:
  
Test Input: First frame, consecutive frames with wrong SN.
Test Output: Reception aborted.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00063.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>898</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Preempted_SF_Reception_FF_CF__CF</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>1871</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test ISO and L4G compatible segmented reception with a SF preempting the current segmented reception between 1st and 2nd CF, using 1 and 2 byte addressing.
Test Object: Software
Test Precondition: 
    -   Module, callouts and test RxFrameData shall be initialized.
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a first frame with datalength &amp;gt; EBTEST_MAX_ONE_FRAME_VALUE.
    02: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    03: Sanity check - FrArTp_RxIndication() shall call PduR_FrArTpStartOfReception() and PduR_FrArTpCopyRxData() with correct parameters.
    04: After FF reception, receiver must send a FC.
    05: Sanity check - MainFunction() shall call PduR_FrArTpCopyRxData() with correct parameters and FrIf_Transmit() after it.
    06: Call FrArTp_RxIndication() and pass a CF.
    07: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    08: Sanity check - FrArTp_RxIndication() shall call PduR_FrArTpCopyRxData() with correct parameters.
    09: Call FrArTp_RxIndication() and pass a SF (current reception preempted).
    10: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    11: VP(FrArTp.ASR42.SWS_FrArTp_00083.2,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.2,1) PduR shall be reported via PduR_FrArTpRxIndication with the result E_NOT_OK; then SF frame shall be processed as the start of a new reception; and then PduR shall be reported via PduR_FrArTpRxIndication, but this time with E_OK, since it's a SF.
    12: Call FrArTp_RxIndication() and pass a CF with Sequence Number 2
    13: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    14: VP(FrArTp.ASR42.SWS_FrArTp_00083.2,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.2,1) Current reception shall be terminated, so FrArTp_RxIndication() shall make no additional function calls.
  
Test Input: First Frame, Consecutive Frame, Single Frame, Consecutive Frame: FF CF (SF) CF
Test Output: Data from one FF and one CF is received from first reception, but further reception is terminated upon reception of SF. SF is then processed as a new reception.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>128</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>899</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Preempted_SF_Reception_FF__CF</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>1910</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test ISO and L4G compatible segmented reception with a SF preempting the current segmented reception between FF and 1st CF, using 1 and 2 byte addressing.
Test Object: Software
Test Precondition: 
    -   Module, callouts and test RxFrameData shall be initialized.
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a first frame with datalength &amp;gt; EBTEST_MAX_ONE_FRAME_VALUE.
    02: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    03: Sanity check - FrArTp_RxIndication() shall call PduR_FrArTpStartOfReception() and PduR_FrArTpCopyRxData() with correct parameters.
    04: After FF reception, receiver must send a FC.
    05: Sanity check - MainFunction() shall call PduR_FrArTpCopyRxData() with correct parameters and FrIf_Transmit() after it.
    06: Call FrArTp_RxIndication() and pass a SF (current reception preempted).
    07: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    08: VP(FrArTp.ASR42.SWS_FrArTp_00083.2,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.2,1) PduR shall be reported via PduR_FrArTpRxIndication with the result E_NOT_OK; then SF frame shall be processed as the start of a new reception; and then PduR shall be reported via PduR_FrArTpRxIndication, but this time with E_OK.
    09: Call FrArTp_RxIndication() and pass a CF.
    10: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    11: VP(FrArTp.ASR42.SWS_FrArTp_00083.2,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.2,1) Current reception shall be terminated, and no additional function calls shall be made.
  
Test Input: First Frame, Single Frame, Consecutive Frame: FF (SF) CF
Test Output: Data from one FF is received from first reception, but further reception is terminated upon reception of SF. SF is then processed as a new reception.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>128</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>900</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Preempted_SF_Reception_FF_BS_CF__CF</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>1946</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test ISO and L4G compatible segmented reception with a SF preempting the current segmented reception after CF which comes after end of the first block, using 1 and 2 byte addressing.
Test Object: Software
Test Precondition: 
    -   Module, callouts and test RxFrameData shall be initialized.
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a first frame with datalength &amp;gt; EBTEST_MAX_ONE_FRAME_VALUE.
    02: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    03: Sanity check - FrArTp_RxIndication() shall call PduR_FrArTpStartOfReception() and PduR_FrArTpCopyRxData() with correct parameters.
    04: After FF reception, receiver must send a FC.
    05: Sanity check - MainFunction() shall call PduR_FrArTpCopyRxData() with correct parameters and FrIf_Transmit() after it.
    06: Receive maxBs number of CF's:
    07: Call FrArTp_RxIndication() and pass a CF.
    08: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    09: Sanity check - FrArTp_RxIndication() shall call PduR_FrArTpCopyRxData() with correct parameters.
    10: After reception of a block, receiver must send a FC.
    11: Sanity check - MainFunction() shall call PduR_FrArTpCopyRxData() with correct parameters and FrIf_Transmit() after it.
    12: Call FrArTp_RxIndication() and pass a CF.
    13: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    14: Sanity check - FrArTp_RxIndication() shall call PduR_FrArTpCopyRxData() with correct parameters.
    15: Call FrArTp_RxIndication() and pass a SF (current reception preempted).
    16: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    17: VP(FrArTp.ASR42.SWS_FrArTp_00083.2,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.2,1) PduR shall be reported via PduR_FrArTpRxIndication with the result E_NOT_OK; then SF-I frame shall be processed as the start of a new reception; and then PduR shall be reported via PduR_FrArTpRxIndication, but this time with E_OK, since it's a SF.
    18: Call FrArTp_RxIndication() and pass a CF.
    19: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    20: VP(FrArTp.ASR42.SWS_FrArTp_00083.2,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.2,1) Current reception shall be terminated, so FrArTp_RxIndication() shall make no additional function calls.
  
Test Input: First Frame, 1 Block, Consecutive Frame, Single Frame, Consecutive Frame: FF BS*CF CF (SF) CF
Test Output: Data from one FF, one block and one CF is received from first reception, but further reception is terminated upon reception of SF. SF is then processed as a new reception.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>128</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>901</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Preempted_SF_Reception_FF_BS__FC</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>1991</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test ISO and L4G compatible segmented reception with a SF preempting the current segmented reception between the first block and FC, using 1 and 2 byte addressing.
Test Object: Software
Test Precondition: 
    -   Module, callouts and test RxFrameData shall be initialized.
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a first frame with datalength &amp;gt; EBTEST_MAX_ONE_FRAME_VALUE.
    02: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    03: Sanity check - FrArTp_RxIndication() shall call PduR_FrArTpStartOfReception() and PduR_FrArTpCopyRxData() with correct parameters.
    04: After FF reception, receiver must send a FC.
    05: Sanity check - MainFunction() shall call PduR_FrArTpCopyRxData() with correct parameters and FrIf_Transmit() after it.
    06: Receive maxBs number of CF's:
    07: Call FrArTp_RxIndication() and pass a CF.
    08: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    09: Sanity check - FrArTp_RxIndication() shall call PduR_FrArTpCopyRxData() with correct parameters.
    10: Call FrArTp_RxIndication() and pass a SF (current reception preempted).
    11: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    12: VP(FrArTp.ASR42.SWS_FrArTp_00083.2,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.2,1) PduR shall be reported via PduR_FrArTpRxIndication with the result E_NOT_OK; then SF frame shall be processed as the start of a new reception; and then PduR shall be reported via PduR_FrArTpRxIndication, but this time with E_OK, since it's a SF.
    13: After reception of a block, receiver must send a FC.
    14: VP(FrArTp.ASR42.SWS_FrArTp_00083.2,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.2,1) Current reception shall be terminated, so FrArTp_MainFunction() shall make no additional function calls.
    15: Call FrArTp_RxIndication() and pass a CF.
    16: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    17: VP(FrArTp.ASR42.SWS_FrArTp_00083.2,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.2,1) Current reception shall be terminated, so FrArTp_RxIndication() shall make no additional function calls.
  
Test Input: First Frame, 1 Block, Consecutive Frame, Single Frame, Flow Control, Consecutive Frame: FF BS*CF (SF) FC CF
Test Output: Data from one FF and one block is received from first reception, but further reception is terminated upon reception of SF. SF is then processed as a new reception.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>128</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>902</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Preempted_SF_Reception_FF__FC</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>2034</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test ISO and L4G compatible segmented reception with a SF preempting the current segmented reception between FF and FC, using 1 and 2 byte addressing.
Test Object: Software
Test Precondition: 
    -   Module, callouts and test RxFrameData shall be initialized.
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a first frame with datalength &amp;gt; EBTEST_MAX_ONE_FRAME_VALUE.
    02: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    03: Sanity check - FrArTp_RxIndication() shall call PduR_FrArTpStartOfReception() and PduR_FrArTpCopyRxData() with correct parameters.
    04: Call FrArTp_RxIndication() and pass a SF (current reception preempted).
    05: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    06: VP(FrArTp.ASR42.SWS_FrArTp_00083.2,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.2,1) PduR shall be reported via PduR_FrArTpRxIndication with the result E_NOT_OK; then SF frame shall be processed as the start of a new reception; and then PduR shall be reported via PduR_FrArTpRxIndication, but this time with E_OK.
    07: After FF reception, receiver must send a FC.
    08: VP(FrArTp.ASR42.SWS_FrArTp_00083.2,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.2,1) Current reception shall be terminated, and no additional function calls shall be made.
  
Test Input: First Frame, Single Frame, Flow Control: FF (SF) FC
Test Output: Data from one FF is received from first reception, but further reception is terminated upon reception of SF. SF is then processed as a new reception.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>128</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>903</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Preempted_FF_Reception_FF_CF__CF</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>2067</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test ISO and L4G compatible segmented reception with a FF preempting the current segmented reception between 1st and 2nd CF, using 1 and 2 byte addressing. 2nd CF from previous reception shall not be received after 2nd FF. 2nd CF from the new reception shall be received instead.
Test Object: Software
Test Precondition: 
    -   Module, callouts and test RxFrameData shall be initialized.
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a first frame with datalength &amp;gt; EBTEST_MAX_ONE_FRAME_VALUE.
    02: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    03: Sanity check - FrArTp_RxIndication() shall call PduR_FrArTpStartOfReception() and PduR_FrArTpCopyRxData() with correct parameters.
    04: After FF reception, receiver must send a FC.
    05: Sanity check - MainFunction() shall call PduR_FrArTpCopyRxData() with correct parameters and FrIf_Transmit() after it.
    06: Call FrArTp_RxIndication() and pass a CF.
    07: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    08: Sanity check - FrArTp_RxIndication() shall call PduR_FrArTpCopyRxData() with correct parameters.
    09: Call FrArTp_RxIndication() and pass a second FF (current reception preempted).
    10: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    11: VP(FrArTp.ASR42.SWS_FrArTp_00083.5,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.5,1) PduR shall be reported via PduR_FrArTpRxIndication with the result E_NOT_OK; then FF frame shall be processed as the start of a new reception.
    12: After FF reception, receiver must send a FC.
    13: VP(FrArTp.ASR42.SWS_FrArTp_00083.13,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.13,1) MainFunction() shall call PduR_FrArTpCopyRxData() with correct parameters and FrIf_Transmit() after it.
    14: Call FrArTp_RxIndication() and pass a CF.
    15: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    16: VP(FrArTp.ASR42.SWS_FrArTp_00083.8,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.8,1) FrArTp_RxIndication() shall call PduR_FrArTpCopyRxData() with correct parameters.
    17: Call FrArTp_RxIndication() and pass a CF with Sequence Number 2
    18: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    19: VP(FrArTp.ASR42.SWS_FrArTp_00083.5,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.5,1) Current reception shall be terminated, and no additional function calls shall be made.
  
Test Input: First Frame, Consecutive Frame, First Frame, 2 Consecutive Frames: FF CF (FF CF) CF
Test Output: Data from one FF and one CF is received from first reception, but further reception is terminated upon reception of FF. FF is then processed as a new reception.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.13</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>139</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.13</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.8</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.8</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>904</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Preempted_FF_Reception_FF__CF</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>2129</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test ISO and L4G compatible segmented reception with a FF preempting the current segmented reception between FF and 1st CF, using 1 and 2 byte addressing.
Test Object: Software
Test Precondition: 
    -   Module, callouts and test RxFrameData shall be initialized.
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a first frame with datalength &amp;gt; EBTEST_MAX_ONE_FRAME_VALUE.
    02: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    03: Sanity check - FrArTp_RxIndication() shall call PduR_FrArTpStartOfReception() and PduR_FrArTpCopyRxData() with correct parameters.
    04: After FF reception, receiver must send a FC.
    05: Sanity check - MainFunction() shall call PduR_FrArTpCopyRxData() with correct parameters and FrIf_Transmit() after it.
    06: Call FrArTp_RxIndication() and pass a second FF (current reception preempted).
    07: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    08: VP(FrArTp.ASR42.SWS_FrArTp_00083.5,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.5,1) PduR shall be reported via PduR_FrArTpRxIndication with the result E_NOT_OK; then FF frame shall be processed as the start of a new reception.
    09: After FF reception, receiver must send a FC.
    10: VP(FrArTp.ASR42.SWS_FrArTp_00083.13,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.13,1) MainFunction() shall call PduR_FrArTpCopyRxData() with correct parameters and FrIf_Transmit() after it.
    11: Call FrArTp_RxIndication() and pass a CF.
    12: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    13: VP(FrArTp.ASR42.SWS_FrArTp_00083.8,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.8,1) FrArTp_RxIndication() shall call PduR_FrArTpCopyRxData() with correct parameters.
    14: Call FrArTp_RxIndication() and pass a CF.
    15: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    16: VP(FrArTp.ASR42.SWS_FrArTp_00083.5,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.5,1) Current reception shall be terminated, so no additional function calls shall be made.
  
Test Input: 2 First Frames, 2 Consecutive Frames: FF (FF CF) CF
Test Output: Data from one FF is received from first reception, but further reception is terminated upon reception of FF. FF is then processed as a new reception.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.13</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>139</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.13</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.8</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.8</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>905</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Preempted_FF_Reception_FF_FF__CF_CF</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>2188</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test ISO and L4G compatible segmented reception with a FF preempting the current segmented reception between FF and 1st CF, and another FF preempting the 2nd reception between FF and 1st CF, using 1 and 2 byte addressing.
Test Object: Software
Test Precondition: 
    -   Module, callouts and test RxFrameData shall be initialized.
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a first frame with datalength &amp;gt; EBTEST_MAX_ONE_FRAME_VALUE.
    02: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    03: Sanity check - FrArTp_RxIndication() shall call PduR_FrArTpStartOfReception() and PduR_FrArTpCopyRxData() with correct parameters.
    04: After FF reception, receiver must send a FC.
    05: Sanity check - MainFunction() shall call PduR_FrArTpCopyRxData() with correct parameters and FrIf_Transmit() after it.
    06: Call FrArTp_RxIndication() and pass a second FF (current reception preempted).
    07: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    08: VP(FrArTp.ASR42.SWS_FrArTp_00083.5,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.5,1) PduR shall be reported via PduR_FrArTpRxIndication with the result E_NOT_OK; then FF frame shall be processed as the start of a new reception.
    09: After FF reception, receiver must send a FC.
    10: VP(FrArTp.ASR42.SWS_FrArTp_00083.13,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.13,1) MainFunction() shall call PduR_FrArTpCopyRxData() with correct parameters and FrIf_Transmit() after it.
    11: Call FrArTp_RxIndication() and pass a third FF (current reception preempted).
    12: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    13: VP(FrArTp.ASR42.SWS_FrArTp_00083.5,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.5,1) PduR shall be reported via PduR_FrArTpRxIndication with the result E_NOT_OK; then FF frame shall be processed as the start of a new reception.
    14: After FF reception, receiver must send a FC.
    15: VP(FrArTp.ASR42.SWS_FrArTp_00083.13,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.13,1) MainFunction() shall call PduR_FrArTpCopyRxData() with correct parameters and FrIf_Transmit() after it.
    16: Call FrArTp_RxIndication() and pass a CF.
    17: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    18: VP(FrArTp.ASR42.SWS_FrArTp_00083.8,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.8,1) FrArTp_RxIndication() shall call PduR_FrArTpCopyRxData() with correct parameters.
    19: Call FrArTp_RxIndication() and pass a CF.
    20: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    21: VP(FrArTp.ASR42.SWS_FrArTp_00083.5,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.5,1) Second reception shall be terminated, and no additional function calls shall be made.
    22: Call FrArTp_RxIndication() and pass a CF.
    23: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    24: VP(FrArTp.ASR42.SWS_FrArTp_00083.5,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.5,1) First reception shall be terminated, so no additional function calls shall be made.
  
Test Input: 3 First Frames, 3 Consecutive Frames: FF (FF (FF CF) CF) CF
Test Output: Data from one FF is received from first reception, but further reception is terminated upon reception of FF. FF is then processed as a new reception.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.13</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>139</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.13</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.8</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.8</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>906</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Preempted_CF_Reception_FF__FC_CF</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>2258</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test ISO and L4G compatible segmented reception with a CF preempting the current segmented reception between FF and FC, using 1 and 2 byte addressing.
Test Object: Software
Test Precondition: 
    -   Module, callouts and test RxFrameData shall be initialized.
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a first frame with datalength &amp;gt; EBTEST_MAX_ONE_FRAME_VALUE.
    02: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    03: Sanity check - FrArTp_RxIndication() shall call PduR_FrArTpStartOfReception() and PduR_FrArTpCopyRxData() with correct parameters.
    04: Call FrArTp_RxIndication() and pass a CF.
    05: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    06: VP(FrArTp.ASR42.SWS_FrArTp_00083.9,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.9,1) Preempting CF is ignored, so FrArTp_RxIndication() shall make no additional function calls.
    07: After FF reception, receiver must send a FC.
    08: Sanity check - MainFunction() shall call PduR_FrArTpCopyRxData() with correct parameters and FrIf_Transmit() after it.
    09: Call FrArTp_RxIndication() and pass a CF.
    10: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    11: Sanity check - FrArTp_RxIndication() shall call PduR_FrArTpCopyRxData() with correct parameters.
    12: Sanity check - No unexpected function has been called.
  
Test Input: First Frame, Consecutive Frame, Flow Control, Consecutive Frame: FF (CF) FC CF
Test Output: Data from one FF is received from first reception and CF that gets received before FC is ignored. Further reception is then continued.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.9</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>135</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.9</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>907</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Preempted_CF_Reception_FF_BS__FC</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>2294</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test ISO and L4G compatible segmented reception with a CF preempting the current segmented reception between the end of the first block and FC, using 1 and 2 byte addressing.
Test Object: Software
Test Precondition: 
    -   Module, callouts and test RxFrameData shall be initialized.
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a first frame with datalength &amp;gt; EBTEST_MAX_ONE_FRAME_VALUE.
    02: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    03: Sanity check - FrArTp_RxIndication() shall call PduR_FrArTpStartOfReception() and PduR_FrArTpCopyRxData() with correct parameters.
    04: After FF reception, receiver must send a FC.
    05: Sanity check - MainFunction() shall call PduR_FrArTpCopyRxData() with correct parameters and FrIf_Transmit() after it.
    06: Receive maxBs number of CF's:
    07: Call FrArTp_RxIndication() and pass a CF.
    08: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    09: Sanity check - FrArTp_RxIndication() shall call PduR_FrArTpCopyRxData() with correct parameters.
    10: Call FrArTp_RxIndication() and pass a CF (current reception preempted).
    11: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    12: VP(FrArTp.ASR42.SWS_FrArTp_00083.9,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.9,1) Preempting CF is ignored, so FrArTp_RxIndication() shall make no additional function calls.
    13: After FF reception, receiver must send a FC.
    14: Sanity check - MainFunction() shall call PduR_FrArTpCopyRxData() with correct parameters and FrIf_Transmit() after it.
    15: Call FrArTp_RxIndication() and pass a CF.
    16: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    17: Sanity check - FrArTp_RxIndication() shall call PduR_FrArTpCopyRxData() with correct parameters.
    18: Sanity check - No unexpected function has been called.
  
Test Input: First Frame, Block, Consecutive Frame, Flow Control: FF BS (CF) FC
Test Output: Data from one FF and one block is received from first reception and CF that gets received before FC is ignored. Further reception is then continued.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.9</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>135</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.9</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>908</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Idle_CF_Reception</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>2336</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test ISO compatible segmented reception with a CF reception on an idle connection, using 1 and 2 byte addressing.
Test Object: Software
Test Precondition: 
    -   Module, callouts and test RxFrameData shall be initialized.
    -   Prepare CF frame with correct address type, addresses and different lengths.
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a consecutive frame.
    02: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    03: VP(FrArTp.ASR42.SWS_FrArTp_00083.10,1) Current reception shall be ignored, and no additional function calls shall be made.
    04: Sanity check - After CF reception, receiver ignores CF. Single frame receive is available.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.10</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>909</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Idle_FC_Reception</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>2358</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test ISO compatible segmented reception with a FC reception on an idle connection, using 1 and 2 byte addressing.
Test Object: Software
Test Precondition: 
    -   Module, callouts and test RxFrameData shall be initialized.
    -   Prepare FC frame with correct address type and addresses.
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a flow control frame.
    02: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    03: VP(FrArTp.ASR42.SWS_FrArTp_00083.14,1) Current reception shall be ignored, and no additional function calls shall be made.
    04: Sanity check - After FC reception, receiver ignores FC. Single frame receive is available.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.14</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>140</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>910</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_FrArTpISO_SFE_FFE_CF2_AF_Reception</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>2380</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test ISO compatible segmented reception with a SFE FFE CF2 and AF reception on an idle connection, using 1 and 2 byte addressing.
Test Object: Software
Test Precondition: 
    -   Module, callouts and test RxFrameData shall be initialized.
    -   Prepare SFE, FFE, CF2, AF frame with correct address type, addresses and different lengths.
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a SFE, FFE, CF2 and AF frame.
    02: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception. Check if the FrArTp send RxIndication() to a lower layer.
    03: VP(FrArTp.ASR42.SWS_FrArTp_00083.15,1) Current reception shall be ignored, and no additional function calls shall be made.
    04: Sanity check - After reception of L4G on ISO connection, receiver ignores L4G frames. Single frame SF receive is available.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.15</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>911</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_FrArTpTimeBr</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>2402</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Call FrArTp_RxIndication API with FT = FF, datalength &amp;gt; 254 bytes, with available buffer size that is not large enough for the next block Test ISO compatible segmented reception for 1 and 2 byte addressing.
Test Object: Software
Test Precondition: 
    -   Initialize input data of frames.
    -   Initialize FrArTp module and stubs.
    -   Set stub buffer sizes to valid FF-I datalength sizes.
    -   Change parameters of maxBS and STmin.
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a first frame with datalength &amp;gt; EBTEST_MAX_ONE_FRAME_VALUE.
    02: Sanity check - FrArTp_RxIndication() shall call PduR_FrArTpStartOfReception() with correct parameters:
    03: Sanity check - FrArTp_RxIndication() shall call PduR_FrArTpCopyRxData() with correct parameters:
    04: Set available buffer to a value smaller than block size.
    05: Call MainFunction 10U times (FrArTpTimeBr = 10U) while buffer size is to small for one block of CFs to produce a first timeout.
    06: VP(FrArTp.ASR42.SWS_FrArTp_00297.1,1) PduR_FrArTpCopyRxData shall be called repeatedly with PduInfo.SduLength equal to 0 until the available buffer is large enough. The calls shall be repeated until FrArTpTimeBr expires.
    07: VP(FrArTp.ASR42.SWS_FrArTp_00301,1) When timerBr has expired LLR and FrIf_Transmit shall be called with correct parameters.
    08: Call FrArTp_TriggerTransmit(), update the values of FC frame to transmit FC.
    09: Sanity check - FrArTp_TriggerTransmit shall call corresponding LLR function with correct parameters.
    10: VP(FrArTp.ASR42.SWS_FrArTp_00301,1) FrArTp_TriggerTransmit() shall set the Frame Status field to WT.
    11: Call FrArTp_TxConfirmation(), enter in checkbuffer state.
    12: Sanity check - FrArTp_TxConfirmation shall call corresponding Low Level Routing function with correct parameters.
    13: Call MainFunction 10U times (FrArTpTimeBr = 10U) while buffer size is too small for one block of CFs to produce a second timeout.
    14: VP(FrArTp.ASR42.SWS_FrArTp_00297.1,1) First MainFunction(10U) shall call PduR_FrArTpCopyRxData(0), still not enough available buffer. Second MainFunction(10U) shall call PduR_FrArTpRxIndication()with correct parameters: (according to SWS_FrArTp_00301 the retry phase shall start again, but at most FrArTpMaxWft times (in this testcase FrArTpMaxWft=1)):
    15: VP(FrArTp.ASR42.SWS_FrArTp_00067.3,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00295.2,1) When a number of FlowControl frames, with FlowStatus set to Wait, has reached the FrArTpMaxWft, the transfer shall be aborted.
  
Test Input: FF-I, update available buffer to a small value.
Test Output: Status wait frames.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00297.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>277</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00301</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>279</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00067.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00295.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>282</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>912</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_FrArTpTimeBr_CF</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>2452</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Call FrArTp_RxIndication API with FT = CF, (datalength of next block) &amp;gt; (available buffer size). Test ISO compatible segmented reception for 1 and 2 byte addressing.
Test Object: Software
Test Precondition: 
    -   Initialize input data of the frames.
    -   Initialize the FrArTp module and its stubs.
    -   Set stub buffer sizes to valid FF-I datalength sizes.
    -   Change parameters of maxBS and STmin.
    -   Receive FF-I
    -   Transmit FC(CTS)
  
Test Execution: 
    01: Receive one block of CFs.
    02: Set available buffer to a value smaller than block size.
    03: Call MainFunction 10U times (FrArTpTimeBr = 10U) to produce a first timeout.
    04: VP(FrArTp.ASR42.SWS_FrArTp_00297.2,1) PduR_FrArTpCopyRxData shall be called repeatedly with PduInfo.SduLength equal to 0 until the available buffer is large enough. The calls shall be repeated until FrArTpTimeBr expires.
    05: VP(FrArTp.ASR42.SWS_FrArTp_00301,1) When timerBr has expired, LLR and FrIf_Transmit shall be called with correct parameters.
    06: Call FrArTp_TriggerTransmit(), update the values of FC frame to transmit FC.
    07: VP(FrArTp.ASR42.SWS_FrArTp_00301,1) FrArTp_TriggerTransmit() shall set the Frame Status field to WT.
    08: Confirm transmission of FC and enter in checkbuffer state.
    09: Call MainFunction() to cause timeout FrArTpTimeBr expired.
    10: Sanity check - When there is no available buffer for incoming block of CFs. MainFunction() shall call PduR_FrArTpCopyRxData(0) until timeBr expires.
    11: VP(FrArTp.ASR42.SWS_FrArTp_00067.3,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00295.2,1) Last call to the MainFunction(), after FrArTpMaxWft retry limit expires. The transfer shall be aborted with PduR_FrArTp_RxIndication call and response E_NOT_OK.
    12: Generate another incoming frame with correct data and receive.
    13: VP(FrArTp.ASR42.SWS_FrArTp_00117.1,1) No additional function calls. The incoming frames shall be discarded.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00297.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>278</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00301</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>279</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00067.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00295.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>282</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00117.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>284</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>913</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_FrArTpTimeoutCr</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>2504</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Call FrArTp_TriggerTransmit() that transmits FC, and wait for CF on the receiver. Test ISO compatible segmented reception FrArTpTimeoutCr timeout for 1 and 2 byte.
Test Object: Software
Test Precondition: 
    -   Initialize Stubs and set available buffer to a large value.
    -   Change parameters of maxBS and STmin.
    -   Initialize input data of frames.
    -   Receive FF-I to start the reception.
    -   Transmit FC(CTS).
  
Test Execution: 
    01: Receive (0U) to (maxBS - 1U) of CFs.
    02: Call MainFunction() to cause timeout FrArTpTimeoutCr expired.
    03: VP(FrArTp.ASR42.SWS_FrArTp_00265.1,1) Check that PduR_RxIndication was called with E_NOT_OK, which indicates that FrArTpTimeoutCr has expired.
    04: Try to receive CF which shall be ignored.
    05: VP(FrArTp.ASR42.SWS_FrArTp_00265.1,1) Check that CF has been ignored, which indicates that FrArTpTimeoutCr has expired and connection was aborted.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00265.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>206</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>914</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_FrArTpTimeoutAr</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>2530</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test a segmented reception where a FrArTpTimeoutAr occurs between the transmission request of a flow control frame and its transmission confirmation.
Test Object: Software
Test Precondition: 
    -   Initialize Stubs and set available buffer value.
  
Test Execution: 
    01: Iterate the sequence for multiple channels with different max message lengths and address sizes.
    02: Receive FF-I/E via FrArTp_RxIndication() to start the segmented reception.
    03: Call FrArTp_MainFunction() to trigger the transmission request of a FC frame via FrIf_Transmit().
    04: In the even iterations, call FrArTp_TriggerTransmit() to retrieve the FC frame.
    05: Elapse as many FrArTp_MainFunction() calls so that there is one missing until a timeout.
    06: Elapse another FrArTp_MainFunction() call.
    07: VP(FrArTp.ASR42.SWS_FrArTp_00263.1,1) PduR_FrArTpTxConfirmation() is called with correct parameters.
    08: In the odd iterations, call FrArTp_TriggerTransmit() to check that it fails.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00263.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>202</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>915</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_OVFLW_Segmented</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>2555</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test ISO compatible segmented reception (1 and 2 byte addressing) with PduR_FrTpStartOfReception() returning BUFREQ_E_OVFL.
Test Object: Software
Test Precondition: 
    -   Initialize input data of frames.
    -   Initialize module and stubs.
    -   Set start of reception buffer status to overflow.
  
Test Execution: 
    01: Generate FF-I incoming frame. Call FrArTp_RxIndication() and pass a first frame. PduR_FrArTpStartOfReception returns BUFREQ_E_OVFL.
    02: Sanity check - FrArTp_RxIndication() shall call PduR_FrArTpStartOfReception() with correct parameters. RxPduId shall have value of rxHandleId. TpSduLength shall have value DL field.
    03: Call FrArTp_MainFunction() to process the OVFLW.
    04: Sanity check - FrArTp_MainFunction() shall call FrIf_Transmit and corresponding LLR function with correct parameters.
    05: Call FrArTp_TriggerTransmit() to transmit the FC frame.
    06: Sanity check - FrArTp_TriggerTransmit shall call corresponding LLR function with correct parameters.
    07: VP(FrArTp.EB.AUDI_ASR_FrTP_014.1,1) Check that a FC frame was sent. FC Frame Status field shall contain FRM_STAT_OVFLW value.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.AUDI_ASR_FrTP_014.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>449</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>916</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_1ToN_Rx_Ignored</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>2581</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test that FrArTp_RxIndication ignores received frames for 1:n connections (FrArTpMultRec = true) that indicate that segmentation is used (i.e. FF-I/E, CF, and FC).
Test Object: Software
Test Precondition: 
    -   Initialize the module and test environment.
  
Test Execution: 
    01: iterate the test case for different connections
    02: construct and indicate the reception of an FF-I/E
    03: VP(FrArTp.ASR42.SWS_FrArTp_00086.4,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00086.5,1) The reception indication has been ignored.
    04: Construct and indicate the reception of an CF
    05: VP(FrArTp.ASR42.SWS_FrArTp_00086.6,1) The reception indication has been ignored.
    06: Construct and indicate the reception of an FC
    07: VP(FrArTp.ASR42.SWS_FrArTp_00087.1,1) The reception indication has been ignored.
    08: Construct and indicate the reception of an SF-I/E
    09: Sanity check - The reception has been processed successfully and forwareded to the upper layer
  
Test Input: FF-I/Es, CFs and FCs corresponding to 1:n connections for ISO/L4G and one/two byte addressing
Test Output: Ignored reception indications</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00086.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>171</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00086.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00086.6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>173</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00087.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>917</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Unsegmented_Transfer</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>2628</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test successful unsegmented transmission (single frame).
Test Object: Software
Test Precondition: 
    -   Initialize module.
    -   PduR stub shall provide tx data.
  
Test Execution: 
    01: Call FrArTp_Transmit() for a valid TxSdu and payload length suitable for unsegmented transmission.
    02: VP(FrArTp.ASR42.SWS_FrArTp_00149,1) FrArTp_Transmit() shall return E_OK.
    03: Call FrArTp_MainFunction()
    04: VP(FrArTp.ASR42.SWS_FrArTp_00106.1,1) FrArTp_MainFunction() shall call PduR_FrArTpCopyTxData.
    05: VP(FrArTp.ASR42.SWS_FrArTp_00232.1,1) PduR_FrArTpCopyTxData() shall be called with retryInfoPtr set to NULL_PTR.
    06: Call FrArTp_MainFunction(), go to state Tx-Pending.
    07: VP(FrArTp.VAG.AUDI_ASR_FrTP_059,1)
        VP(FrArTp.VAG.AUDI_ASR_FrTP_064,1)
        VP(FrArTp.VAG.AUDI_ASR_FrTP_039,1)
        VP(FrArTp.VAG.AUDI_ASR_FrTP_066,1) LLR_FrTp_FrIf_Transmit call shall immediately preceed FrIf_Transmit call.
    08: VP(FrArTp.VAG.AUDI_ASR_FrTP_061,1) FrArTp_MainFunction() shall call FrIf_Transmit().
    09: Call FrArTp_TriggerTransmit().
    10: VP(FrArTp.VAG.AUDI_ASR_FrTP_064,1)
        VP(FrArTp.VAG.AUDI_ASR_FrTP_039,1)
        VP(FrArTp.VAG.AUDI_ASR_FrTP_066,1) low-level routing call out MyLLR_FrIf_FrTp_TriggerTransmit().
    11: VP(FrArTp.ASR42.SWS_FrArTp_00230,1) FrArTp_TriggerTransmit() shall call PduR_FrArTpCopyTxData().
    12: VP(FrArTp.ASR42.SWS_FrArTp_00232.1,1) PduR_FrArTpCopyTxData() shall be called with retryInfoPtr set to NULL_PTR.
    13: Call FrArTp_TxConfirmation().
    14: VP(FrArTp.VAG.AUDI_ASR_FrTP_049,1)
        VP(FrArTp.VAG.AUDI_ASR_FrTP_053,1)
        VP(FrArTp.VAG.AUDI_ASR_FrTP_050,1.1)
        VP(FrArTp.VAG.AUDI_ASR_FrTP_051,1)
        VP(FrArTp.VAG.AUDI_ASR_FrTP_064,1)
        VP(FrArTp.VAG.AUDI_ASR_FrTP_039,1)
        VP(FrArTp.VAG.AUDI_ASR_FrTP_066,1) If low level routing is activated, FrArTp_TxConfirmation() shall call &amp;lt;prefix&amp;gt;LLR_FrIf_FrTp_TxConfirmation() immediately after being called with the parameter correctly mapped:
    15: VP(FrArTp.EB.1to1ConWithoutAck_Unsegmented.1,1)
        VP(FrArTp.EB.1to1ConWithoutAck_Unsegmented.2,1) FrArTp_TxConfirmation() shall call PduR_FrArTpTxConfirmation(), Single frame (unsegmented) is transmitted, transfer has been finished.
    16: VP(FrArTp.ASR42.SWS_FrArTp_00024,1) Verify correctly constructed SF: PCI.
    17: Sanity check - Verify correctly constructed SF: remote/local address (Not compliant to ISO 15765-2).
    18: VP(FrArTp.ASR42.SWS_FrArTp_00023,1) Verify correctly constructed SF: Length and payload.
    19: Sanity check - No additional function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00149</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>302</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00106.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>246</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00232.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>243</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_059</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>479</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>486</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>459</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_066</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>488</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_061</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00230</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>240</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_049</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>469</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_053</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>473</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_050</linksto>
          <dstversion>1.1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>470</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_051</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>471</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.1to1ConWithoutAck_Unsegmented.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>431</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.1to1ConWithoutAck_Unsegmented.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>432</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00023</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>918</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Unsegmented_Transfer_ReqFromTxConf</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>2741</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test successful FrArTp_Transmit during PduR_FrArTpTxConfirmation of unsegmented transmission (single frame).
Test Object: Software
Test Precondition: 
    -   Initialize module.
    -   PduR stub shall provide tx data.
  
Test Execution: 
    01: Call FrArTp_Transmit() for a valid TxSdu and payload length suitable for unsegmented transmission.
    02: Sanity check - FrArTp_Transmit() shall return E_OK.
    03: Call FrArTp_MainFunction()
    04: VP(FrArTp.ASR42.SWS_FrArTp_00106.1,1) FrArTp_MainFunction() shall call PduR_FrArTpCopyTxData.
    05: Sanity check - PduR_FrArTpCopyTxData() shall be called with retryInfoPtr set to NULL_PTR.
    06: Call FrArTp_MainFunction(), go to state Tx-Pending.
    07: Sanity check - LLR_FrArTp_FrIf_Transmit call shall immediately preceed FrIf_Transmit call.
    08: Sanity check - FrArTp_MainFunction() shall call FrIf_Transmit().
    09: Call FrArTp_TriggerTransmit().
    10: Sanity check - low-level routing call out MyLLR_FrIf_FrTp_TriggerTransmit().
    11: Sanity check - FrArTp_TriggerTransmit() shall call PduR_FrArTpCopyTxData().
    12: Sanity check - PduR_FrArTpCopyTxData() shall be called with retryInfoPtr set to NULL_PTR.
    13: Set callout of PduR_FrTpTxConfirmation to trigger FrArTp_Transmit during call
    14: Call FrArTp_TxConfirmation().
    15: Sanity check - If low level routing is activated, FrArTp_TxConfirmation() shall call &amp;lt;prefix&amp;gt;LLR_FrIf_FrTp_TxConfirmation() immediately after being called with the parameter correctly mapped:
    16: FrArTp_TxConfirmation() shall call PduR_FrArTpTxConfirmation() which triggers a new transmition for the same TxPduId. Single frame (unsegmented) is transmitted, transfer has been finished.
    17: VP(FrArTp.EB.TransmissionRequestFromTxConfirmation,1) FrArTp_Transmit returns E_OK.
    18: Reset callout of PduR_FrTpTxConfirmation
    19: Sanity check - No additional function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00106.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>246</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.TransmissionRequestFromTxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>453</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>919</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Unsegmented_Transfer_SFE</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>2782</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test ISO compatible unsegmented transfer lengths for 1 byte addressing, single frame extended.
Test Object: Software
Test Precondition: 
    -   Initialize FrArTp module.
  
Test Execution: 
    01: PduR calls FrArTp_Transmit().
    02: VP(FrArTp.ASR42.SWS_FrArTp_00106.1,1) Return value of FrArTp_Transmit() shall be E_OK.
    03: FrArTp calls FrArTp_MainFunction() to update available buffer.
    04: VP(FrArTp.ASR42.SWS_FrArTp_00232.1,1) FrArTp_MainFunction() shall call PduR_FrArTpCopyTxData() with correct parameters:
    05: Call FrArTp_MainFunction() to enter in state txpending.
    06: Sanity check - Corresponding Low Level Routing function shall be called, FrArTp_MainFunction() shall call FrIf_Transmit() with correct parameters:
    07: Call FrArTp_TriggerTransmit().
    08: Sanity check - Corresponding Low Level Routing function shall be called.
    09: VP(FrArTp.ASR42.SWS_FrArTp_00106.1,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00232.1,1) Check return value of FrArTp_TriggerTransmit() is E_OK. FrArTp_TriggerTransmit() shall call PduR_FrArTpCopyTxData() with correct parameters:
    10: Call FrArTp_TxConfirmation(). Enter idle state.
    11: Sanity check - Corresponding Low Level Routing function shall be called.
    12: Sanity check - FrArTp_TxConfirmation() shall call PduR_FrArTpTxConfirmation() with correct parameters:
    13: VP(FrArTp.ASR42.SWS_FrArTp_00029,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00030.1,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00030.2,1) Check values of pduInfoTx:
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00106.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>246</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00232.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>243</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00030.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00030.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>920</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Segmented_Transmission_StandardFunctions</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>2831</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Call standard functions in ISO and L4G segmented transmission with 1 and 2 byte addressing.
Test Object: Software
Test Precondition: 
    -   Set the stub callout functions. Reset the Rx buffer. Flush trace after init.
    -   Initialize test counters.
    -   Prepare reception FC frame.
    -   Prepare datelength to transmit FF and one CF.
    -   Construct reception FC frame.
  
Test Execution: 
    01: VP(FrArTp.ASR42.SWS_FrArTp_00147,1) Module shall be initialized with call to the FrArTp_Init() with correct configuration.
    02: PduR calls FrArTp transmit to indicate there is data for transmission.
    03: VP(FrArTp.ASR42.SWS_FrArTp_00162,1) SchM shall call FrArTp_MainFunction to prepare module for transmission of the data.
    04: Sanity check - FrArTp_MainFunction shall call PduR_FrArTpCopyTxData with correct parameters.
    05: VP(FrArTp.ASR42.SWS_FrArTp_00162,1) SchM shall call FrArTp_MainFunction to prepare FF for transmission.
    06: Sanity check - FrArTp_MainFunction shall call LLR Transmit and FrIf_Transmit with correct parameters.
    07: VP(FrArTp.ASR42.SWS_FrArTp_00154,1) FrArTp shall call FrArTp_TriggerTransmit to copy CF data to the FrIf Pdu buffer.
    08: Sanity check - FrArTp_TriggerTransmit shall return E_OK.
    09: VP(FrArTp.ASR42.SWS_FrArTp_00153,1) FrIf shall call FrArTp_TxConfirmation to confirm the transmission of an FF.
    10: Sanity check - FrArTp_TxConfirmation shall call LLR TxConfirmation with correct parameters.
    11: VP(FrArTp.EB.FrArTp_RxIndication,1) FrIf shall call FrArTp_RxIndication to pass received FC to the module after transmitted FF-x.
    12: Sanity check - FrArTp_RxIndication shall call corresponding Low Level Routing function with correct parameters.
    13: VP(FrArTp.ASR42.SWS_FrArTp_00162,1) SchM shall call FrArTp_MainFunction to prepare CF for transmission.
    14: Sanity check - FrArTp_MainFunction shall call LLR Transmit and FrIf_Transmit with correct parameters.
    15: VP(FrArTp.ASR42.SWS_FrArTp_00154,1) FrArTp shall call FrArTp_TriggerTransmit to copy CF data to the FrIf Pdu buffer.
    16: Sanity check - FrArTp_TriggerTransmit shall return E_OK, and transmitted frame shall have correct parameters.
    17: VP(FrArTp.ASR42.SWS_FrArTp_00153,1) FrIf shall call FrArTp_TxConfirmation to confirm the transmission of an CF.
    18: Sanity check - FrArTp_TxConfirmation shall call LLR TxConfirmation with correct parameters.
    19: Sanity check - PduR shall call PduR_FrArTpTxConfirmation upon succesful transmit of the message.
    20: Sanity check - Ensure no additional function calls are done after transfer is completed.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00147</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>300</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00162</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>309</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00154</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>306</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00153</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>308</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.FrArTp_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>451</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>921</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Segmented_Transfer_BlockSizeZero</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>2888</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test ISO compatible segmented transfer (receiving FC frames with BlockSize set to value 0), 1 byte addressing.
Test Object: Software
Test Precondition: 
    -   Initialize test iteration variables.
  
Test Execution: 
    01: Iterate through initialized lengths 8 (min FF-I) to 4095 (max FF-I).
    02: Iterate through initialized block sizes 0 to 255.
    03: Reinitialize the module for each iteration of BlockSize and DataLength.
    04: Call FrArTp_Transmit() to start segmented transmission.
    05: Sanity check - FrArTp_Transmit() shall return E_OK if transmission has been accepted.
    06: Call FrArTp_MainFunction() to update available buffer.
    07: Sanity check - FrArTp_MainFunction() shall call PduR_FrArTpCopyTxData() with correct parameters:
    08: Call FrArTp_MainFunction() to enter in state txpending
    09: VP(FrArTp.VAG.AUDI_ASR_FrTP_059,1) LLR_FrTp_FrIf_Transmit call shall immediately preceed FrIf_Transmit call.
    10: VP(FrArTp.VAG.AUDI_ASR_FrTP_061,1) FrArTp_MainFunction() shall call FrIf_Transmit() with correct parameters:
    11: Call FrArTp_TriggerTransmit() for first frame
    12: Sanity check - FrArTp_TriggerTransmit() shall call PduR_FrArTpCopyTxData() with correct parameters:
    13: Sanity check - Check values of pduInfoTx:
    14: Call FrArTp_TxConfirmation() (wait for FC)
    15: VP(FrArTp.ASR42.SWS_FrArTp_00064.2,1) 1/2 On TxConfirmation call after transmission of an FF-I, the FrArTp shall be set to expect reception of an FC frame.
    16: Call FrArTp_RxIndication() (construct and receive a FC)
    17: VP(FrArTp.ASR42.SWS_FrArTp_00064.2,1) 2/2 After transmitted FF-I frame, the FrArTp shall receive and process an FC frame, and the transmission shall continue with the transmission of an CF.
    18: Call FrArTp_MainFunction() to requests the sending of a PDUs
    19: VP(FrArTp.ASR42.SWS_FrArTp_00068.1,1) Transmit all SDUs, after receiving BS=0.
    20: Call FrArTp_RxIndication() to receive an FC after each block of CFs.
    21: Sanity check - FrArTp_RxIndication() shall be called with correct parameters.
    22: Call FrArTp_MainFunction() to requests the sending of a PDUs
    23: FrArTp_MainFunction() shall call FrIf_Transmit()( EBTEST_FRARTP_NR_OF_TXPDUS nr of times) with correct parameters:
    24: VP(FrArTp.VAG.AUDI_ASR_FrTP_059,1) LLR_FrTp_FrIf_Transmit call shall immediately preceed FrIf_Transmit call.
    25: VP(FrArTp.VAG.AUDI_ASR_FrTP_061,1) If LLR_FrTp_FrIf_Transmit was called and returned E_OK (or if LLR_FrTp_FrIf_Transmit wasn't called), FrArTp calls FrIf_Transmit.
    26: Call FrArTp_TriggerTransmit() multiple times
    27: Sanity check - check for LLR FrArTp_TriggerTransmit()
    28: Sanity check - FrArTp_TriggerTransmit() shall call PduR_FrArTpCopyTxData() with correct parameters:
    29: VP(FrArTp.ASR42.SWS_FrArTp_00061.2,1) SN of the CF that immediately follows CF with SN 0xF shall be set to 0.
    30: VP(FrArTp.ASR42.SWS_FrArTp_00061.2,1) SN of the CF that immediately follows CF with SN 0xF shall be set to 0.
    31: Call FrArTp_TxConfirmation() (check remaining data to transfer)
    32: Sanity check - check for LLR FrArTp_TxConfirmation()
    33: Call FrArTp_MainFunction() shall trigger tx and expire StMin
    34: Sanity check - FrArTp_TxConfirmation() shall call PduR_FrArTpTxConfirmation() with correct parameters:
    35: Sanity check - No additional function shall be called.
  
Test Input: FF-I lengths min(8) to max(4095). FC block sizes from 0 to 255.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_059</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>479</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_061</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>481</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00064.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>86</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00068.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>96</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00061.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>922</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Segmented_Transfer_ReqFromTxConf</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>2957</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test successful FrArTp_Transmit during PduR_FrArTpTxConfirmation of ISO compatible segmented transmission
Test Object: Software
Test Precondition: 
    -   Initialize FrArTp module.
  
Test Execution: 
    01: Call FrArTp_Transmit() and FrArTp_MainFunction() to update available buffer.
    02: Sanity check - FrArTp_MainFunction() shall call PduR_FrArTpCopyTxData() with correct parameters:
    03: Call FrArTp_MainFunction() to enter in state txpending.
    04: Sanity check -
    05: Call FrArTp_TriggerTransmit() for first frame.
    06: Sanity check -
    07: Sanity check - FrArTp_TriggerTransmit() shall call PduR_FrArTpCopyTxData() with correct parameters:
    08: Sanity check - Check values of pduInfoTx:
    09: Sanity check - Check that pduInfoTx.SduLength equals EBTEST_FRARTP_PAYLOAD_LENGTH_CH2 Check payload after FrArTp_TriggerTransmit() call
    10: Call FrArTp_TxConfirmation() (wait for FC)
    11: Sanity check -
    12: Call FrArTp_RxIndication() (receive a FC)
    13: Sanity check -
    14: Call FrArTp_MainFunction() to requests the sending of a PDUs.
    15: Sanity check - FrArTp_MainFunction() shall call FrIf_Transmit()( EBTEST_FRARTP_NR_OF_TXPDUS nr of times) with correct parameters:
    16: Sanity check -
    17: Sanity check -
    18: Call FrArTp_TriggerTransmit() for consecutive frames.
    19: Sanity check - FrArTp_TriggerTransmit() shall call PduR_FrArTpCopyTxData() with correct parameters:
    20: Sanity check - Check payload after FrArTp_TriggerTransmit() call.
    21: Call FrArTp_TxConfirmation() (check remaining data to transfer).
    22: Sanity check -
    23: Call FrArTp_MainFunction() to requests the sending of a PDUs and to force stMin timeout.
    24: Set callout of PduR_FrTpTxConfirmation to trigger FrArTp_Transmit during call of last segment
    25: Call FrArTp_TxConfirmation() (check remaining data to transfer).
    26: Sanity check -
    27: Sanity check - After transmission of all CFs FrArTp_TxConfirmation() shall call PduR_FrArTpTxConfirmation() with correct parameters:
    28: VP(FrArTp.EB.TransmissionRequestFromTxConfirmation,1) FrArTp_Transmit returns E_OK.
    29: Reset callout of PduR_FrTpTxConfirmation
    30: Sanity check - No additional function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.TransmissionRequestFromTxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>453</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>923</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Segmented_Transmission_With_Reception</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>3004</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test ISO segmented transmission with incoming SF-I, FF-I and CF.
Test Object: Software
Test Precondition: 
    -   Prepare reception Rx frame types SF, FF, CF and FC.
    -   Prepare interrupt frame for receive (SF, FF or CF), and initialize states of interrupt reception to not received.
    -   Initialize the module.
  
Test Execution: 
    01: VP(FrArTp.EB.FFI.FRAME_LENGTH.1,1) PduLength of the transmitted FF-I shall be of length 10 when 1 byte address size is used, and shall be of length 12 when 2 byte address size is used.
    02: VP(FrArTp.ASR42.SWS_FrArTp_00083.1,1) Received SF-I on ISO connection shall start a new reception.
    03: VP(FrArTp.ASR42.SWS_FrArTp_00083.4,1) Received FF-I on ISO connection shall start a new reception.
    04: VP(FrArTp.ASR42.SWS_FrArTp_00083.7,1) Received CF shall be ignored if there is no started ongoing reception.
    05: VP(FrArTp.ASR42.SWS_FrArTp_00094,1) Reception performed within the same connection as transmission.
    06: VP(FrArTp.ASR42.SWS_FrArTp_00083.11,1) Received FC after each block of CFs. FC shall be processed normally.
    07: VP(FrArTp.ASR42.SWS_FrArTp_00083.1,1) Received SF-I on ISO connection shall start a new reception.
    08: VP(FrArTp.ASR42.SWS_FrArTp_00083.4,1) Received FF-I on ISO connection shall start a new reception.
    09: VP(FrArTp.ASR42.SWS_FrArTp_00083.7,1) Received CF shall be ignored if there is no started ongoing reception.
    10: VP(FrArTp.ASR42.SWS_FrArTp_00083.1,1) Received SF-I on ISO connection shall start a new reception.
    11: VP(FrArTp.ASR42.SWS_FrArTp_00083.4,1) Received FF-I on ISO connection shall start a new reception.
    12: VP(FrArTp.ASR42.SWS_FrArTp_00083.7,1) Received CF shall be ignored if there is no started ongoing reception.
    13: VP(FrArTp.ASR42.SWS_FrArTp_00083.1,1) Received SF-I on ISO connection shall start a new reception.
    14: VP(FrArTp.ASR42.SWS_FrArTp_00083.4,1) Received FF-I on ISO connection shall start a new reception.
    15: VP(FrArTp.ASR42.SWS_FrArTp_00083.7,1) Received CF shall be ignored if there is no started ongoing reception.
    16: Sanity check - remaining = 0 -&amp;gt; go to idle
    17: Sanity check - No additional function shall be called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FFI.FRAME_LENGTH.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>424</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>127</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>130</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.7</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00094</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.11</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>137</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>924</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Segmented_Transmission_With_Reception_FC</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>3060</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test ISO segmented transmission with incoming FC. If FC is not expected, it is ignored.
Test Object: Software
Test Precondition: 
  
Test Execution: 
    01: Iterate the test case with different flow status for the unexpected FC frames.
    02: Start the segmented transmission with FrArTp_Transmit().
    03: Sanity check - The transmission request has been accepted.
    04: Receieve an unexpected FC.
    05: VP(FrArTp.ASR42.SWS_FrArTp_00083.12,1) When module is preparing for transmission, after FrArTp_Transmit, FC shall be ignored.
    06: Elapse a main function cycle.
    07: Sanity check - Transmit data length shall be retrieved with PduR_FrArTpCopyTxData().
    08: Receieve an unexpected FC.
    09: VP(FrArTp.ASR42.SWS_FrArTp_00083.12,1) When module is preparing for transmission, after FrArTp_Transmit and first FrArTp_MainFunction, FC shall be ignored.
    10: Elapse a main function cycle.
    11: VP(FrArTp.ASR42.SWS_FrArTp_00259,1) Check that LLR Transmit function has been called with correct parameters. Check that the last PDU of a PDU pool (EBTEST_CH1_PDUPOOL_SIZE - 1U) within a FlexRay cycle is always used by the scheduling.
    12: Receieve an unexpected FC.
    13: VP(FrArTp.ASR42.SWS_FrArTp_00083.12,1) When module is preparing for transmission, after second FrArTp_MainFunction and before FrArTp_TriggerTransmit for FF-I, FC shall be ignored.
    14: Transmission is triggered with FrArTp_TriggerTransmit().
    15: Sanity check - Transmit data shall be retrieved with PduR_FrArTpCopyTxData().
    16: Sanity check - Frame format shall be as expected.
    17: Sanity check - Payload data shall be as expected.
    18: Confirm the transmission with FrArTp_TxConfirmation().
    19: Sanity check - Check that LLR function have been called.
    20: Iterate for all CF blocks.
    21: Indicate the reception of the expected FC CTS.
    22: Sanity check - Check that LLR function have been called.
    23: Receieve an unexpected FC.
    24: VP(FrArTp.ASR42.SWS_FrArTp_00083.12,1) After FC has already been processed normally, FC shall be ignored.
    25: Elapse a main function cycle.
    26: Receieve an unexpected FC, 1/2.
    27: Iterate all CFs of one block.
    28: VP(FrArTp.ASR42.SWS_FrArTp_00259,1) Check that LLR Transmit function has been called with correct parameters. Check that the last PDU of a PDU pool (EBTEST_CH1_PDUPOOL_SIZE - 1U) within a FlexRay cycle is always used by the scheduling.
    29: VP(FrArTp.ASR42.SWS_FrArTp_00083.12,1) After FrArTp_MainFunction prepared CFs for transmission 2/2, FC shall be ignored.
    30: Trigger the transmission of the CF with FrArTp_TriggerTransmit().
    31: Sanity check - Check that LLR function have been called.
    32: Sanity check - Transmit data shall be retrieved with PduR_FrArTpCopyTxData().
    33: Sanity check - Frame format shall be as expected.
    34: Sanity check - Payload data shall be as expected.
    35: Receieve an unexpected FC.
    36: VP(FrArTp.ASR42.SWS_FrArTp_00083.12,1) After reception of CFs, FC shall be ignored.
    37: Confirm the transmission with FrArTp_TxConfirmation().
    38: Sanity check - Check that LLR function have been called.
    39: Elapse 2 man function cycles.
    40: Sanity check - remaining = 0 -&amp;gt; go to idle.
    41: Sanity check - No additional function shall be called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.12</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00259</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>191</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>925</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Segmented_Transfer_MultipleFC</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>3121</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test full segmented transaction with multiple FCs. Receive FC after 4 CFs with BS set to 4.
Test Object: Software
Test Precondition: 
    -   Module, callouts and test buffers shall be initialized.
  
Test Execution: 
    01: Call FrArTp_Transmit() and FrArTp_MainFunction() to update available buffer and start transfer.
    02: Sanity check - FrArTp_MainFunction() shall call PduR_FrArTpCopyTxData() with correct parameters:
    03: Call FrArTp_MainFunction() to enter in state Tx Pending.
    04: Sanity check - FrArTp_MainFunction() shall call FrIf_Transmit() with correct parameters:
    05: Call FrArTp_TriggerTransmit() for first frame, call copyData()
    06: Sanity check - FrArTp_TriggerTransmit() shall call PduR_FrArTpCopyTxData() with correct parameters:
    07: Call FrArTp_TxConfirmation() (wait for FC).
    08: Call FrArTp_RxIndication() (receive a FC).
    09: Sanity check - FrArTp_RxIndication calls the respective lower layer routing function to indicate a reception.
    10: Call FrArTp_MainFunction() to requests the sending of a PDUs.
    11: Call FrArTp_TriggerTransmit() for consecutive frames.
    12: Sanity check - FrArTp_TriggerTransmit() shall call PduR_FrArTpCopyTxData() with correct parameters. Check values of pduInfoTx. Check payload after FrArTp_TriggerTransmit() call.
    13: VP(FrArTp.ASR42.SWS_FrArTp_00067.1,1) Construct and receive FC with FS = CTS after transmitting one block of CFs.
    14: VP(FrArTp.ASR42.SWS_FrArTp_00067.1,1) Verify that FC was received.
    15: VP(FrArTp.ASR42.SWS_FrArTp_00067.1,1) Trigger LLR Tx in FrArTp and continue to transmit next block.
    16: Trigger Tx in FrArTp and STmin expire
    17: Sanity check - remaining = 0 -&amp;gt; go to idle
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00067.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>91</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>926</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Full_Duplex</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>3155</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test segmented transmission and segmented reception using the same connection in parallel.
Test Object: Software
Test Precondition: 
    -   Test environment and module is initialized.
  
Test Execution: 
    01: Call FrArTp_Transmit() to initiate the transmission.
    02: Call FrArTp_MainFunction() to continue the transmission.
    03: Sanity check - PduR_FrArTpCopyTxData() is called.
    04: Call FrArTp_MainFunction() to initiate the FrIf transmission.
    05: Sanity check - FrIf_Transmit() is called.
    06: Call FrArTp_TriggerTransmit().
    07: Sanity check - PduR_FrArTpCopyTxData() is called to copy the transmit data.
    08: Call FrArTp_TxConfirmation() to confirm the transmission.
    09: Indicate the reception of the first frame
    10: VP(FrArTp.ASR42.SWS_FrArTp_00083.4,1) A new segmented reception and data from the first frame is indicated to the upper layer.
    11: Call FrArTp_RxIndication() to indicate the FC reception.
    12: Sanity check - FrArTp_RxIndication() calls the lower layer routing function.
    13: Call FrArTp_MainFunction().
    14: Sanity check - FrIf_Transmit is called for the CFs and the FC.
    15: Trigger the transmission via FrArTp_TriggerTransmit().
    16: Sanity check - FrArTp_TriggerTransmit() succeeds
    17: Confirm the transmissions via FrArTp_TxConfirmation().
    18: Call FrArTp_MainFunction().
    19: Sanity check - the completed transmission is confirmed to the upper layer.
    20: Indicate the reception of a consecutive frame.
    21: Sanity check - The data is passed to the upper layer.
    22: Indicate the reception of a consecutive frame.
    23: Sanity check - The data is passed to the upper layer and the completion of the reception indicated
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>130</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>927</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Segmented_Transmission_InvalidFS</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>3195</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test ISO and L4G segmented transmission with incoming FC with invalid FS. If FC is expected, and it has invalid flow status, current transmission shall be aborted.
Test Object: Software
Test Precondition: 
    -   Initialize module and stubs.
    -   Initialize test counters.
    -   Prepare reception FC frame with invalid FS.
    -   Prepare reception FC frame.
    -   Prepare 5 blocks of data to transmit
    -   Construct reception FC frames.
  
Test Execution: 
    01: FC reception with invalid FS on idle tx connection.
    02: Sanity check - FrArTp_RxIndication shall call corresponding Low Level Routing function with correct parameters.
    03: PduR calls FrArTp transmit to indicate there is data for transmission.
    04: FrArTp calls MainFunction to prepare module for transmission of the data.
    05: VP(FrArTp.ASR42.SWS_FrArTp_00083.12,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.12,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00285.1,1) Received FC with invalid FS on idle tx connection. FC with invalid FS shall be ignored. Module shall continue with the transmission, not abort.
    06: FC reception with invalid FS after PduR_FrArTpCopyTxData was triggered.
    07: Sanity check - FrArTp_RxIndication shall call corresponding Low Level Routing function with correct parameters.
    08: FrArTp calls MainFunction to prepare FF for transmission.
    09: VP(FrArTp.ASR42.SWS_FrArTp_00083.12,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.12,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00285.1,1) Received FC with invalid FS after PduR_FrArTpCopyTxData was triggered. FC with invalid FS shall be ignored. Module shall continue with the transmission, not abort.
    10: FC reception with invalid FS after FrIf_Transmit for FF was triggered.
    11: Sanity check - FrArTp_RxIndication shall call corresponding Low Level Routing function with correct parameters.
    12: Buffer for transmit is cleared and TriggerTransmit is called to transmit FF.
    13: VP(FrArTp.ASR42.SWS_FrArTp_00083.12,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.12,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00285.1,1) Received FC with invalid FS after FrIf_Transmit. FC with invalid FS shall be ignored and transmission shall continue, not abort.
    14: FC reception with invalid FS after FrArTp_TriggerTransmit with FF was called.
    15: Sanity check - FrArTp_RxIndication shall call corresponding Low Level Routing function with correct parameters.
    16: Call TxConfirmation to confirm transmission of the FF.
    17: VP(FrArTp.ASR42.SWS_FrArTp_00083.12,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.12,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00285.1,1) Received FC with invalid FS after FrArTp_TriggerTransmit with FF was called. FC with invalid FS shall be ignored. The transmission shall continue, not abort.
    18: Receive FC with invalid FS after transmission of FF or block of CFs. Set status for transmission to aborted.
    19: Sanity check - FrArTp_RxIndication shall call corresponding Low Level Routing function with correct parameters.
    20: Break from CF loop, and process abort of the transmission trace.
    21: FC reception will occur after each transmitted CF.
    22: Sanity check - FrArTp_RxIndication shall call corresponding Low Level Routing function with correct parameters.
    23: FC reception with invalid FS after FC was received.
    24: Sanity check - FrArTp_RxIndication shall call corresponding Low Level Routing function with correct parameters.
    25: FrArTp calls MainFunction to prepare CF for transmission.
    26: VP(FrArTp.ASR42.SWS_FrArTp_00083.12,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.12,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00285.1,1) Received FC with invalid FS after FC was received or CF was confirmed. FC with invalid FS shall be ignored, and transmission shall continue with FrIf_Transmit call, not abort.
    27: FC reception with invalid FS after FrIf_Transmit for CF was triggered.
    28: Sanity check - FrArTp_RxIndication shall call corresponding Low Level Routing function with correct parameters.
    29: VP(FrArTp.ASR42.SWS_FrArTp_00083.12,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.12,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00285.1,1) Received FC with invalid FS after FrIf_Transmit for CF was triggered. FC with invalid FS shall be ignored, and transmission shall continue, not abort.
    30: FC reception with invalid FS after FrArTp_TriggerTransmit with CF was called.
    31: Sanity check - FrArTp_RxIndication shall call corresponding Low Level Routing function with correct parameters.
    32: Call TxConfirmation to confirm transmission of the FF.
    33: VP(FrArTp.ASR42.SWS_FrArTp_00083.12,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00283.12,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00285.1,1) Received FC with invalid FS after FrArTp_TriggerTransmit with CF was called. FC with invalid FS shall be ignored, and transmission shall continue, not abort.
    34: Calculate and expire STmin timer after each block of CFs.
    35: FC reception with invalid FS after FrArTp_TxConfirmation for CF was called.
    36: Sanity check - FrArTp_RxIndication shall call corresponding Low Level Routing function with correct parameters.
    37: Call MainFunction to expire timeout STmin.
    38: FC reception with wrong FS after STmin for CF expires.
    39: Sanity check - FrArTp_RxIndication shall call corresponding Low Level Routing function with correct parameters.
    40: VP(FrArTp.ASR42.SWS_FrArTp_00285.1,1) Received FC. After each block of CFs, FC with invalid FS shall cause abort of the transmission.
    41: Sanity check - Ensure no internal calls are done after transfer is completed.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.12</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.12</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00285.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>928</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Extended_Segmented_Transmission_With_Reception</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>3280</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test L4G (1 and 2 byte addressing) segmented transmission with incoming SF-E, FF-E and CF.
Test Object: Software
Test Precondition: 
    -   Prepare data length which can been chosen randomly, but larger than 15 CFs to be transmitted to satisfy the test conditions.
    -   Prepare reception Rx frame types SFE, FFE, CF and FC.
    -   Prepare reception frames (SF-E, FF-E or CF), and initialize states of reception to not received.
    -   Reset counters and states.
    -   Initialize the module.
  
Test Execution: 
    01: Call FrArTp_Transmit to initialize start of new transmission.
    02: Call FrArTp_MainFunction to check tx buffer.
    03: Sanity check - FrArTp shall call PduR_FrArTpCopyTxData.
    04: Call FrArTp_MainFunction to inform FrIf about transmission.
    05: Sanity check - FrArTp shall call FrIf_Transmit with correct parameters.
    06: Call FrArTp_TriggerTransmit to copy FF-E data into the pdu buffer.
    07: Sanity check - FrArTp_TriggerTransmit shall return E_OK if all parameters were as expected.
    08: Call FrArTp_TxConfirmation to confirm transmission of an FF-E.
    09: VP(FrArTp.ASR42.SWS_FrArTp_00283.1,1) Received SF-E on L4G connection shall start a new reception.
    10: VP(FrArTp.ASR42.SWS_FrArTp_00283.4,1) Received FF-E on L4G connection shall start a new reception.
    11: VP(FrArTp.ASR42.SWS_FrArTp_00283.7,1) Received CF shall be ignored if there is no started ongoing reception.
    12: VP(FrArTp.ASR42.SWS_FrArTp_00094,1) Reception performed within the same connection as transmission.
    13: FC reception will occur after each transmitted CF.
    14: VP(FrArTp.ASR42.SWS_FrArTp_00283.11,1) Received FC after each block of CFs. FC shall be processed normally.
    15: VP(FrArTp.ASR42.SWS_FrArTp_00283.12,1) Received FC. When transmission of CFs is in progress, FC shall be ignored.
    16: VP(FrArTp.ASR42.SWS_FrArTp_00283.1,1) Received SF-E on L4G connection shall start a new reception.
    17: VP(FrArTp.ASR42.SWS_FrArTp_00283.4,1) Received FF-E on L4G connection shall start a new reception.
    18: VP(FrArTp.ASR42.SWS_FrArTp_00283.7,1) Received CF shall be ignored if there is no started ongoing reception.
    19: Call MainFunction to prepare CF for transmission.
    20: VP(FrArTp.ASR42.SWS_FrArTp_00283.1,1) Received SF-E on L4G connection shall start a new reception.
    21: VP(FrArTp.ASR42.SWS_FrArTp_00283.4,1) Received FF-E on L4G connection shall start a new reception.
    22: VP(FrArTp.ASR42.SWS_FrArTp_00283.7,1) Received CF shall be ignored if there is no started ongoing reception.
    23: TriggerTransmit of an CF frame.
    24: Sanity check - Check LLR CopyTxData was called with right parameters after transmitted CF.
    25: VP(FrArTp.ASR42.SWS_FrArTp_00058.2,1) FF-E is followed by Consecutive Frames until the whole message is transmitted.
    26: Interrupt Rx frames with index 3 to 7 shall occur after different number of CFs transmitted.
    27: VP(FrArTp.ASR42.SWS_FrArTp_00283.1,1) Received SF-E on L4G connection shall start a new reception.
    28: VP(FrArTp.ASR42.SWS_FrArTp_00283.4,1) Received FF-E on L4G connection shall start a new reception.
    29: VP(FrArTp.ASR42.SWS_FrArTp_00283.7,1) Received CF shall be ignored if there is no started ongoing reception.
    30: Handle CF TxConfirmation and optionally on rx, handle reception of an FF-E and transmission of an FC.
    31: Sanity check - Received FF-E when transmission is in progress. If all CFs are transmitted, FrArTp shall call PduR_FrArTpTxConfirmation with E_OK.
    32: Calculate and expire STmin timer after each block of CFs.
    33: Calculate and expire STmin timer after each block of CFs.
    34: Sanity check - If FrArTpTimeoutCr expired, the reception shall be aborted. In addition, if FF-E has been received when transmission is in progress. If all CFs were transmitted, FrArTp shall call PduR_FrArTpTxConfirmation with E_OK.
    35: Sanity check - All data is transmitted. If FrArTp has not jet called PduR_FrArTpTxConfirmation, it shall call PduR_FrArTpTxConfirmation with E_OK.
    36: Sanity check - When transmission and reception is done, module shall not call any additional function.
    37: Sanity check - Ensure no internal calls are done at the end of the test.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>146</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.7</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>149</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00094</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.11</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>153</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.12</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00058.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>70</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>929</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Extended_Segmented_Transmission_With_Reception_FC</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>3362</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test L4G segmented transmission (1 and 2 byte addressing) with incoming FC. If FC is not expected, it is ignored.
Test Object: Software
Test Precondition: 
    -   Initialize the module. Prepare data length which can been chosen randomly, but larger than SF-E maximum payload length.
    -   Prepare reception Rx frame type FC.
  
Test Execution: 
    01: VP(FrArTp.ASR42.SWS_FrArTp_00283.12,1) Received FC. When FC is received on the idle connection, FC shall be ignored.
    02: Sanity check - Check that rx indication LLR was triggered with right parameters.
    03: VP(FrArTp.ASR42.SWS_FrArTp_00283.12,1) Received FC. When FC is received while module is preparing for transmission, after FrArTp_Transmit, FC shall be ignored.
    04: Sanity check - Check that rx indication LLR was triggered with right parameters.
    05: VP(FrArTp.ASR42.SWS_FrArTp_00283.12,1) Received FC. When FC is received while module is preparing for transmission, before FrArTp_TriggerTransmit for FF-E, FC shall be ignored.
    06: Sanity check - Check that rx indication LLR was triggered with right parameters.
    07: Sanity check - FrArTp_TriggerTransmit shall return E_OK.
    08: FC reception will occur after each transmitted CF.
    09: VP(FrArTp.ASR42.SWS_FrArTp_00283.11,1) Received FC. After each block of CFs, FC shall be processed normally.
    10: VP(FrArTp.ASR42.SWS_FrArTp_00283.12,1) Received FC. When transmission of CFs is in progress, FC shall be ignored.
    11: VP(FrArTp.ASR42.SWS_FrArTp_00283.12,1) Received FC. FC is already received and processed, FC shall be ignored.
    12: Sanity check - Check that rx indication LLR was triggered with right parameters.
    13: VP(FrArTp.ASR42.SWS_FrArTp_00283.12,1) Received FC. While CF transmission is in progress, FC shall be ignored.
    14: Sanity check - Check that rx indication LLR was triggered with right parameters.
    15: Transmit CF by calling FrArTp_TriggerTransmit().
    16: Sanity check - FrArTp_TriggerTransmit shall call correct functions with correct parameters, and shall have correct values in txPduInfo.
    17: VP(FrArTp.ASR42.SWS_FrArTp_00283.12,1) Received FC. While module is in process of confirming transmitted CF, FC shall be ignored.
    18: Sanity check - Check that rx indication LLR was triggered with right parameters.
    19: VP(FrArTp.ASR42.SWS_FrArTp_00283.12,1) Received FC. After TxConfirmation, STmin time has not expired, FC shall be ignored.
    20: Sanity check - Check that rx indication LLR was triggered with right parameters.
    21: Calculate and expire STmin timer after each block of CFs.
    22: Sanity check - Check that PduR TxConfirmation was triggered after all CFs were transmitted.
    23: VP(FrArTp.ASR42.SWS_FrArTp_00283.12,1) Receive FC. When transfer is completed and module is in tx idle state, FC shall be ignored.
    24: Sanity check - Ensure no internal calls are done after transfer is completed.
    25: Sanity check - Ensure no internal calls are done at the end of the test.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.12</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.11</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>153</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>930</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Extended_Segmented_Transmission_MaxDL</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>3409</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test L4G (1 and 2 byte addressing) segmented transmission max L4G data length.
Test Object: Software
Test Precondition: 
    -   Setup BlockSize input with min = 1 and max = 255, several mid range values and special no BS = 0.
    -   Setup STmin input with two ranges [0 to 0x7F] and [0xF1 to 0x F9] with several mid range values.
    -   Setup DataLength input message length embeded in FF-E from (2^16) to (2^32 - 1).
    -   Initialize the module.
  
Test Execution: 
    01: Iterate trough test configurations ISO and L4G with 1 and 2 byte addressing.
    02: Iterate trough test input values of block size and ST min.
    03: Iterate trough test input values of DataLength from (2^16) to (2^32 - 1)
    04: Call FrArTp_Transmit to initialize start of new transmission.
    05: VP(FrArTp.ASR42.SWS_FrArTp_00054.1,1) FrArTp_Transmit shall accept transmission of message larger than (2^16 - 1).
    06: Call FrArTp_MainFunction to check tx buffer.
    07: Sanity check - FrArTp shall call PduR_FrArTpCopyTxData.
    08: Call FrArTp_MainFunction to inform FrIf about transmission.
    09: Sanity check - FrArTp shall call FrIf_Transmit with correct parameters.
    10: Call FrArTp_TriggerTransmit to copy FF-E data into the pdu buffer.
    11: Sanity check - FrArTp_TriggerTransmit shall return E_OK if all parameters were as expected.
    12: Get FF-E embedded length on 4 bytes.
    13: VP(FrArTp.ASR42.SWS_FrArTp_00054.1,1) Embedded length of an FF-E shall be encoded on 4 bytes and message shall be larger than (2^16 - 1).
    14: Call FrArTp_TxConfirmation to confirm transmission of an FF-E.
    15: FC reception will occur after transmitted FF or each block of CFs.
    16: Sanity check - RxIndication shall call its coresponding LLR function with correct parameters.
    17: Run (STmin - 1) between two transmitted CFs.
    18: Sanity check - FrArTp shall not call any external function.
    19: Call MainFunction to prepare CF for transmission.
    20: TriggerTransmit of an CF frame.
    21: Sanity check - FrArTp_TriggerTransmit shall return E_OK if all parameters were as expected.
    22: VP(FrArTp.ASR42.SWS_FrArTp_00054.1,1) Transmitted data shall be larger than (2^16 - 1).
    23: Sanity check - All data is transmitted. If FrArTp has not jet called PduR_FrArTpTxConfirmation, it shall call PduR_FrArTpTxConfirmation with E_OK.
    24: Sanity check - When transmission and reception is done, module shall not call any additional function.
    25: Sanity check - Ensure no internal calls are done at the end of the test.
  
Test Input: BlockSize[0 to 255], STmin[0 to 7F, F1 to F9], DataLength[0x10000 to 0xFFFFFFFF]
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00054.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>61</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>931</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_FrArTpTimeCsTimeout</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>3455</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test unsegmented and segmented transfer FrArTpTimeCs timeout with PduR_FrArTpCopyTxData buffer BUFREQ_E_BUSY and BUFREQ_E_NOT_OK, while transmitting SF-x or FF-x, on ISO and L4G compatible channel with 1 and 2 byte addressing.
Test Object: Software
Test Precondition: 
    -   Initialize FrArTp module.
    -   Setup PduR_FrArTpCopyRxData available to 0.
    -   Calculate SF-x and FF-x transmission data length.
  
Test Execution: 
    01: Set PduR Tx buffer to BUFREQ_E_BUSY.
    02: Call FrArTp_Transmit to start segmented transmission.
    03: Sanity check - FrArTp_Transmit shall return E_OK.
    04: Call FrArTp_MainFunction (FrArTpTimeCs - 1) times.
    05: VP(FrArTp.ASR42.SWS_FrArTp_00107.1,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00296,1) While PduR Tx buffer is BUFREQ_E_BUSY. FrArTp_MainFunction shall call PduR_FrArTpCopyTxData with correct parameters:
    06: Call FrArTp_MainFunction one more time causing FrArTpTimeCs timeout.
    07: VP(FrArTp.ASR42.SWS_FrArTp_00107.2,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00293.1,1) FrArTp_MainFunction() shall call PduR_FrArTpTxConfirmation() with correct parameters:
    08: Call FrArTp_Transmit to start segmented transmission.
    09: Sanity check - FrArTp_Transmit shall return E_OK.
    10: Call FrArTp_MainFunction (FrArTpTimeCs / 2) times.
    11: VP(FrArTp.ASR42.SWS_FrArTp_00107.1,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00296,1) While PduR Tx buffer is BUFREQ_E_BUSY. FrArTp_MainFunction() shall call PduR_FrArTpCopyTxData() with correct parameters:
    12: Set PduR Tx buffer to BUFREQ_E_NOT_OK.
    13: Call FrArTp_MainFunction one more time with buffer BUFREQ_E_NOT_OK.
    14: VP(FrArTp.ASR42.SWS_FrArTp_00107.3,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00293.2,1) While PduR Tx buffer is BUFREQ_E_NOT_OK. FrArTp_MainFunction() shall call PduR_FrArTpCopyTxData() with correct parameters:
    15: VP(FrArTp.ASR42.SWS_FrArTp_00107.3,1)
        VP(FrArTp.ASR42.SWS_FrArTp_00293.2,1) FrArTp_MainFunction() shall call PduR_FrArTpTxConfirmation() with correct parameters:
    16: Sanity check - At the end of the test, no additional function shall be called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00107.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00296</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>268</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00107.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>250</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00293.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>270</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00107.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>251</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00293.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>271</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>932</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_FrArTpTimeCsTimeout_CF</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>3515</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test segmented transfer FrArTpTimeCs timeout with PduR_FrArTpCopyTxData buffer BUFREQ_E_BUSY, while transmitting CF, on ISO and L4G compatible channel with 1 and 2 byte addressing.
Test Object: Software
Test Precondition: 
    -   Prepare reception FC frame.
    -   Initialize FrArTp.
    -   Set available buffer to OK.
  
Test Execution: 
    01: Call FrArTp_Transmit to start segmented transmission.
    02: Sanity check - FrArTp_Transmit shall return E_OK.
    03: Call FrArTp_MainFunction to update available buffer.
    04: Sanity check - FrArTp_MainFunction shall call PduR_FrArTpCopyTxData with correct parameters. No additional function shall be called.
    05: Call FrArTp_MainFunction to pass FrIf Pdu buffer to the PduR.
    06: Sanity check - FrArTp_MainFunction shall call FrIf_Transmit and corresponding Low Level Routing function with correct parameters. No additional function shall be called.
    07: Call FrArTp_TriggerTransmit to copy and transmit FF-x.
    08: Sanity check - When all the parameters are correct, FrArTp_TriggerTransmit shall return E_OK.
    09: Call FrArTp_TxConfirmation to confirm transmission of the FF.
    10: Sanity check - FrArTp_TxConfirmation shall call corresponding Lower Layer Routing function with correct parameters. No additional function shall be called.
    11: Call FrArTp_RxIndication to receive FC after transmission of CF.
    12: Sanity check - FrArTp_RxIndication shall call corresponding Low Level Routing function with correct parameters. No additional function shall be called.
    13: Call FrArTp_MainFunction.
    14: Sanity check - FrArTp_MainFunction shall call FrIf_Transmit and corresponding Low Level Routing function with correct parameters. No additional function shall be called.
    15: Set PduR Tx buffer to BUFREQ_E_BUSY.
    16: Sanity check - FrArTp_TriggerTransmit shall return E_OK and call corresponding Lower Layer Routing function with correct parameters.
    17: Sanity check - FrArTp_TriggerTransmit shall call PduR_FrArTpCopyTxData with correct parameters. No additional function shall be called.
    18: Sanity check - CF transmit buffer shall have unchanged data fill 0xFF.
    19: Call FrArTp_TxConfirmation to confirm unused Pdu.
    20: Sanity check - FrArTp_TxConfirmation shall call corresponding Lower Layer Routing function with correct parameters. No additional function shall be called.
    21: Call FrArTp_MainFunction (FrArTpTimeCs - 1) times.
    22: VP(FrArTp.ASR42.SWS_FrArTp_00296,1) FrArTp_MainFunction shall call PduR_FrArTpCopyTxData repeatedly with correct parameters, until FrArTpTimeCs expires. No additional function shall be called.
    23: Call FrArTp_MainFunction one more time to expire FrArTpTimeCs timer.
    24: VP(FrArTp.ASR42.SWS_FrArTp_00293.1,1) When FrArTpTimeCs expires, FrArTp shall call PduR_FrArTpTxConfirmation with result E_NOT_OK and with correct parameters. No additional function shall be called.
    25: Sanity check - At the end of the test, no additional function shall be called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00296</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>268</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00293.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>270</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>933</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_FrArTpTimeCs_CF_PduR_Fault</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>3563</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test segmented transfer FrArTpTimeCs timer with PduR_FrArTpCopyTxData buffer BUFREQ_E_NOT_OK, while transmitting CF, on ISO and L4G compatible channel with 1 and 2 byte addressing.
Test Object: Software
Test Precondition: 
    -   Prepare reception FC frame.
    -   Initialize FrArTp.
    -   Set available buffer to OK.
  
Test Execution: 
    01: Call FrArTp_Transmit to start segmented transmission.
    02: Sanity check - FrArTp_Transmit shall return E_OK.
    03: Call FrArTp_MainFunction to update available buffer.
    04: Sanity check - FrArTp_MainFunction shall call PduR_FrArTpCopyTxData with correct parameters.
    05: Call FrArTp_MainFunction to pass FrIf Pdu buffer to the PduR.
    06: Sanity check - FrArTp_MainFunction shall call FrIf_Transmit and corresponding Low Level Routing function with correct parameters.
    07: Call FrArTp_TriggerTransmit to copy and transmit FF-x.
    08: Sanity check - When all the parameters are correct, FrArTp_TriggerTransmit shall return E_OK.
    09: Call FrArTp_TxConfirmation to confirm transmission of the FF.
    10: Sanity check - FrArTp_TxConfirmation shall call corresponding Lower Layer Routing function with correct parameters.
    11: Call FrArTp_RxIndication to receive FC after transmission of CF.
    12: Sanity check - FrArTp_RxIndication shall call corresponding Low Level Routing function with correct parameters.
    13: Call FrArTp_MainFunction.
    14: Sanity check - FrArTp_MainFunction shall call FrIf_Transmit and corresponding Low Level Routing function with correct parameters.
    15: Set PduR Tx buffer to BUFREQ_E_BUSY.
    16: Sanity check - FrArTp_TriggerTransmit shall return E_NOT_OK and call corresponding Lower Layer Routing function with correct parameters.
    17: Sanity check - FrArTp_TriggerTransmit shall call PduR_FrArTpCopyTxData with correct parameters.
    18: Sanity check - CF transmit buffer shall have unchanged data fill 0xFF.
    19: Call FrArTp_TxConfirmation to confirm unused Pdu.
    20: Sanity check - FrArTp_TxConfirmation shall call corresponding Lower Layer Routing function with correct parameters.
    21: Call FrArTp_MainFunction (FrArTpTimeCs / 2) times.
    22: VP(FrArTp.ASR42.SWS_FrArTp_00296,1) FrArTp_MainFunction shall call PduR_FrArTpCopyTxData repeatedly with correct parameters, until FrArTpTimeCs expires.
    23: Set PduR Tx buffer to BUFREQ_E_NOT_OK.
    24: Call FrArTp_MainFunction one more time with buffer BUFREQ_E_NOT_OK.
    25: Sanity check - FrArTp_MainFunction shall call PduR_FrArTpCopyTxData with correct parameters.
    26: VP(FrArTp.ASR42.SWS_FrArTp_00293.2,1) When PduR_FrArTpCopyTxData returns BUFREQ_E_NOT_OK, FrArTp shall call PduR_FrArTpTxConfirmation with result E_NOT_OK and with correct parameters.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00296</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>268</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00293.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>271</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>934</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_TxConfirmation_LLR_Fault</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>3612</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: Test FrArTp_TxConfirmation() for the scenario where the respective LLR function returns E_NOT_OK
Test Object: Software
Test Precondition: 
    -   Clean up function trace
    -   Initialize module
  
Test Execution: 
    01: Set the return value of &amp;lt;prefix&amp;gt;LLR_FrIf_FrTp_TxConfirmation() to E_NOT_OK.
    02: Call FrArTp_TxConfirmation() and pass an invalid parameter FrArTpTxSduId.
    03: VP(FrArTp.VAG.AUDI_ASR_FrTP_049,1) &amp;lt;prefix&amp;gt;LLR_FrIf_FrTp_TxConfirmation() is called.
    04: VP(FrArTp.VAG.AUDI_ASR_FrTP_053,1) The parameter is mapped FrTxPduId -&amp;gt; FrTxPduId.
    05: VP(FrArTp.VAG.AUDI_ASR_FrTP_050,1.1)
        VP(FrArTp.VAG.AUDI_ASR_FrTP_052,1) The processing ot the request is aborted because E_NOT_OK was returned.
    06: Call FrArTp_TxConfirmation() and pass a valid parameter FrArTpTxSduId
    07: VP(FrArTp.VAG.AUDI_ASR_FrTP_049,1) &amp;lt;prefix&amp;gt;LLR_FrIf_FrTp_TxConfirmation() is called.
    08: VP(FrArTp.VAG.AUDI_ASR_FrTP_053,1) The parameter is mapped FrTxPduId -&amp;gt; FrTxPduId.
    09: VP(FrArTp.VAG.AUDI_ASR_FrTP_050,1.1)
        VP(FrArTp.VAG.AUDI_ASR_FrTP_052,1) The processing ot the request is aborted because E_NOT_OK was returned.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_049</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>469</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_053</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>473</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_050</linksto>
          <dstversion>1.1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>470</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_052</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>472</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>935</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_1ToN_Tx_Rejected</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>3653</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test that FrArTp_Transmit rejects transmission requests for 1:n connections (FrArTpMultRec = true) that would require segmentation.
Test Object: Software
Test Precondition: 
    -   Initialize the module and test environment.
  
Test Execution: 
    01: Iterate the test case for different TxSduId.
    02: Set the Sdu length that would require segmentation.
    03: Call FrArTp_Transmit for the a 1:n connection.
    04: VP(FrArTp.ASR42.SWS_FrArTp_00091.6,1) The transmission request has been rejected.
    05: Sanity check - Verify that a call of FrArTp_Transmit with a Sdu length not requiring segmentation is accepted.
  
Test Input: Tx Sdu Ids corresponding to 1:n connections for ISO/L4G and one/two byte addressing
Test Output: Rejected transmission requests</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00091.6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>936</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_FrIfTransmit_Fail</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/TestSpec_Generated.h</sourcefile>
      <sourceline>3677</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test transmission where FrIf_Transmit() returns E_NOT_OK.
Test Object: Software
Test Precondition: 
    -   Initialize module and test environment.
  
Test Execution: 
    01: Call FrArTp_Transmit().
    02: Call FrArTp_MainFunction() to initiate PduR_FrArTpCopyTxData() call.
    03: Call FrArTp_MainFunction() to initiate FrIf_Transmit() call.
    04: VP(FrArTp.ASR42.SWS_FrArTp_00302,1) The transmission is aborted and PduR_FrArTpTxConfirmation() called with E_NOT_OK.
    05: Call FrArTp_TriggerTransmit().
    06: VP(FrArTp.ASR42.SWS_FrArTp_00302,1) The transmission has been canceled and FrArTp_TriggerTransmit() returns E_NOT_OK.
    07: Call FrArTp_MainFunction()
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00302</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>937</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>FrArTp_Conformance_1_Extended_Unsegmented_Reception</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/source/application/Appl_Rx.c</sourcefile>
      <sourceline>383</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    Test extended unsegmented reception with different valid payload lengths.
  
Test Object: 
    FrArTp_RxIndication() (extended unsegmented reception)
  
Test Precondition: 
    Initialize FrArTp module
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass an extended single frame (SF-E) with payload length x.
    02: VP(FrArTp.ASR42.SWS_FrArTp_00108, FrArTp.ASR42.SWS_FrArTp_00262,
           FrArTp.ASR42.SWS_FrArTp_00030.2, FrArTp.ASR42.SWS_FrArTp_00283.3,
           FrArTp.ASR42.SWS_FrArTp_00221.2):
         FrArTp_RxIndication() shall call PduR_FrArTpStartOfReception() with correct parameters:
         - RxPduId shall have the expected value
         - TpSduLength shall have value y
    03: VP(FrArTp.ASR42.SWS_FrArTp_00108, FrArTp.ASR42.SWS_FrArTp_00262,
          FrArTp.ASR42.SWS_FrArTp_00221.3):
         FrArTp_RxIndication() shall call PduR_FrArTpCopyRxData() with correct parameters:
         - RxPduId shall have the expected value
         - The copied data shall have length y and have the correct content
    04: VP(FrArTp.ASR42.SWS_FrArTp_00108, FrArTp.ASR42.SWS_FrArTp_00262, FrArTp.ASR42.SWS_FrArTp_00030.1, FrArTp.ASR42.SWS_FrArTp_00029):
         FrArTp_RxIndication() shall call PduR_FrArTpRxIndication() with correct parameters:
         - RxPduId shall have the expected value
         - Result shall have value E_OK
  
Test Input: x from {1, 20, 120, 140, 250, 248} bytes
Test Output: y from {1, 20, 120, 140, 250, 248} bytes</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00030.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00030.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>253</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>194</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00221.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>238</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00221.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>239</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>938</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Unsegmented_Reception_PduR_Fault</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/source/application/Appl_Rx.c</sourcefile>
      <sourceline>504</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test ISO compatible unsegmented reception with different valid payload lengths where the PduR
    API function calls return a value indicating an error.
  
Test Object: 
    FrArTp_RxIndication() (unsegmented reception)
  
Test Precondition: 
    Initialize FrArTp module
  
Test Execution: 
    01: Set the return value of PduR_FrArTpStartOfReception to BUFREQ_E_NOT_OK.
    02: Call FrArTp_RxIndication() and pass a single frame with payload length x.
    03: VP(FrArTp.ASR42.SWS_FrArTp_00108):
        FrArTp_RxIndication() shall call PduR_FrArTpStartOfReception() with correct parameters:
        - RxPduId shall have value the expected PduRRxSduHandleId
        - TpSduLength shall have value y
    04: VP:(FrArTp.ASR42.SWS_FrArTp_00298.1):
        FrArTp_RxIndication() shall not call any other function, i.e. the transfer is aborted
        immediately
    05: Set the return value of PduR_FrArTpStartOfReception to BUFREQ_E_OVFL.
    06: Call FrArTp_RxIndication() and pass a single frame with payload length x.
    07: VP(FrArTp.ASR42.SWS_FrArTp_00108):
        FrArTp_RxIndication() shall call PduR_FrArTpStartOfReception() with correct parameters:
        - RxPduId shall have value the expected PduRRxSduHandleId
        - TpSduLength shall have value y
    08: VP:(FrArTp.ASR42.SWS_FrArTp_00298.2):
        FrArTp_RxIndication() shall not call any other function, i.e. the transfer is aborted
        immediately
    09: For PduR_FrArTpStartOfReception set:
        - The return value to BUFREQ_OK
        - The size of the buffer to y-1 (buffer too small)
    10: Call FrArTp_RxIndication() and pass a single frame with payload length x.
    11: VP(FrArTp.ASR42.SWS_FrArTp_00108):
        FrArTp_RxIndication() shall call PduR_FrArTpStartOfReception() with correct parameters:
        - RxPduId shall have value the expected PduRRxSduHandleId
        - TpSduLength shall have value y
    12: VP(FrArTp.ASR42.SWS_FrArTp_00289.1):
        FrArTp_RxIndication() shall call PduR_FrArTpRxIndication_Stub() with correct parameters:
        - RxPduId shall have value the expected PduRRxSduHandleId
        - Result shall be E_NOT_OK
    13: For PduR_FrArTpStartOfReception set:
        - the return value to BUFREQ_OK
        - the size of the buffer to its maximal value (buffer big enough)
        For PduR_FrArTpCopyRxData set the return value to E_NOT_OK
    14: Call FrArTp_RxIndication() and pass a single frame with payload length x.
    15: VP(FrArTp.ASR42.SWS_FrArTp_00108):
        FrArTp_RxIndication() shall call PduR_FrArTpStartOfReception() with correct parameters:
        - RxPduId shall have value the expected PduRRxSduHandleId
        - TpSduLength shall have value y
    16: VP(FrArTp.ASR42.SWS_FrArTp_00108):
        FrArTp_RxIndication() shall call PduR_FrArTpCopyRxData() with correct parameters:
        - RxPduId shall have value the expected PduRRxSduHandleId
    17: VP(FrArTp.ASR42.SWS_FrArTp_00289.2):
        FrArTp_RxIndication() shall call PduR_FrArTpRxIndication_Stub() with correct parameters:
        - RxPduId shall have value the expected PduRRxSduHandleId
        - Result shall be E_NOT_OK
  
Test Input: x in range [1 - 7] bytes.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>253</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00298.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>255</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00298.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>256</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00289.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>260</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00289.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>261</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>939</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Extended_Unsegmented_Reception_PduR_Fault</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/source/application/Appl_Rx.c</sourcefile>
      <sourceline>711</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test extended unsegmented reception with different valid payload lengths where the PduR
    API function calls return a value indicating an error.
  
Test Object: 
    FrArTp_RxIndication() (unsegmented reception)
  
Test Precondition: 
    Initialize FrArTp module
  
Test Execution: 
    01: Set the return value of PduR_FrArTpStartOfReception to BUFREQ_E_NOT_OK.
    02: Call FrArTp_RxIndication() and pass an extended single frame with payload length x.
    03: VP(FrArTp.ASR42.SWS_FrArTp_00108):
        FrArTp_RxIndication() shall call PduR_FrArTpStartOfReception() with correct parameters:
        - RxPduId shall have value the expected PduRRxSduHandleId
        - TpSduLength shall have value y
    04: VP:(FrArTp.ASR42.SWS_FrArTp_00298.3):
        FrArTp_RxIndication() shall not call any other function, i.e. the transfer is aborted
        immediately
    05: Set the return value of PduR_FrArTpStartOfReception to BUFREQ_E_OVFL.
    06: Call FrArTp_RxIndication() and pass an extended single frame with payload length x.
    07: VP(FrArTp.ASR42.SWS_FrArTp_00108):
        FrArTp_RxIndication() shall call PduR_FrArTpStartOfReception() with correct parameters:
        - RxPduId shall have value the expected PduRRxSduHandleId
        - TpSduLength shall have value y
    08: VP:(FrArTp.ASR42.SWS_FrArTp_00298.4):
        FrArTp_RxIndication() shall not call any other function, i.e. the transfer is aborted
        immediately
    09: For PduR_FrArTpStartOfReception set:
        - The return value to BUFREQ_OK
        - The size of the buffer to y-1 (buffer too small)
    10: Call FrArTp_RxIndication() and pass an extended single frame with payload length x.
    11: VP(FrArTp.ASR42.SWS_FrArTp_00108):
        FrArTp_RxIndication() shall call PduR_FrArTpStartOfReception() with correct parameters:
        - RxPduId shall have value the expected PduRRxSduHandleId
        - TpSduLength shall have value y
    12: VP(FrArTp.ASR42.SWS_FrArTp_00289.3):
        FrArTp_RxIndication() shall call PduR_FrArTpRxIndication() with correct parameters:
        - RxPduId shall have value the expected PduRRxSduHandleId
        - Result shall be E_NOT_OK
    13: For PduR_FrArTpStartOfReception set:
        - the return value to BUFREQ_OK
        - the size of the buffer to its maximal value (buffer big enough)
        For PduR_FrArTpCopyRxData set the return value to E_NOT_OK
    14: Call FrArTp_RxIndication() and pass an extended single frame with payload length x.
    15: VP(FrArTp.ASR42.SWS_FrArTp_00108):
        FrArTp_RxIndication() shall call PduR_FrArTpStartOfReception() with correct parameters:
        - RxPduId shall have value the expected PduRRxSduHandleId
        - TpSduLength shall have value y
    16: VP(FrArTp.ASR42.SWS_FrArTp_00108):
        FrArTp_RxIndication() shall call PduR_FrArTpCopyRxData() with correct parameters:
        - RxPduId shall have value the expected PduRRxSduHandleId
    17: VP(FrArTp.ASR42.SWS_FrArTp_00289.4):
        FrArTp_RxIndication() shall call PduR_FrArTpRxIndication() with correct parameters:
        - RxPduId shall have value the expected PduRRxSduHandleId
        - Result shall be E_NOT_OK
  
Test Input: x from {1, 20, 120, 140, 250, 248} bytes
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00108</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>253</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00298.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>257</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00298.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>258</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00289.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00289.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>263</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>940</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Invalid_Datalength</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/source/application/Appl_Rx.c</sourcefile>
      <sourceline>1441</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test ISO compatible unsegmented reception with invalid datalengths (DL).
  
Test Object: 
    FrArTp_RxIndication() (unsegmented reception, invalid DL)
  
Test Precondition: 
    Initialize FrArTp module
  
Test Execution: 
    For 1 and 2 byte addressing:
    01: Call FrArTp_RxIndication(), and pass a single frame with datalength length 0x0U
    02: VP():
        FrArTp_RxIndication() shall ignore frame received:
        - no function should be called
    03: Call FrArTp_RxIndication(), and pass a single frame with datalength length [0x08U - 0x0FU]
    04: VP():
        FrArTp_RxIndication() shall ignore frame received:
        - no function should be called
    05: Call FrArTp_RxIndication, and pass a single frame with datalength exceeding the length
        indicated by PduInfoPtr.SduLength
    06: VP():
        FrArTp_RxIndication() shall ignore frame received:
        - no function should be called
  
Test Input: DL with values: 0x00, [0x08 - 0x0F]; DL higher then supported by PduInfoPtr.SduLength
Test Output: no function should be called&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00028.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00028.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>941</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Invalid_SFE_Reception</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/source/application/Appl_Rx.c</sourcefile>
      <sourceline>1572</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test reception of extended single frames (SF-E) with invalid properties.
  
Test Object: 
    FrArTp_RxIndication() (reception of SF-E, invalid properties)
  
Test Precondition: 
    Initialize FrArTp module
  
Test Execution: 
    01: Call FrArTp_RxIndication(), and pass a SF-E for a connection belonging to a channel with
        FrArTpLm NOT set to FRARTP_L4G and FrArTpAdrType set to FRARTP_OB.
    02: VP(FrArTp.ASR42.SWS_FrArTp_00083.15):
        FrArTp_RxIndication() shall ignore frame received:
        - no function should be called
    03: Call FrArTp_RxIndication(), and pass a SF-E for a connection belonging to a channel with
        FrArTpLm NOT set to FRARTP_L4G and FrArTpAdrType set to FRARTP_TB.
    04: VP(FrArTp.ASR42.SWS_FrArTp_00083.15):
        FrArTp_RxIndication() shall ignore frame received:
        - no function should be called
    05: Call FrArTp_RxIndication(), and pass a SF-E where the DL field indicates a length of the
        frame exceeding the the length indicated by SduLength of the PduInfoType (and FrArTpAdrType
        is set to FRARTP_OB).
    06: VP(FrArTp.ASR42.SWS_FrArTp_00287.2):
        FrArTp_RxIndication() shall ignore frame received:
        - no function should be called
    07: Call FrArTp_RxIndication(), and pass a SF-E where the DL field indicates a length of the
        frame exceeding the the length indicated by SduLength of the PduInfoType (and FrArTpAdrType
        is set to FRARTP_TB).
    08: VP(FrArTp.ASR42.SWS_FrArTp_00287.2):
        FrArTp_RxIndication() shall ignore frame received:
        - no function should be called
    09: Call FrArTp_RxIndication(), and pass a SF-E where the DL field is set to 0x00 (and
        FrArTpAdrType is set to FRARTP_OB).
    10: VP(FrArTp.ASR42.SWS_FrArTp_00286.1):
        FrArTp_RxIndication() shall ignore frame received:
        - no function should be called
    11: Call FrArTp_RxIndication(), and pass a SF-E where the DL field is set to 0x00 (and
        FrArTpAdrType is set to FRARTP_TB).
    12: VP(FrArTp.ASR42.SWS_FrArTp_00286.1):
        FrArTp_RxIndication() shall ignore frame received:
        - no function should be called
    13: Call FrArTp_RxIndication(), and pass a SF-E where FrArTpAdrType is set to FRARTP_OB the DL
        field is set to 0xFB-0xFF
    14: VP(FrArTp.ASR42.SWS_FrArTp_00286.2):
        FrArTp_RxIndication() shall ignore frame received:
        - no function should be called
    15: Call FrArTp_RxIndication(), and pass a SF-E where FrArTpAdrType is set to FRARTP_TB the DL
        field is set to 0xF9-0xFF
    16: VP(FrArTp.ASR42.SWS_FrArTp_00286.3):
        FrArTp_RxIndication() shall ignore frame received:
        - no function should be called
    17: Call FrArTp_RxIndication(), and pass a SF-E where the reserved nibble is set to a value
        different than 0 (and FrArTpAdrType is set to FRARTP_OB).
    18: VP(FrArTp.ASR42.SWS_FrArTp_00287.3):
        FrArTp_RxIndication() shall ignore frame received:
        - no function should be called
    19: Call FrArTp_RxIndication(), and pass a SF-E where the reserved nibble is set to a value
        different than 0 (and FrArTpAdrType is set to FRARTP_TB).
    20: VP(FrArTp.ASR42.SWS_FrArTp_00287.3):
        FrArTp_RxIndication() shall ignore frame received:
        - no function should be called
  
Test Input: Different SF-Es with invalid properties
Test Output: no function should be called&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00286.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00286.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00286.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.15</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00287.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00287.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>942</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Segmented_Reception</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/source/application/Appl_Rx.c</sourcefile>
      <sourceline>2023</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    call FrArTp_RxIndication API with FT = FF, datalength &gt; 254 bytes
    Test ISO compatible segmented reception for 1 byte addressing.
  
Test Object: 
    FrArTp_RxIndication() (segmented reception)
  
Test Precondition: 
    Initialize FrArTp module
  
Test Execution: 
    01: VP(FrArTp.ASR42.SWS_FrArTp_00114):
        Call FrArTp_RxIndication() and pass a first frame with
        datalength &gt; EBTEST_MAX_ONE_FRAME_VALUE.
    02: VP(FrArTp.ASR42.SWS_FrArTp_00034.1, FrArTp.ASR42.SWS_FrArTp_00237,
        FrArTp.ASR42.SWS_FrArTp_00037, FrArTp.ASR42.SWS_FrArTp_00114,
        FrArTp.ASR42.SWS_FrArTp_00083.6, FrArTp.ASR42.SWS_FrArTp_00221.1):
         FrArTp_RxIndication() shall call PduR_FrArTpStartOfReception() with correct parameters:
         - RxPduId shall have value TEST_PDUR_RXPDUID_OB
         - TpSduLength shall have value datalength
    03: VP(FrArTp.ASR42.SWS_FrArTp_00034.1, FrArTp.ASR42.SWS_FrArTp_00237,
        FrArTp.ASR42.SWS_FrArTp_00037, FrArTp.ASR42.SWS_FrArTp_00114,
        FrArTp.ASR42.SWS_FrArTp_00221.3):
         FrArTp_RxIndication() shall call PduR_FrArTpCopyRxData() with correct parameters:
         - RxPduId shall have value TEST_PDUR_RXPDUID_OB
         - SduLength shall have value (PduInfoRx.SduLength - EBTEST_FF_ADDRTYPE1_AND_PCI_LENGTH)
         - SduDataPtr shall contain the received payload
    04: After FF reception, receiver must send a FC
    05: VP(FrArTp.ASR42.SWS_FrArTp_00064.1):
         MainFunction() shall call PduR_FrArTpCopyRxData() and FrIf_Transmit()
    06: Call FrArTp_TriggerTransmit()
    07: VP(FrArTp.ASR42.SWS_FrArTp_00064.1, FrArTp.ASR42.SWS_FrArTp_00066, FrArTp.ASR42.SWS_FrArTp_00240):
         Check the content of the transmitted frame: Remote address, local address, frame type,
         flow status, block size, STmin.
         Check rxPdu1.SduLength equals EBTEST_FC_ADDRTYPE1_AND_PCI_LENGTH
    08: Call FrArTp_RxIndication() and pass a CF, until all data is received.
    09: VP(FrArTp.ASR42.SWS_FrArTp_00239, FrArTp.ASR42.SWS_FrArTp_00060.1,
        FrArTp.ASR42.SWS_FrArTp_00114):
         FrArTp_RxIndication() shall call PduR_FrArTpCopyRxData() with correct parameters:
         - RxPduId shall have value TEST_PDUR_RXPDUID_OB
         - SduLength shall have value (PduInfoRx.SduLength - EBTEST_CF_ADDRTYPE1_AND_PCI_LENGTH)
         - SduDataPtr shall contain the received payload
    10: VP(FrArTp.ASR42.SWS_FrArTp_00239, FrArTp.ASR42.SWS_FrArTp_00060.1):
         FrArTp_RxIndication() shall call PduR_FrArTpRxIndication() with correct parameters:
         - RxPduId shall have value TEST_PDUR_RXPDUID_OB
         - Result shall have value E_OK
  
Test Input: first frame, consecutive frames
Test Output: received payload&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00034.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00237</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00239</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>72</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00060.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00064.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>85</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00066</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>89</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00240</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>87</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00114</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>272</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00221.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>237</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00221.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>239</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>943</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_FT_Error_Handling</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/source/application/Appl_Rx.c</sourcefile>
      <sourceline>3341</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test ISO compatible segmented reception with invalid FT field,
    frames with FT &gt; 0x05 are ignored, 1 Byte addressing.
  
Test Object: 
   FrArTp_RxIndication() (segmented reception,invalid DL)
  
Test Precondition: 
    Initialize FrArTp module
  
Test Execution: 
    01: Call FrArTp_RxIndication(), and pass a first frame with FT value &gt; 0x5U
    02: VP(FrArTp.ASR42.SWS_FrArTp_00283.1,FrArTp.ASR42.SWS_FrArTp_00082.1):
        FrArTp_RxIndication() shall ignore frame received:
        - no function should be called
  
Test Input: FT with values : 0x06 and &lt; 0xFFU 
Test Output: no function should be called, frames are ignored&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00082.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>944</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_OVFLW_Unsegmented_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/source/application/Appl_Rx.c</sourcefile>
      <sourceline>6160</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test ISO compatible unsegmented reception(1 byte addressing) with available
    buffer reported by PduR_FrArTpStartOfReception() too small for the SF-x, or if
    PduR_FrArTpCopyRxData() for the SF-x returns BUFREQ_E_NOT_OK.
  
Test Object: 
    FrArTp_RxIndication() (unsegmented reception)
  
Test Precondition: 
    Initialize FrArTp module
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a single frame,
        PduR_FrArTpStartOfReception returns available buffer too small for the SF
    02: VP(FrArTp.ASR42.SWS_FrArTp_00289.1):
         FrArTp_RxIndication() shall call PduR_FrArTpRxIndication() with correct parameters:
         - RxPduId shall have value TEST_PDUR_RXPDUID_OB
         - Result shall have value E_NOT_OK
    03: Call FrArTp_RxIndication() and pass a single frame,
        PduR_FrArTpStartOfReception() returns BUFREQ_E_OK and PduR_FrArTpCopyRxData()
        returns BUFREQ_E_NOT_OK
    04: VP(FrArTp.ASR42.SWS_FrArTp_00289.2):
         FrArTp_RxIndication() shall call PduR_FrArTpRxIndication() with correct parameters:
         - RxPduId shall have value TEST_PDUR_RXPDUID_OB
         - Result shall have value E_NOT_OK
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00289.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>260</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00289.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>261</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>945</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_RxIndication_LLR_Fault</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/source/application/Appl_Rx.c</sourcefile>
      <sourceline>6280</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test FrArTp_RxIndication() for the scenario where the respective LLR function returns E_NOT_OK.
  
Test Object: 
    FrArTp_RxIndication()
  
Test Precondition: 
    Initialize FrArTp module
  
Test Execution: 
    01: Set the return value of &lt;prefix&gt;LLR_FrIf_FrTp_RxIndication() to E_NOT_OK.
    02: Call FrArTp_RxIndication() and pass a single frame.
    03: VP(FrArTp.VAG.AUDI_ASR_FrTP_054, FrArTp.VAG.AUDI_ASR_FrTP_058):
        FrArTp_RxIndication() shall call
        &lt;prefix&gt;LLR_FrIf_FrTp_RxIndication() immediately after being called with the parameters
        correctly mapped:
        - FrRxPduId -&gt; FrRxPduId
        - PduInfoPtr -&gt; PduInfoPtr
    04: VP(FrArTp.VAG.AUDI_ASR_FrTP_057):
        The FrArTp module shall NOT process the FrArTp_RxIndication(), since
        &lt;prefix&gt;LLR_FrIf_FrTp_RxIndication() returns E_NOT_OK, resulting in NO other function being
        called.
    05: Call FrArTp_RxIndication() and pass a NULL_PTR as PduInfoPtr.
    06: VP(FrArTp.VAG.AUDI_ASR_FrTP_054, FrArTp.VAG.AUDI_ASR_FrTP_058):
        FrArTp_RxIndication() shall call
        &lt;prefix&gt;LLR_FrIf_FrTp_RxIndication() immediately after being called with the parameters
        correctly mapped:
        - FrRxPduId -&gt; FrRxPduId
        - PduInfoPtr -&gt; PduInfoPtr
    07: VP(FrArTp.VAG.AUDI_ASR_FrTP_055, FrArTp.VAG.AUDI_ASR_FrTP_057):
        The FrArTp module shall NOT process the FrArTp_RxIndication(), since
        &lt;prefix&gt;LLR_FrIf_FrTp_RxIndication() returns E_NOT_OK, resulting in NO other function being
        called.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_054</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>474</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_055</linksto>
          <dstversion>1.1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>475</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_058</linksto>
          <dstversion>1.1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>478</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>477</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>946</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>FrArTp_Conformance_1_Transfer_FFE</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/source/application/Appl_Tx.c</sourcefile>
      <sourceline>439</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test ISO compatible transfer lengths for 1 byte addressing, first frame
    extended.
  
Test Object: 
    FrArTp_Transmit() (unsegmented transfer)
  
Test Precondition: 
    Initialize FrArTp module
  
Test Execution: 
    01: Call FrArTp_Transmit() and FrArTp_MainFunction() to update available buffer.
    02: VP():
         Check return value of FrArTp_Transmit() is equal E_OK
         FrArTp_MainFunction() shall call PduR_FrArTpCopyTxData() with correct parameters:
         - TxPduId shall have value EBTEST_FRARTPTXPDUID_CH0
         - RetryInfoPtr shall have value NULL_PTR
    03: Call FrArTp_MainFunction() to enter in state txpending
    04: VP():
         FrArTp_MainFunction() shall call FrIf_Transmit() with correct parameters:
         - TxPduId shall have value EBTEST_FRARTP_FRIFTXPDUID_CH0
    05: Call FrArTp_TriggerTransmit()
    06: VP():
         Check return value of FrArTp_TriggerTransmit() is equal E_OK
         FrArTp_TriggerTransmit() shall call PduR_FrArTpCopyTxData() with correct parameters:
         - TxPduId shall have value EBTEST_FRARTPTXPDUID_CH0
         - RetryInfoPtr shall have value NULL_PTR
    07: VP():
         Check values of pduInfoTx:
         - pduInfoTx.SduDataPtr[0] equals EBTEST_REMOTE_ADDRESS_CH0_CONN0
         - pduInfoTx.SduDataPtr[1] equals EBTEST_LOCAL_ADDRESS_CH0_CONN0
         - pduInfoTx.SduDataPtr[2]&amp;0xF0 equals FRM_TYP_FFE
         - pduInfoTx.SduDataPtr[2]&amp;0x0F equals 0U (reserved)
         Check DL
         Check payload after FrArTp_TriggerTransmit() call
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00238</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>947</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Segmented_Transfer</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/source/application/Appl_Tx.c</sourcefile>
      <sourceline>724</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test ISO compatible segmented transfer, 1 byte addressing.
  
Test Object: 
    FrArTp_Transmit() (Segmented transfer)
  
Test Precondition: 
    Initialize FrArTp module
  
Test Execution: 
    01: Call FrArTp_Transmit() and FrArTp_MainFunction() to update available buffer.
    02: VP(FrArTp.ASR42.SWS_FrArTp_00110):
         FrArTp_MainFunction() shall call PduR_FrArTpCopyTxData() with correct parameters:
         - TxPduId shall have value EBTEST_FRARTP_PDURID_CH2_CONN0
    03: Call FrArTp_MainFunction() to enter in state txpending
    04: Call FrArTp_TriggerTransmit() for first frame
    05: VP(FrArTp.ASR42.SWS_FrArTp_00034.1, FrArTp.ASR42.SWS_FrArTp_00037,
        FrArTp.ASR42.SWS_FrArTp_00299, FrArTp.EB.FFI.PAYLOAD_LENGTH,
        FrArTp.ASR42.SWS_FrArTp_00237, FrArTp.ASR42.SWS_FrArTp_00110):
         FrArTp_TriggerTransmit() shall call PduR_FrArTpCopyTxData() with correct parameters:
         - TxPduId shall have value EBTEST_FRARTP_PDURID_CH2_CONN0
         - RetryInfoPtr shall have value NULL_PTR
         Check values of pduInfoTx:
         - pduInfoTx.SduDataPtr[0] equals EBTEST_REMOTE_ADDRESS_CH2_CONN0
         - pduInfoTx.SduDataPtr[1] equals EBTEST_LOCAL_ADDRESS_CH2_CONN0
         - pduInfoTx.SduDataPtr[2] must contain FRM_TYP_FF
         - pduInfoTx.SduDataPtr[2] and pduInfoTx.SduDataPtr[3] must contain correct datalength
         Check that pduInfoTx.SduLength equals EBTEST_FRARTP_PAYLOAD_LENGTH_CH2
         Check payload after FrArTp_TriggerTransmit() call
    06: Call FrArTp_TxConfirmation() (wait for FC)
    07: Call FrArTp_RxIndication() (receive a FC)
    08: Call FrArTp_MainFunction() to requests the sending of a PDUs
    09: VP(FrArTp.ASRR20-11.SWS_FrArTp_00219.FrIf_Transmit):
         FrArTp_MainFunction() shall call FrIf_Transmit()( EBTEST_FRARTP_NR_OF_TXPDUS nr of times)
         with correct parameters:
         - TxPduId shall have value EBTEST_FRARTP_FRIFTXPDUID_CH2_CONN0
         - Check the HandleIds of all FrIf_Transmit invocations
    10: Call FrArTp_TriggerTransmit() for consecutive frames
    11: VP(FrArTp.ASR42.SWS_FrArTp_00058.1, FrArTp.ASR42.SWS_FrArTp_00060.1,
        FrArTp.ASR42.SWS_FrArTp_00061.1, FrArTp.ASR42.SWS_FrArTp_00239,
        FrArTp.ASR42.SWS_FrArTp_00110):
         FrArTp_TriggerTransmit() shall call PduR_FrArTpCopyTxData() with correct parameters:
         - TxPduId shall have value EBTEST_FRARTP_PDURID_CH2_CONN0
         - RetryInfoPtr shall have value NULL_PTR
         Check values of pduInfoTx:
         - pduInfoTx.SduDataPtr[0] equals EBTEST_REMOTE_ADDRESS_CH2_CONN0
         - pduInfoTx.SduDataPtr[1] equals EBTEST_LOCAL_ADDRESS_CH2_CONN0
         - pduInfoTx.SduDataPtr[2] must contain FRM_TYP_CF and right sequenceNumber
         Check payload after FrArTp_TriggerTransmit() call
    12: Call FrArTp_TxConfirmation() (check remaining data to transfer)
    13: Call FrArTp_MainFunction() to requests the sending of a PDUs and to force stMin timeout
    14: VP(FrArTp.ASR42.SWS_FrArTp_00058.1):
         After transmission of all CFs FrArTp_TxConfirmation() shall call
         PduR_FrArTpTxConfirmation() with correct parameters:
         - TxPduId shall have value EBTEST_FRARTP_PDURID_CH2_CONN0
         - Result shall have value E_OK
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00034.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00058.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>69</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00060.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00061.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00239</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>72</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00299</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.FFI.PAYLOAD_LENGTH</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>426</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00237</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>948</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Segmented_Transfer_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/source/application/Appl_Tx.c</sourcefile>
      <sourceline>1029</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test ISO compatible segmented transfer (receiving FC frames with FS set to value
    WT and CTS) , 1 byte addressing.
  
Test Object: 
    FrArTp_Transmit() (Segmented transfer)
  
Test Precondition: 
    Initialize FrArTp module
  
Test Execution: 
    01: Call FrArTp_Transmit() and FrArTp_MainFunction() to update available buffer.
    02: VP():
         FrArTp_MainFunction() shall call PduR_FrArTpCopyTxData() with correct parameters:
         - TxPduId shall have value EBTEST_FRARTP_PDURID_CH2_CONN0
    03: Call FrArTp_MainFunction() to enter in state txpending
    04: VP():
         FrArTp_MainFunction() shall call FrIf_Transmit() with correct parameters:
         - TxPduId shall have value EBTEST_FRARTP_FRIFTXPDUID_CH2_CONN0
    05: Call FrArTp_TriggerTransmit() for first frame
    06: VP():
         FrArTp_TriggerTransmit() shall call PduR_FrArTpCopyTxData() with correct parameters:
         - TxPduId shall have value EBTEST_FRARTP_PDURID_CH2_CONN0
         - RetryInfoPtr shall have value NULL_PTR
         Check values of pduInfoTx:
         - pduInfoTx.SduDataPtr[0] equals EBTEST_REMOTE_ADDRESS_CH2_CONN0
         - pduInfoTx.SduDataPtr[1] equals EBTEST_LOCAL_ADDRESS_CH2_CONN0
         - pduInfoTx.SduDataPtr[2] must contain FRM_TYP_FF
         - pduInfoTx.SduDataPtr[2] and pduInfoTx.SduDataPtr[3] must contain correct datalength
         Check that pduInfoTx.SduLength equals EBTEST_FRARTP_PAYLOAD_LENGTH_CH2
         Check payload after FrArTp_TriggerTransmit() call
    07: Call FrArTp_TxConfirmation() (wait for FC)
    08: Call FrArTp_RxIndication() (receive a FC)
    09: Call FrArTp_MainFunction() to requests the sending of a PDUs
    10: VP():
         FrArTp_MainFunction() shall call FrIf_Transmit()( EBTEST_FRARTP_NR_OF_TXPDUS nr of times)
         with correct parameters:
         - TxPduId shall have value EBTEST_FRARTP_FRIFTXPDUID_CH2_CONN0
         - Check the HandleIds of all FrIf_Transmit invocations
    11: Call FrArTp_TriggerTransmit() for consecutive frames
    12: VP():
         FrArTp_TriggerTransmit() shall call PduR_FrArTpCopyTxData() with correct parameters:
         - TxPduId shall have value EBTEST_FRARTP_PDURID_CH2_CONN0
         - RetryInfoPtr shall have value NULL_PTR
         Check values of pduInfoTx:
         - pduInfoTx.SduDataPtr[0] equals EBTEST_REMOTE_ADDRESS_CH2_CONN0
         - pduInfoTx.SduDataPtr[1] equals EBTEST_LOCAL_ADDRESS_CH2_CONN0
         - pduInfoTx.SduDataPtr[2] must contain FRM_TYP_CF and right sequenceNumber
         Check payload after FrArTp_TriggerTransmit() call
    13: VP(): FrArTp.ASR42.SWS_FrArTp_00064.2,1
        1/2 Call FrArTp_TxConfirmation() after last CF of a block and set FrArTp to expect FC
        (check remaining data to transfer and go to WaitFC).
    14: VP(): FrArTp.ASR42.SWS_FrArTp_00067.2  Call FrArTp_RxIndication() to receive a FC with
         FS set to WAIT. Receiving an FC with FS=WAIT shall restart FrArTpTimeoutBs.
    15: Call FrArTp_RxIndication() (receive a FC with FS set to CTS, and blocksize = 0
        (send all remaining data without waiting for another FC))
    16: VP(): FrArTp.ASR42.SWS_FrArTp_00064.2,1 2/2 After transmitted last CF of a block, the FrArTp shall
        receive and process an FC frame, and the transmission shall continue with the transmission of an CF.
    17: Call FrArTp_MainFunction() to requests the sending of a PDUs.
    18: VP():
         FrArTp_MainFunction() shall call FrIf_Transmit()( EBTEST_FRARTP_NR_OF_TXPDUS nr of times)
         with correct parameters:
         - TxPduId shall have value EBTEST_FRARTP_FRIFTXPDUID_CH2_CONN0
         - Check the HandleIds of all FrIf_Transmit invocations
    19: Call FrArTp_TriggerTransmit() multiple times
    20: VP():
         FrArTp_TriggerTransmit() shall call PduR_FrArTpCopyTxData() with correct parameters:
         - TxPduId shall have value EBTEST_FRARTP_PDURID_CH2_CONN0
         - RetryInfoPtr shall have value NULL_PTR
         Check values of pduInfoTx:
         - pduInfoTx.SduDataPtr[0] equals EBTEST_REMOTE_ADDRESS_CH2_CONN0
         - pduInfoTx.SduDataPtr[1] equals EBTEST_LOCAL_ADDRESS_CH2_CONN0
         - pduInfoTx.SduDataPtr[2] must contain FRM_TYP_FF
         - pduInfoTx.SduDataPtr[2] and pduInfoTx.SduDataPtr[3] must contain correct datalength
         Check that pduInfoTx.SduLength equals EBTEST_FRARTP_PAYLOAD_LENGTH_CH2
         Check payload after FrArTp_TriggerTransmit() call
    21: Call FrArTp_TxConfirmation() (check remaining data to transfer)
    22: VP():
         FrArTp_TxConfirmation() shall call PduR_FrArTpTxConfirmation() with correct parameters:
         - TxPduId shall have value EBTEST_FRARTP_PDURID_CH2_CONN0
         - Result shall have value E_OK
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.1to1ConWithoutAck_Segmented.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>434</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.1to1ConWithoutAck_Segmented.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>435</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.1to1ConWithoutAck_Segmented.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>436</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.1to1ConWithoutAck_Segmented.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>437</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.1to1ConWithoutAck_Segmented.5</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>438</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.1to1ConWithoutAck_Segmented.6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>439</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.1to1ConWithoutAck_Segmented.BS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>442</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.1to1ConWithoutAck_Segmented.8</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>446</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00064.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>86</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00067.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00068.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>96</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>949</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Segmented_Transfer_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/source/application/Appl_Tx.c</sourcefile>
      <sourceline>1463</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test ISO compatible segmented transfer, testing ignored events, 1 byte addressing.
  
Test Object: 
    FrArTp_Transmit() (Segmented transfer)
  
Test Precondition: 
    Initialize FrArTp module
  
Test Execution: 
    01: Call FrArTp_Transmit() and FrArTp_MainFunction() to update available buffer.
    02: VP():
         FrArTp_MainFunction() shall call PduR_FrArTpCopyTxData() with correct parameters:
         - TxPduId shall have value EBTEST_FRARTP_PDURID_CH2_CONN0
    03: Call FrArTp_MainFunction() to enter in state txpending
    04: VP():
         FrArTp_MainFunction() shall call FrIf_Transmit() with correct parameters:
         - TxPduId shall have value EBTEST_FRARTP_FRIFTXPDUID_CH2_CONN0
    05: Call FrArTp_TriggerTransmit() for first frame
    06: VP():
         FrArTp_TriggerTransmit() shall call PduR_FrArTpCopyTxData() with correct parameters:
         - TxPduId shall have value EBTEST_FRARTP_PDURID_CH2_CONN0
         - RetryInfoPtr shall have value NULL_PTR
         Check values of pduInfoTx:
         - pduInfoTx.SduDataPtr[0] equals EBTEST_REMOTE_ADDRESS_CH2_CONN0
         - pduInfoTx.SduDataPtr[1] equals EBTEST_LOCAL_ADDRESS_CH2_CONN0
         - pduInfoTx.SduDataPtr[2] must contain FRM_TYP_FF
         - pduInfoTx.SduDataPtr[2] and pduInfoTx.SduDataPtr[3] must contain correct datalength
         Check that pduInfoTx.SduLength equals EBTEST_FRARTP_PAYLOAD_LENGTH_CH2
         Check payload after FrArTp_TriggerTransmit() call
    07: Call FrArTp_TxConfirmation() (wait for FC)
    08: Call FrArTp_RxIndication() (receive a FC)
    09: Call FrArTp_MainFunction() to requests the sending of a PDUs
    10: VP():
         FrArTp_MainFunction() shall call FrIf_Transmit()( EBTEST_FRARTP_NR_OF_TXPDUS nr of times)
         with correct parameters:
         - TxPduId shall have value EBTEST_FRARTP_FRIFTXPDUID_CH2_CONN0
         - Check the HandleIds of all FrIf_Transmit invocations
    11: Call FrArTp_TriggerTransmit() for consecutive frames
    12: VP():
         FrArTp_TriggerTransmit() shall call PduR_FrArTpCopyTxData() with correct parameters:
         - TxPduId shall have value EBTEST_FRARTP_PDURID_CH2_CONN0
         - RetryInfoPtr shall have value NULL_PTR
         Check values of pduInfoTx:
         - pduInfoTx.SduDataPtr[0] equals EBTEST_REMOTE_ADDRESS_CH2_CONN0
         - pduInfoTx.SduDataPtr[1] equals EBTEST_LOCAL_ADDRESS_CH2_CONN0
         - pduInfoTx.SduDataPtr[2] must contain FRM_TYP_CF and right sequenceNumber
         Check payload after FrArTp_TriggerTransmit() call
    13: Call FrArTp_TxConfirmation() (check remaining data to transfer)
    14: VP(): FrArTp.ASR42.SWS_FrArTp_00067.2 Call FrArTp_RxIndication() to receive a FC with
         FS set to WAIT. Receiving an FC with FS=WAIT shall restart FrArTpTimeoutBs.
    15: Call FrArTp_MainFunction() to requests the sending of a PDUs
    16: VP():
         FrArTp_MainFunction() shall call PduR_FrArTpTxConfirmation() with correct parameters:
         - TxPduId shall have value EBTEST_FRARTP_PDURID_CH2_CONN0
         - Result shall have value E_NOT_OK
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00067.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>950</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_Segmented_Transfer_OVFLW</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/source/application/Appl_Tx.c</sourcefile>
      <sourceline>3347</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test ISO compatible segmented transfer , 1 byte addressing.
  
Test Object: 
    FrArTp_Transmit() (Segmented transfer)
  
Test Precondition: 
    Initialize FrArTp module
  
Test Execution: 
    01: Call FrArTp_Transmit() and FrArTp_MainFunction() to update available buffer.
    02: VP():
         FrArTp_MainFunction() shall call PduR_FrArTpCopyTxData() with correct parameters:
         - TxPduId shall have value EBTEST_FRARTP_PDURID_CH2_CONN0
    03: Call FrArTp_MainFunction() to enter in state txpending
    04: VP():
         FrArTp_MainFunction() shall call FrIf_Transmit() with correct parameters:
         - TxPduId shall have value EBTEST_FRARTP_FRIFTXPDUID_CH2_CONN0
    05: Call FrArTp_TriggerTransmit() for first frame
    06: VP():
         FrArTp_TriggerTransmit() shall call PduR_FrArTpCopyTxData() with correct parameters:
         - TxPduId shall have value EBTEST_FRARTP_PDURID_CH2_CONN0
         - RetryInfoPtr shall have value NULL_PTR
         Check values of pduInfoTx:
         - pduInfoTx.SduDataPtr[0U] equals EBTEST_REMOTE_ADDRESS_CH2_CONN0
         - pduInfoTx.SduDataPtr[1U] equals EBTEST_LOCAL_ADDRESS_CH2_CONN0
         - pduInfoTx.SduDataPtr[2U] must contain FRM_TYP_FF
         - pduInfoTx.SduDataPtr[2U] and pduInfoTx.SduDataPtr[3U] must contain correct datalength
         Check that pduInfoTx.SduLength equals EBTEST_FRARTP_PAYLOAD_LENGTH_CH2
         Check payload after FrArTp_TriggerTransmit() call
    07: Call FrArTp_TxConfirmation() (wait for FC)
    08: Call FrArTp_RxIndication() (receive a FC, with FS set to OVFLW)
    09: VP():
         FrArTp_RxIndication() shall call PduR_FrArTpTxConfirmation() with correct parameters:
         - TxPduId shall have value EBTEST_FRARTP_PDURID_CH2_CONN0
         - Result shall have value E_NOT_OK
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.1to1ConWithoutAck_Segmented.6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>439</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00067.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>94</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>951</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_FrArTpTimeAsTimeout</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/source/application/Appl_Tx.c</sourcefile>
      <sourceline>5253</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test unsegmented transfer when FrArTpTimeoutAs is expiring.
  
Test Object: 
    FrArTp_Transmit()
  
Test Precondition: 
    Initialize FrArTp module
  
Test Execution: 
    01: Iterate the sequence multiple times to check if after a timeout transmission is possible again.
    02: Call FrArTp_Transmit() to initiate a new transmission.
    03: Call FrArTp_MainFunction() so that PduR_FrArTpCopyTxData() gets called.
    04: Call FrArTp_MainFunction() so that FrIf_Transmit() gets called.
    05: In the 1st and 3rd iteration, call FrArTp_TriggerTransmit() to retrieve data via PduR_FrArTpCopyTxData().
    06: Elapse as many FrArTp_MainFunction() calls so that there is one missing until a timeout.
    07: Elapse another FrArTp_MainFunction() call.
    08: VP(FrArTp.ASR42.SWS_FrArTp_00282.1):
        PduR_FrArTpTxConfirmation() is called with correct parameters.
    09: In the 2nd iteration, call FrArTp_TriggerTransmit() to check that it fails.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00282.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>952</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_FrArTpTimeBsTimeout</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/source/application/Appl_Tx.c</sourcefile>
      <sourceline>5382</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test ISO compatible segmented transfer (receiving FC frames with FS set to value
    WT ) if a BS timeout occurs , 1 byte addressing.
  
Test Object: 
    FrArTp_Transmit() (Segmented transfer)
  
Test Precondition: 
    Initialize FrArTp module
  
Test Execution: 
    01: Call FrArTp_Transmit() and FrArTp_MainFunction() to update available buffer.
    02: VP():
         FrArTp_MainFunction() shall call PduR_FrArTpCopyTxData() with correct parameters:
         - TxPduId shall have value EBTEST_FRARTP_PDURID_CH2_CONN0
    03: Call FrArTp_MainFunction() to enter in state txpending
    04: VP():
         FrArTp_MainFunction() shall call FrIf_Transmit() with correct parameters:
         - TxPduId shall have value EBTEST_FRARTP_FRIFTXPDUID_CH2_CONN0
    05: Call FrArTp_TriggerTransmit() for first frame
    06: VP():
         FrArTp_TriggerTransmit() shall call PduR_FrArTpCopyTxData() with correct parameters:
         - TxPduId shall have value EBTEST_FRARTP_PDURID_CH2_CONN0
         - RetryInfoPtr shall have value NULL_PTR
         Check values of pduInfoTx:
         - pduInfoTx.SduDataPtr[0] equals EBTEST_REMOTE_ADDRESS_CH2_CONN0
         - pduInfoTx.SduDataPtr[1] equals EBTEST_LOCAL_ADDRESS_CH2_CONN0
         - pduInfoTx.SduDataPtr[2] must contain FRM_TYP_FF
         - pduInfoTx.SduDataPtr[2] and pduInfoTx.SduDataPtr[3] must contain correct datalength
         Check that pduInfoTx.SduLength equals EBTEST_FRARTP_PAYLOAD_LENGTH_CH2
         Check payload after FrArTp_TriggerTransmit() call
    07: Call FrArTp_TxConfirmation() (wait for FC)
    08: Call FrArTp_RxIndication() (receive a FC)
    09: Call FrArTp_MainFunction() to requests the sending of a PDUs
    10: VP():
         FrArTp_MainFunction() shall call FrIf_Transmit()( EBTEST_FRARTP_NR_OF_TXPDUS nr of times)
         with correct parameters:
         - TxPduId shall have value EBTEST_FRARTP_FRIFTXPDUID_CH2_CONN0
         - Check the HandleIds of all FrIf_Transmit invocations
    11: Call FrArTp_TriggerTransmit() for consecutive frames
    12: VP():
         FrArTp_TriggerTransmit() shall call PduR_FrArTpCopyTxData() with correct parameters:
         - TxPduId shall have value EBTEST_FRARTP_PDURID_CH2_CONN0
         - RetryInfoPtr shall have value NULL_PTR
         Check values of pduInfoTx:
         - pduInfoTx.SduDataPtr[0] equals EBTEST_REMOTE_ADDRESS_CH2_CONN0
         - pduInfoTx.SduDataPtr[1] equals EBTEST_LOCAL_ADDRESS_CH2_CONN0
         - pduInfoTx.SduDataPtr[2] must contain FRM_TYP_CF and right sequenceNumber
         Check payload after FrArTp_TriggerTransmit() call
    13: Call FrArTp_TxConfirmation() (check remaining data to transfer)
    14: Call FrArTp_RxIndication() (receive a FC with FS set to WAIT)
    15: Call FrArTp_MainFunction() EBTEST_FRARTP_BS_TIMEOUT times (to force a BS timeout)
    16: VP():
         FrArTp_MainFunction() shall call PduR_FrArTpTxConfirmation() with correct parameters:
         - TxPduId shall have value EBTEST_FRARTP_PDURID_CH2_CONN0
         - Result shall have value E_NOT_OK
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00264</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>204</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>953</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>FrArTp_Conformance_1_CancelReceive</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/source/application/CancelReception.c</sourcefile>
      <sourceline>194</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if api FrArTp_CancelReceive() is called,
    current reception is terminated .
  
Test Object: 
    FrArTp_CancelReceive()
  
Test Precondition: 
    Initialize FrArTp module
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a first frame with payload length bigger than SF.
    02: VP():
         FrArTp_RxIndication() shall call PduR_FrArTpStartOfReception() with correct parameters:
         - RxPduId shall have value TEST_PDUR_RXPDUID_OB
    03: VP():
         FrArTp_RxIndication() shall call PduR_FrArTpCopyRxData() with correct parameters:
         - RxPduId shall have value TEST_PDUR_RXPDUID_OB
    04: Call FrArTp_CancelReceive() with SDU-Id of currently ongoing reception
    05: VP():
        Check if retVal = E_OK
        FrArTp_CancelReceive() shall call PduR_FrArTpRxIndication() with correct parameters:
        - RxPduId shall have value TEST_PDUR_RXPDUID_OB
        - Result shall have value E_OK
    06: Call FrArTp_MainFunction()
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00229</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>304</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>954</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>FrArTp_Conformance_1_CancelTransmit</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/source/application/CancelTransmission.c</sourcefile>
      <sourceline>200</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if api FrArTp_CancelTransmit() is called,
    current unsegmented transmission is terminated .
  
Test Object: 
    FrArTp_CancelTransmit() (unsegmented transfer)
  
Test Precondition: 
    Initialize FrArTp module
  
Test Execution: 
    01: Call FrArTp_Transmit() and FrArTp_MainFunction() to update available buffer.
    02: VP():
         FrArTp_MainFunction() shall call PduR_FrArTpCopyTxData() with correct parameters:
         - TxPduId shall have value EBTEST_FRARTP_PDURID_CH2_CONN0
         - RetryInfoPtr shall have value NULL_PTR
    03: Call FrArTp_MainFunction() to enter in state txpending
    04: VP():
         FrArTp_MainFunction() shall call FrIf_Transmit() with correct parameters:
         - TxPduId shall have value EBTEST_FRARTP_FRIFTXPDUID_CH2_CONN0
    05: Call FrArTp_CancelTransmit()
    06: VP():
        Check if retVal = E_OK
        FrArTp_CancelTransmit() shall call PduR_FrArTpTxConfirmation() with the correct parameters:
         - TxPduId shall have value EBTEST_PDURDESTID_CH2_CONN0
         - Result shall have value E_NOT_OK
    07: Call FrArTp_TriggerTransmit() for the canceled transmission.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00150</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>303</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>955</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>FrArTp_Conformance_1_PreCompileSwitches_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/source/application/PreCompile.c</sourcefile>
      <sourceline>35</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test pre-compile-time parameters
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.ECUC_FrArTp_00011_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>321</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.ECUC_FrArTp_00017_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>325</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.ECUC_FrArTp_00054_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>327</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.RelocatablePBCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>381</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_038</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>458</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>956</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_PreCompileSwitches_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/source/application/PreCompile.c</sourcefile>
      <sourceline>113</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test pre-compile-time parameters
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.ECUC_FrArTp_00011_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>321</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.ECUC_FrArTp_00017_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>325</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.ECUC_FrArTp_00054_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>327</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.RelocatablePBCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>381</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_038</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>458</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>957</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_PreCompileSwitches_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/source/application/PreCompile.c</sourcefile>
      <sourceline>181</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test pre-compile-time parameters
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.ECUC_FrArTp_00011_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>321</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.ECUC_FrArTp_00017_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>325</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.ECUC_FrArTp_00054_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>327</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.RelocatablePBCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>381</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_038</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>458</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>958</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_PreCompileSwitches_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/source/application/PreCompile.c</sourcefile>
      <sourceline>250</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test pre-compile-time parameters
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.ECUC_FrArTp_00011_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>321</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.ECUC_FrArTp_00017_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>325</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.ECUC_FrArTp_00054_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>327</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.RelocatablePBCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>381</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_038</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>458</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>959</internalId></specobject>
    <specobject>
      <id>FrArTp_Conformance_1_PreCompileSwitches_4</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Conformance/IN/FrArTp_Conformance_1/source/application/PreCompile.c</sourcefile>
      <sourceline>328</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Test pre-compile-time parameters
  
Test Object: 
  
Test Precondition: 
  
Test Execution: 
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.ECUC_FrArTp_00011_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>321</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.ECUC_FrArTp_00017_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>325</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.ECUC_FrArTp_00054_Conf</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>327</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.RelocatablePBCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>381</internalId></provcov>
        <provcov>
          <linksto>FrArTp.VAG.AUDI_ASR_FrTP_038</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>458</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>960</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>FRARTP_UNITTEST_DECODE_FC_CTS</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Decode/TestSpec_Generated.h</sourcefile>
      <sourceline>9</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test calling of FrArTp_RxIndication() forwards CTS to Rx State Machine, 1 byte addressing
Test Object: Software
Test Precondition: 
    -   set signal data
    -   initialize module
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a FC frame with FS set to CTS
    02: VP(FrArTp.EB.1to1ConWithoutAck_Segmented.6,1) 
        VP(FrArTp.ASR42.SWS_FrArTp_00240,1) FrArTp_RxIndication() shall call FrArTp_SM_receivedCTS() with the correct parameters
    03: Sanity check - No unexpected function has been called
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.1to1ConWithoutAck_Segmented.6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>439</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00240</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>87</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>961</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_DECODE_FC_WT</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Decode/TestSpec_Generated.h</sourcefile>
      <sourceline>35</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test calling FrArTp_RxIndication() forwards WT to Rx State Machine, 1 byte addressing
Test Object: Software
Test Precondition: 
    -   set signal data
    -   initialize module
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a FC frame with FS set to WT
    02: VP(FrArTp.EB.1to1ConWithoutAck_Segmented.6,1) 
        VP(FrArTp.ASR42.SWS_FrArTp_00240,1) FrArTp_RxIndication() shall call FrArTp_SM_receivedWT() with the correct parameters
    03: Sanity check - No unexpected function has been called
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.1to1ConWithoutAck_Segmented.6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>439</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00240</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>87</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>962</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_DECODE_FC_OVFLW</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Decode/TestSpec_Generated.h</sourcefile>
      <sourceline>61</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test calling of FrArTp_RxIndication() forwards OVFLW to Rx State Machine, 1 byte addressing
Test Object: Software
Test Precondition: 
    -   set signal data
    -   initialize module
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a FC frame with FS set to OVFLW
    02: VP(FrArTp.EB.1to1ConWithoutAck_Segmented.6,1) 
        VP(FrArTp.ASR42.SWS_FrArTp_00240,1) FrArTp_RxIndication() shall call FrArTp_SM_receivedOVFLW() with the correct parameters
    03: Sanity check - No unexpected function has been called
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.1to1ConWithoutAck_Segmented.6</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>439</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00240</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>87</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>963</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_DECODE_SF</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Decode/TestSpec_Generated.h</sourcefile>
      <sourceline>87</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test that FrArTp_RxIndication() forwards SF to Rx state machine unit with correct parameters, 1 byte addressing.
Test Object: Software
Test Precondition: 
    -   Set channel.
    -   Initialize module.
    -   Loop set correct SF input parameters 0x01 - 0x07.
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a single frame.
    02: VP(FrArTp.ASR42.SWS_FrArTp_00024,1) 
        VP(FrArTp.ASR42.SWS_FrArTp_00023,1) FrArTp_RxIndication() shall call FrArTp_SM_receivedData() with the correct parameters.
    03: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00023</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>964</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_DECODE_FF</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Decode/TestSpec_Generated.h</sourcefile>
      <sourceline>114</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test calling of FrArTp_RxIndication() forwards FF to Rx State Machine with right parameters,1 byte addressing
Test Object: Software
Test Precondition: 
    -   set initial data
    -   set signal data
    -   initialize module
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a first frame
    02: VP(FrArTp.ASR42.SWS_FrArTp_00037,1) 
        VP(FrArTp.ASR42.SWS_FrArTp_00237,1) FrArTp_RxIndication() shall call FrArTp_SM_receivedData() with the correct parameters
    03: Sanity check - No unexpected function has been called
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00237</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>965</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_DECODE_SF_E</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Decode/TestSpec_Generated.h</sourcefile>
      <sourceline>141</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test calling of FrArTp_RxIndication() forwards SF-E to Rx state machine unit with right parameters, 1 byte addressing.
Test Object: Software
Test Precondition: 
    -   set initial data
    -   Initialize module.
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a single frame extended.
    02: VP(FrArTp.ASR42.SWS_FrArTp_00029,1) 
        VP(FrArTp.ASR42.SWS_FrArTp_00030.1,1) 
        VP(FrArTp.ASR42.SWS_FrArTp_00030.2,1) FrArTp_RxIndication()shall call FrArTp_SM_receivedData() with the correct parameters.
    03: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00030.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00030.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>966</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_DECODE_SF_E_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Decode/TestSpec_Generated.h</sourcefile>
      <sourceline>172</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: Verify that FrArTp_RxIndication() ignores SF-E in ISO compliant channel, 1 byte addressing.
Test Object: Software
Test Precondition: 
    -   Set initial parameters.
    -   Initialize module.
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a single frame extended on channel format ISO.
    02: VP(FrArTp.ASR42.SWS_FrArTp_00083.15,1) No action shall be taken in account.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.15</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>967</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_DECODE_SF_E_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Decode/TestSpec_Generated.h</sourcefile>
      <sourceline>192</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: Verify that FrArTp_RxIndication() ignores SF-E with reserved field != 0x0,1 byte addressing.
Test Object: Software
Test Precondition: 
    -   Set intial data.
    -   Initialize module.
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a single frame extended.
    02: VP(FrArTp.ASR42.SWS_FrArTp_00287.3,1) Check that frame is ignored (no call of FrArTp_SM_receivedData()).
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00287.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>968</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_DECODE_SF_E_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Decode/TestSpec_Generated.h</sourcefile>
      <sourceline>212</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Verify that FrArTp_RxIndication() ignores SF-E with DL field containing invalid values, 1 byte addressing
Test Object: Software
Test Precondition: 
    -   set initial data
    -   initialize module
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a single frame extended
    02: VP(FrArTp.ASR42.SWS_FrArTp_00286.1,1) Check that the frame is ignored
    03: Call FrArTp_RxIndication() and pass a single frame extended
    04: VP(FrArTp.ASR42.SWS_FrArTp_00286.2,1) Check that the frame is ignored
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00286.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00286.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>969</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_DECODE_SF_E_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Decode/TestSpec_Generated.h</sourcefile>
      <sourceline>238</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Verify that FrArTp_RxIndication() ignores SF-E with DL field containing invalid values, 2 byte addressing
Test Object: Software
Test Precondition: 
    -   set parameters
    -   initialize module
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a single frame extended
    02: VP(FrArTp.ASR42.SWS_FrArTp_00286.3,1) Check that the frame is ignored.
    03: Call FrArTp_RxIndication() and pass a single frame extended
    04: VP(FrArTp.ASR42.SWS_FrArTp_00286.3,1) Check that the frame is ignored.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00286.3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>970</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_DECODE_SF_E_4</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Decode/TestSpec_Generated.h</sourcefile>
      <sourceline>260</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Verify that FrArTp_RxIndication() ignores SF-E with Sdulength too small for DL field value, 1 byte addressing
Test Object: Software
Test Precondition: 
    -   set signal data
    -   initialize module
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a single frame extended with DL field invalid
    02: VP(FrArTp.ASR42.SWS_FrArTp_00287.2,1) Check that frame is ignored (no call of FrArTp_SM_receivedData())
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00287.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>971</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_DECODE_SF_E_5</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Decode/TestSpec_Generated.h</sourcefile>
      <sourceline>280</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Verify that FrArTp_RxIndication() ignores SF-E with Sdulength too small for DL field value, 2 byte addressing
Test Object: Software
Test Precondition: 
    -   set data
    -   initialize module
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a single frame extended
    02: VP(FrArTp.ASR42.SWS_FrArTp_00287.2,1) Check that frame is ignored (no call of FrArTp_SM_receivedData())
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00287.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>972</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_DECODE_CF</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Decode/TestSpec_Generated.h</sourcefile>
      <sourceline>300</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test calling of FrArTp_RxIndication() forwards CF to Rx State Machine with right parameters, 1 byte addressing
Test Object: Software
Test Precondition: 
    -   Initialize module.
    -   Set signal data.
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a consecutive frame.
    02: VP(FrArTp.ASR42.SWS_FrArTp_00060.1,1) 
        VP(FrArTp.ASR42.SWS_FrArTp_00239,1) FrArTp_RxIndication() shall call FrArTp_SM_receivedData() with the correct parameters.
    03: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00060.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00239</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>72</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>973</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_DECODE_FF_E</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Decode/TestSpec_Generated.h</sourcefile>
      <sourceline>326</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test calling of FrArTp_RxIndication() forwards FF-E to Rx State Machine with right parameters, 1 byte addressing
Test Object: Software
Test Precondition: 
    -   set data
    -   initialize module
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a first frame extended
    02: VP(FrArTp.ASR42.SWS_FrArTp_00055,1) 
        VP(FrArTp.ASR42.SWS_FrArTp_00238,1) FrArTp_SM_receivedData() is called with the correct parameters
    03: Sanity check - No unexpected function has been called
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00055</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00238</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>974</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_DECODE_FF_E_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Decode/TestSpec_Generated.h</sourcefile>
      <sourceline>352</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Verify that FrArTp_RxIndication() ignores the reception of an FF-E in an ISO compliant channel, 1 byte addressing.
Test Object: Software
Test Precondition: 
    -   Set data.
    -   Initialize module.
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a FC frame with FS set to CTS.
    02: VP(FrArTp.ASR42.SWS_FrArTp_00083.15,1) No action shall be taken in account when receiving FF-E on ISO channel.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.15</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>975</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_DECODE_FF_E_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Decode/TestSpec_Generated.h</sourcefile>
      <sourceline>372</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Verify that FrArTp_RxIndication() ignores the reception of an FF-E with reserved field != 0x0, 1 byte addressing
Test Object: Software
Test Precondition: 
    -   set data
    -   initialize module
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a first frame extended
    02: VP(FrArTp.ASR42.SWS_FrArTp_00056,1) No action should be taken
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00056</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>64</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>976</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_DECODE_FF_E_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Decode/TestSpec_Generated.h</sourcefile>
      <sourceline>392</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Verify that FrArTp_RxIndication() ignores the reception of an FF-E frame with SduLength smaller than PciOffset + PCI, 1 byte addressing
Test Object: Software
Test Precondition: 
    -   set signal data
    -   initialize module
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a first frame extended
    02: VP(FrArTp.ASR42.SWS_FrArTp_00057.1,1) No action should be taken in account
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00057.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>977</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_DECODE_FF_E_3</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Decode/TestSpec_Generated.h</sourcefile>
      <sourceline>412</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Verify that FrArTp_RxIndication() ignores the reception of an FF-E frame with SduLength smaller than PciOffset + PCI, 2 byte addressing
Test Object: Software
Test Precondition: 
    -   set signal data
    -   initialize module
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a first frame extended
    02: VP(FrArTp.ASR42.SWS_FrArTp_00057.1,1) No action should be taken in account
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00057.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>978</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_DECODE_FF_E_4</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Decode/TestSpec_Generated.h</sourcefile>
      <sourceline>432</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: Verify FrArTp_RxIndication() ignores the reception of an FF-E with invalid DL, 1 byte addressing.
Test Object: Software
Test Precondition: 
    -   Set signal data.
    -   Initialize module.
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a first frame extended.
    02: VP(FrArTp.ASR42.SWS_FrArTp_00057.1,1) Check that frame is ignored (no call of FrArTp_SM_receivedData()).
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00057.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>979</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_DECODE_FF_E_5</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Decode/TestSpec_Generated.h</sourcefile>
      <sourceline>452</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: Verify FrArTp_RxIndication() ignores the reception of an FF-E with invalid DL, 2 byte addressing.
Test Object: Software
Test Precondition: 
    -   Set signal data.
    -   Initialize module.
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a first frame extended.
    02: VP(FrArTp.ASR42.SWS_FrArTp_00057.1,1) Check that frame is ignored (no call of FrArTp_SM_receivedData()).
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00057.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>980</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_DECODE_FC_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Decode/TestSpec_Generated.h</sourcefile>
      <sourceline>472</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: Test that if FrArTp_RxIndication() forwards a FC smaller than 5 or 7 byte long the frame is ignored.
Test Object: Software
Test Precondition: 
    -   set signal data
    -   initialize module
    -   initialize module
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a FC frame with FS set to CTS
    02: VP(FrArTp.EB.FC.FRAME_LENGTH,1) Check that frame is ignored.
    03: Call FrArTp_RxIndication() and pass a FC frame with FS set to CTS
    04: VP(FrArTp.EB.FC.FRAME_LENGTH,1) Check that frame is ignored.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FC.FRAME_LENGTH</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>427</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>981</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_DECODE_FC_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Decode/TestSpec_Generated.h</sourcefile>
      <sourceline>495</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test that if FrArTp_RxIndication() forwards a FC with FS set to CTS, but STmin contains invalid values, the STmin shall contain default value 0x7F, 1 byte addressing
Test Object: Software
Test Precondition: 
    -   set signal data
    -   initialize module
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a FC frame with FS set to CTS
    02: VP(FrArTp.ASR42.SWS_FrArTp_00245,1) FrArTp_RxIndication() shall call FrArTp_SM_receivedCTS() with the correct parameters, STmin shall contain default value 0x7F
    03: Call FrArTp_RxIndication() and pass a FC frame with FS set to CTS
    04: VP(FrArTp.ASR42.SWS_FrArTp_00245,1) FrArTp_RxIndication() shall call FrArTp_SM_receivedCTS() with the correct parameters, STmin shall contain default value 0x7F
    05: Sanity check - No unexpected function has been called
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00245</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>106</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>982</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_DECODE_Invalid_FT</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Decode/TestSpec_Generated.h</sourcefile>
      <sourceline>518</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test that if FrArTp_RxIndication() forwards a frame with invalid FT, the frame is ignored, 1 byte addressing
Test Object: Software
Test Precondition: 
    -   initialize module
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a FC frame with FS set to CTS
    02: VP(FrArTp.ASR42.SWS_FrArTp_00082.1,1) Check that frame is ignored (no call of FrArTp_SM_receivedData())
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00082.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>983</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_DECODE_FC_Invalid_FS</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Decode/TestSpec_Generated.h</sourcefile>
      <sourceline>537</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test that if FrArTp_RxIndication() forwards a frame with invalid FS on IDLE connection with 1 byte addressing, the frame is ignored.
Test Object: Software
Test Precondition: 
    -   Set signal frame data.
    -   Initialize the module.
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a FC frame with FS set to invalid values.
    02: VP(FrArTp.ASR42.SWS_FrArTp_00083.12,1) Check that frame is ignored with call to the FrArTp_SM_receivedData().
    03: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.12</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>984</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_DECODE_FC_E_OB_Invalid_FS</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Decode/TestSpec_Generated.h</sourcefile>
      <sourceline>558</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test that if FrArTp_RxIndication() forwards an extended frame with invalid FS on IDLE connection with 1 byte addressing, the frame is ignored.
Test Object: Software
Test Precondition: 
    -   Set signal frame data.
    -   Initialize the module.
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a FC-E frame with FS set to invalid values.
    02: VP(FrArTp.ASR42.SWS_FrArTp_00283.12,1) Check that frame is ignored with call to the FrArTp_SM_receivedData().
    03: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.12</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>985</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_DECODE_FC_E_TB_Invalid_FS</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Decode/TestSpec_Generated.h</sourcefile>
      <sourceline>579</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test that if FrArTp_RxIndication() forwards an extended frame with invalid FS on IDLE connection with 2 byte addressing, the frame is ignored.
Test Object: Software
Test Precondition: 
    -   Set signal frame data.
    -   Initialize the module.
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass a FC-E frame with FS set to invalid values.
    02: VP(FrArTp.ASR42.SWS_FrArTp_00283.12,1) Check that frame is ignored with call to the FrArTp_SM_receivedData().
    03: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00283.12</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>986</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_DECODE_FF_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Decode/TestSpec_Generated.h</sourcefile>
      <sourceline>600</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test that if FrArTp_RxIndication forwards a FF with invalid DL field set to 0x000, the frame is ignored, 1 byte addressing
Test Object: Software
Test Precondition: 
    -   set signal data
    -   initialize module
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass FF with invalid DL field
    02: VP(FrArTp.ASR42.SWS_FrArTp_00039.2,1) Check that frame is ignored (no call of FrArTp_SM_receivedData())
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00039.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>987</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_DECODE_FF_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Decode/TestSpec_Generated.h</sourcefile>
      <sourceline>620</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test that if FrArTp_RxIndication forwards a FF with invalid DL field , the frame is ignored, 1 byte addressing
Test Object: Software
Test Precondition: 
    -   set signal data
    -   initialize module
  
Test Execution: 
    01: Call FrArTp_RxIndication() and pass FF with invalid DL field
    02: VP(FrArTp.ASR42.SWS_FrArTp_00039.1,1) Check that frame is ignored (no call of FrArTp_SM_receivedData())
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00039.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>988</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>FRARTP_UNITTEST_ENCODE_NOACTIVECONNECTION</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Encode/TestSpec_Generated.h</sourcefile>
      <sourceline>9</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test if no frame is pending or transmitted when there is no active connection.
Test Object: Encode Unit
Test Precondition: 
    -   Use only 1 Tx Pool (and consequently, 1 Channel).
    -   Reset stub counters and initialize return values for getting active connection index to FRARTP_ACTCONN_INVALID.
    -   Flush trace list.
    -   Initialize FrArTp module.
  
Test Execution: 
    01: Call FrArTp_MainFunction() which calls FrArTp_SM_mainFunction and FrArTp_Encode_mainFunction() to update available buffer.
    02: VP(FrArTp.EB.FrArTp_Encode.NOACTIVECONNECTION,1) FrArTp_SM_mainFunction() is called.
    03: VP(FrArTp.EB.FrArTp_Encode.NOACTIVECONNECTION,1) Only FrArTp_SM_getConnIdx() is called for each index in ActConnMap, without any calls in between, since there is no valid Active Connection.
    04: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FrArTp_Encode.NOACTIVECONNECTION</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>409</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>989</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_ENCODE_NOTRANSMISSION</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Encode/TestSpec_Generated.h</sourcefile>
      <sourceline>33</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test if there is no transmission when there are no frames pending, using 1 active connection on a single channel.
Test Object: Encode Unit
Test Precondition: 
    -   Use only 1 Tx Pool (and consequently, 1 Channel).
    -   Set valid stub callout for FrArTp_SM_getConnIdx().
    -   Reset previous active connections to remove garbage data from memory and set new active connection at index 0 in TxPool 0 (defined in TestChannelCfg).
    -   Flush trace list.
    -   Initialize FrArTp module.
  
Test Execution: 
    01: Call FrArTp_MainFunction() which calls FrArTp_SM_mainFunction and FrArTp_Encode_mainFunction() to update available buffer.
    02: VP(FrArTp.EB.FrArTp_Encode.NOTRANSMISSION,1) FrArTp_SM_mainFunction() is called.
    03: VP(FrArTp.EB.FrArTp_Encode.NOTRANSMISSION,1) At index 0 in ActConnMap FrArTp_SM_getConnIdx(), FrArTp_SM_isFCPending() and FrArTp_SM_isDataPending() are called. At other indices, where there's no valid Active Connection, only FrArTp_SM_getConnIdx() is called.
    04: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FrArTp_Encode.NOTRANSMISSION</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>410</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>990</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_ENCODE_FCTRANSMISSION</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Encode/TestSpec_Generated.h</sourcefile>
      <sourceline>58</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test if there is transmission when there is Flow Control frame pending, using 1 active connection on a single channel.
Test Object: Encode Unit
Test Precondition: 
    -   Set valid stub callouts for getting the PDU configuration and transmission through FrIf.
    -   Use only 1 Tx Pool (and consequently, 1 Channel).
    -   Set valid stub callout for FrArTp_SM_getConnIdx().
    -   Reset stub counters and set all frames to "NOT pending".
    -   Set Flow Control frame to "pending".
    -   Reset previous active connections to remove garbage data from memory and set new active connection at index 0 in TxPool 0 (defined in TestChannelCfg).
    -   Flush trace list.
    -   Initialize FrArTp module.
  
Test Execution: 
    01: Call FrArTp_MainFunction() which calls FrArTp_SM_mainFunction and FrArTp_Encode_mainFunction() to update available buffer.
    02: VP(FrArTp.EB.FrArTp_Encode.FCTRANSMISSION,1) FrArTp_SM_mainFunction() is called.
    03: VP(FrArTp.EB.FrArTp_Encode.FCTRANSMISSION,1) At index 0 in ActConnMap FrArTp_SM_getConnIdx(), FrArTp_SM_isFCPending() and FrArTp_SM_isDataPending() are called. At other indices, where there's no valid Active Connection, only FrArTp_SM_getConnIdx() is called.
    04: VP(FrArTp.EB.FrArTp_Encode.FCTRANSMISSION,1) After iterating through all Active Connections of the TxPool 0, FlexRay Interface transmits one Flow Control frame (1 transmit in total).
    05: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FrArTp_Encode.FCTRANSMISSION</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>411</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>991</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_ENCODE_DATATRANSMISSION</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Encode/TestSpec_Generated.h</sourcefile>
      <sourceline>87</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test if there is transmission when there is Data frame pending.
Test Object: Encode Unit
Test Precondition: 
    -   Set valid stub callouts for getting the PDU configuration and transmission through FrIf.
    -   Use only 1 Tx Pool (and consequently, 1 Channel).
    -   Set valid stub callout for FrArTp_SM_getConnIdx().
    -   Reset stub counters and set all frames to "NOT pending".
    -   Set Data frame to "pending".
    -   Reset previous active connections to remove garbage data from memory and set new active connection at index 0 in TxPool 0 (defined in TestChannelCfg).
    -   Flush trace list.
    -   Initialize FrArTp module.
  
Test Execution: 
    01: Call FrArTp_MainFunction() which calls FrArTp_SM_mainFunction and FrArTp_Encode_mainFunction() to update available buffer.
    02: VP(FrArTp.EB.FrArTp_Encode.DATATRANSMISSION,1) FrArTp_SM_mainFunction() is called.
    03: VP(FrArTp.EB.FrArTp_Encode.DATATRANSMISSION,1) At index 0 in ActConnMap FrArTp_SM_getConnIdx(), FrArTp_SM_isFCPending() and FrArTp_SM_isDataPending() are called. At other indices, where there's no valid Active Connection, only FrArTp_SM_getConnIdx() is called.
    04: VP(FrArTp.EB.FrArTp_Encode.DATATRANSMISSION,1) After iterating through all Active Connections of the TxPool 0, FlexRay Interface transmits one Data frame (1 transmit in total).
    05: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FrArTp_Encode.DATATRANSMISSION</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>412</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>992</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_ENCODE_FCDATATRANSMISSION</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Encode/TestSpec_Generated.h</sourcefile>
      <sourceline>116</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test if there are 2 transmissions when there are both Flow Control frame and Data frame pending, using 1 active connection on a single channel.
Test Object: Encode Unit
Test Precondition: 
    -   Set valid stub callouts for getting the PDU configuration and transmission through FrIf.
    -   Use only 1 Tx Pool (and consequently, 1 Channel).
    -   Set valid stub callout for FrArTp_SM_getConnIdx().
    -   Reset stub counters and set all frames to "NOT pending".
    -   Set both Flow Control frame and Data frame to "pending".
    -   Reset previous active connections to remove garbage data from memory and set new active connection at index 0 in TxPool 0 (defined in TestChannelCfg).
    -   Flush trace list.
    -   Initialize FrArTp module
  
Test Execution: 
    01: Call FrArTp_MainFunction() which calls FrArTp_SM_mainFunction and FrArTp_Encode_mainFunction() to update available buffer.
    02: VP(FrArTp.EB.FrArTp_Encode.FCDATATRANSMISSION,1) FrArTp_SM_mainFunction() is called.
    03: VP(FrArTp.EB.FrArTp_Encode.FCDATATRANSMISSION,1) At index 0 in ActConnMap FrArTp_SM_getConnIdx(), FrArTp_SM_isFCPending() and FrArTp_SM_isDataPending() are called. At other indices, where there's no valid Active Connection, only FrArTp_SM_getConnIdx() is called.
        VP(FrArTp.ASR42.SWS_FrArTp_00257.1,1) FrArTp_SM_isFCPending() and FrArTp_SM_isDataPending() are only called for active connections. This implicitly checks that the subsequent FrIf_Transmit() calls belong to the active connection.
    04: VP(FrArTp.EB.FrArTp_Encode.FCDATATRANSMISSION,1) After iterating through all Active Connections of the TxPool 0, FlexRay Interface transmits one Flow Control and one Data frame (2 transmits in total).
        VP(FrArTp.ASR42.SWS_FrArTp_00257.1,1) The FrIf_Transmit() calls have been executed in the context of the FrArTp_MainFunction() and have only been called for the active connection.
    05: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FrArTp_Encode.FCDATATRANSMISSION</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>413</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00257.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>993</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_ENCODE_TRANSMISSION_MULTI_CONN_SINGLE_CHAN</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Encode/TestSpec_Generated.h</sourcefile>
      <sourceline>151</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test if there are 4 transmissions when there are both Flow Control frame and Data frame pending, using 2 active connections on a single channel.
Test Object: Encode Unit
Test Precondition: 
    -   Set valid stub callouts for getting the PDU configuration and transmission through FrIf.
    -   Use only 1 Tx Pool (and consequently, 1 Channel).
    -   Set valid stub callout for FrArTp_SM_getConnIdx()
    -   Reset stub counters and set all frames to "NOT pending".
    -   Set both Flow Control frame and Data frame to "pending" for each connection.
    -   Reset previous active connections to remove garbage data from memory and set new active connections at index 0 and index 1, which share common TxPool 0 (defined in TestChannelCfg).
    -   Flush trace list.
    -   Initialize FrArTp module.
  
Test Execution: 
    01: Call FrArTp_MainFunction() which calls FrArTp_SM_mainFunction and FrArTp_Encode_mainFunction() to update available buffer.
    02: VP(FrArTp.EB.FrArTp_Encode.TRANSMISSION_MULTI_CONN_SINGLE_CHAN,1) FrArTp_SM_mainFunction() is called.
    03: VP(FrArTp.EB.FrArTp_Encode.TRANSMISSION_MULTI_CONN_SINGLE_CHAN,1) At indices 0 and 1 in ActConnMap FrArTp_SM_getConnIdx(), FrArTp_SM_isFCPending() and FrArTp_SM_isDataPending() are called. At other indices, where there's no valid Active Connection, only FrArTp_SM_getConnIdx() is called.
    04: VP(FrArTp.EB.FrArTp_Encode.TRANSMISSION_MULTI_CONN_SINGLE_CHAN,1) After iterating through all Active Connections of the TxPool 0, FlexRay Interface transmits one Flow Control frame per Active Connection and one Data frame per Active Connection (4 transmits in total).
    05: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FrArTp_Encode.TRANSMISSION_MULTI_CONN_SINGLE_CHAN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>414</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>994</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_ENCODE_TRANSMISSION_MULTI_CONN_SINGLE_CHAN_TRANSMIT_FAIL</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Encode/TestSpec_Generated.h</sourcefile>
      <sourceline>180</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test if there are 4 transmissions when there multiple transmissions pending, and one transmission request fails.
Test Object: Encode Unit
Test Precondition: 
    -   Set valid stub callouts for getting the PDU configuration and transmission through FrIf.
    -   Use only 1 Tx Pool (and consequently, 1 Channel).
    -   Set valid stub callout for FrArTp_SM_getConnIdx()
    -   Reset stub counters and set all frames to "NOT pending".
    -   Set both Flow Control frame and Data frame to "pending" for each connection.
    -   Reset previous active connections to remove garbage data from memory and set new active connections at index 0 and index 1, which share common TxPool 0 (defined in TestChannelCfg).
    -   Flush trace list.
    -   Initialize FrArTp module.
  
Test Execution: 
    01: Set the return value of the first FrIf_Transmit() call to E_NOT_OK.
    02: Call FrArTp_MainFunction() which calls FrArTp_SM_mainFunction and FrArTp_Encode_mainFunction() to update available buffer.
    03: VP(FrArTp.EB.FrArTp_Encode.TRANSMISSION_MULTI_CONN_SINGLE_CHAN,1) FrArTp_SM_mainFunction() is called.
    04: VP(FrArTp.EB.FrArTp_Encode.TRANSMISSION_MULTI_CONN_SINGLE_CHAN,1) At indices 0 and 1 in ActConnMap FrArTp_SM_getConnIdx(), FrArTp_SM_isFCPending() and FrArTp_SM_isDataPending() are called. At other indices, where there's no valid Active Connection, only FrArTp_SM_getConnIdx() is called.
    05: VP(FrArTp.EB.FrArTp_Encode.TRANSMISSION_MULTI_CONN_SINGLE_CHAN,1) FrIf_Transmit() is called for every transmission request, after the first one fails the transmission is cancelled and it continues with the remaining ones.
    06: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FrArTp_Encode.TRANSMISSION_MULTI_CONN_SINGLE_CHAN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>414</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>995</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_ENCODE_TRANSMISSION_MULTI_CONN_SINGLE_CHAN_OVFL</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Encode/TestSpec_Generated.h</sourcefile>
      <sourceline>210</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test if there are 5 transmissions when there are 6 transmissions pending (2 Flow Control frames and 4 Data frames), but the available Tx PDU pool can only contain 5 PDUs
Test Object: Encode Unit
Test Precondition: 
    -   Set valid stub callout for getting the PDU configuration.
    -   Use only 1 Tx Pool (and consequently, 1 Channel).
    -   Set valid stub callout for FrArTp_SM_getConnIdx()
    -   Reset stub counters and set all frames to "NOT pending".
    -   Set Flow Control frame and 2 Data frames to "pending" for each connection.
    -   Reset previous active connections to remove garbage data from memory and set new active connections at index 0 and index 1, which share common TxPool 0 (defined in TestChannelCfg).
    -   Flush trace list.
    -   Initialize FrArTp module.
  
Test Execution: 
    01: Call FrArTp_MainFunction() which calls FrArTp_SM_mainFunction and FrArTp_Encode_mainFunction() to update available buffer.
    02: VP(FrArTp.EB.FrArTp_Encode.TRANSMISSION_MULTI_CONN_SINGLE_CHAN_OVFL,1) FrArTp_SM_mainFunction() is called.
    03: VP(FrArTp.EB.FrArTp_Encode.TRANSMISSION_MULTI_CONN_SINGLE_CHAN_OVFL,1) At indices 0 and 1 in ActConnMap FrArTp_SM_getConnIdx(), FrArTp_SM_isFCPending() and FrArTp_SM_isDataPending() are called. At other indices, where there's no valid Active Connection, only FrArTp_SM_getConnIdx() is called.
    04: VP(FrArTp.EB.FrArTp_Encode.TRANSMISSION_MULTI_CONN_SINGLE_CHAN_OVFL,1) There are 5 transmissions instead of 6 (2 Flow Control frames, 4 Data frames), since it's been defined in TestTxPoolCfg that TxPool 0 can contain only 5 PDU-s. The last Data frame doesn't fit into the pool, so it is ignored.
    05: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FrArTp_Encode.TRANSMISSION_MULTI_CONN_SINGLE_CHAN_OVFL</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>415</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>996</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_ENCODE_TRANSMISSION_MULTI_CONN_SINGLE_CHAN_CONSECUTIVE</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Encode/TestSpec_Generated.h</sourcefile>
      <sourceline>239</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test The PDU scheduling in case multiple connections are active. Specifically, check:
Test Object: Software
Test Precondition: 
    -   Execute the first round of assignments with 2 active connections.
    -   Set a third connection to active
  
Test Execution: 
    01: Call the FrArTp main function
    02: Call the TriggerTransmit function for all 5 N-PDUs of the previous rounds of assignments
    03: VP(FrArTp.ASR42.SWS_FrArTp_00256.1,1) 
        VP(FrArTp.ASR42.SWS_FrArTp_00256.2,1) The transmission shall be executed with a round-robin method, always alternating between the 2 active connections and assigning FC frames as well as data frames to both connections: FC Con 0 -&amp;gt; FC Con 2 -&amp;gt; Data Con 0 -&amp;gt; Data Con 2 -&amp;gt; Data Con 0
    04: Confirm the transmission of the N-PDU of the previous rounds of assignments
    05: Set the return values of FC and data pending check functions for the 3 connection
    06: Call the main function
    07: VP(FrArTp.ASR42.SWS_FrArTp_00257.2,1) FrArTp_SM_isFCPending() and FrArTp_SM_isDataPending() is called for the active connections starting with the one that follows the last one served in the previous round of assignments. This corresponds to the new connection with active index 2.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00256.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00256.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>186</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00257.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>189</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>997</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_ENCODE_TRANSMISSION_MULTI_CONN_SINGLE_CHAN_CANCEL</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Encode/TestSpec_Generated.h</sourcefile>
      <sourceline>273</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test The PDU scheduling in and canceling of transmission in case multiple connections are active.
Test Object: Encode Unit
Test Precondition: 
    -   Execute the first round of assignments with 2 active connections.
  
Test Execution: 
    01: Call the FrArTp main function
    02: Call the TriggerTransmit function only for N-PDUs assigned to the first connection (connection index 0).
    03: VP(FrArTp.ASR42.SWS_FrArTp_00256.1,1) 
        VP(FrArTp.ASR42.SWS_FrArTp_00256.2,1) The transmission shall be executed with a round-robin method: If 2 connections are active and only PDUs with odd index are transmission triggered, only the PDUs of the first connection are transmitted: FC Con 0 -&amp;gt; Data Con 0 -&amp;gt; Data Con 0
    04: Confirm the transmission of the N-PDUs of the previous rounds of assignments
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00256.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00256.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>186</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>998</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_ENCODE_TRANSMISSION_MULTI_CONN_MULTI_CHAN</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_Encode/TestSpec_Generated.h</sourcefile>
      <sourceline>299</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: Test if there are 2 transmissions when there is Data frame pending, using 2 active connections on 2 channels.
Test Object: Encode Unit
Test Precondition: 
    -   Set valid stub callouts for getting the PDU configuration and transmission through FrIf.
    -   Use 2 Tx Pools (and consequently, 2 Channels).
    -   Set valid stub callout for FrArTp_SM_getConnIdx().
    -   Reset stub counters and set all frames to "NOT pending".
    -   Set Data frame to "pending" for each connection.
    -   Reset previous active connections to remove garbage data from memory and set new active connections at index 0 and index 2, which are located in different TxPools (0 and 1, defined in TestChannelCfg).
    -   Flush trace list.
    -   Initialize FrArTp module.
  
Test Execution: 
    01: Call FrArTp_MainFunction() which calls FrArTp_SM_mainFunction and FrArTp_Encode_mainFunction() to update available buffer.
    02: VP(FrArTp.EB.FrArTp_Encode.TRANSMISSION_MULTI_CONN_MULTI_CHAN,1) FrArTp_SM_mainFunction() is called.
    03: VP(FrArTp.EB.FrArTp_Encode.TRANSMISSION_MULTI_CONN_MULTI_CHAN,1) At index 0 in ActConnMap FrArTp_SM_getConnIdx(), FrArTp_SM_isFCPending() and FrArTp_SM_isDataPending() are called. At other indices, where there's no valid Active Connection, only FrArTp_SM_getConnIdx() is called.
    04: VP(FrArTp.EB.FrArTp_Encode.TRANSMISSION_MULTI_CONN_MULTI_CHAN,1) After iterating through all Active Connections of the TxPool 0, FlexRay Interface transmits one Data frame (1 transmit).
    05: VP(FrArTp.EB.FrArTp_Encode.TRANSMISSION_MULTI_CONN_MULTI_CHAN,1) At index 2 in ActConnMap FrArTp_SM_getConnIdx(), FrArTp_SM_isFCPending() and FrArTp_SM_isDataPending() are called. At other indices, where there's no valid Active Connection, only FrArTp_SM_getConnIdx() is called.
    06: VP(FrArTp.EB.FrArTp_Encode.TRANSMISSION_MULTI_CONN_MULTI_CHAN,1) After iterating through all Active Connections of the TxPool 1, FlexRay Interface transmits one Data frame (1 transmit).
    07: Sanity check - No unexpected function has been called.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FrArTp_Encode.TRANSMISSION_MULTI_CONN_MULTI_CHAN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>416</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>999</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_IDLE_OK_SF</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>249</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that a single frame is received,
    transition from Idle to Idle (SF)  will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Call FrArTp_Init() for module initialization
  
Test Execution: 
    01: Call FrArTp_SM_receivedData() and pass a single frame
    02: VP():
         FrArTp_SM_receivedData() shall call FrArTp_SduMng_startOfReception() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - TpSduLength shall have value datalength
    03: VP():
         FrArTp_SM_receivedData() shall call FrArTp_SduMng_copyRxData() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - SduLength shall have value datalength
         - SduDataPtr shall contain the received payload
    04: VP():
        FrArTp_SM_receivedData() shall call FrArTp_SduMng_rxIndication with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_OK
  
Test Input: 
    Test with input values:
    -) payloadLength = dataLength = availableBuffer
    -) payloadLength &gt; dataLength = availableBuffer
    -) payloadLength = dataLength &lt; availableBuffer
    -) maximum possible dataLength
    -) minimum possible dataLength
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.Idle_Idle_SF</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>578</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1000</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_IDLE_OK_SF_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>344</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that a single frame is received even if all active connections
    are occupied
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Call FrArTp_Init() for module initialization
    - all active connections are occupied
  
Test Execution: 
    01: Call FrArTp_SM_receivedData() and pass a single frame
    02: VP():
        FrArTp_SM_receivedData() shall call FrArTp_SduMng_rxIndication with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_NOT_OK
    03: VP():
         FrArTp_SM_receivedData() shall call FrArTp_SduMng_startOfReception() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - TpSduLength shall have value datalength
    04: VP():
         FrArTp_SM_receivedData() shall call FrArTp_SduMng_copyRxData() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - SduLength shall have value datalength
         - SduDataPtr shall contain the received payload
    05: VP():
        FrArTp_SM_receivedData() shall call FrArTp_SduMng_rxIndication with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_OK
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>194</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1001</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_IDLE_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>450</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if a frame is received but available buffer is less than payloadlength ,
    transition from Idle to Idle (NOT_OK) will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Call FrArTp_Init() for module initialization
    - Set available buffer to a less value than payloadlength
  
Test Execution: 
    01:  Call FrArTp_SM_receivedData()
    02: VP():
         FrArTp_SM_receivedData() shall call FrArTp_SduMng_startOfReception() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - TpSduLength shall have value datalength
    03: VP():
        FrArTp_SM_receivedData() shall call FrArTp_SduMng_rxIndication with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_NOT_OK
  
Test Input: 
    Test with input values:
    -) available buffer &lt; datalength
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.Idle_Idle_NOT_OK</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>579</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1002</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_IDLE_CHECKBUFFER</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>524</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that a frame with datalength &gt; payloadlength is received  ,
    transition from Idle to CHECKBUFFER will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Call FrArTp_Init() for module initialization
  
Test Execution: 
    01: Call FrArTp_SM_receivedData()
    02: VP():
         FrArTp_SM_receivedData() shall call FrArTp_SduMng_startOfReception() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - TpSduLength shall have value datalength
    03: VP():
         FrArTp_SM_receivedData() shall call FrArTp_SduMng_copyRxData() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - SduLength shall have value payloadLength
         - SduDataPtr shall contain the received payload
    04: VP():
        Check if transition from idle to CheckBuffer is performed (state)
        Check if count is set to 0
        Check if available was updated
        Check if a first copy was performed (remaining)
        Check if value of BR (CheckBuffer state) timeout was loaded in timer
        Check that sequence number is incremented
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.Idle_CheckBuffer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>581</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1003</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_CHECKBUFFER_CHECKBUFFER</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>616</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that, if available &lt; CF_payload*BS in CHECKBUFFER state, a transition from CHECKBUFFER
    to CHECKBUFFER will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from idle to checkbuffer performed
    - modify available buffer
  
Test Execution: 
    01: Call FrArTp_SM_mainFunction()
    02: VP():
         FrArTp_SM_mainFunction() shall call FrArTp_SduMng_copyRxData() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - SduLength shall have value 0
    03: VP():
        Check if transition from CheckBuffer to CheckBuffer is performed (state)
        Check if count is set to 0
        Check if available was updated
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.CheckBuffer_CheckBuffer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>582</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1004</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_CHECKBUFFER_WAITWAITPDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>693</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify if timeout occurs in CHECKBUFFER state and (count&lt;maxWft), a transition
    from CHECKBUFFER to WAITWAITPDU will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from idle to checkbuffer performed
    - modify available buffer
  
Test Execution: 
    01: Elapse as many main function cycles as necessary to trigger Br timeout
    02: VP():
        Check if transition from CheckBuffer to WaitWaitPdu is performed (state)
        Check if count is incremented
        Check if available was updated
        Check if value of CR (WAIT state) timeout was loaded in timer
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.CheckBuffer_WAITWaitPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>585</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1005</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_WAITWAITPDU_WAITTXPENDING</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>772</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify if event FrArTp_SM_isFCPending() occurs in WAITWAITPDU state , a transition
    from WAITWAITPDU to WAITTXPENDING will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from idle to waitwaitpdu performed
  
Test Execution: 
    01: Call FrArTp_SM_isFCPending()
    02: VP():
        Check if FrArTp_SM_isFCPending returns TRUE
        Check if transition from WaitWaitPdu to WaitTxPending is performed (state)
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.WAITWaitPdu_WAITTxPending</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>586</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1006</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_WAITTXPENDING_WAITTXPENDING</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>833</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event FrArTp_SM_copyFCParameters() occurs in WAITWAITTXPENDING state , a transition
    from WAITTXPENDING to WAITTXPENDING will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from idle to waitwaitxpending performed
  
Test Execution: 
    01: Call FrArTp_SM_copyFCParameters()
    02: VP():
        check that FC parameters are updated
        Check if FrArTp_SM_isFCPending returns TRUE
        Check if transition from WaitTxPending to WaitTxPending is performed (state)
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.WAITTxPending_WAITTxPending</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>587</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1007</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_WAITTXPENDING_CHECKBUFFER</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>904</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event FrArTp_SM_txConfirmationFC() occurs in WAITWAITTXPENDING state , a transition
    from WAITTXPENDING to CHECKBUFFER will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from idle to waitwaitxpending performed
  
Test Execution: 
    01: Call FrArTp_SM_txConfirmationFC()
    02: VP():
        Check if transition from WaitTxPending to CheckBuffer is performed (state)
        Check if value of BR (CheckBuffer state) timeout was loaded in timer
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.WAITTxPending_CheckBuffer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>588</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1008</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_CHECKBUFFER_CTSWAITPDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>965</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    If available &gt; CF_payload*BS in CHECKBUFFER state, a transition from CHECKBUFFER
    to CTSWAITPDU will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from idle to checkbuffer performed
    - available buffer &gt; CF_payload*BS
  
Test Execution: 
    01: Call FrArTp_SM_mainFunction()
    02: VP():
         FrArTp_SM_mainFunction() shall call FrArTp_SduMng_copyRxData() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - SduLength shall have value 0
    03: VP():
        Check if transition from CheckBuffer to CTSWaitPdu is performed (state)
        Check if value of AR (WAIT state) timeout was loaded in timer
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.CheckBuffer_CTSWaitPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>589</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1009</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_CTSWAITPDU_CTSTXPENDING</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>1040</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event FrArTp_SM_isFCPending() occurs in CTSWAITPDU state , a transition
    from CTSWAITPDU to CTSTXPENDING will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from idle to ctswaipdu performed
  
Test Execution: 
    01: Call FrArTp_SM_isFCPending()
    02: VP():
        Check if FrArTp_SM_isFCPending returns TRUE
        Check if transition from CTSWAITPDU to CTSTXPENDING is performed (state)
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.CTSWaitPdu_CTSTxPending</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>590</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1010</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_CTSTXPENDING_CTSTXPENDING</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>1102</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event FrArTp_SM_copyFCParameters() occurs in CTSTXPENDING state , a transition
    from CTSTXPENDING to CTSTXPENDING will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from idle to ctstxpending performed
  
Test Execution: 
    01: Call FrArTp_SM_copyFCParameters()
    02: VP():
        check that FC parameters are updated
        Check if FrArTp_SM_isFCPending returns TRUE
        Check if transition from WaitTxPending to WaitTxPending is performed (state)
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.CTSTxPending_CTSTxPending</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>591</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1011</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_CTSTXPENDING_WAITDATA</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>1173</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event FrArTp_SM_txConfirmationFC() occurs in CTSTXPENDING state , a transition
    from CTSTXPENDING to WAITDATA will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to CTSTxPending performed
  
Test Execution: 
    01: Call FrArTp_SM_txConfirmationFC()
    02: VP():
        Check if transition from CTSTxPending to WaitData is performed (state)
        Check if value of CR (WaitData state) timeout was loaded in timer
        Check that frameCount = 1 when enters in WaitData state
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.CTSTxPending_WaitData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>592</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1012</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_WAITDATA_WAITDATA</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>1238</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event FrArTp_SM_receivedData() occurs in WAITDATA state
    ( a consecutive frame is received) , and remaining &gt; 0 &amp;&amp; frameCount &gt; BS
    a transition from WAITDATA to WAITDATA will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to WAITDATA performed
    - Calculate remaining data to receive after FF
  
Test Execution: 
    01: Call FrArTp_SM_receivedData() and pass a CF
    02: VP():
         FrArTp_SM_receivedData() shall call FrArTp_SduMng_copyRxData() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - SduLength shall have value payloadLength
         - SduDataPtr shall contain the received payload
    03: VP():
        Check if transition from WAITDATA to WAITDATA is performed (state)
        Check if timer is reloaded with timeoutCR value
        Check if frameCount is incremented
        Check if seq number is incremented
        Check remaining data
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.WaitData_WaitData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>593</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1013</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_WAITDATA_CHECKBUFFER</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>1329</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event FrArTp_SM_receivedData() occurs in WAITDATA state
    ( a consecutive frame is received) , and remaining &gt; 0 &amp;&amp; frameCount &lt;= BS
    a transition from WAITDATA to CHECKBUFFER will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to WAITDATA performed
    - Initialize value of BS with 1
  
Test Execution: 
    01: VP():
        Check if transition from WAITDATA to CHECKBUFFER is performed (state)
        Check if timer is reloaded with timeoutBR value
        Check if frameCount is incremented
        Check if seq number is incremented
        Check if count is set to 0
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.WaitData_CheckBuffer</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>594</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1014</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_WAITDATA_IDLE</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>1400</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that a transition from WAITDATA to IDLE is performed after receiving all data
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Initialize maxBS with max value
    - Tr from IDLE to WAITDATA performed
  
Test Execution: 
    01: Call FrArTp_SM_receivedData() and pass a CFs
    02: VP():
         FrArTp_SM_receivedData() shall call FrArTp_SduMng_copyRxData() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - SduLength shall have value payloadLength
         - SduDataPtr shall contain the received payload
    03: VP():
        Check if transition from WAITDATA to WAITDATA is performed (state)
        Check if timer is reloaded with timeoutCR value
        Check if frameCount is incremented
        Check if sequencenumber rollover when maximum value achieved
        Check remaining data
    04: VP():
        Check if transition from WAITDATA to IDLE is performed (state)
        Check if timer is stopped
        Check remaining data equals 0
    05: VP():
        FrArTp_SM_receivedData() shall call FrArTp_SduMng_rxIndication with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_OK
        Check that active connection was released
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.WaitData_Idle_receivedData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>595</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1015</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_CHANGEPARAMETER</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>1541</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that FrArTp_SM_changeParameter() can change parameter when no reception is in progress,
    and verify that FrArTp_SM_changeParameter() can't change parameter when reception is in progress.
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Module initialize with rx.status = IDLE.
    - Module allocate active connection Idx.
  
Test Execution: 
    01: Set rx.status to state IDLE or other states.
    02: Set connection maxBs and STmin to default value which is not used with FrArTp_SM_changeParameter().
    03: Call FrArTp_SM_changeParameter() with different parameters in different rx.status state.
    04: VP():
        Check if FrArTp_SM_changeParameter() return status was OK when rx.status == IDLE.
        Check if maxBs and STmin was set to right value when FrArTp_SM_changeParameter() == OK.
        Check if FrArTp_SM_changeParameter() return status was NOT_OK when rx.status != IDLE.
        Check if maxBs and STmin was not set when FrArTp_SM_changeParameter() == NOT_OK.
  
Test Input: 
    - All possible SM rx states to test FrArTp_SM_changeParameter() function.
    - BlockSize allowed range boundry and middle values (0 to 255).
    - STmin allowed range boundry and middle values (0x00 to 0x7F) and (0xF1 to 0xF9).
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00104.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>232</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00104.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00104.4</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>235</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1016</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_IDLE_OVFLWWAITPDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>1655</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event FrArTp_SM_receivedData() occurs in IDLE state,
    but FrArTp_SduMng_startOfReception() returns BUFREQ_E_OVFL ,
    transition from IDLE to OVFLWWAITPDU  will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Call FrArTp_Init() for module initialization
    - Set return value of FrArTp_SduMng_startOfReception to BUFREQ_E_OVFL
  
Test Execution: 
    01: Call FrArTp_SM_receivedData()
    02: VP():
         FrArTp_SM_receivedData() shall call FrArTp_SduMng_startOfReception() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - TpSduLength shall have value datalength
    03: VP():
        Check if transition from IDLE to OVFLWWAITPDU is performed (state)
        Check if timer is loaded with timeoutAR value
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.Idle_OVFLWWaitPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>596</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1017</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_OVFLWWAITPDU_OVFLWTXPENDING</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>1731</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify if event FrArTp_SM_isFCPending() occurs in OVFLWWAITPDU state , a transition
    from OVFLWWAITPDU to OVFLWTXPENDING will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to OWFLWWAITPDU performed
  
Test Execution: 
    01: Call FrArTp_SM_isFCPending()
    02: VP():
        Check if FrArTp_SM_isFCPending returns TRUE
        Check if transition from WaitWaitPdu to WaitTxPending is performed (state)
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.OVFLWWaitPdu_OVFLWTxPending</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>597</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1018</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_OVFLWTXPENDING_OVFLWTXPENDING</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>1793</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify if event FrArTp_SM_copyFCParameters() occurs in OVFLWTXPENDING state , a transition
    from OVFLWTXPENDING to OVFLWTXPENDING will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to OWFLWTXPENDING performed
  
Test Execution: 
    01: Call FrArTp_SM_copyFCParameters()
    02: VP():
        Check that FC parameters are updated
        Check if FrArTp_SM_isFCPending returns TRUE
        Check if transition from WaitTxPending to WaitTxPending is performed (state)
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.OVFLWTxPending_OVFLWTxPending</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>598</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1019</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_OVFLWTXPENDING_IDLE</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>1864</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event FrArTp_SM_txConfirmationFC() occurs in OVFLWTXPENDING state , a transition
    from OVFLWTXPENDING to IDLE will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to OWFLWTXPENDING performed
  
Test Execution: 
    01: Call FrArTp_SM_txConfirmationFC()
    02: VP():
        Check if transition from OWFLWTXPENDING to IDLE is performed (state)
        Check if timer was stopped
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.OVFLWTxPending_Idle_txConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>599</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1020</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_OVFLWWAITPDU_IDLE_timeout</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>1923</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event timeout() occurs in OVFLWWAITPDU state,
    transition from OVFLWWAITPDU to IDLE will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Call FrArTp_Init() for module initialization
    - Tr from IDLE to OVFLWWAITPDU done
  
Test Execution: 
    01: Elapse as many main function cycles as necessary to trigger Ar timeout
    02: VP():
        Check if transition from OVFLWWAITPDU to IDLE is performed (state)
        Check if timer is stopped
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.OVFLWWaitPdu_Idle_timeout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>600</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1021</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_OVFLWTXPENDING_IDLE_timeout</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>1992</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event timeout() occurs in OVFLWTXPENDING state,
    transition from OVFLWTXPENDING to IDLE will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to OVFLWTXPENDING done
  
Test Execution: 
    01: Elapse as many main function cycles as necessary to trigger Ar timeout
    02: VP():
        Check if transition from OVFLWTXPENDING to IDLE is performed (state)
        Check if timer is stopped
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.OVFLWTxPending_Idle_timeout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>601</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1022</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_CHECKBUFFER_IDLE_timeout</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>2062</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event timeout() occurs in CheckBuffer state,
    transition from CHECKBUFFER to IDLE will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to CHECKBUFFER performed
  
Test Execution: 
    01: Elapse as many main function cycles as necessary to trigger Br timeout
    02: VP():
        Check if transition from CHECKBUFFER to IDLE is performed (state)
        Check if timer is stopped
    03: VP():
        FrArTp_SM_mainFunction() shall call FrArTp_SduMng_rxIndication() with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_NOT_OK
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.CheckBuffer_Idle_timeout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>584</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1023</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_CTSWAITPDU_IDLE_timeout</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>2163</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event timeout() occurs in CTSWAITPDU state,
    transition from CTSWAITPDU to IDLE will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to CTSWAITPDU performed
  
Test Execution: 
    01: Elapse as many main function cycles as necessary to trigger Ar timeout
    02: VP():
        Check if transition from CTSWAITPDU to IDLE is performed (state)
        Check if timer is stopped
    03: VP():
        FrArTp_SM_mainFunction() shall call FrArTp_SduMng_rxIndication() with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_NOT_OK
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.CTSWaitPdu_Idle_timeout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>602</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1024</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_CTSTXPENDING_IDLE_timeout</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>2243</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event timeout() occurs in CTSTXPENDING state,
    transition from CTSTXPENDING to IDLE will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to CTSTXPENDING done
  
Test Execution: 
    01: Elapse as many main function cycles as necessary to trigger Ar timeout
    02: VP():
        Check if transition from CTSTXPENDING to IDLE is performed (state)
        Check if timer is stopped
    03: VP():
        FrArTp_SM_mainFunction() shall call FrArTp_Encode_cancelTx() with the correct parameter.
    04: VP():
        FrArTp_SM_mainFunction() shall call FrArTp_SduMng_rxIndication() with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_NOT_OK
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.CTSTxPending_Idle_timeout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>603</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1025</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_WAITWAITPDU_IDLE_timeout</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>2324</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event timeout() occurs in WAITWAITPDU state,
    transition from WAITWAITPDU to IDLE will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to WAITWAITPDU performed
  
Test Execution: 
    01: Elapse as many main function cycles as necessary to trigger Cr timeout
    02: VP():
        Check if transition from WAITWAITPDU to IDLE is performed (state)
        Check if timer is stopped
    03: VP():
        FrArTp_SM_mainFunction() shall call FrArTp_SduMng_rxIndication() with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_NOT_OK
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.WAITWaitPdu_Idle_timeout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>604</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1026</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_WAITTXPENDING_IDLE_timeout</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>2404</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event timeout() occurs in OVFLWTXPENDING state,
    transition from WAITTXPENDING to IDLE will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to WAITTXPENDING performed
  
Test Execution: 
    01: Elapse as many main function cycles as necessary to trigger Ar timeout
    02: VP():
        Check if transition from WAITTXPENDING to IDLE is performed (state)
        Check if timer is stopped
    03: VP():
        FrArTp_SM_mainFunction() shall call FrArTp_Encode_cancelTx() with the correct parameter.
    04: VP():
        FrArTp_SM_mainFunction() shall call FrArTp_SduMng_rxIndication() with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_NOT_OK
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.WAITTxPending_Idle_timeout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>605</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1027</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_WAITDATA_IDLE_timeout</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>2483</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event timeout() occurs in WAITDATA state,
    transition from WAITDATA to IDLE will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to WAITDATA
  
Test Execution: 
    01: Elapse as many main function cycles as necessary to trigger Cr timeout
    02: VP():
        Check if transition from WAITDATA to IDLE is performed (state)
        Check if timer is stopped
    03: VP():
        FrArTp_SM_mainFunction() shall call FrArTp_SduMng_rxIndication() with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_NOT_OK
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.WaitData_Idle_timeout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>607</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1028</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_OVFLWWAITPDU_IDLE_cancelRx</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>2563</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event cancelRx() occurs in OVFLWWAITPDU state,
    transition from OVFLWWAITPDU to IDLE will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to OVFLWWAITPDU done
  
Test Execution: 
    01: Call FrArTp_SM_cancelRx()
    02: VP():
        Check if retval = E_OK
        Check if transition from OVFLWWAITPDU to IDLE is performed (state)
        Check if timer is stopped
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.OVFLWWaitPdu_Idle_cancelRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>608</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1029</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_OVFLWTXPENDING_IDLE_cancelRx</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>2630</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event cancelRx() occurs in OVFLWTXPENDING state,
    transition from OVFLWTXPENDING to IDLE will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to OVFLWTXPENDING done
  
Test Execution: 
    01: Call FrArTp_SM_cancelRx()
    02: VP():
        Check if retval = E_OK
        Check if transition from OVFLWWAITPDU to IDLE is performed (state)
        Check if timer is stopped
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.OVFLWTxPending_Idle_cancelRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>609</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1030</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_CTSWAITPDU_IDLE_cancelRx</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>2698</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event cancelRx() occurs in CTSWAITPDU state,
    transition from CTSWAITPDU to IDLE will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to CTSWAITPDU performed
  
Test Execution: 
    01: Call FrArTp_SM_cancelRx()
    02: VP():
        Check if retval = E_OK
        Check if transition from OVFLWWAITPDU to IDLE is performed (state)
        Check if timer is stopped
    03: VP():
        FrArTp_SM_cancelRx() shall call FrArTp_SduMng_rxIndication() with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_NOT_OK
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.CTSWaitPdu_Idle_cancelRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>610</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1031</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_CTSTXPENDING_IDLE_cancelRx</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>2776</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event cancelRx() occurs in CTSTXPENDING state,
    transition from CTSTXPENDING to IDLE will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to CTSTXPENDING done
  
Test Execution: 
    01: Call FrArTp_SM_cancelRx()
    02: VP():
        Check if retval = E_OK
        Check if transition from OVFLWWAITPDU to IDLE is performed (state)
        Check if timer is stopped
    03: VP():
        FrArTp_SM_cancelRx() shall call FrArTp_SduMng_rxIndication() with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_NOT_OK
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.CTSTxPending_Idle_cancelRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>611</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1032</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_WAITWAITPDU_IDLE_cancelRx</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>2852</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event cancelRx() occurs in WAITWAITPDU state,
    transition from WAITWAITPDU to IDLE will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to WAITWAITPDU performed
  
Test Execution: 
    01: Call FrArTp_SM_cancelRx()
    02: VP():
        Check if retval = E_OK
        Check if transition from OVFLWWAITPDU to IDLE is performed (state)
        Check if timer is stopped
    03: VP():
        FrArTp_SM_cancelRx() shall call FrArTp_SduMng_rxIndication() with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_NOT_OK
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.WAITWaitPdu_Idle_cancelRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>612</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1033</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_WAITTXPENDING_IDLE_cancelRx</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>2930</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event cancelRx() occurs in WAITTXPENDING state,
    transition from WAITTXPENDING to IDLE will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to WAITTXPENDING performed
  
Test Execution: 
    01: Call FrArTp_SM_cancelRx()
    02: VP():
        Check if retval = E_OK
        Check if transition from OVFLWWAITPDU to IDLE is performed (state)
        Check if timer is stopped
    03: VP():
        FrArTp_SM_cancelRx() shall call FrArTp_SduMng_rxIndication() with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_NOT_OK
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.WAITTxPending_Idle_cancelRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>613</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1034</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_CHECKBUFFER_IDLE_cancelRx</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>3009</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
     Verify that if event cancelRx() occurs in CHECKBUFFER state,
    transition from CHECKBUFFER to IDLE will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to CHECKBUFFER done
  
Test Execution: 
    01: Call FrArTp_SM_cancelRx()
    02: VP():
        Check if retval = E_OK
        Check if transition from OVFLWWAITPDU to IDLE is performed (state)
        Check if timer is stopped
    03: VP():
        FrArTp_SM_cancelRx() shall call FrArTp_SduMng_rxIndication() with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_NOT_OK
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.CheckBuffer_Idle_cancelRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>614</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1035</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_WAITDATA_IDLE_cancelRx</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>3085</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event cancelRx() occurs in WAITDATA state,
    transition from WAITDATA to IDLE will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr IDLE to WAITDATA performed
  
Test Execution: 
    01: Call FrArTp_SM_cancelRx()
    02: VP():
        Check if retval = E_OK
        Check if transition from OVFLWWAITPDU to IDLE is performed (state)
        Check if timer is stopped
    03: VP():
        FrArTp_SM_cancelRx() shall call FrArTp_SduMng_rxIndication() with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_NOT_OK
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.WaitData_Idle_cancelRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>615</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1036</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_OVFLWWAITPDU_IDLE_newRx</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>3162</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event FrArTp_SM_receivedData()(datalength &gt; 0)
    occurs in OVFLWWAITPDU state, transition from OVFLWWAITPDU to
    IDLE will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to OVFLWWAITPDU done
  
Test Execution: 
    01: Call FrArTp_SM_receivedData() with DL &gt; 0
    02: VP():
        Check that a new reception was started:
        FrArTp_SM_receivedData() shall call FrArTp_SduMng_startOfReception() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - TpSduLength shall have value datalength
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.OVFLWWaitPdu_Idle_newRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>616</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1037</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_OVFLWTXPENDING_IDLE_newRx</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>3223</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event FrArTp_SM_receivedData()(datalength &gt; 0)
    occurs in OVFLWTXPENDING state,
    transition from OVFLWTXPENDING to IDLE will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to OVFLWTXPENDING done
  
Test Execution: 
    01: Call FrArTp_SM_receivedData() with DL = 0
    02: VP():
         Check that no action will be done
    03: Call FrArTp_SM_receivedData() with DL &gt; 0
    04: VP():
        Check that a new reception was started:
        FrArTp_SM_receivedData() shall call FrArTp_SduMng_startOfReception() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - TpSduLength shall have value datalength
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.OVFLWTxPending_Idle_newRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>617</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1038</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_CTSWAITPDU_IDLE_newRx</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>3293</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event FrArTp_SM_receivedData()(datalength &gt; 0)
    occurs in CTSWAITPDU state,
    transition from CTSWAITPDU to IDLE will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to CTSWAITPDU performed
  
Test Execution: 
    01: Call FrArTp_SM_receivedData() with DL &gt; 0
    02: VP():
        FrArTp_SM_receivedData() shall call FrArTp_SduMng_rxIndication with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_NOT_OK
    03: VP():
        Check that a new reception was started:
        FrArTp_SM_receivedData() shall call FrArTp_SduMng_startOfReception() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - TpSduLength shall have value datalength
    04: VP():
         FrArTp_SM_receivedData() shall call FrArTp_SduMng_copyRxData() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.CTSWaitPdu_Idle_newRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>618</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1039</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_CTSTXPENDING_IDLE_newRx</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>3370</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event FrArTp_SM_receivedData()(datalength &gt; 0)
    occurs in CTSTXPENDING state,
    transition from CTSTXPENDING to IDLE will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to CTSTXPENDING done
  
Test Execution: 
    01: Call FrArTp_SM_receivedData() with DL &gt; 0
    02: VP():
        FrArTp_SM_receivedData() shall call FrArTp_SduMng_rxIndication with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_NOT_OK
    03: VP():
        Check that a new reception was started:
        FrArTp_SM_receivedData() shall call FrArTp_SduMng_startOfReception() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - TpSduLength shall have value datalength
    04: VP():
         FrArTp_SM_receivedData() shall call FrArTp_SduMng_copyRxData() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.CTSTxPending_Idle_newRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>619</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1040</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_WAITWAITPDU_IDLE_newRx</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>3447</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
     Verify that if event FrArTp_SM_receivedData()(datalength &gt; 0)
     occurs in WAITWAITPDU state,
    transition from WAITWAITPDU to IDLE will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to WAITWAITPDU performed
  
Test Execution: 
    01: Call FrArTp_SM_receivedData() with DL &gt; 0
    02: VP():
        FrArTp_SM_receivedData() shall call FrArTp_SduMng_rxIndication with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_NOT_OK
    03: VP():
        Check that a new reception was started:
        FrArTp_SM_receivedData() shall call FrArTp_SduMng_startOfReception() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - TpSduLength shall have value datalength
    04: VP():
         FrArTp_SM_receivedData() shall call FrArTp_SduMng_copyRxData() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.WAITWaitPdu_Idle_newRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>620</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1041</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_WAITTXPENDING_IDLE_newRx</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>3525</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event FrArTp_SM_receivedData()(datalength &gt; 0)
    occurs in WAITTXPENDING state,
    transition from WAITTXPENDING to IDLE will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to WAITTXPENDING performed
  
Test Execution: 
    01: Call FrArTp_SM_receivedData() with DL &gt; 0
    02: VP():
        FrArTp_SM_receivedData() shall call FrArTp_SduMng_rxIndication with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_NOT_OK
    03: VP():
        Check that a new reception was started:
        FrArTp_SM_receivedData() shall call FrArTp_SduMng_startOfReception() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - TpSduLength shall have value datalength
    04: VP():
         FrArTp_SM_receivedData() shall call FrArTp_SduMng_copyRxData() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.WAITTxPending_Idle_newRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>621</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1042</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_CHECKBUFFER_IDLE_newRx</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>3604</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event FrArTp_SM_receivedData()(datalength &gt; 0)
    occurs in CHECKBUFFER state,
    transition from CHECKBUFFER to IDLE will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to CHECKBUFFER done
  
Test Execution: None.
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.CheckBuffer_Idle_newRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>623</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1043</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_TR_WAITDATA_IDLE_newRx</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>3680</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event FrArTp_SM_receivedData()(datalength &gt; 0)
    occurs in WAITDATA state,
    transition from WAITDATA to IDLE will be performed
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr IDLE to WAITDATA performed
  
Test Execution: 
    01: Call FrArTp_SM_receivedData() with DL &gt; 0
    02: VP():
        FrArTp_SM_receivedData() shall call FrArTp_SduMng_rxIndication with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_NOT_OK
    03: VP():
        Check that a new reception was started:
        FrArTp_SM_receivedData() shall call FrArTp_SduMng_startOfReception() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - TpSduLength shall have value datalength
    04: VP():
         FrArTp_SM_receivedData() shall call FrArTp_SduMng_copyRxData() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.WaitData_Idle_newRx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>622</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1044</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_STATE_IDLE_ignore</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>3759</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that events not specified as transitions in the state IDLE
    are ignored
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Call FrArTp_Init() for module initialization
    - Set actconn to 0U, for testing purpose
  
Test Execution: 
    01: Call FrArTp_SM_isFCPending()
    02: VP():
        Check if state is IDLE
        Check that no function was called
    03: Call FrArTp_SM_copyFCParameters()
    04: VP():
        Check if state is IDLE
        Check that no function was called
    05: Call FrArTp_SM_txConfirmationFC()
    06: VP():
        Check if state is IDLE
        Check that no function was called
    07: Call FrArTp_SM_mainFunction()
    08: VP():
        Check if state is IDLE
        Check that no function was called
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>577</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1045</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_STATE_CHECKBUFFER_ignore</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>3851</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that events not specified as transitions in the state CHECKBUFFER
    are ignored
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to CHECKBUFFER done
  
Test Execution: 
    01: Call FrArTp_SM_isFCPending()
    02: VP():
        Check if state is CHECKBUFFER
        Check that no function was called
    03: Call FrArTp_SM_copyFCParameters()
    04: VP():
        Check if state is CHECKBUFFER
        Check that no function was called
    05: Call FrArTp_SM_txConfirmationFC()
    06: VP():
        Check if state is CHECKBUFFER
        Check that no function was called
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>577</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1046</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_STATE_WAITWAITPDU_ignore</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>3937</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that events not specified as transitions in the state WAITWAITPDU
    are ignored
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to WAITWAITPDU done
  
Test Execution: 
    01: Call FrArTp_SM_copyFCParameters()
    02: VP():
        Check if state is WAITWAITPDU
        Check that no function was called
    03: Call FrArTp_SM_txConfirmationFC()
    04: VP():
        Check if state is WAITWAITPDU
        Check that no function was called
    05: Call FrArTp_SM_mainFunction()
    06: VP():
         Check that no transition action was performed
         Check if state is WAITWAITPDU
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>577</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1047</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_STATE_WAITTXPENDING_ignore</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>4022</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that events not specified as transitions in the state WAITTXPENDING
    are ignored
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to WAITTXPENDING done
  
Test Execution: 
    01: Call FrArTp_SM_mainFunction()
    02: VP():
         Check that no transition action was performed
         Check if state is WAITTXPENDING
    03: Call FrArTp_SM_isFCPending()
    04: VP():
        Check if state is WAITTXPENDING
        Check that no function was called
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>577</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1048</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_STATE_CTSWAITPDU_ignore</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>4094</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that events not specified as transitions in the state CTSWAITPDU
    are ignored
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to CTSWAITPDU done
  
Test Execution: 
    01: Call FrArTp_SM_copyFCParameters()
    02: VP():
        Check if state is CTSWAITPDU
        Check that no function was called
    03: Call FrArTp_SM_txConfirmationFC()
    04: VP():
        Check if state is CTSWAITPDU
        Check that no function was called
    05: Call FrArTp_SM_mainFunction()
    06: VP():
         Check that no transitiona action was performed
         Check if state is CTSWAITPDU
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>577</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1049</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_STATE_CTSTXPENDING_ignore</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>4179</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that events not specified as transitions in the state CTSTXPENDING
    are ignored
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to CTSTXPENDING done
  
Test Execution: 
    01: Call FrArTp_SM_mainFunction()
    02: VP():
        Check that no transition action was performed
        Check if state is CTSTXPENDING
    03: Call FrArTp_SM_isFCPending()
    04: VP():
        Check if state is CTSTXPENDING
        Check that no function was called
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>577</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1050</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_STATE_WAITDATA_ignore</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>4251</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that events not specified as transitions in the state WAITDATA
    are ignored
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to WAITDATA done
  
Test Execution: 
    01: Call FrArTp_SM_isFCPending()
    02: VP():
        Check if state is WAITDATA
        Check that no function was called
    03: Call FrArTp_SM_copyFCParameters()
    04: VP():
        Check if state is WAITDATA
        Check that no function was called
    05: Call FrArTp_SM_txConfirmationFC()
    06: VP():
        Check if state is WAITDATA
        Check that no function was called
    07: Call FrArTp_SM_mainFunction()
    08: VP():
        Check that no transition action was performed
        Check if state is WAITDATA
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>577</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1051</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_STATE_OVFLWWAITPDU_ignore</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>4348</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that events not specified as transitions in the state OVFLWWAITPDU
    are ignored
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to OVFLWWAITPDU done
  
Test Execution: 
    01: Call FrArTp_SM_copyFCParameters()
    02: VP():
        Check if state is OVFLWWAITPDU
        Check that no function was called
    03: Call FrArTp_SM_txConfirmationFC()
    04: VP():
        Check if state is OVFLWWAITPDU
        Check that no function was called
    05: Call FrArTp_SM_mainFunction()
    06: VP():
         Check that no transition action was performed
         Check if state is OVFLWWAITPDU
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>577</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1052</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_STATE_OVFLWTXPENDING_ignore</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>4433</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that events not specified as transitions in the state OVFLWTXPENDING
    are ignored
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to OVFLWTXPENDING done
  
Test Execution: 
    01: Call FrArTp_SM_mainFunction()
    02: VP():
         Check that no transition action was performed
         Check if state is OVFLWTXPENDING
    03: Call FrArTp_SM_isFCPending()
    04: VP():
        Check if state is OVFLWTXPENDING
        Check that no function was called
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>577</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1053</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_SF_STARTOFRECEPTION_BUSY</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>4504</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if a single frame is received  ,
    and startofreception returns BUSY, receiving is aborted
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Call FrArTp_Init() for module initialization
    - set retval for FrArTp_SduMng_startOfReception() to BUFREQ_E_BUSY
  
Test Execution: 
    01: Call FrArTp_SM_receivedData() and pass a single frame
    02: VP():
         FrArTp_SM_receivedData() shall call FrArTp_SduMng_startOfReception() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - TpSduLength shall have value datalength
    03: VP(): No additional calls shall be made.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>194</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1054</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_FF_STARTOFRECEPTION_BUSY</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>4570</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that a first frame is received  ,
    and startofreception returns BUSY, receiving is aborted
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Call FrArTp_Init() for module initialization
    - set retval for FrArTp_SduMng_startOfReception() to BUFREQ_E_BUSY
  
Test Execution: 
    01: Call FrArTp_SM_receivedData() and pass a single frame
    02: VP():
         FrArTp_SM_receivedData() shall call FrArTp_SduMng_startOfReception() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - TpSduLength shall have value datalength
    03: VP(): No additional calls shall be made.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00262</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>194</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1055</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_FF_BUFFER_TOO_SMALL</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>4635</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that a first frame is received  ,
    and available buffer &lt; payloadlength, receiving is aborted
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Call FrArTp_Init() for module initialization
    - set available buffer to payloadlength - 1U
  
Test Execution: 
    01: Call FrArTp_SM_receivedData() and pass a single frame
    02: VP():
         FrArTp_SM_receivedData() shall call FrArTp_SduMng_startOfReception() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - TpSduLength shall have value datalength
    03: VP():
        FrArTp_SM_receivedData() shall call FrArTp_SduMng_rxIndication with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_OK
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00294</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>274</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1056</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_FF_NO_FREE_CONNECTION</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>4706</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that a FF is discarded if no free connection is left and the reception of the first
    message is still working.
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to WAITDATA performed for first FF
  
Test Execution: 
    01: Receive second FF without free connection left
    02: VP(): Second FF shall be discarded
    03: Call FrArTp_SM_receivedData() and pass a CF
    04: VP():
         FrArTp_SM_receivedData() shall call FrArTp_SduMng_copyRxData() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - SduLength shall have value payloadLength
         - SduDataPtr shall contain the received payload
    05: VP():
        Check if transition from WAITDATA to WAITDATA is performed (state)
        Check if timer is reloaded with timeoutCR value
        Check if frameCount is incremented
        Check if seq number is incremented
        Check remaining data
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00261</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>193</internalId></provcov>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.WaitData_WaitData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>593</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1057</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_SF_STARTOFRECEPTION_NOTOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>4805</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if a first frame is received,
    and startofreception returns BUFREQ_E_NOT_OK or BUFREQ_E_OVFL, receiving is aborted
    without calling FrArTp_SduMng_rxIndication().
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Call FrArTp_Init() for module initialization.
    - Set return buffer to BUFREQ_E_NOT_OK.
    - Set return buffer to BUFREQ_E_OVFL.
  
Test Execution: 
    01: Call FrArTp_SM_receivedData() and pass a first frame.
    02: VP(FrArTp.ASR42.SWS_FrArTp_00298.1):
         FrArTp_SM_receivedData() shall call FrArTp_SduMng_startOfReception() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - TpSduLength shall have value datalength
    03: Call FrArTp_SM_receivedData() and pass a first frame.
    04: VP(FrArTp.ASR42.SWS_FrArTp_00298.2):
         FrArTp_SM_receivedData() shall call FrArTp_SduMng_startOfReception() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - TpSduLength shall have value datalength
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00298.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>255</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00298.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>256</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1058</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_CF_UNEXPECTED</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>4894</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if a consecutive frame is received,
    in a state different than WAITDATA, frame is ignored.
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Tr from IDLE to CHECKBUFFER performed
  
Test Execution: 
    01: Call FrArTp_SM_receivedData() and pass a consecutive frame.
    02: VP(FrArTp.ASR42.SWS_FrArTp_00083.9):
        Check that frame is ignored (no action was done).
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00083.9</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>135</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1059</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_CANCELRX_IGNORE</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>4950</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if cancelRx() api is called, without having a valid
    active connection, request will be ignored
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - init performed
    - set numActConn to 0U
  
Test Execution: 
    01: Call FrArTp_SM_cancelRx()
    02: VP():
         Check that FrArTp_SM_cancelRx return value is E_NOT_OK
    03: VP():
        Check that frame is ignored ( no action was done )
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00227.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>227</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1060</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_CHECKBUFFER_COPYRXDATA_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>5011</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if FrArTp_SM_mainFunction() api is called in CHECKBUFFER state
    and FrArTp_SduMng_copyRxData() returns a value BUFREQ_E_NOT_OK, reception shall be aborted.
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - set timer to 0 to ignore timer
    - tr IDLE to CHECKBUFFER done
    - set return value of FrArTp_SduMng_copyRxData to a value BUFREQ_E_NOT_OK
  
Test Execution: 
    01: Call FrArTp_SM_mainFunction()
    02: VP(FrArTp.Design.SM.Rx.CheckBuffer_Idle_bufferError):
         FrArTp_SM_mainFunction() shall call FrArTp_SduMng_copyRxData() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
    03: VP(FrArTp.Design.SM.Rx.CheckBuffer_Idle_bufferError):
        FrArTp_SM_mainFunction() shall call FrArTp_SduMng_rxIndication with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_NOT_OK
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.CheckBuffer_Idle_bufferError</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>583</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1061</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_WAITDATA_COPYRXDATA_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>5089</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if FrArTp_SM_receivedData() api is called in WAITDATA state
    and FrArTp_SduMng_copyRxData() returns a value BUFREQ_E_NOT_OK, reception shall
    be aborted.
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - tr IDLE to WAITDATA done
    - set return value of FrArTp_SduMng_copyRxData to a value BUFREQ_E_NOT_OK
  
Test Execution: 
    01: Call FrArTp_SM_receivedData() and pass a CF
    02: VP(FrArTp.Design.SM.Rx.WaitData_Idle_bufferError):
         FrArTp_SM_receivedData() shall call FrArTp_SduMng_copyRxData() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
    03: VP(FrArTp.Design.SM.Rx.WaitData_Idle_bufferError):
        FrArTp_SM_receivedData() shall call FrArTp_SduMng_rxIndication with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_NOT_OK
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.WaitData_Idle_bufferError</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>606</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1062</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_IDLE_COPYRXDATA_NOT_OK</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>5167</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if FrArTp_SM_receivedData() api is called in IDLE state
    and FrArTp_SduMng_copyRxData() returns a value BUFREQ_E_NOT_OK, receiving will be
    aborted
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - call FrArTp init
    - set return value of FrArTp_SduMng_copyRxData to a value BUFREQ_E_NOT_OK
  
Test Execution: 
    01: Call FrArTp_SM_receivedData() and pass a FF
    02: VP(FrArTp.Design.SM.Rx.Idle_Idle_bufferError):
         FrArTp_SM_receivedData() shall call FrArTp_SduMng_startOfReception() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
    03: VP(FrArTp.Design.SM.Rx.Idle_Idle_bufferError):
         FrArTp_SM_receivedData() shall call FrArTp_SduMng_copyRxData() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
    04: VP(FrArTp.Design.SM.Rx.Idle_Idle_bufferError):
        FrArTp_SM_receivedData() shall call FrArTp_SduMng_rxIndication with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_NOT_OK
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Rx.Idle_Idle_bufferError</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>580</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1063</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_RX_CF_DL0</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Rx.c</sourcefile>
      <sourceline>5246</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if a consecutive frame, DL=0 ,is received  in IDLE state ,
    frame will be ignored
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Start a receiving
    - set state to idle
  
Test Execution: 
    01: Call FrArTp_SM_receivedData() and pass a consecutive frame
    02: VP():
        Frame will be ignored, no action should be done
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00039.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1064</internalId></specobject>
  </specobjects>
    <specobjects doctype="tcs">
    <specobject>
      <id>FRARTP_UNITTEST_SM_TX_TR_IDLE_WAITPDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Tx.c</sourcefile>
      <sourceline>204</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if a transmission is requested (SF), transition from IDLE to
    WAITPDU is performed
  
Test Object: 
    Unit: Tx SM
  
Test Precondition: 
    - Call FrArTp_Init() for module initialization
  
Test Execution: 
    01: Call FrArTp_SM_transmit() for a single frame
    02: VP():
        Check if transition from idle to waitpdu is performed (state)
        Check if blocks is set to 1
        Check if available is set to 0
        Check if remaining equals txSduLength
        Check if initial frame is set to TRUE (ctsExpected)
        Check that sequence number is 0
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Tx.Idle_WaitPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>556</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1065</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_TX_TR_WAITPDU_WAITPDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Tx.c</sourcefile>
      <sourceline>275</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that a transition from WAITPDU to WAITPDU is performed to update the available
    buffer.(SF)
  
Test Object: 
    Unit: Tx SM
  
Test Precondition: 
    - Tr from IDLE to WAITPDU performed
  
Test Execution: 
    01: Call FrArTp_SM_isDataPending()
    02: VP():
        Check that return value is equal with 0
    03: VP():
        FrArTp_SM_isDataPending() shall call FrArTp_SduMng_copyTxData() with correct parameters:
        - connIdx shall have value EBTEST_TESTCONNECTION_IDX
        - SduLength shall have value 0
    04: VP():
        Check if transition from idle to waitpdu is performed (state)
        Check if blocks is set to 1
        Check if available is set to available_buffer
        Check if remaining equals txSduLength
        Check if initial frame is set to TRUE (ctsExpected)
        Check that sequence number is 0
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Tx.WaitPdu_WaitPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>557</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1066</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_TX_TR_WAITPDU_TXPENDING</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Tx.c</sourcefile>
      <sourceline>360</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that a transition from WAITPDU to TXPENDING is performed if enough
    buffer is available.(SF)
  
Test Object: 
    Unit: Tx SM
  
Test Precondition: 
    - Tr from WAITPDU to WAITPDU performed
  
Test Execution: 
    01: Call FrArTp_SM_isDataPending()
    02: VP():
        Check that return value is equal with 1
    03: VP():
        Check if transition from idle to txpending is performed (state)
        Check if blocks is set to 1
        Check if available is set to txSduLength (available &gt; sdulength)
        Check if remaining equals txSduLength
        Check if initial frame is set to TRUE (ctsExpected)
        Check that sequence number is 0
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Tx.WaitPdu_TxPending</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>558</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1067</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_TX_TR_TXPENDING_TXPENDING_SF</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Tx.c</sourcefile>
      <sourceline>434</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event copyData() occurs in state TXPENDING and blocks &gt; 0, a
    transition from TXPENDING to TXPENDING is performed
  
Test Object: 
    Unit: Tx SM
  
Test Precondition: 
    - Tr from IDLE to TXPENDING performed
  
Test Execution: 
    01: Call FrArTp_SM_copyData()
    02: VP():
         Check that return value is equal with TRUE
         Check parameter values of FrArTp_SM_copyData()
    03: VP():
         FrArTp_SM_copyData() shall call FrArTp_SduMng_copyTxData() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - txcopied_data shall have value txSduLength
         - EbTest_TxFrameData shall contain the payload to be transmitted
    04: VP():
        Check if transition from txpending to txpending is performed (state)
        Check if blocks is set to 0 (decremented)
        Check if remaining equals 0 (SF)
        Check if initial frame is set to TRUE (ctsExpected)
        Check that sequence number is 1
        Check if frameType is EBTEST_FRARTP_SM_FT_CONSECUTIVE_FRAME
        Check timer value equals timeoutAs
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Tx.TxPending_TxPending_copyData_Ok</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>559</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1068</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_TX_TR_TXPENDING_IDLE_SF</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Tx.c</sourcefile>
      <sourceline>534</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event FrArTp_SM_txConfirmationData() occurs in state TXPENDING and remaining = 0, a
    transition from TXPENDING to IDLE is performed
  
Test Object: 
    Unit: Tx SM
  
Test Precondition: 
    - Tr from IDLE to TXPENDING performed (data copied)
  
Test Execution: 
    01: Call FrArTp_SM_txConfirmationData()
    02: VP():
        Check if transition from txpending to idle is performed (state)
        Check timer value equals 0 ( stopped )
    03: VP():
        FrArTp_SM_txConfirmationData() shall call FrArTp_SduMng_txConfirmation() with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_OK
        Check that no active connection was associated to this connection
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Tx.TxPending_Idle_txConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>566</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1069</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_TX_TR_TXPENDING_WAITFC</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Tx.c</sourcefile>
      <sourceline>630</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event FrArTp_SM_txConfirmationData() occurs in state TXPENDING and remaining &gt; 0,
    and blocks == 0 or CTS == FALSE a transition from TXPENDING to WAITFC is performed, a FF is used
  
Test Object: 
    Unit: Tx SM
  
Test Precondition: 
    - Tr from IDLE to TXPENDING performed (data copied)
  
Test Execution: 
    01: Call FrArTp_SM_txConfirmationData()
    02: VP():
        Check if transition from txpending to waitfc is performed (state)
        Check timer value equals timeoutBS
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Tx.TxPending_WaitFC</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>563</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1070</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_TX_TR_WAITFC_WAITFC</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Tx.c</sourcefile>
      <sourceline>709</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event FrArTp_SM_receivedWT() occurs in state WAITFC,
    a transition from WAITFC to WAITFC is performed, a FF is used
  
Test Object: 
    Unit: Tx SM
  
Test Precondition: 
    - Tr from IDLE to WAITFC performed (data copied)
    - Call mainfunction to check timeoutBS
  
Test Execution: 
    01: Call FrArTp_SM_receivedWT()
    02: VP():
        Check if transition from waitfc to waitfc is performed (state)
        Check that the timer is reloaded with timeoutBS
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Tx.WaitFC_WaitFC</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>564</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1071</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_TX_TR_WAITFC_WAITPDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Tx.c</sourcefile>
      <sourceline>778</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event FrArTp_SM_receivedCTS() occurs in state WAITFC,
    a transition from WAITFC to WAITPDU is performed
  
Test Object: 
    Unit: Tx SM
  
Test Precondition: 
    - Tr from IDLE to WAITFC performed (data copied)
  
Test Execution: 
    01: Call FrArTp_SM_receivedCTS()
    02: VP():
        Check if transition from waitfc to waitPdu is performed (state)
        Check that the timer is reloaded with timeoutCS
        Check that blocks the new value BS
        Check value of stmin
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Tx.WaitFC_WaitPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>565</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1072</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_TX_TR_TXPENDING_WAITTX</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Tx.c</sourcefile>
      <sourceline>850</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event FrArTp_SM_txConfirmationData() occurs in state TXPENDING,
    and remaining &gt; 0U and blocks &gt; 0U transition from TXPENDING to WAITX is performed
  
Test Object: 
    Unit: Tx SM
  
Test Precondition: 
    - Tr from IDLE to TXPENDING performed (data copied)
  
Test Execution: 
    01: Call FrArTp_SM_txConfirmationData()
    02: VP():
        Check if transition from txpending to waitTx is performed (state)
        Check that the timer is reloaded with stmin value
        Check that blocks are decremented
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Tx.TxPending_WaitTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>561</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1073</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_TX_TR_WAITTX_WAITPDU</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Tx.c</sourcefile>
      <sourceline>935</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event timeout occurs in state WAITTX ( stmin expires ),
    transition from WAITX to WAITPDU is performed
  
Test Object: 
    Unit: Tx SM
  
Test Precondition: 
    - Tr from IDLE to WAITX performed
    - Prepare timeout
  
Test Execution: 
    01: Call FrArTp_SM_MainFunction() stmin times
    02: VP():
        Check if transition from waitTx to waitpdu is performed (state)
        Check that the timer is reloaded with CS value
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Tx.WaitTx_WaitPdu</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>562</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1074</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_TX_TR_WAITPDU_IDLE_timeout</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Tx.c</sourcefile>
      <sourceline>1024</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that a transition from WAITPDU to IDLE is performed if timeout occurs.
  
Test Object: 
    Unit: Tx SM
  
Test Precondition: 
    - Tr from IDLE to WAITPDU performed
    - Prepare timeout
  
Test Execution: 
    01: VP():
        Check if transition from WAITPDU to IDLE is performed (state)
        Check if timer is stopped
    02: VP():
        FrArTp_SM_mainFunction() shall call FrArTp_SduMng_txConfirmation() with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_NOT_OK
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Tx.WaitPdu_Idle_timeout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>569</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1075</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_TX_TR_TXPENDING_IDLE_timeout</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Tx.c</sourcefile>
      <sourceline>1097</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event timeout occurs in state TXPENDING ,
    transition from TXPENDING to IDLE is performed
  
Test Object: 
    Unit: Tx SM
  
Test Precondition: 
    - Tr from IDLE to TXPENDING performed
    - Prepare timeout
  
Test Execution: 
    01: VP():
        Check if transition from TXPENDING to IDLE is performed (state)
        Check if timer is stopped
    02: VP():
        FrArTp_SM_mainFunction() shall call FrArTp_Encode_cancelTx() with the correct parameter.
    03: VP():
        FrArTp_SM_mainFunction() shall call FrArTp_SduMng_txConfirmation() with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_NOT_OK
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Tx.TxPending_Idle_timeout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>570</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1076</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_TX_TR_WAITFC_IDLE_timeout</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Tx.c</sourcefile>
      <sourceline>1177</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event timeout occurs in state WAITFC ,
    transition from TXPENDING to IDLE is performed
  
Test Object: 
    Unit: Tx SM
  
Test Precondition: 
    - Tr from IDLE to WAITFC performed
    - Prepare timeout
  
Test Execution: 
    01: VP():
        Check if transition from WAITFC to IDLE is performed (state)
        Check if timer is stopped
    02: VP():
        FrArTp_SM_mainFunction() shall call FrArTp_SduMng_txConfirmation() with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_NOT_OK
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Tx.WaitFC_Idle_timeout</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>568</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1077</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_TX_TR_WAITFC_IDLE_receivedOVFLW</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Tx.c</sourcefile>
      <sourceline>1252</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event receivedOVFLW occurs in state WAITFC,
    a transition from WAITFC to IDLE is performed
  
Test Object: 
    Unit: Tx SM
  
Test Precondition: 
    - Tr from IDLE to WAITFC performed
  
Test Execution: 
    01: Call FrArTp_SM_receivedOVFLW()
    02: VP():
        Check if transition from WAITFC to IDLE is performed (state)
        Check if timer is stopped
    03: VP():
        FrArTp_SM_mainFunction() shall call FrArTp_SduMng_txConfirmation() with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_NOT_OK
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Tx.WaitFC_Idle_receivedOVFLW</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>571</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1078</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_TX_TR_WAITFC_IDLE_receivedInvalidFS</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Tx.c</sourcefile>
      <sourceline>1324</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event receivedInvalidFS occurs in state WAITFC,
    a transition from WAITFC to IDLE is performed
  
Test Object: 
    Unit: Tx SM
  
Test Precondition: 
    - Tr from IDLE to WAITFC performed
  
Test Execution: 
    01: Call FrArTp_SM_receivedInvalidFS()
    02: VP():
        Check if transition from WAITFC to IDLE is performed (state)
        Check if timer is stopped
    03: VP():
        FrArTp_SM_mainFunction() shall call FrArTp_SduMng_txConfirmation() with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_NOT_OK
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Tx.WaitFC_Idle_receivedInvalidFS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>572</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1079</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_TX_TR_WAITFC_IDLE_cancelTx</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Tx.c</sourcefile>
      <sourceline>1396</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event cancelTx occurs in state WAITFC,
    a transition from WAITFC to IDLE is performed
  
Test Object: 
    Unit: Tx SM
  
Test Precondition: 
    - Tr from IDLE to WAITFC performed
  
Test Execution: 
    01: Call FrArTp_SM_cancelTx()
    02: VP():
        Check if retVal = E_OK
        Check if transition from WAITFC to IDLE is performed (state)
        Check if timer is stopped
    03: VP():
        FrArTp_SM_cancelTx() shall call FrArTp_SduMng_txConfirmation() with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_NOT_OK
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Tx.WaitFC_Idle_cancelTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>573</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1080</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_TX_TR_WAITPDU_IDLE_cancelTx</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Tx.c</sourcefile>
      <sourceline>1471</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event cancelTx occurs in state WAITPDU,
    a transition from WAITPDU to IDLE is performed
  
Test Object: 
    Unit: Tx SM
  
Test Precondition: 
    - Tr from IDLE to WAITPDU performed
  
Test Execution: 
    01: Call FrArTp_SM_cancelTx()
    02: VP():
        Check if retVal = E_OK
        Check if transition from WAITPDU to IDLE is performed (state)
        Check if timer is stopped
    03: VP():
        FrArTp_SM_cancelTx() shall call FrArTp_SduMng_txConfirmation() with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_NOT_OK
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Tx.WaitPdu_Idle_cancelTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>574</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1081</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_TX_TR_TXPENDING_IDLE_cancelTx</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Tx.c</sourcefile>
      <sourceline>1545</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event cancelTx occurs in state TXPENDING,
    a transition from TXPENDING to IDLE is performed
  
Test Object: 
    Unit: Tx SM
  
Test Precondition: 
    - Tr from IDLE to TXPENDING performed
  
Test Execution: 
    01: Call FrArTp_SM_cancelTx()
    02: VP():
        Check if retVal = E_OK
        Check if transition from TXPENDING to IDLE is performed (state)
        Check if timer is stopped
    03: VP():
        FrArTp_SM_cancelTx() shall call FrArTp_SduMng_txConfirmation() with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_NOT_OK
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Tx.TxPending_Idle_cancelTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>575</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1082</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_TX_TR_WAITTX_IDLE_cancelTx</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Tx.c</sourcefile>
      <sourceline>1618</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if event cancelTx occurs in state WAITTX,
    a transition from WAITTX to IDLE is performed
  
Test Object: 
    Unit: Tx SM
  
Test Precondition: 
    - Tr from IDLE to WAITTX performed
  
Test Execution: 
    01: Call FrArTp_SM_cancelTx()
    02: VP():
        Check if retVal = E_OK
        Check if transition from WAITTX to IDLE is performed (state)
        Check if timer is stopped
    03: VP():
        FrArTp_SM_cancelTx() shall call FrArTp_SduMng_txConfirmation() with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_NOT_OK
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Tx.WaitTx_Idle_cancelTx</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>576</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1083</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_TX_STATE_IDLE_ignore</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Tx.c</sourcefile>
      <sourceline>1714</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that events not specified as transitions in the state IDLE
    are ignored
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - Call FrArTp_Init() for module initialization
  
Test Execution: 
    01: Call FrArTp_SM_isDataPending()
    02: VP():
        Check that return value is equal with 0 (default value )
        Check if state is IDLE
        Check that no other functions was called
    03: Call FrArTp_SM_copyData()
    04: VP():
        Check that return value is equal with FALSE ( no copy performed )
        Check if state is IDLE
        Check that no function was called
    05: Call FrArTp_SM_txConfirmationData()
    06: VP():
        Check if state is IDLE
        Check that no function was called
    07: Call FrArTp_SM_receivedCTS()
    08: VP():
        Check if state is IDLE
        Check that no function was called
    09: Call FrArTp_SM_receivedWT()
    10: VP():
        Check if state is IDLE
        Check that no function was called
    11: Call FrArTp_SM_receivedOVFLW()
    12: VP():
        Check if state is IDLE
        Check that no function was called
    13: Call FrArTp_SM_receivedInvalidFS()
    14: VP():
        Check if state is IDLE
        Check that no function was called
    15: Call FrArTp_SM_cancelTx()
    16: VP():
        Check that return value is equal with E_NOT_OK
        Check if state is IDLE
        Check that no function was called
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Tx.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>555</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1084</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_TX_STATE_WAITPDU_ignore</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Tx.c</sourcefile>
      <sourceline>1859</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that events not specified as transitions in the state WAITPDU
    are ignored
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - transition IDLE to WAITPDU performed
  
Test Execution: 
    01: Call FrArTp_SM_transmit()
    02: VP():
        Check that return value is equal with E_NOT_OK
        Check if state is WAITPDU
        Check that no other functions was called
    03: Call FrArTp_SM_copyData()
    04: VP():
        Check that return value is equal with FALSE ( no copy performed )
        Check if state is WAITPDU
        Check that no function was called
    05: Call FrArTp_SM_txConfirmationData()
    06: VP():
        Check if state is WAITPDU
        Check that no function was called
    07: Call FrArTp_SM_receivedCTS()
    08: VP():
        Check if state is WAITPDU
        Check that no function was called
    09: Call FrArTp_SM_receivedWT()
    10: VP():
        Check if state is WAITPDU
        Check that no function was called
    11: Call FrArTp_SM_receivedInvalidFS()
    12: VP():
        Check if state is WAITPDU
        Check that no function was called
    13: Call FrArTp_SM_receivedOVFLW()
    14: VP():
        Check if state is WAITPDU
        Check that no function was called
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Tx.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>555</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1085</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_TX_STATE_TXPENDING_ignore</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Tx.c</sourcefile>
      <sourceline>1998</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that events not specified as transitions in the state TXPENDING
    are ignored
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - transition IDLE to TXPENDING performed
  
Test Execution: 
    01: Call FrArTp_SM_transmit()
    02: VP():
        Check that return value is equal with E_NOT_OK
        Check if state is TXPENDING
        Check that no other functions was called
    03: Call FrArTp_SM_isDataPending()
    04: VP():
        Check that return value is equal with 0 (default value )
        Check if state is TXPENDING
        Check that no other functions was called
    05: Call FrArTp_SM_receivedCTS()
    06: VP():
        Check if state is TXPENDING
        Check that no function was called
    07: Call FrArTp_SM_receivedWT()
    08: VP():
        Check if state is TXPENDING
        Check that no function was called
    09: Call FrArTp_SM_receivedInvalidFS()
    10: VP():
        Check if state is TXPENDING
        Check that no function was called
    11: Call FrArTp_SM_receivedOVFLW()
    12: VP():
        Check if state is TXPENDING
        Check that no function was called
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Tx.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>555</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1086</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_TX_STATE_WAITTX_ignore</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Tx.c</sourcefile>
      <sourceline>2117</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that events not specified as transitions in the state WAITTX
    are ignored
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - transition IDLE to WAITTX performed
  
Test Execution: 
    01: Call FrArTp_SM_transmit()
    02: VP():
        Check that return value is equal with E_NOT_OK
        Check if state is WAITTX
        Check that no other functions was called
    03: Call FrArTp_SM_isDataPending()
    04: VP():
        Check that return value is equal with 0 (default value )
        Check if state is WAITTX
        Check that no other functions was called
    05: Call FrArTp_SM_copyData()
    06: VP():
        Check that return value is equal with FALSE ( no copy performed )
        Check if state is WAITTX
        Check that no function was called
    07: Call FrArTp_SM_txConfirmationData()
    08: VP():
        Check if state is WAITTX
        Check that no function was called
    09: Call FrArTp_SM_receivedCTS()
    10: VP():
        Check if state is WAITTX
        Check that no function was called
    11: Call FrArTp_SM_receivedWT()
    12: VP():
        Check if state is WAITTX
        Check that no function was called
    13: Call FrArTp_SM_receivedInvalidFS()
    14: VP():
        Check if state is WAITTX
        Check that no function was called
    15: Call FrArTp_SM_receivedOVFLW()
    16: VP():
        Check if state is WAITTX
        Check that no function was called
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Tx.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>555</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1087</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_TX_STATE_WAITFC_ignore</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Tx.c</sourcefile>
      <sourceline>2286</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that events not specified as transitions in the state WAITFC
    are ignored
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - transition IDLE to WAITFC performed
  
Test Execution: 
    01: Call FrArTp_SM_transmit()
    02: VP():
        Check that return value is equal with E_NOT_OK
        Check if state is WAITFC
        Check that no other functions was called
    03: Call FrArTp_SM_copyData()
    04: VP():
        Check that return value is equal with FALSE ( no copy performed )
        Check if state is WAITFC
        Check that no function was called
    05: Call FrArTp_SM_isDataPending()
    06: VP():
        Check that return value is equal with 0 (default value )
        Check if state is WAITFC
        Check that no other functions was called
    07: Call FrArTp_SM_txConfirmationData()
    08: VP():
        Check if state is WAITFC
        Check that no function was called
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Tx.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>555</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1088</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_TX_STATE_IDLE_ignore_Inactive</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Tx.c</sourcefile>
      <sourceline>2390</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Verify that if events are called but no active connections available,
    actions are ignored
  
Test Object: 
    Unit: Rx SM
  
Test Precondition: 
    - init FrArTp
  
Test Execution: 
    01: Call FrArTp_SM_cancelTx()
    02: VP():
        Check that return value is equal with E_NOT_OK
        Check that no other functions was called
    03: Call FrArTp_SM_receivedCTS()
    04: VP():
        Check that no other functions was called
    05: Call FrArTp_SM_receivedWT()
    06: VP():
        Check that no other functions was called
    07: Call FrArTp_SM_receivedOVFLW()
    08: VP():
        Check that no other functions was called
    09: Call FrArTp_SM_receivedInvalidFS()
    10: VP():
        Check that no other functions was called
    11: Call FrArTp_SM_transmit()
    12: VP():
        Check that return value is equal with E_NOT_OK
        Check that no other functions was called
    13: Call FrArTp_SM_Tx_mainFunction()
    14: VP():
        Check that no other functions was called
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Tx.Ignore</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>555</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1089</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_TX_SFE</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Tx.c</sourcefile>
      <sourceline>2514</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Transmit a SF-E, FrArTpLm = FRARTP_L4G, 1 and 2 byte addressing.
  
Test Object: 
    Unit: Tx SM
  
Test Precondition: 
    - transition from idle to txpending done
    - transfer maximum payload of a SF-E (channel dependent)
  
Test Execution: 
    01: Call FrArTp_SM_copyData().
    02: VP():
         Check that retVal equals TRUE.
         Check that payloadlength copied equals with maximum payload of SF-E for this channel.
    03: VP():
         FrArTp_SM_copyData() shall call FrArTp_SduMng_copyTxData() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - txcopied_data shall have value txSduLength
         - EbTest_TxFrameData shall contain the payload to be transmitted
    04: Call FrArTp_SM_copyData() again (blocksize = 0U) and waitCTS = TRUE.
    05: VP():
         Check that retVal equals FALSE
         - no other actions performed
    06: Call FrArTp_SM_txConfirmationData().
    07: VP():
        FrArTp_SM_txConfirmationData() shall call FrArTp_SduMng_txConfirmation() with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_OK
    08: VP():
        Check if transition from txpending to idle is performed (state).
        Check if blocks is set to 0 (decremented).
        Check if remaining equals 0 (SF).
        Check if initial frame is set to TRUE (ctsExpected).
        Check that sequence number is 1.
        Check timer value equals 0 (stopped).
    09: Call FrArTp_SM_Tx_mainFunction() with timer set to 0U.
    10: VP():
        Check that no actions where executed.
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.SFE.FRAME_LENGTH.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>418</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.SFE.FRAME_LENGTH.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>419</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1090</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_TX_FFE</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Tx.c</sourcefile>
      <sourceline>2671</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Initiate a transmit of FF-E, FrArTpLm = FRARTP_L4G, 1 and 2 byte addressing.
  
Test Object: 
    Unit: Tx SM
  
Test Precondition: 
    - transition from idle to txpending done
    - transfer maximum payload of a FF-E (channel dependent)
  
Test Execution: 
    01: Call FrArTp_SM_copyData()
    02: VP():
         Check that retVal equals TRUE.
         Check that payloadlength copied equals with maximum payload of FF-E for this channel.
    03: VP():
         FrArTp_SM_copyData() shall call FrArTp_SduMng_copyTxData() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - txcopied_data shall have value txSduLength
         - EbTest_TxFrameData shall contain the payload to be transmitted
    04: Call FrArTp_SM_txConfirmationData()
    05: VP():
        Check if transition from txpending to idle is performed (state).
        Check if blocks is set to 0 (decremented).
        Check if remaining equals 0 (SF).
        Check if initial frame is set to TRUE (ctsExpected).
        Check that sequence number is 1.
        Check if frameType is EBTEST_FRARTP_SM_FT_CONSECUTIVE_FRAME.
        Check timer value equals timeoutBs (waitfc).
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.FFE.FRAME_LENGTH.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>421</internalId></provcov>
        <provcov>
          <linksto>FrArTp.EB.FFE.FRAME_LENGTH.2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>422</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1091</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_TX_TXPENDING_TXPENDING_COPYDATA_BUSY</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Tx.c</sourcefile>
      <sourceline>2802</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Initiate a transmit of FF-E, FrArTpLm = FRARTP_L4G , with FrArTp_SduMng_copyTxData()
    return value BUFREQ_E_BUSY and BUFREQ_E_NOT_OK
  
Test Object: 
    Unit: Tx SM
  
Test Precondition: 
    - transition from idle to txpending done
    - set return values for FrArTp_SduMng_copyTxData()
  
Test Execution: 
    01: Call FrArTp_SM_copyData(), return value of FrArTp_SduMng_copyTxData() set to BUFREQ_E_BUSY
    02: VP(FrArTp.Design.SM.Tx.TxPending_TxPending_copyData_Busy):
         Check that retVal equals FALSE
    03: VP(FrArTp.Design.SM.Tx.TxPending_TxPending_copyData_Busy):
         FrArTp_SM_copyData() shall call FrArTp_SduMng_copyTxData() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - txcopied_data shall have value txSduLength
         - EbTest_TxFrameData shall contain the payload to be transmitted
    04: VP(FrArTp.Design.SM.Tx.TxPending_TxPending_copyData_Busy):
        Check if no transition from txpending is performed (state)
    05: Call FrArTp_SM_copyData(), return value of FrArTp_SduMng_copyTxData() set to BUFREQ_E_NOT_OK
    06: VP(FrArTp.Design.SM.Tx.TxPending_Idle_copyData):
         Check that retVal equals FALSE
    07: VP(FrArTp.Design.SM.Tx.TxPending_Idle_copyData):
        FrArTp_SM_copyData() shall call FrArTp_SduMng_copyTxData() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
    08: VP(FrArTp.Design.SM.Tx.TxPending_Idle_copyData):
        FrArTp_SM_copyData() shall call FrArTp_SduMng_txConfirmation() with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_NOT_OK
    09: VP(FrArTp.Design.SM.Tx.TxPending_Idle_copyData):
        Check if transition from txpending to idle is performed (state)
        Check timer value equals 0 (stopped)
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.Design.SM.Tx.TxPending_TxPending_copyData_Busy</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>560</internalId></provcov>
        <provcov>
          <linksto>FrArTp.Design.SM.Tx.TxPending_Idle_copyData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>dsn</linkdestdoctype><linkerror/><internalId>567</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1092</internalId></specobject>
    <specobject>
      <id>FRARTP_UNITTEST_SM_TX_SEGMENTED_TRANSMISSION_STMIN_DEFAULT</id>
      <status>approved</status>
      <source>EB test case specification (asc_FrArTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_FrArTp/test/ts5/Implementation/IN/FrArTp_UnitTest_SM/source/application/Appl_Tx.c</sourcefile>
      <sourceline>2930</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    Transmit a frame &gt; SF, format = EBTEST_FRARTP_FRARTPLM_L4G;
  
Test Object: 
    Unit: Tx SM
  
Test Precondition: 
    - transition from idle to waitfc done
  
Test Execution: 
    01: Call FrArTp_SM_receivedCTS() with stmin &gt; 7F
    02: VP():
        Check if transition from waitfc to waitPdu is performed (state)
        Check that the timer is reloaded with timeoutCS
        Check that blocks the new value BS
        Check value of stmin is 0U
        Check if ctsExpected set to TRUE (bs != 0Us)
        Check if remaining equals (total size - FF_E payload)
        Check if frametype is EBTEST_FRARTP_SM_FT_CONSECUTIVE_FRAME
    03: Call FrArTp_SM_isDataPending()
    04: VP():
        Check that return value is equal with expected blocks
    05: VP():
        Check state
    07: Call FrArTp_SM_copyData()
    08: VP():
         Check that return value is equal with TRUE
         Check parameter values of FrArTp_SM_copyData()
    09: VP():
         FrArTp_SM_copyData() shall call FrArTp_SduMng_copyTxData() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - txcopied_data shall have value payloadLength
         - check datalength equals 0
         - EbTest_TxFrameData shall contain the payload to be transmitted
    10: Call FrArTp_SM_txConfirmationData()
    11: VP():
        Check if transition from txpending to waitfc is performed (state)
        Check timer value equals timeoutCS
        Check that blocks equals 0U (decremented)
        Check that Cts is expected
        Check that frametype is CF
    12: Call FrArTp_SM_receivedCTS() with blocks = 0
    13: VP():
        Check if transition from waitfc to waitPdu is performed (state)
        Check that the timer is reloaded with timeoutCS
        Check that blocks the new value is 0U
        Check value of stmin is 0U
        Check if ctsExpected set to FALSE (bs = 0U)
        Check if frametype is EBTEST_FRARTP_SM_FT_CONSECUTIVE_FRAME
    14: Call FrArTp_SM_isDataPending()
    15: VP():
        Check that return value is equal with expected blocks
    16: Call FrArTp_SM_copyData() multiple times (returned value from data FrArTp_SM_isDataPending())
    17: VP():
         Check that return value is equal with TRUE
         Check parameter values of FrArTp_SM_copyData()
    18: VP():
         FrArTp_SM_copyData() shall call FrArTp_SduMng_copyTxData() with correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - txcopied_data shall have value payloadLength
         - check datalength equals 0
         - EbTest_TxFrameData shall contain the payload to be transmitted
    19: Call FrArTp_SM_txConfirmationData()
    20: VP():
        Check if all data was transmitted (remaining = 0U)
        Check if transition from txpending to idle is performed (state)
        Check timer value equals 0 ( stopped )
    21: VP():
        FrArTp_SM_txConfirmationData() shall call FrArTp_SduMng_txConfirmation() with the correct parameters:
         - connIdx shall have value EBTEST_TESTCONNECTION_IDX
         - Result shall have value E_OK
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>FrArTp.EB.1to1ConWithoutAck_Segmented.STmin.1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>443</internalId></provcov>
        <provcov>
          <linksto>FrArTp.ASR42.SWS_FrArTp_00245</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>req</linkdestdoctype><linkerror/><internalId>106</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1093</internalId></specobject>
  </specobjects>
  </specdocument>
  <violations/>
  <oreqmViolations/>
</tracingresults>
