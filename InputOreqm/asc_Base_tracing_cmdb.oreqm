<?xml version="1.0" encoding="UTF-8"?>
<tracingresults>
  <environment>
    <toolname>ReqM2</toolname>
    <toolversion>1.30.0 (stable)</toolversion>
    <toolcopyright>Copyright 2010 - 2018 Elektrobit Automotive GmbH</toolcopyright>
    <libxmlversion>2.0207</libxmlversion>
    <libxml2compileversion>2.9.10</libxml2compileversion>
    <libxml2runtimeversion>20912</libxml2runtimeversion>
    <perlversion>v5.32.1</perlversion>
    <perlptrsize>64</perlptrsize>
    <commandline>-t -q -o asc_Base_tracing_cmdb.oreqm -O /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements -c /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules_RMP4_0.xml -s approved,rejected --wfatal WDUPLICATEID,WDUPLICATEIDANDVER /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_ASWS_TransformerGeneral_R22-11.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_CANDriver_R20-11.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_CANDriver_R22-11.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_CANDriver_R403.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_CANDriver_R413.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_CANTransceiverDriver_R20-11.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_CANTransceiverDriver_R403.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_CommunicationStackTypes_R20-11.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_CommunicationStackTypes_R403.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_CommunicationStackTypes_R413.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_CommunicationStackTypes_R430.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_CryptoServiceManager_R21-11.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_EthernetDriver_R20-11.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_EthernetDriver_R430.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_EthernetInterface_R20-11.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_FlexRayDriver_R20-11.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_FlexRayDriver_R403.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_LINDriver_R20-11.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_LINDriver_R403.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_PlatformTypes_R20-11.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_PlatformTypes_R403.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_SocketAdaptor_R20-11.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_StandardTypes_R20-11.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_StandardTypes_R21-11.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_StandardTypes_R403.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_TcpIp_R20-11.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_TPS_ECUConfiguration_R20-11.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_EB_Refinements.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_EB_Requirements.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_GenericImporter/reqm_DEV.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_GenericImporter/reqm_IMPL.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_GenericImporter/reqm_IMPLXML.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_GenericImporter/reqm_SWUTS.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_OldCImporter/reqm_SWUTS_LEGACY.reqm</commandline>
    <timestamp>Mon Jun 17 19:26:50 2024</timestamp>
  </environment>
  <cmdline>
    <cmdparam>
      <name>I</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>O</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>c</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules_RMP4_0.xml</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>o</name>
      <values>
        <value>asc_Base_tracing_cmdb.oreqm</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>q</name>
    </cmdparam>
    <cmdparam>
      <name>s</name>
      <values>
        <value>approved</value>
        <value>rejected</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>t</name>
    </cmdparam>
    <cmdparam>
      <name>wfatal</name>
      <values>
        <value>WDUPLICATEID</value>
        <value>WDUPLICATEIDANDVER</value>
      </values>
    </cmdparam>
  </cmdline>
  <inputfiles>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_ASWS_TransformerGeneral_R22-11.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_CANDriver_R20-11.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_CANDriver_R22-11.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_CANDriver_R403.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_CANDriver_R413.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_CANTransceiverDriver_R20-11.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_CANTransceiverDriver_R403.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_CommunicationStackTypes_R20-11.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_CommunicationStackTypes_R403.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_CommunicationStackTypes_R413.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_CommunicationStackTypes_R430.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_CryptoServiceManager_R21-11.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_EthernetDriver_R20-11.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_EthernetDriver_R430.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_EthernetInterface_R20-11.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_FlexRayDriver_R20-11.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_FlexRayDriver_R403.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_LINDriver_R20-11.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_LINDriver_R403.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_PlatformTypes_R20-11.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_PlatformTypes_R403.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_SocketAdaptor_R20-11.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_StandardTypes_R20-11.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_StandardTypes_R21-11.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_StandardTypes_R403.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_SWS_TcpIp_R20-11.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_AUTOSAR_TPS_ECUConfiguration_R20-11.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_EB_Refinements.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_Native/asc_Base_requirements_EB_Requirements.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_GenericImporter/reqm_DEV.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_GenericImporter/reqm_IMPL.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_GenericImporter/reqm_IMPLXML.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_GenericImporter/reqm_SWUTS.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/build/reqm/ReqM2_OldCImporter/reqm_SWUTS_LEGACY.reqm</inputfile>
  </inputfiles>
  <configuration>
    <doctypes>
    <regexs>
      <!-- external level -->
      <regex>creq</regex>       <!-- since 10/1018: introduced for updated tracing model-->

      <!-- product line level -->
      <regex>fea</regex>
      <regex>swpad</regex>      <!-- since 10/1018: introduced for updated tracing model-->
      <regex>swts</regex>

      <!-- bundle level -->
      <regex>swrs</regex>
      <regex>swad</regex>
      <regex>swintts</regex>

      <!-- module level -->
      <regex>swdd</regex>
      <regex>swurs</regex>      <!-- since 10/1018: introduced for updated tracing model-->
      <regex>swmts</regex>      <!-- since 01/1010: introduced for updated tracing model RMP4.0-->
      <regex>swuts</regex>
      <regex>impl</regex>

      <!-- legacy items -->
      <regex>dev</regex>
      <regex>man</regex>
      <regex>lim</regex>
    </regexs>
  </doctypes>
    <rules>
    <!-- The Ruleset for RMP4.0 is currently identical to the previous rule set. This rule is
        intoduce to show that the right file is uses. It will be removed when the RMP4.0 rule set is
    reworked -->
    <rule>
      <name>INFO.Rule set RMP4.0</name>
      <description>This rules indicates that RMP4.0 rule set is used.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status!='approved') and (./status!='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>WRN.general.doctypes</name>
      <description>The used doctype is not part of the tracing model</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobjects/@doctype</applyto>
          <condition>((. != 'creq') or (. != 'fea') or (. != 'swpad') or (. != 'swts') or (. != 'swrs') or (. !='swad') or (. != 'swintts') or (.!= 'swdd') or (. != 'swurs') or (. != 'swmts') or (. != 'swuts') or (. != 'impl') or (. != 'dev') or (. != 'man') or (. != 'lim'))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.status</name>
      <description>All specification objects must be either in status=approved or in status=rejected. Other
        statuses are not allowed. How to fix: Set status to rejected or approved.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status!='approved') and (./status!='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.rejected</name>
      <description>Status status=rejected is only allowed for requirements. How to fix: set to approved for specification object that are not requirements.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype!='swrs')  and (../@doctype!='swmrs') and (../@doctype!='swurs') and (./status='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.comment</name>
      <description>Specification objects with status=rejected shall have a comment or rationale that
        starts with on of the following texts: "This requirement is informational only", "This requirement is not applicable".
        How to fix: Add some text starting with "This requirement is informational only"
        or "This requirement is not applicable" to either the comment or to the rationale.
        Comment: Implementation of check checks for contains instead of starts-with since there is
        no trim function in the used XPATH engine.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>contains(./comment,"This requirement is informational only") or contains(./rationale,"This requirement is informational only") or contains(./comment,"This requirement is not applicable") or contains(./rationale,"This requirement is not applicable")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.rejected.coverage</name>
      <description>Specification objects with status=rejected shall not need coverage. How to fix: remove need for coverage.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>count(./needscoverage)=0</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swurs.needscoverage.count</name>
      <description>Unit requirements with status=approved need to be covered, exceptions from
      this rule: configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") and requirements with
      a comment starting with "The adherence to this requirement is ensured by the following
      release check (URL to the checklist template plus ID of the check):".
      How to fix: Provide a needsobj element for those specobjects or comment according to the rule.
      </description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swurs') and (./status='approved') and count(./needscoverage/needsobj)=0 and count(./fulfilledby/ffbObj)=0]</applyto>
          <!--This condition is false if the id of a specification object does not end with '_Conf' or '_CONF' or does not start with ECUC_ -->
          <condition>substring-after(./id,"ECUC_")!="" or substring-before(./id,"_Conf")!="" or substring-before(./id,"_CONF")!="" or contains(./comment,"The adherence to this requirement is ensured by the following release check (URL to the checklist template plus ID of the check):")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swurs.needscoverage.rationale</name>
      <description>Requirements with status=approved and without coverage needs that are
        configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") shall have a comment or rationale
        with the following text: "This is a configuration parameter requirement without functional
        specification.". How to fix: Add some text starting with "This is a configuration parameter
        requirements without functional specification" to either the comment or to the rationale.</description>
      <regexchecks>
        <regexcheck>
          <applyto>//specobject[(../@doctype='swurs') and (./status='approved') and count(./needscoverage/needsobj)=0 and (substring-after(./id,"ECUC_")!="" or substring-before(./id,"_CONF")!="" or substring-before(./id,"_Conf")!="")]</applyto>
          <regex>This is a configuration parameter requirement without functional specification.</regex>
        </regexcheck>
      </regexchecks>
    </rule>

    <rule>
      <name>ERR.swrs.needscoverage.rationale</name>
      <description>Requirements with status=approved and without coverage needs that are
        configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") shall have a comment or rationale
        with the following text: "This is a configuration parameter requirement without functional
        specification.". How to fix: Add some text starting with "This is a configuration parameter
        requirements without functional specification" to either the comment or to the rationale.</description>
      <regexchecks>
        <regexcheck>
          <applyto>//specobject[(../@doctype='swrs') and (./status='approved') and count(./needscoverage/needsobj)=0 and (substring-after(./id,"ECUC_")!="" or substring-before(./id,"_CONF")!="" or substring-before(./id,"_Conf")!="")]</applyto>
          <regex>This is a configuration parameter requirement without functional specification.</regex>
        </regexcheck>
      </regexchecks>
    </rule>

    <rule>
      <name>ERR.swurs.releases</name>
      <description>Requirements which originates from AUTOSAR (source tag contains term 'AUTOSAR_SWS', 'AUTOSAR_TPS',
        'AUTOSAR_ASWS' or 'AUTOSAR_TR') shall have their release tag set to 'AUTOSAR {major}.{minor}.{patch}' (e.g. 'AUTOSAR 4.3.0').
        Other requirements (including refinements of AUTOSAR requirements) must not contain any of the listed prefixes as
        part of the source tag.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swurs') and (contains(./source,'AUTOSAR_SWS') or contains(./source,'AUTOSAR_TPS') or contains(./source,'AUTOSAR_ASWS') or contains(./source,'AUTOSAR_TR'))]</applyto>
          <condition>contains(./releases/release,'AUTOSAR')</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swrs.releases</name>
      <description>Requirements which originates from AUTOSAR (source tag contains term 'AUTOSAR_SWS', 'AUTOSAR_TPS',
        'AUTOSAR_ASWS' or 'AUTOSAR_TR') shall have their release tag set to 'AUTOSAR {major}.{minor}.{patch}' (e.g. 'AUTOSAR 4.3.0').
        Other requirements (including refinements of AUTOSAR requirements) must not contain any of the listed prefixes as
        part of the source tag.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swrs') and (contains(./source,'AUTOSAR_SWS') or contains(./source,'AUTOSAR_TPS') or contains(./source,'AUTOSAR_ASWS') or contains(./source,'AUTOSAR_TR'))]</applyto>
          <condition>contains(./releases/release,'AUTOSAR')</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swdd.needscoverage.count</name>
      <description>Design elements with status=approved need to be covered.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swdd') and (./status='approved') and count(./needscoverage/needsobj)=0]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swurs.needscoverage.doctypes</name>
      <description>Requirements can be covered only by swurs, swad, dev, lim, swdd, impl, swuts, swmts, or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swurs')]</applyto>
          <condition>(./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="swad" or ./needscoverage/needsobj="dev" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swmts" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swrs.needscoverage.doctypes</name>
      <description>Requirements of type swrs can be covered only by swrs, swurs, swad, swintts or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swrs')]</applyto>
          <condition>(./needscoverage/needsobj="swrs" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="swad" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swintts" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swdd.needscoverage.doctypes</name>
      <description>Design elements of type swdd can only be covered by swdd, swurs, impl, swuts, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swdd')]</applyto>
          <condition>(./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swmts" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dev.needscoverage.count</name>
      <description>Deviations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dev')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swuts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swuts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swmts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swmts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swintts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swintts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.needscoverage.count</name>
      <description>Manual test cases shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.impl.needscoverage.count</name>
      <description>Source code shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='impl')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.lim.needscoverage.count</name>
      <description>Limitations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='lim')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.fea.needscoverage.test</name>
      <description>Features shall be tested by software test ('swts') or manuel test ('man'). If no test is planned a justification shall be given.
                   A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>(
               ./needscoverage/needsobj="swts" or ./needscoverage/needsobj="man" or ./fulfilledby/ffbObj/ffbType="swts" or ./fulfilledby/ffbObj/ffbType="man" or contains(./furtherinfo,"fea.needscoverage.test") or contains(./furtherinfo,"fea.needscoverage.doctypes"))</condition>
        </conditioncheck>
      </conditionchecks>
          </rule>

    <rule>
      <name>WRN.fea.needscoverage.impl</name>
      <description>Features shall be covered by implementation fea, swrs, swad, swpad, swurs, man and swts. For lagacy features a justification is acceppted. A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>( ./needscoverage/needsobj="swrs" or ./fulfilledby/ffbObj/ffbType="swrs" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swpad" or ./fulfilledby/ffbObj/ffbType="swpad" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="fea" or ./fulfilledby/ffbObj/ffbType="fea" or contains(./furtherinfo,"fea.needscoverage.impl"))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>


    <rule>
      <name>ERR.swad.fulfilledby.doctypes</name>
      <description>Architectural design objects of type swad can only be covered by swurs, swad, swdd, swintts, man, otherwise they should be refined with swrs</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swad')]</applyto>
          <condition>(./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="req" or ./needscoverage/needsobj="req" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swad" or ./fulfilledby/ffbObj/ffbType="swdd" or ./fulfilledby/ffbObj/ffbType="swintts" or ./needscoverage/needsobj="swintts" or ./fulfilledby/ffbObj/ffbType="man" or ./needscoverage/needsobj="man") </condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swmts.providescoverage.doctypes</name>
      <description>Test case specifications (tcs) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='tcs')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.providescoverage.doctypes</name>
      <description>Manual test case specification (man) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swuts.providescoverage.doctypes</name>
      <description>Software unit test case specification (swuts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swuts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swintts.providescoverage.doctypes</name>
      <description>Software integration test case specification (swintts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swintts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swts.providescoverage.doctypes</name>
      <description>Software test case specification (swts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

  </rules>
    <oreqmRules>

        <rule>
            <name>WRN.swts.needscoverage.count</name>
            <description>Violated if there are more than 10 swts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
        <rule>
            <name>WRN.man.needscoverage.count</name>
            <description>Violated if there are more than 10 man specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='man']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='man']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>man.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
        <rule>
            <name>WRN.swintts.needscoverage.count</name>
            <description>Violated if there are more than 10 swintts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swintts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swintts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swintts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
        <rule>
            <name>WRN.swmts.needscoverage.count</name>
            <description>Violated if there are more than 10 swmts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swmts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swmts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swmts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swuts.needscoverage.count</name>
            <description>Violated if there are more than 10 swuts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swuts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swuts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swuts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swpad.needscoverage.count</name>
            <description>Violated if there are more than 10 swpad specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swpad']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swpad']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swpad.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swrs.needscoverage.count</name>
            <description>Violated if there are more than 10 swrs specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swrs']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swrs']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swrs.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swad.needscoverage.count</name>
            <description>Violated if there are more than 10 swad specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swad']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swad']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swad.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swurs.needscoverage.count</name>
            <description>Violated if there are more than 10 swurs specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swurs']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swurs']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swurs.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swdd.needscoverage.count</name>
            <description>Violated if there are more than 10 swdd specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swdd']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swdd']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swdd.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.impl.needscoverage.count</name>
            <description>Violated if there are more than 10 impl specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='impl']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='impl']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>impl.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swrs.fulfilledby.count</name>
            <description>Violated if there are more than 10 swrs specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swrs'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swrs'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swrs.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swad.fulfilledby.count</name>
            <description>Violated if there are more than 10 swad specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swad'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swad'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swad.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swurs.fulfilledby.count</name>
            <description>Violated if there are more than 10 swurs specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swurs'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swurs'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swurs.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swdd.fulfilledby.count</name>
            <description>Violated if there are more than 10 swdd specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swdd'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swdd'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swdd.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
  </oreqmRules>
  </configuration>
  <specdocument>
    <specobjects doctype="swurs">

    <specobject>
      <id>Base.ASR22-11.SWS_Xfrm_00032</id>
      <status>approved</status>
      <source>AUTOSAR_ASWS_TransformerGeneral.pdf, R22-11</source>
      <version>1</version>
      <description>
        A safety transformer shall return one of the errors shown in Table below
        -----------------------------------------------------------------------------
        Error Name                 | Error Code | Error Type | Description
        -----------------------------------------------------------------------------
        E_OK                       | 0x00       | -          | The communication is safe.
        -----------------------------------------------------------------------------
        E_SAFETY_VALID_REP         | 0x01       | Soft       | The data are valid according to
                                                               safety, although data with a re-
                                                               peated counter were received.
        -----------------------------------------------------------------------------
        E_SAFETY_VALID_SEQ         | 0x02       | Soft       | The data are valid according to
                                                               safety, although a counter jump
                                                               occurred.
        -----------------------------------------------------------------------------
        E_SAFETY_VALID_ERR         | 0x03       | Soft       | The data are valid according to
                                                               safety, although the check itself
                                                               failed.
        -----------------------------------------------------------------------------
        E_SAFETY_VALID_NND         | 0x05       | Soft       | Communication is valid according to
                                                               safety, but no new data received.
        -----------------------------------------------------------------------------
        E_SAFETY_NODATA_OK         | 0x20       | Soft       | No data are available since ini-
                                                               tialization of transformer.
        -----------------------------------------------------------------------------
        E_SAFETY_NODATA_REP        | 0x21       | Soft       | No data are available since
                                                               initialization of transformer be-
                                                               cause a repeated counter was
                                                               received.
        -----------------------------------------------------------------------------
        E_SAFETY_NODATA_SEQ        | 0x22       | Soft       | No data are available since ini-
                                                               tialization of transformer and a
                                                               counter jump occurred.
        -----------------------------------------------------------------------------
        E_SAFETY_NODATA_ERR        | 0x23       | Soft       | No data are available since ini-
                                                               tialization of transformer. There-
                                                               fore the check failed.
        -----------------------------------------------------------------------------
        E_SAFETY_NODATA_NND        | 0x25       | Soft       | No data are available since
                                                               initialization of transformer.
        -----------------------------------------------------------------------------
        E_SAFETY_INIT_OK           | 0x30       | Soft       | Not enough data were received
                                                               to use them.
        -----------------------------------------------------------------------------
        E_SAFETY_INIT_REP          | 0x31       | Soft       | Not enough data were received
                                                               to use them but some with a re-
                                                               peated counter were received.
        -----------------------------------------------------------------------------
        E_SAFETY_INIT_SEQ          | 0x32       | Soft       | Not enough data were received
                                                               to use them, additionally a
                                                               counter jump occurred.
        -----------------------------------------------------------------------------
        E_SAFETY_INIT_ERR          | 0x33       | Soft       | Not enough data were received
                                                               to use them, additionally a check
                                                               failed.
        -----------------------------------------------------------------------------
        E_SAFETY_INIT_NND          | 0x35       | Soft       | Not enough data were received to use
                                                               them, additionally no new data
                                                               received.
        -----------------------------------------------------------------------------
        E_SAFETY_INVALID_OK        | 0x40       | Soft       | The data are invalid and cannot
                                                               be used.
        -----------------------------------------------------------------------------
        E_SAFETY_INVALID_REP       | 0x41       | Soft       | The data are invalid and can-
                                                               not be used because a repeated
                                                               counter was received.
        -----------------------------------------------------------------------------
        E_SAFETY_INVALID_SEQ       | 0x42       | Soft       | The data are invalid and cannot
                                                               be used due to a counter jump.
        -----------------------------------------------------------------------------
        E_SAFETY_INVALID_ERR       | 0x43       | Soft       | The data are invalid and cannot
                                                               be used because a check failed.
        -----------------------------------------------------------------------------
        E_SAFETY_INVALID_NND       | 0x45       | Soft       | Communication is invalid according to
                                                               safety and no new data received
        -----------------------------------------------------------------------------
        E_SAFETY_NOSM_OK           | 0x60       | Soft       | Communication is safe, Statemachine
                                                               is not active.
        -----------------------------------------------------------------------------
        E_SAFETY_NOSM_REP          | 0x61       | Soft       | Data with a repeated counter were
                                                               received. E2EStateMachine disabled.
        -----------------------------------------------------------------------------
        E_SAFETY_NOSM_SEQ          | 0x62       | Soft       | A counter jump occurred.
                                                               E2EStateMachine disabled.
        -----------------------------------------------------------------------------
        E_SAFETY_NOSM_ERR          | 0x63       | Soft       | The data are invalid and cannot
                                                               be used because a check failed.
                                                               E2EStateMachine disabled.
        -----------------------------------------------------------------------------
        E_SAFETY_NOSM_NND          | 0x65       | Soft       | No new data available.
                                                               E2EStateMachine disabled.
        -----------------------------------------------------------------------------
        E_SAFETY_NOSM_DEC          | 0x66       | Soft       | Disabled E2E State machine and
                                                               disabled E2E check.
        -----------------------------------------------------------------------------
        E_SAFETY_SOFT_RUNTIMEERROR | 0x77       | Soft       | A runtime error occurred, safety
                                                               properties could not be checked
                                                               (state or status cannot be deter-
                                                               mined) but non-protected output
                                                               data could be produced nonethe-
                                                               less.
        -----------------------------------------------------------------------------
        E_E2E_HARD_SAFETY_ERR      | 0x8d       | Hard       | Not further specified E2E error
        -----------------------------------------------------------------------------
        E_SAFETY_HARD_RUNTIMEERROR | 0xFF       | Hard       | A runtime error occurred, safety
                                                               properties could not be checked
                                                               and NO output data could be pro-
                                                               duced.
        -----------------------------------------------------------------------------
      </description>
      <releases>
        <release>AUTOSAR R22-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/TransformerTypes.h_54</srcid><srcstatus/><internalId>554</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>0</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>Base.SWS_Can_00436</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Can_GeneralTypes.h shall contain all types and constants that
        are shared among the AUTOSAR CAN modules Can, CanIf and CanTrcv.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Can_GeneralTypes.h_18</srcid><srcstatus/><internalId>461</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1</internalId></specobject>

    <specobject>
      <id>Base.SWS_Can_00415</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Can_PduType
        Kind          | Structure
        Elements      | swPduHandle
                      | Type    | PduIdType
                      | Comment | --
                      | length
                      | Type    | uint8
                      | Comment | --
                      | id
                      | Type    | Can_IdType
                      | Comment | --
                      | sdu
                      | Type    | uint8*
                      | Comment | --
        Description   | This type unites PduId (swPduHandle), SduLength (length), SduData (sdu), and Can Id (id) for any CAN L-SDU.
        Available via | Can_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Can_GeneralTypes.h_23</srcid><srcstatus/><internalId>462</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>2</internalId></specobject>

    <specobject>
      <id>Base.SWS_Can_00416</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Can_IdType
        Kind          | Type
        Derived from  | uint32
        Range         | Standard32Bit | 0..0x400007FF | 0..0x400007FF
                      | Extended32Bit | 0..0xDFFFFFFF | 0..0xDFFFFFFF
        Description   | Represents the Identifier of an L-PDU. The two most significant bits specify the frame
                      | type: 00 CAN message with Standard CAN ID 01 CAN FD frame with Standard CAN
                      | ID 10 CAN message with Extended CAN ID 11 CAN FD frame with Extended CAN ID
        Variation     | --
        Available via | Can_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Can_GeneralTypes_Cfg.h_54</srcid><srcstatus/><internalId>307</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>3</internalId></specobject>

    <specobject>
      <id>Base.SWS_Can_00429</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Can_HwHandleType
        Kind          | Type
        Derived from  | Basetype | Variation
                      | uint16   | --
                      | uint8    | --
        Range         | Standard | 0..0x0FF  | 0..0x0FF
                      | Extended | 0..0xFFFF | 0..0xFFFF
        Description   | Represents the hardware object handles of a CAN hardware unit. For CAN hardware
                      | units with more than 255 HW objects use extended range.
        Available via | Can_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Can_GeneralTypes_Cfg.h_34</srcid><srcstatus/><internalId>305</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>4</internalId></specobject>

    <specobject>
      <id>Base.SWS_Can_00039</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Range         | CAN_BUSY | 0x02 | transmit request could not be processed because no transmit object was available
        Description   | Overlayed return value of Std_ReturnType for CAN driver API Can_Write()
        Available via | Can_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_147</srcid><srcstatus/><internalId>289</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>5</internalId></specobject>

    <specobject>
      <id>Base.SWS_Can_00496</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Can_HwType
        Kind          | Structure
        Elements      | CanId
                      | Type         | Can_IdType
                      | Comment      | Standard/Extended CAN ID of CAN L-PDU
                      | Hoh
                      | Type         | Can_HwHandleType
                      | Comment      | ID of the corresponding Hardware Object Range
                      | ControllerId
                      | Type         | uint8
                      | Comment      | ControllerId provided by CanIf clearly identify the corresponding controller
        Description   | This type defines a data structure which clearly provides an Hardware Object Handle
                      | including its corresponding CAN Controller and therefore CanDrv as well as the specific CanId.
        Available via | Can_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Can_GeneralTypes.h_44</srcid><srcstatus/><internalId>464</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>6</internalId></specobject>

    <specobject>
      <id>Base.SWS_Can_91013</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Can_ControllerStateType
        Kind          | Enumeration
        Range         | CAN_CS_UNINIT  | 0x00 | CAN controller state UNINIT.
                      | CAN_CS_STARTED | 0x01 | CAN controller state STARTED.
                      | CAN_CS_STOPPED | 0x02 | CAN controller state STOPPED.
                      | CAN_CS_SLEEP   | 0x03 | CAN controller state SLEEP.
        Description   | States that are used by the several ControllerMode functions.
        Available via | Can_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Can_GeneralTypes.h_105</srcid><srcstatus/><internalId>470</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_Can_GeneralTypesEnums</srcid><srcstatus/><internalId>605</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>7</internalId></specobject>

    <specobject>
      <id>Base.SWS_Can_91003</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Can_ErrorStateType
        Kind          | Enumeration
        Range         | CAN_ERRORSTATE_ACTIVE  | -- | The CAN controller takes fully part in communication.
                      | CAN_ERRORSTATE_PASSIVE | -- | The CAN controller takes part in communication, but does not send active error frames.
                      | CAN_ERRORSTATE_BUSOFF  | -- | The CAN controller does not take part in communication.
        Description   | Error states of a CAN controller.
        Available via | Can_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Can_GeneralTypes.h_76</srcid><srcstatus/><internalId>467</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_Can_GeneralTypesEnums</srcid><srcstatus/><internalId>605</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>8</internalId></specobject>

    <specobject>
      <id>Base.SWS_Can_91021</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Can_ErrorType
        Kind          | Enumeration
        Range         | CAN_ERROR_BIT_MONITORING1       | 0x01 | A 0 was transmitted and a 1 was read back
                      | CAN_ERROR_BIT_MONITORING0       | 0x02 | A 1 was transmitted and a 0 was read back
                      | CAN_ERROR_BIT                   | 0x03 | The HW reports a CAN bit error but cannot report distinguish between CAN_ERROR_BIT_MONITORING1 and CAN_ERROR_BIT_MONITORING0
                      | CAN_ERROR_CHECK_ACK_FAILED      | 0x04 | Acknowledgement check failed
                      | CAN_ERROR_ACK_DELIMITER         | 0x05 | Acknowledgement delimiter check failed
                      | CAN_ERROR_ARBITRATION_LOST      | 0x06 | The sender lost in arbitration.
                      | CAN_ERROR_OVERLOAD              | 0x07 | CAN overload detected via an overload frame. Indicates that the receive buffers of a receiver are full.
                      | CAN_ERROR_CHECK_FORM_FAILED     | 0x08 | Violations of the fixed frame format
                      | CAN_ERROR_CHECK_STUFFING_FAILED | 0x09 | Stuffing bits not as expected
                      | CAN_ERROR_CHECK_CRC_FAILED      | 0xA  | CRC failed
                      | CAN_ERROR_BUS_LOCK              | 0xB  | Bus lock (Bus is stuck to dominant level)
        Description   | The enumeration represents a superset of CAN Error Types which typical CAN HW is
                      | able to report. That means not all CAN HW will be able to support the complete set.
        Available via | Can_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Can_GeneralTypes.h_85</srcid><srcstatus/><internalId>468</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_Can_GeneralTypesEnums</srcid><srcstatus/><internalId>605</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>9</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>Base.ASR22-11.SWS_CAN_91029</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver.pdf, R22-11</source>
      <version>1</version>
      <description>
        Name          | Can_TimeStampType (draft)
        Kind          | Structure
        Elements      | nanoseconds
                      | type    | uint32
                      | Comment | Nanoseconds part of the time
                      | seconds 
                      | Type    | unit32
                      | Comment | Seconds part of time
        Description   | Variables of this type are used to express time stamps based on relative time.
                      | Value range: * Seconds: 0 .. 4.294.967.295 s (circa 136 years) * Nanoseconds: 0 ..
                      | 999.999.999 ns
                      | Tags: atp.Status=draft
        Available via | Can_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R22-11</release>
        <release>AUTOSAR R21-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Can_GeneralTypes.h_33</srcid><srcstatus/><internalId>463</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>10</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>Base.ASR403.CAN437</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        The integrator of the Can modules shall provide the file Can_GeneralTypes.h.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Can_GeneralTypes.h_7</srcid><srcstatus/><internalId>460</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>11</internalId></specobject>

    <specobject>
      <id>Base.ASR403.CAN438</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        The content of Can_GeneralTypes.h consists of types specified within [5] and
        the following type specifications within this document except Can_ConfigType.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Can_GeneralTypes.h_18</srcid><srcstatus/><internalId>461</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>12</internalId></specobject>

    <specobject>
      <id>Base.ASR403.CAN439</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        The content of Can_GeneralTypes.h shall be protected by a CAN_GENERAL_TYPES define.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Can_GeneralTypes.h_2</srcid><srcstatus/><internalId>459</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>13</internalId></specobject>

    <specobject>
      <id>Base.ASR403.CAN417</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        Name:        | Can_StateTransitionType
        Type:        | Enumeration
        Range:       | CAN_T_START  | CAN controller transition value to request state STARTED.
                     | CAN_T_STOP   | CAN controller transition value to request state STOPPED.
                     | CAN_T_SLEEP  | CAN controller transition value to request state SLEEP.
                     | CAN_T_WAKEUP | CAN controller transition value to request state STOPPED from state SLEEP.
        Description: | State transitions that are used by the function CAN_SetControllerMode
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Can_GeneralTypes.h_55</srcid><srcstatus/><internalId>465</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_Can_GeneralTypesEnums</srcid><srcstatus/><internalId>605</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>14</internalId></specobject>

    <specobject>
      <id>Base.ASR403.CAN039</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        Name:        | Can_ReturnType
        Type:        | Enumeration
        Range:       | CAN_OK     | success
                     | CAN_NOT_OK | error occurred or wakeup event occurred during sleep transition
                     | CAN_BUSY   | transmit request could not be processed because no transmit object was available
        Description: | Return values of CAN driver API.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Can_GeneralTypes.h_66</srcid><srcstatus/><internalId>466</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_Can_GeneralTypesEnums</srcid><srcstatus/><internalId>605</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>15</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>Base.ASR413.SWS_Can_00416</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver.pdf, R4.1.3</source>
      <version>1</version>
      <description>
        Name:        | Can_IdType
        Type:        | uint16, uint32
        Range:       | Standard16Bit | -- | 0..0x47FF
                     | Standard32Bit | -- | 0..0x400007FF
                     | Extended32Bit | -- | 0..0xDFFFFFFF
        Description: | Represents the Identifier of an L-PDU. The two most significant bits specify the frame type:
                     | 00 CAN message with Standard CAN ID
                     | 01 CAN FD frame with Standard CAN ID
                     | 10 CAN message with Extended CAN ID
                     | 11 CAN FD frame with Extended CAN ID
      </description>
      <releases>
        <release>AUTOSAR 4.1.3</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Can_GeneralTypes_Cfg.h_49</srcid><srcstatus/><internalId>306</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>16</internalId></specobject>

    <specobject>
      <id>Base.ASR413.SWS_Can_00487</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANDriver.pdf, R4.1.3</source>
      <version>1</version>
      <description>
        The types specified in Can_GeneralTypes shall be declared in Can_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Can_GeneralTypes.h_7</srcid><srcstatus/><internalId>460</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>17</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>Base.SWS_CanTrcv_00163</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANTranceiverDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | CanTrcv_TrcvModeType
        Kind          | Enumeration
        Range         | CANTRCV_TRCVMODE_SLEEP   | --   | Transceiver mode SLEEP
                      | CANTRCV_TRCVMODE_STANDBY | --   | Transceiver mode STANDBY
                      | CANTRCV_TRCVMODE_NORMAL  | 0x00 | Transceiver mode NORMAL
        Description   | Operating modes of the CAN Transceiver Driver.
        Available via | Can_GeneralTypes.h
      </description>
      <releases>
         <release>AUTOSAR R20-11</release>
         <release>AUTOSAR R4.3.0</release>
      </releases>
      <needscoverage>
         <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Can_GeneralTypes.h_118</srcid><srcstatus/><internalId>471</internalId></linkedfrom></coveredby></needscov>
         <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_Can_GeneralTypesEnums</srcid><srcstatus/><internalId>605</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>18</internalId></specobject>

    <specobject>
      <id>Base.SWS_CanTrcv_00164</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANTranceiverDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | CanTrcv_TrcvWakeupModeType
        Kind          | Enumeration
        Range         | CANTRCV_WUMODE_ENABLE  | 0x00 | The notification for wakeup events is enabled on the addressed transceiver.
                      | CANTRCV_WUMODE_DISABLE | 0x01 | The notification for wakeup events is disabled on the addressed transceiver.
                      | CANTRCV_WUMODE_CLEAR   | 0x02 | A stored wakeup event is cleared on the addressed transceiver.
        Description   | This type shall be used to control the CAN transceiver concerning wake up events and wake up notifications.
        Available via | Can_GeneralTypes.h
      </description>
      <releases>
         <release>AUTOSAR R20-11</release>
         <release>AUTOSAR R4.3.0</release>
      </releases>
      <needscoverage>
         <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Can_GeneralTypes.h_128</srcid><srcstatus/><internalId>472</internalId></linkedfrom></coveredby></needscov>
         <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_Can_GeneralTypesEnums</srcid><srcstatus/><internalId>605</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>19</internalId></specobject>

    <specobject>
      <id>Base.SWS_CanTrcv_00165</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANTranceiverDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name        | CanTrcv_TrcvWakeupReasonType
        Kind        | Enumeration
        Range       | CANTRCV_WU_ERROR         | 0x00  | Due to an error wake up reason was not detected.
                    |                          |       | This value may only be reported when error was reported to DEM before.
                    | CANTRCV_WU_NOT_SUPPORTED | 0x01  | The transceiver does not support any information for the wake up reason.
                    | CANTRCV_WU_BY_BUS        | 0x02  | The transceiver has detected, that the network has caused the wake up of the ECU.
                    | CANTRCV_WU_INTERNALLY    | 0x03  | The transceiver has detected, that the network has woken up by the ECU via a request to NORMAL mode.
                    | CANTRCV_WU_RESET         | 0x04  | The transceiver has detected, that the "wake up" is due to an ECU reset.
                    | CANTRCV_WU_POWER_ON      | 0x05  | The transceiver has detected, that the "wake up" is due to an ECU reset after power on.
                    | CANTRCV_WU_BY_PIN        | 0x06  | The transceiver has detected a wake-up event at one of the transceiver's pins (not at the CAN bus).
                    | CANTRCV_WU_BY_SYSERR     | 0x07  | The transceiver has detected, that the wake up of the ECU was caused by a HW related device failure.
        Description | This type denotes the wake up reason detected by the CAN transceiver in detail.
      </description>
      <releases>
         <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
         <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_136</srcid><srcstatus/><internalId>288</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>20</internalId></specobject>

    <specobject>
      <id>Base.SWS_CanTrcv_00210</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANTranceiverDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | CanTrcv_PNActivationType
        Kind          | Enumeration
        Range         | PN_ENABLED  | -- | PN wakeup functionality in CanTrcv is enabled.
                      | PN_DISABLED | -- | PN wakeup functionality in CanTrcv is disabled.
        Description   | Datatype used for describing whether PN wakeup functionality in CanTrcv is enabled or disabled.
        Available via | CanTrcv.h
      </description>
      <releases>
         <release>AUTOSAR R20-11</release>
         <release>AUTOSAR R4.3.0</release>
      </releases>
      <needscoverage>
         <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Base.EB_Ref.SWS_CanTrcv_00210.AvailableVia</srcid><srcstatus/><internalId>183</internalId></linkedfrom></coveredby></needscov>
         <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_Can_GeneralTypesEnums</srcid><srcstatus/><internalId>605</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>21</internalId></specobject>

    <specobject>
      <id>Base.SWS_CanTrcv_00211</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANTranceiverDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | CanTrcv_TrcvFlagStateType
        Kind          | Enumeration
        Range         | CANTRCV_FLAG_SET     | -- | The flag is set in the transceiver hardware.
                      | CANTRCV_FLAG_CLEARED | -- | The flag is cleared in the transceiver hardware.
        Description   | Provides the state of a flag in the transceiver hardware.
        Available via | CanTrcv.h
      </description>
      <releases>
         <release>AUTOSAR R20-11</release>
         <release>AUTOSAR R4.3.0</release>
      </releases>
      <needscoverage>
         <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Base.EB_Ref.SWS_CanTrcv_00211.AvailableVia</srcid><srcstatus/><internalId>184</internalId></linkedfrom></coveredby></needscov>
         <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_Can_GeneralTypesEnums</srcid><srcstatus/><internalId>605</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>22</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>Base.ASR403.CanTrcv165</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CANTranceiverDriver.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        Name:        | CanTrcv_TrcvWakeupReasonType
        Type:        | Enumeration
        Range:       | CANTRCV_WU_BY_BUS        | The transceiver has detected, that the network has caused the wake up of the ECU.
                     | CANTRCV_WU_BY_PIN        | The transceiver has detected a wake-up event at one of the transceiver's pins (not at the CAN bus).
                     | CANTRCV_WU_ERROR         | = 0
                     |                          | Due to an error wake up reason was not detected.
                     |                          | This value may only be reported when error was
                     |                          | reported to DEM before.
                     | CANTRCV_WU_INTERNALLY    | The transceiver has detected, that the network has woken up by the ECU via a request to NORMAL mode.
                     | CANTRCV_WU_NOT_SUPPORTED | The transceiver does not support any information for the wake up reason.
                     | CANTRCV_WU_POWER_ON      | The transceiver has detected, that the "wake up" is due to an ECU reset after power on.
                     | CANTRCV_WU_RESET         | The transceiver has detected, that the "wake up" is due to an ECU reset.
                     | CANTRCV_WU_BY_SYSERR     | The transceiver has detected, that the wake up of the ECU was caused by a HW related device failure.
        Description: | This type denotes the wake up reason detected by the CAN transceiver in detail.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Can_GeneralTypes.h_140</srcid><srcstatus/><internalId>473</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_Can_GeneralTypesEnums</srcid><srcstatus/><internalId>605</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>23</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>Base.SWS_Comtype_00004</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CommunicationStackTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        It is not allowed to add any project or supplier specific extension to this file.
        Any extension invalidates the AUTOSAR conformity.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/ComStack_Types.h.m4_4</srcid><srcstatus/><internalId>477</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>24</internalId></specobject>

    <specobject>
      <id>Base.SWS_Comtype_00015</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CommunicationStackTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Because many of the communication stack type are depending on the appropriate ECU,
        this file shall be generated dependent on the specific ECU configuration for each ECU
        independently.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/ComStack_Cfg.h_7</srcid><srcstatus/><internalId>309</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>25</internalId></specobject>

    <specobject>
      <id>Base.SWS_COMTYPE_00005</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CommunicationStackTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | PduIdType
        Kind          | Type
        Derived from  | Basetype     | Variation
                      | uint16       | The size of this global type depends on the maximum number of PDUs
                      |              | used within one software module.
                      | uint8        | The size of this global type depends on the maximum number of PDUs
                      |              | used within one software module.
        Range         | 0...PduIdmax | number of PDUs used within one software module. This 
                      |              |   | Zero-based integer number The size of this global type depends on
                      |              |   | the maximum number of PDUs used within one software module.
                      |              |   | This parameter shall be generated by the generator tool depending
                      |              |   | on the value configured in EcuC virtual layer. This parameter shall be
                      |              | - | generated in ComStack_Cfg.h file Example : If no software module
                      |              |   | deals with more PDUs that 256, this type can be set to uint8. If at
                      |              |   | least one software module handles more than 256 PDUs, this type
                      |              |   | must globally be set to uint16.
        Description   | This type is used within the entire AUTOSAR Com Stack except for bus drivers.
        Available via | ComStack_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/ComStack_Cfg.h_33</srcid><srcstatus/><internalId>310</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>26</internalId></specobject>

    <specobject>
      <id>Base.SWS_Comtype_00006</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CommunicationStackTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Variables of this type serve as a unique identifier of a PDU within a software module or a set thereof, and also for interaction of two software modules where the PduId of the corresponding target module is being used for referencing
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/ComStack_Cfg.h_33</srcid><srcstatus/><internalId>310</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>27</internalId></specobject>

    <specobject>
      <id>Base.SWS_Comtype_00007</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CommunicationStackTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        In order to be able to perform table-indexing within a software module, variables of this type shall be zero-based and consecutive.There might be several ranges of PduIds in a module, one for each type of operation performed within that module (e.g. sending and receiving).
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/ComStack_Cfg.h_33</srcid><srcstatus/><internalId>310</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>28</internalId></specobject>

    <specobject>
      <id>Base.SWS_Comtype_00014</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CommunicationStackTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        PduIdmax, the maximum number of a PduId range, is the number-1 of PDUs dealt with in the corresponding type of operation within that module.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/ComStack_Cfg.h_33</srcid><srcstatus/><internalId>310</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>29</internalId></specobject>

    <specobject>
      <id>Base.SWS_COMTYPE_00008</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CommunicationStackTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | PduLengthType
        Kind          | Type
        Derived from  | Basetype     | Variation
                      | uint16       | The size of this global type depends on the maximum length of PDUs
                      |              | to be sent by an ECU.
                      | uint32       | The size of this global type depends on the maximum length of PDUs
                      |              | to be sent by an ECU.
                      | uint8        | The size of this global type depends on the maximum length of PDUs
                      |              | to be sent by an ECU.
        Range         | 0...PduIdmax |   | Zero-based integer number The size of this global type depends
                      |              |   | on the maximum length of PDUs to be sent by an ECU. This
                      |              |   | parameter shall be generated by the generator tool depending on
                      |              |   | the value configured in EcuC virtual layer. This parameter shall be
                      |              |   | generated in ComStack_Cfg.h file Example : If no segmentation is
                      |              | - | used the length depends on the maximum payload size of a frame
                      |              |   | of the underlying communication system (for FlexRay maximum
                      |              |   | size is 255, therefore uint8). If segmentation is used it depends on
                      |              |   | the maximum length of a segmented N-PDU (in general uint16 is
                      |              |   | used)
        Description   | This type shall be used within the entire AUTOSAR Com Stack of an ECU except for
                      | bus drivers.
        Available via | ComStack_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/ComStack_Cfg.h_41</srcid><srcstatus/><internalId>311</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>30</internalId></specobject>

    <specobject>
      <id>Base.SWS_Comtype_00010</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CommunicationStackTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Variables of this type serve as length information of a PDU. The length information is provided in number of bytes.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/ComStack_Cfg.h_41</srcid><srcstatus/><internalId>311</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>31</internalId></specobject>

    <specobject>
      <id>Base.SWS_Comtype_00017</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CommunicationStackTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        PduLengthmax, the maximum length of a Pdu, is the length of the largest (possibly segmented) PDU to be sent by the ECU.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/ComStack_Cfg.h_33</srcid><srcstatus/><internalId>310</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>32</internalId></specobject>

    <specobject>
      <id>Base.SWS_COMTYPE_00011</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CommunicationStackTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | PduInfoType
        Kind          | Structure
        Elements      | SduDataPtr
                      | Type    | uint8
                      | Comment | Pointer to the SDU (i.e. payload data) of the PDU. The type of this pointer
                      |         | depends on the memory model being used at compile time.
                      | MetaDataPtr 
                      | Comment | Pointer to the meta data (e.g. CAN ID, socket ID, diagnostic addresses)
                      |         | of the PDU, consisting of a sequence of meta data items. The length and
                      |         | type of the meta data items is statically configured for each PDU. Meta
                      |         | data items with more than 8 bits use platform byte order.
                      | SduLength
                      | Type    | PduLengthType
                      | Comment | Length of the SDU in bytes.
        Description   | Variables of this type shall be used to store the basic information about a PDU of any
                      | type, namely a pointer variable pointing to its SDU (payload), a pointer to Meta Data of
                      | the PDU, and the corresponding length of the SDU in bytes.
        Available via | ComStack_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/ComStack_Types.h.m4_117</srcid><srcstatus/><internalId>482</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>33</internalId></specobject>

    <specobject>
      <id>Base.SWS_COMTYPE_00031</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CommunicationStackTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | TPParameterType
        Kind          | Enumeration
        Range         | TP_STMIN | 0x00 | Separation Time
                      | TP_BS    | 0x01 | Block Size
                      | TP_BC    | 0x02 | The Band width control parameter used in FlexRay transport protocol module.
        Description   | Specify the parameter to which the value has to be changed (BS or STmin).
        Available via | ComStack_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/ComStack_Types.h.m4_144</srcid><srcstatus/><internalId>484</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_CommunicationStackTypesEnums</srcid><srcstatus/><internalId>606</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>34</internalId></specobject>

    <specobject>
      <id>Base.SWS_Comtype_00030</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CommunicationStackTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        The value of PduIdType and PduLengthType shall be derived from the 'PduIdTypeEnum'
        and 'PduLengthTypeEnum' of the EcuCPduCollection container respectively.
      </description>
      <rationale>PduIdType and PduLengthType are fixed to uint16</rationale>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/ComStack_Cfg.h_33</srcid><srcstatus/><internalId>310</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/ComStack_Cfg.h_41</srcid><srcstatus/><internalId>311</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Base.lim.PduLengthType.1</srcid><srcstatus/><internalId>282</internalId></linkedfrom><linkedfrom><srcid>Base.lim.PduIdType.1</srcid><srcstatus/><internalId>283</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>35</internalId></specobject>

    <specobject>
      <id>Base.SWS_COMTYPE_00027</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CommunicationStackTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        <pre>
          Name          | TpDataStateType
          Kind          | Enumeration
          Range         | TP_DATACONF    | 0x00 | TP_DATACONF indicates that all data, that have been
                        |                |      | copied so far, are confirmed and can be removed from the
                        |                |      | TP buffer. Data copied by this API call are excluded and
                        |                |      | will be confirmed later.
                        | TP_DATARETRY   | 0x01 | TP_DATARETRY indicates that this API call shall
                        |                |      | copyalready copied data in order to recover from an error.
                        |                |      | In this case TxTpDataCnt specifies the offset of the first
                        |                |      | byte to be copied by the API call.
                        | TP_CONFPENDING | 0x02 | TP_CONFPENDING indicates that the previously copied
                        |                |      | data must remain in the TP.
          Description   | Variables of this type shall be used to store the state of TP buffer.
          Available via | ComStack_Types.h
        </pre>
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/ComStack_Types.h.m4_191</srcid><srcstatus/><internalId>487</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/ComStack_Types.h.m4_192</srcid><srcstatus/><internalId>488</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_CommunicationStackTypesEnums</srcid><srcstatus/><internalId>606</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>36</internalId></specobject>

    <specobject>
      <id>Base.SWS_COMTYPE_00036</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CommunicationStackTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        <pre>
          Name          | PNCHandleType
          Kind          | Type
          Derived from  | uint8
          Description   | Used to store the identifier of a partial network cluster.
          Available via | ComStack_Types.h
        </pre>
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_73</srcid><srcstatus/><internalId>286</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>37</internalId></specobject>

    <specobject>
      <id>Base.SWS_COMTYPE_00037</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CommunicationStackTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | RetryInfoType
        Kind          | Structure
        Elements      | TpDataState
                      | Type    | TpDataStateType
                      | Comment | The enum type to be used to store the state of Tp buffer.
                      | TxTpDataCnt
                      | Type    | PduLengthType
                      | Comment | Offset from the current position which identifies the number of bytes to be retransmitted.
        Description   | Variables of this type shall be used to store the information about Tp buffer handling.
        Available via | ComStack_Types.h
      </description>
      <comment>
        The ID of this requirement has been changed from COMTYPE028.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/ComStack_Types.h.m4_227</srcid><srcstatus/><internalId>490</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>38</internalId></specobject>

    <specobject>
      <id>Base.SWS_COMTYPE_00038</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CommunicationStackTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | NetworkHandleType
        Kind          | Type
        Derived from  | uint8
        Range         | 0...255 | - | Zero-based integer number
        Description   | Variables of the type NetworkHandleType shall be used to store the identifier of a communication channel.
        Variation     | -
        Available via | ComStack_Types.h
      </description>
      <comment>
        The ID of this requirement has been changed from COMTYPE026.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/ComStack_Types.h.m4_239</srcid><srcstatus/><internalId>491</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>39</internalId></specobject>

    <specobject>
      <id>Base.SWS_COMTYPE_00012</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CommunicationStackTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | BufReq_ReturnType
        Kind          | Enumeration
        Range         | BUFREQ_OK       | 0x00 | Buffer request accomplished successful. This status shall have the value 0.
                      | BUFREQ_E_NOT_OK | 0x01 | Buffer request not successful. Buffer cannot be accessed. This status shall have the value 1.
                      | BUFREQ_E_BUSY   | 0x02 | Temporarily no buffer available. It's up the requester to retry request for a certain time. This status shall have the value 2.
                      | BUFREQ_E_OVFL   | 0x03 | No Buffer of the required length can be provided. This status shall have the value 3.
        Description   | Variables of this type shall be used to store the result of a buffer request.
        Available via | ComStack_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/ComStack_Types.h.m4_169</srcid><srcstatus/><internalId>485</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_CommunicationStackTypesEnums</srcid><srcstatus/><internalId>606</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>40</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>Base.ASR403.COMTYPE001</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CommunicationStackTypes.pdf, R4.0 Rev 3</source>
      <version>1</version>
      <description>
        <pre>
          The include file structure shall be as follows:
          ComStack_Types.h shall include Std_Types.h and ComStack_Cfg.h
          Std_Types.h shall include Platform_Types.h
          Std_Types.h shall include Compiler.h
          Communication related basic software modules shall include ComStack_Types.h
          Communication related basic software modules shall not include  Std_Types.h
          directly.(BSW00384)
        </pre>
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/ComStack_Types.h.m4_10</srcid><srcstatus/><internalId>478</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/ComStack_Types.h.m4_12</srcid><srcstatus/><internalId>479</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>41</internalId></specobject>

    <specobject>
      <id>Base.ASR403.COMTYPE003</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CommunicationStackTypes.pdf, R4.0 Rev 3</source>
      <version>1</version>
      <description>
        The file name of the communication stack type header file shall
        be 'ComStack_Types.h' and configuration header file shall be 'ComStack_Cfg.h'.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/ComStack_Types.h.m4_4</srcid><srcstatus/><internalId>477</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>42</internalId></specobject>

    <specobject>
      <id>Base.ASR403.COMTYPE016</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CommunicationStackTypes.pdf, R4.0 Rev 3</source>
      <version>1</version>
      <description>
        The communication stack type header files shall be protected against multiple inclusion:
        ComStack_Types.h
        <pre>
          #ifndef COMSTACK_TYPES_H
          #define COMSTACK_TYPES_H
          ..
          /*
          * Contents of file
          */
          ..
          #endif /* COMSTACK_TYPES_H */
        </pre>
      ComStack_Cfg.h
        <pre>
          #ifndef COMSTACK_CFG_H
          #define COMSTACK_CFG_H
          ..
          /*
          * Contents of file
          */
          ..
          #endif /* COMSTACK_CFG_H */
        </pre>
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/ComStack_Cfg.h_2</srcid><srcstatus/><internalId>308</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/ComStack_Types.h.m4_2</srcid><srcstatus/><internalId>476</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>43</internalId></specobject>

    <specobject>
      <id>Base.ASR403.COMTYPE029</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CommunicationStackTypes.pdf, R4.0 Rev 3</source>
      <version>1</version>
      <description>
        ComStack_Cfg.h shall be generated by the generator to generate the type definition
        of the PduIdType and PduLengthType from the EcuC Virtual Layer based on the configuration
        e.g. typedef uint8 PduIdType if number of PDUs are less than 256.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/ComStack_Cfg.h_7</srcid><srcstatus/><internalId>309</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/ComStack_Cfg.h_33</srcid><srcstatus/><internalId>310</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/ComStack_Cfg.h_41</srcid><srcstatus/><internalId>311</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>44</internalId></specobject>

    <specobject>
      <id>Base.ASR403.COMTYPE020</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CommunicationStackTypes.pdf, R4.0 Rev 3</source>
      <version>1</version>
      <description>
        Variables of this type shall be used to return the bus status evaluated by a transceiver.
      </description>
      <comment>
        <pre>
          Name  | BusTrcvErrorType
          Type  | uint8
          Range | 0x00 – 0x1E | - | General return codes 
                |             | - |A detailed specification is listed below.
                | 0x1F - 0x3C | - | Error notification:
                |             | - | Error notification codes specific for the communication system CAN.
                |             |   | For a detailed definition please refer to the AUTOSAR specification of CAN Transceiver Driver [CANTRCV].
                | 0x3D – 0x5A | - | Error notification:
                |             | - | Error notification codes specific for the communication
                |             |   | system LIN.
                |             |   | A detailed definition is still open, because currently there is 
                |             |   | not AUTOSAR specification of Lin Interface.
                | 0x5B – 0x78 | - | Error notification:
                |             | - | Error notification codes specific for the communication
                |             |   | system FlexRay.
                |             |   | For a detailed definition please refer to the AUTOSAR specification of FlexRay Transceiver Driver [FRTRCV].
                | &gt; 0x78   | - | Currently values in this range are invalid. In future it might 
                |             |   | be possible that further return codes are specified for other 
                |             |   | communication systems.
        </pre>
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/ComStack_Types.h.m4_187</srcid><srcstatus/><internalId>486</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>45</internalId></specobject>

    <specobject>
      <id>Base.ASR403.COMTYPE021</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CommunicationStackTypes.pdf, R4.0 Rev 3</source>
      <version>1</version>
      <description>
        General Codes
        <pre>
          Return code        Value    Description
          BUSTRCV_OK         0x00     There is no bus transceiver error seen by the driver or transceiver
          does not support the detection of bus errors.
          BUSTRCV_E_ERROR    0x01     Bus transceiver detected an unclassified error.
          0x02-0x1E  Reserved values for future usage.
        </pre>
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/ComStack_Types.h.m4_98</srcid><srcstatus/><internalId>480</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/ComStack_Types.h.m4_106</srcid><srcstatus/><internalId>481</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>46</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>Base.ASR413.SWS_COMTYPE_00039</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CommunicationStackTypes.pdf, R4.1 Rev 3</source>
      <version>1</version>
      <description>
        Name:  IcomConfigIdType
        Type:  uint8
        Description:  IcomConfigIdType defines the configuration ID. An ID of 0 is the default
        configuration. An ID greater than 0 shall identify a configuration for Pretended
        Networking. There is more than 1 configuration possible.
      </description>
      <releases>
      <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
      <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/ComStack_Types.h.m4_248</srcid><srcstatus/><internalId>492</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>47</internalId></specobject>

    <specobject>
      <id>Base.ASR413.SWS_COMTYPE_00040</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CommunicationStackTypes.pdf, R4.1 Rev 3</source>
      <version>1</version>
      <description>
        Name:  IcomSwitch_ErrorType
        Type:  Enumeration
        Range:  ICOM_SWITCH_E_OK  The activation of Pretended Networking was successful.
        ICOM_SWITCH_E_FAILED The activation of Pretended Networking was not
        successful.
        Description:  IcomSwitch_ErrorType defines the errors which can occur when activating or
        deactivating Pretended Networking.
      </description>
      <releases>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/ComStack_Types.h.m4_252</srcid><srcstatus/><internalId>493</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_CommunicationStackTypesEnums</srcid><srcstatus/><internalId>606</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>48</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>Base.ASR430.SWS_Comtype_NA_0</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CommunicationStackTypes.pdf, R4.3.0</source>
      <version>1</version>
      <description>EN:
        This specification item references requirements that are 
        not applicable, because ComStack_Types neither has configurable parameters nor 
        has reference to configuration parameters from other modules.
        (SRS_BSW_00344, SRS_BSW_00404, SRS_BSW_00405, SRS_BSW_00345, 
        SRS_BSW_00159, SRS_BSW_00167, SRS_BSW_00171, SRS_BSW_00380, 
        SRS_BSW_00381, SRS_BSW_00412, SRS_BSW_00383, SRS_BSW_00388, 
        SRS_BSW_00389, SRS_BSW_00390, SRS_BSW_00392, SRS_BSW_00393, 
        SRS_BSW_00394, SRS_BSW_00395, SRS_BSW_00396, SRS_BSW_00397, 
        SRS_BSW_00398, SRS_BSW_00399, SRS_BSW_00400, SRS_BSW_00342, 
        SRS_BSW_00343, SRS_BSW_00160, SRS_BSW_00408, SRS_BSW_00346, 
        SRS_BSW_00158, SRS_BSW_00401)
      </description>
      <rationale>This requirement is informational only</rationale>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>49</internalId></specobject>

    <specobject>
      <id>Base.ASR430.SWS_Comtype_NA_1</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CommunicationStackTypes.pdf, R4.3.0</source>
      <version>1</version>
      <description>
        This specification item references requirements that are
        not applicable, because ComStack_Types has no interdepencies to SW
        Components. (SRS_BSW_00170, SRS_BSW_00168, SRS_BSW_00423)
      </description>
      <rationale>This requirement is informational only</rationale>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>50</internalId></specobject>

    <specobject>
      <id>Base.ASR430.SWS_Comtype_NA_2</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CommunicationStackTypes.pdf, R4.3.0</source>
      <version>1</version>
      <description>
        This specification item references requirements that are
        not applicable, because ComStack_Types does not implement any interrupts, is not
        a driver or MCAL abstraction layer or has any direct access to OS.
        (SRS_BSW_00375, SRS_BSW_00101, SRS_BSW_00406, SRS_BSW_00416, 
        SRS_BSW_00424, SRS_BSW_00425, SRS_BSW_00426, SRS_BSW_00427, 
        SRS_BSW_00428, SRS_BSW_00429, SRS_BSW_00161, SRS_BSW_00162, 
        SRS_BSW_00005, SRS_BSW_00164, SRS_BSW_00325, SRS_BSW_00413, 
        SRS_BSW_00347, SRS_BSW_00314, SRS_BSW_00410, SRS_BSW_00314, 
        SRS_BSW_00361, SRS_BSW_00172, )
      </description>
      <rationale>This requirement is informational only</rationale>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>51</internalId></specobject>

    <specobject>
      <id>Base.ASR430.SWS_Comtype_NA_3</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CommunicationStackTypes.pdf, R4.3.0</source>
      <version>1</version>
      <description>
        This specification item references requirements that are
        not applicable, because ComStack_Types does not implement any version check
        information, main function. APIs, standard types,
        (SRS_BSW_00323, SRS_BSW_00415, SRS_BSW_00007, SRS_BSW_00300, 
        SRS_BSW_00307, SRS_BSW_00310, SRS_BSW_00373, SRS_BSW_00335, 
        SRS_BSW_00411, SRS_BSW_00348, SRS_BSW_00353, SRS_BSW_00301, 
        SRS_BSW_00302, SRS_BSW_00328, SRS_BSW_00312, SRS_BSW_00006, 
        SRS_BSW_00357, SRS_BSW_00377, SRS_BSW_00304, SRS_BSW_00378, 
        SRS_BSW_00306, SRS_BSW_00308, SRS_BSW_00309, SRS_BSW_00371, 
        SRS_BSW_00358, SRS_BSW_00407, SRS_BSW_00432, SRS_BSW_00433, 
        SRS_BSW_00414, SRS_BSW_00359, SRS_BSW_00360, SRS_BSW_00330, 
        SRS_BSW_00331, SRS_BSW_00009, SRS_BSW_00010, SRS_BSW_00333, 
        SRS_BSW_00374, SRS_BSW_00379, SRS_BSW_00321, SRS_BSW_00341, 
        SRS_BSW_00334)
      </description>
      <rationale>This requirement is informational only</rationale>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>52</internalId></specobject>

    <specobject>
      <id>Base.ASR430.SWS_Comtype_NA_4</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CommunicationStackTypes.pdf, R4.3.0</source>
      <version>1</version>
      <description>
        This specification item references requirements that are
        not applicable, because ComStack_Types does not have any shutdown
        functionality. (SRS_BSW_00336)
      </description>
      <rationale>This requirement is informational only</rationale>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>53</internalId></specobject>

    <specobject>
      <id>Base.ASR430.SWS_Comtype_NA_5</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_CommunicationStackTypes.pdf, R4.3.0</source>
      <version>1</version>
      <description>
        This specification item references requirements that are
        not applicable, because ComStack_Types does not implement development errors
        and production errors. (SRS_BSW_00337, SRS_BSW_00369, SRS_BSW_00339,
        SRS_BSW_00422, SRS_BSW_00417, SRS_BSW_00409, SRS_BSW_00385,
        SRS_BSW_00386, SRS_BSW_00327, SRS_BSW_00350)
      </description>
      <rationale>This requirement is informational only</rationale>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>54</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>Base.ASR21-11.SWS_Csm_91043</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CryptoServiceManager.pdf, R21-11</source>
      <version>1</version>
      <description>
                      | CRYPTO_E_BUSY              | 0x02 | The service request failed because the service is still busy
                      | CRYPTO_E_ENTROPY_EXHAUSTED | 0x04 | The service request failed because the entropy of the random number generator is exhausted
                      | CRYPTO_E_KEY_READ_FAIL     | 0x06 | The service request failed because read access was denied
                      | CRYPTO_E_KEY_WRITE_FAIL    | 0x07 | The service request failed because the writing access failed
        Range         | CRYPTO_E_KEY_NOT_AVAILABLE | 0x08 | The service request failed because at least one required key element is not available.
                      | CRYPTO_E_KEY_NOT_VALID     | 0x09 | The service request failed because the key is invalid.
                      | CRYPTO_E_KEY_SIZE_MISMATCH | 0x0A | The service request failed because the key size does not match.
                      | CRYPTO_E_JOB_CANCELED      | 0x0C | The service request failed because the Job has been canceled.
                      | CRYPTO_E_KEY_EMPTY         | 0x0D | The service request failed because of uninitialized source key element.
        Description   | --
        Available via | Crypto_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_17</srcid><srcstatus/><internalId>312</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_24</srcid><srcstatus/><internalId>313</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_31</srcid><srcstatus/><internalId>314</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_38</srcid><srcstatus/><internalId>315</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_45</srcid><srcstatus/><internalId>316</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_52</srcid><srcstatus/><internalId>317</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_59</srcid><srcstatus/><internalId>318</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_66</srcid><srcstatus/><internalId>319</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_73</srcid><srcstatus/><internalId>320</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>55</internalId></specobject>

    <specobject>
      <id>Base.ASR21-11.SWS_Csm_01047</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CryptoServiceManager.pdf, R21-11</source>
      <version>1</version>
      <description>
        Name          | Crypto_AlgorithmFamilyType
        Kind          | Enumeration
        Range         | CRYPTO_ALGOFAM_NOT_SET              | 0x00 | Algorithm family is not set
                      | CRYPTO_ALGOFAM_SHA1                 | 0x01 | SHA1 hash
                      | CRYPTO_ALGOFAM_SHA2_224             | 0x02 | SHA2-224 hash
                      | CRYPTO_ALGOFAM_SHA2_256             | 0x03 | SHA2-256 hash
                      | CRYPTO_ALGOFAM_SHA2_384             | 0x04 | SHA2-384 hash
                      | CRYPTO_ALGOFAM_SHA2_512             | 0x05 | SHA2-512 hash
                      | CRYPTO_ALGOFAM_SHA2_512_224         | 0x06 | SHA2-512/224 hash
                      | CRYPTO_ALGOFAM_SHA2_512_256         | 0x07 | SHA2-512/256 hash
                      | CRYPTO_ALGOFAM_SHA3_224             | 0x08 | SHA3-224 hash
                      | CRYPTO_ALGOFAM_SHA3_256             | 0x09 | SHA3-256 hash
                      | CRYPTO_ALGOFAM_SHA3_384             | 0x0a | SHA3-384 hash
                      | CRYPTO_ALGOFAM_SHA3_512             | 0x0b | SHA3-512 hash
                      | CRYPTO_ALGOFAM_SHAKE128             | 0x0c | SHAKE128 hash
                      | CRYPTO_ALGOFAM_SHAKE256             | 0x0d | SHAKE256 hash
                      | CRYPTO_ALGOFAM_RIPEMD160            | 0x0e | RIPEMD hash
                      | CRYPTO_ALGOFAM_BLAKE_1_256          | 0x0f | BLAKE-1-256 hash
                      | CRYPTO_ALGOFAM_BLAKE_1_512          | 0x10 | BLAKE-1-512 hash
                      | CRYPTO_ALGOFAM_BLAKE_2s_256         | 0x11 | BLAKE-2s-256 hash
                      | CRYPTO_ALGOFAM_BLAKE_2s_512         | 0x12 | BLAKE-2s-512 hash
                      | CRYPTO_ALGOFAM_3DES                 | 0x13 | 3DES cipher
                      | CRYPTO_ALGOFAM_AES                  | 0x14 | AES cipher
                      | CRYPTO_ALGOFAM_CHACHA               | 0x15 | ChaCha cipher
                      | CRYPTO_ALGOFAM_RSA                  | 0x16 | RSA cipher
                      | CRYPTO_ALGOFAM_ED25519              | 0x17 | ED22519 elliptic curve
                      | CRYPTO_ALGOFAM_BRAINPOOL            | 0x18 | Brainpool elliptic curve
                      | CRYPTO_ALGOFAM_ECCNIST              | 0x19 | NIST ECC elliptic curves
                      | CRYPTO_ALGOFAM_RNG                  | 0x1b | Random Number Generator
                      | CRYPTO_ALGOFAM_SIPHASH              | 0x1c | SipHash
                      | CRYPTO_ALGOFAM_ECCANSI              | 0x1e | Elliptic curve according to ANSI X9.62
                      | CRYPTO_ALGOFAM_ECCSEC               | 0x1f | Elliptic curve according to SECG
                      | CRYPTO_ALGOFAM_DRBG                 | 0x20 | Random number generator according to NIST SP800-90A
                      | CRYPTO_ALGOFAM_FIPS186              | 0x21 | Random number generator according to FIPS 186.
                      | CRYPTO_ALGOFAM_PADDING_PKCS7        | 0x22 | Cipher padding according to PKCS.7
                      | CRYPTO_ALGOFAM_PADDING_ONEWITHZEROS | 0x23 | Cipher padding mode. Fill/verify data with 0, but first bit after the data is 1. Eg. "DATA" AND 0x80 AND 0x00...
                      | CRYPTO_ALGOFAM_PBKDF2               | 0x24 | Password-Based Key Derivation Function 2
                      | CRYPTO_ALGOFAM_KDFX963              | 0x25 | ANSI X9.63 Public Key Cryptography
                      | CRYPTO_ALGOFAM_DH                   | 0x26 | Diffie-Hellman
                      | CRYPTO_ALGOFAM_SM2                  | 0x27 | SM2 elliptic curve algorithm
                      | CRYPTO_ALGOFAM_EEA3                 | 0x28 | Stream cipher based on [x01]
                      | CRYPTO_ALGOFAM_SM3                  | 0x29 | Chinese hash algorithm based on [x02]
                      | CRYPTO_ALGOFAM_EIA3                 | 0x2A | Authentication algorithm [x01]
                      | CRYPTO_ALGOFAM_HKDF                 | 0x2B | HMAC-based extract-and-expand key derivation function
                      | CRYPTO_ALGOFAM_ECDSA                | 0x2C | Elliptic-curve Digital Signatures
                      | CRYPTO_ALGOFAM_POLY1305             | 0x2D | MAC calculation algorithm
                      | CRYPTO_ALGOFAM_X25519               | 0x2E | Elliptic curve X25519 for ECDH
                      | CRYPTO_ALGOFAM_ECDH                 | 0x2F | Elliptic-curve Diffie Hellman
                      | CRYPTO_ALGOFAM_CUSTOM               | 0xff | Custom algorithm family
        Description   | Enumeration of the algorithm family.
        Available via | Crypto_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_92</srcid><srcstatus/><internalId>322</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_99</srcid><srcstatus/><internalId>323</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_106</srcid><srcstatus/><internalId>324</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_113</srcid><srcstatus/><internalId>325</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_120</srcid><srcstatus/><internalId>326</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_127</srcid><srcstatus/><internalId>327</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_134</srcid><srcstatus/><internalId>328</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_141</srcid><srcstatus/><internalId>329</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_148</srcid><srcstatus/><internalId>330</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_155</srcid><srcstatus/><internalId>331</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_162</srcid><srcstatus/><internalId>332</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_169</srcid><srcstatus/><internalId>333</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_176</srcid><srcstatus/><internalId>334</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_183</srcid><srcstatus/><internalId>335</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_190</srcid><srcstatus/><internalId>336</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_197</srcid><srcstatus/><internalId>337</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_204</srcid><srcstatus/><internalId>338</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_211</srcid><srcstatus/><internalId>339</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_218</srcid><srcstatus/><internalId>340</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_225</srcid><srcstatus/><internalId>341</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_232</srcid><srcstatus/><internalId>342</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_239</srcid><srcstatus/><internalId>343</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_246</srcid><srcstatus/><internalId>344</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_253</srcid><srcstatus/><internalId>345</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_260</srcid><srcstatus/><internalId>346</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_267</srcid><srcstatus/><internalId>347</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_274</srcid><srcstatus/><internalId>348</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_281</srcid><srcstatus/><internalId>349</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_288</srcid><srcstatus/><internalId>350</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_295</srcid><srcstatus/><internalId>351</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_302</srcid><srcstatus/><internalId>352</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_309</srcid><srcstatus/><internalId>353</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_316</srcid><srcstatus/><internalId>354</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_324</srcid><srcstatus/><internalId>355</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_331</srcid><srcstatus/><internalId>356</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_338</srcid><srcstatus/><internalId>357</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_345</srcid><srcstatus/><internalId>358</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_352</srcid><srcstatus/><internalId>359</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_359</srcid><srcstatus/><internalId>360</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_366</srcid><srcstatus/><internalId>361</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_373</srcid><srcstatus/><internalId>362</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_380</srcid><srcstatus/><internalId>363</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_387</srcid><srcstatus/><internalId>364</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_394</srcid><srcstatus/><internalId>365</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_401</srcid><srcstatus/><internalId>366</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_408</srcid><srcstatus/><internalId>367</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_415</srcid><srcstatus/><internalId>368</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_790</srcid><srcstatus/><internalId>419</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_CryptoGeneralTypes</srcid><srcstatus/><internalId>598</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations><ruleid>WRN.impl.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>56</internalId></specobject>

    <specobject>
      <id>Base.ASR21-11.SWS_Csm_01048</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CryptoServiceManager.pdf, R21-11</source>
      <version>1</version>
      <description>
        Name          | Crypto_AlgorithmModeType
        Kind          | Enumeration
        Range         | CRYPTO_ALGOMODE_NOT_SET           | 0x00 | Algorithm key is not set
                      | CRYPTO_ALGOMODE_ECB               | 0x01 | Blockmode: Electronic Code Book
                      | CRYPTO_ALGOMODE_CBC               | 0x02 | Blockmode: Cipher Block Chaining
                      | CRYPTO_ALGOMODE_CFB               | 0x03 | Blockmode: Cipher Feedback Mode
                      | CRYPTO_ALGOMODE_OFB               | 0x04 | Blockmode: Output Feedback Mode
                      | CRYPTO_ALGOMODE_CTR               | 0x05 | Blockmode: Counter Modex
                      | CRYPTO_ALGOMODE_GCM               | 0x06 | Blockmode: Galois/Counter Mode
                      | CRYPTO_ALGOMODE_XTS               | 0x07 | XEX Tweakable Block Cipher with Ciphertext Stealing
                      | CRYPTO_ALGOMODE_RSAES_OAEP        | 0x08 | RSA Optimal Asymmetric Encryption Padding
                      | CRYPTO_ALGOMODE_RSAES_PKCS1_v1_5  | 0x09 | RSA encryption/decryption with PKCS#1 v1.5 padding
                      | CRYPTO_ALGOMODE_RSASSA_PSS        | 0x0a | RSA Probabilistic Signature Scheme
                      | CRYPTO_ALGOMODE_RSASSA_PKCS1_v1_5 | 0x0b | RSA signature with PKCS#1 v1.5
                      | CRYPTO_ALGOMODE_8ROUNDS           | 0x0c | 8 rounds (e.g. ChaCha8)
                      | CRYPTO_ALGOMODE_12ROUNDS          | 0x0d | 12 rounds (e.g. ChaCha12)
                      | CRYPTO_ALGOMODE_20ROUNDS          | 0x0e | 20 rounds (e.g. ChaCha20)
                      | CRYPTO_ALGOMODE_HMAC              | 0x0f | Hashed-based MAC
                      | CRYPTO_ALGOMODE_CMAC              | 0x10 | Cipher-based MAC
                      | CRYPTO_ALGOMODE_GMAC              | 0x11 | Galois MAC
                      | CRYPTO_ALGOMODE_CTRDRBG           | 0x12 | Counter-based Deterministic Random Bit Generator
                      | CRYPTO_ALGOMODE_SIPHASH_2_4       | 0x13 | Siphash-2-4
                      | CRYPTO_ALGOMODE_SIPHASH_4_8       | 0x14 | Siphash-4-8
                      | CRYPTO_ALGOMODE_PXXXR1            | 0x15 | ANSI R1 Curve
                      | CRYPTO_ALGOMODE_CUSTOM            | 0xff | Custom algorithm mode
        Description   | Enumeration of the algorithm mode
        Available via | Crypto_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_424</srcid><srcstatus/><internalId>369</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_431</srcid><srcstatus/><internalId>370</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_438</srcid><srcstatus/><internalId>371</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_445</srcid><srcstatus/><internalId>372</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_452</srcid><srcstatus/><internalId>373</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_459</srcid><srcstatus/><internalId>374</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_466</srcid><srcstatus/><internalId>375</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_473</srcid><srcstatus/><internalId>376</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_480</srcid><srcstatus/><internalId>377</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_487</srcid><srcstatus/><internalId>378</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_494</srcid><srcstatus/><internalId>379</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_501</srcid><srcstatus/><internalId>380</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_508</srcid><srcstatus/><internalId>381</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_515</srcid><srcstatus/><internalId>382</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_522</srcid><srcstatus/><internalId>383</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_529</srcid><srcstatus/><internalId>384</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_536</srcid><srcstatus/><internalId>385</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_543</srcid><srcstatus/><internalId>386</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_550</srcid><srcstatus/><internalId>387</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_557</srcid><srcstatus/><internalId>388</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_564</srcid><srcstatus/><internalId>389</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_571</srcid><srcstatus/><internalId>390</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_578</srcid><srcstatus/><internalId>391</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_795</srcid><srcstatus/><internalId>420</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_CryptoGeneralTypes</srcid><srcstatus/><internalId>598</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations><ruleid>WRN.impl.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>57</internalId></specobject>

    <specobject>
      <id>Base.ASR21-11.SWS_Csm_91024</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CryptoServiceManager.pdf, R21-11</source>
      <version>1</version>
      <description>
        Name          | Crypto_InputOutputRedirectionConfigType
        Kind          | Enumeration
        Range         | CRYPTO_REDIRECT_CONFIG_PRIMARY_INPUT    | 0x01 | --
                      | CRYPTO_REDIRECT_CONFIG_SECONDARY_INPUT  | 0x02 | --
                      | CRYPTO_REDIRECT_CONFIG_TERTIARY_INPUT   | 0x04 | --
                      | CRYPTO_REDIRECT_CONFIG_PRIMARY_OUTPUT   | 0x10 | --
                      | CRYPTO_REDIRECT_CONFIG_SECONDARY_OUTPUT | 0x20 | --
        Description   | Defines which of the input/output parameters are re-directed to a key element.
                      | The values can be combined to define a bit field.
        Available via | Crypto_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_587</srcid><srcstatus/><internalId>392</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_594</srcid><srcstatus/><internalId>393</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_601</srcid><srcstatus/><internalId>394</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_608</srcid><srcstatus/><internalId>395</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_615</srcid><srcstatus/><internalId>396</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_801</srcid><srcstatus/><internalId>421</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_CryptoGeneralTypes</srcid><srcstatus/><internalId>598</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>58</internalId></specobject>

    <specobject>
      <id>Base.ASR21-11.SWS_Csm_01013</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CryptoServiceManager.pdf, R21-11</source>
      <version>1</version>
      <description>
        Name          | Crypto_JobType
        Kind          | Structure
        Elements      | jobId
                      | Type    | uint32
                      | Comment | Identifier for the job structure.
                      | jobState
                      | Type    | Crypto_JobStateType
                      | Comment | Determines the current job state.
                      | jobPrimitiveInputOutput
                      | Type    | Crypto_JobPrimitiveInputOutputType
                      | Comment | Structure containing input and output information depending on the job and the crypto primitive.
                      | jobPrimitiveInfo
                      | Type    | const Crypto_JobPrimitiveInfoType*
                      | Comment | Pointer to a structure containing further information which depends on the job and the crypto primitive.
                      | jobRedirectionInfoRef
                      | Type    | Crypto_JobRedirectionInfoType*
                      | Comment | Pointer to a structure containing further information on the usage of keys as input and output for jobs.
                      | cryptoKeyId
                      | Type    | uint32
                      | Comment | Identifier of the Crypto Driver key. The identifier shall be written by the Crypto Interface.
                      | targetCryptoKeyId
                      | Type    | uint32
                      | Comment | Target identifier of the Crypto Driver key. The identifier shall be written by the Crypto Interface.
                      | jobPriority
                      | Type    | const uint32
                      | Comment | Specifies the importance of the job (the higher, the more important).
        Description   | Structure which contains further information, which depends on the job and the crypto primitive.
        Available via | Crypto_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_1041</srcid><srcstatus/><internalId>430</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_CryptoGeneralTypes</srcid><srcstatus/><internalId>598</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>59</internalId></specobject>

    <specobject>
      <id>Base.ASR21-11.SWS_Csm_01028</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CryptoServiceManager.pdf, R21-11</source>
      <version>1</version>
      <description>
        Name          | Crypto_JobStateType
        Kind          | Enumeration
        Range         | CRYPTO_JOBSTATE_IDLE   | 0x00 | Job is in the state "idle". This state is reached after Csm_Init()
                      |                        |      | or when the "Finish" state is finished.
                      | CRYPTO_JOBSTATE_ACTIVE | 0x01 | Job is in the state "active". There was already some input
                      |                        |      | or there are intermediate results. This state is reached,
                      |                        |      | when the "update" or "start" operation finishes.
        Description   | Enumeration of the current job state.
        Available via | Crypto_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_625</srcid><srcstatus/><internalId>397</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_634</srcid><srcstatus/><internalId>398</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_806</srcid><srcstatus/><internalId>422</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_CryptoGeneralTypes</srcid><srcstatus/><internalId>598</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>60</internalId></specobject>

    <specobject>
      <id>Base.ASR21-11.SWS_Csm_01009</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CryptoServiceManager.pdf, R21-11</source>
      <version>1</version>
      <description>
        Name          | Crypto_JobPrimitiveInputOutputType
        Kind          | Structure
        Elements      | inputPtr
                      | Type    | const uint8*
                      | Comment | Pointer to the input data.
                      | inputLength
                      | Type    | uint32
                      | Comment | Contains the input length in bytes.
                      | secondaryInputPtr
                      | Type    | const uint8*
                      | Comment | Pointer to the secondary input data (for MacVerify, SignatureVerify).
                      | secondaryInputLength
                      | Type    | uint32
                      | Comment | Contains the secondary input length in bits or bytes, depending on the requested service.
                      | tertiaryInputPtr
                      | Type    | const uint8*
                      | Comment | Pointer to the tertiary input data (for MacVerify, SignatureVerify).
                      | tertiaryInputLength
                      | Type    | uint32
                      | Comment | Contains the tertiary input length in bytes.
                      | outputPtr
                      | Type    | uint8*
                      | Comment | Pointer to the output data.
                      | outputLengthPtr
                      | Type    | uint32*
                      | Comment | Holds a pointer to a memory location containing the output length in bytes.
                      | secondaryOutputPtr
                      | Type    | uint8*
                      | Comment | Pointer to the secondary output data.
                      | secondaryOutputLengthPtr
                      | Type    | uint32*
                      | Comment | Holds a pointer to a memory location containing the secondary output length in bytes.
                      | verifyPtr
                      | Type    | Crypto_VerifyResultType*
                      | Comment | Output pointer to a memory location holding a Crypto_VerifyResultType
                      | mode
                      | Type    | Crypto_OperationModeType
                      | Comment | Indicator of the mode(s)/operation(s) to be performed
                      | cryIfKeyId
                      | Type    | uint32
                      | Comment | Holds the CryIf key id for key operation services.
                      | targetCryIfKeyId
                      | Type    | uint32
                      | Comment | Holds the target CryIf key id for key operation services.
        Description   | Structure which contains input and output information depending on the job and the crypto primitive.
        Available via | Crypto_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_933</srcid><srcstatus/><internalId>428</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_CryptoGeneralTypes</srcid><srcstatus/><internalId>598</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>61</internalId></specobject>

    <specobject>
      <id>Base.ASR21-11.SWS_Csm_01012</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CryptoServiceManager.pdf, R21-11</source>
      <version>1</version>
      <description>
        Name          | Crypto_JobPrimitiveInfoType
        Kind          | Structure
        Elements      | callbackId
                      | Type    | uint32
                      | Comment | Internal identifier of the callback function, to be called by Csm, if the configured service is finished.
                      | primitiveInfo
                      | Type    | const Crypto_PrimitiveInfoType*
                      | Comment | Pointer to a structure containing further configuration of the crypto primitives
                      | cryIfKeyId
                      | Type    | uint32
                      | Comment | Identifier of the CryIf key.
                      | processingType
                      | Type    | Crypto_ProcessingType
                      | Comment | Determines the synchronous or asynchronous behavior.
        Description   | Structure which contains further information, which depends on the job and the crypto primitive.
        Available via | Crypto_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_876</srcid><srcstatus/><internalId>427</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_CryptoGeneralTypes</srcid><srcstatus/><internalId>598</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>62</internalId></specobject>

    <specobject>
      <id>Base.ASR21-11.SWS_Csm_01031</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CryptoServiceManager.pdf, R21-11</source>
      <version>1</version>
      <description>
        Name          | Crypto_ServiceInfoType
        Kind          | Enumeration
        Range         | CRYPTO_HASH                  | 0x00 | Hash Service
                      | CRYPTO_MACGENERATE           | 0x01 | MacGenerate Service
                      | CRYPTO_MACVERIFY             | 0x02 | MacVerify Service
                      | CRYPTO_ENCRYPT               | 0x03 | Encrypt Service
                      | CRYPTO_DECRYPT               | 0x04 | Decrypt Service
                      | CRYPTO_AEADENCRYPT           | 0x05 | AEADEncrypt Service
                      | CRYPTO_AEADDECRYPT           | 0x06 | AEADDecrypt Service
                      | CRYPTO_SIGNATUREGENERATE     | 0x07 | SignatureGenerate Service
                      | CRYPTO_SIGNATUREVERIFY       | 0x08 | SignatureVerify Service
                      | CRYPTO_RANDOMGENERATE        | 0x0B | RandomGenerate Service
                      | CRYPTO_RANDOMSEED            | 0x0C | RandomSeed Service
                      | CRYPTO_KEYGENERATE           | 0x0D | KeyGenerate Service
                      | CRYPTO_KEYDERIVE             | 0x0E | KeyDerive Service
                      | CRYPTO_KEYEXCHANGECALCPUBVAL | 0x0F | KeyExchangeCalcPubVal Service
                      | CRYPTO_KEYEXCHANGECALCSECRET | 0x10 |KeyExchangeCalcSecret Service
                      | CRYPTO_KEYSETVALID           | 0x13 | KeySetValid Service
                      | CRYPTO_KEYSETINVALID         | 0x14 | KeySetInvalid Service
        Description   | Enumeration of the kind of the service.
        Available via | Crypto_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_659</srcid><srcstatus/><internalId>401</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_666</srcid><srcstatus/><internalId>402</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_673</srcid><srcstatus/><internalId>403</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_680</srcid><srcstatus/><internalId>404</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_687</srcid><srcstatus/><internalId>405</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_694</srcid><srcstatus/><internalId>406</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_701</srcid><srcstatus/><internalId>407</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_708</srcid><srcstatus/><internalId>408</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_715</srcid><srcstatus/><internalId>409</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_722</srcid><srcstatus/><internalId>410</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_729</srcid><srcstatus/><internalId>411</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_736</srcid><srcstatus/><internalId>412</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_743</srcid><srcstatus/><internalId>413</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_750</srcid><srcstatus/><internalId>414</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_757</srcid><srcstatus/><internalId>415</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_764</srcid><srcstatus/><internalId>416</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_771</srcid><srcstatus/><internalId>417</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_816</srcid><srcstatus/><internalId>424</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_CryptoGeneralTypes</srcid><srcstatus/><internalId>598</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations><ruleid>WRN.impl.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>63</internalId></specobject>

    <specobject>
      <id>Base.ASR21-11.SWS_Csm_91026</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CryptoServiceManager.pdf, R21-11</source>
      <version>1</version>
      <description>
        Name          | Crypto_JobRedirectionInfoType
        Kind          | Structure
        Elements      | redirectionConfig
                      | Type    | uint8
                      | Comment | Bit structure which indicates which buffer shall be redirected to a key
                      |         | element. Values from Crypto_InputOutputRedirectionConfigType can be
                      |         | used and combined with unary OR operation.
                      | inputKeyId
                      | Type    | uint32
                      | Comment | Identifier of the key which shall be used as input
                      | inputKeyElementId
                      | Type    | uint32
                      | Comment | Identifier of the key element which shall be used as input
                      | secondaryInputKeyId
                      | Type    | uint32
                      | Comment | Identifier of the key which shall be used as secondary input
                      | secondaryInputKeyElementId
                      | Type    | uint32
                      | Comment | Identifier of the key element which shall be used as secondary input
                      | tertiaryInputKeyId
                      | Type    | uint32
                      | Comment | Identifier of the key which shall be used as tertiary input
                      | tertiaryInputKeyElementId
                      | Type    | uint32
                      | Comment | Identifier of the key element which shall be used as tertiary input
                      | outputKeyId
                      | Type    | uint32
                      | Comment | Identifier of the key which shall be used as output
                      | outputKeyElementId
                      | Type    | uint32
                      | Comment | Identifier of the key element which shall be used as output
                      | secondaryOutputKeyId
                      | Type    | uint32
                      | Comment | Identifier of the key which shall be used as secondary output
                      | secondaryOutputKeyElementId
                      | Type    | uint32
                      | Comment | Identifier of the key element which shall be used as secondary output
        Description   | Structure which holds the identifiers of the keys and key elements which shall be used
                      | as input and output for a job and a bit structure which indicates which buffers shall be
                      | redirected to those key elements.
        Available via | Crypto_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_992</srcid><srcstatus/><internalId>429</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_CryptoGeneralTypes</srcid><srcstatus/><internalId>598</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>64</internalId></specobject>

    <specobject>
      <id>Base.ASR21-11.SWS_Csm_01008</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CryptoServiceManager.pdf, R21-11</source>
      <version>1</version>
      <description>
        Name          | Crypto_AlgorithmInfoType
        Kind          | Structure
        Elements      | family
                      | Type            | Crypto_AlgorithmFamilyType
                      | Comment         | The family of the algorithm
                      | secondaryFamily
                      | Type            | Crypto_AlgorithmFamilyType
                      | Comment         | The secondary family of the algorithm
                      | keyLength
                      | Type            | uint32
                      | Comment         | The key length in bits to be used with that algorithm
                      | mode
                      | Type            | Crypto_AlgorithmModeType
                      | Comment         | The operation mode to be used with that algorithm
        Description   | Structure which determines the exact algorithm. Note, not every algorithm needs to
                      | specify all fields. AUTOSAR shall only allow valid combinations.
        Available via | Crypto_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_834</srcid><srcstatus/><internalId>425</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_CryptoGeneralTypes</srcid><srcstatus/><internalId>598</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>65</internalId></specobject>

    <specobject>
      <id>Base.ASR21-11.SWS_Csm_01049</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CryptoServiceManager.pdf, R21-11</source>
      <version>1</version>
      <description>
        Name          | Crypto_ProcessingType
        Kind          | Enumeration
        Range         | CRYPTO_PROCESSING_ASYNC            | 0x00 | Asynchronous job processing
                      | CRYPTO_PROCESSING_SYNC             | 0x01 | Synchronous job processing
        Description   | Enumeration of the processing type.
        Available via | Crypto_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_643</srcid><srcstatus/><internalId>399</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_650</srcid><srcstatus/><internalId>400</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_811</srcid><srcstatus/><internalId>423</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_CryptoGeneralTypes</srcid><srcstatus/><internalId>598</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>66</internalId></specobject>

    <specobject>
      <id>Base.ASR21-11.SWS_Csm_01011</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_CryptoServiceManager.pdf, R21-11</source>
      <version>1</version>
      <description>
        Name          | Crypto_PrimitiveInfoType
        Kind          | Structure
        Elements      | service
                      | Type      | const Crypto_ServiceInfoType
                      | Comment   | Contains the enum of the used service, e.g. Encrypt
                      | algorithm
                      | Type      | const Crypto_AlgorithmInfoType
                      | Comment   | Contains the information of the used algorithm
        Description   | Structure which contains basic information about the crypto primitive.
        Available via | Crypto_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_852</srcid><srcstatus/><internalId>426</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_CryptoGeneralTypes</srcid><srcstatus/><internalId>598</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>67</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>Base.SWS_Eth_00026</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Module         | Header File      | Imported Type
        ComStack_Types | ComStack_Types.h | BufReq_ReturnType
        Dem            | Rte_Dem_Type.h   | Dem_EventIdType
                       | Rte_Dem_Type.h   | Dem_EventStatusType
        Std            | Std_Types.h      | Std_ReturnType
                       | Std_Types.h      | Std_VersionInfoType
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Base.EB_Ref.SWS_Eth_00026.ImplementedTypes</srcid><srcstatus/><internalId>188</internalId></linkedfrom><linkedfrom><srcid>Base.EB_Ref.SWS_Eth_00026.NotImplementedTypes</srcid><srcstatus/><internalId>189</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>68</internalId></specobject>

    <specobject>
      <id>Base.SWS_Eth_00156</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Eth_ConfigType
        Kind          | Structure
        Description   | Implementation specific structure of the post build configuration
        Available via | Eth.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_51</srcid><srcstatus/><internalId>284</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>69</internalId></specobject>

    <specobject>
      <id>Base.SWS_Eth_00158</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Eth_ModeType (obsolete)
        Kind          | Enumeration
        Range         | ETH_MODE_DOWN   | 0x00 | disable the Ethernet communication channel and set its
                      |                 |      | corresponding hardware to an lowpower sleep mode
                      | ETH_MODE_ACTIVE | 0x01 | enable the Ethernet communication channel and set its
                      |                 |      | corresponding hardware to an power on mode
        Description   | This is an generic type and used in the layers of the Ethernet
                      | communication stack (e.g. EthIf, Eth, EthSwt, EthTrcv) to enable and
                      | disable, respectively, the Ethernet communcation channel and set the
                      | corresponding hardware (e.g. Ethernet controller, Ethernet Switch port,
                      | Ethernet transceiver) to an lowpower sleep and power on mode,
                      | respectively.
                      | Tags:atp.Status=obsolete
        Available via | Eth_GeneralTypes.h
      </description>
      <comment>
        Tagged as obsolete starting with R20-11.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_36</srcid><srcstatus/><internalId>495</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_EthGeneralTypes</srcid><srcstatus/><internalId>599</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>70</internalId></specobject>

    <specobject>
      <id>Base.SWS_Eth_00159</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Eth_StateType
        Kind          | Enumeration
        Range         | ETH_STATE_UNINIT | 0x00 | Driver is not yet configured
                      | ETH_STATE_INIT   | 0x01 | Driver is configured
        Description   | Status supervision used for Development Error Detection.
                      | The state shall be available for debugging.
        Available via | Eth_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_46</srcid><srcstatus/><internalId>496</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_EthGeneralTypes</srcid><srcstatus/><internalId>599</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>71</internalId></specobject>

    <specobject>
      <id>Base.SWS_Eth_00160</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Eth_FrameType
        Kind          | Type
        Derived from  | uint16
        Description   | This type defines the Ethernet frame type used in the Ethernet frame header
        Available via | Eth_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_50</srcid><srcstatus/><internalId>497</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_EthGeneralTypes</srcid><srcstatus/><internalId>599</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>72</internalId></specobject>

    <specobject>
      <id>Base.SWS_Eth_00161</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Eth_DataType
        Kind          | Type
        Derived from  | Basetype | Variation
                      | uint16   | 8 or 16 bit CPU
                      | uint32   | 32 bit CPU
                      | uint8    | 8, 16 or 32 bit CPU
        Description   | This type defines the Ethernet data type used for data transmission.
                      | Its definition depends on the used CPU.
        Available via | Eth_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_64</srcid><srcstatus/><internalId>285</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_58</srcid><srcstatus/><internalId>498</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_EthGeneralTypes</srcid><srcstatus/><internalId>599</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>73</internalId></specobject>

    <specobject>
      <id>Base.SWS_Eth_00162</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Eth_RxStatusType
        Kind          | Enumeration
        Range         | ETH_RECEIVED                     | 0x00 | Ethernet frame has been received, no further frames available
                      | ETH_NOT_RECEIVED                 | 0x01 | Ethernet frame has not been received, no further frames available
                      | ETH_RECEIVED_MORE_DATA_AVAILABLE | 0x02 | Ethernet frame has been received, more frames are available
        Description   | Used as out parameter in Eth_Receive() indicates whether a frame has been received
                      | and if so, whether more frames are available or frames got lost.
        Available via | Eth_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_70</srcid><srcstatus/><internalId>499</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_EthGeneralTypes</srcid><srcstatus/><internalId>599</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>74</internalId></specobject>

    <specobject>
      <id>Base.SWS_Eth_00163</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Eth_FilterActionType
        Kind          | Enumeration
        Range         | ETH_ADD_TO_FILTER      | 0x00 | add the MAC address to the filter, meaning allow reception
                      | ETH_REMOVE_FROM_FILTER | 0x01 | remove the MAC address from the filter, meaning reception is blocked in the lower layer
        Description   | The Enumeration Type Eth_FilterActionType describes the action to be
                      | taken for the MAC address given in *PhysAddrPtr.
        Available via | Eth_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_82</srcid><srcstatus/><internalId>500</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_EthGeneralTypes</srcid><srcstatus/><internalId>599</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>75</internalId></specobject>

    <specobject>
      <id>Base.SWS_Eth_00175</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Eth_BufIdxType
        Kind          | Type
        Derived from  | uint32
        Description   | Ethernet buffer identifier type.
        Available via | Eth_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Eth_GeneralTypes_Cfg.h_18</srcid><srcstatus/><internalId>431</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_EthGeneralTypes</srcid><srcstatus/><internalId>599</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>76</internalId></specobject>

    <specobject>
      <id>Base.SWS_Eth_00177</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Eth_TimeStampQualType
        Kind          | Enumeration
        Range         | ETH_VALID     | 0 | --
                      | ETH_INVALID   | 1 | --
                      | ETH_UNCERTAIN | 2 | --
        Description   | Depending on the HW, quality information regarding the evaluated time stamp might
                      | be supported. If not supported, the value shall be always Valid. For Uncertain and
                      | Invalid values, the upper layer shall discard the time stamp.
        Available via | Eth_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_92</srcid><srcstatus/><internalId>501</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_EthGeneralTypes</srcid><srcstatus/><internalId>599</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>77</internalId></specobject>

    <specobject>
      <id>Base.SWS_Eth_00178</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Eth_TimeStampType
        Kind          | Structure
        Elements      | nanoseconds
                      | Type    | uint32
                      | Comment | Nanoseconds part of the time
                      | seconds
                      | Type    | uint32
                      | Comment | 32 bit LSB of the 48 bits Seconds part of the time
                      | secondsHi
                      | Type    | uint16
                      | Comment | 16 bit MSB of the 48 bits Seconds part of the time
        Description   | Variables of this type are used for expressing time stamps including relative time and
                      | absolute calendar time. The absolute time starts at 1970-01-01.
                      | 0 to 281474976710655s == 3257812230d [0xFFFF FFFF FFFF]
                      | 0 to 999999999ns [0x3B9A C9FF] invalid value in nanoseconds: [0x3B9A CA00] to
                      | [0x3FFF FFFF] Bit 30 and 31 reserved, default: 0
        Available via | Eth_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_96</srcid><srcstatus/><internalId>502</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_EthGeneralTypes</srcid><srcstatus/><internalId>599</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>78</internalId></specobject>

    <specobject>
      <id>Base.SWS_Eth_00179</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Eth_TimeIntDiffType
        Kind          | Structure
        Elements      | diff
                      | Type    | Eth_TimeStampType
                      | Comment | time difference
                      | sign
                      | Type    | boolean
                      | Comment | Positive (True) / negative (False) time
        Description   | Variables of this type are used to express time differences.
        Available via | Eth_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_105</srcid><srcstatus/><internalId>503</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_EthGeneralTypes</srcid><srcstatus/><internalId>599</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>79</internalId></specobject>

    <specobject>
      <id>Base.SWS_Eth_00180</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Eth_RateRatioType
        Kind          | Structure
        Elements      | IngressTimeStampDelta
                      | Type    | Eth_TimeIntDiffType
                      | Comment | IngressTimeStampSync2 - IngressTimeStampSync1
                      | OriginTimeStampDelta
                      | Type    | Eth_TimeIntDiffType
                      | Comment | OriginTimeStampSync2[FUP2] - OriginTimeStampSync1[FUP1]
        Description   | Variables of this type are used to express frequency ratios.
        Available via | Eth_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_113</srcid><srcstatus/><internalId>504</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_EthGeneralTypes</srcid><srcstatus/><internalId>599</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>80</internalId></specobject>

    <specobject>
      <id>Base.SWS_Eth_91001</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Eth_MacVlanType
        Kind          | Structure
        Elements      | MacAddr
                      | Type    | Array of uint8
                      | Size    | 6
                      | Comment | Specifies the MAC address [0..255,0..255,0..255,0..255,0..255,0..255]
                      | VlanId
                      | Type    | uint16
                      | Comment | Specifies the VLAN address 0..65535
                      | SwitchPort
                      | Type    | uint32
                      | Comment | Specifies the ports of the switch as bit mask (0x00000001-&gt;Port0, 0x80000001-&gt;Port31+Port0)
        Description   | This type is used to read out addresses from the address resolution logic (ARL) table
                      | of the switch.
                      | typedef struct { uint8 MacAddr[6U]; uint16 VlanId; uint32 SwitchPort; } Eth_MacVlan
                      | Type;
                      | In case of Macaddr contains a Multicast Address MacVlanType.SwitchPort shall be
                      | handled as Bitmask, each bit represents a Switch Port, Bit 0 represents EthSwichtPort
                      | Idx = 0 , Bit 1 represents EthSwichtPortIdx = 1 and so on. In case of Macaddr contains
                      | not a Multicast Address MacVlanType.SwitchPort shall be handled as a value
                      | representing the EthSwitchPortIdx.
        Available via | Eth_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_121</srcid><srcstatus/><internalId>505</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_EthGeneralTypes</srcid><srcstatus/><internalId>599</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>81</internalId></specobject>

    <specobject>
      <id>Base.SWS_Eth_91002</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Eth_RxStatsType
        Kind          | Structure
        Elements      | RxStatsDropEvents
                      | Type    | uint32
                      | Comment | The total number of events in which packets were dropped by the probe
                      |         | due to lack of resources. Also described in IETF RFC 2819 MIB etherStatsDropEvents.
                      | RxStatsOctets
                      | Type    | uint32
                      | Comment | The total number of octets of data (including those in bad packets)
                      |         | received on the network (excluding framing bits but including FCS octets).
                      |         | Also described in IETF RFC 2819 MIB etherStatsOctets.
                      | RxStatsPkts
                      | Type    | uint32
                      | Comment | The total number of packets (including bad packets, broadcast packets,
                      |         | and multicast packets) received. Also described in IETF RFC 2819 MIB etherStatsPkts
                      | RxStatsBroadcastPkts
                      | Type    | uint32
                      | Comment | The total number of good packets received that were directed to the
                      |         | broadcast address. Also described in IETF RFC 2819 MIB etherStatsBroadcastPkts
                      | RxStatsMulticastPkts
                      | Type    | uint32
                      | Comment | The total number of good packets received that were directed to a
                      |         | multicast address. Also described in IETF RFC 2819 MIB etherStatsMulticastPkts.
                      | RxStatsCrcAlignErrors
                      | Type    | uint32
                      | Comment | The total number of packets received that had a length of between 64
                      |         | and 1518 octets that had either a bad Frame Check Sequence (FCS) with
                      |         | an integral number of octets (FCS Error) or a bad FCS with a non-integral
                      |         | number of octets (Alignment Error). Also described in IETF RFC 2819
                      |         | MIB etherStatsCRCAlignErrors
                      | RxStatsUndersizePkts
                      | Type    | uint32
                      | Comment | The total number of packets received that were less than 64 octets long
                      |         | (excluding framing bits, but including FCS octets) and were otherwise well
                      |         | formed. Also described in IETF RFC 2819 MIB etherStatsUndersizePkts.
                      | RxStatsOversizePkts
                      | Type    | uint32
                      | Comment | The total number of packets received that were longer than 1518 octets
                      |         | (excluding framing bits, but including FCS octets) and were otherwise well
                      |         | formed. Also described in IETF RFC 2819 MIB etherStatsOversizePkts
                      | RxStatsFragments
                      | Type    | uint32
                      | Comment | The total number of packets received that were less than 64 octets in
                      |         | length (excluding framing bits but including FCS octets) and had either a
                      |         | bad Frame Check Sequence (FCS) with an integral number of octets
                      |         | (FCS Error) or a bad FCS with a non-integral number of octets (Alignment
                      |         | Error). Also described in IETF RFC 2819 MIB etherStatsFragments.
                      | RxStatsJabbers
                      | Type    | uint32
                      | Comment | The total number of packets received that were longer than 1518 octets,
                      |         | and had either a bad Frame Check Sequence (FCS) with an integral
                      |         | number of octets (FCS Error) or a bad FCS with a non-integral number of
                      |         | octets (Alignment Error). Also described in IETF RFC 2819 MIB etherStatsJabbers.
                      | RxStatsCollisions
                      | Type    | uint32
                      | Comment | The best estimate of the total number of collisions on this Ethernet segment.
                      |         | Also described in IETF RFC 2819 MIB etherStatsCollisions
                      | RxStatsPkts64Octets
                      | Type    | uint32
                      | Comment | The total number of packets (including bad packets) received that were
                      |         | 64 octets in length. Also described in IETF RFC 2819 MIB etherStatsPkts64Octets
                      | RxStatsPkts65to127Octets
                      | Type    | uint32
                      | Comment | The total number of packets (including bad packets) received that were
                      |         | between 65 and 127 octets in length. Also described in IETF RFC 2819 MIB etherStatsPkts65to127Octets
                      | RxStatsPkts128to255Octets
                      | Type    | uint32
                      | Comment | The total number of packets (including bad packets) received that were
                      |         | between 128 and 255 octets in length. Also described in IETF RFC 2819
                      |         | MIB etherStatsPkts128to255Octets
                      | RxStatsPkts256to511Octets
                      | Type    | uint32
                      | Comment | The total number of packets (including bad packets) received that were
                      |         | between 256 and 511 octets in length. Also described in IETF RFC 2819
                      |         | MIB etherStatsPkts256to511Octets
                      | RxStatsPkts512to1023Octets
                      | Type    | uint32
                      | Comment | The total number of packets (including bad packets) received that were
                      |         | between 512 and 1023 octets in length. Also described in IETF RFC 2819
                      |         | MIB etherStatsPkts512to1023Octets
                      | RxStatsPkts1024to1518Octets
                      | Type    | uint32
                      | Comment | The total number of packets (including bad packets) received that were
                      |         | between 1024 and 1518 octets in length. Also described in IETF RFC
                      |         | 2819 MIB etherStatsPkts1024to1518Octets
                      | RxUnicastFrames
                      | Type    | uint32
                      | Comment | The number of subnetwork-unicast packets delivered to a higher-layer protocol.
                      |         | Also described in IETF RFC1213 MIB ifInUcastPkts
        Description   | Statistic counter for diagnostics.
        Available via | Eth_GeneralTypes.h
      </description>
      <comment>
        In R4.3.0, there are two SWS_Eth_91002 requirements:
        - first defining Eth_CounterType
        - second defining Eth_RxStatsType
        In R20-11, there is now:
        - SWS_Eth_91002 defining Eth_RxStatsType
        - SWS_Eth_91007 defining Eth_CounterType
        Eth_CounterType and Eth_RxStatsType are both implemented.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_190</srcid><srcstatus/><internalId>507</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_EthGeneralTypes</srcid><srcstatus/><internalId>599</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>82</internalId></specobject>

    <specobject>
      <id>Base.SWS_Eth_91007</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Eth_CounterType
        Kind          | Structure
        Elements      | DropPktBufOverrun
                      | Type    | uint32
                      | Comment | dropped packets due to buffer overrun
                      | DropPktCrc
                      | Type    | uint32
                      | Comment | dropped packets due to CRC errors
                      | UndersizePkt
                      | Type    | uint32
                      | Comment | number of undersize packets which were less than 64 octets long
                      |         | (excluding framing bits, but including FCS octets) and were otherwise
                      |         | well formed. (see IETF RFC 1757)
                      | OversizePkt
                      | Type    | uint32
                      | Comment | number of oversize packets which are longer than 1518 octets (excluding
                      |         | framing bits, but including FCS octets) and were otherwise well formed.
                      |         | (see IETF RFC 1757)
                      | AlgnmtErr
                      | Type    | uint32
                      | Comment | number of alignment errors, i.e. packets which are received and are not
                      |         | an integral number of octets in length and do not pass the CRC.
                      | SqeTestErr
                      | Type    | uint32
                      | Comment | SQE test error according to IETF RFC1643 dot3StatsSQETestErrors
                      | DiscInbdPkt
                      | Type    | uint32
                      | Comment | The number of inbound packets which were chosen to be discarded even
                      |         | though no errors had been detected to prevent their being deliverable to a
                      |         | higher-layer protocol. One possible reason for discarding such a packet
                      |         | could be to free up buffer space. (see IETF RFC 2233 ifInDiscards)
                      | ErrInbdPkt
                      | Type    | uint32
                      | Comment | total number of erroneous inbound packets
                      | DiscOtbdPkt
                      | Type    | uint32
                      | Comment | The number of outbound packets which were chosen to be discarded
                      |         | even though no errors had been detected to prevent their being
                      |         | transmitted. One possible reason for discarding such a packet could be to
                      |         | free up buffer space. (see IETF RFC 2233 ifOutDiscards)
                      | ErrOtbdPkt
                      | Type    | uint32
                      | Comment | total number of erroneous outbound packets
                      | SnglCollPkt
                      | Type    | uint32
                      | Comment | Single collision frames: A count of successfully transmitted frames on a
                      |         | particular interface for which transmission is inhibited by exactly one
                      |         | collision. (see IETF RFC1643 dot3StatsSingleCollisionFrames)
                      | MultCollPkt
                      | Type    | uint32
                      | Comment | Multiple collision frames: A count of successfully transmitted frames on a
                      |         | particular interface for which transmission is inhibited by more than one
                      |         | collision. (see IETF RFC1643 dot3StatsMultipleCollisionFrames)
                      | DfrdPkt
                      | Type    | uint32
                      | Comment | Number of deferred transmission: A count of frames for which the first
                      |         | transmission attempt on a particular interface is delayed because the
                      |         | medium is busy. (see IETF RFC1643 dot3StatsDeferredTransmissions)
                      | LatCollPkt
                      | Type    | uint32
                      | Comment | Number of late collisions: The number of times that a collision is detected
                      |         | on a particular interface later than 512 bit-times into the transmission of a
                      |         | packet. (see IETF RFC1643 dot3StatsLateCollisions)
                      | HwDepCtr0
                      | Type    | uint32
                      | Comment | hardware dependent counter value
                      | HwDepCtr1
                      | Type    | uint32
                      | Comment | hardware dependent counter value
                      | HwDepCtr2
                      | Type    | uint32
                      | Comment | hardware dependent counter value
                      | HwDepCtr3
                      | Type    | uint32
                      | Comment | hardware dependent counter value
        Description   | Statistic counter for diagnostics.
        Available via | Eth_GeneralTypes.h
      </description>
      <comment>
        The R4.0.3 requirement had a different ID (SWS_Eth_91002) which was
        actually a duplicate of the requirement defining Eth_RxStatsType.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_164</srcid><srcstatus/><internalId>506</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_EthGeneralTypes</srcid><srcstatus/><internalId>599</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>83</internalId></specobject>

    <specobject>
      <id>Base.SWS_Eth_91003</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Eth_TxStatsType
        Kind          | Structure
        Elements      | TxNumberOfOctets
                      | Type    | uint32
                      | Comment | The total number of octets transmitted out of the interface, including
                      |         | framing characters. Also described in IETF RFC1213 MIB ifOutOctets.
                      | TxNUcastPkts
                      | Type    | uint32
                      | Comment | The total number of packets that higher-level protocols requested be
                      |         | transmitted to a non-unicast (i.e., a subnetwork-broadcast or subnetwork-
                      |         | multicast) address, including those that were discarded or not sent. Also
                      |         | described in IETF RFC1213 MIB ifOutNUcastPkts
                      | TxUniCastPkts
                      | Type    | uint32
                      | Comment | The total number of packets that higher-level protocols requested be
                      |         | transmitted to a subnetwork-unicast address, including those that were
                      |         | discarded or not sent. Also described in IETF RFC1213 MIB ifOutUcastPkts.
        Description   | Statistic counter for diagnostics.
        Available via | Eth_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_223</srcid><srcstatus/><internalId>508</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_EthGeneralTypes</srcid><srcstatus/><internalId>599</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>84</internalId></specobject>

    <specobject>
      <id>Base.SWS_Eth_91004</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Eth_TxErrorCounterValuesType
        Kind          | Structure
        Elements      | TxDroppedNoErrorPkts
                      | Type    | uint32
                      | Comment | The number of outbound packets which were chosen to be discarded
                      |         | even though no errors had been detected to prevent their being
                      |         | transmitted. One possible reason for discarding such a packet could be to
                      |         | free up buffer space. Also described in IETF RFC1213 MIB ifOutDiscards
                      | TxDroppedErrorPkts
                      | Type    | uint32
                      | Comment | transmitted because of errors. Also described in IETF RFC1213 MIB ifOutErrors
                      | TxDeferredTrans
                      | Type    | uint32
                      | Comment | A count of frames for which the first transmission attempt on a particular
                      |         | interface is delayed because the medium is busy. The count represented
                      |         | by an instance of this object does not include frames involved in
                      |         | collisions. Also described in IETF RFC1643 MIB dot3StatsDeferredTransmissions
                      | TxSingleCollision
                      | Type    | uint32
                      | Comment | A count of successfully transmitted frames on a particular interface for
                      |         | which transmission is inhibited by exactly one collision. A frame that is
                      |         | counted by an instance of this object is also counted by the
                      |         | corresponding instance of either the TxUniCastPkts and TxNUcastPkts
                      |         | and is not counted by the corresponding instance of the TxMultiple
                      |         | Collision object. Also described in IETF RFC1643 MIB dot3StatsSingleCollisionFrames
                      | TxMultipleCollision
                      | Type    | uint32
                      | Comment | A count of successfully transmitted frames on a particular interface for
                      |         | which transmission is inhibited by more than one collision. A frame that is
                      |         | counted by an instance of this object is also counted by the
                      |         | corresponding instance of either the TxUniCastPkts and TxNUcastPkts
                      |         | and is not counted by the corresponding instance of the TxSingleCollision
                      |         | object. Also described in IETF RFC1643 MIB dot3StatsMultipleCollisionFrames.
                      | TxLateCollision
                      | Type    | uint32
                      | Comment | The number of times that a collision is detected on a particular interface
                      |         | later than 512 bit-times into the transmission of a packet. Five hundred
                      |         | and twelve bit-times corresponds to 51.2 microseconds on a 10 Mbit/s
                      |         | system. A (late) collision included in a count represented by an instance
                      |         | of this object is also considered as a (generic) collision for purposes of
                      |         | other collision-related statistics. Also described in IETF RFC1643 MIB dot3StatsLateCollisions
                      | TxExcessiveCollison
                      | Type    | uint32
                      | Comment | A count of frames for which transmission on a particular interface fails
                      |         | due to excessive collisions. Also described in IETF RFC1643 MIB
                      |         | dot3StatsExcessiveCollisions
        Description   | Statistic counters for diagnostics.
        Available via | Eth_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_234</srcid><srcstatus/><internalId>509</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_EthGeneralTypes</srcid><srcstatus/><internalId>599</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>85</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>Base.ASR430.SWS_Eth_00026</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetDriver.pdf, R4.3.0</source>
      <version>1</version>
      <description>
        Module           | Imported Type
        ComStack_Types   | BufReq_ReturnType
        Dem              | Dem_EventIdType
                         | Dem_EventStatusType
        Eth_GeneralTypes | Eth_BufIdxType
                         | Eth_ConfigType
                         | Eth_CounterType
                         | Eth_DataType
                         | Eth_FilterActionType
                         | Eth_FrameType
                         | Eth_ModeType
                         | Eth_RateRatioType
                         | Eth_RxStatsType
                         | Eth_RxStatusType
                         | Eth_TimeIntDiffType
                         | Eth_TimeStampQualType
                         | Eth_TimeStampType
                         | Eth_TxErrorCounterValuesType
                         | Eth_TxStatsType
        Std_Types        | Std_ReturnType
                         | Std_VersionInfoType
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Base.EB_Ref.SWS_Eth_00026.ImplementedTypes</srcid><srcstatus/><internalId>188</internalId></linkedfrom><linkedfrom><srcid>Base.EB_Ref.SWS_Eth_00026.NotImplementedTypes</srcid><srcstatus/><internalId>189</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>86</internalId></specobject>

    <specobject>
      <id>Base.ASR430.SWS_Eth_00149</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetDriver.pdf, R4.3.0</source>
      <version>1</version>
      <description>
        The types specified in SWS_EthernetDriver shall be declared in Eth_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_5</srcid><srcstatus/><internalId>494</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>87</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>Base.SWS_EthIf_91010</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_EthernetInterface.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | EthIf_MeasurementIdxType
        Kind          | Type
        Derived from  | uint8
        Range         | ETHIF_MEAS_DROP_CRTLIDX | 0x01      | Measurement index of dropped datagrams caused by invalid CrtlIdx/VLAN
                      | ETHIF_MEAS_RESERVED_1   | 0x02-0x7F | reserved by AUTOSAR
                      | ETHIF_MEAS_RESERVED_2   | 0x80-0xEF | Vendor specific range
                      | ETHIF_MEAS_RESERVED_3   | 0xF0-0xFE | reserved by AUTOSAR (future use)
                      | ETHIF_MEAS_ALL          | 0xFF      | represents all measurement indexes
        Description   | Index to select specific measurement data
        Available via | EthIf.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR R4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Base.EB_Ref.SWS_EthIf_91010.AvailableVia</srcid><srcstatus/><internalId>185</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>88</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>Base.SWS_Fr_00117</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Fr_GeneralTypes.h shall contain all types and constants that are shared among the
        AUTOSAR FlexRay modules Fr, FrIf and FrTrcv.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Fr_GeneralTypes.h_7</srcid><srcstatus/><internalId>518</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>89</internalId></specobject>

    <specobject>
      <id>Base.SWS_Fr_00102</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        None of the Fr module's header files shall define global variables. (BSW00308)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Fr_GeneralTypes.h_7</srcid><srcstatus/><internalId>518</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>90</internalId></specobject>

    <specobject>
      <id>Base.SWS_Fr_00499</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        The content of Fr_GeneralTypes.h shall be protected by a FR_GENERAL_TYPES define.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Fr_GeneralTypes.h_2</srcid><srcstatus/><internalId>517</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>91</internalId></specobject>

    <specobject>
      <id>Base.SWS_Fr_00500</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        If different FlexRay drivers are used, only one instance of this file has to be
        included in the source tree. For implementation all Fr_GeneralTypes.h related types
        in the documents mentioned before shall be considered.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Fr_GeneralTypes.h_7</srcid><srcstatus/><internalId>518</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>92</internalId></specobject>

    <specobject>
      <id>Base.SWS_Fr_00077</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        All types whether they are specified or implementation dependant shall follow the
        naming scheme Fr_&lt;name&gt;Type, where the first letter of each word in &lt;name&gt;
        is written upper case and the remainder of the word is written lower case. (BSW00305)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Fr_GeneralTypes.h_402</srcid><srcstatus/><internalId>520</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>93</internalId></specobject>

    <specobject>
      <id>Base.SWS_Fr_00505</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Fr_POCStateType
        Kind          | Enumeration
        Range         | FR_POCSTATE_CONFIG         | 0x00 | Represents literal CONFIG of formal type definition T_POCState.
                      | FR_POCSTATE_DEFAULT_CONFIG | 0x01 | Represents literal DEFAULT_CONFIG of formal type definition T_POCState.
                      | FR_POCSTATE_HALT           | 0x02 | Represents literal HALT of formal type definition T_POCState.
                      | FR_POCSTATE_NORMAL_ACTIVE  | 0x03 | Represents literal NORMAL_ACTIVE of formal type definition T_POCState.
                      | FR_POCSTATE_NORMAL_PASSIVE | 0x04 | Represents literal NORMAL_PASSIVE of formal type definition T_POCState.
                      | FR_POCSTATE_READY          | 0x05 | Represents literal READY of formal type definition T_POCState.
                      | FR_POCSTATE_STARTUP        | 0x06 | Represents literal STARTUP of formal type definition T_POCState.
                      | FR_POCSTATE_WAKEUP         | 0x07 | Represents literal WAKEUP of formal type definition T_POCState.
        Description   | This formal definition refers to the description of type T_POCState in chapter 2.2.1.3 POC status of [12].
        Available via | Fr_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Fr_GeneralTypes.h_405</srcid><srcstatus/><internalId>521</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_FlexRayEnums</srcid><srcstatus/><internalId>607</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>94</internalId></specobject>

    <specobject>
      <id>Base.SWS_Fr_00506</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name        | Fr_SlotModeType
        Kind        | Enumeration
        Range       | FR_SLOTMODE_KEYSLOT     | 0x00 | Represents literal KEYSLOT of formal type definition T_SlotMode.
                    | FR_SLOTMODE_ALL_PENDING | 0x01 | Represents literal ALL_PENDING of formal type definition T_SlotMode.
                    | FR_SLOTMODE_ALL         | 0x02 | Represents literal ALL of formal type definition T_SlotMode.
        Description | This formal definition refers to the description of type T_SlotMode in chapter 2.2.1.3 POC status of [12].
        Available   | Fr_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Fr_GeneralTypes.h_419</srcid><srcstatus/><internalId>522</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_FlexRayEnums</srcid><srcstatus/><internalId>607</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>95</internalId></specobject>

    <specobject>
      <id>Base.SWS_Fr_00507</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Fr_ErrorModeType
        Kind          | Enumeration
        Range         | FR_ERRORMODE_ACTIVE    | 0x00 | Represents literal ACTIVE of formal type definition T_ErrorMode.
                      | FR_ERRORMODE_PASSIVE   | 0x01 | Represents literal PASSIVE of formal type definition T_ErrorMode.
                      | FR_ERRORMODE_COMM_HALT | 0x02 | Represents literal COMM_HALT of formal type definition T_ErrorMode.
        Description   | This formal definition refers to the description of type T_ErrorMode in chapter 2.2.1.3 POC status of [12].
        Available via | Fr_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Fr_GeneralTypes.h_428</srcid><srcstatus/><internalId>523</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_FlexRayEnums</srcid><srcstatus/><internalId>607</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>96</internalId></specobject>

    <specobject>
      <id>Base.SWS_Fr_00508</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Fr_WakeupStatusType
        Kind          | Enumeration
        Range         | FR_WAKEUP_UNDEFINED         | 0x00 | Represents literal UNDEFINED of formal type definition T_WakeupStatus.
                      | FR_WAKEUP_RECEIVED_HEADER   | 0x01 | Represents literal RECEIVED_HEADER of formal type definition T_WakeupStatus.
                      | FR_WAKEUP_RECEIVED_WUP      | 0x02 | Represents literal RECEIVED_WUP of formal type definition T_WakeupStatus.
                      | FR_WAKEUP_COLLISION_HEADER  | 0x03 | Represents literal COLLISION_HEADER of formal type definition T_WakeupStatus.
                      | FR_WAKEUP_COLLISION_WUP     | 0x04 | Represents literal COLLISION_WUP of formal type definition T_WakeupStatus.
                      | FR_WAKEUP_COLLISION_UNKNOWN | 0x05 | Represents literal COLLISION_UNKNOWN of formal type definition T_WakeupStatus.
                      | FR_WAKEUP_TRANSMITTED       | 0x06 | Represents literal TRANSMITTED of formal type definition T_WakeupStatus.
        Description   | This formal definition refers to the description of type T_WakeupStatus in chapter 2.2.1.3 POC status of [12].
        Available via | Fr_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Fr_GeneralTypes.h_437</srcid><srcstatus/><internalId>524</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_FlexRayEnums</srcid><srcstatus/><internalId>607</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>97</internalId></specobject>

    <specobject>
      <id>Base.SWS_Fr_00509</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Fr_StartupStateType
        Kind          | Enumeration
        Range         | FR_STARTUP_UNDEFINED                      | 0x00 | Represents literal UNDEFINED of formal type definition T_StartupState.
                      | FR_STARTUP_COLDSTART_LISTEN               | 0x01 | Represents literal COLDSTART_LISTEN of formal type definition T_StartupState.
                      | FR_STARTUP_INTEGRATION_COLDSTART_CHECK    | 0x02 | Represents literal INTEGRATION_COLDSTART_CHECK of formal type definition T_StartupState.
                      | FR_STARTUP_COLDSTART_JOIN                 | 0x03 | Represents literal COLDSTART_JOIN of formal type definition T_StartupState.
                      | FR_STARTUP_COLDSTART_COLLISION_RESOLUTION | 0x04 | Represents literal COLDSTART_COLLISION_RESOLUTION of formal type definition T_StartupState.
                      | FR_STARTUP_COLDSTART_CONSISTENCY_CHECK    | 0x05 | Represents literal COLDSTART_CONSISTENCY_CHECK of formal type definition T_StartupState.
                      | FR_STARTUP_INTEGRATION_LISTEN             | 0x06 | Represents literal INTEGRATION_LISTEN of formal type definition T_StartupState.
                      | FR_STARTUP_INITIALIZE_SCHEDULE            | 0x07 | Represents literal INITIALIZE_SCHEDULE of formal type definition T_StartupState.
                      | FR_STARTUP_INTEGRATION_CONSISTENCY_CHECK  | 0x08 | Represents literal INTEGRATION_CONSISTENCY_CHECK of formal type definition T_StartupState.
                      | FR_STARTUP_COLDSTART_GAP                  | 0x09 | Represents literal COLDSTART_GAP of formal type definition T_StartupState.
                      | FR_STARTUP_EXTERNAL_STARTUP               | 0x0a | Represents literal EXTERNAL_STARTUP of formal type definition T_StartupState.
        Description   | This formal definition refers to the description of type T_StartupState in chapter 2.2.1.3 POC status of [12].
        Available via | Fr_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Fr_GeneralTypes.h_450</srcid><srcstatus/><internalId>525</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_FlexRayEnums</srcid><srcstatus/><internalId>607</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>98</internalId></specobject>

    <specobject>
      <id>Base.SWS_Fr_00510</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Fr_POCStatusType
        Kind          | Structure
        Elements      | CHIHaltRequest
                      | Type    | boolean
                      | Comment | --
                      | ColdstartNoise
                      | Type    | boolean
                      | Comment | --
                      | ErrorMode
                      | Type    | Fr_ErrorModeType
                      | Comment | --
                      | Freeze
                      | Type    | boolean
                      | Comment | --
                      | SlotMode
                      | Type    | Fr_SlotModeType
                      | Comment | --
                      | StartupState
                      | Type    | Fr_StartupStateType
                      | Comment | --
                      | State
                      | Type    | Fr_POCStateType
                      | Comment | --
                      | WakeupStatus
                      | Type    | Fr_WakeupStatusType
                      | Comment | --
                      | CHIReadyRequest
                      | Type    | boolean
                      | Comment | --
        Description   | This formal definition refers to the description of type T_POCStatus in chapter 2.2.1.3 POC status of [12].
        Available via | Fr_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Fr_GeneralTypes.h_468</srcid><srcstatus/><internalId>526</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>99</internalId></specobject>

    <specobject>
      <id>Base.SWS_Fr_00511</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Fr_TxLPduStatusType
        Kind          | Enumeration
        Range         | FR_TRANSMITTED          | 0x00 | LPdu has been transmitted
                      | FR_TRANSMITTED_CONFLICT | 0x01 | A transmission conflict has occurred.
                      | FR_NOT_TRANSMITTED      | 0x02 | LPdu has not been transmitted
        Description   | These values are used to determine whether a LPdu has been transmitted or not.
        Available via | Fr_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR R4.3.0</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Fr_GeneralTypes.h_483</srcid><srcstatus/><internalId>527</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_FlexRayEnums</srcid><srcstatus/><internalId>607</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>100</internalId></specobject>

    <specobject>
      <id>Base.SWS_Fr_00512</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Fr_RxLPduStatusType
        Kind          | Enumeration
        Range         | FR_RECEIVED                     | 0x00 | LPdu has been received
                      | FR_NOT_RECEIVED                 | 0x01 | LPdu has not been received
                      | FR_RECEIVED_MORE_DATA_AVAILABLE | 0x02 | LPdu has been received. More instances of this LPdu are available (FIFO usage).
        Description   | These values are used to determine if a LPdu has been received or not.
        Available via | Fr_GeneralTypes.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Fr_GeneralTypes.h_492</srcid><srcstatus/><internalId>528</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_FlexRayEnums</srcid><srcstatus/><internalId>607</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>101</internalId></specobject>

    <specobject>
      <id>Base.SWS_Fr_00514</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Fr_ChannelType
        Kind          | Enumeration
        Range         | FR_CHANNEL_A  | 0x01 | Refers to channel A of a CC.
                      | FR_CHANNEL_B  | 0x02 | Refers to channel B of a CC.
                      | FR_CHANNEL_AB | 0x03 | Refers to both channels (A and B) of a CC.
        Description   | The values are used to reference channels on a CC.
        Variation     | --
        Available via | Fr_GeneralTypes.h
      </description>
      <comment>
        The values described above are used if FrDriverAutosarVersion is set to ASR_44.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR R4.4.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Fr_GeneralTypes.h_502</srcid><srcstatus/><internalId>529</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_FlexRayEnums</srcid><srcstatus/><internalId>607</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_Fr_Channel_Values</srcid><srcstatus/><internalId>615</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>102</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>Base.ASR403.FR455</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayDriver.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        The integrator of the FlexRay modules shall provide the file Fr_GeneralTypes.h.
      </description>
      <comment>Removed in R4.1.3 but has no functional impact</comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Fr_GeneralTypes.h_7</srcid><srcstatus/><internalId>518</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>103</internalId></specobject>

    <specobject>
      <id>Base.ASR403.FR657</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayDriver.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        The macros listed in this chapter shall be defined in Fr_GeneralTypes.h.
      </description>
      <comment>Valid up to R4.3.1</comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Fr_GeneralTypes.h_7</srcid><srcstatus/><internalId>518</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>104</internalId></specobject>

    <specobject>
      <id>Base.ASR403.FR110</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayDriver.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        The content of Fr_GeneralTypes.h consists of types specified within [7],[8] and the
        following type specifications within this document except Fr_ConfigType. (BSW00305)
      </description>
      <comment>Valid up to R4.3.1</comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Fr_GeneralTypes.h_402</srcid><srcstatus/><internalId>520</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>105</internalId></specobject>

    <specobject>
      <id>Base.ASR403.FR599</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayDriver.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        There shall be a preprocessor macro with name FR_SLOTMODE_SINGLE that maps to value
        FR_SLOTMODE_KEYSLOT in file Fr_GeneralTypes.h.
      </description>
      <comment>Valid up to R4.3.1</comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Fr_GeneralTypes.h_16</srcid><srcstatus/><internalId>519</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>106</internalId></specobject>

    <specobject>
      <id>Base.ASR403.FR514</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_FlexRayDriver.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        Name:        | Fr_ChannelType
        Type:        | Enumeration
        Range:       | FR_CHANNEL_A (=0) | Refers to channel A of a CC.
                     | FR_CHANNEL_B      | Refers to channel B of a CC.
                     | FR_CHANNEL_AB     | Refers to both channels (A and B) of a CC.
        Description: | The values are used to reference channels on a CC.
      </description>
      <comment>
        The values described above are used if FrDriverAutosarVersion is set to ASR_40.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Fr_GeneralTypes.h_502</srcid><srcstatus/><internalId>529</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_Fr_Channel_Values</srcid><srcstatus/><internalId>615</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>107</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>Base.SWS_Lin_00230</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LINDriver.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Lin_FrameResponseType
        Kind          | Enumeration
        Range         | LIN_FRAMERESPONSE_TX     | -- | Response is generated from this node
                      | LIN_FRAMERESPONSE_RX     | -- | Response is generated from another node and is relevant for this node.
                      | LIN_FRAMERESPONSE_IGNORE | -- | Response is generated from another node and is irrelevant for this node
        Description   | This type is used to specify whether the frame processor is required to transmit the response part of the LIN frame.
        Available via | Lin_GeneralTypes.h
      </description>
      <comment>
        Note: For LIN master nodes, the mapping to the previous definition is as follows:
        LIN_MASTER_RESPONSE --- LIN_FRAMERESPONSE_TX
        LIN_SLAVE_RESPONSE  --- LIN_FRAMERESPONSE_RX
        LIN_SLAVE_TO_SLAVE  --- LIN_FRAMERESPONSE_IGNORE
      </comment>
      <releases>
         <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
         <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Base.EB_Ref.SWS_Lin_00230.AllValuesForLinIfLinDriverAPI</srcid><srcstatus/><internalId>182</internalId></linkedfrom></coveredby></needscov>
         <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_LinGeneralTypes</srcid><srcstatus/><internalId>604</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>108</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>Base.ASR403.LIN230</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_LINDriver.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        Name:        | Lin_FrameResponseType
        Type:        | Enumeration
        Range:       | LIN_MASTER_RESPONSE | Response is generated from this (master) node
                     | LIN_SLAVE_RESPONSE  | Response is generated from a remote slave node
                     | LIN_SLAVE_TO_SLAVE  | Response is generated from one slave to another slave,
                     |                     | for the master the response will be anonymous, it does not
                     |                     | have to receive the response.
        Description: | This type is used to specify whether the frame processor is required to transmit the response part of the LIN frame.
      </description>
      <releases>
         <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
         <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Base.EB_Ref.SWS_Lin_00230.AllValuesForLinIfLinDriverAPI</srcid><srcstatus/><internalId>182</internalId></linkedfrom></coveredby></needscov>
         <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_LinGeneralTypes</srcid><srcstatus/><internalId>604</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>109</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>Base.SWS_Platform_00002</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        It is not allowed to add any extension to this file. Any extension invalidates the AUTOSAR conformity.
      </description>
      <comment>
        Refers to "Platform_Types.h".
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_16</srcid><srcstatus/><internalId>433</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>110</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_00013</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | uint8
        Kind          | Type
        Range         | 0..255 | – | 0x00..0xFF
        Description   | This standard AUTOSAR type shall be of 8 bit unsigned.
        Variation     | –
        Available via | Platform_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_344</srcid><srcstatus/><internalId>454</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>111</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_00014</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | uint16
        Kind          | Type
        Range         | 0..65535 | – | 0x0000..0xFFFF
        Description   | This standard AUTOSAR type shall be of 16 bit unsigned.
        Variation     | –
        Available via | Platform_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_344</srcid><srcstatus/><internalId>454</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>112</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_00015</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | uint32
        Kind          | Type
        Range         | 0..4294967295 | – | 0x00000000..0xFFFFFFFF
        Description   | This standard AUTOSAR type shall be 32 bit unsigned.
        Variation     | –
        Available via | Platform_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_344</srcid><srcstatus/><internalId>454</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>113</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_00016</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | sint8
        Kind          | Type
        Range         | -128..+127 | – | 0x80..0x7F
        Description   | This standard AUTOSAR type shall be of 8 bit signed.
        Variation     | –
        Available via | Platform_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_344</srcid><srcstatus/><internalId>454</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>114</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_00017</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | sint16
        Kind          | Type
        Range         | -32768..+32767 | – | 0x8000..0x7FFF
        Description   | This standard AUTOSAR type shall be of 16 bit signed.
        Variation     | –
        Available via | Platform_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_344</srcid><srcstatus/><internalId>454</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>115</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_00018</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | sint32
        Kind          | Type
        Range         | -2147483648..+2147483647 | – | 0x80000000..0x7FFFFFFF
        Description   | This standard AUTOSAR type shall be 32 bit signed.
        Variation     | –
        Available via | Platform_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_344</srcid><srcstatus/><internalId>454</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>116</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_00020</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | uint8_least
        Kind          | Type
        Derived from  | uint
        Range         | At least 0..255 | – | 0x00..0xFF
        Description   | This optimized AUTOSAR type shall be at least 8 bit unsigned.
        Available via | Platform_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_344</srcid><srcstatus/><internalId>454</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>117</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_00021</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | uint16_least
        Kind          | Type
        Derived from  | uint
        Range         | At least 0..65535 | – | 0x0000..0xFFFF
        Description   | This optimized AUTOSAR type shall be at least 16 bit unsigned.
        Available via | Platform_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_344</srcid><srcstatus/><internalId>454</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>118</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_00022</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | uint32_least
        Kind          | Type
        Derived from  | uint
        Range         | At least 0..4294967295 | – | 0x00000000..0xFFFFFFFF
        Description   | This optimized AUTOSAR type shall be at least 32 bit unsigned.
        Available via | Platform_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_344</srcid><srcstatus/><internalId>454</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>119</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_00023</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | sint8_least
        Kind          | Type
        Derived from  | sint
        Range         | At least -128..+127 | – | 0x80..0x7F
        Description   | This optimized AUTOSAR type shall be at least 8 bit signed.
        Available via | Platform_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_344</srcid><srcstatus/><internalId>454</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>120</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_00024</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | sint16_least
        Kind          | Type
        Derived from  | sint
        Range         | At least -32768..+32767 | – | 0x8000..0x7FFF
        Description   | This optimized AUTOSAR type shall be at least 16 bit signed.
        Available via | Platform_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_344</srcid><srcstatus/><internalId>454</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>121</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_00025</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | sint32_least
        Kind          | Type
        Derived from  | sint
        Range         | At least -2147483648..+2147483647 | – | 0x80000000..0x7FFFFFFF
        Description   | This optimized AUTOSAR type shall be at least 32 bit signed.
        Available via | Platform_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_344</srcid><srcstatus/><internalId>454</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>122</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_00027</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        The standard AUTOSAR type boolean shall be implemented as an unsigned integer
        with a bit length that is the shortest one natively supported by the platform (in general 8 bits).
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_344</srcid><srcstatus/><internalId>454</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>123</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_00064</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | CPU_TYPE
        Kind          | Enumeration
        Range         | CPU_TYPE_8    | – | Indicating a 8 bit processor
                      | CPU_TYPE_16   | – | Indicating a 16 bit processor
                      | CPU_TYPE_32   | – | Indicating a 32 bit processor
                      | CPU_TYPE_64   | – | Indicating a 64 bit processor
        Description   | This symbol shall be defined as #define having one of the values
                      | CPU_TYPE_8, CPU_TYPE_16, CPU_TYPE_32 or CPU_TYPE_64 according to the platform.
        Available via | Platform_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_MemCpy</srcid><srcstatus/><internalId>616</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemCpyNoCheck</srcid><srcstatus/><internalId>617</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemCmpGood</srcid><srcstatus/><internalId>618</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemCmpNoCheckGood</srcid><srcstatus/><internalId>619</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemCmpBad</srcid><srcstatus/><internalId>620</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemCmpNoCheckBad</srcid><srcstatus/><internalId>621</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemSet</srcid><srcstatus/><internalId>622</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemSetNoCheck</srcid><srcstatus/><internalId>623</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemBZero</srcid><srcstatus/><internalId>624</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemBZeroNoCheck</srcid><srcstatus/><internalId>625</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemCmpSGood</srcid><srcstatus/><internalId>628</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemCmpSNoCheckGood</srcid><srcstatus/><internalId>629</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemCmpSBad</srcid><srcstatus/><internalId>630</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemCmpSNoCheckBad</srcid><srcstatus/><internalId>631</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemSetS</srcid><srcstatus/><internalId>632</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemSetSNoCheck</srcid><srcstatus/><internalId>633</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemBZeroS</srcid><srcstatus/><internalId>634</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemBZeroSNoCheck</srcid><srcstatus/><internalId>635</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_121</srcid><srcstatus/><internalId>439</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_128</srcid><srcstatus/><internalId>440</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_135</srcid><srcstatus/><internalId>441</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_138</srcid><srcstatus/><internalId>442</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_188</srcid><srcstatus/><internalId>443</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations><ruleid>WRN.swuts.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>124</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_00038</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | CPU_BIT_ORDER
        Kind          | Enumeration
        Range         | MSB_FIRST | – | The most significant bit is the first bit of the bit sequence.
                      | LSB_FIRST | – | The least significant bit is the first bit of the bit sequence.
        Description   | This symbol shall be defined as #define having one of the values MSB_FIRST or LSB_FIRST
                      | according to the platform.
        Available via | Platform_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_191</srcid><srcstatus/><internalId>444</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>125</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_00039</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | CPU_BYTE_ORDER
        Kind          | Enumeration
        Range         | HIGH_BYTE_FIRST | – | Within uint16, the high byte is located before the low byte.
                      | LOW_BYTE_FIRST  | – | Within uint16, the low byte is located before the high byte.
        Description   | This symbol shall be defined as #define having one of the values
                      | HIGH_BYTE_FIRST or LOW_BYTE_FIRST according to the platform.
        Available via | Platform_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_214</srcid><srcstatus/><internalId>445</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>126</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_00041</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | float32
        Kind          | Type
        Range         | -3.4028235e+38 .. +3.4028235e+38 | – | –
        Description   | This standard AUTOSAR type shall follow the 32-bit binary interchange format according to IEEE
                      | 754-2008 with encoding parameters specified in chapter 3.6, table 3.5, column "binary32".
        Variation     | –
        Available via | Platform_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_344</srcid><srcstatus/><internalId>454</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>127</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_00042</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | float64
        Kind          | Type
        Range         | -1.7976931348623157e+308 .. +1.7976931348623157e+308 | – | –
        Description   | This standard AUTOSAR type shall follow the 64-bit binary interchange format according to IEEE
                      | 754-2008 with encoding parameters specified in chapter 3.6, table 3.5, column "binary64".
        Available via | Platform_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_344</srcid><srcstatus/><internalId>454</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>128</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_00043</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        For each platform the appropriate bit order on register level
        shall be indicated in the platform types header file using the symbol CPU_BIT_ORDER.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_191</srcid><srcstatus/><internalId>444</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>129</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_00044</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        For each platform the register width of the CPU used shall be indicated by defining CPU_TYPE.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_188</srcid><srcstatus/><internalId>443</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>130</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_00045</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        According to the register width of the CPU used,
        CPU_TYPE shall be assigned to one of the symbols CPU_TYPE_8, CPU_TYPE_16, CPU_TYPE_32 or CPU_TYPE_64.
      </description>
      <comment>
        R4.0.3's requirement (PLATFORM045) does not define the CPU_TYPE_64 value, while R4.3.0's and R20-11's does.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_188</srcid><srcstatus/><internalId>443</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>131</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_00046</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        For each platform the appropriate byte order on memory
        level shall be indicated in the platform types header file using the symbol CPU_BYTE_ORDER.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_214</srcid><srcstatus/><internalId>445</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>132</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_00048</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        In case of Big Endian bit ordering CPU_BIT_ORDER shall be assigned to MSB_FIRST in the platform types header file.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_191</srcid><srcstatus/><internalId>444</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>133</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_00049</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        In case of Little Endian bit ordering CPU_BIT_ORDER shall be assigned to LSB_FIRST in the platform types header file.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_191</srcid><srcstatus/><internalId>444</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>134</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_00050</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        In case of Big Endian byte ordering CPU_BYTE_ORDER shall be assigned to HIGH_BYTE_FIRST in the platform types header file.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_214</srcid><srcstatus/><internalId>445</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>135</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_00051</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        In case of Little Endian byte ordering CPU_BYTE_ORDER shall be assigned to LOW_BYTE_FIRST in the platform types header file.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_214</srcid><srcstatus/><internalId>445</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>136</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_00060</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        The boolean type shall always be mapped to a platform
        specific type where pointers can be applied to in order to enable a passing of parameters via API.
        There are specific BIT types of some HW platforms which are very efficient
        but where no pointers can point to.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_344</srcid><srcstatus/><internalId>454</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>137</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_00054</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        In case of in-built compiler support of the symbols, redefinitions shall be avoided using a conditional check.
      </description>
      <comment>
        The requirement refers to the symbols from SWS_Platform_00056.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_94</srcid><srcstatus/><internalId>434</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_101</srcid><srcstatus/><internalId>436</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_110</srcid><srcstatus/><internalId>438</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>138</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_00056</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | TRUE_FALSE
        Kind          | Enumeration
        Range         | FALSE | 0x00 | –
                      | TRUE  | 0x01 | –
        Description   | The symbols TRUE and FALSE shall be defined as follows:
                      | #ifndef TRUE
                      | #define TRUE 1
                      | #endif
                      |
                      | #ifndef FALSE
                      | #define FALSE 0
                      | #endif
        Available via | Platform_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_97</srcid><srcstatus/><internalId>435</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_104</srcid><srcstatus/><internalId>437</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>139</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_00066</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | uint64
        Kind          | Type
        Range         | 0..18446744073709551615 | – | 0x0000000000000000..0xFFFFFFFFFFFFFFFF
        Description   | This standard AUTOSAR type shall be 64 bit unsigned.
        Variation     | –
        Available via | Platform_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_344</srcid><srcstatus/><internalId>454</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>140</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_00067</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | sint64
        Kind          | Type
        Range         | -9223372036854775808 .. 9223372036854775807 | – | 0x8000000000000000 .. 0x7FFFFFFFFFFFFFFF
        Description   | This standard AUTOSAR type shall be 64 bit signed.
        Variation     | –
        Available via | Platform_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.1.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_344</srcid><srcstatus/><internalId>454</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>141</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_00026</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | boolean
        Kind          | Type
        Range         | FALSE | 0 | –
                      | TRUE  | 1 | –
        Description   | This standard AUTOSAR type shall only be used together with the definitions TRUE and FALSE.
        Variation     | –
        Available via | Platform_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_97</srcid><srcstatus/><internalId>435</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_104</srcid><srcstatus/><internalId>437</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>142</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_00034</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        The standard AUTOSAR type boolean shall only be used
        in conjunction with the standard symbols TRUE and FALSE.
        For value assignments of variables of type boolean no arithmetic or logical operators (+, ++, -, --, *, /, %, &lt;&lt;, &gt;&gt;, ~, &amp;) must be used.
        The only allowed forms of assignment are:
          1 boolean var = TRUE;
          2 ...
          3 var = TRUE;
          4 var = FALSE;
          5 var = (a &lt; b)  /* same for "&gt;", "&lt;=", "&gt;=" */
          6 var = (c &amp;&amp; d) /* same for "!", "||" */
          7 var = (e != f) /* same for "==" */
        The only allowed forms of comparison are:
          1 boolean var = FALSE;
          2 ...
          3 if (var == TRUE) ...
          4 if (var == FALSE) ...
          5 if (var != TRUE) ...
          6 if (var != FALSE) ...
          7 if (var) ...
          8 if (!var) ...
      </description>
      <rationale>This requirement is informational only</rationale>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>143</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_00055</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        These symbols shall only be used in conjunction with the boolean type defined in Platform_Types.h.
      </description>
      <rationale>This requirement is informational only</rationale>
      <comment>
        The requirement refers to the symbols from SWS_Platform_00056.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>144</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_91001</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | VoidPtr
        Kind          | Pointer
        Type          | void*
        Description   | This standard AUTOSAR type shall be a void pointer
                      | Note: This type shall be used for buffers that contain data returned to the caller.
        Variation     | –
        Available via | Platform_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_377</srcid><srcstatus/><internalId>456</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_VoidPtr</srcid><srcstatus/><internalId>582</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>145</internalId></specobject>

    <specobject>
      <id>Base.SWS_Platform_91002</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | ConstVoidPtr
        Kind          | Const Pointer
        Type          | const void*
        Description   | This standard AUTOSAR type shall be a void pointer to const.
                      | Note: This type shall be used for buffers that are passed to the callee.
        Variation     | –
        Available via | Platform_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_380</srcid><srcstatus/><internalId>457</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_VoidPtr</srcid><srcstatus/><internalId>582</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>146</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>Base.ASR403.PLATFORM001</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        For each platform an own platform types header file has to be provided. (BSW00353, BSW00304)
      </description>
      <comment>
        Here, the term "platform" refers to both the microcontroller type and, if applicable, the
        specific mode of the microcontroller with regard to instruction set, register size etc.
        For example, for a microcontroller that can run both 16-bit and 32-bit code (e.g. a x86
        based CPU), two different platform types header files for each of these two
        instruction sets shall be created.
      </comment>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_16</srcid><srcstatus/><internalId>433</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>147</internalId></specobject>

    <specobject>
      <id>Base.ASR403.PLATFORM003</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        The file name of the platform types header file shall be for all platforms 'Platform_Types.h'. (BSW00353, BSW00304)
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_16</srcid><srcstatus/><internalId>433</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>148</internalId></specobject>

    <specobject>
      <id>Base.ASR403.PLATFORM005</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        The optimized AUTOSAR integer data types (&lt;typename&gt;_least) shall have at least the size
        given by the type name, but the types shall be implemented in a way that the best performance
        on the specific platform is achieved. 'Best performance' is defined in this context as
        'least processor cycles for variable access as possible'.
        Example: on a TC1796, uint8_least is mapped to unsigned int (32 bit) because access to this
        type requires less processor cycles than e.g. unsigned char (8 bit).(BSW00304)
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_344</srcid><srcstatus/><internalId>454</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>149</internalId></specobject>

    <specobject>
      <id>Base.ASR403.PLATFORM057</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_PlatformTypes.pdf, R4.0.3</source>
      <version>1</version>
      <description>
        The platform type files for all platforms shall contain the following symbols:
        #define CPU_TYPE_8      8
        #define CPU_TYPE_16     16
        #define CPU_TYPE_32     32

        #define MSB_FIRST       0
        #define LSB_FIRST       1

        #define HIGH_BYTE_FIRST 0
        #define LOW_BYTE_FIRST  1
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Base.TypeDefinitions.General</srcid><srcstatus/><internalId>279</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>150</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>Base.SWS_SoAd_91010</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SocketAdaptor.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | SoAd_MeasurementIdxType
        Kind          | Type
        Derived from  | uint8
        Range         | SOAD_MEAS_DROP_TCP   | 0x01      | Measurement index of dropped PDUs caused by invalid destination TCP-Port
                      | SOAD_MEAS_DROP_UDP   | 0x02      | Measurement index of dropped PDUs caused by invalid destination UDP-Port
                      | SOAD_MEAS_RESERVED_1 | 0x03-0x7F | reserved by AUTOSAR
                      | SOAD_MEAS_RESERVED_2 | 0x80-0xEF | Vendor specific range
                      | SOAD_MEAS_RESERVED_3 | 0xF0-0xFE | reserved by AUTOSAR (future use)
                      | SOAD_MEAS_ALL        | 0xFF      | represents all measurement indexes
        Description   | Index to select specific measurement data
        Available via | SoAd.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Base.EB_Ref.SWS_SoAd_91010.AvailableVia</srcid><srcstatus/><internalId>186</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>151</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>Base.SWS_Std_00004</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_StandardTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        It is not allowed to add any project or supplier specific extension to this file.
        Any extension invalidates the AUTOSAR conformity.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Std_Types.h.m4_8</srcid><srcstatus/><internalId>531</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>152</internalId></specobject>

    <specobject>
      <id>Base.SWS_Std_00014</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_StandardTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        The standard types header file shall be protected against multiple inclusion:
        <pre>
          #ifndef STD_TYPES_H
          #define STD_TYPES_H
          ..
          /*
          * Contents of file
          */
          ..
          #endif /* STD_TYPES_H */
        </pre>
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Std_Types.h.m4_2</srcid><srcstatus/><internalId>530</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>153</internalId></specobject>

    <specobject>
      <id>Base.SWS_Std_00005</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_StandardTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Std_ReturnType
        Kind          | Type
        Derived from  | uint8
        Range         | E_OK      | 0 | see 8.2.1, SWS_Std_00006
                      | E_NOT_OK  | 1 | see 8.2.1, SWS_Std_00006
                      | 0x02-0x3F | 2 | Available to user specific errors
        Description   | This type can be used as standard API return type which is shared between the RTE
                      | and the BSW modules. It shall be defined as follows:
                      | typedef uint8 Std_ReturnType;
        Available via | Std_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Std_Types.h.m4_192</srcid><srcstatus/><internalId>540</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>154</internalId></specobject>

    <specobject>
      <id>Base.SWS_Std_00011</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_StandardTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        The Std_ReturnType shall normally be used with value  E_OK or E_NOT_OK.
        If those return values are not sufficient user specific values can be defined by using
        the 6 least specific bits. 
        For the naming of the user defined values the module prefix shall be used as requested in SRS_BSW_00441.
        Layout of the Std_ReturnType shall be as stated in the
        RTE specification. Bit 7 and Bit 8 are reserved and defined by the RTE specification.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Std_Types.h.m4_101</srcid><srcstatus/><internalId>537</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/Std_Types.h.m4_107</srcid><srcstatus/><internalId>538</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>155</internalId></specobject>

    <specobject>
      <id>Base.SWS_Std_00015</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_StandardTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Std_VersionInfoType
        Kind          | Structure
        Elements      | vendorID
                      | Type    | uint16
                      | Comment | --
                      | moduleID 
                      | Type    | uint16
                      | Comment | --
                      | sw_major_version
                      | Type    | uint8
                      | Comment | --
                      | sw_minor_version
                      | Type    | uint8
                      | Comment | --
                      | sw_patch_version
                      | Type    | uint8
                      | Comment | --
        Description   | This type shall be used to request the version of a BSW module using the &lt;Module 
                      | name&gt;_GetVersionInfo() function.
        Available via | Std_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Std_Types.h.m4_218</srcid><srcstatus/><internalId>544</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>156</internalId></specobject>

    <specobject>
      <id>Base.SWS_Std_00006</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_StandardTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | E_OK, E_NOT_OK
        Kind          | Enumeration
        Range         | E_OK     | 0x00u | --
                      | E_NOT_OK | 0x01u | --
        Description   | Because E_OK is already defined within OSEK, the symbol E_OK has to be shared.
                      | To avoid name clashes and redefinition problems, the symbols have to be defined
                      | in the following way (approved within implementation):
                      | #ifndef STATUSTYPEDEFINED
                      | #define STATUSTYPEDEFINED
                      | #define E_OK 0x00u
                      | typedef unsigned char StatusType; /* OSEK compliance */
                      | #endif
                      | #define E_NOT_OK 0x01u
        Available via | Std_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Std_Types.h.m4_98</srcid><srcstatus/><internalId>536</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>157</internalId></specobject>

    <specobject>
      <id>Base.SWS_Std_00007</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_StandardTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | STD_HIGH, STD_LOW
        Kind          | Enumeration
        Range         | STD_LOW  | 0x00u | --
                      | STD_HIGH | 0x01u | --
        Description   | The symbols STD_HIGH and STD_LOW shall be defined as follows:
                      | #define STD_HIGH 0x01u /* Physical state 5V or 3.3V */
                      | #define STD_LOW 0x00u /* Physical state 0V */
        Available via | Std_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Std_Types.h.m4_18</srcid><srcstatus/><internalId>533</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>158</internalId></specobject>

    <specobject>
      <id>Base.SWS_Std_00013</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_StandardTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | STD_ACTIVE, STD_IDLE
        Kind          | Enumeration
        Range         | STD_IDLE   | 0x00u | --
                      | STD_ACTIVE | 0x01u | --
        Description   | The symbols STD_ACTIVE and STD_IDLE shall be defined as follows:
                      | #define STD_ACTIVE 0x01 /* Logical state active */
                      | #define STD_IDLE 0x00 /* Logical state idle */
        Available via | Std_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Std_Types.h.m4_33</srcid><srcstatus/><internalId>534</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>159</internalId></specobject>

    <specobject>
      <id>Base.SWS_Std_00010</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_StandardTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | STD_ON, STD_OFF
        Kind          | Enumeration
        Range         | STD_OFF | 0x00u | --
                      | STD_ON  | 0x01u | --
        Description   | The symbols STD_ON and STD_OFF shall be defined as follows:
                      | #define STD_ON 0x01
                      | #define STD_OFF 0x00
        Available via | Std_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Std_Types.h.m4_48</srcid><srcstatus/><internalId>535</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>160</internalId></specobject>

    <specobject>
      <id>Base.SWS_Std_91001</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_StandardTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Std_MessageTypeType
        Kind          | Type
        Derived from  | uint8
        Range         | STD_MESSAGETYPE_REQUEST  0x00 Message type for a request message
                      | STD_MESSAGETYPE_RESPONSE  0x01 Message type for a response message
                      | 0x02-0x3F  0x02  reserved for future message type
        Description   | This type is used to encode the different type of messages. - Currently this encoding
                      | is limited to the distinction between requests and responses in C/S communication.
        Available via | Std_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Std_Types.h.m4_197</srcid><srcstatus/><internalId>541</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>161</internalId></specobject>

    <specobject>
      <id>Base.SWS_Std_91002</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_StandardTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Std_MessageResultType
        Kind          | Type
        Derived from  | uint8
        Range         | STD_MESSAGERESULT_OK   0x00 STD_MESSAGERESULT_OK
                      | STD_MESSAGERESULT_ERROR   0x01 Messageresult for an ERROR response
                      | 0x02-0x3F  0x02  reserved for future message results
        Description   | This type is used to encode different types of results for response messages. -
                      | Currently this encoding is limited to the distinction between OK and ERROR
                      | responses.
        Available via | Std_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Std_Types.h.m4_202</srcid><srcstatus/><internalId>542</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_Swcd_MessageResultType</srcid><srcstatus/><internalId>636</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>162</internalId></specobject>

    <specobject>
      <id>Base.SWS_Std_91003</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_StandardTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Service Name  | Std_ExtractProtocolHeaderFieldsType
        Kind          | Function Pointer
        Syntax        | Std_ReturnType (*Std_ExtractProtocolHeaderFieldsType) (
                      |   const uint8* buffer,
                      |   uint32 bufferLength,
                      |   Std_MessageTypeType* messageType,
                      |   Std_MessageResultType* messageResult
                      | )
        Sync/Async    | Synchronous
        Reentrancy    | Reentrant
        Parameters    | buffer         | Buffer allocated by the RTE, where the transformed data has to be
        (in)          |                | stored by the transformer
                      | bufferLength   | Length of the buffer
        Parameters    | None           
        (inout)       | messageType    | Canonical representation of the message type (extracted from the
        Parameters    |                | transformers protocol header).
        (out)         | messageResult  | Canonical representation of the message result type (extracted
                      |                | from the transformers protocol header).
        Return value  | Std_ReturnType | -
        Description   | Type for the function pointer to extract the relevant protocol header fields of the
                      | message and the type of the message result of a transformer. - At the time being,
                      | this is limited to the types used for C/S communication (i.e., REQUEST and
                      | RESPONSE and OK and ERROR).
        Available via | Std_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Std_Types.h.m4_231</srcid><srcstatus/><internalId>545</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>163</internalId></specobject>

    <specobject>
      <id>Base.SWS_Std_00017</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_StandardTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        The Std_MessageTypeType shall be used ot encode the different types of messages exchanged 
        in AUTOSAR. - Currently this encoding is limited to the distinction between requests and 
        responses in C/S communication.
      </description>
      <comment>
        This requirement is informational only.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>164</internalId></specobject>

    <specobject>
      <id>Base.SWS_Std_00019</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_StandardTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        The Std_MessageResultType shall be used ot encode the
        different types of results for response messages. - Currently this encoding is limited
        to the distinction between OK and ERROR responses.
      </description>
      <comment>
        This requirement is informational only.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>165</internalId></specobject>

    <specobject>
      <id>Base.SWS_Std_00030</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_StandardTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        The include file structure shall be as follows:
        ComStackTypes.h shall include StandardTypes.h
        Communication related basic software modules shall include ComStackTypes.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Base.EB_Ref.SWS_Std_00030.StandardTypes</srcid><srcstatus/><internalId>190</internalId></linkedfrom><linkedfrom><srcid>Base.EB_Ref.SWS_Std_00030.ComStackTypes</srcid><srcstatus/><internalId>191</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>166</internalId></specobject>

    <specobject>
      <id>Base.SWS_Std_00025</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_StandardTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        The transformer class STD_TRANSFORMER_UNSPECIFIED
        shall be used if no transformer error occured.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_200</srcid><srcstatus/><internalId>293</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>167</internalId></specobject>

    <specobject>
      <id>Base.SWS_Std_00024</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_StandardTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Std_TransformerClass
        Kind          | Type
        Derived from  | uint8
        Range         | STD_TRANSFORMER_UNSPECIFIED | 0x00 | Transformer of a unspecified transformer class.
                      | STD_TRANSFORMER_SERIALIZER  | 0x01 | Transformer of a serializer class.
                      | STD_TRANSFORMER_SAFETY      | 0x02 | Transformer of a safety class.
                      | STD_TRANSFORMER_SECURITY    | 0x03 | Transformer of a security class.
                      | STD_TRANSFORMER_CUSTOM      | 0xFF | Transformer of a custom class not standardized by AUTOSAR.
        Description   | --
        Available via | Std_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_201</srcid><srcstatus/><internalId>294</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>168</internalId></specobject>

    <specobject>
      <id>Base.SWS_Std_00027</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_StandardTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Std_TransformerForward (draft)
        Kind          | Structure
        Elements      | errorCode
                      | Type    | Std_TransformerForwardCode
                      | Comment | --
                      | transformerClass
                      | Type    | Std_TransformerClass
                      | Comment | --
        Description   | --
                      | Tags:atp.Status=draft
        Available via | Std_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_202</srcid><srcstatus/><internalId>295</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>169</internalId></specobject>

    <specobject>
      <id>Base.SWS_Std_00026</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_StandardTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        The mapping from transformerClass of TransformationTechnology to value of data type Std_TransformerClass shall be:
        transformerClass serializer - STD_TRANSFORMER_SERIALIZER
        transformerClass safety - STD_TRANSFORMER_SAFETY
        transformerClass security - STD_TRANSFORMER_SECURITY
        transformerClass custom - STD_TRANSFORMER_CUSTOM
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_216</srcid><srcstatus/><internalId>297</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>170</internalId></specobject>

    <specobject>
      <id>Base.SWS_Std_00021</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_StandardTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        Name          | Std_TransformerError
        Kind          | Structure
        Elements      | errorCode
                      | type    | uint8
                      | Comment | --
                      | transformerClass
                      | type    | Std_TransformerClass
                      | Comment | --
        Description   | --
        Available via | Std_Types.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_203</srcid><srcstatus/><internalId>296</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>171</internalId></specobject>

    <specobject>
      <id>Base.SWS_Std_00023</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_StandardTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        The underlying data type of the type Std_TransformerClass shall be uint8.
        The type Std_TransformerClass shall be an enumeration with the following elements where each element represents a transformer class:
      </description>
      <comment>
        The information of this requirement continues in SWS_Std_00024.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_255</srcid><srcstatus/><internalId>300</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>172</internalId></specobject>

    <specobject>
      <id>Base.SWS_Std_00022</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_StandardTypes.pdf, R20-11</source>
      <version>1</version>
      <description>
        The underlying data type of the type Std_TransformerErrorCode shall be uint8.
        The Std_TransformerClass represents the transformer class in which the error occurred.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_256</srcid><srcstatus/><internalId>301</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>173</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>Base.ASR21-11.SWS_Std_00028</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_StandardTypes.pdf, R21-11</source>
      <version>1</version>
      <description>
        A safety transformer shall handle the forwarded status according to table 8.1.
        E_OK                 0x00 No specific error to be injected
        E_SAFETY_INVALID_REP 0x01 Repeat the last used sequence number.
        E_SAFETY_INVALID_SEQ 0x02 Use a wrong sequence number.
        E_SAFETY_INVALID_CRC 0x03 Generate a deliberately wrong CRC.
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_93</srcid><srcstatus/><internalId>287</internalId></linkedfrom><linkedfrom><srcid>doc/public/changelog/Deviations.xml_241</srcid><srcstatus/><internalId>299</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Std_Types.h.m4_116</srcid><srcstatus/><internalId>539</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>174</internalId></specobject>

    <specobject>
      <id>Base.ASR21-11.SWS_Std_00029</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_StandardTypes.pdf, R21-11</source>
      <version>1</version>
      <description>
        Name: Std_TransformerForwardCode
        Kind: Type
        Derived from: uint8
        Range:
        E_OK                   0x00 -
        E_SAFETY_INVALID_REP   0x01 -
        E_SAFETY_INVALID_SEQ   0x02 -
        E_SAFETY_INVALID_CRC   0x03 -
        Description:
        -
        Available via: Std_Types.h
      </description>
      <releases>
        <release>AUTOSAR R21-11</release>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_93</srcid><srcstatus/><internalId>287</internalId></linkedfrom><linkedfrom><srcid>doc/public/changelog/Deviations.xml_225</srcid><srcstatus/><internalId>298</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Std_Types.h.m4_242</srcid><srcstatus/><internalId>546</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>175</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>Base.ASR403.STD016</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_StandardTypes.pdf, R4.0 Rev 3</source>
      <version>1</version>
      <description>
        The include file structure shall be as follows:
        ComStack_Types.h shall include Std_Types.h
        Communication related basic software modules shall include ComStack_Types.h
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/ComStack_Types.h.m4_10</srcid><srcstatus/><internalId>478</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>176</internalId></specobject>
    
    <specobject>
      <id>Base.ASR403.STD001</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_StandardTypes.pdf, R4.0 Rev 3</source>
      <version>1</version>
      <description>
        The include file structure shall be as follows:
        <pre>
          Std_Types.h shall include Platform_Types.h
          Std_Types.h shall include Compiler.h
          All other basic software modules shall include Std_Types.h
        </pre>
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Std_Types.h.m4_12</srcid><srcstatus/><internalId>532</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>177</internalId></specobject>
    
    <specobject>
      <id>Base.ASR403.STD003</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_StandardTypes.pdf, R4.0 Rev 3</source>
      <version>1</version>
      <description>
        The file name of the standard types header file shall be 'Std_Types.h'.
      </description>
      <releases>
        <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Std_Types.h.m4_2</srcid><srcstatus/><internalId>530</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>178</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>Base.SWS_TcpIp_91010</id>
      <status>approved</status>
      <sourcefile>AUTOSAR_SWS_TcpIp.pdf, R20-11</sourcefile>
      <version>1</version>
      <description>
        Name          | TcpIp_MeasurementIdxType
        Kind          | Type
        Derived from  | uint8
        Range         | TCPIP_MEAS_DROP_TCP   | 0x01      | Measurement index of dropped PDUs caused by invalid destination TCP-Port
                      | TCPIP_MEAS_DROP_UDP   | 0x02      | Measurement index of dropped PDUs caused by invalid destination UDP-Port
                      | TCPIP_MEAS_DROP_IPV4  | 0x03      | Measurement index of dropped datagrams caused by invalid IPv4 address
                      | TCPIP_MEAS_DROP_IPV6  | 0x04      | Measurement index of dropped datagrams caused by invalid IPv6 address
                      | TCPIP_MEAS_RESERVED_1 | 0x05-0x7F | reserved by AUTOSAR
                      | TCPIP_MEAS_RESERVED_2 | 0x80-0xEF | Vendor specific range
                      | TCPIP_MEAS_RESERVED_3 | 0xF0-0xFE | reserved by AUTOSAR (future use)
                      | TCPIP_MEAS_ALL        | 0xFF      | represents all measurement indexes
        Description   | Index to select specific measurement data
        Available via | TcpIp.h
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Base.EB_Ref.SWS_TcpIp_91010.AvailableVia</srcid><srcstatus/><internalId>187</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>179</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>Base.TPS_ECUC_06036</id>
      <status>approved</status>
      <source>AUTOSAR_TPS_ECUConfiguration.pdf, R20-11</source>
      <version>1</version>
      <description>
        To distinguish module definitions of Complex Drivers from each other the package structure shall be used.
      </description>
      <releases>
         <release>AUTOSAR R20-11</release>
         <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
         <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_EnabledMacros</srcid><srcstatus/><internalId>583</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ComTest_HeaderMacros</srcid><srcstatus/><internalId>584</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>180</internalId></specobject>

    <specobject>
      <id>Base.TPS_ECUC_06037</id>
      <status>approved</status>
      <source>AUTOSAR_TPS_ECUConfiguration.pdf, R20-11</source>
      <version>1</version>
      <description>
        The apiServicePrefix attribute of a Complex Driver shall contain the module abbreviation.
      </description>
      <releases>
         <release>AUTOSAR R20-11</release>
         <release>AUTOSAR 4.0.3</release>
      </releases>
      <needscoverage>
         <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_EnabledMacros</srcid><srcstatus/><internalId>583</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ComTest_HeaderMacros</srcid><srcstatus/><internalId>584</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>181</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>Base.EB_Ref.SWS_Lin_00230.AllValuesForLinIfLinDriverAPI</id>
      <status>approved</status>
      <source>EB Refinement</source>
      <version>1</version>
      <description>
        Name          | Lin_FrameResponseType
        Kind          | Enumeration
        Range         | If LinIfLinDriverAPI is set to "REV44":
                      | LIN_FRAMERESPONSE_TX     | -- | Response is generated from this node
                      | LIN_FRAMERESPONSE_RX     | -- | Response is generated from another node and is relevant for this node.
                      | LIN_FRAMERESPONSE_IGNORE | -- | Response is generated from another node and is irrelevant for this node
                      |
                      | If LinIfLinDriverAPI is set to a value other than "REV44":
                      | LIN_MASTER_RESPONSE | Response is generated from this (master) node
                      | LIN_SLAVE_RESPONSE  | Response is generated from a remote slave node
                      | LIN_SLAVE_TO_SLAVE  | Response is generated from one slave to another slave,
                      |                     | for the master the response will be anonymous, it does not
                      |                     | have to receive the response.
        Description   | This type is used to specify whether the frame processor is required to transmit the response part of the LIN frame.
        Available via | Lin_GeneralTypes.h
      </description>
      <comment>
        - Added all possible values, according to LinIfLinDriverAPI's set value
      </comment>
      <needscoverage>
         <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Lin_GeneralTypes_Cfg.h_12</srcid><srcstatus/><internalId>432</internalId></linkedfrom></coveredby></needscov>
         <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_LinGeneralTypes</srcid><srcstatus/><internalId>600</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR403.LIN230</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Lin_00230</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>182</internalId></specobject>

    <specobject>
      <id>Base.EB_Ref.SWS_CanTrcv_00210.AvailableVia</id>
      <status>approved</status>
      <source>EB Refinement</source>
      <version>1</version>
      <description>
        Name          | CanTrcv_PNActivationType
        Kind          | Enumeration
        Range         | PN_ENABLED  | -- | PN wakeup functionality in CanTrcv is enabled.
                      | PN_DISABLED | -- | PN wakeup functionality in CanTrcv is disabled.
        Description   | Datatype used for describing whether PN wakeup functionality in CanTrcv is enabled or disabled.
        Available via | Can_GeneralTypes.h
      </description>
      <comment>
        - Changed CanTrcv.h to Can_GeneralTypes.h
      </comment>
      <needscoverage>
         <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Can_GeneralTypes.h_164</srcid><srcstatus/><internalId>474</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_CanTrcv_00210</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>183</internalId></specobject>

    <specobject>
      <id>Base.EB_Ref.SWS_CanTrcv_00211.AvailableVia</id>
      <status>approved</status>
      <source>EB Refinement</source>
      <version>1</version>
      <description>
        Name          | CanTrcv_TrcvFlagStateType
        Kind          | Enumeration
        Range         | CANTRCV_FLAG_SET     | -- | The flag is set in the transceiver hardware.
                      | CANTRCV_FLAG_CLEARED | -- | The flag is cleared in the transceiver hardware.
        Description   | Provides the state of a flag in the transceiver hardware.
        Available via | Can_GeneralTypes.h
      </description>
      <comment>
        - Changed CanTrcv.h to Can_GeneralTypes.h
      </comment>
      <needscoverage>
         <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Can_GeneralTypes.h_173</srcid><srcstatus/><internalId>475</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_CanTrcv_00211</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>184</internalId></specobject>

    <specobject>
      <id>Base.EB_Ref.SWS_EthIf_91010.AvailableVia</id>
      <status>approved</status>
      <source>EB Refinement</source>
      <version>1</version>
      <description>
        Name          | EthIf_MeasurementIdxType
        Kind          | Type
        Derived from  | uint8
        Range         | ETHIF_MEAS_DROP_CRTLIDX | 0x01      | Measurement index of dropped datagrams caused by invalid CrtlIdx/VLAN
                      | ETHIF_MEAS_RESERVED_1   | 0x02-0x7F | reserved by AUTOSAR
                      | ETHIF_MEAS_RESERVED_2   | 0x80-0xEF | Vendor specific range
                      | ETHIF_MEAS_RESERVED_3   | 0xF0-0xFE | reserved by AUTOSAR (future use)
                      | ETHIF_MEAS_ALL          | 0xFF      | represents all measurement indexes
        Description   | Index to select specific measurement data
        Available via | Eth_GeneralTypes.h
      </description>
      <comment>
        - Changed EthIf.h to Eth_GeneralTypes.h
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_480</srcid><srcstatus/><internalId>510</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_509</srcid><srcstatus/><internalId>511</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_516</srcid><srcstatus/><internalId>512</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_EthIf_91010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>88</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>185</internalId></specobject>

    <specobject>
      <id>Base.EB_Ref.SWS_SoAd_91010.AvailableVia</id>
      <status>approved</status>
      <source>EB Refinement</source>
      <version>1</version>
      <description>
        Name          | SoAd_MeasurementIdxType
        Kind          | Type
        Derived from  | uint8
        Range         | SOAD_MEAS_DROP_TCP   | 0x01      | Measurement index of dropped PDUs caused by invalid destination TCP-Port
                      | SOAD_MEAS_DROP_UDP   | 0x02      | Measurement index of dropped PDUs caused by invalid destination UDP-Port
                      | SOAD_MEAS_RESERVED_1 | 0x03-0x7F | reserved by AUTOSAR
                      | SOAD_MEAS_RESERVED_2 | 0x80-0xEF | Vendor specific range
                      | SOAD_MEAS_RESERVED_3 | 0xF0-0xFE | reserved by AUTOSAR (future use)
                      | SOAD_MEAS_ALL        | 0xFF      | represents all measurement indexes
        Description   | Index to select specific measurement data
        Available via | Eth_GeneralTypes.h
      </description>
      <comment>
        - Changed SoAd.h to Eth_GeneralTypes.h
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_521</srcid><srcstatus/><internalId>513</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_542</srcid><srcstatus/><internalId>514</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_SoAd_91010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>186</internalId></specobject>

    <specobject>
      <id>Base.EB_Ref.SWS_TcpIp_91010.AvailableVia</id>
      <status>approved</status>
      <source>EB Refinement</source>
      <version>1</version>
      <description>
        Name          | TcpIp_MeasurementIdxType
        Kind          | Type
        Derived from  | uint8
        Range         | TCPIP_MEAS_DROP_TCP   | 0x01      | Measurement index of dropped PDUs caused by invalid destination TCP-Port
                      | TCPIP_MEAS_DROP_UDP   | 0x02      | Measurement index of dropped PDUs caused by invalid destination UDP-Port
                      | TCPIP_MEAS_DROP_IPV4  | 0x03      | Measurement index of dropped datagrams caused by invalid IPv4 address
                      | TCPIP_MEAS_DROP_IPV6  | 0x04      | Measurement index of dropped datagrams caused by invalid IPv6 address
                      | TCPIP_MEAS_RESERVED_1 | 0x05-0x7F | reserved by AUTOSAR
                      | TCPIP_MEAS_RESERVED_2 | 0x80-0xEF | Vendor specific range
                      | TCPIP_MEAS_RESERVED_3 | 0xF0-0xFE | reserved by AUTOSAR (future use)
                      | TCPIP_MEAS_ALL        | 0xFF      | represents all measurement indexes
        Description   | Index to select specific measurement data
        Available via | Eth_GeneralTypes.h
      </description>
      <comment>
        - Changed TcpIp.h to Eth_GeneralTypes.h
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_547</srcid><srcstatus/><internalId>515</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_699</srcid><srcstatus/><internalId>516</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_TcpIp_91010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>179</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>187</internalId></specobject>

    <specobject>
      <id>Base.EB_Ref.SWS_Eth_00026.ImplementedTypes</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Module           | Imported Type
        ComStack_Types   | BufReq_ReturnType
        Eth_GeneralTypes | Eth_BufIdxType
                         | Eth_CounterType
                         | Eth_DataType
                         | Eth_FilterActionType
                         | Eth_FrameType
                         | Eth_ModeType
                         | Eth_RateRatioType
                         | Eth_RxStatsType
                         | Eth_RxStatusType
                         | Eth_TimeIntDiffType
                         | Eth_TimeStampQualType
                         | Eth_TimeStampType
                         | Eth_TxErrorCounterValuesType
                         | Eth_TxStatsType
        Std_Types        | Std_ReturnType
                         | Std_VersionInfoType
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Eth_GeneralTypes_Cfg.h_18</srcid><srcstatus/><internalId>431</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_36</srcid><srcstatus/><internalId>495</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_50</srcid><srcstatus/><internalId>497</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_58</srcid><srcstatus/><internalId>498</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_70</srcid><srcstatus/><internalId>499</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_82</srcid><srcstatus/><internalId>500</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_92</srcid><srcstatus/><internalId>501</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_96</srcid><srcstatus/><internalId>502</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_105</srcid><srcstatus/><internalId>503</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_113</srcid><srcstatus/><internalId>504</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_164</srcid><srcstatus/><internalId>506</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_190</srcid><srcstatus/><internalId>507</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_223</srcid><srcstatus/><internalId>508</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/Eth_GeneralTypes.h_234</srcid><srcstatus/><internalId>509</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Eth_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
        <provcov>
          <linksto>Base.ASR430.SWS_Eth_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>86</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations><ruleid>WRN.impl.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>188</internalId></specobject>

    <specobject>
      <id>Base.EB_Ref.SWS_Eth_00026.NotImplementedTypes</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Module           | Imported Type
        Dem              | Dem_EventIdType
                         | Dem_EventStatusType
        Eth_GeneralTypes | Eth_ConfigType
      </description>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_51</srcid><srcstatus/><internalId>284</internalId></linkedfrom><linkedfrom><srcid>doc/public/changelog/Deviations.xml_159</srcid><srcstatus/><internalId>290</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Eth_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
        <provcov>
          <linksto>Base.ASR430.SWS_Eth_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>86</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>189</internalId></specobject>

    <specobject>
      <id>Base.EB_Ref.SWS_Std_00030.StandardTypes</id>
      <status>approved</status>
      <source>EB Refinement</source>
      <version>1</version>
      <description>
        ComStackTypes.h shall include StandardTypes.h
      </description>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_175</srcid><srcstatus/><internalId>292</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Std_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>166</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>190</internalId></specobject>

    <specobject>
      <id>Base.EB_Ref.SWS_Std_00030.ComStackTypes</id>
      <status>approved</status>
      <source>EB Refinement</source>
      <version>1</version>
      <description>
        Communication related basic software modules shall include ComStackTypes.h
      </description>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_174</srcid><srcstatus/><internalId>291</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Std_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>166</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>191</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>Base.ComStack.FindNextOne</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The module asc_Base SHALL provide a function to efficiently find the
        next bit that is set in a given bitfield.
        For performance reasons, the bitfield must be one-terminated.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/ComStack_Helpers.c_30</srcid><srcstatus/><internalId>555</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_FindNextOne</srcid><srcstatus/><internalId>614</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>192</internalId></specobject>

    <specobject>
      <id>Base.Atomic.Assign</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The module asc_Base SHALL provide a macro for atomic assignment as default
        when asc_Platforms fails to implement a platform specific macro.
        The macro SHALL assume that 8-bit assignments are always atomic,
        16-bit and 32-bit assignments are not atomic.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_AtomicAssign</srcid><srcstatus/><internalId>594</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>193</internalId></specobject>

    <specobject>
      <id>Base.Properties.BaseTypes</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        For each base type defined by AUTOSAR, a plugin property shall exist that defines the mapping
        to the corresponding C90 standard type.
        The properties shall be named BaseType_&lt;type&gt;.
        All properties shall be provided in the container BaseTypes.
      </description>
      <comment>
        Example: &lt;d:var name="BaseType_uint8" type="STRING" value="unsigned char"/&gt;
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Base.xdm.m4_355</srcid><srcstatus/><internalId>567</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_BaseTypes</srcid><srcstatus/><internalId>593</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>194</internalId></specobject>

    <specobject>
      <id>Base.Properties.CpuConfig</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        For the type, byte order, and bit order of the CPU, a plugin property shall exist that defines the
        corresponding CPU property. The valid values for the type are the integers 64, 32, 16, or 8;
        the valid values for the byte order and bit order are the strings BE or LE.
        The properties shall be named BaseCpuConfig_&lt;name&gt;.
        All properties shall be provided in the container BaseCpuConfig.
      </description>
      <comment>
        Example: &lt;d:var name="BaseCpuConfig_type" type="INTEGER" value="32"/&gt;
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Base.xdm.m4_992</srcid><srcstatus/><internalId>568</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_CpuProperties</srcid><srcstatus/><internalId>591</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>195</internalId></specobject>

    <specobject>
      <id>Base.Properties.Types.Alignment</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        There shall exist plugin properties which define the alignment requirement
        of the C90 standard types.
        The properties for standard types shall be named Basetypes.&lt;type&gt;.Alignment.
        The properties for complex types shall be named Complextypes.&lt;type&gt;.Alignment.
      </description>
      <rationale>
        When using post-build configuration for AUTOSAR modules it is often
        necessary to allocate memory for data during runtime.
        These data has to be aligned according to the alignment constraints
        for the respective architecture.
        When providing those alignment constraints plugin properties
        it is possible to access the value from a code generator.
        Alignment requirements for complex types must be taken into account
        because there sometimes exist specific alignment requirements for composite types.
        E.g. Structures and arrays on XC2000 architecture must at least be
        2-byte aligned.
      </rationale>
      <comment>
      Example:
       Basetypes.char.Alignment:1.
       Complextypes.struct.Alignment:2.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_Alignment</srcid><srcstatus/><internalId>610</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>196</internalId></specobject>

    <specobject>
      <id>Base.Properties.Types.Size</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        There shall exist plugin properties which hold the size
        of the C90 standard types.
        The properties shall be named Basetypes.&lt;type&gt;.Size.
      </description>
      <rationale>
        When creating data for a post build configuration the size of the
        base types have to be known in order to correctly create the
        data structures in the code generator for binary files.
      </rationale>
      <comment>
        Example: Basetypes.short.Size:2
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_Size</srcid><srcstatus/><internalId>609</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_BinaryGeneration</srcid><srcstatus/><internalId>613</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>197</internalId></specobject>

    <specobject>
      <id>Base.Properties.Types.AtomicAccess</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        There shall exist plugin properties which define if a value of an
        C90 standard type can be assigned atomically without caring for
        interrupt safety.
        The properties shall be named Basetypes.&lt;type&gt;.AtomicAccess
        and shall have the value 'true' or 'false'.
      </description>
      <comment>
        Example: Basetypes.long.AtomicAccess:true
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_AtomicAssign</srcid><srcstatus/><internalId>608</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>198</internalId></specobject>

    <specobject>
      <id>Base.Properties.Types.Mapping</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        There shall exist plugin properties which define the mapping of
        C90 standard type to AUTOSAR types.
        The properties shall be named Basetypes.&lt;AUTOSAR type&gt;.Mapping or
        Derivedtype.&lt;EB specific derived type&gt;.Mapping
        and shall have a C90 standard type as value.
      </description>
      <comment>
        Example:
          Basetypes.boolean.Mapping:unsigned char
          Basetypes.uint8.Mapping:unsigned char
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_CastMacro</srcid><srcstatus/><internalId>590</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_Size</srcid><srcstatus/><internalId>609</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_Alignment</srcid><srcstatus/><internalId>610</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MaxAlignedByteArray</srcid><srcstatus/><internalId>611</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>199</internalId></specobject>

    <specobject>
      <id>Base.GeneralTypes.Schema</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        The Base schema shall have a container to collect all configuration
        parameter regarding to the General Types (Can, Ethernet, FlexRay, Lin
        and Crypto).
        Included Containers
        Container Name      Multiplicity
        Crypto             0..1
      </description>
      <rationale>
        Sometimes a type definition which is  part of a specific module moves to
        the Base module with a newer AUTOSAR release.
        Since the Base module does not implement variant handling for different
        AUTOSAR releases there shall be the possibility to enable or disable
        the definition of a specific type.
      </rationale>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Base.xdm.m4_1049</srcid><srcstatus/><internalId>569</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>200</internalId></specobject>

    <specobject>
      <id>Base.GeneralTypes.Schema.Crypto_GeneralTypes</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Container Name Crypto_GeneralTypes Parent Container GeneralTypes Description This container holds configuration information for the AUTOSAR data types that shall be available via Crypto_GeneralTypes.h, depending on the chosen AUTOSAR release. Post-Build Variant Multiplicity false Multiplicity Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Configuration Parameters
        Included Containers
        Container Name             Multiplicity
        Crypto_GeneralTypes_R2111   0..1
      </description>
      <rationale>
        Past experience shows that data types are very variable between successive releases. That's why all relevant options are grouped here.
      </rationale>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Base.xdm.m4_1080</srcid><srcstatus/><internalId>571</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>201</internalId></specobject>

    <specobject>
      <id>Base.GeneralTypes.Schema.Crypto_GeneralTypes_R2111</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Container Name Crypto_GeneralTypes_R2111 Parent Container Crypto_GeneralTypes Description Configuration options specific to Crypto_GeneralTypes R2111. Post-Build Variant Multiplicity false Multiplicity Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Configuration Parameters
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Base.xdm.m4_1096</srcid><srcstatus/><internalId>572</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>202</internalId></specobject>

    <specobject>
      <id>Base.GeneralTypes.Schema.Crypto_GeneralTypes_R2111_CustomServiceApis</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Container Name Crypto_GeneralTypes_R2111_CustomServiceApis Parent Container Crypto_GeneralTypes_R2111 Description Enables or disables the availability of necessary changes of R21-11 Crypto_GeneralTypes which make it possible to implement the the R22-11 feature "Custom service" introduced via AR-102387. Post-Build Variant Multiplicity false Multiplicity Configuration Class Pre-compile time X All Variants Link time -- Post-build time -- Configuration Parameters
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Base.xdm.m4_1110</srcid><srcstatus/><internalId>573</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>203</internalId></specobject>

    <specobject>
      <id>Base.ASR21-11.SWS_Csm_01031_ADD01</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the schema parameter GeneralTypes_Crypto_Release is configured to CRYPTO_GENERALTYPES_RELEASE_R2111 and the schema parameter Crypto_GeneralTypes_R2111_CustomServiceApis is configured to TRUE, then the enumeration Crypto_ServiceInfoType shall be enhanced by the value CRYPTO_CUSTOM_SERVICE = 0x015.
      </description>
      <rationale>
        The value CRYPTO_CUSTOM_SERVICE is related to the feature 'CustomApi' specified in R22-11 that has to be already available in our R21-11 implementation.
      </rationale>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_779</srcid><srcstatus/><internalId>418</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_CryptoGeneralTypes</srcid><srcstatus/><internalId>598</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>204</internalId></specobject>

    <specobject>
      <id>Base.ASR21-11.SWS_Csm_91043_ADD01</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the schema parameter GeneralTypes_Crypto_Release is configured to CRYPTO_GENERALTYPES_RELEASE_R2111 and the schema parameter Crypto_GeneralTypes_R2111_CustomServiceApis is configured to TRUE, then the extension to Std_ReturnType shall be enhanced by the value CRYPTO_E_CUSTOM_ERROR = 0x00E.
      </description>
      <rationale>
        The value CRYPTO_E_CUSTOM_ERROR is related to the feature 'CustomApi' specified in R22-11 that has to be already available in our R21-11 implementation.
      </rationale>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_81</srcid><srcstatus/><internalId>321</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>205</internalId></specobject>

    <specobject>
      <id>Base.GeneralTypes.Can_ControllerStateType</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        It shall be possible to enable or disable the definition of the
        type Can_ControllerStateType in the schema of the Base module.
      </description>
      <rationale>
        Can_ControllerStateType shall be part of Can_GeneralTypes.h since
        AUTOSAR release 4.3.
        For older releases it is common that the CAN driver defines this type.
        To support a combination of Base with CAN driver conform to AUTOSAR
        up to release 4.2.2 it is necessary to omit the definition in the Base
        module.
      </rationale>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Can_GeneralTypes_Cfg.h_22</srcid><srcstatus/><internalId>304</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/Can_GeneralTypes.h_102</srcid><srcstatus/><internalId>469</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/Base.xdm.m4_1059</srcid><srcstatus/><internalId>570</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuvc</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Base.GeneralTypes.Can_ControllerStateType.vc01</srcid><srcstatus/><internalId>280</internalId></linkedfrom><linkedfrom><srcid>Base.GeneralTypes.Can_ControllerStateType.vc02</srcid><srcstatus/><internalId>281</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>206</internalId></specobject>

    <specobject>
      <id>Base.Macros.MaximumAlignedArrayDefinition</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist a macro that supports the allocation of a byte array
        with a given number of bytes that is aligned according to the most stringent
        alignment requirements.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_MaxAlignedByteArray</srcid><srcstatus/><internalId>611</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>207</internalId></specobject>

    <specobject>
      <id>Base.Macros.AtomicAssign</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist macro definitions for atomically assign a value to
        a variable. There shall be a macro for variables having a width of
        of 8 bit, 16 bit and 32 bit
        The macros shall be named TS_AtomicAssign&lt;bit width&gt;.
        Those macros shall use an appropriate synchronization mechanism in case
        the assignment can't be done atomically. Whether the assignment can be
        done atomically shall be determined by checking if the plugin property
        Basetypes.uint&lt;bit width&gt;.AtomicAccess is set to 'true'.
      </description>
      <rationale>
        On most architectures it is possible to atomically assign value
        to a variable of an AUTOSAR standard type without using synchronization
        mechanisms. However this is not true for all architectures (e.g. assign
        a value to a 32 bit variable on a 16 bit architecture).
        These macros allow to assign a variable with good performance on those
        architecture where the assignment can be done atomically. On other
        architectures they provide the safety required for an
        assignment operation.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_AtomicAssign</srcid><srcstatus/><internalId>608</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>208</internalId></specobject>

    <specobject>
      <id>Base.Macros.BitOperation.Get</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist a macro definition for retrieving a bit from variable which
        address is passed as parameter to the macro.
        The macro shall be named TS_GetBit.
      </description>
      <rationale>
        Bit operations are performed quite often and on some architectures it
        might be possible to provide an optimized variant for this operation.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_BitOperation</srcid><srcstatus/><internalId>612</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>209</internalId></specobject>

    <specobject>
      <id>Base.Macros.BitOperation.GetGroup</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist a macro definition for retrieving a group of bits from variable
        which address is passed as parameter to the macro. The macro shall provide
        parameters for a bit mask and an bit offset. The bit mask clears the
        unwanted bits. The offset shifts the start of the bit group to the
        least significant bit.
        The macro shall be named TS_GetBitGroup.
      </description>
      <rationale>
        Bit operations are performed quite often and on some architectures it
        might be possible to provide an optimized variant for this operation.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_BitOperation</srcid><srcstatus/><internalId>612</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>210</internalId></specobject>

    <specobject>
      <id>Base.Macros.EnforceNonEmptyTranslationUnits</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist a macro definition which prevents compiler warnings/errors
        regarding empty translation units. This macro shall be placed in translation units
        that would otherwise be empty.
        The implementation of this macro shall be done in a way that it consumes a
        minimum of memory resources (at best none at all).
      </description>
      <rationale>
        ISO C-90 does not permit empty translation units. - This causes compiler warnings
        (gcc for example) or even errors (Renesas compiler for example) when the compiler
        encounters an empty translation unit.
        Since we do not want generated Makefiles however and since we do want to
        discard code based on per-compile-time switches, empty translation units
        might occur depending on the pre-compile-time parameters.
        This macro shall be used to prevent that the translation unit is empty in such cases.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_EnforceNonEmptyTranslationUnits</srcid><srcstatus/><internalId>601</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>211</internalId></specobject>

    <specobject>
      <id>Base.Macros.TagFunctionAsDeprecated</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist a macro definition which tags a function as deprecated. This macro shall be placed
        in the declaration of deprecated functions.
        The implementation of this macro shall be done in a way that each use of the functions
        yields a corresponding warning during compilation if such kind of warning is supported by the
        compiler.
      </description>
      <rationale>
        Tag functions as deprecated in a way that the use of these functions results in a warning during compilation.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_EnforceNonEmptyTranslationUnits</srcid><srcstatus/><internalId>601</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>212</internalId></specobject>

    <specobject>
      <id>Base.Macros.TagTypedefAsDeprecated</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist a macro definition which tags a typedef as deprecated. This macro shall be placed
        in the definition of deprecated typedefs.
        The implementation of this macro shall be done in a way that each use of the typedefs
        yields a corresponding warning during compilation if such kind of warning is supported by the
        compiler.
      </description>
      <rationale>
        Tag typedefs as deprecated in a way that the use of these typedefs results in a warning during compilation.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_EnforceNonEmptyTranslationUnits</srcid><srcstatus/><internalId>601</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>213</internalId></specobject>

    <specobject>
      <id>Base.Macros.TagVariableAsDeprecated</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist a macro definition which tags a variable as deprecated. This macro shall be placed
        in the definition of deprecated variable.
        The implementation of this macro shall be done in a way that each use of the variable
        yields a corresponding warning during compilation if such kind of warning is supported by the
        compiler.
      </description>
      <rationale>
        Tag variables as deprecated in a way that the use of these variables results in a warning during compilation.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_EnforceNonEmptyTranslationUnits</srcid><srcstatus/><internalId>601</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>214</internalId></specobject>

    <specobject>
      <id>Base.Macros.TagMacroAsDeprecated</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist a macro definition which tags a macro as deprecated. This macro shall be placed
        in the definition of deprecated macro.
        The implementation of this macro shall be done in a way that each use of the macro
        yields a corresponding warning during compilation if such kind of warning is supported by the
        compiler.
      </description>
      <rationale>
        Tag macros as deprecated in a way that the use of these macros results in a warning during compilation.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_EnforceNonEmptyTranslationUnits</srcid><srcstatus/><internalId>601</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>215</internalId></specobject>

    <specobject>
      <id>Base.Macros.PostBuild.CheckAlignmentUint8</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist a macro definition which checks that the alignment requirements of
        an uint8 variable encoded in the post build config signature matches the machine's
        alignment requirements for uint8 variables.
        The macro shall be named TS_SIG_CHECK_ALIGNMENT_UINT8.
        Detailed information on the structure of the signature can be found in
        http://wiki.elektrobit.com/index.php?title=Project:EB_tresos/Architecture/PostBuild&amp;oldid=467588#Post-build_platform_signature_for_consistency_of_endianness_and_alignment_requirements
      </description>
      <rationale>
        Provide means to ensure that the assumptions made during generation of the post build are met by the real machine.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_PostBuildSignature</srcid><srcstatus/><internalId>646</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>216</internalId></specobject>

    <specobject>
      <id>Base.Macros.PostBuild.CheckAlignmentUint16</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist a macro definition which checks that the alignment requirements of
        an uint16 variable encoded in the post build config signature matches the machine's
        alignment requirements for uint16 variables.
        The macro shall be named TS_SIG_CHECK_ALIGNMENT_UINT16.
        Detailed information on the structure of the signature can be found in
        http://wiki.elektrobit.com/index.php?title=Project:EB_tresos/Architecture/PostBuild&amp;oldid=467588#Post-build_platform_signature_for_consistency_of_endianness_and_alignment_requirements
      </description>
      <rationale>
        Provide means to ensure that the assumptions made during generation of the post build are met by the real machine.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_PostBuildSignature</srcid><srcstatus/><internalId>646</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>217</internalId></specobject>

    <specobject>
      <id>Base.Macros.PostBuild.CheckAlignmentUint32</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist a macro definition which checks that the alignment requirements of
        an uint32 variable encoded in the post build config signature matches the machine's
        alignment requirements for uint32 variables.
        The macro shall be named TS_SIG_CHECK_ALIGNMENT_UINT32.
        Detailed information on the structure of the signature can be found in
        http://wiki.elektrobit.com/index.php?title=Project:EB_tresos/Architecture/PostBuild&amp;oldid=467588#Post-build_platform_signature_for_consistency_of_endianness_and_alignment_requirements
      </description>
      <rationale>
        Provide means to ensure that the assumptions made during generation of the post build are met by the real machine.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_PostBuildSignature</srcid><srcstatus/><internalId>646</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>218</internalId></specobject>

    <specobject>
      <id>Base.Macros.PostBuild.CheckAlignmentSint8</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist a macro definition which checks that the alignment requirements of
        an sint8 variable encoded in the post build config signature matches the machine's
        alignment requirements for sint8 variables.
        The macro shall be named TS_SIG_CHECK_ALIGNMENT_SINT8.
        Detailed information on the structure of the signature can be found in
        http://wiki.elektrobit.com/index.php?title=Project:EB_tresos/Architecture/PostBuild&amp;oldid=467588#Post-build_platform_signature_for_consistency_of_endianness_and_alignment_requirements
      </description>
      <rationale>
        Provide means to ensure that the assumptions made during generation of the post build are met by the real machine.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_PostBuildSignature</srcid><srcstatus/><internalId>646</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>219</internalId></specobject>

    <specobject>
      <id>Base.Macros.PostBuild.CheckAlignmentSint16</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist a macro definition which checks that the alignment requirements of
        an sint16 variable encoded in the post build config signature matches the machine's
        alignment requirements for sint16 variables.
        The macro shall be named TS_SIG_CHECK_ALIGNMENT_SINT16.
        Detailed information on the structure of the signature can be found in
        http://wiki.elektrobit.com/index.php?title=Project:EB_tresos/Architecture/PostBuild&amp;oldid=467588#Post-build_platform_signature_for_consistency_of_endianness_and_alignment_requirements
      </description>
      <rationale>
        Provide means to ensure that the assumptions made during generation of the post build are met by the real machine.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_PostBuildSignature</srcid><srcstatus/><internalId>646</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>220</internalId></specobject>

    <specobject>
      <id>Base.Macros.PostBuild.CheckAlignmentSint32</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist a macro definition which checks that the alignment requirements of
        an sint32 variable encoded in the post build config signature matches the machine's
        alignment requirements for sint32 variables.
        The macro shall be named TS_SIG_CHECK_ALIGNMENT_SINT32.
        Detailed information on the structure of the signature can be found in
        http://wiki.elektrobit.com/index.php?title=Project:EB_tresos/Architecture/PostBuild&amp;oldid=467588#Post-build_platform_signature_for_consistency_of_endianness_and_alignment_requirements
      </description>
      <rationale>
        Provide means to ensure that the assumptions made during generation of the post build are met by the real machine.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_PostBuildSignature</srcid><srcstatus/><internalId>646</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>221</internalId></specobject>

    <specobject>
      <id>Base.Macros.PostBuild.CheckAlignmentStruct</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist a macro definition which checks that the minimal alignment requirements
        of structs encoded in the post build config signature matches the machine's minimal
        alignment requirements for structs.
        The macro shall be named TS_SIG_CHECK_ALIGNMENT_STRUCT.
        Detailed information on the structure of the signature can be found in
        http://wiki.elektrobit.com/index.php?title=Project:EB_tresos/Architecture/PostBuild&amp;oldid=467588#Post-build_platform_signature_for_consistency_of_endianness_and_alignment_requirements
      </description>
      <rationale>
        Provide means to ensure that the assumptions made during generation of the post build are met by the real machine.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_PostBuildSignature</srcid><srcstatus/><internalId>646</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>222</internalId></specobject>

    <specobject>
      <id>Base.Macros.PostBuild.CheckAlignmentArray</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist a macro definition which checks that the minimal alignment requirements
        of arrays encoded in the post build config signature matches the machine's minimal
        alignment requirements for arrays.
        The macro shall be named TS_SIG_CHECK_ALIGNMENT_ARRAY.
        Detailed information on the structure of the signature can be found in
        http://wiki.elektrobit.com/index.php?title=Project:EB_tresos/Architecture/PostBuild&amp;oldid=467588#Post-build_platform_signature_for_consistency_of_endianness_and_alignment_requirements
      </description>
      <rationale>
        Provide means to ensure that the assumptions made during generation of the post build are met by the real machine.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_PostBuildSignature</srcid><srcstatus/><internalId>646</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>223</internalId></specobject>

    <specobject>
      <id>Base.Macros.PostBuild.CheckEndianness</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist a macro definition which checks that the endianness encoded in the
        post build config signature matches the machine's endianness
        The macro shall be named TS_SIG_CHECK_ENDIANESS.
        Detailed information on the structure of the signature can be found in
        http://wiki.elektrobit.com/index.php?title=Project:EB_tresos/Architecture/PostBuild&amp;oldid=467588#Post-build_platform_signature_for_consistency_of_endianness_and_alignment_requirements
      </description>
      <rationale>
        Provide means to ensure that the assumptions made during generation of the post build are met by the real machine.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_PostBuildSignature</srcid><srcstatus/><internalId>646</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>224</internalId></specobject>

    <specobject>
      <id>Base.Macros.PostBuild.CheckSignature</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist a macro definition or a function declaration which checks that both the
        endianness and the alignment encoded in the post build config signature matches the
        machine's endianness and alignment.
        The macro shall be named TS_PlatformSigIsValid.
        Detailed information on the structure of the signature can be found in
        http://wiki.elektrobit.com/index.php?title=Project:EB_tresos/Architecture/PostBuild&amp;oldid=467588#Post-build_platform_signature_for_consistency_of_endianness_and_alignment_requirements
      </description>
      <rationale>
        Provide means to ensure that the assumptions made during generation of the post build are met by the real machine.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_PostBuildSignature</srcid><srcstatus/><internalId>646</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>225</internalId></specobject>

    <specobject>
      <id>Base.Macros.PostBuild.MakeRefToVar</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist a macro definition which initializes a (relocatable) post-build reference into post-build RAM.
      </description>
      <rationale>
        Relocatable post-build configuration support in EB tresos AutoCore.
        The post-build configuration can contain references into (post-build) RAM.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_PostBuildConfig</srcid><srcstatus/><internalId>645</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>226</internalId></specobject>

    <specobject>
      <id>Base.Macros.PostBuild.MakeNullRefToVar</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist a macro definition which initializes a (relocatable) post-build reference into post-build RAM with an invalid value.
      </description>
      <rationale>
        Relocatable post-build configuration support in EB tresos AutoCore.
        The post-build configuration can contain references into (post-build) RAM.
        Some of these references might need to be invalid (similar to a NULL_PTR).
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_PostBuildConfig</srcid><srcstatus/><internalId>645</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>227</internalId></specobject>

    <specobject>
      <id>Base.Macros.PostBuild.MakeRefToCfg</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist a macro definition which initializes a (relocatable) post-build reference into the post-build config itself.
      </description>
      <rationale>
        Relocatable post-build configuration support in EB tresos AutoCore.
        The post-build configuration can contain references into the post-build config itself.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_PostBuildConfig</srcid><srcstatus/><internalId>645</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>228</internalId></specobject>

    <specobject>
      <id>Base.Macros.PostBuild.MakeNullRefToCfg</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist a macro definition which initializes a (relocatable) post-build reference
        into the post-build config itself with an invalid value.
      </description>
      <rationale>
        Relocatable post-build configuration support in EB tresos AutoCore.
        The post-build configuration can contain references into the post-build config itself.
        Some of these references might need to be invalid (similar to a NULL_PTR).
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_PostBuildConfig</srcid><srcstatus/><internalId>645</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>229</internalId></specobject>

    <specobject>
      <id>Base.Macros.PostBuild.RefToCfg</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist a macro definition which expands to a type for
        a (relocatable) post-build reference into the post-build config itself.
      </description>
      <rationale>
        Relocatable post-build configuration support in EB tresos AutoCore.
        The post-build configuration can contain references into the post-build config itself.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_PostBuildConfig</srcid><srcstatus/><internalId>645</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>230</internalId></specobject>

    <specobject>
      <id>Base.Macros.PostBuild.RefToVar</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist a macro definition which expands to a type for a (relocatable) post-build reference into (post-build) RAM.
      </description>
      <rationale>
      Relocatable post-build configuration support in EB tresos AutoCore.
      The post-build configuration can contain references into (post-build) RAM.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_PostBuildConfig</srcid><srcstatus/><internalId>645</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>231</internalId></specobject>

    <specobject>
      <id>Base.Macros.PostBuild.GetCfg</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist a macro definition which converts a
        (relocatable) post-build reference into the post-build config
        itself into a standard pointer to the respective post build configuration.
      </description>
      <rationale>
      Relocatable post-build configuration support in EB tresos AutoCore.
      The post-build configuration can contain references into the post-build config itself.
      The static module code needs to access the post-build configuration via these references.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_PostBuildConfig</srcid><srcstatus/><internalId>645</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>232</internalId></specobject>

    <specobject>
      <id>Base.Macros.PostBuild.GetVar</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist a macro definition which converts a
        (relocatable) post-build reference into (post-build) RAM into a
        standard pointer to the respective RAM location.
      </description>
      <rationale>
        Relocatable post-build configuration support in EB tresos AutoCore.
        The post-build configuration can contain references into (post-build) RAM.
        The static module code needs to access the (post-build) RAM via these references.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_PostBuildConfig</srcid><srcstatus/><internalId>645</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>233</internalId></specobject>

    <specobject>
      <id>Base.Macros.PduIdType</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist a macro definition (TS_SIZE_PduIdType) to reflect the configured PduIdType in EcuC module.
        The macro shall express the size of the chosen value in bytes.
      </description>
      <rationale>
        This allows preprocessor checks to get or validate the size of PduIdType.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_PduTypes</srcid><srcstatus/><internalId>637</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>234</internalId></specobject>

    <specobject>
      <id>Base.Macros.PduLengthType</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist a macro definition (TS_SIZE_PduLengthType) to reflect the configured PduLengthType in EcuC module.
        The macro shall express the size of the chosen value in bytes.
      </description>
      <rationale>
        This allows preprocessor checks to get or validate the size of PduLengthType.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_PduTypes</srcid><srcstatus/><internalId>637</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>235</internalId></specobject>

    <specobject>
      <id>Base.Macros.FATBOOL</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist a macro definition (TS_FATBOOL) that converts a 0/1 boolean to a 0/~0 of the given type.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_FatBool</srcid><srcstatus/><internalId>627</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>236</internalId></specobject>

    <specobject>
      <id>Base.Macros.TS_SELECT</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist a macro definition (TS_SELECT ) that
        chooses the left hand operand when the TS_FATBOOL result equals ~0,
        and the right hand operand when the TS_FATBOOL result equals 0.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_FatBool</srcid><srcstatus/><internalId>627</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>237</internalId></specobject>

    <specobject>
      <id>Base.Memory.Memory8Bit</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        All memory copy, compare, set and bzero functions of the module asc_Base SHALL have a fall-back solution that works on 8-bit processors.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_Mem</srcid><srcstatus/><internalId>603</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>238</internalId></specobject>

    <specobject>
      <id>Base.Memory.MemCpy</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The module asc_Base SHALL provide a function for copying memory which is
        a replacement for the C standard function memcpy() and has the following function signature:

        void TS_MemCpy (void * const dst, void const * const src, const uint32 len);
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_Mem</srcid><srcstatus/><internalId>603</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemCpy</srcid><srcstatus/><internalId>616</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemCpyNoCheck</srcid><srcstatus/><internalId>617</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>239</internalId></specobject>

    <specobject>
      <id>Base.Memory.MemCmp</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The module asc_Base SHALL provide a function for comparing memory which is
        a replacement for the C standard function memcmp(), follows the AUTOSAR type model and has the following function signature:

        Std_ReturnType TS_MemCmp (void const * const a, void const * const b, const uint32 len);
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_Mem</srcid><srcstatus/><internalId>603</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemCmpGood</srcid><srcstatus/><internalId>618</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemCmpNoCheckGood</srcid><srcstatus/><internalId>619</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemCmpBad</srcid><srcstatus/><internalId>620</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemCmpNoCheckBad</srcid><srcstatus/><internalId>621</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>240</internalId></specobject>

    <specobject>
      <id>Base.Memory.MemCmpS</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The module asc_Base SHALL provide a function for comparing memory which is a
        per length run-time invariant replacement for the C standard function memcmp(),
        follows the AUTOSAR type model and has the following function signature:

        Std_ReturnType TS_MemCmpS (void const * const a, void const * const b, const uint32 len);
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_MemCmpSGood</srcid><srcstatus/><internalId>628</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemCmpSNoCheckGood</srcid><srcstatus/><internalId>629</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemCmpSBad</srcid><srcstatus/><internalId>630</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemCmpSNoCheckBad</srcid><srcstatus/><internalId>631</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>241</internalId></specobject>

    <specobject>
      <id>Base.Memory.MemSet</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The module asc_Base SHALL provide a function for setting memory which is
        a replacement for the C standard function memset(),
        follows the AUTOSAR type model and has the following function signature:

        void TS_MemSet (void * const dst, const uint8 val, const uint32 len);
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_Mem</srcid><srcstatus/><internalId>603</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemSet</srcid><srcstatus/><internalId>622</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemSetNoCheck</srcid><srcstatus/><internalId>623</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>242</internalId></specobject>

    <specobject>
      <id>Base.Memory.MemSetS</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The module asc_Base SHALL provide a function for setting memory which is
        a replacement for the C11 standard function memset_s(),
        follows the AUTOSAR type model and has the following function signature:

        void TS_MemSetS (void * const dst, const uint8 val, const uint32 len);
      </description>
      <comment>
        http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1570.pdf; K.3.7.4.1 The memset_s function
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_MemSetS</srcid><srcstatus/><internalId>632</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemSetSNoCheck</srcid><srcstatus/><internalId>633</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>243</internalId></specobject>

    <specobject>
      <id>Base.Memory.MemBZero</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The module asc_Base SHALL provide a function for zeroing memory which is
        a replacement for the C standard function bzero(),
        follows the AUTOSAR type model and has the following function signature:

        void TS_MemBZero (void * const dst, const uint32 len);
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_MemBZero</srcid><srcstatus/><internalId>624</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemBZeroNoCheck</srcid><srcstatus/><internalId>625</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>244</internalId></specobject>

    <specobject>
      <id>Base.Memory.MemBZeroS</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The module asc_Base SHALL provide a function for zeroing memory which is
        a replacement for the C standard function bzero() similar to the C11 standard
        function memset_s(), follows the AUTOSAR type model and has the following function signature:

        void TS_MemBZeroS (void * const dst, const uint32 len);
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_MemBZeroS</srcid><srcstatus/><internalId>634</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemBZeroSNoCheck</srcid><srcstatus/><internalId>635</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>245</internalId></specobject>

    <specobject>
      <id>Base.Memory.MemMove</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The module asc_Base SHALL provide a function for moving memory which is
        a replacement for the C standard function memmove(), has the ability to
        move overlapping memory, follows the AUTOSAR type model and has the following function signature:

        void TS_MemMove (void * const dst, void const * const src, const uint32 len);
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_Mem</srcid><srcstatus/><internalId>603</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemMove</srcid><srcstatus/><internalId>626</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>246</internalId></specobject>

    <specobject>
      <id>Base.Properties.CPU</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Where required by AUTOSAR the module asc_Base SHALL include platform specific headers and type definitions.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_CpuProperties</srcid><srcstatus/><internalId>591</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>247</internalId></specobject>

    <specobject>
      <id>Base.Properties.Files.CanGeneralTypes</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall be a file Can_GeneralTypes.h which provides the following
        data types.
        CAN Driver:
        - Can_PduType (Base.SWS_Can_00415)
        - Can_HwType (CAN496)
        - Can_IdType (Base.ASR413.SWS_Can_00416)
        - Can_HwHandleType (CAN429)
        - Can_StateTransitionType (CAN417)
        - Can_ReturnType (CAN039)
        - Can_ErrorStateType (CAN91003)
        - Can_ErrorType (CAN91021)
        - Can_ControllerStateType (91013)
        CAN Transceiver Driver:
        - CanTrcv_TrcvModeType (CanTrcv163)
        - CanTrcv_TrcvWakeupModeType (CanTrcv164)
        - CanTrcv_TrcvWakeupReasonType (CanTrcv165)
        - CanTrcv_PNActivationType (CanTrcv210)
        - CanTrcv_TrcvFlagStateType (CanTrcv211)
      </description>
      <rationale>
        The file Can_GeneralTypes.h shall be provided by the integrator (CAN437).
        In accordance to Fr_GeneralTypes.h it shall therefore be provided by asc_Base.
      </rationale>
      <comment>
        Type Can_ControllerBaudrateConfigType (CAN414) was rejected for this file
        in spite of requirement CAN438 because this is an implementation specific data type.
      </comment>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_CanGenTypes</srcid><srcstatus/><internalId>596</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_Can_GeneralTypesEnums</srcid><srcstatus/><internalId>605</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>248</internalId></specobject>

    <specobject>
      <id>Base.ModuleInfo.HeaderFile</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist a header file called Base_Modules.h holding information about the modules in the project.
      </description>
      <rationale>
        In order to be more flexible when writing demonstrators, integration test, or similar things,
        it is often necessary to know which modules are really configured in the project.
      </rationale>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Base_Modules.h_72</srcid><srcstatus/><internalId>303</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>249</internalId></specobject>

    <specobject>
      <id>Base.ModuleInfo.EnableStatus</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exists preprocessor macro BASE_&lt;module name&gt;_ENABLED which is set to STD_ON
        when the module is part of the project and is enabled. This macro shall be defined in the header file Base_Modules.h.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_EnabledMacros</srcid><srcstatus/><internalId>583</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ComTest_HeaderMacros</srcid><srcstatus/><internalId>584</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ComTest_BaseModulesVendorApiInfix</srcid><srcstatus/><internalId>592</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>250</internalId></specobject>

    <specobject>
      <id>Base.ModuleInfo.ConfigurationPointer</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        There shall exists a macro BASE_&lt;module name&gt;_CONFIG_PTR which expands to the pointer
        to the configuration structure used for module initialization. This macro shall be defined in the header file Base_Modules.h.
        The macro shall expand to:
          a) nothing in case of a ComM module with an implementationConfigVariant different from
            VariantPostBuild
          b) NULL_PTR in case the module in case the module has multiple configuration container and
            gets the pointer to the configuration from PbcfgM
          c) Address of the first multiple configuration container of the module
            in case the module has multiple configuration container and
            does not get the pointer to the configuration from PbcfgM
          d) &amp;(PbcfgM_Config.PbcfgM_RootConfig) in case of the PbcfgM module
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_ConfigPointerMacros</srcid><srcstatus/><internalId>585</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ComTest_BaseModulesVendorApiInfix</srcid><srcstatus/><internalId>592</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>251</internalId></specobject>

    <specobject>
      <id>Base.ConfigScheme</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        There shall exist a configuration scheme for the module asc_Base.
      </description>
      <rationale>
        The behavior of the module asc_Base needs to be configured at generation time.
        The configuration scheme provides this option.
      </rationale>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Base.xdm.m4_2</srcid><srcstatus/><internalId>556</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>252</internalId></specobject>

    <specobject>
      <id>Base.ConfigScheme.ParamCustomStdIncludeFiles</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        The configuration scheme shall contain a list (&amp;v:lst&amp;) in a container named "CustomStdIncludeFiles".
        The name of the list shall be "CustomStdIncludeFiles".
      </description>
      <rationale>
        Sometimes it is required to insert custom types in exiting code.
        This configuration option provides the possibility to provide the custom types "globally".
        This list is used to configure the names of custom include files
        which are included via Std_Types.h.
        The include statements of the custom include files themselves are placed in the file
        Platform_Types.h (since Platform_Types.h is included by Std_Types.h the custom includes are made available through Std_Types.h)
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_CustomInclude</srcid><srcstatus/><internalId>586</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Base.xdm.m4_50</srcid><srcstatus/><internalId>558</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>253</internalId></specobject>

    <specobject>
      <id>Base.ConfigScheme.PlatformTypesGeneration</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        For each entry in the list "CustomStdIncludeFiles" in the configuration
        scheme, an include statement with the name of the list entry shall be generated in the file Platform_Types.h.
      </description>
      <rationale>
        Sometimes it is required to insert custom types in exiting code.
        This configuration option provides the possibility to provide the custom types "globally".
        The header file Platform_Types.h is already generated.
        The file Std_Types is not generated. Therefore putting the custom includes in the header file
        Platform_Types.h is less effort and causes less changes in existing projects.
        The list "CustomStdIncludeFiles" is used to configure the names of
        custom include files which are included via Std_Types.h.
        The include statements of the custom include files themselves are placed in the file
        Platform_Types.h (since Platform_Types.h is included by Std_Types.h the custom includes are made available through Std_Types.h)
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_CustomInclude</srcid><srcstatus/><internalId>586</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_386</srcid><srcstatus/><internalId>458</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>254</internalId></specobject>

    <specobject>
      <id>Base.ConfigScheme.ParamPostBuildSelectableVariants</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Provide a configuration parameters for setting the names of variants for
        post-build-selectable slave projects and post-build-selectable master projects.
      </description>
      <rationale>
        As long as EB tresos Studio does not support variation in a native fashion,
        the variant names have to configured in the Base plugin.
        This is a workaround and must be removed as soon as EB tresos Studio support variants in ECU configuration.
      </rationale>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Base.xdm.m4_91</srcid><srcstatus/><internalId>559</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>255</internalId></specobject>

    <specobject>
      <id>Base.CustomStdVersionInfoType.ConfigMacro</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The definition of the type Std_VersionInfoType shall depend on the macro STD_VERSION_INFO_TYPE_DEFINED.
        The standard definition (AUTOSAR 4.0.3) shall be used if
        1) The macro STD_VERSION_INFO_TYPE_DEFINED is not defined
        2) The macro STD_VERSION_INFO_TYPE_DEFINED does not equal STD_ON
        Otherwise a custom definition must be provided.
      </description>
      <rationale>
        The type Std_VersionInfoType differs between AUTOSAR revision 3.x and AUTOSAR revision 4.x.
        This causes problems when integrating AUTOSAR 3 and AUTOSAR 4 BSW modules.
        This macro enables the integrator to provide an AUTOSAR 3.x compatible Std_VersionInfoType.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_CustomVersionInfoType</srcid><srcstatus/><internalId>587</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/Std_Types.h.m4_210</srcid><srcstatus/><internalId>543</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>256</internalId></specobject>

    <specobject>
      <id>Base.Properties.OverrideMemCpy</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Provide a boolean configuration parameter 'CustomOverride_MemCpy' in container 'CustomOverrides'
        to enable or disable overriding of the memory copy function:
        - If the parameter is enabled, the macro 'TS_MemCpy' shall not be defined by the default implementation but provided externally;
          the preprocessor shall verify that the macro is defined and fail if not.
        - If the parameter is disabled, the macro 'TS_MemCpy' shall be defined by the default implementation, and the preprocessor shall verify
          that the macro is not defined externally and fail if it is.
      </description>
      <rationale>
        On certain platforms is is possible to implement memory copy more efficiently, it shall be possible to
        define a custom memory copy function and define the TS_MemCpy externally.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_CustomMemCpy</srcid><srcstatus/><internalId>638</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_250</srcid><srcstatus/><internalId>447</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/TSMem.h_12</srcid><srcstatus/><internalId>547</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/Base.xdm.m4_167</srcid><srcstatus/><internalId>560</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>257</internalId></specobject>

    <specobject>
      <id>Base.Properties.OverrideMemSet</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Provide a boolean configuration parameter 'CustomOverride_MemSet' in container 'CustomOverrides'
        to enable or disable overriding of the memory set function.
        - If the parameter is enabled, the macro 'TS_MemSet' shall not be defined by the default implementation but provided externally;
          the preprocessor shall verify that the macro is defined and fail if not.
        - If the parameter is disabled, the macro 'TS_MemSet' shall be defined by the default implementation, and the preprocessor shall verify
          that the macro is not defined externally and fail if it is.
      </description>
      <rationale>
        On certain platforms is is possible to implement memory set more efficiently, it shall be possible to
        define a custom memory set function and define the TS_MemSet externally.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_CustomMemSet</srcid><srcstatus/><internalId>639</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_263</srcid><srcstatus/><internalId>448</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/TSMem.h_21</srcid><srcstatus/><internalId>548</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/Base.xdm.m4_194</srcid><srcstatus/><internalId>561</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>258</internalId></specobject>

    <specobject>
      <id>Base.Properties.OverrideMemSetS</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Provide a boolean configuration parameter 'CustomOverride_MemSetS' in container 'CustomOverrides'
        to enable or disable overriding of the memory set function.
        - If the parameter is enabled, the macro 'TS_MemSetS' shall not be defined by the default implementation but provided externally;
          the preprocessor shall verify that the macro is defined and fail if not.
        - If the parameter is disabled, the macro 'TS_MemSetS' shall be defined by the default implementation, and the preprocessor shall verify
          that the macro is not defined externally and fail if it is.
      </description>
      <rationale>
        On certain platforms is is possible to implement memory set more efficiently, it shall be possible to
        define a custom memory set function and define the TS_MemSetS externally.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_CustomMemSetS</srcid><srcstatus/><internalId>640</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_276</srcid><srcstatus/><internalId>449</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/TSMemS.h_12</srcid><srcstatus/><internalId>551</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/Base.xdm.m4_221</srcid><srcstatus/><internalId>562</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>259</internalId></specobject>

    <specobject>
      <id>Base.Properties.OverrideMemCmp</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Provide a boolean configuration parameter 'CustomOverride_MemCmp' in container 'CustomOverrides'
        to enable or disable overriding of the memory compare function.
        - If the parameter is enabled, the macro 'TS_MemCmp' shall not be defined by the default implementation but provided externally;
          the preprocessor shall verify that the macro is defined and fail if not.
        - If the parameter is disabled, the macro 'TS_MemCmp' shall be defined by the default implementation, and the preprocessor shall verify
          that the macro is not defined externally and fail if it is.
      </description>
      <rationale>
        On certain platforms is is possible to implement memory compare more efficiently, it shall be possible to
        define a custom memory compare function and define the TS_MemCmp externally.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_CustomMemCmp</srcid><srcstatus/><internalId>641</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_289</srcid><srcstatus/><internalId>450</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/TSMem.h_30</srcid><srcstatus/><internalId>549</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/Base.xdm.m4_248</srcid><srcstatus/><internalId>563</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>260</internalId></specobject>

    <specobject>
      <id>Base.Properties.OverrideMemCmpS</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Provide a boolean configuration parameter 'CustomOverride_MemCmpS' in container 'CustomOverrides'
        to enable or disable overriding of the memory compare function.
        - If the parameter is enabled, the macro 'TS_MemCmpS' shall not be defined by the default implementation but provided externally;
          the preprocessor shall verify that the macro is defined and fail if not.
        - If the parameter is disabled, the macro 'TS_MemCmpS' shall be defined by the default implementation, and the preprocessor shall verify
          that the macro is not defined externally and fail if it is.
      </description>
      <rationale>
        On certain platforms is is possible to implement memory compare more efficiently, it shall be possible to
        define a custom memory compare function and define the TS_MemCmpS externally.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_CustomMemCmpS</srcid><srcstatus/><internalId>642</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_302</srcid><srcstatus/><internalId>451</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/TSMemS.h_21</srcid><srcstatus/><internalId>552</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/Base.xdm.m4_275</srcid><srcstatus/><internalId>564</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>261</internalId></specobject>

    <specobject>
      <id>Base.Properties.OverrideMemBZero</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Provide a boolean configuration parameter 'CustomOverride_MemBZero' in container 'CustomOverrides'
        to enable or disable overriding of the memory zeroing function.
        - If the parameter is enabled, the macro 'TS_MemBZero' shall not be defined by the default implementation but provided externally;
          the preprocessor shall verify that the macro is defined and fail if not.
        - If the parameter is disabled, the macro 'TS_MemBZero' shall be defined by the default implementation, and the preprocessor shall verify
          that the macro is not defined externally and fail if it is.
      </description>
      <rationale>
        On certain platforms is is possible to implement memory zeroing more efficiently, it shall be possible to
        define a custom memory copy function and define the TS_MemBZero externally.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_CustomMemBZero</srcid><srcstatus/><internalId>643</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_315</srcid><srcstatus/><internalId>452</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/TSMem.h_39</srcid><srcstatus/><internalId>550</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/Base.xdm.m4_302</srcid><srcstatus/><internalId>565</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>262</internalId></specobject>

    <specobject>
      <id>Base.Properties.OverrideMemBZeroS</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Provide a boolean configuration parameter 'CustomOverride_MemBZeroS' in container 'CustomOverrides'
        to enable or disable overriding of the memory zeroing function.
        - If the parameter is enabled, the macro 'TS_MemBZeroS' shall not be defined by the default implementation but provided externally;
          the preprocessor shall verify that the macro is defined and fail if not.
        - If the parameter is disabled, the macro 'TS_MemBZeroS' shall be defined by the default implementation, and the preprocessor shall verify
          that the macro is not defined externally and fail if it is.
      </description>
      <rationale>
        On certain platforms is is possible to implement memory zeroing more efficiently, it shall be possible to
        define a custom memory copy function and define the TS_MemBZeroS externally.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_CustomMemBZeroS</srcid><srcstatus/><internalId>644</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_328</srcid><srcstatus/><internalId>453</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/TSMemS.h_30</srcid><srcstatus/><internalId>553</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/config/Base.xdm.m4_328</srcid><srcstatus/><internalId>566</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>263</internalId></specobject>

    <specobject>
      <id>Base.Types.SizeType</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Provide the type usize as type for the size of objects analogously to the C type size_t.
      </description>
      <rationale>
        Prevent compiler warnings on cast to different types on 64bit platforms.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ConTest_MemCpy</srcid><srcstatus/><internalId>616</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemCpyNoCheck</srcid><srcstatus/><internalId>617</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemCmpGood</srcid><srcstatus/><internalId>618</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemCmpNoCheckGood</srcid><srcstatus/><internalId>619</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemCmpBad</srcid><srcstatus/><internalId>620</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemCmpNoCheckBad</srcid><srcstatus/><internalId>621</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemSet</srcid><srcstatus/><internalId>622</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemSetNoCheck</srcid><srcstatus/><internalId>623</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemBZero</srcid><srcstatus/><internalId>624</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemBZeroNoCheck</srcid><srcstatus/><internalId>625</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemCmpSGood</srcid><srcstatus/><internalId>628</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemCmpSNoCheckGood</srcid><srcstatus/><internalId>629</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemCmpSBad</srcid><srcstatus/><internalId>630</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemCmpSNoCheckBad</srcid><srcstatus/><internalId>631</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemSetS</srcid><srcstatus/><internalId>632</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemSetSNoCheck</srcid><srcstatus/><internalId>633</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemBZeroS</srcid><srcstatus/><internalId>634</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_ConTest_MemBZeroSNoCheck</srcid><srcstatus/><internalId>635</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_367</srcid><srcstatus/><internalId>455</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations><ruleid>WRN.swuts.needscoverage.count</ruleid></oreqmViolations><covstatus>covered</covstatus><internalId>264</internalId></specobject>

    <specobject>
      <id>Base.Types.PNCHandleType</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Name: PNCHandleType
        Type: uint16
        Description: Used to store the identifier of a partial network cluster.
      </description>
      <rationale>
        PNCHandleType is used for PNC identifiers in various API functions.
        As ComM supports the configuration of 504 different PNCs this type needs to be uint16.
      </rationale>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/ComStack_Types.h.m4_136</srcid><srcstatus/><internalId>483</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>265</internalId></specobject>

    <specobject>
      <id>Base.ConfigScheme.BaseDbgHeaderFile</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The configuration scheme shall contain an optional string parameter "BaseDbgHeaderFile".
      </description>
      <rationale>
        The customer needs to include an header file for the usage of the debug macros in BSW modules.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_DbgBaseTest_EnabledMacro</srcid><srcstatus/><internalId>588</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_DbgTest_BaseDbgHeaderFileInclude</srcid><srcstatus/><internalId>589</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_DbgBaseTest_DisabledMacro</srcid><srcstatus/><internalId>595</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Base.xdm.m4_19</srcid><srcstatus/><internalId>557</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>266</internalId></specobject>

    <specobject>
      <id>Base.Dbg.ConfigMacro</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the parameter "BaseDbgHeaderFile" is enabled:

        #define BASE_DBG_ENABLE STD_ON

        else

        #define BASE_DBG_ENABLE STD_OFF

        shall be generated into Platform_Types.h
      </description>
      <rationale>
        The macro is used to disable inclusion of Base_Dbg.h.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_DbgBaseTest_EnabledMacro</srcid><srcstatus/><internalId>588</internalId></linkedfrom><linkedfrom><srcid>TS_BASE_DbgBaseTest_DisabledMacro</srcid><srcstatus/><internalId>595</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_237</srcid><srcstatus/><internalId>446</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>267</internalId></specobject>

    <specobject>
      <id>Base.Dbg.Base_Dbg_h</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the parameter "BaseDbgHeaderFile" is enabled a include statement with the name of the parameter shall be generated in the file Base_Dbg.h,
        otherwise the file shall remain empty (beside the standard entries for header files).
      </description>
      <rationale>
        The customer needs to include an header file for the usage of the debug macros in BSW modules.
      </rationale>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_DbgTest_BaseDbgHeaderFileInclude</srcid><srcstatus/><internalId>589</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Base_Dbg.h_8</srcid><srcstatus/><internalId>302</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>268</internalId></specobject>

    <specobject>
      <id>Base.EcuConfiguration.Generator</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Provide a generator mode 'export_asr_config' which writes the ECU configuration in arxml format.
        This mode shall create a configuration file for each module which is part of the project.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/plugin.xml.m4_37</srcid><srcstatus/><internalId>581</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>269</internalId></specobject>

    <specobject>
      <id>Base.EcuConfiguration.Generator.AutosarVersion</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Provide the configuration parameters to choose the Autosar version for the ECU configuration which is generated.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Base.xdm.m4_1170</srcid><srcstatus/><internalId>575</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>270</internalId></specobject>

    <specobject>
      <id>Base.EcuConfiguration.Generator.AlwaysExport</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Provide the configuration parameters to enable export of ECU parameter configuration in all generation modes.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/Base.xdm.m4_1148</srcid><srcstatus/><internalId>574</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>Base_EcuConfigExporter</srcid><srcstatus/><internalId>647</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>271</internalId></specobject>

    <specobject>
      <id>Base.Eth.Eth_BufIdxType</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Eth_GeneralTypes.h shall provide a type Eth_BufIdxType which is configurable to uint32 or uint8,
        depending on the value of configuration parameter EthIfGeneral/EthIfPublicHandleTypeEnum.
        If EthIfGeneral/EthIfPublicHandleTypeEnum does not exist, Eth_BufIdxType shall be equivalent to an uint8.
      </description>
      <comment>
        In newer Autosar versions Eth_BufIdxType is defined as uint32, however older version used an uint8 instead of Eth_BufIdxType.
        This requirements enables configurable compatibility to different Eth driver versions with different requirements.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Eth_GeneralTypes_Cfg.h_18</srcid><srcstatus/><internalId>431</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_EthGeneralTypes</srcid><srcstatus/><internalId>599</internalId></linkedfrom><linkedfrom><srcid>TS_Base_ComTest_EthIfPublicHandleTypeEnum_uint32</srcid><srcstatus/><internalId>602</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>272</internalId></specobject>

    <specobject>
      <id>Base.VAR.CoreScope</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        VAR SwAddrMethods with SECTION-INITIALIZATION-POLICY CLEARED and INIT shall be defined with
        the word LOCAL in the short name or the symbol(if it is defined) and with the coreLocal option attribute.
      </description>
      <comment>
        Tested in asc_MemMap.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/Base_Bswmd.arxml.m4_2232</srcid><srcstatus/><internalId>577</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>273</internalId></specobject>

    <specobject>
      <id>Base.CODE.CoreScope</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        CODE SwAddrMethods shall be defined with the word LOCAL in the short name or the symbol (if it is defined) and with the coreLocal option attribute.
      </description>
      <comment>
        Tested in asc_MemMap.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/Base_Bswmd.arxml.m4_2233</srcid><srcstatus/><internalId>578</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>274</internalId></specobject>

    <specobject>
      <id>Base.Safety</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SwAddrMethods shall be defined with the word ASIL_A(ASIL_B, ASIL_C or ASIL_D) in the short name
        or the symbol (if it is defined) and with the safetyAsilA(safetyAsilB, safetyAsilC or safetyAsilD) option attribute.
      </description>
      <comment>
        Tested in asc_MemMap.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/Base_Bswmd.arxml.m4_2234</srcid><srcstatus/><internalId>579</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>275</internalId></specobject>

    <specobject>
      <id>Base.Types.TpDataStateNull</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        TpDataStateType shall be extended by an additional enum value EB_TP_RETRYINFONULL.
      </description>
      <rationale>
        EB_TP_RETRYINFONULL is used to handle cases where a NULL_PTR is provided for a parameter
        of type RetryInfoType, which is valid in general, but the API cannot handle the NULL_PTR in specific cases because it is dereferenced.
      </rationale>
      <comment>
        This enum value is used in asc_PduR BSW distribution. API calls are handled by SchM,
        which stores all parameters and in the process dereferences all parameters which are pointers.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/ComStack_Types.h.m4_193</srcid><srcstatus/><internalId>489</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>276</internalId></specobject>

    <specobject>
      <id>Base.DataConstr.Availability</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The BSWMD shall define DataConstraints for the following Data Types: boolean, [s]uint8[_least], [s]uint16[_least], [s]uint32[_least].
      </description>
      <rationale>
        A2L uses DataConstraints from Base. Definitions shall be kept for backwards compatibility.
      </rationale>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/Base_Bswmd.arxml.m4_3014</srcid><srcstatus/><internalId>580</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>277</internalId></specobject>

    <specobject>
      <id>Base.DataConstr.References</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The ImplementationDataTypes of boolean, [s]uint8[_least], [s]uint16[_least] and [s]uint32[_least] must not reference any DataConstraint.
      </description>
      <rationale>
        There exists compatibility rules for ImplementationDataTypes referring to DataConstraints.
        In case the mentioned EB ImplementationDataTypes use such references they get incompatible with ImplementationDataTypes of OEMs.
      </rationale>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate_swcd/swcd/Base_Bswmd.arxml.m4_404</srcid><srcstatus/><internalId>576</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>278</internalId></specobject>

    <specobject>
      <id>Base.TypeDefinitions.General</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        1 #define CPU_TYPE_8      8
        2 #define CPU_TYPE_16     16
        3 #define CPU_TYPE_32     32
        4 #define CPU_TYPE_64     64
        5 #define MSB_FIRST       0
        6 #define LSB_FIRST       1
        7 #define HIGH_BYTE_FIRST 0
        8 #define LOW_BYTE_FIRST  1
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_121</srcid><srcstatus/><internalId>439</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_128</srcid><srcstatus/><internalId>440</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/generate/include/Platform_Types.h.m4_135</srcid><srcstatus/><internalId>441</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
         <linksto>Base.ASR403.PLATFORM057</linksto>
         <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>279</internalId></specobject>

  </specobjects>
    <specobjects doctype="swuvc">

    <specobject>
      <id>Base.GeneralTypes.Can_ControllerStateType.vc01</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The type definition of Can_ControllerStateType is available
        and can be used in the test source.
        ----
        Verification method: SW Unit Test - Compile Test
        Preconditions: Parameter Can_ControllerStateType enabled
        Success criteria: Unit Test compiles without compilation error
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_Can_ControllerStateType</srcid><srcstatus/><internalId>597</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
         <linksto>Base.GeneralTypes.Can_ControllerStateType</linksto>
         <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>206</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>280</internalId></specobject>

    <specobject>
      <id>Base.GeneralTypes.Can_ControllerStateType.vc02</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Define a type with the name Can_ControllerStateType in the test
        source. Since Base does not define the type on its own there
        are no conflicts with redeclared symbols.
        ----
        Verification method: SW Unit Test - Compile Test
        Preconditions: Parameter Can_ControllerStateType disabled
        Success criteria: Unit Test compiles without compilation error
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_BASE_ComTest_Can_ControllerStateType</srcid><srcstatus/><internalId>597</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
       <providescoverage>
        <provcov>
          <linksto>Base.GeneralTypes.Can_ControllerStateType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>206</internalId></provcov>
       </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>281</internalId></specobject>

  </specobjects>
    <specobjects doctype="dev">
    <specobject>
      <id>Base.lim.PduLengthType.1</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>3</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;PduLengthType fixed to uint16&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Comtype_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>282</internalId></specobject>
    <specobject>
      <id>Base.lim.PduIdType.1</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>15</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;PduIdType fixed to uint16&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Comtype_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>283</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_51</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>51</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Eth_00156</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>69</internalId></provcov>
        <provcov>
          <linksto>Base.EB_Ref.SWS_Eth_00026.NotImplementedTypes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>189</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>284</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_64</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>64</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Eth_00161</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>285</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_73</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>73</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_COMTYPE_00036</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>286</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_93</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>93</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Std_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>174</internalId></provcov>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Std_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>287</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_136</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>136</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_CanTrcv_00165</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>20</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>288</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_147</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>147</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Can_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>5</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>289</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_159</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>159</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.EB_Ref.SWS_Eth_00026.NotImplementedTypes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>189</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>290</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_174</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>174</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.EB_Ref.SWS_Std_00030.ComStackTypes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>191</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>291</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_175</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>175</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.EB_Ref.SWS_Std_00030.StandardTypes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>190</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>292</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_200</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>200</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Std_00025</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>293</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_201</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>201</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Std_00024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>168</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>294</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_202</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>202</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Std_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>169</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>295</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_203</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>203</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Std_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>171</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>296</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_216</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>216</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Std_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>170</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>297</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_225</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>225</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Std_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>298</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_241</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>241</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Std_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>174</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>299</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_255</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>255</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Std_00023</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>300</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_256</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>256</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Std_00022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>173</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>301</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate/include/Base_Dbg.h_8</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Base_Dbg.h</sourcefile>
      <sourceline>8</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.Dbg.Base_Dbg_h</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>268</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>302</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate/include/Base_Modules.h_72</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Base_Modules.h</sourcefile>
      <sourceline>72</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ModuleInfo.HeaderFile</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>249</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>303</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate/include/Can_GeneralTypes_Cfg.h_22</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Can_GeneralTypes_Cfg.h</sourcefile>
      <sourceline>22</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.GeneralTypes.Can_ControllerStateType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>206</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>304</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Can_GeneralTypes_Cfg.h_34</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Can_GeneralTypes_Cfg.h</sourcefile>
      <sourceline>34</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Can_00429</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>4</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>305</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Can_GeneralTypes_Cfg.h_49</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Can_GeneralTypes_Cfg.h</sourcefile>
      <sourceline>49</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR413.SWS_Can_00416</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>306</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Can_GeneralTypes_Cfg.h_54</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Can_GeneralTypes_Cfg.h</sourcefile>
      <sourceline>54</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Can_00416</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>3</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>307</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate/include/ComStack_Cfg.h_2</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/ComStack_Cfg.h</sourcefile>
      <sourceline>2</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR403.COMTYPE016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>308</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/ComStack_Cfg.h_7</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/ComStack_Cfg.h</sourcefile>
      <sourceline>7</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Comtype_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
        <provcov>
          <linksto>Base.ASR403.COMTYPE029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>309</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/ComStack_Cfg.h_33</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/ComStack_Cfg.h</sourcefile>
      <sourceline>33</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Comtype_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_COMTYPE_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Comtype_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Comtype_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Comtype_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Comtype_00017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>32</internalId></provcov>
        <provcov>
          <linksto>Base.ASR403.COMTYPE029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>310</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/ComStack_Cfg.h_41</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/ComStack_Cfg.h</sourcefile>
      <sourceline>41</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Comtype_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_COMTYPE_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Comtype_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
        <provcov>
          <linksto>Base.ASR403.COMTYPE029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>311</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_17</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>17</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_91043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>312</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_24</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>24</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_91043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>313</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_31</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>31</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_91043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>314</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_38</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>38</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_91043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>315</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_45</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>45</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_91043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>316</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_52</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>52</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_91043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>317</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_59</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>59</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_91043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>318</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_66</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>66</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_91043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>319</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_73</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>73</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_91043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>320</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_81</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>81</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_91043_ADD01</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>321</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_92</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>92</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>322</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_99</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>99</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>323</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_106</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>106</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>324</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_113</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>113</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>325</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_120</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>120</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>326</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_127</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>127</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>327</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_134</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>134</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>328</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_141</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>141</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>329</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_148</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>148</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>330</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_155</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>155</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>331</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_162</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>162</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>332</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_169</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>169</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>333</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_176</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>176</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>334</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_183</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>183</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>335</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_190</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>190</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>336</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_197</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>197</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>337</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_204</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>204</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>338</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_211</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>211</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>339</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_218</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>218</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>340</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_225</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>225</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>341</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_232</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>232</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>342</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_239</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>239</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>343</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_246</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>246</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>344</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_253</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>253</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>345</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_260</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>260</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>346</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_267</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>267</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>347</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_274</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>274</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>348</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_281</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>281</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>349</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_288</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>288</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>350</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_295</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>295</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>351</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_302</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>302</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>352</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_309</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>309</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>353</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_316</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>316</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>354</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_324</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>324</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>355</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_331</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>331</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>356</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_338</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>338</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>357</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_345</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>345</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>358</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_352</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>352</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>359</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_359</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>359</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>360</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_366</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>366</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>361</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_373</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>373</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>362</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_380</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>380</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>363</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_387</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>387</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>364</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_394</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>394</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>365</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_401</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>401</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>366</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_408</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>408</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>367</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_415</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>415</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>368</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_424</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>424</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>369</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_431</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>431</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>370</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_438</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>438</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>371</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_445</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>445</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>372</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_452</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>452</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>373</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_459</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>459</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>374</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_466</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>466</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>375</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_473</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>473</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>376</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_480</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>480</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>377</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_487</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>487</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>378</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_494</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>494</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>379</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_501</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>501</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>380</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_508</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>508</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>381</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_515</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>515</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>382</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_522</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>522</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>383</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_529</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>529</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>384</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_536</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>536</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>385</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_543</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>543</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>386</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_550</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>550</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>387</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_557</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>557</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>388</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_564</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>564</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>389</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_571</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>571</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>390</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_578</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>578</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>391</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_587</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>587</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_91024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>392</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_594</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>594</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_91024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>393</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_601</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>601</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_91024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>394</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_608</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>608</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_91024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>395</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_615</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>615</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_91024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>396</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_625</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>625</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>397</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_634</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>634</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>398</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_643</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>643</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01049</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>399</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_650</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>650</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01049</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>400</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_659</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>659</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>401</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_666</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>666</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>402</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_673</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>673</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>403</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_680</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>680</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>404</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_687</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>687</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>405</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_694</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>694</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>406</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_701</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>701</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>407</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_708</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>708</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>408</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_715</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>715</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>409</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_722</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>722</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>410</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_729</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>729</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>411</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_736</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>736</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>412</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_743</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>743</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>413</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_750</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>750</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>414</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_757</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>757</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>415</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_764</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>764</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>416</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_771</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>771</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>417</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_779</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>779</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01031_ADD01</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>204</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>418</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_790</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>790</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>419</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_795</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>795</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>420</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_801</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>801</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_91024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>421</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_806</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>806</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>422</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_811</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>811</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01049</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>423</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_816</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>816</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>424</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_834</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>834</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>65</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>425</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_852</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>852</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>67</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>426</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_876</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>876</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>427</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_933</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>933</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>61</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>428</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_992</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>992</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_91026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>64</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>429</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m_1041</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Crypto_R2111_GeneralTypes.m</sourcefile>
      <sourceline>1041</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>430</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate/include/Eth_GeneralTypes_Cfg.h_18</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Eth_GeneralTypes_Cfg.h</sourcefile>
      <sourceline>18</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.EB_Ref.SWS_Eth_00026.ImplementedTypes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Eth_00175</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
        <provcov>
          <linksto>Base.Eth.Eth_BufIdxType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>272</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>431</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate/include/Lin_GeneralTypes_Cfg.h_12</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Lin_GeneralTypes_Cfg.h</sourcefile>
      <sourceline>12</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.EB_Ref.SWS_Lin_00230.AllValuesForLinIfLinDriverAPI</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>432</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate/include/Platform_Types.h.m4_16</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Platform_Types.h.m4</sourcefile>
      <sourceline>16</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR403.PLATFORM001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>110</internalId></provcov>
        <provcov>
          <linksto>Base.ASR403.PLATFORM003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>433</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Platform_Types.h.m4_94</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Platform_Types.h.m4</sourcefile>
      <sourceline>94</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Platform_00054</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>434</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Platform_Types.h.m4_97</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Platform_Types.h.m4</sourcefile>
      <sourceline>97</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Platform_00056</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>139</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>435</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Platform_Types.h.m4_101</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Platform_Types.h.m4</sourcefile>
      <sourceline>101</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Platform_00054</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>436</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Platform_Types.h.m4_104</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Platform_Types.h.m4</sourcefile>
      <sourceline>104</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Platform_00056</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>139</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>437</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Platform_Types.h.m4_110</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Platform_Types.h.m4</sourcefile>
      <sourceline>110</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Platform_00054</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>438</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Platform_Types.h.m4_121</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Platform_Types.h.m4</sourcefile>
      <sourceline>121</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.TypeDefinitions.General</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>279</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>439</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Platform_Types.h.m4_128</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Platform_Types.h.m4</sourcefile>
      <sourceline>128</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.TypeDefinitions.General</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>279</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>440</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Platform_Types.h.m4_135</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Platform_Types.h.m4</sourcefile>
      <sourceline>135</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.TypeDefinitions.General</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>279</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>441</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Platform_Types.h.m4_138</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Platform_Types.h.m4</sourcefile>
      <sourceline>138</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Platform_00064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>442</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Platform_Types.h.m4_188</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Platform_Types.h.m4</sourcefile>
      <sourceline>188</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Platform_00044</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>130</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00045</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>443</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Platform_Types.h.m4_191</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Platform_Types.h.m4</sourcefile>
      <sourceline>191</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Platform_00043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>129</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00049</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00038</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>444</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Platform_Types.h.m4_214</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Platform_Types.h.m4</sourcefile>
      <sourceline>214</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Platform_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00046</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00050</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>135</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00051</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>445</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Platform_Types.h.m4_237</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Platform_Types.h.m4</sourcefile>
      <sourceline>237</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.Dbg.ConfigMacro</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>267</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>446</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Platform_Types.h.m4_250</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Platform_Types.h.m4</sourcefile>
      <sourceline>250</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.OverrideMemCpy</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>257</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>447</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Platform_Types.h.m4_263</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Platform_Types.h.m4</sourcefile>
      <sourceline>263</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.OverrideMemSet</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>258</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>448</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Platform_Types.h.m4_276</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Platform_Types.h.m4</sourcefile>
      <sourceline>276</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.OverrideMemSetS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>259</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>449</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Platform_Types.h.m4_289</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Platform_Types.h.m4</sourcefile>
      <sourceline>289</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.OverrideMemCmp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>260</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>450</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Platform_Types.h.m4_302</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Platform_Types.h.m4</sourcefile>
      <sourceline>302</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.OverrideMemCmpS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>261</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>451</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Platform_Types.h.m4_315</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Platform_Types.h.m4</sourcefile>
      <sourceline>315</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.OverrideMemBZero</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>452</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Platform_Types.h.m4_328</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Platform_Types.h.m4</sourcefile>
      <sourceline>328</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.OverrideMemBZeroS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>263</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>453</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Platform_Types.h.m4_344</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Platform_Types.h.m4</sourcefile>
      <sourceline>344</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR403.PLATFORM005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>149</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>112</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00018</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>116</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00023</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>120</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00025</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>123</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00041</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>127</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00042</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>128</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00060</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>137</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00066</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>140</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00067</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>454</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Platform_Types.h.m4_367</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Platform_Types.h.m4</sourcefile>
      <sourceline>367</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.Types.SizeType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>264</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>455</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Platform_Types.h.m4_377</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Platform_Types.h.m4</sourcefile>
      <sourceline>377</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Platform_91001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>456</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Platform_Types.h.m4_380</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Platform_Types.h.m4</sourcefile>
      <sourceline>380</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Platform_91002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>146</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>457</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/Platform_Types.h.m4_386</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate/include/Platform_Types.h.m4</sourcefile>
      <sourceline>386</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ConfigScheme.PlatformTypesGeneration</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>254</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>458</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/include/Can_GeneralTypes.h_2</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Can_GeneralTypes.h</sourcefile>
      <sourceline>2</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR403.CAN439</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>13</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>459</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Can_GeneralTypes.h_7</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Can_GeneralTypes.h</sourcefile>
      <sourceline>7</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR403.CAN437</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>11</internalId></provcov>
        <provcov>
          <linksto>Base.ASR413.SWS_Can_00487</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>460</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Can_GeneralTypes.h_18</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Can_GeneralTypes.h</sourcefile>
      <sourceline>18</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Can_00436</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>1</internalId></provcov>
        <provcov>
          <linksto>Base.ASR403.CAN438</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>461</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Can_GeneralTypes.h_23</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Can_GeneralTypes.h</sourcefile>
      <sourceline>23</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Can_00415</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>2</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>462</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Can_GeneralTypes.h_33</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Can_GeneralTypes.h</sourcefile>
      <sourceline>33</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR22-11.SWS_CAN_91029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>463</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Can_GeneralTypes.h_44</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Can_GeneralTypes.h</sourcefile>
      <sourceline>44</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Can_00496</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>6</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>464</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Can_GeneralTypes.h_55</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Can_GeneralTypes.h</sourcefile>
      <sourceline>55</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR403.CAN417</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>14</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>465</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Can_GeneralTypes.h_66</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Can_GeneralTypes.h</sourcefile>
      <sourceline>66</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR403.CAN039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>466</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Can_GeneralTypes.h_76</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Can_GeneralTypes.h</sourcefile>
      <sourceline>76</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Can_91003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>467</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Can_GeneralTypes.h_85</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Can_GeneralTypes.h</sourcefile>
      <sourceline>85</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Can_91021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>468</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Can_GeneralTypes.h_102</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Can_GeneralTypes.h</sourcefile>
      <sourceline>102</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.GeneralTypes.Can_ControllerStateType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>206</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>469</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Can_GeneralTypes.h_105</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Can_GeneralTypes.h</sourcefile>
      <sourceline>105</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Can_91013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>470</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Can_GeneralTypes.h_118</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Can_GeneralTypes.h</sourcefile>
      <sourceline>118</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_CanTrcv_00163</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>471</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Can_GeneralTypes.h_128</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Can_GeneralTypes.h</sourcefile>
      <sourceline>128</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_CanTrcv_00164</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>472</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Can_GeneralTypes.h_140</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Can_GeneralTypes.h</sourcefile>
      <sourceline>140</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR403.CanTrcv165</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>473</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Can_GeneralTypes.h_164</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Can_GeneralTypes.h</sourcefile>
      <sourceline>164</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.EB_Ref.SWS_CanTrcv_00210.AvailableVia</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>474</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Can_GeneralTypes.h_173</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Can_GeneralTypes.h</sourcefile>
      <sourceline>173</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.EB_Ref.SWS_CanTrcv_00211.AvailableVia</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>475</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/include/ComStack_Types.h.m4_2</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/ComStack_Types.h.m4</sourcefile>
      <sourceline>2</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR403.COMTYPE016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>476</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/ComStack_Types.h.m4_4</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/ComStack_Types.h.m4</sourcefile>
      <sourceline>4</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR403.COMTYPE003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Comtype_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>477</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/ComStack_Types.h.m4_10</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/ComStack_Types.h.m4</sourcefile>
      <sourceline>10</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR403.STD016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
        <provcov>
          <linksto>Base.ASR403.COMTYPE001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>478</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/ComStack_Types.h.m4_12</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/ComStack_Types.h.m4</sourcefile>
      <sourceline>12</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR403.COMTYPE001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>479</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/ComStack_Types.h.m4_98</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/ComStack_Types.h.m4</sourcefile>
      <sourceline>98</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR403.COMTYPE021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>480</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/ComStack_Types.h.m4_106</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/ComStack_Types.h.m4</sourcefile>
      <sourceline>106</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR403.COMTYPE021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>481</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/ComStack_Types.h.m4_117</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/ComStack_Types.h.m4</sourcefile>
      <sourceline>117</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_COMTYPE_00011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>482</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/ComStack_Types.h.m4_136</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/ComStack_Types.h.m4</sourcefile>
      <sourceline>136</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.Types.PNCHandleType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>265</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>483</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/ComStack_Types.h.m4_144</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/ComStack_Types.h.m4</sourcefile>
      <sourceline>144</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_COMTYPE_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>484</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/ComStack_Types.h.m4_169</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/ComStack_Types.h.m4</sourcefile>
      <sourceline>169</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_COMTYPE_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>485</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/ComStack_Types.h.m4_187</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/ComStack_Types.h.m4</sourcefile>
      <sourceline>187</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR403.COMTYPE020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>486</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/ComStack_Types.h.m4_191</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/ComStack_Types.h.m4</sourcefile>
      <sourceline>191</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_COMTYPE_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>487</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/ComStack_Types.h.m4_192</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/ComStack_Types.h.m4</sourcefile>
      <sourceline>192</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_COMTYPE_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>488</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/ComStack_Types.h.m4_193</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/ComStack_Types.h.m4</sourcefile>
      <sourceline>193</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.Types.TpDataStateNull</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>276</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>489</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/ComStack_Types.h.m4_227</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/ComStack_Types.h.m4</sourcefile>
      <sourceline>227</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_COMTYPE_00037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>490</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/ComStack_Types.h.m4_239</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/ComStack_Types.h.m4</sourcefile>
      <sourceline>239</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_COMTYPE_00038</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>491</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/ComStack_Types.h.m4_248</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/ComStack_Types.h.m4</sourcefile>
      <sourceline>248</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR413.SWS_COMTYPE_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>492</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/ComStack_Types.h.m4_252</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/ComStack_Types.h.m4</sourcefile>
      <sourceline>252</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR413.SWS_COMTYPE_00040</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>493</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/include/Eth_GeneralTypes.h_5</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Eth_GeneralTypes.h</sourcefile>
      <sourceline>5</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR430.SWS_Eth_00149</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>87</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>494</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Eth_GeneralTypes.h_36</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Eth_GeneralTypes.h</sourcefile>
      <sourceline>36</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.EB_Ref.SWS_Eth_00026.ImplementedTypes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Eth_00158</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>70</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>495</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Eth_GeneralTypes.h_46</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Eth_GeneralTypes.h</sourcefile>
      <sourceline>46</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Eth_00159</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>496</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Eth_GeneralTypes.h_50</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Eth_GeneralTypes.h</sourcefile>
      <sourceline>50</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.EB_Ref.SWS_Eth_00026.ImplementedTypes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Eth_00160</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>72</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>497</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Eth_GeneralTypes.h_58</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Eth_GeneralTypes.h</sourcefile>
      <sourceline>58</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.EB_Ref.SWS_Eth_00026.ImplementedTypes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Eth_00161</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>498</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Eth_GeneralTypes.h_70</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Eth_GeneralTypes.h</sourcefile>
      <sourceline>70</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.EB_Ref.SWS_Eth_00026.ImplementedTypes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Eth_00162</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>74</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>499</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Eth_GeneralTypes.h_82</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Eth_GeneralTypes.h</sourcefile>
      <sourceline>82</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.EB_Ref.SWS_Eth_00026.ImplementedTypes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Eth_00163</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>500</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Eth_GeneralTypes.h_92</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Eth_GeneralTypes.h</sourcefile>
      <sourceline>92</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.EB_Ref.SWS_Eth_00026.ImplementedTypes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Eth_00177</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>501</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Eth_GeneralTypes.h_96</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Eth_GeneralTypes.h</sourcefile>
      <sourceline>96</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.EB_Ref.SWS_Eth_00026.ImplementedTypes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Eth_00178</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>502</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Eth_GeneralTypes.h_105</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Eth_GeneralTypes.h</sourcefile>
      <sourceline>105</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.EB_Ref.SWS_Eth_00026.ImplementedTypes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Eth_00179</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>503</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Eth_GeneralTypes.h_113</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Eth_GeneralTypes.h</sourcefile>
      <sourceline>113</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.EB_Ref.SWS_Eth_00026.ImplementedTypes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Eth_00180</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>504</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Eth_GeneralTypes.h_121</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Eth_GeneralTypes.h</sourcefile>
      <sourceline>121</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Eth_91001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>505</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Eth_GeneralTypes.h_164</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Eth_GeneralTypes.h</sourcefile>
      <sourceline>164</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.EB_Ref.SWS_Eth_00026.ImplementedTypes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Eth_91007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>506</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Eth_GeneralTypes.h_190</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Eth_GeneralTypes.h</sourcefile>
      <sourceline>190</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.EB_Ref.SWS_Eth_00026.ImplementedTypes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Eth_91002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>507</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Eth_GeneralTypes.h_223</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Eth_GeneralTypes.h</sourcefile>
      <sourceline>223</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.EB_Ref.SWS_Eth_00026.ImplementedTypes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Eth_91003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>84</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>508</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Eth_GeneralTypes.h_234</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Eth_GeneralTypes.h</sourcefile>
      <sourceline>234</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.EB_Ref.SWS_Eth_00026.ImplementedTypes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Eth_91004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>85</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>509</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Eth_GeneralTypes.h_480</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Eth_GeneralTypes.h</sourcefile>
      <sourceline>480</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.EB_Ref.SWS_EthIf_91010.AvailableVia</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>510</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Eth_GeneralTypes.h_509</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Eth_GeneralTypes.h</sourcefile>
      <sourceline>509</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.EB_Ref.SWS_EthIf_91010.AvailableVia</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>511</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Eth_GeneralTypes.h_516</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Eth_GeneralTypes.h</sourcefile>
      <sourceline>516</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.EB_Ref.SWS_EthIf_91010.AvailableVia</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>512</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Eth_GeneralTypes.h_521</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Eth_GeneralTypes.h</sourcefile>
      <sourceline>521</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.EB_Ref.SWS_SoAd_91010.AvailableVia</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>186</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>513</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Eth_GeneralTypes.h_542</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Eth_GeneralTypes.h</sourcefile>
      <sourceline>542</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.EB_Ref.SWS_SoAd_91010.AvailableVia</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>186</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>514</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Eth_GeneralTypes.h_547</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Eth_GeneralTypes.h</sourcefile>
      <sourceline>547</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.EB_Ref.SWS_TcpIp_91010.AvailableVia</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>187</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>515</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Eth_GeneralTypes.h_699</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Eth_GeneralTypes.h</sourcefile>
      <sourceline>699</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.EB_Ref.SWS_TcpIp_91010.AvailableVia</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>187</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>516</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/include/Fr_GeneralTypes.h_2</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Fr_GeneralTypes.h</sourcefile>
      <sourceline>2</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Fr_00499</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>91</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>517</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Fr_GeneralTypes.h_7</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Fr_GeneralTypes.h</sourcefile>
      <sourceline>7</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Fr_00117</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>89</internalId></provcov>
        <provcov>
          <linksto>Base.ASR403.FR455</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Fr_00102</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>90</internalId></provcov>
        <provcov>
          <linksto>Base.ASR403.FR657</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>104</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Fr_00500</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>518</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Fr_GeneralTypes.h_16</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Fr_GeneralTypes.h</sourcefile>
      <sourceline>16</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR403.FR599</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>106</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>519</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Fr_GeneralTypes.h_402</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Fr_GeneralTypes.h</sourcefile>
      <sourceline>402</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR403.FR110</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>105</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Fr_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>520</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Fr_GeneralTypes.h_405</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Fr_GeneralTypes.h</sourcefile>
      <sourceline>405</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Fr_00505</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>94</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>521</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Fr_GeneralTypes.h_419</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Fr_GeneralTypes.h</sourcefile>
      <sourceline>419</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Fr_00506</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>522</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Fr_GeneralTypes.h_428</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Fr_GeneralTypes.h</sourcefile>
      <sourceline>428</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Fr_00507</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>96</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>523</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Fr_GeneralTypes.h_437</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Fr_GeneralTypes.h</sourcefile>
      <sourceline>437</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Fr_00508</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>97</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>524</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Fr_GeneralTypes.h_450</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Fr_GeneralTypes.h</sourcefile>
      <sourceline>450</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Fr_00509</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>525</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Fr_GeneralTypes.h_468</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Fr_GeneralTypes.h</sourcefile>
      <sourceline>468</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Fr_00510</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>99</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>526</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Fr_GeneralTypes.h_483</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Fr_GeneralTypes.h</sourcefile>
      <sourceline>483</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Fr_00511</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>100</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>527</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Fr_GeneralTypes.h_492</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Fr_GeneralTypes.h</sourcefile>
      <sourceline>492</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Fr_00512</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>528</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Fr_GeneralTypes.h_502</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Fr_GeneralTypes.h</sourcefile>
      <sourceline>502</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR403.FR514</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>107</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Fr_00514</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>529</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/include/Std_Types.h.m4_2</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Std_Types.h.m4</sourcefile>
      <sourceline>2</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR403.STD003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>178</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Std_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>153</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>530</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Std_Types.h.m4_8</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Std_Types.h.m4</sourcefile>
      <sourceline>8</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Std_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>531</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Std_Types.h.m4_12</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Std_Types.h.m4</sourcefile>
      <sourceline>12</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR403.STD001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>532</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Std_Types.h.m4_18</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Std_Types.h.m4</sourcefile>
      <sourceline>18</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Std_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>533</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Std_Types.h.m4_33</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Std_Types.h.m4</sourcefile>
      <sourceline>33</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Std_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>534</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Std_Types.h.m4_48</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Std_Types.h.m4</sourcefile>
      <sourceline>48</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Std_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>160</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>535</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Std_Types.h.m4_98</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Std_Types.h.m4</sourcefile>
      <sourceline>98</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Std_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>536</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Std_Types.h.m4_101</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Std_Types.h.m4</sourcefile>
      <sourceline>101</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Std_00011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>537</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Std_Types.h.m4_107</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Std_Types.h.m4</sourcefile>
      <sourceline>107</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Std_00011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>538</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Std_Types.h.m4_116</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Std_Types.h.m4</sourcefile>
      <sourceline>116</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Std_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>174</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>539</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Std_Types.h.m4_192</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Std_Types.h.m4</sourcefile>
      <sourceline>192</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Std_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>540</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Std_Types.h.m4_197</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Std_Types.h.m4</sourcefile>
      <sourceline>197</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Std_91001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>541</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Std_Types.h.m4_202</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Std_Types.h.m4</sourcefile>
      <sourceline>202</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Std_91002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>162</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>542</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Std_Types.h.m4_210</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Std_Types.h.m4</sourcefile>
      <sourceline>210</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.CustomStdVersionInfoType.ConfigMacro</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>256</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>543</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Std_Types.h.m4_218</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Std_Types.h.m4</sourcefile>
      <sourceline>218</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Std_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>156</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>544</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Std_Types.h.m4_231</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Std_Types.h.m4</sourcefile>
      <sourceline>231</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Std_91003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>163</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>545</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/Std_Types.h.m4_242</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/Std_Types.h.m4</sourcefile>
      <sourceline>242</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Std_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>546</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/include/TSMem.h_12</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/TSMem.h</sourcefile>
      <sourceline>12</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.OverrideMemCpy</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>257</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>547</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/TSMem.h_21</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/TSMem.h</sourcefile>
      <sourceline>21</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.OverrideMemSet</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>258</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>548</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/TSMem.h_30</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/TSMem.h</sourcefile>
      <sourceline>30</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.OverrideMemCmp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>260</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>549</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/TSMem.h_39</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/TSMem.h</sourcefile>
      <sourceline>39</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.OverrideMemBZero</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>550</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/include/TSMemS.h_12</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/TSMemS.h</sourcefile>
      <sourceline>12</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.OverrideMemSetS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>259</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>551</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/TSMemS.h_21</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/TSMemS.h</sourcefile>
      <sourceline>21</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.OverrideMemCmpS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>261</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>552</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/TSMemS.h_30</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/TSMemS.h</sourcefile>
      <sourceline>30</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.OverrideMemBZeroS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>263</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>553</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/include/TransformerTypes.h_54</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/include/TransformerTypes.h</sourcefile>
      <sourceline>54</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR22-11.SWS_Xfrm_00032</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>0</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>554</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/ComStack_Helpers.c_30</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/src/ComStack_Helpers.c</sourcefile>
      <sourceline>30</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ComStack.FindNextOne</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>192</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>555</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/config/Base.xdm.m4_2</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/config/Base.xdm.m4</sourcefile>
      <sourceline>2</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ConfigScheme</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>252</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>556</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Base.xdm.m4_19</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/config/Base.xdm.m4</sourcefile>
      <sourceline>19</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ConfigScheme.BaseDbgHeaderFile</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>266</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>557</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Base.xdm.m4_50</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/config/Base.xdm.m4</sourcefile>
      <sourceline>50</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ConfigScheme.ParamCustomStdIncludeFiles</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>253</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>558</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Base.xdm.m4_91</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/config/Base.xdm.m4</sourcefile>
      <sourceline>91</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.ConfigScheme.ParamPostBuildSelectableVariants</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>255</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>559</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Base.xdm.m4_167</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/config/Base.xdm.m4</sourcefile>
      <sourceline>167</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.OverrideMemCpy</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>257</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>560</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Base.xdm.m4_194</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/config/Base.xdm.m4</sourcefile>
      <sourceline>194</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.OverrideMemSet</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>258</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>561</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Base.xdm.m4_221</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/config/Base.xdm.m4</sourcefile>
      <sourceline>221</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.OverrideMemSetS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>259</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>562</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Base.xdm.m4_248</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/config/Base.xdm.m4</sourcefile>
      <sourceline>248</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.OverrideMemCmp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>260</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>563</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Base.xdm.m4_275</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/config/Base.xdm.m4</sourcefile>
      <sourceline>275</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.OverrideMemCmpS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>261</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>564</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Base.xdm.m4_302</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/config/Base.xdm.m4</sourcefile>
      <sourceline>302</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.OverrideMemBZero</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>565</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Base.xdm.m4_328</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/config/Base.xdm.m4</sourcefile>
      <sourceline>328</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.OverrideMemBZeroS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>263</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>566</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Base.xdm.m4_355</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/config/Base.xdm.m4</sourcefile>
      <sourceline>355</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.BaseTypes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>194</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>567</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Base.xdm.m4_992</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/config/Base.xdm.m4</sourcefile>
      <sourceline>992</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.CpuConfig</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>568</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Base.xdm.m4_1049</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/config/Base.xdm.m4</sourcefile>
      <sourceline>1049</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.GeneralTypes.Schema</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>569</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Base.xdm.m4_1059</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/config/Base.xdm.m4</sourcefile>
      <sourceline>1059</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.GeneralTypes.Can_ControllerStateType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>206</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>570</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Base.xdm.m4_1080</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/config/Base.xdm.m4</sourcefile>
      <sourceline>1080</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.GeneralTypes.Schema.Crypto_GeneralTypes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>571</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Base.xdm.m4_1096</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/config/Base.xdm.m4</sourcefile>
      <sourceline>1096</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.GeneralTypes.Schema.Crypto_GeneralTypes_R2111</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>202</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>572</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Base.xdm.m4_1110</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/config/Base.xdm.m4</sourcefile>
      <sourceline>1110</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.GeneralTypes.Schema.Crypto_GeneralTypes_R2111_CustomServiceApis</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>203</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>573</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Base.xdm.m4_1148</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/config/Base.xdm.m4</sourcefile>
      <sourceline>1148</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.EcuConfiguration.Generator.AlwaysExport</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>271</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>574</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/Base.xdm.m4_1170</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/config/Base.xdm.m4</sourcefile>
      <sourceline>1170</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.EcuConfiguration.Generator.AutosarVersion</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>270</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>575</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/Base_Bswmd.arxml.m4_404</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate_swcd/swcd/Base_Bswmd.arxml.m4</sourcefile>
      <sourceline>404</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.DataConstr.References</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>278</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>576</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/Base_Bswmd.arxml.m4_2232</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate_swcd/swcd/Base_Bswmd.arxml.m4</sourcefile>
      <sourceline>2232</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.VAR.CoreScope</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>273</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>577</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/Base_Bswmd.arxml.m4_2233</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate_swcd/swcd/Base_Bswmd.arxml.m4</sourcefile>
      <sourceline>2233</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.CODE.CoreScope</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>274</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>578</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/Base_Bswmd.arxml.m4_2234</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate_swcd/swcd/Base_Bswmd.arxml.m4</sourcefile>
      <sourceline>2234</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.Safety</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>275</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>579</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate_swcd/swcd/Base_Bswmd.arxml.m4_3014</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/generate_swcd/swcd/Base_Bswmd.arxml.m4</sourcefile>
      <sourceline>3014</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.DataConstr.Availability</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>277</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>580</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/plugin.xml.m4_37</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/src/Autosar/plugin.xml.m4</sourcefile>
      <sourceline>37</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>Base.EcuConfiguration.Generator</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>269</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>581</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_BASE_ComTest_VoidPtr</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Compile/IN/Base_ComTest_01/source/application/Appl.c</sourcefile>
      <sourceline>45</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verify that Platform_Types.h provides the necessary types&lt;/pre&gt;</description>
      <comment>&lt;pre&gt;Check existance of type for void pointers&lt;/pre&gt;</comment>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Platform_91001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_91002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>146</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>582</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_BASE_ComTest_EnabledMacros</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Compile/IN/Base_ComTest_01/source/application/Appl.c</sourcefile>
      <sourceline>71</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Check if the preprocessor macros BASE_&amp;lt;module name&amp;gt;_ENABLED are generated correctly
Check if the header file Base_Modules.h defines the following macros:
- BASE_DET_ENABLED: STD_ON
- BASE_SOMEIPXF_ENABLED: STD_ON
- BASE_CRC_ENABLED: STD_OFF
Check if the header file Base_Modules.h does not define the following macro:
- BASE_XFRM_ENABLED&lt;/pre&gt;</description>
      <testin>Det Stub enabled, SomeIpXf Stub enabled, Crc Stub disabled</testin>
      <providescoverage>
        <provcov>
          <linksto>Base.ModuleInfo.EnableStatus</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>250</internalId></provcov>
        <provcov>
          <linksto>Base.TPS_ECUC_06036</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>Base.TPS_ECUC_06037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>583</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_BASE_ComTest_HeaderMacros</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Compile/IN/Base_ComTest_01/source/application/Appl.c</sourcefile>
      <sourceline>108</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Check if the preprocessor macros BASE_&amp;lt;module name&amp;gt;_Header are generated correctly
Check if the header file Base_Modules.h defines the following macros:
- BASE_DET_HEADER: &lt;Det.h&gt;
- BASE_SOMEIPXF_HEADER: &lt;SomeIpXf.h&gt;
Check if the header file Base_Modules.h does not define the following macro:
- BASE_XFRM_HEADER&lt;/pre&gt;</description>
      <testin>Det Stub enabled, SomeIpXf Stub enabled</testin>
      <providescoverage>
        <provcov>
          <linksto>Base.ModuleInfo.EnableStatus</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>250</internalId></provcov>
        <provcov>
          <linksto>Base.TPS_ECUC_06036</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>Base.TPS_ECUC_06037</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>584</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_BASE_ComTest_ConfigPointerMacros</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Compile/IN/Base_ComTest_01/source/application/Appl.c</sourcefile>
      <sourceline>139</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Check if the preprocessor macros BASE_&amp;lt;module name&amp;gt;_CONFIG_PTR are generated correctly
Check if the header file Base_Modules.h defines the following macros:
- BASE_COMM_CONFIG_PTR: &amp;lt;empty&amp;gt;
- BASE_ICU_CONFIG_PTR: dereferenced name of first multiple configuration container of Icu module
- BASE_PDUR_CONFIG_PTR: NULL_PTR
- BASE_PBCFGM_CONFIG_PTR: &amp;amp;(PbcfgM_Config.PbcfgM_RootConfig)&lt;/pre&gt;</description>
      <testin>PduR Stub, Icu Stub, Det Stub, PbcfgM; Reference to multiple configuration container of PduR, No reference to multiple configuration container of Icu and ComM</testin>
      <providescoverage>
        <provcov>
          <linksto>Base.ModuleInfo.ConfigurationPointer</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>251</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>585</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_BASE_ComTest_CustomInclude</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Compile/IN/Base_ComTest_01/source/application/Appl.c</sourcefile>
      <sourceline>196</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Check if the custom include files configured in the module are included
correctly from Std_Types via PlatformTypes.&lt;/pre&gt;</description>
      <testin>Base configuration defines the custom include header files TestInclude_1.h and TestInclude_2.h, the include file TestInclude_1.h contains the macro definition of TESTMACRO_TESTINCLUDE_1 and TESTMACRO_TESTINCLUDE_2</testin>
      <providescoverage>
        <provcov>
          <linksto>Base.ConfigScheme.ParamCustomStdIncludeFiles</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>253</internalId></provcov>
        <provcov>
          <linksto>Base.ConfigScheme.PlatformTypesGeneration</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>254</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>586</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_BASE_ComTest_CustomVersionInfoType</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Compile/IN/Base_ComTest_01/source/application/Appl.c</sourcefile>
      <sourceline>216</sourceline>
      <version>1</version>
      <description>Check if it is possible to include a custom defined Std_VersionInfoType in a custom include file and override the definition in Std_Types.h</description>
      <testin>configuration defines a custom include header file with a custom definition of Std_VersionInfoType, Base configuration defines a custom include header file with the following definition: #define STD_VERSION_INFO_TYPE_DEFINED STD_ON</testin>
      <providescoverage>
        <provcov>
          <linksto>Base.CustomStdVersionInfoType.ConfigMacro</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>256</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>587</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_BASE_DbgBaseTest_EnabledMacro</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Compile/IN/Base_ComTest_01/source/application/Appl.c</sourcefile>
      <sourceline>234</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;This test verifies that the macro BASE_DBG_ENABLE is generated with value STD_ON&lt;/pre&gt;</description>
      <testin>The configuration scheme "BaseDbgHeaderFile" shall be enabled in the ECU-Base (Base.xdm) configuration</testin>
      <providescoverage>
        <provcov>
          <linksto>Base.ConfigScheme.BaseDbgHeaderFile</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>266</internalId></provcov>
        <provcov>
          <linksto>Base.Dbg.ConfigMacro</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>267</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>588</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_BASE_DbgTest_BaseDbgHeaderFileInclude</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Compile/IN/Base_ComTest_01/source/application/Appl.c</sourcefile>
      <sourceline>258</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;This test verifies that Base_Dbg.h will be included under the defined preconditions.
This test verifies that the scheme "BaseDbgHeaderFile" generate an include
statement with the name of the parameter in the file Base_Dbg.h&lt;/pre&gt;</description>
      <testin>The configuration scheme "BaseDbgHeaderFile" shall be enabled in the ECU-Base (Base.xdm) configuration, the parameter name of the "BaseDbgHeaderFile" shall be TestInclude_BaseDbg_1.h in the ECU-Base (Base.xdm) configuration</testin>
      <providescoverage>
        <provcov>
          <linksto>Base.ConfigScheme.BaseDbgHeaderFile</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>266</internalId></provcov>
        <provcov>
          <linksto>Base.Dbg.Base_Dbg_h</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>268</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>589</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_BASE_ComTest_CastMacro</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Compile/IN/Base_ComTest_01/source/application/Appl.c</sourcefile>
      <sourceline>282</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;This test verifies that the mascro TS_CAST expands correctly&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.Types.Mapping</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>590</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_BASE_ComTest_CpuProperties</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Compile/IN/Base_ComTest_01/source/application/Appl.c</sourcefile>
      <sourceline>314</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verify that preprocessor macros providing information about CPU features are created correctly&lt;/pre&gt;</description>
      <comment>&lt;pre&gt;Compile test for types from file Platform_Types.h&lt;/pre&gt;</comment>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.CPU</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>247</internalId></provcov>
        <provcov>
          <linksto>Base.Properties.CpuConfig</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>591</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_BASE_ComTest_BaseModulesVendorApiInfix</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Compile/IN/Base_ComTest_01/source/application/Appl.c</sourcefile>
      <sourceline>393</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verify that preprocessor macros providing information if a module is enabled are set&lt;/pre&gt;</description>
      <comment>&lt;pre&gt;Compile test for macros from file Base_Types.h for modules with VendorApiInfix&lt;/pre&gt;</comment>
      <providescoverage>
        <provcov>
          <linksto>Base.ModuleInfo.EnableStatus</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>250</internalId></provcov>
        <provcov>
          <linksto>Base.ModuleInfo.ConfigurationPointer</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>251</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>592</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_BASE_ComTest_BaseTypes</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Compile/IN/Base_ComTest_01/source/application/Appl.c</sourcefile>
      <sourceline>447</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;This test verifies that the mapping from AUTOSAR base types to C data types is generated
from the Base module configuration
Platforms defines the mapping for uint8/sint8 to (un)signed char;
the Base module configuration of this test defines it to (un)signed int;
a test function is declared using the AUTOSAR base types while the test definition is
using the C data types; if the type mapping does not match, the compile error on
conflicting types is raised.
Additionally check if the value of the generated size macro for uint8/sint8 match
the size value for (un)singed int by the compile time assertion macro.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.BaseTypes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>194</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>593</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_BASE_ComTest_AtomicAssign</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Compile/IN/Base_ComTest_AtomicAssign/source/application/Appl.c</sourcefile>
      <sourceline>33</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verify that all AtomicAssign macros can be compiled and linked&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Atomic.Assign</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>193</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>594</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_BASE_DbgBaseTest_DisabledMacro</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Compile/IN/Base_ComTest_AtomicAssign/source/application/Appl.c</sourcefile>
      <sourceline>80</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;This test verifies that the macro BASE_DBG_ENABLE is generated with value STD_OFF&lt;/pre&gt;</description>
      <testin>The configuration scheme "BaseDbgHeaderFile" shall not be enabled in the ECU-Base (Base.xdm) configuration</testin>
      <providescoverage>
        <provcov>
          <linksto>Base.ConfigScheme.BaseDbgHeaderFile</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>266</internalId></provcov>
        <provcov>
          <linksto>Base.Dbg.ConfigMacro</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>267</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>595</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_BASE_ComTest_CanGenTypes</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Compile/IN/Base_ComTest_GeneralTypes/source/application/Appl_Can.c.m4</sourcefile>
      <sourceline>26</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verify that Can_GeneralTypes.h provides the necessary types&lt;/pre&gt;</description>
      <comment>&lt;pre&gt;Compile test for types from file Can_GeneralTypes.h&lt;/pre&gt;</comment>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.Files.CanGeneralTypes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>248</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>596</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_BASE_ComTest_Can_ControllerStateType</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Compile/IN/Base_ComTest_GeneralTypes/source/application/Appl_Can.c.m4</sourcefile>
      <sourceline>139</sourceline>
      <version>1</version>
      <description>Verify that the generation of Can_ControllerStateType depends on the configuration parameter GeneralTypes_Can_ControllerStateType</description>
      <comment>&lt;pre&gt;Compile test for type Can_ControllerStateType&lt;/pre&gt;</comment>
      <testin>The configuration parameter GeneralTypes_Can_ControllerStateType must be permuted between the value "true" and "false"</testin>
      <providescoverage>
        <provcov>
          <linksto>Base.GeneralTypes.Can_ControllerStateType.vc01</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swuvc</linkdestdoctype><linkerror/><internalId>280</internalId></provcov>
        <provcov>
          <linksto>Base.GeneralTypes.Can_ControllerStateType.vc02</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swuvc</linkdestdoctype><linkerror/><internalId>281</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>597</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_BASE_ComTest_CryptoGeneralTypes</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Compile/IN/Base_ComTest_GeneralTypes/source/application/Appl_Crypto.c.m4</sourcefile>
      <sourceline>27</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verify that Crypto_GeneralTypes.h provides the necessary types depending on the configuration&lt;/pre&gt;</description>
      <comment>&lt;pre&gt;Compile test for types from file Crypto_GeneralTypes.h&lt;/pre&gt;</comment>
      <testin>The configuration parameters CryptoGeneralTypes ([]) and CryptoGeneralR2111CustomServiceApi ([true,false]) must be permuted</testin>
      <providescoverage>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>65</internalId></provcov>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>61</internalId></provcov>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>67</internalId></provcov>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01031_ADD01</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>204</internalId></provcov>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01048</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_01049</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_91024</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
        <provcov>
          <linksto>Base.ASR21-11.SWS_Csm_91026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>64</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>598</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_BASE_ComTest_EthGeneralTypes</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Compile/IN/Base_ComTest_GeneralTypes/source/application/Appl_Eth.c</sourcefile>
      <sourceline>26</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verify that Eth_GeneralTypes.h and Eth_GeneralTypes_Cfg.h provide the necessary types&lt;/pre&gt;</description>
      <comment>&lt;pre&gt;Compile test for Eth related types from file Eth_GeneralTypes.h and Eth_GeneralTypes_Cfg.h&lt;/pre&gt;</comment>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Eth_00158</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>70</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Eth_00159</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Eth_00160</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>72</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Eth_00161</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Eth_00162</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>74</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Eth_00163</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Eth_00175</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Eth_00177</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Eth_00178</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Eth_00179</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Eth_00180</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>80</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Eth_91001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>81</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Eth_91002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Eth_91003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>84</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Eth_91004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>85</internalId></provcov>
        <provcov>
          <linksto>Base.Eth.Eth_BufIdxType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>272</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Eth_91007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>599</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_BASE_ComTest_LinGeneralTypes</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Compile/IN/Base_ComTest_GeneralTypes/source/application/Appl_Lin.c.m4</sourcefile>
      <sourceline>26</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Verify that Lin_GeneralTypes.h provides the necessary types&lt;/pre&gt;</description>
      <comment>&lt;pre&gt;Compile test for (partially) types from file Lin_GeneralTypes.h&lt;/pre&gt;</comment>
      <providescoverage>
        <provcov>
          <linksto>Base.EB_Ref.SWS_Lin_00230.AllValuesForLinIfLinDriverAPI</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>600</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_BASE_ComTest_EnforceNonEmptyTranslationUnits</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Compile/IN/Base_ComTest_EnforceNonEmptyTranslationUnits/source/application/Appl.c</sourcefile>
      <sourceline>62</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
Compile test for TS_PREVENTEMPTYTRANSLATIONUNIT, TS_DEPRECATED_TYPEDEF macro,
TS_DEPRECATED_VARIABLE, TS_DEPRECATED_FUNCTION, and TS_DEPRECATED_MACRO macro

Test Description: 
&lt;para&gt;
Verify that TS_PREVENTEMPTYTRANSLATIONUNIT macro can be compiled and linked.
Verify that there are no name clashes in case the TS_PREVENTEMPTYTRANSLATIONUNIT is
used in multiple translation units that are linked into one binary.
&lt;/para&gt;
&lt;para&gt;
Verify that TS_DEPRECATED_TYPEDEF macro can be compiled and linked.
Use the TS_DEPRECATED_TYPEDEF macro in the definition of a typedef
(i.e., deprecatedType) and then use this typedef (i.e., define a
variable (someVariable) of that type).  This should compile properly.
&lt;/para&gt;
&lt;para&gt;
Verify that TS_DEPRECATED_VARIABLE macro can be compiled and linked.
Use the TS_DEPRECATED_VARIABLE macro in the definition of a variable
(i.e., deprecatedVariable) and then use this variable (i.e., assign a
value to it).  This should compile properly.
&lt;/para&gt;
&lt;para&gt;
Verify that TS_DEPRECATED_FUNCTION macro can be compiled and linked.
Use the TS_DEPRECATED_FUNCTION macro in the declaration of a function
(i.e., TestDeprecatedFunction()) and then use this function by calling
it.  This should compile properly.
&lt;/para&gt;
&lt;para&gt;
Verify that TS_DEPRECATED_MACRO macro can be compiled and linked.  Use
the TS_DEPRECATED_MACRO macro in the body of another macro (i.e.,
DEPRECATED_MACRO) and invoke this other macro.  This should compile
properly.
&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 
* compile and link test application

Test Input: 

Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Macros.EnforceNonEmptyTranslationUnits</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>211</internalId></provcov>
        <provcov>
          <linksto>Base.Macros.TagTypedefAsDeprecated</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
        <provcov>
          <linksto>Base.Macros.TagVariableAsDeprecated</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>214</internalId></provcov>
        <provcov>
          <linksto>Base.Macros.TagFunctionAsDeprecated</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>212</internalId></provcov>
        <provcov>
          <linksto>Base.Macros.TagMacroAsDeprecated</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>601</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_Base_ComTest_EthIfPublicHandleTypeEnum_uint32</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Compile/IN/Base_ComTest_EthIfPublicHandleTypeEnum_uint32/source/application/EbTest.c</sourcefile>
      <sourceline>34</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    &lt;para&gt;
      Verify that Eth_BufIdxType and ETH_BUFIDXTYPE_INVALID have the correct values when EthIfPublicHandleTypeEnum is set to uint32.
    &lt;/para&gt;
  
Test Object: None.
Test Precondition: 
    EthIfPublicHandleTypeEnum = uint32
  
Test Execution: 
    01. Verify that Eth_BufIdxType is defined with the correct size.
    02. Verify that ETH_BUFIDXTYPE_INVALID is defined with the correct value.
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Eth.Eth_BufIdxType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>272</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>602</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_BASE_ComTest_Mem</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Compile/IN/Base_ComTest_Memory/source/application/Appl.c</sourcefile>
      <sourceline>30</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Compile test for MemCpy/MemCmp/MemSet functions
Test Description: 
&lt;para&gt;
Verify that MemCpy/MemCmp/MemSet functions can be compiled and linked in an
8 bit environment.
&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 
* compile and link test application

Test Input: 

Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Memory.Memory8Bit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>238</internalId></provcov>
        <provcov>
          <linksto>Base.Memory.MemCpy</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>239</internalId></provcov>
        <provcov>
          <linksto>Base.Memory.MemCmp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>240</internalId></provcov>
        <provcov>
          <linksto>Base.Memory.MemSet</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>242</internalId></provcov>
        <provcov>
          <linksto>Base.Memory.MemMove</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>246</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>603</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_BASE_ConTest_LinGeneralTypes</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_BaseEnumTypes/source/application/EbTest.c.m4</sourcefile>
      <sourceline>175</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    &lt;para&gt;
      Tests all enumeration literals defined in Base, Lin_GeneralTypes.h.
    &lt;/para&gt;
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01. VP (Base.SWS_Lin_00230): Check if the values from Lin_FrameResponseType enum correspond to the ones from Lin_GeneralTypes.h, R20-11
    02. VP (Base.ASR403.LIN230): Check if the values from Lin_FrameResponseType enum correspond to the ones from Lin_GeneralTypes.h, R22-11
    03. VP (SWS_Lin_00229): Check if the values from Lin_FrameCsModelType enum correspond to the ones from Lin_GeneralTypes.h, R22-11
    04. VP (SWS_Lin_00233): Check if the values from Lin_StatusType enum correspond to the ones from Lin_GeneralTypes.h, R22-11
    05. VP (SWS_Lin_91140): Check if the values from Lin_SlaveErrorType enum correspond to the ones from Lin_GeneralTypes.h, R22-11
    06. VP (SWS_LinTrcv_00168): Check if the values from LinTrcv_TrcvModeType enum correspond to the ones from Lin_GeneralTypes.h, R20-11
    07. VP (SWS_LinTrcv_00169): Check if the values from LinTrcv_TrcvWakeupModeType enum correspond to the ones from Lin_GeneralTypes.h, R22-11
    08. VP (SWS_LinTrcv_00170): Check if the values from LinTrcv_TrcvWakeupReasonType enum correspond to the ones from Lin_GeneralTypes.h, R22-11
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Lin_00230</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
        <provcov>
          <linksto>Base.ASR403.LIN230</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>604</internalId></specobject>
    <specobject>
      <id>TS_BASE_ConTest_Can_GeneralTypesEnums</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_BaseEnumTypes/source/application/EbTest.c.m4</sourcefile>
      <sourceline>274</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    &lt;para&gt;
      Tests all enumeration literals defined in Base, Can_GeneralTypes.h.
    &lt;/para&gt;
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01. VP (Base.ASR403.CAN417, Base.Properties.Files.CanGeneralTypes): Check if the values from Can_StateTransitionType enum correspond to the ones from Fr_GeneralTypes.h, R4.0.3
    02. VP (Base.ASR403.CAN039, Base.Properties.Files.CanGeneralTypes): Check if the values from Can_ReturnType enum correspond to the ones from Fr_GeneralTypes.h, R4.0.3
    03. VP (Base.SWS_Can_91003, Base.Properties.Files.CanGeneralTypes): Check if the values from Can_ErrorStateType enum correspond to the ones from Fr_GeneralTypes.h, R20-11
    04. VP (Base.SWS_Can_91021, Base.Properties.Files.CanGeneralTypes): Check if the values from Can_ErrorType enum correspond to the ones from Fr_GeneralTypes.h, R20-11
    05. VP (Base.SWS_Can_91013, Base.Properties.Files.CanGeneralTypes): Check if the values from Can_ControllerStateType enum correspond to the ones from Fr_GeneralTypes.h, R20-11
    06. VP (Base.SWS_CanTrcv_00163): Check if the values from CanTrcv_TrcvModeType enum correspond to the ones from Fr_GeneralTypes.h, R20-11
    07. VP (Base.SWS_CanTrcv_00164): Check if the values from CanTrcv_TrcvWakeupModeType enum correspond to the ones from Fr_GeneralTypes.h, R20-11
    08. VP (Base.ASR403.CanTrcv165): Check if the values from CanTrcv_TrcvWakeupReasonType enum correspond to the ones from Fr_GeneralTypes.h, R4.0.3
    09. VP (Base.SWS_CanTrcv_00210): Check if the values from CanTrcv_PNActivationType enum correspond to the ones from Fr_GeneralTypes.h, R20-11
    10. VP (Base.SWS_CanTrcv_00211): Check if the values from CanTrcv_TrcvFlagStateType enum correspond to the ones from Fr_GeneralTypes.h, R20-11
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.Files.CanGeneralTypes</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>248</internalId></provcov>
        <provcov>
          <linksto>Base.ASR403.CAN417</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>14</internalId></provcov>
        <provcov>
          <linksto>Base.ASR403.CAN039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>15</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Can_91003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Can_91021</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Can_91013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_CanTrcv_00163</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_CanTrcv_00164</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
        <provcov>
          <linksto>Base.ASR403.CanTrcv165</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_CanTrcv_00210</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_CanTrcv_00211</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>605</internalId></specobject>
    <specobject>
      <id>TS_BASE_ConTest_CommunicationStackTypesEnums</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_BaseEnumTypes/source/application/EbTest.c.m4</sourcefile>
      <sourceline>391</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    &lt;para&gt;
      Tests all enumeration literals defined in Base, ComStack_Types.h.
    &lt;/para&gt;
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01. VP (Base.SWS_COMTYPE_00031): Check if the values from TPParameterType enum correspond to the ones from ComStack_Types.h, R20-11
    02. VP (Base.SWS_COMTYPE_00012): Check if the values from BufReq_ReturnType enum correspond to the ones from ComStack_Types.h, R20-11
    03. VP (Base.SWS_COMTYPE_00027): Check if the values from TpDataStateType enum correspond to the ones from ComStack_Types.h, R20-11
    04. VP (Base.ASR413.SWS_COMTYPE_00040): Check if the values from IcomSwitch_ErrorType enum correspond to the ones from ComStack_Types.h, R4.1.3
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_COMTYPE_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_COMTYPE_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_COMTYPE_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
        <provcov>
          <linksto>Base.ASR413.SWS_COMTYPE_00040</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>606</internalId></specobject>
    <specobject>
      <id>TS_BASE_ConTest_FlexRayEnums</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_BaseEnumTypes/source/application/EbTest.c.m4</sourcefile>
      <sourceline>452</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
    &lt;para&gt;
      Tests all enumeration literals defined in Base, Fr_GeneralTypes.h.
    &lt;/para&gt;
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
    01. VP (Base.SWS_Fr_00505): Check if the values from Fr_POCStateType enum correspond to the ones from Fr_GeneralTypes.h, R20-11
    02. VP (Base.SWS_Fr_00506): Check if the values from Fr_SlotModeType enum correspond to the ones from Fr_GeneralTypes.h, R20-11
    03. VP (Base.SWS_Fr_00507): Check if the values from Fr_ErrorModeType enum correspond to the ones from Fr_GeneralTypes.h, R20-11
    04. VP (Base.SWS_Fr_00508): Check if the values from Fr_WakeupStatusType enum correspond to the ones from Fr_GeneralTypes.h, R20-11
    05. VP (Base.SWS_Fr_00509): Check if the values from Fr_StartupStateType enum correspond to the ones from Fr_GeneralTypes.h, R20-11
    06. VP (Base.SWS_Fr_00511): Check if the values from Fr_TxLPduStatusType enum correspond to the ones from Fr_GeneralTypes.h, R20-11
    07. VP (Base.SWS_Fr_00512): Check if the values from Fr_RxLPduStatusType enum correspond to the ones from Fr_GeneralTypes.h, R20-11
    08. VP (Base.SWS_Fr_00514): Check if the values from Fr_ChannelType enum correspond to the ones from Fr_GeneralTypes.h, R20-11
    09. VP (SWS_FrTrcv_00481): Check if the values from FrTrcv_TrcvModeType enum correspond to the ones from Fr_GeneralTypes.h, R22-11
    10. VP (SWS_FrTrcv_00074): Check if the values from FrTrcv_TrcvWUReasonType enum correspond to the ones from Fr_GeneralTypes.h, R22-11
  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Fr_00505</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>94</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Fr_00506</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Fr_00507</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>96</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Fr_00508</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>97</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Fr_00509</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Fr_00511</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>100</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Fr_00512</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Fr_00514</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>607</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_BASE_ConTest_AtomicAssign</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_BasetypeProperties/source/application/Appl.c.m4</sourcefile>
      <sourceline>263</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Verify that the AtomicAssign macros do a correct assignment
Test Description: 
&lt;para&gt;
The function tests the AtomicAssign macros for fixed sizes as well as the
generic versions. Signed and unsigned versions of integer variables of the
size corresponding to the macros are used; for the generic version, all
possible sizes are used.
&lt;/para&gt;
&lt;para&gt;
The function checks if the value given in 'from' is present in 'to' after the
assignment. It does not check whether the assignment really is atomic. It does
not check undefined behavior (i.e. variables of wrong size given to a fixed
size assignment macro).
&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 
* test TS_AtomicAssign{8,16,32} with unsigned integers
* test TS_AtomicAssign{8,16,32} with signed integers
* test TS_AtomicAssignGeneric with all flavors

Test Input: 

Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Macros.AtomicAssign</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>208</internalId></provcov>
        <provcov>
          <linksto>Base.Properties.Types.AtomicAccess</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>198</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>608</internalId></specobject>
    <specobject>
      <id>TS_BASE_ConTest_Size</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_BasetypeProperties/source/application/Appl.c.m4</sourcefile>
      <sourceline>360</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Verify that size of the basetypes configured in the plugin properties
is correct
Test Description: 
&lt;para&gt;
From the information of the plugin properties preprocessor macros are
generated which hold the size for each type: TS_SIZE_&lt;type&gt;
Compare the value of the macro TS_SIZE_&lt;type&gt; with the value returned
by the sizeof operator for this type.
&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 
* check the correct value for all types

Test Input: 

Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.Types.Size</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
        <provcov>
          <linksto>Base.Properties.Types.Mapping</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>609</internalId></specobject>
    <specobject>
      <id>TS_BASE_ConTest_Alignment</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_BasetypeProperties/source/application/Appl.c.m4</sourcefile>
      <sourceline>428</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Check if alignment constraints are configured correctly
Test Description: 
&lt;para&gt;
The basic idea behind this test is to write a value into the memory and read
it afterwards.
In case the access is not supported
a) run into a exception on the microprocessor which should be handled by the OS
   by calling the ErrorHook which itself terminates the test
b) write or read garbage values which do not match with the value which has
   been written into the memory

Test Object: None.
Test Precondition: 

Test Execution: 
* Create uint8 array
* Find first element in this array divisible by 4
* Write value into the array and read value from the array for all possible alignments

Test Input: 

Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.Types.Alignment</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>196</internalId></provcov>
        <provcov>
          <linksto>Base.Properties.Types.Mapping</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>610</internalId></specobject>
    <specobject>
      <id>TS_BASE_ConTest_MaxAlignedByteArray</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_BasetypeProperties/source/application/Appl.c.m4</sourcefile>
      <sourceline>532</sourceline>
      <version>1</version>
      <description>Test Synopsis: Check if alignment constraints and size of maximum aligned byte array are correct
Test Description: 
&lt;para&gt;
Create maximum aligned byte array and check its alignment and its size

Test Object: None.
Test Precondition: 

Test Execution: 
* Create a maximum aligned byte array of EBTEST_NUMBER_OF_BYTES
* VP0: check that the start address is divisible by TS_ALIGNMENT_TS_MaxAlignedType
* VP1: check that the size is N times TS_SIZE_TS_MaxAlignedType, where N = ceil(EBTEST_NUMBER_OF_BYTES / TS_SIZE_TS_MaxAlignedType)

Test Input: 

Test Output: 
</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Macros.MaximumAlignedArrayDefinition</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>207</internalId></provcov>
        <provcov>
          <linksto>Base.Properties.Types.Mapping</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>611</internalId></specobject>
    <specobject>
      <id>TS_BASE_ConTest_BitOperation</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_BasetypeProperties/source/application/Appl.c.m4</sourcefile>
      <sourceline>587</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test case checks the correct functionality macros provided
  for bit manipulation. For the atomic variants of those macros
  the atomicity of those macros is not validated by this test case.
&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 
* for the types uint8/16/32:
  * for all bit in the variable:
    * set variable to 0 and read current bit with TS_GetBit()
      * expected result: value of bit is 0
    * set current bit of variable to 1 and read current bit with TS_GetBit()
      * expected result: value of bit is 1
    * set all bits of variable to 1 and read current bit with TS_GetBit()
      * expected result: value of bit is 1
    * set all bits of variable to 1 and read current bit with TS_GetBit()
      * expected result: value of bit is 1
    * set current bit of variable to 1 and get bit groups
      from the current bit position to the maximum bit width
      of the variable
      * expected result: the variable has value 1 for all sizes
        of groups

Test Input: 

Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Macros.BitOperation.Get</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
        <provcov>
          <linksto>Base.Macros.BitOperation.GetGroup</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>210</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>612</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_BASE_ConTest_BinaryGeneration</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_BinaryGeneration/source/application/Base_ConTest_BinaryGeneration.c</sourcefile>
      <sourceline>53</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  This test sequence checks that the tresos Studio generator
  generates a correct SREC file for the provided postbuild configuration.

Test Object: 
  Binary generation of provided config

Test Precondition: 
  - Relocateable config enabled
  - Provided config must be generates as C-struct and as SREC (provide appropriate xgen)
  - The Merged_Makefile.mak must prepare the following steps:
     o Convert the SREC file into a HEX byte stream with padding byte 0 and
       use it as the initializer for the uint8 array Bin_conv_from_Srec_Padding0
     o Convert the SREC file into a HEX byte stream with padding byte 255 and
       use it as the initializer for the uint8 array Bin_conv_from_Srec_Padding255

  - Standard values for scalar data types are:
    Type       Hexadecimal   Decimal      Binary (bit pattern depends on byte ordering)
    ___________________________________________________________________________________
    uint8  ... 0x      01 =           1 =           |           |           | 0000 0001
    uint16 ... 0x    0204 =         516 =           |           | 0000 0010 | 0000 0100
    uint32 ... 0x08102040 =   135274560 = 0000 1000 | 0001 0000 | 0010 0000 | 0100 0000
    sint8  ... 0x      81 =        -127 =           |           |           | 1000 0001
    sint16 ... 0x    8284 =      -32124 =           |           | 1000 0010 | 1000 0100
    sint32 ... 0x8890A0C0 = -2003787584 = 1000 1000 | 1001 0000 | 1010 0000 | 1100 0000

    These patterns have the following properties:
    o no byte value can be confused with a padding byte (either 0xFF or 0x00)
    o the Generator cannot get the byte ordering wrong without the test noticing it

Test Execution: 
  01: VP:
      Check that the size of the two arrays generated from the SREC file matches.
  02: VP:
      Check that the size of the C-struct is equal or greater than the array
	  generated from the SREC.
      Background:
      The padding bytes at the end of the SREC files are not written,
      But the C compiler might add padding bytes at the end of the C-struct.
  03: Initialize a byte array Gen_SREC_Padding0x00 of the same size as the
      C struct with 0x00. Initialize a byte array Gen_SREC_Padding0xFF of
	  the same size as the C struct with 0xFF.
  04: Copy the bytes of Bin_conv_from_Srec_Padding0 into Gen_SREC_Padding0x00.
      Copy the bytes of Bin_conv_from_Srec_Padding255 into Gen_SREC_Padding0xFF.
  05: Compare the memory of the C-struct with the memory of Gen_SREC_Padding0x00.
  06: Compare the memory of the C-struct with the memory of Gen_SREC_Padding0xFF.
  07: VP:
      At least one (or both if no padding bytes exist) compare must succeed.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.Types.Size</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>613</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_BASE_ConTest_FindNextOne</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_ComStack_Helpers/source/application/Appl.c</sourcefile>
      <sourceline>20</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Verify that the FindNextOne function works as expected
Test Description: 
&lt;para&gt;
The function tests the FindNextOne function with different bit patterns and checks the result.
        Set up an array of 96 bits length
        In this array, set the bits 0, 31 and 64 to 95
        In a loop, call ComStack_FindNextOne() with this array as argument until the end of the bitfield is reached.
        VP1: Each iteration of the loop returns the next set bit (0, 31, 64 to 95)
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
* test ComStack_FindNextOne with all flavors of input bit patterns.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.ComStack.FindNextOne</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>192</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>614</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_BASE_Fr_Channel_Values</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_FrChannelValues/source/application/Appl.c.m4</sourcefile>
      <sourceline>36</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: 
  Verify the values of FR_CHANNEL_A, FR_CHANNEL_B, FR_CHANNEL_AB

Test Description: 
&lt;para&gt;
  verify the correct values of FR_CHANNEL_A, FR_CHANNEL_B, FR_CHANNEL_AB base on FrIf configuration
  based on Value FrDriverAutosarVersion (ASR_40 or ASR_44)
&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 
  Check correct value for FR_CHANNEL_A
  Check correct value for FR_CHANNEL_B
  Check correct value for FR_CHANNEL_AB

Test Input: 

Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Fr_00514</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
        <provcov>
          <linksto>Base.ASR403.FR514</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>107</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>615</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_BASE_ConTest_MemCpy</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_Memory/source/application/Appl.c</sourcefile>
      <sourceline>306</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Verify that the (cpu dependent) TS_MemCpyXX() function copies data
from a source to a destination address.
Test Description: 
&lt;para&gt;
The function tests memory copy operations from 0 bytes to
TEST_MEM_MAX_LEN bytes using all combinations of alignments
of the source and destination pointers.
&lt;/para&gt;
&lt;para&gt;
The function copies enough bytes to trigger all optimization barriers
and still test enough data.
&lt;/para&gt;
&lt;para&gt;
In total the function will copy 16 * sum_{i=0}^{i=TEST_MEM_MAX_LEN} i
bytes of memory.
Using the value '33' this means 8976 bytes.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
* test with all possible alignments of 'src'
* test with all possible alignments of 'dst'
* test with buffer lengths of 0 until TEST_MEM_MAX_LEN

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Memory.MemCpy</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>239</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Base.Types.SizeType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>264</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>616</internalId></specobject>
    <specobject>
      <id>TS_BASE_ConTest_MemCpyNoCheck</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_Memory/source/application/Appl.c</sourcefile>
      <sourceline>364</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Verify that the (cpu dependent) TS_MemCpyXX_NoCheck() function copies data
from a source to a destination address.
Test Description: 
&lt;para&gt;
The function tests memory copy operations from 0 bytes to
TEST_MEM_MAX_LEN bytes using all combinations of alignments
of the source and destination pointers.
&lt;/para&gt;
&lt;para&gt;
The function copies enough bytes to trigger all optimization barriers
and still test enough data.
&lt;/para&gt;
&lt;para&gt;
In total the function will copy 16 * sum_{i=0}^{i=TEST_MEM_MAX_LEN} i
bytes of memory.
Using the value '33' this means 8976 bytes.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
* test with all possible alignments of 'src'
* test with all possible alignments of 'dst'
* test with buffer lengths of 0 until TEST_MEM_MAX_LEN

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Memory.MemCpy</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>239</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Base.Types.SizeType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>264</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>617</internalId></specobject>
    <specobject>
      <id>TS_BASE_ConTest_MemCmpGood</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_Memory/source/application/Appl.c</sourcefile>
      <sourceline>425</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Verify that the (cpu dependent) TS_MemCmpXX() function returns E_OK
if compared buffers match.
Test Description: 
&lt;para&gt;
The function tests memory compare operations from 0 bytes to
TEST_MEM_MAX_LEN bytes using all combinations of alignments
of the source and destination pointers.
&lt;/para&gt;
&lt;para&gt;
The function compares enough bytes to trigger all optimization barriers
and still test enough data.
&lt;/para&gt;
&lt;para&gt;
The function sets up buffers so that exactly 'len' bytes in both buffers
match.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
* test with all possible alignments of 'src'
* test with all possible alignments of 'dst'
* test with buffer lengths of 0 until TEST_MEM_MAX_LEN
* MemCmp must return E_OK at all times.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Memory.MemCmp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>240</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Base.Types.SizeType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>264</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>618</internalId></specobject>
    <specobject>
      <id>TS_BASE_ConTest_MemCmpNoCheckGood</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_Memory/source/application/Appl.c</sourcefile>
      <sourceline>483</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Verify that the (cpu dependent) TS_MemCmpXX_NoCheck() function returns E_OK
if compared buffers match.
Test Description: 
&lt;para&gt;
The function tests memory compare operations from 0 bytes to
TEST_MEM_MAX_LEN bytes using all combinations of alignments
of the source and destination pointers.
&lt;/para&gt;
&lt;para&gt;
The function compares enough bytes to trigger all optimization barriers
and still test enough data.
&lt;/para&gt;
&lt;para&gt;
The function sets up buffers so that exactly 'len' bytes in both buffers
match.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
* test with all possible alignments of 'src'
* test with all possible alignments of 'dst'
* test with buffer lengths of 0 until TEST_MEM_MAX_LEN
* MemCmp must return E_OK at all times.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Memory.MemCmp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>240</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Base.Types.SizeType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>264</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>619</internalId></specobject>
    <specobject>
      <id>TS_BASE_ConTest_MemCmpBad</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_Memory/source/application/Appl.c</sourcefile>
      <sourceline>544</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Verify that the (cpu dependent) TS_MemCmpXX() function returns E_NOT_OK
if compared buffers do not match.
Test Description: 
&lt;para&gt;
The function tests memory compare operations from 0 bytes to
TEST_MEM_MAX_LEN bytes using all combinations of alignments
of the source and destination pointers.
&lt;/para&gt;
&lt;para&gt;
The function compares enough bytes to trigger all optimization barriers
and still test enough data.
&lt;/para&gt;
&lt;para&gt;
The function sets up buffers so that exactly the last byte in both buffers
does not match; all other bytes match.
&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 
* test with all possible alignments of 'src'
* test with all possible alignments of 'dst'
* test with buffer lengths of 0 until TEST_MEM_MAX_LEN
* MemCmp must return E_NOT_OK at all times.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Memory.MemCmp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>240</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Base.Types.SizeType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>264</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>620</internalId></specobject>
    <specobject>
      <id>TS_BASE_ConTest_MemCmpNoCheckBad</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_Memory/source/application/Appl.c</sourcefile>
      <sourceline>603</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Verify that the (cpu dependent) TS_MemCmpXX_NoCheck() function returns E_NOT_OK
if compared buffers do not match.
Test Description: 
&lt;para&gt;
The function tests memory compare operations from 0 bytes to
TEST_MEM_MAX_LEN bytes using all combinations of alignments
of the source and destination pointers.
&lt;/para&gt;
&lt;para&gt;
The function compares enough bytes to trigger all optimization barriers
and still test enough data.
&lt;/para&gt;
&lt;para&gt;
The function sets up buffers so that exactly the last byte in both buffers
does not match; all other bytes match.
&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 
* test with all possible alignments of 'src'
* test with all possible alignments of 'dst'
* test with buffer lengths of 0 until TEST_MEM_MAX_LEN
* MemCmp must return E_NOT_OK at all times.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Memory.MemCmp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>240</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Base.Types.SizeType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>264</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>621</internalId></specobject>
    <specobject>
      <id>TS_BASE_ConTest_MemSet</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_Memory/source/application/Appl.c</sourcefile>
      <sourceline>665</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Verify that the (cpu dependent) TS_MemSetXX() function correctly fills a buffer.
Test Description: 
&lt;para&gt;
The function tests memory set operations from 0 bytes to
TEST_MEM_MAX_LEN bytes using all combinations of alignments
of the destination pointer.
&lt;/para&gt;
&lt;para&gt;
The function sets enough bytes to trigger all optimization barriers
and still test enough data.
&lt;/para&gt;
&lt;para&gt;
The function sets up the destination buffer in a way to check that exactly
the given amount of data is set in the buffer.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
* test with all possible alignments of 'dst'
* test with buffer lengths of 0 until TEST_MEM_MAX_LEN
* MemSet must fill exactly 'len' bytes.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Memory.MemSet</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>242</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Base.Types.SizeType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>264</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>622</internalId></specobject>
    <specobject>
      <id>TS_BASE_ConTest_MemSetNoCheck</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_Memory/source/application/Appl.c</sourcefile>
      <sourceline>721</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Verify that the (cpu dependent) TS_MemSetXX_NoCheck() function correctly fills a buffer.
Test Description: 
&lt;para&gt;
The function tests memory set operations from 0 bytes to
TEST_MEM_MAX_LEN bytes using all combinations of alignments
of the destination pointer.
&lt;/para&gt;
&lt;para&gt;
The function sets enough bytes to trigger all optimization barriers
and still test enough data.
&lt;/para&gt;
&lt;para&gt;
The function sets up the destination buffer in a way to check that exactly
the given amount of data is set in the buffer.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
* test with all possible alignments of 'dst'
* test with buffer lengths of 0 until TEST_MEM_MAX_LEN
* MemSet must fill exactly 'len' bytes.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Memory.MemSet</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>242</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Base.Types.SizeType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>264</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>623</internalId></specobject>
    <specobject>
      <id>TS_BASE_ConTest_MemBZero</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_Memory/source/application/Appl.c</sourcefile>
      <sourceline>780</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Verify that the (cpu dependent) TS_MemBZeroXX() function correctly fills a buffer.
Test Description: 
&lt;para&gt;
The function tests memory set operations from 0 bytes to
TEST_MEM_MAX_LEN bytes using all combinations of alignments
of the destination pointer.
&lt;/para&gt;
&lt;para&gt;
The function sets enough bytes to trigger all optimization barriers
and still test enough data.
&lt;/para&gt;
&lt;para&gt;
The function sets up the destination buffer in a way to check that exactly
the given amount of data is set in the buffer.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
* test with all possible alignments of 'dst'
* test with buffer lengths of 0 until TEST_MEM_MAX_LEN
* BZero must fill exactly 'len' bytes.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Memory.MemBZero</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>244</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Base.Types.SizeType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>264</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>624</internalId></specobject>
    <specobject>
      <id>TS_BASE_ConTest_MemBZeroNoCheck</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_Memory/source/application/Appl.c</sourcefile>
      <sourceline>836</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Verify that the (cpu dependent) TS_MemBZeroXX_NoCheck() function correctly fills a buffer.
Test Description: 
&lt;para&gt;
The function tests memory set operations from 0 bytes to
TEST_MEM_MAX_LEN bytes using all combinations of alignments
of the destination pointer.
&lt;/para&gt;
&lt;para&gt;
The function sets enough bytes to trigger all optimization barriers
and still test enough data.
&lt;/para&gt;
&lt;para&gt;
The function sets up the destination buffer in a way to check that exactly
the given amount of data is set in the buffer.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
* test with all possible alignments of 'dst'
* test with buffer lengths of 0 until TEST_MEM_MAX_LEN
* BZero must fill exactly 'len' bytes.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Memory.MemBZero</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>244</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Base.Types.SizeType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>264</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>625</internalId></specobject>
    <specobject>
      <id>TS_BASE_ConTest_MemMove</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_Memory/source/application/Appl.c</sourcefile>
      <sourceline>895</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Verify that the MemMove function works as expected
Test Description: 
&lt;para&gt;
The function tests the MemMove function with overlapping and non-overlapping
'src' and 'dst' buffers of varying lengths.
&lt;/para&gt;
&lt;para&gt;
The function checks that the content of 'src' is copied into 'dst' correctly.
&lt;/para&gt;
&lt;para&gt;
As MemMove is not optimized for different alignments, alignment restrictions
are not explicitly checked.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
* test TS_MemMove with all flavors of 'src' and 'dst'

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Memory.MemMove</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>246</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>626</internalId></specobject>
    <specobject>
      <id>TS_BASE_ConTest_FatBool</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_Memory/source/application/Appl.c</sourcefile>
      <sourceline>977</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Check if TS_FATBOOL and TS_SELECT expand correctly.
Test Description: 
&lt;para&gt;
Create maximum aligned byte array and check its alignment and its size

Test Object: None.
Test Precondition: 

Test Execution: 
* Create input data depending on the CPU_TYPE
* VP0: check that TS_FATBOOL converts to ~0
* VP1: check that TS_SELECT selects the correct value
* VP2: check that TS_FATBOOL converts to 0
* VP3: check that TS_SELECT selects the correct value

Test Input: 

Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Macros.FATBOOL</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>236</internalId></provcov>
        <provcov>
          <linksto>Base.Macros.TS_SELECT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>237</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>627</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_BASE_ConTest_MemCmpSGood</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_MemoryS/source/application/Appl.c</sourcefile>
      <sourceline>295</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Verify that the (cpu dependent) TS_MemCmpSXX() function returns E_OK
if compared buffers match.
Test Description: 
&lt;para&gt;
The function tests memory compare operations from 0 bytes to
TEST_MEM_MAX_LEN bytes using all combinations of alignments
of the source and destination pointers.
&lt;/para&gt;
&lt;para&gt;
The function compares enough bytes to trigger all optimization barriers
and still test enough data.
&lt;/para&gt;
&lt;para&gt;
The function sets up buffers so that exactly 'len' bytes in both buffers
match.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
* test with all possible alignments of 'src'
* test with all possible alignments of 'dst'
* test with buffer lengths of 0 until TEST_MEM_MAX_LEN
* MemCmp must return E_OK at all times.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Memory.MemCmpS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>241</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Base.Types.SizeType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>264</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>628</internalId></specobject>
    <specobject>
      <id>TS_BASE_ConTest_MemCmpSNoCheckGood</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_MemoryS/source/application/Appl.c</sourcefile>
      <sourceline>353</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Verify that the (cpu dependent) TS_MemCmpSXX_NoCheck() function returns E_OK
if compared buffers match.
Test Description: 
&lt;para&gt;
The function tests memory compare operations from 0 bytes to
TEST_MEM_MAX_LEN bytes using all combinations of alignments
of the source and destination pointers.
&lt;/para&gt;
&lt;para&gt;
The function compares enough bytes to trigger all optimization barriers
and still test enough data.
&lt;/para&gt;
&lt;para&gt;
The function sets up buffers so that exactly 'len' bytes in both buffers
match.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
* test with all possible alignments of 'src'
* test with all possible alignments of 'dst'
* test with buffer lengths of 0 until TEST_MEM_MAX_LEN
* MemCmp must return E_OK at all times.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Memory.MemCmpS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>241</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Base.Types.SizeType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>264</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>629</internalId></specobject>
    <specobject>
      <id>TS_BASE_ConTest_MemCmpSBad</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_MemoryS/source/application/Appl.c</sourcefile>
      <sourceline>414</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Verify that the (cpu dependent) TS_MemCmpSXX() function returns E_NOT_OK
if compared buffers do not match.
Test Description: 
&lt;para&gt;
The function tests memory compare operations from 0 bytes to
TEST_MEM_MAX_LEN bytes using all combinations of alignments
of the source and destination pointers.
&lt;/para&gt;
&lt;para&gt;
The function compares enough bytes to trigger all optimization barriers
and still test enough data.
&lt;/para&gt;
&lt;para&gt;
The function sets up buffers so that exactly the last byte in both buffers
does not match; all other bytes match.
&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 
* test with all possible alignments of 'src'
* test with all possible alignments of 'dst'
* test with buffer lengths of 0 until TEST_MEM_MAX_LEN
* MemCmp must return E_NOT_OK at all times.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Memory.MemCmpS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>241</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Base.Types.SizeType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>264</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>630</internalId></specobject>
    <specobject>
      <id>TS_BASE_ConTest_MemCmpSNoCheckBad</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_MemoryS/source/application/Appl.c</sourcefile>
      <sourceline>473</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Verify that the (cpu dependent) TS_MemCmpSXX_NoCheck() function returns E_NOT_OK
if compared buffers do not match.
Test Description: 
&lt;para&gt;
The function tests memory compare operations from 0 bytes to
TEST_MEM_MAX_LEN bytes using all combinations of alignments
of the source and destination pointers.
&lt;/para&gt;
&lt;para&gt;
The function compares enough bytes to trigger all optimization barriers
and still test enough data.
&lt;/para&gt;
&lt;para&gt;
The function sets up buffers so that exactly the last byte in both buffers
does not match; all other bytes match.
&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 
* test with all possible alignments of 'src'
* test with all possible alignments of 'dst'
* test with buffer lengths of 0 until TEST_MEM_MAX_LEN
* MemCmp must return E_NOT_OK at all times.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Memory.MemCmpS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>241</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Base.Types.SizeType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>264</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>631</internalId></specobject>
    <specobject>
      <id>TS_BASE_ConTest_MemSetS</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_MemoryS/source/application/Appl.c</sourcefile>
      <sourceline>535</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Verify that the (cpu dependent) TS_MemSetSXX() function correctly fills a buffer.
Test Description: 
&lt;para&gt;
The function tests memory set operations from 0 bytes to
TEST_MEM_MAX_LEN bytes using all combinations of alignments
of the destination pointer.
&lt;/para&gt;
&lt;para&gt;
The function sets enough bytes to trigger all optimization barriers
and still test enough data.
&lt;/para&gt;
&lt;para&gt;
The function sets up the destination buffer in a way to check that exactly
the given amount of data is set in the buffer.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
* test with all possible alignments of 'dst'
* test with buffer lengths of 0 until TEST_MEM_MAX_LEN
* MemSet must fill exactly 'len' bytes.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Memory.MemSetS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>243</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Base.Types.SizeType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>264</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>632</internalId></specobject>
    <specobject>
      <id>TS_BASE_ConTest_MemSetSNoCheck</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_MemoryS/source/application/Appl.c</sourcefile>
      <sourceline>591</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Verify that the (cpu dependent) TS_MemSetSXX_NoCheck() function correctly fills a buffer.
Test Description: 
&lt;para&gt;
The function tests memory set operations from 0 bytes to
TEST_MEM_MAX_LEN bytes using all combinations of alignments
of the destination pointer.
&lt;/para&gt;
&lt;para&gt;
The function sets enough bytes to trigger all optimization barriers
and still test enough data.
&lt;/para&gt;
&lt;para&gt;
The function sets up the destination buffer in a way to check that exactly
the given amount of data is set in the buffer.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
* test with all possible alignments of 'dst'
* test with buffer lengths of 0 until TEST_MEM_MAX_LEN
* MemSet must fill exactly 'len' bytes.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Memory.MemSetS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>243</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Base.Types.SizeType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>264</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>633</internalId></specobject>
    <specobject>
      <id>TS_BASE_ConTest_MemBZeroS</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_MemoryS/source/application/Appl.c</sourcefile>
      <sourceline>650</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Verify that the (cpu dependent) TS_MemBZeroSXX() function correctly fills a buffer.
Test Description: 
&lt;para&gt;
The function tests memory set operations from 0 bytes to
TEST_MEM_MAX_LEN bytes using all combinations of alignments
of the destination pointer.
&lt;/para&gt;
&lt;para&gt;
The function sets enough bytes to trigger all optimization barriers
and still test enough data.
&lt;/para&gt;
&lt;para&gt;
The function sets up the destination buffer in a way to check that exactly
the given amount of data is set in the buffer.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
* test with all possible alignments of 'dst'
* test with buffer lengths of 0 until TEST_MEM_MAX_LEN
* BZero must fill exactly 'len' bytes.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Memory.MemBZeroS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Base.Types.SizeType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>264</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>634</internalId></specobject>
    <specobject>
      <id>TS_BASE_ConTest_MemBZeroSNoCheck</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_MemoryS/source/application/Appl.c</sourcefile>
      <sourceline>706</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Verify that the (cpu dependent) TS_MemBZeroSXX_NoCheck() function correctly fills a buffer.
Test Description: 
&lt;para&gt;
The function tests memory set operations from 0 bytes to
TEST_MEM_MAX_LEN bytes using all combinations of alignments
of the destination pointer.
&lt;/para&gt;
&lt;para&gt;
The function sets enough bytes to trigger all optimization barriers
and still test enough data.
&lt;/para&gt;
&lt;para&gt;
The function sets up the destination buffer in a way to check that exactly
the given amount of data is set in the buffer.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
* test with all possible alignments of 'dst'
* test with buffer lengths of 0 until TEST_MEM_MAX_LEN
* BZero must fill exactly 'len' bytes.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Memory.MemBZeroS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>245</internalId></provcov>
        <provcov>
          <linksto>Base.SWS_Platform_00064</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>Base.Types.SizeType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>264</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>635</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_BASE_ConTest_Swcd_MessageResultType</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_MessageResultType/source/application/EbTest.c.m4</sourcefile>
      <sourceline>39</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    &lt;para&gt;
    &lt;/para&gt;
  
Test Object: None.
Test Precondition: 
    Folder 'reference' provides Base_Bswmd.arxml file for comparison.
  
Test Execution: 
    TS5 Test environment steps :
      01. Grep Base_Bswmd.arxml file of installed Base plugin (see Merged_Makefile.mak).
      02. VP(SWS_Std_91002): Verify Base_Bswmd.arxml file from step 01 is according to reference file Base_Bswmd.arxml.
      03. Include the difference of the comparison of all previous step.

    Note: If there are differences, then due to Step 03 the included file contains not compilable content.
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.SWS_Std_91002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>162</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>636</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_BASE_ConTest_PduTypes</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_PduTypes/source/application/Base_ConTest_PduTypes.c.m4</sourcefile>
      <sourceline>216</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test checks if the macros TS_SIZE_PduIdType, TS_SIZE_PduLengthType
    and the typedefs for PduIdType and PduLengthType are generated correct.
  
Test Object: Generator
Test Precondition: None.
Test Execution: 
    01: VP (Base.Macros.PduIdType):
      Check that the macro TS_SIZE_PduIdType has the correct value
    02: VP (Base.ASR40.COMTYPE029, Base.ASR40.COMTYPE030):
      Check that the type PduIdType has the correct size
    03: VP (Base.Macros.PduLengthType):
      Check that the macro TS_SIZE_PduLengthType has the correct value
    04: VP (Base.ASR40.COMTYPE029, Base.ASR40.COMTYPE030):
      Check that the type PduLengthType has the correct size
  
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Macros.PduIdType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>234</internalId></provcov>
        <provcov>
          <linksto>Base.Macros.PduLengthType</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>235</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>637</internalId></specobject>
    <specobject>
      <id>TS_BASE_ConTest_CustomMemCpy</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_PduTypes/source/application/Base_ConTest_PduTypes.c.m4</sourcefile>
      <sourceline>300</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Verify that the custom memory copy function is called correctly
Test Description: 
&lt;para&gt;
The function calls the macro for the memory copy function
and compares destination and source afterwards; as the custom
memory copy function writes constant values to the destination,
the expected result is different from the source.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
* define source and destination buffer
* call memory copy function which should resolve to the custom memory copy function
* compare content of destination buffer with expected result from custom memory copy
* verify that the preprocessor macro that the memory function is overridden is set

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.OverrideMemCpy</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>257</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>638</internalId></specobject>
    <specobject>
      <id>TS_BASE_ConTest_CustomMemSet</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_PduTypes/source/application/Base_ConTest_PduTypes.c.m4</sourcefile>
      <sourceline>346</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Verify that the custom memory set function is called correctly
Test Description: 
&lt;para&gt;
The function calls the macro for the memory set function
and compares destination and source afterwards; as the custom
memory set function writes constant values to the destination,
the expected result is different from the source.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
* define destination buffer
* define value to be written
* call memory set function which should resolve to the custom memory set function
* compare content of destination buffer with expected result from custom memory values
* verify that the preprocessor macro that the memory function is overridden is set

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.OverrideMemSet</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>258</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>639</internalId></specobject>
    <specobject>
      <id>TS_BASE_ConTest_CustomMemSetS</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_PduTypes/source/application/Base_ConTest_PduTypes.c.m4</sourcefile>
      <sourceline>395</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Verify that the custom secure memory set function is called correctly
Test Description: 
&lt;para&gt;
The function calls the macro for the secure memory set function
and compares destination and source afterwards; as the custom
memory set function writes constant values to the destination,
the expected result is different from the source.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
* define destination buffer
* define value to be written
* call memory set function which should resolve to the custom memory set function
* compare content of destination buffer with expected result from custom memory values
* verify that the preprocessor macro that the memory function is overridden is set

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.OverrideMemSetS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>259</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>640</internalId></specobject>
    <specobject>
      <id>TS_BASE_ConTest_CustomMemCmp</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_PduTypes/source/application/Base_ConTest_PduTypes.c.m4</sourcefile>
      <sourceline>444</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Verify that the custom memory compare function is called correctly
Test Description: 
&lt;para&gt;
The function calls the macro for the memory compare function
and compares str1 and str2 afterwards; as the custom
memory compare function returns 0 for no difference found,
the actual result is different from expected result.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
* define str1 and str2 buffers
* call memory compare function which should resolve to the custom memory compare function
* compare content of str1 and str2 buffers with expected result from custom memory compare
* verify that the preprocessor macro that the memory function is overridden is set

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.OverrideMemCmp</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>260</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>641</internalId></specobject>
    <specobject>
      <id>TS_BASE_ConTest_CustomMemCmpS</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_PduTypes/source/application/Base_ConTest_PduTypes.c.m4</sourcefile>
      <sourceline>488</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Verify that the custom secure memory compare function is called correctly
Test Description: 
&lt;para&gt;
The function calls the macro for the secure memory compare function
and compares str1 and str2 afterwards; as the custom
memory compare function returns 0 for no difference found,
the actual result is different from expected result.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
* define str1 and str2 buffers
* call memory compare function which should resolve to the custom memory compare function
* compare content of str1 and str2 buffers with expected result from custom memory compare
* verify that the preprocessor macro that the memory function is overridden is set

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.OverrideMemCmpS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>261</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>642</internalId></specobject>
    <specobject>
      <id>TS_BASE_ConTest_CustomMemBZero</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_PduTypes/source/application/Base_ConTest_PduTypes.c.m4</sourcefile>
      <sourceline>532</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Verify that the custom memory zeroing function is called correctly
Test Description: 
&lt;para&gt;
The function calls the macro for the memory zeroing function
and compares destination and expected values afterwards; as the custom
memory zeroing function writes constant values to the destination,
the expected result is different from the source.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
* define destination buffer
* call memory zeroing function which should resolve to the custom memory zeroing function
* compare content of destination buffer with expected result from custom memory values
* verify that the preprocessor macro that the memory function is overridden is set

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.OverrideMemBZero</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>262</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>643</internalId></specobject>
    <specobject>
      <id>TS_BASE_ConTest_CustomMemBZeroS</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_PduTypes/source/application/Base_ConTest_PduTypes.c.m4</sourcefile>
      <sourceline>577</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Verify that the custom secure memory zeroing function is called correctly
Test Description: 
&lt;para&gt;
The function calls the macro for the secure memory zeroing function
and compares destination and expected values afterwards; as the custom
memory zeroing function writes constant values to the destination,
the expected result is different from the source.
&lt;/para&gt;

Test Object: None.
Test Precondition: None.
Test Execution: 
* define destination buffer
* call memory zeroing function which should resolve to the custom memory zeroing function
* compare content of destination buffer with expected result from custom memory values
* verify that the preprocessor macro that the memory function is overridden is set

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Properties.OverrideMemBZeroS</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>263</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>644</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_BASE_ConTest_PostBuildConfig</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_PostBuildConfig/source/application/Appl.c</sourcefile>
      <sourceline>132</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Verify that the post build config macros are working correctly
Test Description: 
&lt;para&gt;
Create a simple test post build config using the respective creation macros
and fill the config with know values.
&lt;/para&gt;
&lt;para&gt;
Use the extraction macros for the post build config to obtain the values from
the config and verify that these obtained values match the ones filled into
the config.
&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 
* create a post build config and use access macros to access the values
* verify that the values are the intended ones

Test Input: 

Test Output: 
&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Macros.PostBuild.MakeRefToVar</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>226</internalId></provcov>
        <provcov>
          <linksto>Base.Macros.PostBuild.MakeNullRefToVar</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>227</internalId></provcov>
        <provcov>
          <linksto>Base.Macros.PostBuild.MakeRefToCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>228</internalId></provcov>
        <provcov>
          <linksto>Base.Macros.PostBuild.MakeNullRefToCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>229</internalId></provcov>
        <provcov>
          <linksto>Base.Macros.PostBuild.RefToCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>230</internalId></provcov>
        <provcov>
          <linksto>Base.Macros.PostBuild.RefToVar</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>231</internalId></provcov>
        <provcov>
          <linksto>Base.Macros.PostBuild.GetCfg</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>232</internalId></provcov>
        <provcov>
          <linksto>Base.Macros.PostBuild.GetVar</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>233</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>645</internalId></specobject>
    <specobject>
      <id>TS_BASE_ConTest_PostBuildSignature</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Conformance/IN/Base_ConTest_PostBuildConfig/source/application/Appl.c</sourcefile>
      <sourceline>341</sourceline>
      <version>1</version>
      <description>Test Synopsis: Verify that the post build platform signature macros are working correctly
Test Description: 
&lt;para&gt;
Create a valid and a bogus post build platform signature containing endianness and alignment info.
&lt;/para&gt;
&lt;para&gt;
Use the check macros to verify that the valid post build platform signature is detected as valid and
that the invalid post build platform signature is detected as invalid.
&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 
    01: create correct encondings for the different alignments
    02: ensure consistency of TS_ALIGNMENT_ macros and results generated by TS_ALIGNOF() and TS_ARRAYALIGNOF() since the test relies on that
    03: build up OK platform signature
    04: VP: ensure that TS_PlatformSigIsValid() identifies an valid signature as valid
    05: build up a bad platform signature w.r.t endianness
    06: VP: ensure that TS_SIG_CHECK_ENDIANESS() identifies a signature with valid endianness as valid
    07: VP: ensure that TS_SIG_CHECK_ENDIANESS() identifies a signature with invalid endianness as invalid
    08: VP: ensure that TS_PlatformSigIsValid() identifies a signature with invalid endianness as invalid
    09: build up a bad platform signature w.r.t uint8 alignment
    10: VP: ensure that TS_SIG_CHECK_ALIGNMENT_UINT8() identifies a signature with valid alignment of uint8 as valid
    11: VP: ensure that TS_SIG_CHECK_ALIGNMENT_UINT8() identifies a signature with invalid alignment of uint8 as invalid
    12: VP: ensure that TS_PlatformSigIsValid() identifies a signature with invalid alignment of uint8 as invalid
    13: build up a bad platform signature w.r.t sint8 alignment
    14: VP: ensure that TS_SIG_CHECK_ALIGNMENT_SINT8() identifies a signature with valid alignment of sint8 as valid
    15: VP: ensure that TS_SIG_CHECK_ALIGNMENT_SINT8() identifies a signature with invalid alignment of sint8 as invalid
    16: VP: ensure that TS_PlatformSigIsValid() identifies a signature with invalid alignment of sint8 as invalid
    17: build up a bad platform signature w.r.t uint16 alignment
    18: VP: ensure that TS_SIG_CHECK_ALIGNMENT_UINT16() identifies a signature with valid alignment of uint16 as valid
    19: VP: ensure that TS_SIG_CHECK_ALIGNMENT_UINT16() identifies a signature with invalid alignment of uint16 as invalid
    20: VP: ensure that TS_PlatformSigIsValid() identifies a signature with invalid alignment of uint16 as invalid
    21: build up a bad platform signature w.r.t sint16 alignment
    22: VP: ensure that TS_SIG_CHECK_ALIGNMENT_SINT16() identifies a signature with valid alignment of sint16 as valid
    23: VP: ensure that TS_SIG_CHECK_ALIGNMENT_SINT16() identifies a signature with invalid alignment of sint16 as invalid
    24: VP: ensure that TS_PlatformSigIsValid() identifies a signature with invalid alignment of sint16 as invalid
    25: build up a bad platform signature w.r.t uint32 alignment
    26: VP: ensure that TS_SIG_CHECK_ALIGNMENT_UINT32() identifies a signature with valid alignment of uint32 as valid
    27: VP: ensure that TS_SIG_CHECK_ALIGNMENT_UINT32() identifies a signature with invalid alignment of uint32 as invalid
    28: VP: ensure that TS_PlatformSigIsValid() identifies a signature with invalid alignment of uint32 as invalid
    29: build up a bad platform signature w.r.t sint32 alignment
    30: VP: ensure that TS_SIG_CHECK_ALIGNMENT_SINT32() identifies a signature with valid alignment of sint32 as valid
    31: VP: ensure that TS_SIG_CHECK_ALIGNMENT_SINT32() identifies a signature with invalid alignment of sint32 as invalid
    32: VP: ensure that TS_PlatformSigIsValid() identifies a signature with invalid alignment of sint32 as invalid
    33: build up a bad platform signature w.r.t minimal array alignment
    34: VP: ensure that TS_SIG_CHECK_ALIGNMENT_ARRAY() identifies a signature with valid minimal alignment of an array as valid
    35: VP: ensure that TS_SIG_CHECK_ALIGNMENT_ARRAY() identifies a signature with invalid minimal alignment of an array as invalid
    36: VP: ensure that TS_PlatformSigIsValid() identifies a signature with invalid minimal alignment of an array as invalid
    37: build up a bad platform signature w.r.t minimal struct alignment
    38: VP: ensure that TS_SIG_CHECK_ALIGNMENT_STRUCT() identifies a signature with valid minimal alignment of a struct as valid
    39: VP: ensure that TS_SIG_CHECK_ALIGNMENT_STRUCT() identifies a signature with invalid minimal alignment of a struct as invalid
    40: VP: ensure that TS_PlatformSigIsValid() identifies a signature with invalid minimal alignment of a struct as invalid

Test Input: 

Test Output: 
</description>
      <providescoverage>
        <provcov>
          <linksto>Base.Macros.PostBuild.CheckAlignmentUint8</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
        <provcov>
          <linksto>Base.Macros.PostBuild.CheckAlignmentUint16</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>217</internalId></provcov>
        <provcov>
          <linksto>Base.Macros.PostBuild.CheckAlignmentUint32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>Base.Macros.PostBuild.CheckAlignmentSint8</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
        <provcov>
          <linksto>Base.Macros.PostBuild.CheckAlignmentSint16</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
        <provcov>
          <linksto>Base.Macros.PostBuild.CheckAlignmentSint32</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
        <provcov>
          <linksto>Base.Macros.PostBuild.CheckEndianness</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>224</internalId></provcov>
        <provcov>
          <linksto>Base.Macros.PostBuild.CheckSignature</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>225</internalId></provcov>
        <provcov>
          <linksto>Base.Macros.PostBuild.CheckAlignmentArray</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>223</internalId></provcov>
        <provcov>
          <linksto>Base.Macros.PostBuild.CheckAlignmentStruct</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>646</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>Base_EcuConfigExporter</id>
      <status>approved</status>
      <source>EB test case specification (asc_Base)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_Base/test/ts5/Generic/IN/Base_EcuConfigExporter/source/application/Test.c</sourcefile>
      <sourceline>13</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: Verify AlwaysExport configuration parameter
Test Description: None.
Test Object: None.
Test Precondition: None.
Test Execution: None.
Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>Base.EcuConfiguration.Generator.AlwaysExport</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>271</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>647</internalId></specobject>
  </specobjects>
  </specdocument>
  <violations/>
  <oreqmViolations/>
</tracingresults>
