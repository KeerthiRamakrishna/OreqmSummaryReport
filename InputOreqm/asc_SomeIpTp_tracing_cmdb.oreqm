<?xml version="1.0" encoding="UTF-8"?>
<tracingresults>
  <environment>
    <toolname>ReqM2</toolname>
    <toolversion>1.30.0 (stable)</toolversion>
    <toolcopyright>Copyright 2010 - 2018 Elektrobit Automotive GmbH</toolcopyright>
    <libxmlversion>2.0207</libxmlversion>
    <libxml2compileversion>2.9.10</libxml2compileversion>
    <libxml2runtimeversion>20912</libxml2runtimeversion>
    <perlversion>v5.32.1</perlversion>
    <perlptrsize>64</perlptrsize>
    <commandline>-t -q -o asc_SomeIpTp_tracing_cmdb.oreqm -O /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements -c /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules_RMP4_0.xml -s approved,rejected --wfatal WDUPLICATEID,WDUPLICATEIDANDVER /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/build/reqm/ReqM2_Native/asc_SomeIpTp_public_modulereference_Integration_req.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/build/reqm/ReqM2_Native/asc_SomeIpTp_requirements_AUTOSAR_SWS_SOMEIPTransportProtocol.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/build/reqm/ReqM2_Native/asc_SomeIpTp_requirements_EB_Refinements.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/build/reqm/ReqM2_Native/asc_SomeIpTp_requirements_EB_Requirements.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/build/reqm/common_req/SomeIpTp_PduLengthType_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/build/reqm/common_req/SomeIpTp_VerifyStub_EB_Extension.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/build/reqm/ReqM2_GenericImporter/reqm_DEV.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/build/reqm/ReqM2_GenericImporter/reqm_IMPL.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/build/reqm/ReqM2_GenericImporter/reqm_IMPLXML.reqm /cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/build/reqm/ReqM2_OldCImporter/reqm_SWUTS_LEGACY.reqm</commandline>
    <timestamp>Mon Jun 17 21:01:08 2024</timestamp>
  </environment>
  <cmdline>
    <cmdparam>
      <name>I</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>O</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/TestProtocols/LogBase/requirements</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>c</name>
      <values>
        <value>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_PluginBuildEnv/common/config/AutoCoreReqM2Rules_RMP4_0.xml</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>o</name>
      <values>
        <value>asc_SomeIpTp_tracing_cmdb.oreqm</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>q</name>
    </cmdparam>
    <cmdparam>
      <name>s</name>
      <values>
        <value>approved</value>
        <value>rejected</value>
      </values>
    </cmdparam>
    <cmdparam>
      <name>t</name>
    </cmdparam>
    <cmdparam>
      <name>wfatal</name>
      <values>
        <value>WDUPLICATEID</value>
        <value>WDUPLICATEIDANDVER</value>
      </values>
    </cmdparam>
  </cmdline>
  <inputfiles>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/build/reqm/ReqM2_Native/asc_SomeIpTp_public_modulereference_Integration_req.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/build/reqm/ReqM2_Native/asc_SomeIpTp_requirements_AUTOSAR_SWS_SOMEIPTransportProtocol.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/build/reqm/ReqM2_Native/asc_SomeIpTp_requirements_EB_Refinements.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/build/reqm/ReqM2_Native/asc_SomeIpTp_requirements_EB_Requirements.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/build/reqm/common_req/SomeIpTp_PduLengthType_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/build/reqm/common_req/SomeIpTp_VerifyStub_EB_Extension.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/build/reqm/ReqM2_GenericImporter/reqm_DEV.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/build/reqm/ReqM2_GenericImporter/reqm_IMPL.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/build/reqm/ReqM2_GenericImporter/reqm_IMPLXML.reqm</inputfile>
    <inputfile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/build/reqm/ReqM2_OldCImporter/reqm_SWUTS_LEGACY.reqm</inputfile>
  </inputfiles>
  <configuration>
    <doctypes>
    <regexs>
      <!-- external level -->
      <regex>creq</regex>       <!-- since 10/1018: introduced for updated tracing model-->

      <!-- product line level -->
      <regex>fea</regex>
      <regex>swpad</regex>      <!-- since 10/1018: introduced for updated tracing model-->
      <regex>swts</regex>

      <!-- bundle level -->
      <regex>swrs</regex>
      <regex>swad</regex>
      <regex>swintts</regex>

      <!-- module level -->
      <regex>swdd</regex>
      <regex>swurs</regex>      <!-- since 10/1018: introduced for updated tracing model-->
      <regex>swmts</regex>      <!-- since 01/1010: introduced for updated tracing model RMP4.0-->
      <regex>swuts</regex>
      <regex>impl</regex>

      <!-- legacy items -->
      <regex>dev</regex>
      <regex>man</regex>
      <regex>lim</regex>
    </regexs>
  </doctypes>
    <rules>
    <!-- The Ruleset for RMP4.0 is currently identical to the previous rule set. This rule is
        intoduce to show that the right file is uses. It will be removed when the RMP4.0 rule set is
    reworked -->
    <rule>
      <name>INFO.Rule set RMP4.0</name>
      <description>This rules indicates that RMP4.0 rule set is used.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status!='approved') and (./status!='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>WRN.general.doctypes</name>
      <description>The used doctype is not part of the tracing model</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobjects/@doctype</applyto>
          <condition>((. != 'creq') or (. != 'fea') or (. != 'swpad') or (. != 'swts') or (. != 'swrs') or (. !='swad') or (. != 'swintts') or (.!= 'swdd') or (. != 'swurs') or (. != 'swmts') or (. != 'swuts') or (. != 'impl') or (. != 'dev') or (. != 'man') or (. != 'lim'))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.status</name>
      <description>All specification objects must be either in status=approved or in status=rejected. Other
        statuses are not allowed. How to fix: Set status to rejected or approved.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status!='approved') and (./status!='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.rejected</name>
      <description>Status status=rejected is only allowed for requirements. How to fix: set to approved for specification object that are not requirements.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype!='swrs')  and (../@doctype!='swmrs') and (../@doctype!='swurs') and (./status='rejected')]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.comment</name>
      <description>Specification objects with status=rejected shall have a comment or rationale that
        starts with on of the following texts: "This requirement is informational only", "This requirement is not applicable".
        How to fix: Add some text starting with "This requirement is informational only"
        or "This requirement is not applicable" to either the comment or to the rationale.
        Comment: Implementation of check checks for contains instead of starts-with since there is
        no trim function in the used XPATH engine.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>contains(./comment,"This requirement is informational only") or contains(./rationale,"This requirement is informational only") or contains(./comment,"This requirement is not applicable") or contains(./rationale,"This requirement is not applicable")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.general.rejected.coverage</name>
      <description>Specification objects with status=rejected shall not need coverage. How to fix: remove need for coverage.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(./status='rejected')]</applyto>
          <condition>count(./needscoverage)=0</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swurs.needscoverage.count</name>
      <description>Unit requirements with status=approved need to be covered, exceptions from
      this rule: configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") and requirements with
      a comment starting with "The adherence to this requirement is ensured by the following
      release check (URL to the checklist template plus ID of the check):".
      How to fix: Provide a needsobj element for those specobjects or comment according to the rule.
      </description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swurs') and (./status='approved') and count(./needscoverage/needsobj)=0 and count(./fulfilledby/ffbObj)=0]</applyto>
          <!--This condition is false if the id of a specification object does not end with '_Conf' or '_CONF' or does not start with ECUC_ -->
          <condition>substring-after(./id,"ECUC_")!="" or substring-before(./id,"_Conf")!="" or substring-before(./id,"_CONF")!="" or contains(./comment,"The adherence to this requirement is ensured by the following release check (URL to the checklist template plus ID of the check):")</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swurs.needscoverage.rationale</name>
      <description>Requirements with status=approved and without coverage needs that are
        configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") shall have a comment or rationale
        with the following text: "This is a configuration parameter requirement without functional
        specification.". How to fix: Add some text starting with "This is a configuration parameter
        requirements without functional specification" to either the comment or to the rationale.</description>
      <regexchecks>
        <regexcheck>
          <applyto>//specobject[(../@doctype='swurs') and (./status='approved') and count(./needscoverage/needsobj)=0 and (substring-after(./id,"ECUC_")!="" or substring-before(./id,"_CONF")!="" or substring-before(./id,"_Conf")!="")]</applyto>
          <regex>This is a configuration parameter requirement without functional specification.</regex>
        </regexcheck>
      </regexchecks>
    </rule>

    <rule>
      <name>ERR.swrs.needscoverage.rationale</name>
      <description>Requirements with status=approved and without coverage needs that are
        configuration requirements (postfix "_CONF" or "_Conf" or prefix "ECUC_") shall have a comment or rationale
        with the following text: "This is a configuration parameter requirement without functional
        specification.". How to fix: Add some text starting with "This is a configuration parameter
        requirements without functional specification" to either the comment or to the rationale.</description>
      <regexchecks>
        <regexcheck>
          <applyto>//specobject[(../@doctype='swrs') and (./status='approved') and count(./needscoverage/needsobj)=0 and (substring-after(./id,"ECUC_")!="" or substring-before(./id,"_CONF")!="" or substring-before(./id,"_Conf")!="")]</applyto>
          <regex>This is a configuration parameter requirement without functional specification.</regex>
        </regexcheck>
      </regexchecks>
    </rule>

    <rule>
      <name>ERR.swurs.releases</name>
      <description>Requirements which originates from AUTOSAR (source tag contains term 'AUTOSAR_SWS', 'AUTOSAR_TPS',
        'AUTOSAR_ASWS' or 'AUTOSAR_TR') shall have their release tag set to 'AUTOSAR {major}.{minor}.{patch}' (e.g. 'AUTOSAR 4.3.0').
        Other requirements (including refinements of AUTOSAR requirements) must not contain any of the listed prefixes as
        part of the source tag.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swurs') and (contains(./source,'AUTOSAR_SWS') or contains(./source,'AUTOSAR_TPS') or contains(./source,'AUTOSAR_ASWS') or contains(./source,'AUTOSAR_TR'))]</applyto>
          <condition>contains(./releases/release,'AUTOSAR')</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swrs.releases</name>
      <description>Requirements which originates from AUTOSAR (source tag contains term 'AUTOSAR_SWS', 'AUTOSAR_TPS',
        'AUTOSAR_ASWS' or 'AUTOSAR_TR') shall have their release tag set to 'AUTOSAR {major}.{minor}.{patch}' (e.g. 'AUTOSAR 4.3.0').
        Other requirements (including refinements of AUTOSAR requirements) must not contain any of the listed prefixes as
        part of the source tag.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swrs') and (contains(./source,'AUTOSAR_SWS') or contains(./source,'AUTOSAR_TPS') or contains(./source,'AUTOSAR_ASWS') or contains(./source,'AUTOSAR_TR'))]</applyto>
          <condition>contains(./releases/release,'AUTOSAR')</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swdd.needscoverage.count</name>
      <description>Design elements with status=approved need to be covered.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swdd') and (./status='approved') and count(./needscoverage/needsobj)=0]</applyto>
          <condition>false()</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swurs.needscoverage.doctypes</name>
      <description>Requirements can be covered only by swurs, swad, dev, lim, swdd, impl, swuts, swmts, or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swurs')]</applyto>
          <condition>(./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="swad" or ./needscoverage/needsobj="dev" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swmts" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swrs.needscoverage.doctypes</name>
      <description>Requirements of type swrs can be covered only by swrs, swurs, swad, swintts or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swrs')]</applyto>
          <condition>(./needscoverage/needsobj="swrs" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="swad" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swintts" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swdd.needscoverage.doctypes</name>
      <description>Design elements of type swdd can only be covered by swdd, swurs, impl, swuts, lim or man</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swdd')]</applyto>
          <condition>(./needscoverage/needsobj="swdd" or ./needscoverage/needsobj="swurs" or ./needscoverage/needsobj="impl" or ./needscoverage/needsobj="swuts" or ./needscoverage/needsobj="swmts" or ./needscoverage/needsobj="lim" or ./needscoverage/needsobj="man" or (count(./needscoverage/needsobj)=0))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.dev.needscoverage.count</name>
      <description>Deviations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='dev')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swuts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swuts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swmts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swmts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swintts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swintts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swts.needscoverage.count</name>
      <description>Test case sepecifications shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swts')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.needscoverage.count</name>
      <description>Manual test cases shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.impl.needscoverage.count</name>
      <description>Source code shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='impl')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.lim.needscoverage.count</name>
      <description>Limitations shall not need/receive coverage</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='lim')]</applyto>
          <condition>(count(./needscoverage/needsobj)=0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.fea.needscoverage.test</name>
      <description>Features shall be tested by software test ('swts') or manuel test ('man'). If no test is planned a justification shall be given.
                   A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>(
               ./needscoverage/needsobj="swts" or ./needscoverage/needsobj="man" or ./fulfilledby/ffbObj/ffbType="swts" or ./fulfilledby/ffbObj/ffbType="man" or contains(./furtherinfo,"fea.needscoverage.test") or contains(./furtherinfo,"fea.needscoverage.doctypes"))</condition>
        </conditioncheck>
      </conditionchecks>
          </rule>

    <rule>
      <name>WRN.fea.needscoverage.impl</name>
      <description>Features shall be covered by implementation fea, swrs, swad, swpad, swurs, man and swts. For lagacy features a justification is acceppted. A justification can be given in the futherinfo tag. The justification shall start with this rule name.</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='fea')]</applyto>
          <condition>( ./needscoverage/needsobj="swrs" or ./fulfilledby/ffbObj/ffbType="swrs" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swpad" or ./fulfilledby/ffbObj/ffbType="swpad" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="fea" or ./fulfilledby/ffbObj/ffbType="fea" or contains(./furtherinfo,"fea.needscoverage.impl"))</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>


    <rule>
      <name>ERR.swad.fulfilledby.doctypes</name>
      <description>Architectural design objects of type swad can only be covered by swurs, swad, swdd, swintts, man, otherwise they should be refined with swrs</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swad')]</applyto>
          <condition>(./fulfilledby/ffbObj/ffbType="swurs" or ./needscoverage/needsobj="swurs" or ./fulfilledby/ffbObj/ffbType="req" or ./needscoverage/needsobj="req" or ./fulfilledby/ffbObj/ffbType="swad" or ./needscoverage/needsobj="swad" or ./fulfilledby/ffbObj/ffbType="swdd" or ./fulfilledby/ffbObj/ffbType="swintts" or ./needscoverage/needsobj="swintts" or ./fulfilledby/ffbObj/ffbType="man" or ./needscoverage/needsobj="man") </condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.swmts.providescoverage.doctypes</name>
      <description>Test case specifications (tcs) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='tcs')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

    <rule>
      <name>ERR.man.providescoverage.doctypes</name>
      <description>Manual test case specification (man) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='man')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swuts.providescoverage.doctypes</name>
      <description>Software unit test case specification (swuts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swuts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swintts.providescoverage.doctypes</name>
      <description>Software integration test case specification (swintts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swintts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

   <rule>
      <name>ERR.swts.providescoverage.doctypes</name>
      <description>Software test case specification (swts) shall cover at least one other spec object</description>
      <conditionchecks>
        <conditioncheck>
          <applyto>//specobject[(../@doctype='swts')]</applyto>
          <condition>(count(./providescoverage/provcov)&gt;0)</condition>
        </conditioncheck>
      </conditionchecks>
    </rule>

  </rules>
    <oreqmRules>

        <rule>
            <name>WRN.swts.needscoverage.count</name>
            <description>Violated if there are more than 10 swts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
        <rule>
            <name>WRN.man.needscoverage.count</name>
            <description>Violated if there are more than 10 man specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='man']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='man']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>man.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
        <rule>
            <name>WRN.swintts.needscoverage.count</name>
            <description>Violated if there are more than 10 swintts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swintts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swintts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swintts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
        <rule>
            <name>WRN.swmts.needscoverage.count</name>
            <description>Violated if there are more than 10 swmts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swmts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swmts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swmts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swuts.needscoverage.count</name>
            <description>Violated if there are more than 10 swuts specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swuts']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swuts']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swuts.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swpad.needscoverage.count</name>
            <description>Violated if there are more than 10 swpad specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swpad']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swpad']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swpad.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swrs.needscoverage.count</name>
            <description>Violated if there are more than 10 swrs specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swrs']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swrs']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swrs.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swad.needscoverage.count</name>
            <description>Violated if there are more than 10 swad specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swad']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swad']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swad.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swurs.needscoverage.count</name>
            <description>Violated if there are more than 10 swurs specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swurs']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swurs']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swurs.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swdd.needscoverage.count</name>
            <description>Violated if there are more than 10 swdd specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swdd']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='swdd']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>swdd.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.impl.needscoverage.count</name>
            <description>Violated if there are more than 10 impl specobjects covering one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./needscoverage/needscov[needsobj='impl']/coveredby/linkedfrom)) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./needscoverage/needscov[needsobj='impl']/coveredby/linkedfrom)) &gt; 10]/furtherinfo</applyto>
                                        <regex>impl.needscoverage.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swrs.fulfilledby.count</name>
            <description>Violated if there are more than 10 swrs specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swrs'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swrs'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swrs.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swad.fulfilledby.count</name>
            <description>Violated if there are more than 10 swad specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swad'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swad'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swad.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swurs.fulfilledby.count</name>
            <description>Violated if there are more than 10 swurs specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swurs'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swurs'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swurs.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>

        <rule>
            <name>WRN.swdd.fulfilledby.count</name>
            <description>Violated if there are more than 10 swdd specobjects as fulfilledby link to one specobject and no appropriate information is provided in furtherinfo. The justification in furtherinfo must contain the rule name.</description>
            <conditionchecks>
                <conditioncheck>
                    <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swdd'])) &gt; 10]</applyto>
                    <condition>false() or (count(./furtherinfo) &gt; 0)</condition>
                </conditioncheck>
            </conditionchecks>
                        <regexchecks>
                                <regexcheck>
                                        <applyto>//specobject[(count(./fulfilledby/ffbObj[ffbType='swdd'])) &gt; 10]/furtherinfo</applyto>
                                        <regex>swdd.fulfilledby.count</regex>
                                </regexcheck>
                        </regexchecks>
        </rule>
  </oreqmRules>
  </configuration>
  <specdocument>
    <specobjects doctype="lim">
  
    <specobject>
      <id>SomeIpTp.EB_INTREQ_SomeIpTp_0001</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        <function>SomeIpTp_Init()</function> shall not preempt or be preempted by other module
        functions.
        Exception: Functions which have to be scheduled (like module main functions) are allowed to
        preempt the initialization if they explicitly check against the initialization flag.
      </description>
      <rationale>
        Calling functions of an uninitialized module leads to undefined module behavior.
        Continuing an interrupted module function after re-initialization can lead to undefined
        module behavior.
        Module functions have DET checks to indicate if the function is called while the module is
        uninitialized. The integrator has to solve such incidents before disabling DET.
      </rationale>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>0</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB_INTREQ_SomeIpTp_0002</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        The integrator must ensure that SomeIpTp lower layer functions and
        SomeIpTp main functions do not preempt each other.
        List of SomeIpTp lower layer functions:
        <ul>
          <li><function>SomeIpTp_TriggerTransmit()</function></li>
          <li><function>SomeIpTp_TxConfirmation()</function></li>
          <li><function>SomeIpTp_RxIndication()</function></li>
        </ul>
        List of SomeIpTp main functions:
        <ul>
          <li><function>SomeIpTp_MainFunctionTx()</function></li>
          <li><function>SomeIpTp_MainFunctionRx()</function></li>
        </ul>
        This can be achieved by setting EthIf and Eth driver in polling mode, e.g.
        by disabling of:
        <ul>
          <li>EthIfEnableRxInterrupt</li>
          <li>EthCtrlEnableRxInterrupt</li>
          <li>EthIfEnableTxInterrupt</li>
          <li>EthCtrlEnableTxInterrupt</li>
        </ul>
        to enforce that lower layer APIs are called only in the
        context of main functions. In addition, all Eth stack main functions, e.g.:
        <ul>
          <li>EthIf_MainFunctionRx()</li>
          <li>EthIf_MainFunctionTx()</li>
          <li>EthIf_MainFunctionState()</li>
          <li>TcpIp_MainFunction()</li>
          <li>TcpIp_MainFunctionTx()</li>
          <li>SoAd_MainFunction()</li>
          <li>SoAd_MainFunctionTx()</li>
          <li>EthSM_MainFunction()</li>
        </ul>
        must be in the same Os task or have the same task priority to eliminate preemption.
      </description>
      <rationale>
        This limitation reduces code size and execution time by eliminating the need for extensive
        use of exclusive areas.
      </rationale>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>1</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB_INTREQ_SomeIpTp_0003</id>
      <status>approved</status>
      <source>EB integration requirement</source>
      <version>1</version>
      <description>
        The integrator must ensure after <function>SomeIpTp_Transmit()</function> is called that
        the application waits for positive or negative TxConfirmation call.
        If <function>SomeIpTp_Transmit()</function> gets called again before TxConfirmation was
        called, the transmit request call is rejected and the ongoing transmission is interrupted.
        The application gets informed about this interrupt within the next 
        <function>SomeIpTp_MainFunctionTx()</function> with a negative TxConfirmation. A call of
        <function>SomeIpTp_Transmit()</function> in context of TxConfirmation is possible.
      </description>
      <rationale>
        This limitation explains the possibility to interrupt an ongoing transmission and delegates
        the cleanup of internal data into main function context to protect against preemptions.
      </rationale>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>2</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">
    <specobject>
      <id>SomeIpTp.ECUC_SomeIpTp_00002</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SomeIpTpGeneral
        Container Type: Container
        Description: This container contains the general configuration parameters of the SomeIpTp 
        module.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
        Covered by development toolchain: VSMD check.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>3</internalId></specobject>
    <specobject>
      <id>SomeIpTp.ECUC_SomeIpTp_00003</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SomeIpTpChannel
        Container Type: Container
        Sub-Containers: SomeIpTpRxNSdu SomeIpTpTxNSdu 
        Description: This container contains the configuration parameters of the SomeIpTp channel.
        Lower Multiplicity: 1
        infinite
        Post-Build-Variant-Multiplicity: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
        Covered by development toolchain: VSMD check.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_24</srcid><srcstatus/><internalId>225</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>4</internalId></specobject>
    <specobject>
      <id>SomeIpTp.ECUC_SomeIpTp_00004</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SomeIpTpDevErrorDetect
        Parameter Type: Boolean
        Parent Containers: SomeIpTpGeneral,
        Description: Switches the Development Error Detection and Notification ON or OFF.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/SomeIpTp_Cfg.h_18</srcid><srcstatus/><internalId>251</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ComTest_APISyntax</srcid><srcstatus/><internalId>586</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>5</internalId></specobject>
    <specobject>
      <id>SomeIpTp.ECUC_SomeIpTp_00005</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SomeIpTpTxMainFunctionPeriod
        Parameter Type: FloatValue
        Parent Containers: SomeIpTpGeneral,
        Description: This parameter defines the cycle time in seconds of the periodic call of the 
        SomeIpTp_MainFunctionTx.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: INF (Type: OPEN)
        Min-Value: 0 (Type: OPEN)
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
        Covered by development toolchain: VSMD check.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>6</internalId></specobject>
    <specobject>
      <id>SomeIpTp.ECUC_SomeIpTp_00006</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SomeIpTpNPduSeparationTime
        Parameter Type: FloatValue
        Parent Containers: SomeIpTpChannel,
        Description: Sets the duration of the minimum time in seconds the SomeIpTp module shall wait 
        between the transmissions of N-PDUs.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: INF (Type: OPEN)
        Min-Value: 0 (Type: OPEN)
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
        Covered by development toolchain: VSMD check.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_25</srcid><srcstatus/><internalId>226</internalId></linkedfrom><linkedfrom><srcid>dev.SomeIpTp.NPduSeparationTime</srcid><srcstatus/><internalId>248</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp.ECUC_SomeIpTp_00006.Value_Range</srcid><srcstatus/><internalId>158</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>7</internalId></specobject>
    <specobject>
      <id>SomeIpTp.ECUC_SomeIpTp_00008</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SomeIpTpRxNSdu
        Container Type: Sub-Container
        Parent Containers: SomeIpTpChannel,
        Sub-Containers: SomeIpTpRxNPdu 
        Description: The following parameters needs to be configured for each N-SDU which has to be 
        passed as one assembled RxPdu to the upper layer.
        Lower Multiplicity: 0
        infinite
        Post-Build-Variant-Multiplicity: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
        Covered by development toolchain: VSMD check.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_26</srcid><srcstatus/><internalId>227</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>8</internalId></specobject>
    <specobject>
      <id>SomeIpTp.ECUC_SomeIpTp_00009</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SomeIpTpTxNSdu
        Container Type: Sub-Container
        Parent Containers: SomeIpTpChannel,
        Sub-Containers: SomeIpTpTxNPdu 
        Description: The following parameters needs to be configured for each N-SDU that the SomeIpTp 
        module transmits via the SomeIpTpChannel.
        Lower Multiplicity: 0
        infinite
        Post-Build-Variant-Multiplicity: true
        Multiplicity-Configuration Class: LINK, VARIANT-LINK-TIME
        Multiplicity-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Multiplicity-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
        Covered by development toolchain: VSMD check.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_27</srcid><srcstatus/><internalId>228</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>9</internalId></specobject>
    <specobject>
      <id>SomeIpTp.ECUC_SomeIpTp_00010</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SomeIpTpRxSduRef
        Parameter Type: Reference
        Parent Containers: SomeIpTpRxNSdu,
        Description: Reference to a Pdu in the COM-Stack that represents the assembled RxPdu which is 
        passed via the PduR to the upper layer.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/EcuC/EcucConfigSet/EcucPduCollection/Pdu
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
        Covered by development toolchain: VSMD check.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_28</srcid><srcstatus/><internalId>229</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>10</internalId></specobject>
    <specobject>
      <id>SomeIpTp.ECUC_SomeIpTp_00011</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SomeIpTpRxNPdu
        Container Type: Sub-Container
        Parent Containers: SomeIpTpRxNSdu,
        Description: This container contains the configuration parameters of the NPdu that is received 
        from a lower layer
        Lower Multiplicity: 1
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
        Covered by development toolchain: VSMD check.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>11</internalId></specobject>
    <specobject>
      <id>SomeIpTp.ECUC_SomeIpTp_00012</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SomeIpTpRxNPduRef
        Parameter Type: Reference
        Parent Containers: SomeIpTpRxNPdu,
        Description: Reference to a global Pdu that is used to harmonize HandleIDs in the COM-Stack.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/EcuC/EcucConfigSet/EcucPduCollection/Pdu
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
        Covered by development toolchain: VSMD check.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_29</srcid><srcstatus/><internalId>230</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>12</internalId></specobject>
    <specobject>
      <id>SomeIpTp.ECUC_SomeIpTp_00013</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SomeIpTpRxNPduHandleId
        Parameter Type: Integer
        Parent Containers: SomeIpTpRxNPdu,
        Description: This parameter defines the handle ID that is used by the PduR when calling 
        SomeIpTp_RxIndication.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: true
        Max-Value: 65535 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
        Covered by development toolchain: VSMD check.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>13</internalId></specobject>
    <specobject>
      <id>SomeIpTp.ECUC_SomeIpTp_00015</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SomeIpTpTxNSduRef
        Parameter Type: Reference
        Parent Containers: SomeIpTpTxNSdu,
        Description: Reference to a global Pdu in the COM-Stack that represents the original TxSdu 
        which is segmented and passed via the PduR to the lower layer.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/EcuC/EcucConfigSet/EcucPduCollection/Pdu
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
        Covered by development toolchain: VSMD check.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_30</srcid><srcstatus/><internalId>231</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>14</internalId></specobject>
    <specobject>
      <id>SomeIpTp.ECUC_SomeIpTp_00016</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SomeIpTpTxNPdu
        Container Type: Sub-Container
        Parent Containers: SomeIpTpTxNSdu,
        Description: This container contains the configuration parameters of the segmented Tx NPdus 
        that are transmitted to a lower layer.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
        Covered by development toolchain: VSMD check.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>15</internalId></specobject>
    <specobject>
      <id>SomeIpTp.ECUC_SomeIpTp_00017</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SomeIpTpTxNPduHandleId
        Parameter Type: Integer
        Parent Containers: SomeIpTpTxNPdu,
        Description: This parameter defines the handle ID that is used by PduR when calling 
        SomeIpTp_TriggerTransmit.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: true
        Max-Value: 65535 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
        Covered by development toolchain: VSMD check.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp.ECUC_SomeIpTp_00017.CONFIG</srcid><srcstatus/><internalId>105</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>16</internalId></specobject>
    <specobject>
      <id>SomeIpTp.ECUC_SomeIpTp_00018</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SomeIpTpTxNPduRef
        Parameter Type: Reference
        Parent Containers: SomeIpTpTxNPdu,
        Description: Reference to a global Pdu that is used to harmonize HandleIDs in the COM-Stack.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Destination: /AUTOSAR/EcucDefs/EcuC/EcucConfigSet/EcucPduCollection/Pdu
        Destination type: ECUC-PARAM-CONF-CONTAINER-DEF
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
        Covered by development toolchain: VSMD check.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_31</srcid><srcstatus/><internalId>232</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>17</internalId></specobject>
    <specobject>
      <id>SomeIpTp.ECUC_SomeIpTp_00019</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SomeIpTpVersionInfoApi
        Parameter Type: Boolean
        Parent Containers: SomeIpTpGeneral,
        Description: Activates the SomeIpTp_GetVersionInfo() API.
        Introduction: TRUE: Enables the SomeIpTp_GetVersionInfo() API. FALSE: SomeIpTp_GetVersionInfo(
        API is not included.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/SomeIpTp_Cfg.h_30</srcid><srcstatus/><internalId>252</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest02_CheckVersionInfo</srcid><srcstatus/><internalId>505</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ComTest_APISyntax</srcid><srcstatus/><internalId>586</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>18</internalId></specobject>
    <specobject>
      <id>SomeIpTp.ECUC_SomeIpTp_00020</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SomeIpTpTxNSduHandleId
        Parameter Type: Integer
        Parent Containers: SomeIpTpTxNSdu,
        Description: This parameter defines the handle ID of the NSdu that represents the original 
        TxSdu which is segmented and passed via the PduR to the lower layer. This handle ID is used by 
        PduR when calling SomeIpTp_Transmit.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: true
        Max-Value: 65535 (Type:
        Min-Value: 0 (Type:
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
        Covered by development toolchain: VSMD check.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp.ECUC_SomeIpTp_00020.CONFIG</srcid><srcstatus/><internalId>104</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>19</internalId></specobject>
    <specobject>
      <id>SomeIpTp.ECUC_SomeIpTp_00021</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name: SomeIpTpRxMainFunctionPeriod
        Parameter Type: FloatValue
        Parent Containers: SomeIpTpGeneral,
        Description: This parameter defines the cycle time in seconds of the periodic call of the 
        SomeIpTp_MainFunctionRx.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: false
        Value-Configuration Class: PRE-COMPILE, VARIANT-LINK-TIME
        Value-Configuration Class: PRE-COMPILE, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: INF (Type: OPEN)
        Min-Value: 0 (Type: OPEN)
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
        Covered by development toolchain: VSMD check.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>20</internalId></specobject>
    <specobject>
      <id>SomeIpTp.ECUC_SomeIpTp_00023</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>2</version>
      <description>
        Name: SomeIpTpRxTimeoutTime
        Parameter Type: FloatValue
        Parent Containers: SomeIpTpChannel,
        Description: Timer to monitor the successful reception. It is started when the first NPdu is 
        received, restarted after reception of intermediate NPdus, and is stopped when the last NPdu 
        has been received. The value shall be calculated as follows: (SomeIpTpRxTimeoutTime = 
        SomeIpTpNPduSeparationTime + budget), where the time budget compensates intermediary hops and 
        jitters within the ECU implementation.
        Lower Multiplicity: 1
        Upper Multiplicity: 1
        Scope: LOCAL
        Origin: AUTOSAR_ECUC
        Post-Build-Variant-Value: true
        Value-Configuration Class: LINK, VARIANT-LINK-TIME
        Value-Configuration Class: POST-BUILD, VARIANT-POST-BUILD
        Value-Configuration Class: PRE-COMPILE, VARIANT-PRE-COMPILE
        Symbolic-Name-Value: false
        Max-Value: INF (Type: OPEN)
        Min-Value: 0 (Type: OPEN)
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
        Covered by development toolchain: VSMD check.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SomeIpTp.PrecompileOnly</srcid><srcstatus/><internalId>233</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>21</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00001</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        The SOME/IP TP module shall remember the PDU length separately for every PDU ID which is passed 
        by the PduInfoPtr parameter of the SomeIpTp_Transmit() call.
      </description>
      <comment>
        The SOME/IP TP module needs this information to calculate the payload size,
        the Offset Value, and the More Segments Flag for the SOME/IP segments which are
        going to be transmitted.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1259</srcid><srcstatus/><internalId>340</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_not_eq_Consecutive</srcid><srcstatus/><internalId>578</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_eq_Consecutive</srcid><srcstatus/><internalId>579</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>22</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00002</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        The amount of generated SOME/IP segments shall be as little as possible.
      </description>
      <comment>
        This means that the SOME/IP TP module shall try to always use the maximum
        allowed segmentation size.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1260</srcid><srcstatus/><internalId>341</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_not_eq_Consecutive</srcid><srcstatus/><internalId>578</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_eq_Consecutive</srcid><srcstatus/><internalId>579</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>23</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00003</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        The size of every segmented SOME/IP message shall consist of the sum of 12 bytes of SOME/IP 
        header, and the Payload bytes itself.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1439</srcid><srcstatus/><internalId>352</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1473</srcid><srcstatus/><internalId>358</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1556</srcid><srcstatus/><internalId>369</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1643</srcid><srcstatus/><internalId>382</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_not_eq_Consecutive</srcid><srcstatus/><internalId>578</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_eq_Consecutive</srcid><srcstatus/><internalId>579</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>24</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00004</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        The SOME/IP TP module shall derive the maximum possible size of the segmented SOME/IP PDUs 
        using the parameter SomeIpTpTxNPduRef.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/generate/include/SomeIpTp_PrecompileMacros.m_33</srcid><srcstatus/><internalId>476</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>25</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00005</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        The SOME/IP TP module shall generate segmented SOME/IP PDUs not larger than the size derived 
        from the parameter SomeIpTpTxNPduRef.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_not_eq_Consecutive</srcid><srcstatus/><internalId>578</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_eq_Consecutive</srcid><srcstatus/><internalId>579</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>26</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00006</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        Every payload of a segmented SOME/IP message except the last one has to be a multiple of 16 
        bytes.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfConsecutiveSegment_PayloadNotDivisableBy16</srcid><srcstatus/><internalId>541</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_not_eq_Consecutive</srcid><srcstatus/><internalId>578</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_eq_Consecutive</srcid><srcstatus/><internalId>579</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>27</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00007</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        The SOME/IP TP module shall buffer the pointer to the Meta-data for every PDU ID separately 
        which is passed by the PduInfoPtr parameter of the API SomeIpTp_Transmit(), and forward this 
        information when PduR_SomeIpTpTransmit() is called for each segment.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1426</srcid><srcstatus/><internalId>350</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1440</srcid><srcstatus/><internalId>353</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1557</srcid><srcstatus/><internalId>370</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1644</srcid><srcstatus/><internalId>383</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_not_eq_Consecutive</srcid><srcstatus/><internalId>578</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_eq_Consecutive</srcid><srcstatus/><internalId>579</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>28</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00008</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        The SOME/IP TP module shall store the Request ID, Protocol Version, Interface Version, Message 
        Type, and the Return Code of the SOME/IP header for every PDU ID separately which is returned 
        by the first call of PduR_SomeIpTpCopyTxData() triggered by the API call SomeIpTp_Transmit(
      </description>
      <comment>
        The SOME/IP header is contained in the first 8 bytes of the total length of the original 
        SOME/IP PDU. The total length is provided via the API call SomeIpTp_Transmit().
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.4.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1427</srcid><srcstatus/><internalId>351</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_not_eq_Consecutive</srcid><srcstatus/><internalId>578</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_eq_Consecutive</srcid><srcstatus/><internalId>579</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>29</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00009</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the provided SDU fits into one single PDU, the provided SOME/IP header shall be used with no 
        modification. If the provided SDU does not fit into one single SOME/IP PDU, the SOME/IP TP 
        module shall set the TP-Flag of the Message Type to '1' for every SOME/IP segment which is 
        going to be sent on the bus via the PduR. All the other bits contained in the Message Type 
        field shall stay untouched.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00009.SDU_Fitting</srcid><srcstatus/><internalId>146</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00009.Message_Type_Set_Tp_Flag</srcid><srcstatus/><internalId>147</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>30</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00010</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        The SOME/IP TP module shall create and attach the Offset Field, the Reserved bits, and the More 
        Segment Flag to every SOME/IP segment which is going to be sent on the bus.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1474</srcid><srcstatus/><internalId>359</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1560</srcid><srcstatus/><internalId>371</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1647</srcid><srcstatus/><internalId>384</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_not_eq_Consecutive</srcid><srcstatus/><internalId>578</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_eq_Consecutive</srcid><srcstatus/><internalId>579</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>31</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00011</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        The Offset Field of the first SOME/IP segment shall be set to '0'
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1479</srcid><srcstatus/><internalId>362</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_not_eq_Consecutive</srcid><srcstatus/><internalId>578</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_eq_Consecutive</srcid><srcstatus/><internalId>579</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>32</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00012</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        The SOME/IP TP module shall increase the value of the Offset Field for every successfully 
        transmitted SOME/IP segment by the amount of bytes which have been transmitted by the previous 
        SOME/IP segment divided by 16.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1567</srcid><srcstatus/><internalId>373</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1654</srcid><srcstatus/><internalId>386</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_not_eq_Consecutive</srcid><srcstatus/><internalId>578</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_eq_Consecutive</srcid><srcstatus/><internalId>579</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>33</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00013</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        The SOME/IP TP module shall set the Reserved bits statically to '000' by the sender and shall 
        be ignored by the receiver.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1480</srcid><srcstatus/><internalId>363</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1573</srcid><srcstatus/><internalId>375</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1660</srcid><srcstatus/><internalId>388</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_not_eq_Consecutive</srcid><srcstatus/><internalId>578</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_eq_Consecutive</srcid><srcstatus/><internalId>579</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>34</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00014</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        The SOME/IP TP module shall set the More Segment Flag to '1' except for the last SOME/IP 
        segment.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1484</srcid><srcstatus/><internalId>364</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1581</srcid><srcstatus/><internalId>377</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_not_eq_Consecutive</srcid><srcstatus/><internalId>578</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_eq_Consecutive</srcid><srcstatus/><internalId>579</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>35</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00015</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        The SOME/IP TP module shall set the More Segment Flag to '0' for the last SOME/IP segment.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1661</srcid><srcstatus/><internalId>389</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1668</srcid><srcstatus/><internalId>391</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_not_eq_Consecutive</srcid><srcstatus/><internalId>578</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_eq_Consecutive</srcid><srcstatus/><internalId>579</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>36</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00016</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the API SomeIpTp_Transmit() is called, the SOME/IP TP module shall check for an ongoing 
        segmentation for the provided PDU ID.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1233</srcid><srcstatus/><internalId>337</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ImplTest02_CheckInterruptDisAssembly_by_SomeIpTp_Transmit_Call</srcid><srcstatus/><internalId>584</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>37</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00017</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the API SomeIpTp_Transmit()is called while no segmentation is ongoing for this PDU ID, the 
        SOME/IP TP module shall perform the following steps in the following order:
        Remember the provided PDU length (provided PduInfoPtr)
        Derive the PDU ID which shall be used for every segmented SOME/IP PDU (see SomeIpTpTxNPduRef)
        Calculate the size of the SOME/IP for the first segment (considering header and payload)
        Call the API PduR_SomeIpTpTransmit() using the derived PDU ID and the calculated PDU size and 
        set the SduDataPtr to NULL_PTR.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00017.Pdu_Length</srcid><srcstatus/><internalId>148</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00017.Pdu_ID</srcid><srcstatus/><internalId>149</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00017.First_Segment_Size_Calc</srcid><srcstatus/><internalId>150</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00017.call_PduR_SomeIpTpTransmit</srcid><srcstatus/><internalId>151</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>38</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00018</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>2</version>
      <description>
        When the API SomeIpTp_TriggerTransmit() is called, create the header for the SOME/IP segment 
        and call the API PduR_SomeIpTpCopyTxData()using the calculated payload for this segment, and 
        set the parameter retry to NULL_PTR.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SomeIpTp.NULL_RetryInfoPtrs</srcid><srcstatus/><internalId>247</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00018.SingleSegment</srcid><srcstatus/><internalId>139</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00018.SingleSegment_Retry</srcid><srcstatus/><internalId>140</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00018.FirstSegment_header</srcid><srcstatus/><internalId>141</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00018.FirstSegment_payload</srcid><srcstatus/><internalId>142</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00018.FirstSegment_Payload_Retry</srcid><srcstatus/><internalId>143</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00018.Consecutive_or_last_Segment</srcid><srcstatus/><internalId>144</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00018.Consecutive_or_last_Segment_Retry</srcid><srcstatus/><internalId>145</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>39</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00019</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        To calculate the possible maximum size for all consecutive SOME/IP TP segments, the SOME/IP TP 
        module shall consider the available buffer size of the upper layer by evaluating the 
        availableDataPtr, provided by the API PduR_SomeIpTpCopyTxData(). I.e.:The payload size of the 
        next SOME/IP TP segment needs to be smaller or equal to the available buffer, AND dividable by 
        16 for all segments but for the last.
      </description>
      <comment>
        This and SWS_SomeIpTp_00024 Contradicts with PRS_SOMEIP_00734 -Bugzilla Rfc(78197)
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SomeIpTp.availableDataPtrTx</srcid><srcstatus/><internalId>235</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>40</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00020</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        The SOME/IP TP module shall debounce subsequent calls of the API PduR_SomeIpTpTransmit()for the 
        same PDU ID,using the parameter SomeIpTpNPduSeparationTime. It defines the time span between 
        the call of SomeIpTp_TxConfirmation(), and the subsequent call of the API PduR_SomeIpTpTransmit(
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_592</srcid><srcstatus/><internalId>273</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_608</srcid><srcstatus/><internalId>274</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_not_eq_Consecutive</srcid><srcstatus/><internalId>578</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_eq_Consecutive</srcid><srcstatus/><internalId>579</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>41</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00021</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>2</version>
      <description>
        If the last SOME/IP segment of the original SOME/IP PDU has been transmitted successfully (i.e.
        the call of SomeIpTp_TxConfirmation()with parameter success equals TRUE occurred for the last 
        call of PduR_SomeIpTpCopyTxData()), the SOME/IP TP module shall
        Call the API PduR_SomeIpTpTxConfirmation(
      </description>
      <comment>
        With the call of PduR_SomeIpTpTxConfirmation(), the segmentation process is finished.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_155</srcid><srcstatus/><internalId>242</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00021.PDUR403</srcid><srcstatus/><internalId>130</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>42</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00022</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the API SomeIpTp_Transmit() is called with a PDU ID which is currently used for an ongoing 
        segmentation,
        E_NOT_OK shall be returned.
        The ongoing disassembly process for this PDU ID shall be canceled.
        The API PduR_SomeIpTpTxConfirmation()with result set to E_NOT_OK shall be called.
        The API Det_ReportRuntimeError() shall be called with the runtime error code 
        SOMEIPTP_E_DISASSEMBLY_INTERRUPT.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.4.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00022.ReportError</srcid><srcstatus/><internalId>117</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00022.Confirmation</srcid><srcstatus/><internalId>118</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>43</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00023</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>2</version>
      <description>
        If the API SomeIpTp_TxConfirmation() is called with parameter success set to FALSE,
        The disassembly process for this PDU ID shall be canceled.
        The API PduR_SomeIpTpTxConfirmation()with result set to E_NOT_OK shall be called.
        The API Det_ReportRuntimeError() shall be called with the runtime error code 
        SOMEIPTP_E_DISASSEMBLY_INTERRUPT.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_156</srcid><srcstatus/><internalId>243</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.StopAssembly</srcid><srcstatus/><internalId>131</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.DET</srcid><srcstatus/><internalId>132</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.Confirmation</srcid><srcstatus/><internalId>133</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>44</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00024</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>2</version>
      <description>
        If the availableDataPtr, provided by the API PduR_SomeIpTpCopyTxData() is smaller than 16 bytes,
        or smaller than required for the last SOME/IP TP segment,
        The disassembly process for this PDU ID shall be canceled.
        The API PduR_SomeIpTpTxConfirmation()with result set to E_NOT_OK shall be called.
        The API Det_ReportRuntimeError() shall be called with the runtime error code 
        SOMEIPTP_E_DISASSEMBLY_INTERRUPT.
      </description>
      <comment>
        This and SWS_SomeIpTp_00019 Contradicts with PRS_SOMEIP_00734 -Bugzilla Rfc(78197)
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SomeIpTp.availableDataPtrRx</srcid><srcstatus/><internalId>237</internalId></linkedfrom><linkedfrom><srcid>doc/public/changelog/Deviations.xml_132</srcid><srcstatus/><internalId>238</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00024.ExpectedForAllButLast_Result_RDUR403_CancelDisassembly</srcid><srcstatus/><internalId>107</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00024.ExpectedForAllButLast_Result_RDUR403_CallTxConfirmation</srcid><srcstatus/><internalId>108</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00024.ExpectedForAllButLast_Result_RDUR403_ReportError</srcid><srcstatus/><internalId>109</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>45</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00025</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>2</version>
      <description>
        If an API PduR_SomeIpTpCopyTxData()returns something else than BUFREQ_OK,
        The disassembly process for this PDU ID shall be canceled.
        The API PduR_SomeIpTpTxConfirmation()with result set to E_NOT_OK shall be called.
        The API Det_ReportRuntimeError() shall be called with the runtime error code 
        SOMEIPTP_E_DISASSEMBLY_INTERRUPT.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_133</srcid><srcstatus/><internalId>239</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00025.Result_RDUR403_CancelDisassembly</srcid><srcstatus/><internalId>110</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00025.Result_RDUR403_CallTxConfirmation</srcid><srcstatus/><internalId>111</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00025.Result_RDUR403_ReportError</srcid><srcstatus/><internalId>112</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>46</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00026</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the API SomeIpTp_RxIndication() is called, the SOME/IP TP module shall derive the following 
        SOME/IP header information from the first 12 bytes of the received PDU:
        Request ID [32 bit]
        Protocol Version [8 bit]
        Interface Version [8 bit]
        Message Type [8 bit]
        Return Code [8 bit]
        Offset [28 bit]
        Reserved bits [3 bit]
        More Segment Flag [1 bit]
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1900</srcid><srcstatus/><internalId>409</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfMsg_ThreeSegments</srcid><srcstatus/><internalId>508</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfTwoMsg_ThreeSegments</srcid><srcstatus/><internalId>509</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>47</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00027</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        The SOME/IP TP module shall be able to store the value of the Offset Field for every PDU ID 
        separately.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1936</srcid><srcstatus/><internalId>418</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_2066</srcid><srcstatus/><internalId>438</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfMsg_ThreeSegments</srcid><srcstatus/><internalId>508</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfTwoMsg_ThreeSegments</srcid><srcstatus/><internalId>509</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>48</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00028</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        The SOME/IP TP module shall be able to store the number of Payload bytes for every PDU ID 
        separately which has been passed by a call of SomeIpTp_RxIndication(
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1937</srcid><srcstatus/><internalId>419</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_2067</srcid><srcstatus/><internalId>439</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfMsg_ThreeSegments</srcid><srcstatus/><internalId>508</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfTwoMsg_ThreeSegments</srcid><srcstatus/><internalId>509</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>49</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00029</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        The SOME/IP TP module shall store the status of the More Segment Flag for every PDU ID 
        separately which is passed by a call of SomeIpTP_RxIndication(
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SomeIpTp.StorageOfMoreFlagRx</srcid><srcstatus/><internalId>234</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>50</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00030</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        The SOME/IP TP module shall buffer the pointer to the Meta-data for every PDU ID separately 
        which is passed by the PduInfoPtr parameter of the API SomeIpTp_RxIndication(), and forward 
        this information when PduR_SomeIpTpStartOfReception is called.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00030.Buffer_MetaData</srcid><srcstatus/><internalId>152</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00030.Forward_MetaData</srcid><srcstatus/><internalId>153</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>51</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00031</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        If SomeIpTp_RxIndication() is called with TP Flag set to '0', SOME/IP TP shall call 
        PduR_SomeIpTpStartOfReception, PduR_SomeIpTpCopyRxData(), and PduR_SomeIpTpRxIndication(), 
        directly after each other providing the received indication.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1114</srcid><srcstatus/><internalId>323</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1799</srcid><srcstatus/><internalId>398</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfSingleMsg_Tp_0</srcid><srcstatus/><internalId>507</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfSingleMsg_ZeroPayload</srcid><srcstatus/><internalId>511</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>52</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00032</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        If a SOME/IP segment is successfully received with Offset Field set to 0, the SOME/IP TP module 
        shall store the values of the received SOME/IP header for each PDU ID separately.These values 
        shall be used as reference values for the (expected) following consecutive receiving SOME/IP 
        segments (i.e. with Offset Field set to &gt; 0)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1902</srcid><srcstatus/><internalId>411</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfMsg_ThreeSegments</srcid><srcstatus/><internalId>508</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfTwoMsg_ThreeSegments</srcid><srcstatus/><internalId>509</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>53</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00033</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        If a SOME/IP segment is successfully received with Offset Field set to 0, the SOME/IP TP module 
        shall
        Start the Rx timeout time defined by SomeIpTpRxTimeoutTime.
        Call the API PduR_SomeIpTpStartOfReception() with the PDU ID derived from the parameter 
        SomeIpTpRxSduRef and the TpSduLength set to '0'
      </description>
      <comment>
        TpSduLength set to '0' indicates "unknown message length" to the upper layers.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00033.RxTimeout_Start</srcid><srcstatus/><internalId>154</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00033.StartOfReception_Call</srcid><srcstatus/><internalId>155</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>54</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00034</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>2</version>
      <description>
        If a SOME/IP segment is successfully received with Offset Field set to 0 and after the SOME/IP 
        TP module has called the API PduR_SomeIpTpStartOfReception(), the SOME/IP TP module shall check 
        the returned bufferSizePtr. If the bufferSizePtr is greater or equal to the sum of the received 
        payload and the added SOME/IP header, the SOME/IP TP module shall call the API 
        PduR_SomeIpTpCopyRxData() to pass the following assembled SOME/IP message. This PDU shall 
        contain the following content:
        Request ID [32 bit]
        Protocol Version [8 bit]
        Interface Version [8 bit]
        Message Type [8 bit] - see SWS_SomeIpTp_00028
        Return Code [8 bit]
        Payload]
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00034.CopyRxDataForHeader</srcid><srcstatus/><internalId>137</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00034.CopyRxDataForPayload</srcid><srcstatus/><internalId>138</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SomeIpTp.FirstSegmentCopy</srcid><srcstatus/><internalId>246</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>55</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00035</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        The SOME/IP TP module shall set the TP-Flag contained in the Message Type back to '0' before 
        the assembled SOME/IP header is passed to the upper layer.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1905</srcid><srcstatus/><internalId>412</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfMsg_ThreeSegments</srcid><srcstatus/><internalId>508</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfTwoMsg_ThreeSegments</srcid><srcstatus/><internalId>509</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>56</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00036</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        The SOME/IP TP module shall store the number of Payload bytes for every PDU ID separately which 
        has been passed to the upper layer.
      </description>
      <comment>
        This information will be used to verify the Offset Value of the consecutive SOME/IP
        segments.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1938</srcid><srcstatus/><internalId>420</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfMsg_ThreeSegments</srcid><srcstatus/><internalId>508</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfTwoMsg_ThreeSegments</srcid><srcstatus/><internalId>509</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>57</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00037</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>2</version>
      <description>
        If a SOME/IP segment is successfully received with Offset Field&gt; 0, the SOME/IP TP module shall 
        compare the received SOME/IP header fields with the values of the stored SOME/IP header fields 
        which has been received with the first segment (i.e. Offset was set to 0)
        Request ID [32 bit]
        Protocol Version [8 bit]
        Interface Version [8 bit]
        Message Type [8 bit]
        Return Code [8 bit]
        If these values match restart the SomeIpTpRxTimeoutTime and continue with the assembly process.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.1</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1998</srcid><srcstatus/><internalId>427</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_2018</srcid><srcstatus/><internalId>429</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfMsg_ThreeSegments</srcid><srcstatus/><internalId>508</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfTwoMsg_ThreeSegments</srcid><srcstatus/><internalId>509</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>58</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00038</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        The SOME/IP TP module shall store the number of Payload bytes for every PDU ID separately which 
        has been passed to the upper layer.
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_2068</srcid><srcstatus/><internalId>440</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfMsg_ThreeSegments</srcid><srcstatus/><internalId>508</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfTwoMsg_ThreeSegments</srcid><srcstatus/><internalId>509</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>59</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00039</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        The SOME/IP TP module shall compare the value of the Offset Field with the sum divided by 16 of 
        copied Payload bytes since the first received SOME/IP segment (i.e. with Offset Field set to '0'
        If this sum divided by 16 matches with the current Offset Value and if the bufferSizePtr 
        provided by the previous call of the API PduR_SomeIpTpCopyRxData()is greater or equal to the 
        received payload, call the API PduR_SomeIpTpCopyRxData()with SduLength set to the received 
        Payload bytes.
      </description>
      <comment>
        In case of Offset Field value &gt; 0, only the Payload bytes are provided to the upper
        layer (without any SOME/IP header fields)
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_2040</srcid><srcstatus/><internalId>432</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_2047</srcid><srcstatus/><internalId>435</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_2058</srcid><srcstatus/><internalId>437</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfMsg_ThreeSegments</srcid><srcstatus/><internalId>508</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfTwoMsg_ThreeSegments</srcid><srcstatus/><internalId>509</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>60</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00040</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        If a SOME/IP segment is successfully received with the More Segment Flag set to '0', the SOME/
        IP TP module shall
        Cancel the Rx timeout time defined by SomeIpTpRxTimeoutTime.
        Call the API PduR_SomeIpTpRxIndication() after it has copied the remaining received Payload 
        bytes to the upper layer(as defined in SWS_SomeIpTp_00033)
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00040.RxTimeout_Cancel</srcid><srcstatus/><internalId>156</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00040.RxIndication_Call</srcid><srcstatus/><internalId>157</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>61</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00041</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>2</version>
      <description>
        If the Rx timeout time defined by SomeIpTpRxTimeoutTime expires,
        The current assembly process shall be interrupted as defined by SWS_SomeIpTp_00054.
        The API Det_ReportRuntimeError() shall be called with the runtime error code 
        SOMEIPTP_E_ASSEMBLY_INTERRUPT.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00041.ReportError</srcid><srcstatus/><internalId>119</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>62</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00042</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>2</version>
      <description>
        If the API SomeIpTp_RxIndication() is called with the Offset Value is &gt; 0 but no session is 
        currently running,
        The received PDU shall be ignored
        The API Det_ReportRuntimeError() shall be called with the runtime error code 
        SOMEIPTP_E_INCONSISTENT_SEQUENCE.
      </description>
      <comment>
        This check identifies that at least the first segment has not been received.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00042.ReportError</srcid><srcstatus/><internalId>120</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>63</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00043</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        Module | Header File | Imported Type 
        ComStack_Types | ComStack_Types.h | BufReq_ReturnType 
        ComStack_Types.h | PduIdType 
        ComStack_Types.h | PduInfoType 
        ComStack_Types.h | PduLengthType 
        ComStack_Types.h | RetryInfoType 
        ComStack_Types.h | TpDataStateType 
        Std | Std_Types.h | Std_ReturnType 
        Std_Types.h | Std_VersionInfoType 
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ComTest_APISyntax</srcid><srcstatus/><internalId>586</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>64</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00044</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SomeIpTp_GetVersionInfo 
        Syntax 
        void SomeIpTp_GetVersionInfo (Std_VersionInfoType* VersionInfo)
        Service ID [hex] | 0x01 
        Sync/Async | Synchronous 
        Reentrancy | Reentrant 
        Parameters (in) | None 
        Parameters (inout) | None 
        Parameters (out) | VersionInfo | Pointer to where to store the version information of this 
        module.
        Return value | None 
        Description | Returns the version information of this module.
        Available via | SomeIpTp.h 
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_441</srcid><srcstatus/><internalId>263</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest02_CheckVersionInfo</srcid><srcstatus/><internalId>505</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ComTest_APISyntax</srcid><srcstatus/><internalId>586</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>65</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00045</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>2</version>
      <description>
        If the API SomeIpTp_RxIndication() is called and a session is currently active, the SOME/IP TP 
        module shall check if the TP-Flag of the Message Type is set to '1'. If the TP-Flag is not set 
        to '1'
        The current assembly process shall be interrupted as defined by SWS_SomeIpTp_00054.
        The API Det_ReportRuntimeError() shall be called with the runtime error code 
        SOMEIPTP_E_MESSAGE_TYPE.
      </description>
      <comment>
        - SWS_SomeIpTp_00083 is missing and equals to SWS_SomeIpTp_00054 - Bugzilla Rfc(78080)
        - This requirement shall be extended to allow the handling according to SWS_SomeIpTp_00009 - Bugzilla Rfc(78084)
        - The approach in this case is to consider this received segment with TP-Flag set to '0' while an assembly
          process is already ongoing as a faulty segment with message type error, and will not be received as a new single
          segment message.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SomeIpTp.TP-flag0</srcid><srcstatus/><internalId>236</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00045.AllButFirst_ReportError</srcid><srcstatus/><internalId>106</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>66</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00046</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SomeIpTp_Init 
        Syntax 
        void SomeIpTp_Init (const SomeIpTp_ConfigType* config)
        Service ID [hex] | 0x02 
        Sync/Async | Synchronous 
        Reentrancy | Non Reentrant 
        Parameters (in) | config | Base pointer to the configuration structure of the SOME/IP TP module.
        Parameters (inout) | None 
        Parameters (out) | None 
        Return value | None 
        Description | Initializes the SOME/IP TP module.
        Available via | SomeIpTp.h 
      </description>
      <comment>
        The AUTOSAR ECU StateManager calls this SOME/IP TP API service with the
        address of the static configuration structure of the module in parameter
        SomeIpTp_ConfigPtr.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_472</srcid><srcstatus/><internalId>265</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ComTest_APISyntax</srcid><srcstatus/><internalId>586</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>67</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00047</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SomeIpTp_Transmit 
        Syntax 
        Std_ReturnType SomeIpTp_Transmit (PduIdType TxPduId, const PduInfoType* PduInfoPtr)
        Service ID [hex] | 0x49 
        Sync/Async | Synchronous 
        Reentrancy | Reentrant for different PduIds. Non reentrant for the same PduId.
        Parameters (in) | TxPduId | Identifier of the PDU to be transmitted 
        PduInfoPtr | Length of and pointer to the PDU data and pointer to MetaData.
        Parameters (inout) | None 
        Parameters (out) | None 
        Return value | Std_ReturnType | E_OK: Transmit request has been accepted.E_NOT_OK: Transmit 
        request has not been accepted.
        Description | Requests transmission of a PDU.
        Available via | SomeIpTp.h 
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1193</srcid><srcstatus/><internalId>332</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ComTest_APISyntax</srcid><srcstatus/><internalId>586</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>68</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00048</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>2</version>
      <description>
        If the API SomeIpTp_RxIndication() is called, the SOME/IP TP module shall check the value of 
        the Offset Field. If the received Offset Value equals '0' while the received Payload bytes of 
        the previous SOME/IP segments is greater than '0', the SOME/IP TP module shall perform the 
        following steps in the following order:
        The current assembly process shall be interrupted as defined by SWS_SomeIpTp_00054.
        The API Det_ReportRuntimeError() shall be called with the runtime error code 
        SOMEIPTP_E_INCONSISTENT_SEQUENCE.
        Start the assembly process according to chapter 7.3.1 SOME/IP segment received with Offset 0
      </description>
      <comment>
        SWS_SomeIpTp_00083 is missing and equals to SWS_SomeIpTp_00054 - Bugzilla Rfc(78080)
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00048.ReportError</srcid><srcstatus/><internalId>121</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>69</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00049</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>2</version>
      <description>
        If the bufferSizePtr provided by the API PduR_SomeIpTpStartOfReception()or 
        PduR_SomeIpTpCopyRxData()is smaller than the sum of the received and the added SOME/IP header (
        in case of the first segment) or the received payload (in case of any subsequent segment)
        The current assembly process shall be interrupted as defined by SWS_SomeIpTp_00054.
        The API Det_ReportRuntimeError()shall be called with the runtime error code 
        SOMEIPTP_E_ASSEMBLY_INTERRUPT.
      </description>
      <comment>
        SWS_SomeIpTp_00083 is missing and equals to SWS_SomeIpTp_00054 - Bugzilla Rfc(78080)
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00049.bufferSizePtr_StartOfReception</srcid><srcstatus/><internalId>122</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00049.bufferSizePtr_CopyRxData</srcid><srcstatus/><internalId>123</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>70</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00050</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>2</version>
      <description>
        If the API PduR_SomeIpTpCopyRxData()returns something else than BUFREQ_OK,
        The assembly process for this PDU ID shall be interrupted as defined by SWS_SomeIpTp_00054.
        The API Det_ReportRuntimeError() shall be called with the runtime error code 
        SOMEIPTP_E_ASSEMBLY_INTERRUPT.
      </description>
      <comment>
        SWS_SomeIpTp_00083 is missing and equals to SWS_SomeIpTp_00054 - Bugzilla Rfc(78080)
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00050.ReportError</srcid><srcstatus/><internalId>124</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>71</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00051</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>2</version>
      <description>
        If the API PduR_SomeIpTpStartOfReception() returns something else than BUFREQ_OK,
        The assembly process for this PDU ID shall be stopped.
        The API Det_ReportRuntimeError() shall be called with the runtime error code 
        SOMEIPTP_E_ASSEMBLY_INTERRUPT.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00051.ReportError</srcid><srcstatus/><internalId>125</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>72</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00052</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        Type of error | Related error code | Error value 
        SOME/IP TP module not initialized | SOMEIPTP_E_UNINITSomeIpTp.SOMEIPTP_E_UNINIT | 0x01 
        Null pointer has been passed as an argument | SOMEIPTP_E_PARAM_POINTERSomeIpTp.
        SOMEIPTP_E_PARAM_POINTER | 0x02 
        Unknown parameter has been passed | SOMEIPTP_E_PARAMSomeIpTp.SOMEIPTP_E_PARAM | 0x03 
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/SomeIpTp.h_78</srcid><srcstatus/><internalId>253</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/SomeIpTp.h_85</srcid><srcstatus/><internalId>254</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/SomeIpTp.h_92</srcid><srcstatus/><internalId>255</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SomeIpTp.NotInit</srcid><srcstatus/><internalId>249</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>73</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00053</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SomeIpTp_TriggerTransmit 
        Syntax 
        Std_ReturnType SomeIpTp_TriggerTransmit (PduIdType TxPduId, PduInfoType* PduInfoPtr)
        Service ID [hex] | 0x41 
        Sync/Async | Synchronous 
        Reentrancy | Reentrant for different PduIds. Non reentrant for the same PduId.
        Parameters (in) | TxPduId | ID of the SDU that is requested to be transmitted.
        Parameters (inout) | PduInfoPtr | Contains a pointer to a buffer (SduDataPtr) to where the SDU 
        data shall be copied, and the available buffer size in SduLengh. On return, the service will 
        indicate the length of the copied SDU data in SduLength.
        Parameters (out) | None 
        Return value | Std_ReturnType | E_OK: SDU has been copied and SduLength indicates the number of 
        copied bytes.E_NOT_OK: No SDU data has been copied. PduInfoPtr must not be used since it may 
        contain a NULL pointer or point to invalid data.
        Description | Within this API, the upper layer module (called module) shall check whether the 
        available data fits into the buffer size reported by PduInfoPtr-&gt;SduLength. If it fits, it 
        shall copy its data into the buffer provided by PduInfoPtr-&gt;SduDataPtr and update the length of 
        the actual copied data in PduInfoPtr-&gt;SduLength. If not, it returns E_NOT_OK without changing 
        PduInfoPtr.
        Available via | SomeIpTp.h 
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_836</srcid><srcstatus/><internalId>303</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_not_eq_Consecutive</srcid><srcstatus/><internalId>578</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_eq_Consecutive</srcid><srcstatus/><internalId>579</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ComTest_APISyntax</srcid><srcstatus/><internalId>586</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>74</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00054</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the SOME/IP TP module interrupts the assembly process because of a detected error, the SOME/
        IP TP module shall
        Call the API PduR_SomeIpTpRxIndication()for this PDU ID with E_NOT_OK.
        The Rx timeout time defined by SomeIpTpRxTimeoutTime shall be canceled (if still running) for 
        this PDU ID.
      </description>
      <comment>
        The possible reasons for interruptions are listed below.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00054.Result_RDUR430</srcid><srcstatus/><internalId>113</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00054.Result_RDUR403</srcid><srcstatus/><internalId>114</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>75</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00056</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>2</version>
      <description>
        Service Name | SomeIpTp_RxIndication 
        Syntax 
        void SomeIpTp_RxIndication (PduIdType RxPduId, const PduInfoType* PduInfoPtr)
        Service ID [hex] | 0x42 
        Sync/Async | Synchronous 
        Reentrancy | Reentrant for different PduIds. Non reentrant for the same PduId.
        Parameters (in) | RxPduId | ID of the received PDU.
        PduInfoPtr | Contains the length (SduLength) of the received PDU, a pointer to a buffer (
        SduDataPtr) containing the PDU, and the MetaData related to this PDU.
        Parameters (inout) | None 
        Parameters (out) | None 
        Return value | None 
        Description | Indication of a received PDU from a lower layer communication interface module.
        Available via | SomeIpTp.h 
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_154</srcid><srcstatus/><internalId>241</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00056.ASR403</srcid><srcstatus/><internalId>129</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>76</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00057</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SomeIpTp_RxIndication() shall check that the service 
        SomeIpTp_Init() was previously called. If the check fails, SomeIpTp_RxIndication()shall raise 
        the development error SOMEIPTP_E_UNINIT.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_970</srcid><srcstatus/><internalId>311</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest01_CheckDetReportErrorCall_00057</srcid><srcstatus/><internalId>493</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SomeIpTp.NotInit</srcid><srcstatus/><internalId>249</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>77</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00058</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SomeIpTp_MainFunctionTx 
        Syntax 
        void SomeIpTp_MainFunctionTx (void)
        Service ID [hex] | 0x03 
        Description | This function performs the processing of the AUTOSAR SOME/IP TP module's 
        transmission activities.
        Available via | SchM_SomeIpTp.h 
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_528</srcid><srcstatus/><internalId>266</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest01_MainFunctionTxReturnIfNotInitialized</srcid><srcstatus/><internalId>495</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ComTest_APISyntax</srcid><srcstatus/><internalId>586</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>78</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00059</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        A call to SomeIpTp_MainFunctionTx() shall simply return if the AUTOSAR SOME/IP TP module was 
        not previously initialized with a call to SomeIpTp_Init(
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_692</srcid><srcstatus/><internalId>291</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest01_MainFunctionTxReturnIfNotInitialized</srcid><srcstatus/><internalId>495</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>79</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00060</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        API Function | Header File | Description 
        Det_ReportRuntimeError | Det.h | Service to report runtime errors. If a callout has been 
        configured then this callout shall be called.
        PduR_SomeIpTpCopyRxData | PduR_SomeIpTp.h | This function is called to provide the received 
        data of an I-PDU segment (N-PDU) to the upper layer. Each call to this function provides the 
        next part of the I-PDU data. The size of the remaining buffer is written to the position 
        indicated by bufferSizePtr.
        PduR_SomeIpTpCopyTxData | PduR_SomeIpTp.h | This function is called to acquire the transmit 
        data of an I-PDU segment (N-PDU). Each call to this function provides the next part of the I-
        PDU data unless retry-&gt;TpDataState is TP_DATARETRY. In this case the function restarts to copy 
        the data beginning at the offset from the current position indicated by retry-&gt;TxTpDataCnt. The 
        size of the remaining data is written to the position indicated by availableDataPtr.
        PduR_SomeIpTpRxIndication | PduR_SomeIpTp.h | Called after an I-PDU has been received via the 
        TP API, the result indicates whether the transmission was successful or not.
        PduR_SomeIpTpStartOfReception | PduR_SomeIpTp.h | This function is called at the start of 
        receiving an N-SDU. The N-SDU might be fragmented into multiple N-PDUs (FF with one or more 
        following CFs) or might consist of a single N-PDU (SF). The service shall provide the currently 
        available maximum buffer size when invoked with TpSduLength equal to 0.
        PduR_SomeIpTpTransmit | PduR_SomeIpTp.h | Requests transmission of a PDU.
        PduR_SomeIpTpTxConfirmation | PduR_SomeIpTp.h | This function is called after the I-PDU has 
        been transmitted on its network, the result indicates whether the transmission was successful 
        or not.
      </description>
      <comment>
        This requirement is informational only.
        Rationale: This requirement only informs about the external APIs used for other modules.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>80</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00061</id>
      <status>rejected</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        API Function | Header File | Description 
        Det_ReportError | Det.h | Service to report development errors.
      </description>
      <comment>
        This requirement is informational only.
        Rationale: This requirement only informs about optional Det_ReportError API.
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>81</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00062</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>2</version>
      <description>
        If the SOME/IP TP module detects an inconsistency of the received SOME/IP TP headers (i.e.: 
        Request ID, Protocol Version, Interface Version, Message Type or Return Code are not equal for 
        all received segments)
        The current assembly process shall be interrupted as defined by SWS_SomeIpTp_00054.
        The API Det_ReportRuntimeError() shall be called with the runtime error code 
        SOMEIPTP_E_INCONSISTENT_HEADER.
      </description>
      <comment>
        SWS_SomeIpTp_00083 is missing and equals to SWS_SomeIpTp_00054 - Bugzilla Rfc(78080)
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00062.ReportError</srcid><srcstatus/><internalId>126</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>82</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00063</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>2</version>
      <description>
        If the API SomeIpTp_RxIndication() is called, the SOME/IP TP module shall check whether the 
        received payload bytes are dividable by16 in case the More Segment Flag is set to '1'. If the 
        received payload bytes are not dividable by 16 in this case,
        The current assembly process shall be interrupted as defined by SWS_SomeIpTp_00054.
        The API Det_ReportRuntimeError() shall be called with the runtime error code 
        SOMEIPTP_E_ASSEMBLY_INTERRUPT.
      </description>
      <comment>
        SWS_SomeIpTp_00083 is missing and equals to SWS_SomeIpTp_00054 - Bugzilla Rfc(78080)
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00063.ReportError</srcid><srcstatus/><internalId>127</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>83</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00064</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>2</version>
      <description>
        If the API SomeIpTp_RxIndication() is called, the SOME/IP TP module shall check the value of 
        the Offset Field. If the Offset Value in units of 16 bytes does not match to the sum of the 
        received Payload bytes of the previous SOME/IP segments,
        The current assembly process shall be interrupted as defined by SWS_SomeIpTp_00054.
        The API Det_ReportRuntimeError() shall be called with the runtime error code 
        SOMEIPTP_E_INCONSISTENT_SEQUENCE.
      </description>
      <comment>
        SWS_SomeIpTp_00083 is missing and equals to SWS_SomeIpTp_00054 - Bugzilla Rfc(78080)
      AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00064.ReportError</srcid><srcstatus/><internalId>128</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>84</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00065</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        Type of error | Related error code | Error value 
        The TP-Flag (of Message Type) was set to ‚0' | SOMEIPTP_E_MESSAGE_TYPESomeIpTp.
        SOMEIPTP_E_MESSAGE_TYPE | 0x04 
        Inconsistent subsequent segment received | SOMEIPTP_E_INCONSISTENT_SEQUENCESomeIpTp.
        SOMEIPTP_E_INCONSISTENT_SEQUENCE | 0x05 
        Inconsistent header received | SOMEIPTP_E_INCONSISTENT_HEADERSomeIpTp.
        SOMEIPTP_E_INCONSISTENT_HEADER | 0x06 
        Disassembly Interrupt due to the upper layer | SOMEIPTP_E_DISASSEMBLY_INTERRUPTSomeIpTp.
        SOMEIPTP_E_DISASSEMBLY_INTERRUPT | 0x07 
        Assembly Interrupt due to the upper layer | SOMEIPTP_E_ASSEMBLY_INTERRUPTSomeIpTp.
        SOMEIPTP_E_ASSEMBLY_INTERRUPT | 0x08 
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/SomeIpTp.h_107</srcid><srcstatus/><internalId>256</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/SomeIpTp.h_114</srcid><srcstatus/><internalId>257</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/SomeIpTp.h_121</srcid><srcstatus/><internalId>258</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/SomeIpTp.h_128</srcid><srcstatus/><internalId>259</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/include/SomeIpTp.h_135</srcid><srcstatus/><internalId>260</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>85</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00066</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the parameter SomeIpTp_VersionInfoPtr of the API SomeIpTp_GetVersionInfo() equals NULL_PTR 
        and if development error detection is enabled (i.e. SomeIpTpDevErrorDetect is set to TRUE), the 
        function SomeIpTp_GetVersionInfo, the API Det_ReportError()shall be called with the development 
        error code SOMEIPTP_E_PARAM_POINTER.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_452</srcid><srcstatus/><internalId>264</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest01_CheckDetReportErrorCall_00066</srcid><srcstatus/><internalId>490</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ComTest_APISyntax</srcid><srcstatus/><internalId>586</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>86</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00067</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SomeIpTp_TxConfirmation() shall check that the 
        service SomeIpTp_Init() was previously called. If the check fails, SomeIpTp_TxConfirmation()
        shall raise the development error SOMEIPTP_E_UNINIT.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_768</srcid><srcstatus/><internalId>297</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest01_CheckDetReportErrorCall_00067</srcid><srcstatus/><internalId>491</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SomeIpTp.NotInit</srcid><srcstatus/><internalId>249</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>87</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00069</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SomeIpTp_MainFunctionRx 
        Syntax 
        void SomeIpTp_MainFunctionRx (void)
        Service ID [hex] | 0x04 
        Description | This function performs the processing of the AUTOSAR SOME/IP TP module's 
        reception activities.
        Available via | SchM_SomeIpTp.h 
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_699</srcid><srcstatus/><internalId>292</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest01_MainFunctionRxReturnIfNotInitialized</srcid><srcstatus/><internalId>496</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest03_MainFunction_JustReturnIfNoOngoingSession</srcid><srcstatus/><internalId>510</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ComTest_APISyntax</srcid><srcstatus/><internalId>586</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>88</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00070</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        A call to SomeIpTp_MainFunctionRx() shall simply return if the AUTOSAR SOME/IP TP module was 
        not previously initialized with a call to SomeIpTp_Init(
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_745</srcid><srcstatus/><internalId>295</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest01_MainFunctionRxReturnIfNotInitialized</srcid><srcstatus/><internalId>496</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>89</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_91001</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        Service Name | SomeIpTp_TxConfirmation 
        Syntax 
        void SomeIpTp_TxConfirmation (PduIdType TxPduId, Std_ReturnType result)
        Service ID [hex] | 0x40 
        Sync/Async | Synchronous 
        Reentrancy | Reentrant for different PduIds. Non reentrant for the same PduId.
        Parameters (in) | TxPduId | ID of the PDU that has been transmitted.
        result | E_OK: The PDU was transmitted. E_NOT_OK: Transmission of the PDU failed.
        Parameters (inout) | None 
        Parameters (out) | None 
        Return value | None 
        Description | The lower layer communication interface module confirms the transmission of a PDU,
        or the failure to transmit a PDU.
        Available via | SomeIpTp.h 
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_91001.Result_RDUR430</srcid><srcstatus/><internalId>115</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_91001.NoResult_RDUR403</srcid><srcstatus/><internalId>116</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>90</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_91002</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        Name | SomeIpTp_ConfigType 
        Kind | Structure 
        Elements | implementation specific 
        Type 
        Comment 
        Description | This type shall contain at least all parameters that are post-build able 
        according to chapter 10.
        Available via | SomeIpTp.h 
      </description>
      <comment>AUTOSAR R20-11 comment: Requirement was changed without functional impact.
      </comment>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/SomeIpTp_Types.h_184</srcid><srcstatus/><internalId>262</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>91</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00055</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>2</version>
      <description>
        In case the given PduInfoPtr-&gt;SduLength is smaller than the computed size of the SOME/IP-TP 
        segment (considering header and payload), SomeIpTp_TriggerTransmit() shall not copy any data 
        and return E_NOT_OK.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00055.All_But_Last</srcid><srcstatus/><internalId>134</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00055.Last</srcid><srcstatus/><internalId>135</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00055.SINGLE</srcid><srcstatus/><internalId>136</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SomeIpTp.SduLength</srcid><srcstatus/><internalId>245</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>92</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00071</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        If SomeIpTp_RxIndication() is called with
        TP Flag set to '1'
        Offset Field set to '0', and
        More Segment Flag set to '0'
        SOME/IP TP shall call PduR_SomeIpTpStartOfReception(), PduR_SomeIpTpCopyRxData(), and 
        SomeIpTp_RxIndication(), directly after each other providing the received indication.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1116</srcid><srcstatus/><internalId>325</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfSingleMsg_WhileOngoingProcess_TPFLAG_1</srcid><srcstatus/><internalId>527</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>93</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00072</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SomeIpTp_TriggerTransmit() shall check that the 
        service SomeIpTp_Init() was previously called. If the check fails, SomeIpTp_TriggerTransmit()
        shall raise the development error SOMEIPTP_E_UNINIT.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_856</srcid><srcstatus/><internalId>304</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest01_CheckDetReportErrorCall_EB_00054_2</srcid><srcstatus/><internalId>492</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SomeIpTp.NotInit</srcid><srcstatus/><internalId>249</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>94</internalId></specobject>
    <specobject>
      <id>SomeIpTp.ECUC_SomeIpTp_00001</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        See"SomeIpTp_x_Module"
        Module Name | SomeIpTpSomeIpTp 
        Module Description | Configuration of the SomeIpTp module.
        Post-Build Variant Support | true 
        Supported Config Variants | VARIANT-LINK-TIME, VARIANT-POST-BUILD, VARIANT-PRE-COMPILE 
        Included containers: "SomeIpTp_x_Included_Containers"
        Included Containers 
        Container Name | Multiplicity | Scope / Dependency 
        SomeIpTpChannel | 1..* | This container contains the configuration parameters of the SomeIpTp 
        channel.
        SomeIpTpGeneral | 1 | This container contains the general configuration parameters of the 
        SomeIpTp module.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp.ECUC_SomeIpTp_00001.PC_CONFIG_VARIANT</srcid><srcstatus/><internalId>101</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp.ECUC_SomeIpTp_00001.LINK_CONFIG_VARIANT</srcid><srcstatus/><internalId>102</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp.ECUC_SomeIpTp_00001.PB_CONFIG_VARIANT</srcid><srcstatus/><internalId>103</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>95</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00073</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        If development error detection is enabled: SomeIpTp_Transmit() shall check that the service 
        SomeIpTp_Init() was previously called. If the check fails, SomeIpTp_Transmit()shall raise the 
        development error SOMEIPTP_E_UNINIT.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1217</srcid><srcstatus/><internalId>334</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest01_CheckDetReportErrorCall_EB_00048_2</srcid><srcstatus/><internalId>494</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>96</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00074</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        If parameter TxPduId of SomeIpTp_Transmit() has an invalid value and if development error 
        detection is enabled (i.e. SomeIpTpDevErrorDetect is set to TRUE), the API Det_ReportError() 
        shall be called with the development error code SOMEIPTP_E_PARAM.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1222</srcid><srcstatus/><internalId>335</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest01_CheckDetReportErrorCall_EB_00049_2</srcid><srcstatus/><internalId>497</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>97</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00075</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        If parameter PduInfoPtr of SomeIpTp_Transmit() equals NULL_PTR and if development error 
        detection is enabled (i.e. SomeIpTpDevErrorDetect is set to TRUE), the API Det_ReportError() 
        shall be called with the development error code SOMEIPTP_E_PARAM_POINTER.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1228</srcid><srcstatus/><internalId>336</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest01_CheckDetReportErrorCall_EB_00050_2</srcid><srcstatus/><internalId>498</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>98</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00076</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        If SomeIpTp_Transmit()is called before the SOME/IP TP module has been initialized with a call 
        of SomeIpTp_Init(), the AP shall return with E_NOT_OK and stop the new session.
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1214</srcid><srcstatus/><internalId>333</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest01_CheckDetReportErrorCall_EB_00048_2</srcid><srcstatus/><internalId>494</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>99</internalId></specobject>
    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00077</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SomeIpTp_R20-11.arxml</source>
      <version>1</version>
      <description>
        If the TP flag is not set and no assembly session is active, only the following parameters 
        shall be extracted : · Request ID [32 bit] · Protocol Version [8 bit] · Interface Version [8 
        bit] · Message Type [8 bit] · Return Code [8 bit]
      </description>
      <releases>
        <release>AUTOSAR R20-11</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SomeIpTp.newReqm</srcid><srcstatus/><internalId>250</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>100</internalId></specobject>
  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>SomeIpTp.ECUC_SomeIpTp_00001.PC_CONFIG_VARIANT</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SOMEIPTransportProtocol.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        The SOME/IP Transport shall support the configuration variant
        VARIANT-PRE-COMPILE.
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ComTest_APISyntax</srcid><srcstatus/><internalId>586</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.ECUC_SomeIpTp_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>101</internalId></specobject>

    <specobject>
      <id>SomeIpTp.ECUC_SomeIpTp_00001.LINK_CONFIG_VARIANT</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SOMEIPTransportProtocol.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        The SOME/IP Transport shall support the configuration variant
        VARIANT-LINK-TIME.
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_23</srcid><srcstatus/><internalId>224</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.ECUC_SomeIpTp_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>102</internalId></specobject>

    <specobject>
      <id>SomeIpTp.ECUC_SomeIpTp_00001.PB_CONFIG_VARIANT</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SOMEIPTransportProtocol.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        The SOME/IP Transport shall support the configuration variant
        VARIANT-POST-BUILD.
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>doc/public/changelog/Deviations.xml_23</srcid><srcstatus/><internalId>224</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.ECUC_SomeIpTp_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>95</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>103</internalId></specobject>

    <specobject>
      <id>SomeIpTp.ECUC_SomeIpTp_00020.CONFIG</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SOMEIPTransportProtocol.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        Name                      SomeIpTpTxNSduHandleId
        Description               This parameter defines the handle ID of the NSdu that represents the
                                  original TxSdu which is segmented and passed via the PduR to the lower
                                  layer. This handle ID is used by PduR when calling SomeIpTp_Transmit.
        Type                      EcucIntegerParamDef (Symbolic Name generated for this parameter)
        Range                     0 .. 65535
        Default value             --
        Post-Build Variant Value  false
        Configuration Class       Pre-compile time               X All Variants
                                  Link time                      --
                                  Post-build time                --
        Scope / Dependency        scope: local
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
        Covered by development toolchain: VSMD check.
      </comment>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.ECUC_SomeIpTp_00020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>19</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>104</internalId></specobject>

    <specobject>
      <id>SomeIpTp.ECUC_SomeIpTp_00017.CONFIG</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SOMEIPTransportProtocol.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        Name                        SomeIpTpTxNPduHandleId
        Description                 This parameter defines the handle ID that is used by PduR when calling
                                    SomeIpTp_TriggerTransmit.
        Type                        EcucIntegerParamDef (Symbolic Name generated for this parameter)
        Range                       0 .. 65535
        Default value               --
        Post-Build Variant Value    false
        Configuration Class         Pre-compile time               X  All Variants
                                    Link time                      --
                                    Post-build time                --
      </description>
      <comment>
        This is a configuration parameter requirement without functional specification.
        Covered by development toolchain: VSMD check.
      </comment>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.ECUC_SomeIpTp_00017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>16</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>105</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00045.AllButFirst_ReportError</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SOMEIPTransportProtocol.pdf, V4.3.0</source>
      <version>2</version>
      <description>
        If the API SomeIpTp_RxIndication() is called, the SOME/IP TP module shall
        check if the TP-Flag of the Message Type is set to '1'. If the TP-Flag is not set to '1'
        for all but first,
              The current assembly process shall be interrupted as defined by
                SWS_SomeIpTp_00083.
              The API Det_ReportRuntimeError() shall be called with the runtime error
                code SOMEIPTP_E_MESSAGE_TYPE..
        (RS_SOMEIP_00010)
      </description>
      <comment>
        - SWS_SomeIpTp_00083 is missing and equals to SWS_SomeIpTp_00054 - Bugzilla Rfc(78080)
        - This requirement shall be extended to allow the handling according to SWS_SomeIpTp_00009 - Bugzilla Rfc(78084)
        - The approach in this case is to consider this received segment with TP-Flag set to '0' while an assembly
          process is already ongoing as a faulty segment with message type error, and will not be received as a new single
          segment message.
      </comment>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1039</srcid><srcstatus/><internalId>316</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfSingleMsg_WhileOngoingProcess_TPFLAG_0</srcid><srcstatus/><internalId>528</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00045</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>106</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00024.ExpectedForAllButLast_Result_RDUR403_CancelDisassembly</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SOMEIPTransportProtocol.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        If the availableDataPtr, provided by the API PduR_SomeIpTpCopyTxData() is smaller than
        expected calculated Maximum payload bytes, or smaller than required for the last
        SOME/IP TP segment then the disassembly process for this PDU ID shall be canceled.
        (RS_SOMEIP_00010, RS_SOMEIP_00738)
      </description>
      <comment>This and SWS_SomeIpTp_00019 Contradicts with PRS_SOMEIP_00734 -Bugzilla Rfc(78197)</comment>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_654</srcid><srcstatus/><internalId>281</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ImplTest02_CheckInterruptDisAssembly_Small_BufferSize_Header</srcid><srcstatus/><internalId>580</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00024</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>107</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00024.ExpectedForAllButLast_Result_RDUR403_CallTxConfirmation</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SOMEIPTransportProtocol.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        If the availableDataPtr, provided by the API PduR_SomeIpTpCopyTxData() is smaller than
        expected calculated Maximum payload bytes, or smaller than required for the last
        SOME/IP TP segment the API PduR_SomeIpTpTxConfirmation() with result set to
        E_NOT_OK shall be called.
        (RS_SOMEIP_00010, RS_SOMEIP_00738)
      </description>
      <comment>This and SWS_SomeIpTp_00019 Contradicts with PRS_SOMEIP_00734 -Bugzilla Rfc(78197)</comment>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_656</srcid><srcstatus/><internalId>283</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest06_CheckInvalidBufferLength</srcid><srcstatus/><internalId>557</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest02_CheckInterruptDisAssembly_Small_BufferSize_Header</srcid><srcstatus/><internalId>580</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00024</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>108</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00024.ExpectedForAllButLast_Result_RDUR403_ReportError</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SOMEIPTransportProtocol.pdf, V4.3.0</source>
      <version>2</version>
      <description>
        If the availableDataPtr, provided by the API PduR_SomeIpTpCopyTxData() is smaller than
        expected calculated Maximum payload bytes, or smaller than required for the last
        SOME/IP TP segment the API Det_ReportRuntimeError() shall be called with the runtime error
        code SOMEIPTP_E_DISASSEMBLY_INTERRUPT.
        (RS_SOMEIP_00010, RS_SOMEIP_00738)
      </description>
      <comment>This and SWS_SomeIpTp_00019 Contradicts with PRS_SOMEIP_00734 -Bugzilla Rfc(78197)</comment>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_651</srcid><srcstatus/><internalId>278</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest06_CheckInvalidBufferLength</srcid><srcstatus/><internalId>557</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_not_eq_Consecutive</srcid><srcstatus/><internalId>578</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_eq_Consecutive</srcid><srcstatus/><internalId>579</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest02_CheckInterruptDisAssembly_Small_BufferSize_Header</srcid><srcstatus/><internalId>580</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest02_CheckInterruptDisAssembly_Small_BufferSize_Payload</srcid><srcstatus/><internalId>581</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00024</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>109</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00025.Result_RDUR403_CancelDisassembly</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SOMEIPTransportProtocol.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        If an API PduR_SomeIpTpCopyTxData() returns something else than BUFREQ_OK
        then the disassembly process for this PDU ID shall be canceled.
        (RS_SOMEIP_00010, RS_SOMEIP_00738)
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_655</srcid><srcstatus/><internalId>282</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ImplTest02_CheckInterruptDisAssembly_Small_BufferSize_Consecutive</srcid><srcstatus/><internalId>582</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest02_CheckInterruptDisAssembly_Small_BufferSize_Last</srcid><srcstatus/><internalId>583</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest02_CheckInterruptDisAssembly_CopyTxData_BUFREQ_E_BUSY</srcid><srcstatus/><internalId>585</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00025</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>110</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00025.Result_RDUR403_CallTxConfirmation</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SOMEIPTransportProtocol.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        If an API PduR_SomeIpTpCopyTxData() returns something else than BUFREQ_OK
        then the API PduR_SomeIpTpTxConfirmation() with result set to E_NOT_OK
        shall be called.
        (RS_SOMEIP_00010, RS_SOMEIP_00738)
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_657</srcid><srcstatus/><internalId>284</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ImplTest02_CheckInterruptDisAssembly_Small_BufferSize_Consecutive</srcid><srcstatus/><internalId>582</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest02_CheckInterruptDisAssembly_Small_BufferSize_Last</srcid><srcstatus/><internalId>583</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest02_CheckInterruptDisAssembly_CopyTxData_BUFREQ_E_BUSY</srcid><srcstatus/><internalId>585</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00025</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>111</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00025.Result_RDUR403_ReportError</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SOMEIPTransportProtocol.pdf, V4.3.0</source>
      <version>2</version>
      <description>
        If PduR_SomeIpTpCopyTxData() returns something else than BUFREQ_OK then the API
        Det_ReportRuntimeError() shall be called with the runtime error code
        SOMEIPTP_E_DISASSEMBLY_INTERRUPT.
        (RS_SOMEIP_00010, RS_SOMEIP_00738)
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_652</srcid><srcstatus/><internalId>279</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_not_eq_Consecutive</srcid><srcstatus/><internalId>578</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_eq_Consecutive</srcid><srcstatus/><internalId>579</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest02_CheckInterruptDisAssembly_Small_BufferSize_Consecutive</srcid><srcstatus/><internalId>582</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest02_CheckInterruptDisAssembly_Small_BufferSize_Last</srcid><srcstatus/><internalId>583</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest02_CheckInterruptDisAssembly_CopyTxData_BUFREQ_E_BUSY</srcid><srcstatus/><internalId>585</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00025</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>112</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00054.Result_RDUR430</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SOMEIPTransportProtocol.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        If the SOME/IP TP module interrupts the assembly process because of a detected
        error, the SOME/IP TP module shall
              Call the API PduR_SomeIpTpRxIndication() for this PDU ID with
                E_NOT_OK.
              The Rx timeout time defined by SomeIpTpRxTimeoutTime shall be canceled
                (if still running) for this PDU ID.
        (RS_SOMEIP_00010)
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SomeIpTp.ResultNotifResultType</srcid><srcstatus/><internalId>240</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00054</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>113</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00054.Result_RDUR403</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SOMEIPTransportProtocol.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        If the SOME/IP TP module interrupts the assembly process because of a detected
        error, the SOME/IP TP module shall
              Call the API PduR_SomeIpTpRxIndication() for this PDU ID with
                E_NOT_OK.
              The Rx timeout time defined by SomeIpTpRxTimeoutTime shall be canceled
                (if still running) for this PDU ID.
        (RS_SOMEIP_00010)
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_726</srcid><srcstatus/><internalId>294</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1026</srcid><srcstatus/><internalId>315</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1150</srcid><srcstatus/><internalId>326</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1178</srcid><srcstatus/><internalId>331</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1881</srcid><srcstatus/><internalId>408</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfSingleMsg_WhileOngoingProcess_TPFLAG_1</srcid><srcstatus/><internalId>527</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfSingleMsg_WhileOngoingProcess_TPFLAG_0</srcid><srcstatus/><internalId>528</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfFirstSegment_WhileOngoingProcess</srcid><srcstatus/><internalId>534</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfFirstSegment_WhileOngoingProcess_PayloadNotDivBy16</srcid><srcstatus/><internalId>540</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00054</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>75</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>114</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_91001.Result_RDUR430</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SOMEIPTransportProtocol.pdf, V4.3.0</source>
      <version>1</version>
      <description>
        Service name:       SomeIpTp_TxConfirmation
        Syntax:             void SomeIpTp_TxConfirmation(
                                  PduIdType TxPduId,
                                  Std_ReturnType result
                            )
        Service ID[hex]:    0x40
        Sync/Async:         Synchronous
        Reentrancy:         Reentrant for different PduIds. Non reentrant for the same PduId.

        Parameters (in):    TxPduId        ID of the PDU that has been transmitted.
                            result         E_OK: The PDU was transmitted.
                                           E_NOT_OK: Transmission of the PDU failed.
        Parameters (inout): None

        Parameters (out):   None
        Return value:       None
        Description:        The lower layer communication interface module confirms the transmission of a
                            PDU, or the failure to transmit a PDU.
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>dev</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>dev.SomeIpTp.TpAPIs</srcid><srcstatus/><internalId>244</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_91001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>90</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>115</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_91001.NoResult_RDUR403</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SOMEIPTransportProtocol.pdf, V4.3.0</source>
      <version>2</version>
      <description>
        Service name:       SomeIpTp_TxConfirmation
        Syntax:             void SomeIpTp_TxConfirmation(
                                  PduIdType TxPduId
                            )
        Service ID[hex]:    0x40
        Sync/Async:         Synchronous
        Reentrancy:         Reentrant for different PduIds. Non reentrant for the same PduId.

        Parameters (in):    TxPduId        ID of the PDU that has been transmitted.
        Parameters (inout): None

        Parameters (out):   None
        Return value:       None
        Description:        The lower layer communication interface module confirms the transmission of a
                            PDU, or the failure to transmit a PDU.
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_752</srcid><srcstatus/><internalId>296</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTxConfirmationCallAtUnexpectedState</srcid><srcstatus/><internalId>577</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ComTest_APISyntax</srcid><srcstatus/><internalId>586</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_91001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>90</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>116</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00022.ReportError</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If the API SomeIpTp_Transmit() is called with a PDU ID which is currently used
        for an ongoing segmentation,
                   E_NOT_OK shall be returned.
                   The ongoing disassembly process for this PDU ID shall be canceled.
                   The API Det_ReportRuntimeError() shall be called with the runtime error
                   code SOMEIPTP_E_DISASSEMBLY_INTERRUPT.
        (RS_SOMEIP_00010)
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1234</srcid><srcstatus/><internalId>338</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ImplTest02_CheckInterruptDisAssembly_by_SomeIpTp_Transmit_Call</srcid><srcstatus/><internalId>584</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>117</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00022.Confirmation</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the API SomeIpTp_Transmit() is called with a PDU ID which is currently used
        for an ongoing segmentation,
        - PduR_SomeIpTpTxConfirmation() shall be called with E_NOT_OK.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_669</srcid><srcstatus/><internalId>285</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ImplTest02_CheckInterruptDisAssembly_by_SomeIpTp_Transmit_Call</srcid><srcstatus/><internalId>584</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00022</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>43</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>118</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00041.ReportError</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SOMEIPTransportProtocol.pdf, V4.3.0</source>
      <version>2</version>
      <description>
        If the Rx timeout time defined by SomeIpTpRxTimeoutTime expires,
              The current assembly process shall be stopped.
              The API Det_ReportRuntimeError() shall be called with the runtime error
               code SOMEIPTP_E_ASSEMBLY_INTERRUPT.
        (RS_SOMEIP_00010, RS_SOMEIP_00738)
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_725</srcid><srcstatus/><internalId>293</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest05_Fired_RxTimeout</srcid><srcstatus/><internalId>552</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00041</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>62</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>119</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00042.ReportError</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SOMEIPTransportProtocol.pdf, V4.3.0</source>
      <version>2</version>
      <description>
        If the API SomeIpTp_RxIndication() is called with the Offset Value is &gt; 0 but no
        session is currently running,
              The received PDU shall be ignored
              The API Det_ReportRuntimeError() shall be called with the runtime error
                code SOMEIPTP_E_INCONSISTENT_SEQUENCE.
        (RS_SOMEIP_00010, PRS_SOMEIP_00749)
      </description>
      <comment>
        This check identifies that at least the first segment has not been received.
      </comment>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_2025</srcid><srcstatus/><internalId>430</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfConsecutiveSegment_NoOngoingSession</srcid><srcstatus/><internalId>542</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfLastSegment_NoOngoingSession</srcid><srcstatus/><internalId>543</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00042</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>63</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>120</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00048.ReportError</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SOMEIPTransportProtocol.pdf, V4.3.0</source>
      <version>2</version>
      <description>
        If the API SomeIpTp_RxIndication() is called, the SOME/IP TP module shall
        check the value of the Offset Field. If the received Offset Value equals '0' while the
        received Payload bytes of the previous SOME/IP segments is greater than '0', the
        SOME/IP TP module shall perform the following steps in the following order:
              The current assembly process shall be interrupted as defined by
                SWS_SomeIpTp_00083.
              The API Det_ReportRuntimeError() shall be called with the runtime error
                code SOMEIPTP_E_INCONSISTENT_SEQUENCE.
              Start the assembly process according to chapter 7.3.1 SOME/IP segment
                received with Offset 0
        (RS_SOMEIP_00010, PRS_SOMEIP_00749)
      </description>
      <comment>SWS_SomeIpTp_00083 is missing and equals to SWS_SomeIpTp_00054 - Bugzilla Rfc(78080)</comment>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1880</srcid><srcstatus/><internalId>407</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfFirstSegment_WhileOngoingProcess</srcid><srcstatus/><internalId>534</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfFirstSegment_WhileOngoingProcess_PayloadNotDivBy16</srcid><srcstatus/><internalId>540</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00048</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>69</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>121</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00049.bufferSizePtr_StartOfReception</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SOMEIPTransportProtocol.pdf, V4.3.0</source>
      <version>2</version>
      <description>
        If the bufferSizePtr provided by the previous call of API PduR_SomeIpTpStartOfReception()
        for first segment or single segment with Tp-Flag set to '1'(while offset='0' and More='1') is smaller
        than SOME/IP header,
            The current assembly process shall be interrupted as defined by
              SWS_SomeIpTp_00083.
            The API Det_ReportRuntimeError() shall be called with the runtime error
              code SOMEIPTP_E_ASSEMBLY_INTERRUPT.
        (RS_SOMEIP_00010)
      </description>
      <comment>SWS_SomeIpTp_00083 is missing and equals to SWS_SomeIpTp_00054 - Bugzilla Rfc(78080)</comment>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1853</srcid><srcstatus/><internalId>405</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1962</srcid><srcstatus/><internalId>424</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfSingleMsg_StartOfReception_AvailBuff_NOK</srcid><srcstatus/><internalId>530</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfFirstSegment_StartOfReception_AvailBuff_NOK</srcid><srcstatus/><internalId>536</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00049</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>70</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>122</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00049.bufferSizePtr_CopyRxData</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SOMEIPTransportProtocol.pdf, V4.3.0</source>
      <version>2</version>
      <description>
        If the bufferSizePtr provided by the previous call of API PduR_SomeIpTpCopyRxData() is smaller
        than the received payload for all segments except with Tp-Flag set to '1',
            The current assembly process shall be interrupted as defined by
              SWS_SomeIpTp_00083.
            The API Det_ReportRuntimeError() shall be called with the runtime error
              code SOMEIPTP_E_ASSEMBLY_INTERRUPT.
        (RS_SOMEIP_00010)
      </description>
      <comment>SWS_SomeIpTp_00083 is missing and equals to SWS_SomeIpTp_00054 - Bugzilla Rfc(78080)</comment>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1824</srcid><srcstatus/><internalId>402</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1952</srcid><srcstatus/><internalId>423</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_2051</srcid><srcstatus/><internalId>436</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfConsecutiveSegment_AvailBuffLength_Insufficient</srcid><srcstatus/><internalId>548</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfLastSegment_AvailBuffLength_Insufficient</srcid><srcstatus/><internalId>549</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00049</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>70</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>123</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00050.ReportError</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SOMEIPTransportProtocol.pdf, V4.3.0</source>
      <version>2</version>
      <description>
        If the API PduR_SomeIpTpCopyRxData()returns something else than
        BUFREQ_OK,
             The assembly process for this PDU ID shall be interrupted as defined by
               SWS_SomeIpTp_00083.
             The API Det_ReportRuntimeError() shall be called with the runtime error
                code SOMEIPTP_E_ASSEMBLY_INTERRUPT.
        (RS_SOMEIP_00010, RS_SOMEIP_00738)
      </description>
      <comment>SWS_SomeIpTp_00083 is missing and equals to SWS_SomeIpTp_00054 - Bugzilla Rfc(78080)</comment>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1823</srcid><srcstatus/><internalId>401</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1842</srcid><srcstatus/><internalId>404</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1944</srcid><srcstatus/><internalId>421</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1951</srcid><srcstatus/><internalId>422</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_2082</srcid><srcstatus/><internalId>443</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfSingleMsg_Tp_0_CopyRxData_NOK</srcid><srcstatus/><internalId>531</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfSingleMsg_Tp_1_CopyRxData_Header_NOK</srcid><srcstatus/><internalId>532</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfSingleMsg_Tp_1_CopyRxData_Payload_NOK</srcid><srcstatus/><internalId>533</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfFirstSegment_CopyRxData_Header_NOK</srcid><srcstatus/><internalId>537</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfFirstSegment_CopyRxData_Payload_NOK</srcid><srcstatus/><internalId>538</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfConsecutiveSegment_CopyRxData_NOK</srcid><srcstatus/><internalId>550</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfLastSegment_CopyRxData_NOK</srcid><srcstatus/><internalId>551</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00050</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>71</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>124</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00051.ReportError</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SOMEIPTransportProtocol.pdf, V4.3.0</source>
      <version>2</version>
      <description>
        If the API PduR_SomeIpTpStartOfReception() returns something else than
        BUFREQ_OK,
              The assembly process for this PDU ID shall be stopped.
              The API Det_ReportRuntimeError() shall be called with the runtime error
                code SOMEIPTP_E_ASSEMBLY_INTERRUPT.
        (RS_SOMEIP_00010, RS_SOMEIP_00738)
      </description>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1859</srcid><srcstatus/><internalId>406</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1968</srcid><srcstatus/><internalId>425</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfSingleMsg_StartOfReception_NOK</srcid><srcstatus/><internalId>529</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfFirstSegment_StartOfReception_NOK</srcid><srcstatus/><internalId>535</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00051</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>72</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>125</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00062.ReportError</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SOMEIPTransportProtocol.pdf, V4.3.0</source>
      <version>2</version>
      <description>
        If the SOME/IP TP module detects an inconsistency of the received SOME/IP TP
        headers (i.e.: Request ID, Protocol Version, Interface Version, Message Type or
        Return Code are not equal for all received segments),
              The current assembly process shall be interrupted as defined by
                SWS_SomeIpTp_00083.
                The API Det_ReportRuntimeError() shall be called with the runtime error
                code SOMEIPTP_E_INCONSISTENT_HEADER.
        (RS_SOMEIP_00010)
      </description>
      <comment>SWS_SomeIpTp_00083 is missing and equals to SWS_SomeIpTp_00054 - Bugzilla Rfc(78080)</comment>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_2003</srcid><srcstatus/><internalId>428</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfConsecutiveSegment_InconsistentHeader</srcid><srcstatus/><internalId>544</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfLastSegment_InconsistentHeader</srcid><srcstatus/><internalId>545</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00062</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>82</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>126</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00063.ReportError</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SOMEIPTransportProtocol.pdf, V4.3.0</source>
      <version>2</version>
      <description>
        If the API SomeIpTp_RxIndication() is called, the SOME/IP TP module shall
        check whether the received payload bytes are dividable by 16 in case the More
        Segment Flag is set to '1'.
        If the received payload bytes are not dividable by 16 in this case,
                The current assembly process shall be interrupted as defined by
                SWS_SomeIpTp_00083.
                The API Det_ReportRuntimeError() shall be called with the runtime error
                code SOMEIPTP_E_ASSEMBLY_INTERRUPT.
        (RS_SOMEIP_00010, PRS_SOMEIP_00749)
      </description>
      <comment>SWS_SomeIpTp_00083 is missing and equals to SWS_SomeIpTp_00054 - Bugzilla Rfc(78080)</comment>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1975</srcid><srcstatus/><internalId>426</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_2033</srcid><srcstatus/><internalId>431</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_2041</srcid><srcstatus/><internalId>433</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfFirstSegment_PayloadNotDivisableBy16</srcid><srcstatus/><internalId>539</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfFirstSegment_WhileOngoingProcess_PayloadNotDivBy16</srcid><srcstatus/><internalId>540</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfConsecutiveSegment_PayloadNotDivisableBy16</srcid><srcstatus/><internalId>541</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00063</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>83</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>127</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00064.ReportError</id>
      <status>approved</status>
      <source>AUTOSAR_SWS_SOMEIPTransportProtocol.pdf, V4.3.0</source>
      <version>2</version>
      <description>
        If the API SomeIpTp_RxIndication() is called, the SOME/IP TP module shall
        check the value of the Offset Field. If the Offset Value in units of 16 bytes does not
        match to the sum of the received Payload bytes of the previous SOME/IP segments,
              The current assembly process shall be interrupted as defined by
                SWS_SomeIpTp_00083.
              The API Det_ReportRuntimeError() shall be called with the runtime error
                code SOMEIPTP_E_INCONSISTENT_SEQUENCE.
        (RS_SOMEIP_00010, PRS_SOMEIP_00749)
      </description>
      <comment>SWS_SomeIpTp_00083 is missing and equals to SWS_SomeIpTp_00054 - Bugzilla Rfc(78080)</comment>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_2044</srcid><srcstatus/><internalId>434</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfConsecutiveSegment_UnexpectedOffset</srcid><srcstatus/><internalId>546</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfLastSegment_UnexpectedOffset</srcid><srcstatus/><internalId>547</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00064</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>84</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>128</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00056.ASR403</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <description>
        Service name:         SomeIpTp_RxIndication
        Syntax:               void SomeIpTp_RxIndication(
                                PduIdType RxPduId,
                                PduInfoType* PduInfoPtr
                              )
        Service ID[hex]:      0x42
        Sync/Async:           Synchronous
        Reentrancy:           Reentrant for different PduIds. Non reentrant for the same PduId.
        Parameters (in):      RxPduId        ID of the received PDU.
                              PduInfoPtr     Contains the length (SduLength) of the received PDU, a pointer
                                             to a buffer (SduDataPtr) containing the PDU, and the MetaData
                                             related to this PDU.
        Parameters            None
        (inout):
        Parameters (out):     None
        Return value:         None
        Description:          Indication of a received PDU from a lower layer communication interface
                              module.
      </description>
      <comment>EB ComStack is using TP APIs according to ASR 4.0.3</comment>
      <releases>
        <release>AUTOSAR 4.3.0</release>
      </releases>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_947</srcid><srcstatus/><internalId>310</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ComTest_APISyntax</srcid><srcstatus/><internalId>586</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00056</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>129</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00021.PDUR403</id>
      <status>approved</status>
      <source>EB refinement</source>
      <version>1</version>
      <description>
        If the last SOME/IP segment of the original SOME/IP PDU has been transmitted
        successfully (i.e. no Tx Confirmation timeout has occurred for the last call of
        PduR_SomeIpTpCopyTxData()), the SOME/IP TP module shall
            Call the API PduR_SomeIpTpTxConfirmation().
        (RS_SOMEIP_00010)
      </description>
      <comment>
        With the call of PduR_SomeIpTpTxConfirmation(), the segmentation process is finished.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_795</srcid><srcstatus/><internalId>299</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest04_CheckSingleSegmentTransmission</srcid><srcstatus/><internalId>513</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_not_eq_Consecutive</srcid><srcstatus/><internalId>578</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_eq_Consecutive</srcid><srcstatus/><internalId>579</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00021</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>130</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.StopAssembly</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the API SomeIpTp_TxConfirmation() is not called before the time defined by 'SomeIpTpTxConfirmationTimeout' expires,
        - The current assembly process shall be stopped.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_630</srcid><srcstatus/><internalId>276</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest06_CheckSingleSegmentTransmission_TxConfirmationTimeout</srcid><srcstatus/><internalId>558</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_CheckMultiSegmentTransmission_TxConfirmationTimeout_First</srcid><srcstatus/><internalId>559</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_CheckMultiSegmentTransmission_TxConfirmationTimeout_Consecutive</srcid><srcstatus/><internalId>560</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_CheckMultiSegmentTransmission_TxConfirmationTimeout_Last</srcid><srcstatus/><internalId>561</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_CheckSingleSegmentTransmission_TxConfirmationTimeout_InterDependency</srcid><srcstatus/><internalId>562</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_not_eq_Consecutive</srcid><srcstatus/><internalId>578</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00023</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>131</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.DET</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If the API SomeIpTp_TxConfirmation() is not called before the time defined by 'SomeIpTpTxConfirmationTimeout' expires,
        - The API Det_ReportRuntimeError() shall be called with the runtime error code SOMEIPTP_E_ASSEMBLY_INTERRUPT.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_676</srcid><srcstatus/><internalId>286</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest06_CheckSingleSegmentTransmission_TxConfirmationTimeout</srcid><srcstatus/><internalId>558</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_CheckMultiSegmentTransmission_TxConfirmationTimeout_First</srcid><srcstatus/><internalId>559</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_CheckMultiSegmentTransmission_TxConfirmationTimeout_Consecutive</srcid><srcstatus/><internalId>560</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_CheckMultiSegmentTransmission_TxConfirmationTimeout_Last</srcid><srcstatus/><internalId>561</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_CheckSingleSegmentTransmission_TxConfirmationTimeout_InterDependency</srcid><srcstatus/><internalId>562</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00023</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>132</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.Confirmation</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the API SomeIpTp_TxConfirmation() is not called before the time defined by 'SomeIpTpTxConfirmationTimeout' expires,
        - PduR_SomeIpTpTxConfirmation() shall be called with E_NOT_OK.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_683</srcid><srcstatus/><internalId>289</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest06_CheckSingleSegmentTransmission_TxConfirmationTimeout</srcid><srcstatus/><internalId>558</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_CheckMultiSegmentTransmission_TxConfirmationTimeout_First</srcid><srcstatus/><internalId>559</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_CheckMultiSegmentTransmission_TxConfirmationTimeout_Consecutive</srcid><srcstatus/><internalId>560</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_CheckMultiSegmentTransmission_TxConfirmationTimeout_Last</srcid><srcstatus/><internalId>561</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_CheckSingleSegmentTransmission_TxConfirmationTimeout_InterDependency</srcid><srcstatus/><internalId>562</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00023</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>133</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00055.All_But_Last</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In case the given PduInfoPtr-&gt;SduLength is smaller
        than the actual PDU-length for all segments but last,
        SomeIpTp_TriggerTransmit() shall not copy any data and return E_NOT_OK.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_929</srcid><srcstatus/><internalId>307</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1722</srcid><srcstatus/><internalId>394</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest04_CheckTriggerTransmitCallWithSmallerBuffer_FirstSegment</srcid><srcstatus/><internalId>515</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest04_CheckTriggerTransmitCallWithSmallerBuffer_ConsecutiveSegment</srcid><srcstatus/><internalId>516</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00055</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>134</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00055.Last</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In case the given PduInfoPtr-&gt;SduLength is smaller
        than the expected last segment length (including SomeIpTp header) to be transmitted,
        SomeIpTp_TriggerTransmit() shall not copy any data and return E_NOT_OK.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_930</srcid><srcstatus/><internalId>308</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1712</srcid><srcstatus/><internalId>393</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest04_CheckTriggerTransmitCallWithSmallerBuffer_LastSegment</srcid><srcstatus/><internalId>517</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00055</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>135</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00055.SINGLE</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        In case the given PduInfoPtr-&gt;SduLength is smaller than the single segment length to be
        transmitted, SomeIpTp_TriggerTransmit() shall not copy any data and return E_NOT_OK.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_931</srcid><srcstatus/><internalId>309</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1703</srcid><srcstatus/><internalId>392</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest04_CheckTriggerTransmitCallWithSmallerBuffer_SingleSegment</srcid><srcstatus/><internalId>514</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00055</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>136</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00034.CopyRxDataForHeader</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If a SOME/IP segment is successfully received with Offset Field set to 0 and after the
        SomeIpTp module has called the API PduR_SomeIpTpStartOfReception(),
        the SomeIpTp module shall check the returned bufferSizePtr.
        If the bufferSizePtr is greater or equal to length of SOME/IP header,
        the SomeIpTp module shall call the API PduR_SomeIpTpCopyRxData()
        to pass the SOME/IP Header after setting Tp Flag to 0.
        This PDU shall contain the following content:
          Request ID [32 bit]
          Protocol Version [8 bit]
          Interface Version [8 bit]
          Message Type [8 bit] - see SWS_SomeIpTp_00028
          Return Code [8 bit]
        (RS_SOMEIP_00010)
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1812</srcid><srcstatus/><internalId>399</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1920</srcid><srcstatus/><internalId>415</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfSingleMsg_Tp_1</srcid><srcstatus/><internalId>506</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfMsg_ThreeSegments</srcid><srcstatus/><internalId>508</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfTwoMsg_ThreeSegments</srcid><srcstatus/><internalId>509</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00034</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>137</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00034.CopyRxDataForPayload</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If a SOME/IP segment is successfully received with Offset Field set to 0 and after the
        SomeIpTp module has called the API PduR_SomeIpTpCopyRxData() for SOME/IP header,
        the SomeIpTp module shall check the returned bufferSizePtr.
        If the bufferSizePtr is greater or equal to the received payload,
        the SOME/IP TP module shall call the API PduR_SomeIpTpCopyRxData() to pass the received payload.
        (RS_SOMEIP_00010)
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1831</srcid><srcstatus/><internalId>403</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1930</srcid><srcstatus/><internalId>417</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfSingleMsg_Tp_1</srcid><srcstatus/><internalId>506</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfMsg_ThreeSegments</srcid><srcstatus/><internalId>508</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfTwoMsg_ThreeSegments</srcid><srcstatus/><internalId>509</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00034</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>138</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00018.SingleSegment</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        When the API SomeIpTp_TriggerTransmit() is called for the first time for a single segment,
        call the API PduR_SomeIpTpCopyTxData() using the the length given with SomeIpTp_Transmit call
        for this segment and set the parameter retry so that to keep that data in the upper layer's buffer locked
        to be able to retry copying data if requested from the lower layer.
        i.e. Set TpDataState to TP_CONFPENDING and TxTpDataCnt to 0.
        (RS_SOMEIP_00010)
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1357</srcid><srcstatus/><internalId>344</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1368</srcid><srcstatus/><internalId>346</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest04_CheckSingleSegmentTransmission</srcid><srcstatus/><internalId>513</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest04_SingleSegmentRetry</srcid><srcstatus/><internalId>518</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.TX_Retry</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>139</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00018.SingleSegment_Retry</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        When the API SomeIpTp_TriggerTransmit() is called again for a single segment,
        call the API PduR_SomeIpTpCopyTxData() using the length given with SomeIpTp_Transmit call
        for this segment and set the parameter retry so that to copy the previously copied data for this segment.
        i.e. Set TpDataState to TP_DATARETRY and TxTpDataCnt to the length given with SomeIpTp_Transmit call.
        (RS_SOMEIP_00010)
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1363</srcid><srcstatus/><internalId>345</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1369</srcid><srcstatus/><internalId>347</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest04_SingleSegmentRetry</srcid><srcstatus/><internalId>518</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.TX_Retry</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>140</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00018.FirstSegment_header</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        When the API SomeIpTp_TriggerTransmit() is called for the first time for a first segment,
        call the API PduR_SomeIpTpCopyTxData() using the SOME/IP header length and set the parameter retry
        to NULL_PTR.
        (RS_SOMEIP_00010)
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1418</srcid><srcstatus/><internalId>349</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest04_MultiSegmentsRetry</srcid><srcstatus/><internalId>519</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_not_eq_Consecutive</srcid><srcstatus/><internalId>578</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_eq_Consecutive</srcid><srcstatus/><internalId>579</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.TX_Retry</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>141</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00018.FirstSegment_payload</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        When the API SomeIpTp_TriggerTransmit() is called for the first time for a first segment,
        and after a successful call to the API PduR_SomeIpTpCopyTxData() for the SOME/IP header,
        (i.e. If this API PduR_SomeIpTpCopyTxData() returns BUFREQ_OK and AvailableBuffLength greater than
        or equal to the current first segments' payload length)
        Another API PduR_SomeIpTpCopyTxData() shall be called using first segment's payload length
        and retry parameter shall be set so that to keep that data in the upper layer's buffer locked
        to be able to retry copying data if requested from the lower layer..
        i.e. Set TpDataState to TP_CONFPENDING and TxTpDataCnt to 0.
        (RS_SOMEIP_00010)
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1448</srcid><srcstatus/><internalId>354</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1459</srcid><srcstatus/><internalId>356</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest04_MultiSegmentsRetry</srcid><srcstatus/><internalId>519</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_not_eq_Consecutive</srcid><srcstatus/><internalId>578</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_eq_Consecutive</srcid><srcstatus/><internalId>579</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.TX_Retry</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>142</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00018.FirstSegment_Payload_Retry</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        When the API SomeIpTp_TriggerTransmit() is called again for a first segment,
        call the API PduR_SomeIpTpCopyTxData() using the payload length for this segment and
        set the parameter retry so that to copy the previously copied payload for this segment.
        i.e. Set TpDataState to TP_DATARETRY and TxTpDataCnt to the first segment's payload length.
        (RS_SOMEIP_00010)
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_808</srcid><srcstatus/><internalId>301</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1454</srcid><srcstatus/><internalId>355</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1460</srcid><srcstatus/><internalId>357</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest04_MultiSegmentsRetry</srcid><srcstatus/><internalId>519</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.TX_Retry</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>143</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00018.Consecutive_or_last_Segment</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        When the API SomeIpTp_TriggerTransmit() is called for the first time for a consecutive or last segment,
        call the API PduR_SomeIpTpCopyTxData() using this consecutive or last segment's payload length
        and set the parameter retry so that to keep that data in the upper layer's buffer locked
        to be able to retry data if requested from the lower layer.
        i.e. Set TpDataState to TP_DATACONF and TxTpDataCnt to 0.
        (RS_SOMEIP_00010)
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1531</srcid><srcstatus/><internalId>365</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1542</srcid><srcstatus/><internalId>367</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1624</srcid><srcstatus/><internalId>378</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1635</srcid><srcstatus/><internalId>380</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest04_MultiSegmentsRetry</srcid><srcstatus/><internalId>519</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_not_eq_Consecutive</srcid><srcstatus/><internalId>578</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_eq_Consecutive</srcid><srcstatus/><internalId>579</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.TX_Retry</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>144</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00018.Consecutive_or_last_Segment_Retry</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        When the API SomeIpTp_TriggerTransmit() is called again for a consecutive or last segment,
        call the API PduR_SomeIpTpCopyTxData() using this consecutive or last segment's payload length
        and set the parameter retry so that to copy the previously copied data for this segment.
        i.e. Set TpDataState to TP_DATARETRY and TxTpDataCnt to the consecutive or last segment's payload length.
        (RS_SOMEIP_00010)
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_809</srcid><srcstatus/><internalId>302</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1537</srcid><srcstatus/><internalId>366</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1543</srcid><srcstatus/><internalId>368</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1568</srcid><srcstatus/><internalId>374</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1630</srcid><srcstatus/><internalId>379</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1636</srcid><srcstatus/><internalId>381</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1655</srcid><srcstatus/><internalId>387</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest04_MultiSegmentsRetry</srcid><srcstatus/><internalId>519</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.TX_Retry</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>175</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>145</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00009.SDU_Fitting</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the provided SDU fits into one single PDU, the provided SOME/IP header shall be
        used with no modification.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1370</srcid><srcstatus/><internalId>348</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest04_CheckSingleSegmentTransmission</srcid><srcstatus/><internalId>513</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest04_SingleSegmentRetry</srcid><srcstatus/><internalId>518</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>146</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00009.Message_Type_Set_Tp_Flag</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the provided SDU does not fit into one single SOME/IP PDU, the SOME/IP TP
        module shall set the TP-Flag of the Message Type to '1' for every SOME/IP segment
        which is going to be sent on the bus via the PduR, leaving all the other bits
        contained in the Message Type field untouched.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1475</srcid><srcstatus/><internalId>360</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1561</srcid><srcstatus/><internalId>372</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1648</srcid><srcstatus/><internalId>385</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_not_eq_Consecutive</srcid><srcstatus/><internalId>578</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_eq_Consecutive</srcid><srcstatus/><internalId>579</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>30</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>147</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00017.Pdu_Length</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the API SomeIpTp_Transmit() is called while no segmentation is ongoing for
        this PDU ID, the SOME/IP TP module shall firstly Remember the provided PDU
        length (provided PduInfoPtr).
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1249</srcid><srcstatus/><internalId>339</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1274</srcid><srcstatus/><internalId>342</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1281</srcid><srcstatus/><internalId>343</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_not_eq_Consecutive</srcid><srcstatus/><internalId>578</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_eq_Consecutive</srcid><srcstatus/><internalId>579</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>148</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00017.Pdu_ID</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the API SomeIpTp_Transmit() is called while no segmentation is ongoing for
        this PDU ID, the SOME/IP TP module shall secondly Derive the PDU ID which shall
        be used for every segmented SOME/IP PDU (see SomeIpTpTxNPduRef).
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_573</srcid><srcstatus/><internalId>268</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_584</srcid><srcstatus/><internalId>271</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_not_eq_Consecutive</srcid><srcstatus/><internalId>578</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_eq_Consecutive</srcid><srcstatus/><internalId>579</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>149</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00017.First_Segment_Size_Calc</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the API SomeIpTp_Transmit() is called while no segmentation is ongoing for
        this PDU ID, the SOME/IP TP module shall thirdly Calculate the size of the
        SOME/IP for the first segment (considering header and payload).
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_570</srcid><srcstatus/><internalId>267</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_581</srcid><srcstatus/><internalId>270</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_not_eq_Consecutive</srcid><srcstatus/><internalId>578</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_eq_Consecutive</srcid><srcstatus/><internalId>579</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>150</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00017.call_PduR_SomeIpTpTransmit</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the API SomeIpTp_Transmit() is called while no segmentation is ongoing for
        this PDU ID, the SOME/IP TP module shall fourthly Call the API PduR_SomeIpTpTransmit()
        using the derived PDU ID and the calculated PDU size and set the SduDataPtr
        to NULL_PTR.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_574</srcid><srcstatus/><internalId>269</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_585</srcid><srcstatus/><internalId>272</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest04_CheckSingleSegmentTransmission</srcid><srcstatus/><internalId>513</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_not_eq_Consecutive</srcid><srcstatus/><internalId>578</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_eq_Consecutive</srcid><srcstatus/><internalId>579</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00017</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>38</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>151</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00030.Buffer_MetaData</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The SOME/IP TP module shall buffer the pointer to the Meta-data for every PDU ID
        separately which is passed by the PduInfoPtr parameter of the API
        SomeIpTp_RxIndication().
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1901</srcid><srcstatus/><internalId>410</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfMsg_ThreeSegments</srcid><srcstatus/><internalId>508</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfTwoMsg_ThreeSegments</srcid><srcstatus/><internalId>509</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfConsecutiveSegment_InconsistentHeader</srcid><srcstatus/><internalId>544</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfLastSegment_InconsistentHeader</srcid><srcstatus/><internalId>545</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>152</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00030.Forward_MetaData</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The SOME/IP TP module shall forward the Meta-data when PduR_SomeIpTpStartOfReception
        is called.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1813</srcid><srcstatus/><internalId>400</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1921</srcid><srcstatus/><internalId>416</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfMsg_ThreeSegments</srcid><srcstatus/><internalId>508</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfTwoMsg_ThreeSegments</srcid><srcstatus/><internalId>509</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00030</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>51</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>153</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00033.RxTimeout_Start</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If a SOME/IP segment is successfully received with Offset Field set to 0, the
        SOME/IP TP module shall Start the Rx timeout time defined by SomeIpTpRxTimeoutTime.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1908</srcid><srcstatus/><internalId>413</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest05_Fired_RxTimeout</srcid><srcstatus/><internalId>552</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00033</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>154</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00033.StartOfReception_Call</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If a SOME/IP segment is successfully received with Offset Field set to 0, the
        SOME/IP TP module shall Call the API PduR_SomeIpTpStartOfReception() with the PDU ID
        derived from the parameter SomeIpTpRxSduRef and the TpSduLength set to '0'.
      </description>
      <comment>
        TpSduLength set to '0' indicates "unknown message length" to the upper layers.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1910</srcid><srcstatus/><internalId>414</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfMsg_ThreeSegments</srcid><srcstatus/><internalId>508</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfTwoMsg_ThreeSegments</srcid><srcstatus/><internalId>509</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00033</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>54</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>155</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00040.RxTimeout_Cancel</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If a SOME/IP segment is successfully received with the More Segment Flag set to '0',
        the SOME/IP TP module shall Cancel the Rx timeout time defined by SomeIpTpRxTimeoutTime.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_2076</srcid><srcstatus/><internalId>442</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfMsg_ThreeSegments</srcid><srcstatus/><internalId>508</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfTwoMsg_ThreeSegments</srcid><srcstatus/><internalId>509</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00040</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>61</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>156</internalId></specobject>

    <specobject>
      <id>SomeIpTp.SWS_SomeIpTp_00040.RxIndication_Call</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If a SOME/IP segment is successfully received with the More Segment Flag set to '0',
        the SOME/IP TP module shall Call the API PduR_SomeIpTpRxIndication() after it has
        copied the remaining received Payload bytes to the upper layer (as defined in SWS_SomeIpTp_00033).
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_2073</srcid><srcstatus/><internalId>441</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfMsg_ThreeSegments</srcid><srcstatus/><internalId>508</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfTwoMsg_ThreeSegments</srcid><srcstatus/><internalId>509</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00040</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>61</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>157</internalId></specobject>

<specobject>
  <id>SomeIpTp.ECUC_SomeIpTp_00006.Value_Range</id>
  <status>approved</status>
  <source>AUTOSAR_SWS_SOMEIPTransportProtocol.pdf, V4.3.0</source>
  <version>1</version>
  <description>
    Name                         SomeIpTpNPduSeparationTime
    Description                  Sets the duration of the minimum time in seconds the SomeIpTp module
                                 shall wait between the transmissions of N-PDUs.
    Multiplicity                 1
    Type                         EcucFloatParamDef
    Range                        [0 .. INF[
    Default value                --
    Post-Build Variant Value     true
    Value Configuration Class    Pre-compile time                  X VARIANT-PRE-COMPILE
                                 Link time                         X VARIANT-LINK-TIME
                                 Post-build time                   X VARIANT-POST-BUILD
    Scope / Dependency           scope: local
  </description>
  <comment>
    The value range can be zero, and if the value is zero this means that there is no seperation time
    between the transmissions of N-PDUs.
  </comment>
  <releases>
    <release>AUTOSAR 4.3.0</release>
  </releases>
  <needscoverage>
    <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SomeIpTp_Extension.xdm.m4_32</srcid><srcstatus/><internalId>446</internalId></linkedfrom></coveredby></needscov>
    <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest04_Transmit_MultiSegment_NoSeparationTime</srcid><srcstatus/><internalId>524</internalId></linkedfrom></coveredby></needscov>
  <containerCovstatus>covered</containerCovstatus></needscoverage>
  <providescoverage>
    <provcov>
      <linksto>SomeIpTp.ECUC_SomeIpTp_00006</linksto>
      <dstversion>1</dstversion>
    <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
  </providescoverage>
<violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>158</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

<!-- EB specific features ====================================================================== -->

    <specobject>
      <id>SomeIpTp.EB.TpHeader.BIGENDIAN</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SOME/IP Tp header (offset, RES, More bit) shall follow the endianity of SOME/IP Header.
        {RS_SOMEIP_00026, PRS_SOMEIP_00368}
      </description>
      <comment>Bugzilla Rfc 78034</comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1478</srcid><srcstatus/><internalId>361</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1576</srcid><srcstatus/><internalId>376</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1664</srcid><srcstatus/><internalId>390</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_not_eq_Consecutive</srcid><srcstatus/><internalId>578</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_eq_Consecutive</srcid><srcstatus/><internalId>579</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>159</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.SWS.00083.call_RxIndication</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the SOME/IP TP module interrupts the assembly process because of a detected error,
        the SOME/IP TP module shall call the API PduR_SomeIpTpRxIndication() for this PDU ID
        with E_NOT_OK.
        (RS_SOMEIP_00010)
      </description>
      <comment>Missing Requirement tag in SWS - Bugzilla Rfc(78080) - Same as SWS_SomeIpTp_00054</comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1753</srcid><srcstatus/><internalId>395</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfSingleMsg_WhileOngoingProcess_TPFLAG_1</srcid><srcstatus/><internalId>527</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfSingleMsg_WhileOngoingProcess_TPFLAG_0</srcid><srcstatus/><internalId>528</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfFirstSegment_WhileOngoingProcess</srcid><srcstatus/><internalId>534</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfFirstSegment_WhileOngoingProcess_PayloadNotDivBy16</srcid><srcstatus/><internalId>540</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>160</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.SWS.00083.Cancel_TimeOut</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the SOME/IP TP module interrupts the assembly process because of a detected error,
        the SOME/IP TP module shall cancel the Rx timeout defined by SomeIpTpRxTimeoutTime
        (if still running) for this PDU ID.
        (RS_SOMEIP_00010)
      </description>
      <comment>Missing Requirement tag in SWS - Bugzilla Rfc(78080) - Same as SWS_SomeIpTp_00054</comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1762</srcid><srcstatus/><internalId>396</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfSingleMsg_StartOfReception_NOK</srcid><srcstatus/><internalId>529</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfSingleMsg_Tp_0_CopyRxData_NOK</srcid><srcstatus/><internalId>531</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfSingleMsg_Tp_1_CopyRxData_Header_NOK</srcid><srcstatus/><internalId>532</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfSingleMsg_Tp_1_CopyRxData_Payload_NOK</srcid><srcstatus/><internalId>533</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfFirstSegment_WhileOngoingProcess_PayloadNotDivBy16</srcid><srcstatus/><internalId>540</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>161</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.00084</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If a SOME/IP segment is successfully received with the More Segment Flag set to '0', and
        offset equals to '0' while no ongoing assembly process, The SOME/IP TP module shall
        call PduR_SomeIpTpStartOfReception, PduR_SomeIpTpCopyRxData() for SOME/IP header,
        PduR_SomeIpTpCopyRxData() for received payload, and SomeIpTp_RxIndication(),
        directly after each other providing the received indication.
      </description>
      <comment>Lack of this requirement in SWS, Bugzilla Rfc(78196)</comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1115</srcid><srcstatus/><internalId>324</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1794</srcid><srcstatus/><internalId>397</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfSingleMsg_Tp_1</srcid><srcstatus/><internalId>506</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>162</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.00085.Interrupt_Assembly</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        If a SOME/IP segment is successfully received with Tp-flag equal to '1', More Segment Flag
        set to '0', and offset equals to '0', while ongoing assembly process then the current assembly
        process shall be interrupted as defined by SWS_SomeIpTp_00054.
      </description>
      <comment>Lack of this requirement in SWS, Bugzilla Rfc(78196)</comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1071</srcid><srcstatus/><internalId>318</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfSingleMsg_WhileOngoingProcess_TPFLAG_1</srcid><srcstatus/><internalId>527</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfSingleMsg_WhileOngoingProcess_TPFLAG_0</srcid><srcstatus/><internalId>528</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>163</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.00085.Report_Det_Error</id>
      <status>approved</status>
      <source>EB</source>
      <version>3</version>
      <description>
        If a SOME/IP segment is successfully received with Tp-flag equal to '1', More Segment Flag set to
        '0', and offset equals to '0', while ongoing assembly process then the API Det_ReportRuntimeError()
        shall be called with the runtime error code SOMEIPTP_E_INCONSISTENT_SEQUENCE.
      </description>
      <comment>Lack of this requirement in SWS, Bugzilla Rfc(78196)</comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1049</srcid><srcstatus/><internalId>317</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest05_ReceptionOfSingleMsg_WhileOngoingProcess_TPFLAG_1</srcid><srcstatus/><internalId>527</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>164</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.NULLPTR_TriggerTransmit</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Module shall check for PduInfoPtr passed to SomeIpTp_TriggerTransmit,
        If PduInfoPtr is equal to NULL_PTR, and SomeIpTpDevErrorDetect is set to TRUE,
          The API Det_ReportError() shall be called with the development error code SOMEIPTP_E_PARAM_POINTER.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_862</srcid><srcstatus/><internalId>305</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest01_CheckDetReportErrorCall_EB_NULLPTR_TriggerTransmit</srcid><srcstatus/><internalId>499</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>165</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.NULLPTR_RxIndication</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Module shall check for PduInfoPtr passed to SomeIpTp_RxIndication,
        If PduInfoPtr is equal to NULL_PTR, and SomeIpTpDevErrorDetect is set to TRUE,
          The API Det_ReportError() shall be called with the development error code SOMEIPTP_E_PARAM_POINTER.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_976</srcid><srcstatus/><internalId>312</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest01_CheckDetReportErrorCall_EB_NULLPTR_RxIndication</srcid><srcstatus/><internalId>500</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>166</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.No_SomeIpTpRxNSdu_RxIndication</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The Module shall do nothing if SomeIpTp_RxIndication() is called and no
        SomeIpTpRxNSdu is configured.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest04_Reception_Without_RxNSdu</srcid><srcstatus/><internalId>526</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>167</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.No_SomeIpTpTxNSdu_Transmit</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The Module shall do nothing if SomeIpTp_Transmit(), SomeIpTp_TriggerTransmit(),
        or SomeIpTp_TxConfirmation() are called and no SomeIpTpTxNSdu is configured.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest03_Transmission_Without_TxNSdu</srcid><srcstatus/><internalId>512</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>168</internalId></specobject>

    <specobject>
       <id>SomeIpTp.EB.BSWMDGeneration_1</id>
       <status>approved</status>
       <source>EB</source>
       <version>1</version>
       <description>
      The SomeIpTp module's generator shall generate a basic software
      module description (BSWMD) based on the SomeIpTp module's
      configuration containing information on the exclusive areas
      required by the SomeIpTp module's implementation.
    </description>
       <needscoverage>
          <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ComTest_SchM</srcid><srcstatus/><internalId>478</internalId></linkedfrom></coveredby></needscov>
       <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>169</internalId></specobject>

    <specobject>
       <id>SomeIpTp.EB.BSWMDGeneration_2</id>
       <status>approved</status>
       <source>EB</source>
       <version>1</version>
       <description>
      The SomeIpTp module's generator shall generate a basic software
      module description (BSWMD) based on the SomeIpTp module's
      configuration containing information on the scheduled
      MainFunctions together with the scheduling period.
    </description>
       <needscoverage>
          <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ComTest_SchM</srcid><srcstatus/><internalId>478</internalId></linkedfrom></coveredby></needscov>
       <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>170</internalId></specobject>

    <specobject>
       <id>SomeIpTp.EB.BSWMDGeneration_3</id>
       <status>approved</status>
       <source>EB</source>
       <version>1</version>
       <description>
      The SomeIpTp module's BSWMD shall be generated using a generator
      mode named "generate_swcd".
    </description>
       <needscoverage>
          <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ComTest_SchM</srcid><srcstatus/><internalId>478</internalId></linkedfrom></coveredby></needscov>
       <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>171</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.SomeIpTpTxConfirmationTimeout.ECUC</id>
      <status>approved</status>
      <source>EB</source>
      <version>2</version>
      <description>
        Name                        SomeIpTpTxConfirmationTimeout
        Parent Container            SomeIpTpChannel
        Description                 This represents the confirmation timeout after
                                    transmission of a N-PDU message. Unit: seconds.
        Multiplicity                1
        Type                        EcucFloatParamDef
        Range                       ]0 .. INF[
        Default value               --
        Post-Build Variant Value    true
        Value Configuration Class   Pre-compile time  X VARIANT-PRE-COMPILE
                                    Link time         X VARIANT-LINK-TIME
                                    Post-build time   X VARIANT-POST-BUILD
        Scope / Dependency          scope: local
      </description>
      <comment>This timeout includes the time needed to retry copying the TxData as well</comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SomeIpTp_EBParameters.xdm.m4_20</srcid><srcstatus/><internalId>445</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest06_CheckSingleSegmentTransmission_TxConfirmationTimeout</srcid><srcstatus/><internalId>558</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_CheckMultiSegmentTransmission_TxConfirmationTimeout_First</srcid><srcstatus/><internalId>559</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_CheckMultiSegmentTransmission_TxConfirmationTimeout_Consecutive</srcid><srcstatus/><internalId>560</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_CheckMultiSegmentTransmission_TxConfirmationTimeout_Last</srcid><srcstatus/><internalId>561</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_CheckSingleSegmentTransmission_TxConfirmationTimeout_InterDependency</srcid><srcstatus/><internalId>562</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>172</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.SomeIpTpTxConfirmationTimeout.Monitor</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Each transmission request of a message shall be monitored for a transmit confirmation
        timeout.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_627</srcid><srcstatus/><internalId>275</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest06_CheckSingleSegmentTransmission_TxConfirmationTimeout</srcid><srcstatus/><internalId>558</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_CheckMultiSegmentTransmission_TxConfirmationTimeout_First</srcid><srcstatus/><internalId>559</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_CheckMultiSegmentTransmission_TxConfirmationTimeout_Consecutive</srcid><srcstatus/><internalId>560</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_CheckMultiSegmentTransmission_TxConfirmationTimeout_Last</srcid><srcstatus/><internalId>561</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_CheckSingleSegmentTransmission_TxConfirmationTimeout_InterDependency</srcid><srcstatus/><internalId>562</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_not_eq_Consecutive</srcid><srcstatus/><internalId>578</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>173</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.DummyFunctions.PduR</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The following functions shall be available as dummy's in SomeIpTp
        for a good integration with the PduR:
        - SomeIpTp_PduRIfTransmit
        - SomeIpTp_PduRTpTxConfirmation
        - SomeIpTp_PduRTpCopyTxData
        - SomeIpTp_PduRTpStartOfReception
        - SomeIpTp_PduRTpCopyRxData
        - SomeIpTp_PduRTpRxIndication
        All of them shall report a DET error with the SOMEIPTP_E_INVALID_CALL error code,
        to let the user know that the configuration is wrong and these functions should
        not be reached.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest01_CheckDetReportErrorCall_DummyFunctions</srcid><srcstatus/><internalId>504</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>174</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.TX_Retry</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SomeIpTp shall allow the lower layer to retry getting the already copied data by allowing
        multiple calls of SomeIpTp_TriggerTransmit for the same segment.
      </description>
      <needscoverage>
        <needscov><needsobj>swurs</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00018.SingleSegment</srcid><srcstatus/><internalId>139</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00018.SingleSegment_Retry</srcid><srcstatus/><internalId>140</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00018.FirstSegment_header</srcid><srcstatus/><internalId>141</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00018.FirstSegment_payload</srcid><srcstatus/><internalId>142</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00018.FirstSegment_Payload_Retry</srcid><srcstatus/><internalId>143</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00018.Consecutive_or_last_Segment</srcid><srcstatus/><internalId>144</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp.SWS_SomeIpTp_00018.Consecutive_or_last_Segment_Retry</srcid><srcstatus/><internalId>145</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>175</internalId></specobject>

    <specobject>
      <id>SomeIpTp.Allow_TriggerTransmit_from_context_of_PduR_SomeIpTpTransmit</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The SomeIpTp module shall allow SomeIpTp_TriggerTransmit to be called within the context
        of PduR_SomeIpTpTransmit request to the current segment.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest04_ImmediateTriggerTransmit_SingleSegment</srcid><srcstatus/><internalId>520</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest04_ImmediateTriggerTransmit_MultiSegments</srcid><srcstatus/><internalId>521</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest04_TwoMessages_MultiSegments</srcid><srcstatus/><internalId>525</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>176</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.TxConfirmation_Det_E_PARAM</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If parameter TxPduId of SomeIpTp_TxConfirmation() has an invalid value and if
        development error detection is enabled (i.e. SomeIpTpDevErrorDetect is set
        to TRUE), the API Det_ReportError() shall be called with the development error
        code SOMEIPTP_E_PARAM.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_775</srcid><srcstatus/><internalId>298</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest01_CheckDetReportErrorCall_TxConfirmation_Det_E_PARAM</srcid><srcstatus/><internalId>501</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>177</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.TriggerTransmit_Det_E_PARAM</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If parameter TxPduId of SomeIpTp_TriggerTransmit() has an invalid value and if
        development error detection is enabled (i.e. SomeIpTpDevErrorDetect is set
        to TRUE), the API Det_ReportError() shall be called with the development error
        code SOMEIPTP_E_PARAM.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_869</srcid><srcstatus/><internalId>306</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest01_CheckDetReportErrorCall_TriggerTransmit_Det_E_PARAM</srcid><srcstatus/><internalId>502</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>178</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.RxIndication_Det_E_PARAM</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If parameter RxPduId of SomeIpTp_RxIndication() has an invalid value and if
        development error detection is enabled (i.e. SomeIpTpDevErrorDetect is set
        to TRUE), the API Det_ReportError() shall be called with the development error
        code SOMEIPTP_E_PARAM.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_983</srcid><srcstatus/><internalId>313</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest01_CheckDetReportErrorCall_RxIndication_Det_E_PARAM</srcid><srcstatus/><internalId>503</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>179</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.Cancel</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If an API PduR_SomeIpTpTransmit() returns E_NOT_OK, the ongoing
        disassembly process for this PDU ID shall be canceled.
      </description>
      <comment>
        You have to check if the disassembly process is still ongoing, i.e. not already
        cancelled in the context of SomeIpTp_TriggerTransmit() as SomeIpTp_TriggerTransmit()
        can be called in the context of SoAd_IfTransmit() which is called by PduR_SomeIpTpTransmit()
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_645</srcid><srcstatus/><internalId>277</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest06_Check_LowerLayerTransmit_Return_NOT_OK_Single</srcid><srcstatus/><internalId>563</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_Check_LowerLayerTransmit_Return_NOT_OK_Single_multi_Channel</srcid><srcstatus/><internalId>564</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_Check_LowerLayerTransmit_Return_NOT_OK_Single_multi_Channel_Reverse</srcid><srcstatus/><internalId>565</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_Check_LowerLayerTransmit_Return_NOT_OK_interrupted_Transmit</srcid><srcstatus/><internalId>566</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_Check_LowerLayerTransmit_Return_NOT_OK_First</srcid><srcstatus/><internalId>567</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_Check_LowerLayerTransmit_Return_NOT_OK_Consecutive</srcid><srcstatus/><internalId>568</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_Check_LowerLayerTransmit_Return_NOT_OK_Last</srcid><srcstatus/><internalId>569</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_Check_LowerLayerTransmit_TriggerTransmit_Return_NOT_OK_First_0</srcid><srcstatus/><internalId>570</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_Check_LowerLayerTransmit_TriggerTransmit_Return_NOT_OK_First_1</srcid><srcstatus/><internalId>571</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_Check_LowerLayerTransmit_TriggerTransmit_Return_NOT_OK_First_2</srcid><srcstatus/><internalId>572</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>180</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.ReportRuntimeError</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If an API PduR_SomeIpTpTransmit() returns E_NOT_OK then the API Det_ReportRuntimeError()
        shall be called with the runtime error code SOMEIPTP_E_DISASSEMBLY_INTERRUPT.
      </description>
      <comment>
        You have to check if the disassembly process is still ongoing, i.e. not already
        cancelled in the context of SomeIpTp_TriggerTransmit() as SomeIpTp_TriggerTransmit()
        can be called in the context of SoAd_IfTransmit() which is called by PduR_SomeIpTpTransmit()
        This is to avoid reporting the Det_ReportRuntimeError() twice.
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_677</srcid><srcstatus/><internalId>287</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest06_Check_LowerLayerTransmit_Return_NOT_OK_Single</srcid><srcstatus/><internalId>563</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_Check_LowerLayerTransmit_Return_NOT_OK_Single_multi_Channel</srcid><srcstatus/><internalId>564</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_Check_LowerLayerTransmit_Return_NOT_OK_Single_multi_Channel_Reverse</srcid><srcstatus/><internalId>565</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_Check_LowerLayerTransmit_Return_NOT_OK_First</srcid><srcstatus/><internalId>567</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_Check_LowerLayerTransmit_Return_NOT_OK_Consecutive</srcid><srcstatus/><internalId>568</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_Check_LowerLayerTransmit_Return_NOT_OK_Last</srcid><srcstatus/><internalId>569</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_Check_LowerLayerTransmit_TriggerTransmit_Return_NOT_OK_First_0</srcid><srcstatus/><internalId>570</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_Check_LowerLayerTransmit_TriggerTransmit_Return_NOT_OK_First_1</srcid><srcstatus/><internalId>571</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_Check_LowerLayerTransmit_TriggerTransmit_Return_NOT_OK_First_2</srcid><srcstatus/><internalId>572</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>181</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.TxConfirmation</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If an API PduR_SomeIpTpTransmit() returns E_NOT_OK, the API PduR_SomeIpTpTxConfirmation()
        shall be called with result set to E_NOT_OK.
      </description>
      <comment>
        You have to check if the disassembly process is still ongoing, i.e. not already
        cancelled in the context of SomeIpTp_TriggerTransmit() as SomeIpTp_TriggerTransmit()
        can be called in the context of SoAd_IfTransmit() which is called by PduR_SomeIpTpTransmit()
        This is to avoid reporting the PduR_SomeIpTpTxConfirmation() twice
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_684</srcid><srcstatus/><internalId>290</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest06_Check_LowerLayerTransmit_Return_NOT_OK_Single</srcid><srcstatus/><internalId>563</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_Check_LowerLayerTransmit_Return_NOT_OK_Single_multi_Channel</srcid><srcstatus/><internalId>564</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_Check_LowerLayerTransmit_Return_NOT_OK_Single_multi_Channel_Reverse</srcid><srcstatus/><internalId>565</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_Check_LowerLayerTransmit_Return_NOT_OK_interrupted_Transmit</srcid><srcstatus/><internalId>566</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_Check_LowerLayerTransmit_Return_NOT_OK_First</srcid><srcstatus/><internalId>567</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_Check_LowerLayerTransmit_Return_NOT_OK_Consecutive</srcid><srcstatus/><internalId>568</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_Check_LowerLayerTransmit_Return_NOT_OK_Last</srcid><srcstatus/><internalId>569</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_Check_LowerLayerTransmit_TriggerTransmit_Return_NOT_OK_First_0</srcid><srcstatus/><internalId>570</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_Check_LowerLayerTransmit_TriggerTransmit_Return_NOT_OK_First_1</srcid><srcstatus/><internalId>571</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_Check_LowerLayerTransmit_TriggerTransmit_Return_NOT_OK_First_2</srcid><srcstatus/><internalId>572</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>182</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.AcceptTransmit.From.PduR_SomeIpTpTxConfirmation</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Allow the acceptance of transmission request in the context of PduR_SomeIpTpTxConfirmation callout
      </description>
      <comment>
        The module should be ready to accept new transmission request before calling PduR_SomeIpTpTxConfirmation
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_653</srcid><srcstatus/><internalId>280</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_681</srcid><srcstatus/><internalId>288</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_796</srcid><srcstatus/><internalId>300</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest04_Transmit_SingleSegment_In_TxConfirmation</srcid><srcstatus/><internalId>522</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest04_Transmit_MultiSegment_In_TxConfirmation</srcid><srcstatus/><internalId>523</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_Check_TxConfirmation_NOT_OK_Transmission_0</srcid><srcstatus/><internalId>573</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_Check_TxConfirmation_NOT_OK_Transmission_1</srcid><srcstatus/><internalId>574</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest06_Check_TxConfirmation_NOT_OK_Transmission_2</srcid><srcstatus/><internalId>575</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>183</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.Invalid.SomeIpTpRxNPduHandleId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SomeIpTp shall report a generation error if the SomeIpTpRxNPduHandleId is out of the range 0..65535.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SomeIpTp_Extension.xdm.m4_104</srcid><srcstatus/><internalId>454</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01006_Err_MaxHandleIDLength</srcid><srcstatus/><internalId>484</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>184</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.ZeroBased.SomeIpTpRxNPduHandleId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SomeIpTp shall report a generation error if the SomeIpTpRxNPduHandleId is not zero based.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SomeIpTp_Extension.xdm.m4_98</srcid><srcstatus/><internalId>453</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01002_Err_IDs_NotZeroBased</srcid><srcstatus/><internalId>480</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>185</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.consecutive.SomeIpTpRxNPduHandleId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SomeIpTp shall report a generation error if the SomeIpTpRxNPduHandleId values are not consecutive.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SomeIpTp_Extension.xdm.m4_97</srcid><srcstatus/><internalId>452</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01003_Err_IDs_NotConsecutive</srcid><srcstatus/><internalId>481</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>186</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.Unique.SomeIpTpRxNPduHandleId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SomeIpTp shall report a generation error if the SomeIpTpRxNPduHandleId values are not Unique.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SomeIpTp_Extension.xdm.m4_90</srcid><srcstatus/><internalId>451</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01001_Err_IDs_NotUnique</srcid><srcstatus/><internalId>479</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>187</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.Invalid.SomeIpTpTxNSduHandleId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SomeIpTp shall report a generation error if the SomeIpTpTxNSduHandleId is out of the range 0..65535.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SomeIpTp_Extension.xdm.m4_163</srcid><srcstatus/><internalId>462</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01006_Err_MaxHandleIDLength</srcid><srcstatus/><internalId>484</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>188</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.ZeroBased.SomeIpTpTxNSduHandleId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SomeIpTp shall report a generation error if the SomeIpTpTxNSduHandleId is not zero based.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SomeIpTp_Extension.xdm.m4_157</srcid><srcstatus/><internalId>461</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01002_Err_IDs_NotZeroBased</srcid><srcstatus/><internalId>480</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>189</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.consecutive.SomeIpTpTxNSduHandleId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SomeIpTp shall report a generation error if the SomeIpTpTxNSduHandleId values are not consecutive.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SomeIpTp_Extension.xdm.m4_156</srcid><srcstatus/><internalId>460</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01003_Err_IDs_NotConsecutive</srcid><srcstatus/><internalId>481</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>190</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.Unique.SomeIpTpTxNSduHandleId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SomeIpTp shall report a generation error if the SomeIpTpTxNSduHandleId values are not Unique.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SomeIpTp_Extension.xdm.m4_149</srcid><srcstatus/><internalId>459</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01001_Err_IDs_NotUnique</srcid><srcstatus/><internalId>479</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>191</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.Invalid.SomeIpTpTxNPduHandleId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SomeIpTp shall report a generation error if the SomeIpTpTxNPduHandleId is out of the range 0..65535.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SomeIpTp_Extension.xdm.m4_218</srcid><srcstatus/><internalId>470</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01006_Err_MaxHandleIDLength</srcid><srcstatus/><internalId>484</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>192</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.ZeroBased.SomeIpTpTxNPduHandleId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SomeIpTp shall report a generation error if the SomeIpTpTxNPduHandleId is not zero based.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SomeIpTp_Extension.xdm.m4_211</srcid><srcstatus/><internalId>468</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01002_Err_IDs_NotZeroBased</srcid><srcstatus/><internalId>480</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>193</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.consecutive.SomeIpTpTxNPduHandleId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SomeIpTp shall report a generation error if the SomeIpTpTxNPduHandleId values are not consecutive.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SomeIpTp_Extension.xdm.m4_212</srcid><srcstatus/><internalId>469</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01003_Err_IDs_NotConsecutive</srcid><srcstatus/><internalId>481</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>194</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.Unique.SomeIpTpTxNPduHandleId</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SomeIpTp shall report a generation error if the SomeIpTpTxNPduHandleId values are not Unique.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SomeIpTp_Extension.xdm.m4_204</srcid><srcstatus/><internalId>467</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01001_Err_IDs_NotUnique</srcid><srcstatus/><internalId>479</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>195</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.missing.SomeIpTpRxSduRef</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SomeIpTp shall report a generation error if the SomeIpTpRxSduRef value is missing.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SomeIpTp_Extension.xdm.m4_59</srcid><srcstatus/><internalId>447</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01004_Err_MissingECUCRef</srcid><srcstatus/><internalId>482</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>196</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.InvalidRoutingPath.SomeIpTpRxSduRef</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SomeIpTp shall report a generation error if the SomeIpTpRxSduRef reference a PDU which
        have a wrong routing path or don't have routing path in PduR configurations.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SomeIpTp_Extension.xdm.m4_75</srcid><srcstatus/><internalId>449</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01005_Err_WrongECUCRef</srcid><srcstatus/><internalId>483</internalId></linkedfrom><linkedfrom><srcid>TS_GenTest_01008_Err_IncorrectRouting</srcid><srcstatus/><internalId>486</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>197</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.MultiRouting.SomeIpTpRxSduRef</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SomeIpTp shall report a generation error if the SomeIpTpRxSduRef reference a PDU which
        have a multiple routing path.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SomeIpTp_Extension.xdm.m4_80</srcid><srcstatus/><internalId>450</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01009_Err_MultiRouting</srcid><srcstatus/><internalId>487</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>198</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.Unique.SomeIpTpRxSduRef</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SomeIpTp shall report a generation error if the SomeIpTpRxSduRef reference is not unique
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SomeIpTp_Extension.xdm.m4_62</srcid><srcstatus/><internalId>448</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01007_Err_ECUCRef_NotUnique</srcid><srcstatus/><internalId>485</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>199</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.missing.SomeIpTpRxNPduRef</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SomeIpTp shall report a generation error if the SomeIpTpRxNPduRef value is missing.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SomeIpTp_Extension.xdm.m4_112</srcid><srcstatus/><internalId>455</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01004_Err_MissingECUCRef</srcid><srcstatus/><internalId>482</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>200</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.InvalidRoutingPath.SomeIpTpRxNPduRef</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SomeIpTp shall report a generation error if the SomeIpTpRxNPduRef reference a PDU which
        have a wrong routing path or don't have routing path in PduR configurations.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SomeIpTp_Extension.xdm.m4_128</srcid><srcstatus/><internalId>457</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01005_Err_WrongECUCRef</srcid><srcstatus/><internalId>483</internalId></linkedfrom><linkedfrom><srcid>TS_GenTest_01008_Err_IncorrectRouting</srcid><srcstatus/><internalId>486</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>201</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.MultiRouting.SomeIpTpRxNPduRef</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SomeIpTp shall report a generation error if the SomeIpTpRxNPduRef reference a PDU which
        have a multiple routing path.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SomeIpTp_Extension.xdm.m4_133</srcid><srcstatus/><internalId>458</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01009_Err_MultiRouting</srcid><srcstatus/><internalId>487</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>202</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.Unique.SomeIpTpRxNPduRef</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SomeIpTp shall report a generation error if the SomeIpTpRxNPduRef reference is not unique
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SomeIpTp_Extension.xdm.m4_115</srcid><srcstatus/><internalId>456</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01007_Err_ECUCRef_NotUnique</srcid><srcstatus/><internalId>485</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>203</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.missing.SomeIpTpTxNSduRef</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SomeIpTp shall report a generation error if the SomeIpTpTxNSduRef value is missing.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SomeIpTp_Extension.xdm.m4_171</srcid><srcstatus/><internalId>463</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01004_Err_MissingECUCRef</srcid><srcstatus/><internalId>482</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>204</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.InvalidRoutingPath.SomeIpTpTxNSduRef</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SomeIpTp shall report a generation error if the SomeIpTpTxNSduRef reference a PDU which
        have a wrong routing path or don't have routing path in PduR configurations.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SomeIpTp_Extension.xdm.m4_187</srcid><srcstatus/><internalId>465</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01005_Err_WrongECUCRef</srcid><srcstatus/><internalId>483</internalId></linkedfrom><linkedfrom><srcid>TS_GenTest_01008_Err_IncorrectRouting</srcid><srcstatus/><internalId>486</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>205</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.MultiRouting.SomeIpTpTxNSduRef</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SomeIpTp shall report a generation error if the SomeIpTpTxNSduRef reference a PDU which
        have a multiple routing path.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SomeIpTp_Extension.xdm.m4_192</srcid><srcstatus/><internalId>466</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01009_Err_MultiRouting</srcid><srcstatus/><internalId>487</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>206</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.Unique.SomeIpTpTxNSduRef</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SomeIpTp shall report a generation error if the SomeIpTpTxNSduRef reference is not unique
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SomeIpTp_Extension.xdm.m4_174</srcid><srcstatus/><internalId>464</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01007_Err_ECUCRef_NotUnique</srcid><srcstatus/><internalId>485</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>207</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.missing.SomeIpTpTxNPduRef</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SomeIpTp shall report a generation error if the SomeIpTpTxNPduRef value is missing.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SomeIpTp_Extension.xdm.m4_226</srcid><srcstatus/><internalId>471</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01004_Err_MissingECUCRef</srcid><srcstatus/><internalId>482</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>208</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.InvalidRoutingPath.SomeIpTpTxNPduRef</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SomeIpTp shall report a generation error if the SomeIpTpTxNPduRef reference a PDU which
        have a wrong routing path or don't have routing path in PduR configurations.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SomeIpTp_Extension.xdm.m4_242</srcid><srcstatus/><internalId>473</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01005_Err_WrongECUCRef</srcid><srcstatus/><internalId>483</internalId></linkedfrom><linkedfrom><srcid>TS_GenTest_01008_Err_IncorrectRouting</srcid><srcstatus/><internalId>486</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>209</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.MultiRouting.SomeIpTpTxNPduRef</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SomeIpTp shall report a generation error if the SomeIpTpTxNPduRef reference a PDU which
        have a multiple routing path.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SomeIpTp_Extension.xdm.m4_247</srcid><srcstatus/><internalId>474</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01009_Err_MultiRouting</srcid><srcstatus/><internalId>487</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>210</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.InvalidPduLen.SomeIpTpTxNPduRef</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SomeIpTp shall report a generation error if the SomeIpTpTxNPduRef reference a PDU which
        have an invalid Pdu Length.
      </description>
      <comment>
        The Pdu length have to be less than or equal 1404 also the Pdu length - 12
        have to be divisable by 16
      </comment>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SomeIpTp_Extension.xdm.m4_252</srcid><srcstatus/><internalId>475</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01010_Err_IncorrectPDULength</srcid><srcstatus/><internalId>488</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>211</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.Unique.SomeIpTpTxNPduRef</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SomeIpTp shall report a generation error if the SomeIpTpTxNPduRef reference is not unique
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SomeIpTp_Extension.xdm.m4_229</srcid><srcstatus/><internalId>472</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01007_Err_ECUCRef_NotUnique</srcid><srcstatus/><internalId>485</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>212</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.Zero_Payload</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        SomeIpTp shall accept reception of messages with zero payload and send it to the upper
        layer as a single segment message.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1006</srcid><srcstatus/><internalId>314</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfSingleMsg_ZeroPayload</srcid><srcstatus/><internalId>511</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>213</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.Check_SomeIp_Header.ReportRuntimeError</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the length of the received segment is less than the length of SomeIp header.
        The API Det_ReportRuntimeError() shall be called with the runtime error code
        SOMEIPTP_E_INCONSISTENT_HEADER.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1162</srcid><srcstatus/><internalId>329</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1170</srcid><srcstatus/><internalId>330</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest05_ZeroLengthMessage</srcid><srcstatus/><internalId>553</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest05_ZeroLengthMessage_WhileOngoing</srcid><srcstatus/><internalId>554</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>214</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.Check_SomeIp_Header.call_RxIndication</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the length of the received segment is less than the length of SomeIp header and
        there is an ongoing disassembly process, Call the API PduR_SomeIpTpRxIndication()
        for this PDU ID with E_NOT_OK.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1160</srcid><srcstatus/><internalId>327</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest05_ZeroLengthMessage_WhileOngoing</srcid><srcstatus/><internalId>554</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>215</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.Check_SomeIp_Header.Cancel_TimeOut</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the length of the received segment is less than the length of SomeIp header and
        there is an ongoing disassembly process, the SOME/IP TP module shall cancel the Rx
        timeout defined by SomeIpTpRxTimeoutTime (if still running) for this PDU ID.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1161</srcid><srcstatus/><internalId>328</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest05_ZeroLengthMessage_WhileOngoing</srcid><srcstatus/><internalId>554</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>216</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.Check_SomeIpTp_Header.RunTime_Error</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        Type of error                                     Related error code                        Value
                                                                                                    [hex]
        The TP-Flag (of Message Type) was set to '1'      SOMEIPTP_E_MISSING_SOMEIPTP_HEADER        0x09
        while no SOME/IP TP headers received.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/include/SomeIpTp.h_142</srcid><srcstatus/><internalId>261</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>217</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.Check_SomeIpTp_Header.ReportRuntimeError</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the length of the received segment is less than the length of SomeIp header and
        SomeIpTp header. The API Det_ReportRuntimeError() shall be called with the runtime error code
        SOMEIPTP_E_MISSING_SOMEIPTP_HEADER.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1072</srcid><srcstatus/><internalId>319</internalId></linkedfrom><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1085</srcid><srcstatus/><internalId>322</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest05_NoSomeIpTpHeader_TPFlag1</srcid><srcstatus/><internalId>555</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest05_NoSomeIpTpHeader_TPFlag1_WhileOngoing</srcid><srcstatus/><internalId>556</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>218</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.Check_SomeIpTp_Header.call_RxIndication</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the length of the received segment is less than the length of SomeIp header and
        SomeIpTp header while there is an ongoing disassembly process, Call the API
        PduR_SomeIpTpRxIndication() for this PDU ID with E_NOT_OK.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1073</srcid><srcstatus/><internalId>320</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest05_NoSomeIpTpHeader_TPFlag1_WhileOngoing</srcid><srcstatus/><internalId>556</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>219</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.Check_SomeIpTp_Header.Cancel_TimeOut</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If the length of the received segment is less than the length of SomeIp header and
        SomeIpTp header while there is an ongoing disassembly process, the SOME/IP TP module
        shall cancel the Rx timeout defined by SomeIpTpRxTimeoutTime (if still running) for
        this PDU ID.
      </description>
      <needscoverage>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/src/SomeIpTp.c.m4_1074</srcid><srcstatus/><internalId>321</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest05_NoSomeIpTpHeader_TPFlag1_WhileOngoing</srcid><srcstatus/><internalId>556</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>220</internalId></specobject>

    <specobject>
      <id>SomeIpTp.EB.SoAd_ParametersLimitation</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        If SomeIpTp is used, SoAdIfTriggerTransmit and SoAdIfTxConfirmation shall be enabled.
      </description>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_GenTest_01011_Err_SoAdParametersDisabled</srcid><srcstatus/><internalId>489</internalId></linkedfrom></coveredby></needscov>
        <needscov><needsobj>impl</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>src/Autosar/config/SomeIpTp.xdm.m4_217</srcid><srcstatus/><internalId>444</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>221</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>SomeIpTp.EB.PDULENGTHTYPE001</id>
      <status>approved</status>
      <source>EB</source>
      <version>1</version>
      <description>
        The SomeIpTp module shall support the following values of PduLengthType:
        [UINT32, UINT16]
      </description>
      <verifycrit>
        Use case 1 - Modules not capable of handling more than 64 kbytes of data:
          - use PduLengthType value 'UINT32' with conformance test
          - verify successful test run, verify absence of metric violations
            (MISRA-C:2012, static code analysis, compiler warnings)
        Use case 2 - Modules capable of handling more than 64 kbytes of data:
          - use conformance test which handles more than 64 kbytes of data
          - apply "boundary" tests using data length of:
            [&lt;&lt;65535,65535, 65536, &gt;131072][bytes]
      </verifycrit>
      <needscoverage>
        <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfSingleMsg_Tp_1</srcid><srcstatus/><internalId>506</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfSingleMsg_Tp_0</srcid><srcstatus/><internalId>507</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfMsg_ThreeSegments</srcid><srcstatus/><internalId>508</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest03_ReceptionOfTwoMsg_ThreeSegments</srcid><srcstatus/><internalId>509</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ConTest04_CheckTriggerTransmitCallWithSmallerBuffer_SingleSegment</srcid><srcstatus/><internalId>514</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTriggerTransmitCallAtUnexpectedState</srcid><srcstatus/><internalId>576</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_not_eq_Consecutive</srcid><srcstatus/><internalId>578</internalId></linkedfrom><linkedfrom><srcid>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_eq_Consecutive</srcid><srcstatus/><internalId>579</internalId></linkedfrom></coveredby></needscov>
      <containerCovstatus>covered</containerCovstatus></needscoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>222</internalId></specobject>

  </specobjects>
    <specobjects doctype="swurs">

    <specobject>
      <id>SomeIpTp.EB.Interface.Consistency</id>
       <status>approved</status>
       <source>EB</source>
       <version>1</version>
       <description>
        The module shall provide a mechanism to guarantee consistency of interfaces and
        types between its implementation and its code stub.
       </description>
       <comment>
        The code stub of a module shall provide the same external view than the module itself.
        This is mandatory because unit test of modules test against the code stubs of
        adjacent modules. Inconsistent stubs may result in the situation that incompatible
        interfaces are not detected as unit test stage.
       </comment>
       <verifycrit>
        Create a compile test with two permutations that call all interfaces of a module
        (in both permutations).
        p0: Behave like a regular compile test; call the module generator and compile against
        the implementation of the module.
        p1: Do not generate module code and do not compile the implementation of the module.
        Instead the module shall be replaced with its own code stub.
       </verifycrit>
       <needscoverage>
          <needscov><needsobj>swuts</needsobj><objcovstatus>covered</objcovstatus><coveredby><linkedfrom><srcid>TS_SomeIpTp_VerifyCodeStub</srcid><srcstatus/><internalId>477</internalId></linkedfrom></coveredby></needscov>
       <containerCovstatus>covered</containerCovstatus></needscoverage>
       
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>223</internalId></specobject>

  </specobjects>
    <specobjects doctype="dev">
    <specobject>
      <id>doc/public/changelog/Deviations.xml_23</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>23</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.ECUC_SomeIpTp_00001.PB_CONFIG_VARIANT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>103</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.ECUC_SomeIpTp_00001.LINK_CONFIG_VARIANT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>102</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>224</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_24</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>24</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.ECUC_SomeIpTp_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>4</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>225</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_25</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>25</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.ECUC_SomeIpTp_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>226</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_26</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>26</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.ECUC_SomeIpTp_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>8</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>227</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_27</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>27</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.ECUC_SomeIpTp_00009</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>9</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>228</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_28</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>28</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.ECUC_SomeIpTp_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>10</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>229</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_29</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>29</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.ECUC_SomeIpTp_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>12</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>230</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_30</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>30</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.ECUC_SomeIpTp_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>14</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>231</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_31</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>31</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.ECUC_SomeIpTp_00018</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>17</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>232</internalId></specobject>
    <specobject>
      <id>dev.SomeIpTp.PrecompileOnly</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>32</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.ECUC_SomeIpTp_00023</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>21</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>233</internalId></specobject>
    <specobject>
      <id>dev.SomeIpTp.StorageOfMoreFlagRx</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>49</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00029</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>50</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>234</internalId></specobject>
    <specobject>
      <id>dev.SomeIpTp.availableDataPtrTx</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>68</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>40</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>235</internalId></specobject>
    <specobject>
      <id>dev.SomeIpTp.TP-flag0</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>91</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00045</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>66</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>236</internalId></specobject>
    <specobject>
      <id>dev.SomeIpTp.availableDataPtrRx</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>113</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00024</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>237</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_132</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>132</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00024</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>45</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>238</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_133</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>133</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00025</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>46</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>239</internalId></specobject>
    <specobject>
      <id>dev.SomeIpTp.ResultNotifResultType</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>134</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00054.Result_RDUR430</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>113</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>240</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_154</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>154</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00056</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>76</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>241</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_155</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>155</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00021</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>42</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>242</internalId></specobject>
    <specobject>
      <id>doc/public/changelog/Deviations.xml_156</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>156</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00023</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>44</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>243</internalId></specobject>
    <specobject>
      <id>dev.SomeIpTp.TpAPIs</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>157</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_91001.Result_RDUR430</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>115</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>244</internalId></specobject>
    <specobject>
      <id>dev.SomeIpTp.SduLength</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>176</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00055</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>92</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>245</internalId></specobject>
    <specobject>
      <id>dev.SomeIpTp.FirstSegmentCopy</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>207</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00034</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>55</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>246</internalId></specobject>
    <specobject>
      <id>dev.SomeIpTp.NULL_RetryInfoPtrs</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>223</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>39</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>247</internalId></specobject>
    <specobject>
      <id>dev.SomeIpTp.NPduSeparationTime</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>250</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.ECUC_SomeIpTp_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>7</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>248</internalId></specobject>
    <specobject>
      <id>dev.SomeIpTp.NotInit</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>266</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00067</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>87</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00052</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00072</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>94</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>249</internalId></specobject>
    <specobject>
      <id>dev.SomeIpTp.newReqm</id>
      <status>approved</status>
      <source>EB release notes</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/doc/public/changelog/Deviations.xml</sourcefile>
      <sourceline>283</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00077</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>100</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>250</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate/include/SomeIpTp_Cfg.h_18</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/generate/include/SomeIpTp_Cfg.h</sourcefile>
      <sourceline>18</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.ECUC_SomeIpTp_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>5</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>251</internalId></specobject>
    <specobject>
      <id>src/Autosar/generate/include/SomeIpTp_Cfg.h_30</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/generate/include/SomeIpTp_Cfg.h</sourcefile>
      <sourceline>30</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.ECUC_SomeIpTp_00019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>252</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/include/SomeIpTp.h_78</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/include/SomeIpTp.h</sourcefile>
      <sourceline>78</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00052</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>253</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/SomeIpTp.h_85</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/include/SomeIpTp.h</sourcefile>
      <sourceline>85</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00052</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>254</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/SomeIpTp.h_92</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/include/SomeIpTp.h</sourcefile>
      <sourceline>92</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00052</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>73</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>255</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/SomeIpTp.h_107</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/include/SomeIpTp.h</sourcefile>
      <sourceline>107</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00065</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>85</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>256</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/SomeIpTp.h_114</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/include/SomeIpTp.h</sourcefile>
      <sourceline>114</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00065</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>85</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>257</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/SomeIpTp.h_121</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/include/SomeIpTp.h</sourcefile>
      <sourceline>121</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00065</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>85</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>258</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/SomeIpTp.h_128</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/include/SomeIpTp.h</sourcefile>
      <sourceline>128</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00065</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>85</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>259</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/SomeIpTp.h_135</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/include/SomeIpTp.h</sourcefile>
      <sourceline>135</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00065</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>85</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>260</internalId></specobject>
    <specobject>
      <id>src/Autosar/include/SomeIpTp.h_142</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/include/SomeIpTp.h</sourcefile>
      <sourceline>142</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.Check_SomeIpTp_Header.RunTime_Error</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>217</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>261</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/include/SomeIpTp_Types.h_184</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/include/SomeIpTp_Types.h</sourcefile>
      <sourceline>184</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_91002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>91</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>262</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_441</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>441</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00044</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>65</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>263</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_452</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>452</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00066</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>86</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>264</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_472</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>472</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00046</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>67</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>265</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_528</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>528</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00058</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>266</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_570</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>570</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00017.First_Segment_Size_Calc</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>267</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_573</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>573</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00017.Pdu_ID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>149</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>268</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_574</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>574</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00017.call_PduR_SomeIpTpTransmit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>269</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_581</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>581</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00017.First_Segment_Size_Calc</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>270</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_584</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>584</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00017.Pdu_ID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>149</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>271</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_585</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>585</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00017.call_PduR_SomeIpTpTransmit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>272</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_592</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>592</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>273</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_608</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>608</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>274</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_627</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>627</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.SomeIpTpTxConfirmationTimeout.Monitor</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>173</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>275</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_630</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>630</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.StopAssembly</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>276</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_645</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>645</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.Cancel</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>277</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_651</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>651</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00024.ExpectedForAllButLast_Result_RDUR403_ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>278</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_652</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>652</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00025.Result_RDUR403_ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>112</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>279</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_653</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>653</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.AcceptTransmit.From.PduR_SomeIpTpTxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>280</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_654</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>654</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00024.ExpectedForAllButLast_Result_RDUR403_CancelDisassembly</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>107</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>281</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_655</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>655</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00025.Result_RDUR403_CancelDisassembly</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>110</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>282</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_656</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>656</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00024.ExpectedForAllButLast_Result_RDUR403_CallTxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>283</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_657</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>657</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00025.Result_RDUR403_CallTxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>284</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_669</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>669</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00022.Confirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>285</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_676</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>676</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.DET</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>286</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_677</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>677</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.ReportRuntimeError</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>287</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_681</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>681</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.AcceptTransmit.From.PduR_SomeIpTpTxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>288</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_683</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>683</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.Confirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>289</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_684</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>684</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.TxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>290</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_692</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>692</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00059</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>291</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_699</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>699</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00069</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>88</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>292</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_725</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>725</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00041.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>293</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_726</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>726</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00054.Result_RDUR403</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>294</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_745</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>745</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00070</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>89</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>295</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_752</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>752</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_91001.NoResult_RDUR403</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>116</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>296</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_768</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>768</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00067</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>87</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>297</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_775</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>775</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.TxConfirmation_Det_E_PARAM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>298</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_795</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>795</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00021.PDUR403</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>130</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>299</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_796</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>796</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.AcceptTransmit.From.PduR_SomeIpTpTxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>300</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_808</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>808</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.FirstSegment_Payload_Retry</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>301</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_809</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>809</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.Consecutive_or_last_Segment_Retry</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>302</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_836</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>836</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00053</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>74</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>303</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_856</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>856</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00072</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>94</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>304</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_862</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>862</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.NULLPTR_TriggerTransmit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>165</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>305</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_869</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>869</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.TriggerTransmit_Det_E_PARAM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>178</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>306</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_929</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>929</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00055.All_But_Last</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>307</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_930</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>930</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00055.Last</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>135</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>308</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_931</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>931</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00055.SINGLE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>309</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_947</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>947</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00056.ASR403</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>129</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>310</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_970</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>970</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>311</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_976</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>976</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.NULLPTR_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>166</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>312</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_983</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>983</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.RxIndication_Det_E_PARAM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>179</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>313</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1006</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1006</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.Zero_Payload</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>314</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1026</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1026</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00054.Result_RDUR403</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>315</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1039</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1039</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00045.AllButFirst_ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>106</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>316</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1049</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1049</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.00085.Report_Det_Error</linksto>
          <dstversion>3</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>317</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1071</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1071</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.00085.Interrupt_Assembly</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>163</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>318</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1072</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1072</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.Check_SomeIpTp_Header.ReportRuntimeError</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>319</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1073</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1073</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.Check_SomeIpTp_Header.call_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>320</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1074</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1074</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.Check_SomeIpTp_Header.Cancel_TimeOut</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>321</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1085</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1085</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.Check_SomeIpTp_Header.ReportRuntimeError</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>322</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1114</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1114</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>323</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1115</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1115</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.00084</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>162</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>324</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1116</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1116</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00071</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>325</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1150</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1150</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00054.Result_RDUR403</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>326</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1160</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1160</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.Check_SomeIp_Header.call_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>327</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1161</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1161</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.Check_SomeIp_Header.Cancel_TimeOut</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>328</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1162</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1162</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.Check_SomeIp_Header.ReportRuntimeError</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>214</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>329</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1170</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1170</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.Check_SomeIp_Header.ReportRuntimeError</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>214</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>330</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1178</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1178</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00054.Result_RDUR403</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>331</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1193</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1193</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>332</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1214</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1214</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00076</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>99</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>333</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1217</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1217</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00073</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>96</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>334</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1222</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1222</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00074</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>97</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>335</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1228</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1228</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00075</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>336</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1233</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1233</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>337</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1234</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1234</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00022.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>338</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1249</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1249</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00017.Pdu_Length</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>339</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1259</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1259</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>340</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1260</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1260</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>341</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1274</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1274</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00017.Pdu_Length</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>342</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1281</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1281</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00017.Pdu_Length</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>343</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1357</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1357</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.SingleSegment</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>139</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>344</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1363</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1363</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.SingleSegment_Retry</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>140</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>345</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1368</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1368</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.SingleSegment</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>139</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>346</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1369</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1369</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.SingleSegment_Retry</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>140</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>347</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1370</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1370</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00009.SDU_Fitting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>146</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>348</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1418</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1418</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.FirstSegment_header</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>349</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1426</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1426</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>350</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1427</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1427</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>351</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1439</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1439</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>352</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1440</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1440</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>353</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1448</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1448</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.FirstSegment_payload</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>354</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1454</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1454</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.FirstSegment_Payload_Retry</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>355</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1459</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1459</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.FirstSegment_payload</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>356</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1460</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1460</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.FirstSegment_Payload_Retry</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>357</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1473</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1473</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>358</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1474</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1474</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>359</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1475</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1475</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00009.Message_Type_Set_Tp_Flag</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>360</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1478</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1478</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.TpHeader.BIGENDIAN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>361</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1479</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1479</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>32</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>362</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1480</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1480</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>363</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1484</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1484</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>364</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1531</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1531</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.Consecutive_or_last_Segment</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>365</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1537</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1537</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.Consecutive_or_last_Segment_Retry</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>366</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1542</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1542</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.Consecutive_or_last_Segment</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>367</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1543</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1543</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.Consecutive_or_last_Segment_Retry</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>368</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1556</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1556</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>369</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1557</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1557</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>370</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1560</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1560</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>371</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1561</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1561</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00009.Message_Type_Set_Tp_Flag</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>372</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1567</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1567</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>373</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1568</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1568</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.Consecutive_or_last_Segment_Retry</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>374</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1573</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1573</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>375</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1576</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1576</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.TpHeader.BIGENDIAN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>376</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1581</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1581</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>377</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1624</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1624</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.Consecutive_or_last_Segment</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>378</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1630</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1630</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.Consecutive_or_last_Segment_Retry</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>379</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1635</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1635</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.Consecutive_or_last_Segment</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>380</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1636</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1636</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.Consecutive_or_last_Segment_Retry</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>381</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1643</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1643</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>382</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1644</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1644</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>383</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1647</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1647</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>384</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1648</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1648</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00009.Message_Type_Set_Tp_Flag</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>385</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1654</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1654</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>386</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1655</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1655</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.Consecutive_or_last_Segment_Retry</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>387</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1660</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1660</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>388</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1661</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1661</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>389</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1664</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1664</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.TpHeader.BIGENDIAN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>390</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1668</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1668</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>391</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1703</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1703</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00055.SINGLE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>392</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1712</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1712</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00055.Last</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>135</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>393</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1722</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1722</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00055.All_But_Last</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>394</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1753</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1753</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.SWS.00083.call_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>160</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>395</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1762</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1762</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.SWS.00083.Cancel_TimeOut</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>396</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1794</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1794</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.00084</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>162</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>397</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1799</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1799</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>398</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1812</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1812</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00034.CopyRxDataForHeader</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>137</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>399</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1813</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1813</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00030.Forward_MetaData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>153</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>400</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1823</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1823</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00050.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>401</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1824</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1824</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00049.bufferSizePtr_CopyRxData</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>123</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>402</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1831</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1831</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00034.CopyRxDataForPayload</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>403</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1842</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1842</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00050.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>404</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1853</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1853</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00049.bufferSizePtr_StartOfReception</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>405</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1859</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1859</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00051.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>406</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1880</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1880</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00048.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>407</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1881</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1881</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00054.Result_RDUR403</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>408</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1900</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1900</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>409</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1901</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1901</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00030.Buffer_MetaData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>410</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1902</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1902</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00032</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>411</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1905</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1905</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00035</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>412</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1908</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1908</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00033.RxTimeout_Start</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>413</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1910</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1910</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00033.StartOfReception_Call</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>414</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1920</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1920</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00034.CopyRxDataForHeader</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>137</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>415</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1921</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1921</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00030.Forward_MetaData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>153</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>416</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1930</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1930</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00034.CopyRxDataForPayload</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>417</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1936</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1936</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>418</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1937</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1937</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>419</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1938</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1938</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00036</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>420</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1944</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1944</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00050.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>421</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1951</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1951</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00050.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>422</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1952</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1952</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00049.bufferSizePtr_CopyRxData</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>123</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>423</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1962</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1962</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00049.bufferSizePtr_StartOfReception</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>424</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1968</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1968</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00051.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>425</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1975</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1975</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00063.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>127</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>426</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_1998</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>1998</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00037</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>427</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_2003</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>2003</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00062.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>428</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_2018</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>2018</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00037</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>429</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_2025</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>2025</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00042.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>120</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>430</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_2033</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>2033</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00063.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>127</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>431</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_2040</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>2040</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>432</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_2041</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>2041</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00063.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>127</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>433</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_2044</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>2044</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00064.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>128</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>434</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_2047</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>2047</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>435</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_2051</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>2051</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00049.bufferSizePtr_CopyRxData</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>123</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>436</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_2058</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>2058</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>437</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_2066</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>2066</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>438</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_2067</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>2067</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>439</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_2068</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>2068</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00038</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>440</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_2073</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>2073</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00040.RxIndication_Call</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>441</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_2076</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>2076</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00040.RxTimeout_Cancel</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>156</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>442</internalId></specobject>
    <specobject>
      <id>src/Autosar/src/SomeIpTp.c.m4_2082</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/src/SomeIpTp.c.m4</sourcefile>
      <sourceline>2082</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00050.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>443</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/config/SomeIpTp.xdm.m4_217</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/config/SomeIpTp.xdm.m4</sourcefile>
      <sourceline>217</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.SoAd_ParametersLimitation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>444</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/config/SomeIpTp_EBParameters.xdm.m4_20</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/config/SomeIpTp_EBParameters.xdm.m4</sourcefile>
      <sourceline>20</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.SomeIpTpTxConfirmationTimeout.ECUC</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>445</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/config/SomeIpTp_Extension.xdm.m4_32</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/config/SomeIpTp_Extension.xdm.m4</sourcefile>
      <sourceline>32</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.ECUC_SomeIpTp_00006.Value_Range</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>446</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SomeIpTp_Extension.xdm.m4_59</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/config/SomeIpTp_Extension.xdm.m4</sourcefile>
      <sourceline>59</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.missing.SomeIpTpRxSduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>196</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>447</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SomeIpTp_Extension.xdm.m4_62</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/config/SomeIpTp_Extension.xdm.m4</sourcefile>
      <sourceline>62</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.Unique.SomeIpTpRxSduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>448</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SomeIpTp_Extension.xdm.m4_75</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/config/SomeIpTp_Extension.xdm.m4</sourcefile>
      <sourceline>75</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.InvalidRoutingPath.SomeIpTpRxSduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>449</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SomeIpTp_Extension.xdm.m4_80</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/config/SomeIpTp_Extension.xdm.m4</sourcefile>
      <sourceline>80</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.MultiRouting.SomeIpTpRxSduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>198</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>450</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SomeIpTp_Extension.xdm.m4_90</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/config/SomeIpTp_Extension.xdm.m4</sourcefile>
      <sourceline>90</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.Unique.SomeIpTpRxNPduHandleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>187</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>451</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SomeIpTp_Extension.xdm.m4_97</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/config/SomeIpTp_Extension.xdm.m4</sourcefile>
      <sourceline>97</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.consecutive.SomeIpTpRxNPduHandleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>186</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>452</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SomeIpTp_Extension.xdm.m4_98</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/config/SomeIpTp_Extension.xdm.m4</sourcefile>
      <sourceline>98</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.ZeroBased.SomeIpTpRxNPduHandleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>453</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SomeIpTp_Extension.xdm.m4_104</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/config/SomeIpTp_Extension.xdm.m4</sourcefile>
      <sourceline>104</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.Invalid.SomeIpTpRxNPduHandleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>454</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SomeIpTp_Extension.xdm.m4_112</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/config/SomeIpTp_Extension.xdm.m4</sourcefile>
      <sourceline>112</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.missing.SomeIpTpRxNPduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>455</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SomeIpTp_Extension.xdm.m4_115</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/config/SomeIpTp_Extension.xdm.m4</sourcefile>
      <sourceline>115</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.Unique.SomeIpTpRxNPduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>203</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>456</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SomeIpTp_Extension.xdm.m4_128</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/config/SomeIpTp_Extension.xdm.m4</sourcefile>
      <sourceline>128</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.InvalidRoutingPath.SomeIpTpRxNPduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>457</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SomeIpTp_Extension.xdm.m4_133</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/config/SomeIpTp_Extension.xdm.m4</sourcefile>
      <sourceline>133</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.MultiRouting.SomeIpTpRxNPduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>202</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>458</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SomeIpTp_Extension.xdm.m4_149</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/config/SomeIpTp_Extension.xdm.m4</sourcefile>
      <sourceline>149</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.Unique.SomeIpTpTxNSduHandleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>191</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>459</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SomeIpTp_Extension.xdm.m4_156</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/config/SomeIpTp_Extension.xdm.m4</sourcefile>
      <sourceline>156</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.consecutive.SomeIpTpTxNSduHandleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>190</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>460</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SomeIpTp_Extension.xdm.m4_157</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/config/SomeIpTp_Extension.xdm.m4</sourcefile>
      <sourceline>157</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.ZeroBased.SomeIpTpTxNSduHandleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>189</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>461</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SomeIpTp_Extension.xdm.m4_163</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/config/SomeIpTp_Extension.xdm.m4</sourcefile>
      <sourceline>163</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.Invalid.SomeIpTpTxNSduHandleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>462</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SomeIpTp_Extension.xdm.m4_171</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/config/SomeIpTp_Extension.xdm.m4</sourcefile>
      <sourceline>171</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.missing.SomeIpTpTxNSduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>204</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>463</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SomeIpTp_Extension.xdm.m4_174</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/config/SomeIpTp_Extension.xdm.m4</sourcefile>
      <sourceline>174</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.Unique.SomeIpTpTxNSduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>207</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>464</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SomeIpTp_Extension.xdm.m4_187</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/config/SomeIpTp_Extension.xdm.m4</sourcefile>
      <sourceline>187</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.InvalidRoutingPath.SomeIpTpTxNSduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>465</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SomeIpTp_Extension.xdm.m4_192</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/config/SomeIpTp_Extension.xdm.m4</sourcefile>
      <sourceline>192</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.MultiRouting.SomeIpTpTxNSduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>206</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>466</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SomeIpTp_Extension.xdm.m4_204</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/config/SomeIpTp_Extension.xdm.m4</sourcefile>
      <sourceline>204</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.Unique.SomeIpTpTxNPduHandleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>467</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SomeIpTp_Extension.xdm.m4_211</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/config/SomeIpTp_Extension.xdm.m4</sourcefile>
      <sourceline>211</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.ZeroBased.SomeIpTpTxNPduHandleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>193</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>468</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SomeIpTp_Extension.xdm.m4_212</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/config/SomeIpTp_Extension.xdm.m4</sourcefile>
      <sourceline>212</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.consecutive.SomeIpTpTxNPduHandleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>194</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>469</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SomeIpTp_Extension.xdm.m4_218</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/config/SomeIpTp_Extension.xdm.m4</sourcefile>
      <sourceline>218</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.Invalid.SomeIpTpTxNPduHandleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>192</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>470</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SomeIpTp_Extension.xdm.m4_226</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/config/SomeIpTp_Extension.xdm.m4</sourcefile>
      <sourceline>226</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.missing.SomeIpTpTxNPduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>208</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>471</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SomeIpTp_Extension.xdm.m4_229</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/config/SomeIpTp_Extension.xdm.m4</sourcefile>
      <sourceline>229</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.Unique.SomeIpTpTxNPduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>212</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>472</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SomeIpTp_Extension.xdm.m4_242</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/config/SomeIpTp_Extension.xdm.m4</sourcefile>
      <sourceline>242</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.InvalidRoutingPath.SomeIpTpTxNPduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>473</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SomeIpTp_Extension.xdm.m4_247</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/config/SomeIpTp_Extension.xdm.m4</sourcefile>
      <sourceline>247</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.MultiRouting.SomeIpTpTxNPduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>210</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>474</internalId></specobject>
    <specobject>
      <id>src/Autosar/config/SomeIpTp_Extension.xdm.m4_252</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/config/SomeIpTp_Extension.xdm.m4</sourcefile>
      <sourceline>252</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.InvalidPduLen.SomeIpTpTxNPduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>211</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>475</internalId></specobject>
  </specobjects>
    <specobjects doctype="impl">
    <specobject>
      <id>src/Autosar/generate/include/SomeIpTp_PrecompileMacros.m_33</id>
      <status>approved</status>
      <source>EB source code</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/src/Autosar/generate/include/SomeIpTp_PrecompileMacros.m</sourcefile>
      <sourceline>33</sourceline>
      <version>1</version>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>25</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>476</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_SomeIpTp_VerifyCodeStub</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/build/reqm/common_req/SomeIpTp_VerifyStub_testspec.h</sourcefile>
      <sourceline>7</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
    This test verifies that the code stub of the module is consistent with the
    implementation.
  
Test Object: 
    Relocatable post-build configuration macros generation.
  
Test Precondition: 
    Permutation [VerifyStub == true]:
      - Unit test contains its own code stub
      - Module is excluded from generation and compilation
    Permutation [VerifyStub == false]:
      - unit test excludes its own code stub
  
Test Execution: 
    01: Invoke all module APIs
    02: VP(SomeIpTp.EB.Interface.Consistency):
        Unit test compiles (implicitly tested)
  
Test Input: 
  
Test Output: 
    Test is correctly generated and compiled.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.Interface.Consistency</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>223</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>477</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SomeIpTp_ComTest_SchM</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Compile/IN/SomeIpTp_ComTest_SchM/source/application/SomeIpTp_ComTest_SchM.c</sourcefile>
      <sourceline>46</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
     This test checks that the SomeIpTp module's generator generates a
     syntactically and semantically valid basic software module
     description (BSWMD) when the generator mode "generate_swcd" is
     invoked. It further tests that the SchM exclusive area API is
     correctly generated by the RTE generator based on the SomeIpTp module's
     generated BSWMD.
  
Test Object: None.
Test Precondition: None.
Test Execution: 
    Ts5 build environment steps:
      The module configuration generator produces the BSWMD containing
      the information on the required exclusive areas.  This information
      is then used by the RTE generator to create the required SchM API
      for these exclusive areas. This implicitly verifies that the BSWMD
      is syntactically and semantically correct.  SomeIpTp's static code
      makes use of this API (and the respective #defines) thus causing
      compile/link errors if the BSWMD does not contain the correct
      information.
  
Test Input: 
    Usage of a common ASR configuration having all adjacent ASR modules
    configured.
  
Test Output: 
    Compile succeeds.
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.BSWMDGeneration_1</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>169</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.BSWMDGeneration_2</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>170</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.BSWMDGeneration_3</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>171</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>478</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>TS_GenTest_01001_Err_IDs_NotUnique</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Compile/IN/SomeIpTp_GenTest_01_InvalidConfiguration/source/application/SomeIpTp_GenTest_01_InvalidConfiguration.h</sourcefile>
      <sourceline>27</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test checks that the generator issues an error in case any of the IDs is not unique.
&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.Unique.SomeIpTpTxNPduHandleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>195</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.Unique.SomeIpTpTxNSduHandleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>191</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.Unique.SomeIpTpRxNPduHandleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>187</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>479</internalId></specobject>
    <specobject>
      <id>TS_GenTest_01002_Err_IDs_NotZeroBased</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Compile/IN/SomeIpTp_GenTest_01_InvalidConfiguration/source/application/SomeIpTp_GenTest_01_InvalidConfiguration.h</sourcefile>
      <sourceline>48</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test checks that the generator issues an error in case any of the IDs numbering doesn't
  start from zero.
&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.ZeroBased.SomeIpTpRxNPduHandleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>185</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.ZeroBased.SomeIpTpTxNSduHandleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>189</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.ZeroBased.SomeIpTpTxNPduHandleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>193</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>480</internalId></specobject>
    <specobject>
      <id>TS_GenTest_01003_Err_IDs_NotConsecutive</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Compile/IN/SomeIpTp_GenTest_01_InvalidConfiguration/source/application/SomeIpTp_GenTest_01_InvalidConfiguration.h</sourcefile>
      <sourceline>70</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test checks that the generator issues an error in case any of the IDs numbering is not
  in consecutive.
&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.consecutive.SomeIpTpRxNPduHandleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>186</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.consecutive.SomeIpTpTxNSduHandleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>190</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.consecutive.SomeIpTpTxNPduHandleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>194</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>481</internalId></specobject>
    <specobject>
      <id>TS_GenTest_01004_Err_MissingECUCRef</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Compile/IN/SomeIpTp_GenTest_01_InvalidConfiguration/source/application/SomeIpTp_GenTest_01_InvalidConfiguration.h</sourcefile>
      <sourceline>92</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test checks that the generator issues an error in case there is any missing ECUC
  reference.
&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.missing.SomeIpTpRxSduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>196</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.missing.SomeIpTpRxNPduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>200</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.missing.SomeIpTpTxNSduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>204</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.missing.SomeIpTpTxNPduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>208</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>482</internalId></specobject>
    <specobject>
      <id>TS_GenTest_01005_Err_WrongECUCRef</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Compile/IN/SomeIpTp_GenTest_01_InvalidConfiguration/source/application/SomeIpTp_GenTest_01_InvalidConfiguration.h</sourcefile>
      <sourceline>115</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test checks that the generator issues an error in case there is any wrong ECUC
  reference.
&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.InvalidRoutingPath.SomeIpTpRxSduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.InvalidRoutingPath.SomeIpTpRxNPduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.InvalidRoutingPath.SomeIpTpTxNSduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.InvalidRoutingPath.SomeIpTpTxNPduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>483</internalId></specobject>
    <specobject>
      <id>TS_GenTest_01006_Err_MaxHandleIDLength</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Compile/IN/SomeIpTp_GenTest_01_InvalidConfiguration/source/application/SomeIpTp_GenTest_01_InvalidConfiguration.h</sourcefile>
      <sourceline>138</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test checks that the generator issues an error in case there is a Handle ID
  value out of range.
&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.Invalid.SomeIpTpRxNPduHandleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>184</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.Invalid.SomeIpTpTxNSduHandleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>188</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.Invalid.SomeIpTpTxNPduHandleId</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>192</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>484</internalId></specobject>
    <specobject>
      <id>TS_GenTest_01007_Err_ECUCRef_NotUnique</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Compile/IN/SomeIpTp_GenTest_01_InvalidConfiguration/source/application/SomeIpTp_GenTest_01_InvalidConfiguration.h</sourcefile>
      <sourceline>160</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test checks that the generator issues an error in case the ECUCRef are not unique
&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.Unique.SomeIpTpRxSduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>199</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.Unique.SomeIpTpRxNPduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>203</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.Unique.SomeIpTpTxNSduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>207</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.Unique.SomeIpTpTxNPduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>212</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>485</internalId></specobject>
    <specobject>
      <id>TS_GenTest_01008_Err_IncorrectRouting</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Compile/IN/SomeIpTp_GenTest_01_InvalidConfiguration/source/application/SomeIpTp_GenTest_01_InvalidConfiguration.h</sourcefile>
      <sourceline>182</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test checks that the generator issues an error in case there is any wrong
  PduRouting paths
&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.InvalidRoutingPath.SomeIpTpRxSduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>197</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.InvalidRoutingPath.SomeIpTpRxNPduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>201</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.InvalidRoutingPath.SomeIpTpTxNSduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>205</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.InvalidRoutingPath.SomeIpTpTxNPduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>209</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>486</internalId></specobject>
    <specobject>
      <id>TS_GenTest_01009_Err_MultiRouting</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Compile/IN/SomeIpTp_GenTest_01_InvalidConfiguration/source/application/SomeIpTp_GenTest_01_InvalidConfiguration.h</sourcefile>
      <sourceline>205</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test checks that the generator issues an error in case there is any wrong
  PduRouting paths
&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.MultiRouting.SomeIpTpRxSduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>198</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.MultiRouting.SomeIpTpRxNPduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>202</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.MultiRouting.SomeIpTpTxNSduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>206</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.MultiRouting.SomeIpTpTxNPduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>210</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>487</internalId></specobject>
    <specobject>
      <id>TS_GenTest_01010_Err_IncorrectPDULength</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Compile/IN/SomeIpTp_GenTest_01_InvalidConfiguration/source/application/SomeIpTp_GenTest_01_InvalidConfiguration.h</sourcefile>
      <sourceline>228</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test checks that the generator issues an error in case of wrong 
&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.InvalidPduLen.SomeIpTpTxNPduRef</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>211</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>488</internalId></specobject>
    <specobject>
      <id>TS_GenTest_01011_Err_SoAdParametersDisabled</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Compile/IN/SomeIpTp_GenTest_01_InvalidConfiguration/source/application/SomeIpTp_GenTest_01_InvalidConfiguration.h</sourcefile>
      <sourceline>247</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  This test checks that an error is generated if SoAdIfTriggerTransmit and SoAdIfTxConfirmation are disabled.
&lt;/para&gt;

Test Object: None.
Test Precondition: 

Test Execution: 

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.SoAd_ParametersLimitation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>221</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>489</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SomeIpTp_ConTest01_CheckDetReportErrorCall_00066</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_01_DevErrors/source/application/SomeIpTp_ConTest01.c</sourcefile>
      <sourceline>24</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check if the call to CheckVersionInfo with input:&amp;versionInfo equals to NULL_PTR,
  will result in a call for DetReportError with ErrorId equals to SOMEIPTP_E_PARAM_POINTER.
&lt;/para&gt;

Test Object: 
  SomeIpTp_GetVersionInfo

Test Precondition: 
  versionInfoPtr equals to NULL_PTR.
  SOMEIPTP_DEV_ERROR_DETECT = STD_ON.

Test Execution: 
  01: call SomeIpTp_GetVersionInfo.
  02: VP (SomeIpTp.SWS_SomeIpTp_00066): check if DetReportError is called with
                                              ErrorId equals to SOMEIPTP_E_PARAM_POINTER.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00066</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>86</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>490</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest01_CheckDetReportErrorCall_00067</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_01_DevErrors/source/application/SomeIpTp_ConTest01.c</sourcefile>
      <sourceline>73</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check if the call to SomeIpTp_TxConfirmation while SomeIpTp is not initialized through the call of SomeIpTp_Init,
  will result in a call for DetReportError with ErrorId equals to SOMEIPTP_E_NOTINIT.
&lt;/para&gt;

Test Object: 
  SomeIpTp_TxConfirmation

Test Precondition: 
  SomeIpTp_Init is not called.
  SOMEIPTP_DEV_ERROR_DETECT = STD_ON.

Test Execution: 
  01: call SomeIpTp_TxConfirmation with pduId=0U, result = E_OK.
  02: VP (SomeIpTp.SWS_SomeIpTp_00067): check if DetReportError is called with ErrorId equals to SOMEIPTP_E_NOTINIT.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00067</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>87</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>491</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest01_CheckDetReportErrorCall_EB_00054_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_01_DevErrors/source/application/SomeIpTp_ConTest01.c</sourcefile>
      <sourceline>120</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check if the call to SomeIpTp_TriggerTransmit while SomeIpTp is not initialized through the call of SomeIpTp_Init,
  will result in a call for DetReportError with ErrorId equals to SOMEIPTP_E_NOTINIT.
&lt;/para&gt;

Test Object: 
  SomeIpTp_TriggerTransmit

Test Precondition: 
  SomeIpTp_Init is not called.
  SOMEIPTP_DEV_ERROR_DETECT = STD_ON.

Test Execution: 
  01: call SomeIpTp_TriggerTransmit with pduId=0U, dummy pduInfo.
  02: VP (SomeIpTp.SWS_SomeIpTp_00072): check if DetReportError is called with
                                    ErrorId equals to SOMEIPTP_E_NOTINIT.
  03: SomeIpTp_TriggerTransmit returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00072</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>94</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>492</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest01_CheckDetReportErrorCall_00057</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_01_DevErrors/source/application/SomeIpTp_ConTest01.c</sourcefile>
      <sourceline>174</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check if the call to SomeIpTp_RxIndication while SomeIpTp is not initialized through the call of SomeIpTp_Init,
  will result in a call for DetReportError with ErrorId equals to SOMEIPTP_E_NOTINIT.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is not called.
  SOMEIPTP_DEV_ERROR_DETECT = STD_ON.

Test Execution: 
  01: call SomeIpTp_RxIndication with pduId=0U, dummy pduInfo.
  02: VP (SomeIpTp.SWS_SomeIpTp_00057): check if DetReportError is called with
                                    ErrorId equals to SOMEIPTP_E_NOTINIT.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00057</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>77</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>493</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest01_CheckDetReportErrorCall_EB_00048_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_01_DevErrors/source/application/SomeIpTp_ConTest01.c</sourcefile>
      <sourceline>223</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check if the call to SomeIpTp_Transmit while SomeIpTp is not initialized through the call of SomeIpTp_Init,
  will result in a call for DetReportError with ErrorId equals to SOMEIPTP_E_NOTINIT.
&lt;/para&gt;

Test Object: 
  SomeIpTp_Transmit

Test Precondition: 
  SomeIpTp_Init is not called.
  SOMEIPTP_DEV_ERROR_DETECT = STD_ON.

Test Execution: 
  01: call SomeIpTp_Transmit with pduId=0U, dummy pduInfo.
  02: VP (SomeIpTp.SWS_SomeIpTp_00073): check if DetReportError is called with
                                    ErrorId equals to SOMEIPTP_E_NOTINIT.
  03: VP (SomeIpTp.SWS_SomeIpTp_00076): SomeIpTp_Transmit returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00073</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>96</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00076</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>99</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>494</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest01_MainFunctionTxReturnIfNotInitialized</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_01_DevErrors/source/application/SomeIpTp_ConTest01.c</sourcefile>
      <sourceline>279</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that SomeIpTp_MainFunctionTx shall simply return if SomeIpTp module is not initialized.
&lt;/para&gt;

Test Object: 
  SomeIpTp_MainFunctionTx

Test Precondition: 
  SomeIpTp_Init is not called.

Test Execution: 
  01: Call SomeIpTp_Transmit with pduId = 0U, dummy pduInfo.
  02: VP (SomeIpTp.SWS_SomeIpTp_00058): Call SomeIpTp_MainFunctionTx
  03: VP (SomeIpTp.SWS_SomeIpTp_00059): Check that PduR_SomeIpTpTransmit hasn't been called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00058</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00059</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>79</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>495</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest01_MainFunctionRxReturnIfNotInitialized</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_01_DevErrors/source/application/SomeIpTp_ConTest01.c</sourcefile>
      <sourceline>333</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that SomeIpTp_MainFunctionRx shall simply return if SomeIpTp module is not initialized.
&lt;/para&gt;

Test Object: 
  SomeIpTp_MainFunctionRx

Test Precondition: 
  SomeIpTp_Init is not called.

Test Execution: 
  01: Call SomeIpTp_RxIndication with pduId=0U, dummy pduInfo.
  02: VP (SomeIpTp.SWS_SomeIpTp_00069): Call SomeIpTp_MainFunctionRx
  03: VP (SomeIpTp.SWS_SomeIpTp_00070): Check that no functions has been called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00069</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>88</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00070</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>89</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>496</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest01_CheckDetReportErrorCall_EB_00049_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_01_DevErrors/source/application/SomeIpTp_ConTest01.c</sourcefile>
      <sourceline>385</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check if the call to SomeIpTp_Transmit with Invalid pduId will result in a call for
  DetReportError with ErrorId equals to SOMEIPTP_E_PARAM.
&lt;/para&gt;

Test Object: 
  SomeIpTp_Transmit

Test Precondition: 
  SomeIpTp_Init is called.
  SOMEIPTP_DEV_ERROR_DETECT = STD_ON.

Test Execution: 
  01: call SomeIpTp_Init
  02: call SomeIpTp_Transmit with pduId=100U, pduInfo.
  03: VP (SomeIpTp.SWS_SomeIpTp_00074): check if DetReportError is called with
                                    ErrorId equals to SOMEIPTP_E_PARAM.
  04: Check that SomeIpTp_Transmit returned E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00074</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>97</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>497</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest01_CheckDetReportErrorCall_EB_00050_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_01_DevErrors/source/application/SomeIpTp_ConTest01.c</sourcefile>
      <sourceline>444</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check if the call to SomeIpTp_Transmit with pduInfoPtr equals to NULL_PTR will result in a call for
  DetReportError with ErrorId equals to SOMEIPTP_E_PARAM_POINTER.
&lt;/para&gt;

Test Object: 
  SomeIpTp_Transmit

Test Precondition: 
  SomeIpTp_Init is called.
  SOMEIPTP_DEV_ERROR_DETECT = STD_ON.

Test Execution: 
  01: call SomeIpTp_Init
  02: call SomeIpTp_Transmit with pduId=0U, pduInfoPtr set to NULL_PTR.
  03: VP (SomeIpTp.SWS_SomeIpTp_00075): check if DetReportError is called with
                                    ErrorId equals to SOMEIPTP_E_PARAM_POINTER.
  04: Check that SomeIpTp_Transmit returned E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00075</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>98</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>498</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest01_CheckDetReportErrorCall_EB_NULLPTR_TriggerTransmit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_01_DevErrors/source/application/SomeIpTp_ConTest01.c</sourcefile>
      <sourceline>503</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check if the call to SomeIpTp_TriggerTransmit while SomeIpTp is called with input pduInfoPtr equals to NULL_PTR,
  will result in a call for DetReportError with ErrorId equals to SOMEIPTP_E_PARAM_POINTER.
&lt;/para&gt;

Test Object: 
  SomeIpTp_TriggerTransmit

Test Precondition: 
  SomeIpTp_Init is called.
  SOMEIPTP_DEV_ERROR_DETECT = STD_ON.

Test Execution: 
  01: call SomeIpTp_TriggerTransmit with pduId=0U, pduInfoPtr = NULL_PTR.
  02: VP (SomeIpTp.EB.NULLPTR_TriggerTransmit): check if DetReportError is called with
                                                ErrorId equals to SOMEIPTP_E_PARAM_POINTER.
  03: Check that SomeIpTp_TriggerTransmit returned E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.NULLPTR_TriggerTransmit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>165</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>499</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest01_CheckDetReportErrorCall_EB_NULLPTR_RxIndication</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_01_DevErrors/source/application/SomeIpTp_ConTest01.c</sourcefile>
      <sourceline>559</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check if the call to SomeIpTp_RxIndication while SomeIpTp is called with input PduInfoPtr is equal to NULL_PTR,
  will result in a call for DetReportError with ErrorId equals to SOMEIPTP_E_PARAM_POINTER.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  SOMEIPTP_DEV_ERROR_DETECT = STD_ON.

Test Execution: 
  01: call SomeIpTp_RxIndication with pduId=0U, pduInfoPtr = NULL_PTR.
  02: VP (SomeIpTp.EB.NULLPTR_RxIndication): check if DetReportError is called with
                                    ErrorId equals to SOMEIPTP_E_PARAM_POINTER.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.NULLPTR_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>166</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>500</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest01_CheckDetReportErrorCall_TxConfirmation_Det_E_PARAM</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_01_DevErrors/source/application/SomeIpTp_ConTest01.c</sourcefile>
      <sourceline>610</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check if the call to SomeIpTp_TxConfirmation with Invalid pduId will result in a call for
  DetReportError with ErrorId equals to SOMEIPTP_E_PARAM.
&lt;/para&gt;

Test Object: 
  SomeIpTp_TxConfirmation

Test Precondition: 
  SomeIpTp_Init is called.
  SOMEIPTP_DEV_ERROR_DETECT = STD_ON.

Test Execution: 
  01: call SomeIpTp_Init
  02: call SomeIpTp_TxConfirmation with pduId=150U, pduInfo.
  03: VP (SomeIpTp.EB.TxConfirmation_Det_E_PARAM): check if DetReportError is called with
                                                   ErrorId equals to SOMEIPTP_E_PARAM.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.TxConfirmation_Det_E_PARAM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>177</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>501</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest01_CheckDetReportErrorCall_TriggerTransmit_Det_E_PARAM</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_01_DevErrors/source/application/SomeIpTp_ConTest01.c</sourcefile>
      <sourceline>663</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check if the call to SomeIpTp_TriggerTransmit with Invalid pduId will result in a call for
  DetReportError with ErrorId equals to SOMEIPTP_E_PARAM.
&lt;/para&gt;

Test Object: 
  SomeIpTp_TriggerTransmit

Test Precondition: 
  SomeIpTp_Init is called.
  SOMEIPTP_DEV_ERROR_DETECT = STD_ON.

Test Execution: 
  01: call SomeIpTp_Init
  02: call SomeIpTp_TriggerTransmit with pduId=140U, pduInfo.
  03: VP (SomeIpTp.EB.TriggerTransmit_Det_E_PARAM): check if DetReportError is called with
                                                   ErrorId equals to SOMEIPTP_E_PARAM.
  04: Check that SomeIpTp_TriggerTransmit returned E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.TriggerTransmit_Det_E_PARAM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>178</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>502</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest01_CheckDetReportErrorCall_RxIndication_Det_E_PARAM</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_01_DevErrors/source/application/SomeIpTp_ConTest01.c</sourcefile>
      <sourceline>722</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check if the call to SomeIpTp_RxIndication with Invalid pduId will result in a call for
  DetReportError with ErrorId equals to SOMEIPTP_E_PARAM.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  SOMEIPTP_DEV_ERROR_DETECT = STD_ON.

Test Execution: 
  01: call SomeIpTp_Init
  02: call SomeIpTp_RxIndication with pduId=130U, pduInfo.
  03: VP (SomeIpTp.EB.RxIndication_Det_E_PARAM): check if DetReportError is called with
                                                   ErrorId equals to SOMEIPTP_E_PARAM.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.RxIndication_Det_E_PARAM</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>179</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>503</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest01_CheckDetReportErrorCall_DummyFunctions</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_01_DevErrors/source/application/SomeIpTp_ConTest01.c</sourcefile>
      <sourceline>776</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that all dummy functions from PduR return DET errors.
&lt;/para&gt;

Test Object: 
  SomeIpTp_PduRIfTransmit
  SomeIpTp_PduRTpTxConfirmation
  SomeIpTp_PduRTpCopyTxData
  SomeIpTp_PduRTpStartOfReception
  SomeIpTp_PduRTpCopyRxData
  SomeIpTp_PduRTpRxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  SOMEIPTP_DEV_ERROR_DETECT = STD_ON.

Test Execution: 
  01: Call SomeIpTp_PduRIfTransmit().
  02: VP (SomeIpTp.EB.DummyFunctions.PduR): check if DetReportError is called with
                                    ErrorId equals to SOMEIPTP_E_INVALID_CALL.
  03: Call SomeIpTp_PduRTpTxConfirmation().
  04: VP (SomeIpTp.EB.DummyFunctions.PduR): check if DetReportError is called with
                                    ErrorId equals to SOMEIPTP_E_INVALID_CALL.
  05: Call SomeIpTp_PduRTpCopyTxData().
  06: VP (SomeIpTp.EB.DummyFunctions.PduR): check if DetReportError is called with
                                    ErrorId equals to SOMEIPTP_E_INVALID_CALL.
  07: Call SomeIpTp_PduRTpStartOfReception().
  08: VP (SomeIpTp.EB.DummyFunctions.PduR): check if DetReportError is called with
                                    ErrorId equals to SOMEIPTP_E_INVALID_CALL.
  09: Call SomeIpTp_PduRTpCopyRxData().
  10: VP (SomeIpTp.EB.DummyFunctions.PduR): check if DetReportError is called with
                                    ErrorId equals to SOMEIPTP_E_INVALID_CALL.
  11: Call SomeIpTp_PduRTpRxIndication().
  12: VP (SomeIpTp.EB.DummyFunctions.PduR): check if DetReportError is called with
                                    ErrorId equals to SOMEIPTP_E_INVALID_CALL.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.DummyFunctions.PduR</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>174</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>504</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SomeIpTp_ConTest02_CheckVersionInfo</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_02_GetVersionInfo/source/application/SomeIpTp_ConTest02.c.m4</sourcefile>
      <sourceline>22</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check if the call to CheckVersionInfo will return with the correct version info of SomeIpTp module.
&lt;/para&gt;

Test Object: 
  SomeIpTp_GetVersionInfo

Test Precondition: 
  versionInfo not equal to NULL_PTR

Test Execution: 
  01: call SomeIpTp_GetVersionInfo.
  02: VP (SomeIpTp.SWS_SomeIpTp_00044): check if versionInfo is filled with current module information.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00044</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>65</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.ECUC_SomeIpTp_00019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>505</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SomeIpTp_ConTest03_ReceptionOfSingleMsg_Tp_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_03_RXPath/source/application/SomeIpTp_ConTest03.c</sourcefile>
      <sourceline>26</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that when offset = 0 and More = 0 while TpFlag=1, received segment will be treated as single message.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call SomeIpTp_RxIndication with pduId=0U, pduInfo that has offset = 0, M = 0 while Tp-Flag = 1.
  03: VP(SomeIpTp.EB.00084)
      Single segment has been processed.
      Call PduR_SomeIpTpStartOfReception, PduR_SomeIpTpCopyRxData() (twice for SOME/IP header and payload),
      and SomeIpTp_RxIndication(), directly after each other providing the received indication.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00034.CopyRxDataForHeader</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>137</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00034.CopyRxDataForPayload</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.00084</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>162</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.PDULENGTHTYPE001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>506</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest03_ReceptionOfSingleMsg_Tp_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_03_RXPath/source/application/SomeIpTp_ConTest03.c</sourcefile>
      <sourceline>111</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that when TpFlag=0, received segment will be treated as single message.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call SomeIpTp_RxIndication with pduId=0U, pduInfo that has offset = 0, M = 0 while Tp-Flag = 0.
  03: VP(SomeIpTp.SWS_SomeIpTp_00031)
      Single segment has been processed.
      Call PduR_SomeIpTpStartOfReception, PduR_SomeIpTpCopyRxData (once for the whole received data),
      and SomeIpTp_RxIndication(), directly after each other providing the received indication.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.PDULENGTHTYPE001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>507</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest03_ReceptionOfMsg_ThreeSegments</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_03_RXPath/source/application/SomeIpTp_ConTest03.c</sourcefile>
      <sourceline>186</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check Rx Path handling for a message of 3 segments.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication
  SomeIpTp_MainFunctionRx

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR

Test Execution: 
  01: Call SomeIpTp_Init
      Set Tp-Flag = 1, Offset = 0, M = 1 for First segment.
  02: Call SomeIpTp_RxIndication with pduId=0U for First segment to be received.
  03: Check that PduR_SomeIpTpStartOfReception is called with correct parameters.
  04: Check that two PduR_SomeIpTpCopyRxData are called with correct parameters for the SOME/IP header and payload.
  05: Call SomeIpTp_MainFunctionRx 2 times &lt; RxTimeout.
  06: Call RxIndication for second consecutive segment to be received
  07: Check that PduR_SomeIpTpCopyRxData is called once with correct parameters for consecutive segment payload.
  08: Call SomeIpTp_MainFunctionRx 2 times &lt; RxTimeout.
  09: Call RxIndication for third last segment to be received.
  10: Check that PduR_SomeIpTpCopyRxData is called once with correct parameters for the last segment payload.
  11: Check that PduR_SomeIpTpRxIndication for the whole message is called as expected
  12: Call SomeIpTp_MainFunctionRx 20 times and get sure that no Det_ReportError called which indicates that the
      Timeout is cancelled.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00030.Buffer_MetaData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00030.Forward_MetaData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>153</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00032</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00033.StartOfReception_Call</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00034.CopyRxDataForHeader</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>137</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00034.CopyRxDataForPayload</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00035</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00036</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00037</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00038</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00040.RxIndication_Call</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00040.RxTimeout_Cancel</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>156</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.PDULENGTHTYPE001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>508</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest03_ReceptionOfTwoMsg_ThreeSegments</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_03_RXPath/source/application/SomeIpTp_ConTest03.c</sourcefile>
      <sourceline>403</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check Rx Path handling for 2 messages of 3 segments each.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication
  SomeIpTp_MainFunctionRx

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR

Test Execution: 
  01: Call SomeIpTp_Init
      Set Tp-Flag = 1, Offset = 0, M = 1 for First segment.
  02: Call SomeIpTp_RxIndication with pduId=0U and pduId=1U for First segment to be received.
  03: Check that PduR_SomeIpTpStartOfReception is called with correct parameters for pduId=0U .
  04: Check that two PduR_SomeIpTpCopyRxData are called with correct parameters for the SOME/IP header and payload
      for pduId=0U.
  05: Check that PduR_SomeIpTpStartOfReception is called with correct parameters for pduId=1U .
  06: Check that two PduR_SomeIpTpCopyRxData are called with correct parameters for the SOME/IP header and payload
      for pduId=1U.
  07: Call SomeIpTp_MainFunctionRx 3 times &lt; RxTimeout.
  08: Call RxIndication for second consecutive segment to be received for booth PDUs.
  09: Check that PduR_SomeIpTpCopyRxData is called once with correct parameters for consecutive segment payload
      for pduId=0U.
  10: Check that PduR_SomeIpTpCopyRxData is called once with correct parameters for consecutive segment payload
      for pduId=1U.
  11: Call SomeIpTp_MainFunctionRx 3 times &lt; RxTimeout.
  12: Call RxIndication for third last segment to be received for booth PDUs.
  13: Check that PduR_SomeIpTpCopyRxData is called once with correct parameters for the last segment payload
      for pduId=0U.
  14: Check that PduR_SomeIpTpRxIndication for the whole message is called as expected for pduId=0U.
  15: Check that PduR_SomeIpTpCopyRxData is called once with correct parameters for the last segment payload
      for pduId=1U.
  16: Check that PduR_SomeIpTpRxIndication for the whole message is called as expectedfor pduId=1U.
  17: Call SomeIpTp_MainFunctionRx 20 times and get sure that no Det_ReportError called which indicates that the
      Timeout is cancelled.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00026</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>47</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00027</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>48</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00028</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>49</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00030.Buffer_MetaData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00030.Forward_MetaData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>153</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00032</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>53</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00033.StartOfReception_Call</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>155</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00034.CopyRxDataForHeader</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>137</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00034.CopyRxDataForPayload</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>138</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00035</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>56</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00036</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>57</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00037</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>58</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00038</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>59</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00039</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>60</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00040.RxIndication_Call</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>157</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00040.RxTimeout_Cancel</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>156</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.PDULENGTHTYPE001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>509</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest03_MainFunction_JustReturnIfNoOngoingSession</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_03_RXPath/source/application/SomeIpTp_ConTest03.c</sourcefile>
      <sourceline>734</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  MainFunctionRx will just return if there is no ongoing session for any RxPdu.
&lt;/para&gt;

Test Object: 
  SomeIpTp_MainFunctionRx

Test Precondition: 
  SomeIpTp_Init is called.

Test Execution: 
  01: Call SomeIpTp_Init
  02 : Call MainFunctionRx while no ongoing session.
  03 : Check that MainFunctionRx just returned without calling any functions.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00069</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>88</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>510</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest03_ReceptionOfSingleMsg_ZeroPayload</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_03_RXPath/source/application/SomeIpTp_ConTest03.c</sourcefile>
      <sourceline>780</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that when TpFlag=0 and Length = 8, received segment will be treated as single message.
  Also the Offset and the More bit are not accessed
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call SomeIpTp_RxIndication with pduId=0U, pduInfo that has offset = 0, M = 0 while Tp-Flag = 0.
  03: VP(SomeIpTp.SWS_SomeIpTp_00031)
      Single segment has been processed.
      Call PduR_SomeIpTpStartOfReception, PduR_SomeIpTpCopyRxData (once for the whole received data),
      and SomeIpTp_RxIndication(), directly after each other providing the received indication.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00031</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>52</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.Zero_Payload</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>213</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>511</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest03_Transmission_Without_TxNSdu</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_03_RXPath/source/application/SomeIpTp_ConTest03.c</sourcefile>
      <sourceline>859</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
   Check that reception is not successful when SomeIpTp_Transmit() is called and no
  SomeIpTpTxNSdu is configured.
&lt;/para&gt;

Test Object: 
  SomeIpTp_Transmit()
  SomeIpTp_TriggerTransmit()
  SomeIpTp_TxConfirmation()

Test Precondition: 
  SomeIpTp_Init is called.
  No SomeIpTpTxNSdu is configured

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call SomeIpTp_Transmit().
  03 VP(): Transmit was not successful
  04: Call SomeIpTp_TriggerTransmit().
  05 VP(): Transmit was not successful
  06: Call SomeIpTp_TxConfirmation().
  07 VP(): Transmit was not successful

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.No_SomeIpTpTxNSdu_Transmit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>168</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>512</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SomeIpTp_ConTest04_CheckSingleSegmentTransmission</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_04_TXPath/source/application/SomeIpTp_ConTest04.c</sourcefile>
      <sourceline>28</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that functionality done when SomeIpTp_Transmit called, is as expected.
&lt;/para&gt;

Test Object: 
  SomeIpTp_Transmit
  SomeIpTp_MainFunctionTx
  SomeIpTp_TriggerTransmit
  SomeIpTp_TxConfirmation

Test Precondition: 
  SomeIpTp_Init is called.
  State of called TxPduId is SOMEIPTP_IDLE.
  pduInfoPtr length to be &lt; congigured Npdu length for the called TxPduId.

Test Execution: 
  01: call SomeIpTp_Init
  02: call SomeIpTp_Transmit with pduId=0, pduInfoPtr with length = configured - 2.
  03: SomeIpTp_Transmit returned with E_OK.
  04: VP (SomeIpTp.SWS_SomeIpTp_00017.call_PduR_SomeIpTpTransmit): check if PduR_SomeIpTpTransmit is called after
                                              next Main funcion call with
                                               expected NpduId, pduInfoPtr.
  05: Call SomeIpTp_TriggerTransmit() with buffer size equals to the configured Npdu length for TxPduId = 0
  06: VP (SomeIpTp.SWS_SomeIpTp_00018.SingleSegment,
          SomeIpTp.SWS_SomeIpTp_00009.SDU_Fitting): Check that PduR_SomeIpTpCopyTxData is called with
                                              SduLength = pduInfo.SduLength sent with SomeIpTp_Transmit
  07: VP (SomeIpTp.SWS_SomeIpTp_00021.PDUR403): Call SomeIpTp_TxConfirmation with result = E_OK
                                              checks that PduR_SomeIpTpTxConfirmation has been called with
                                              result E_OK as well.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00009.SDU_Fitting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>146</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00017.call_PduR_SomeIpTpTransmit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.SingleSegment</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>139</internalId></provcov>
        
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00021.PDUR403</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>130</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>513</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest04_CheckTriggerTransmitCallWithSmallerBuffer_SingleSegment</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_04_TXPath/source/application/SomeIpTp_ConTest04.c</sourcefile>
      <sourceline>136</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that functionality done when SomeIpTp_TriggerTransmit will return E_NOT_OK,
  if the provided SduLength is less than the single segment length.
&lt;/para&gt;

Test Object: 
  SomeIpTp_TriggerTransmit

Test Precondition: 
  SomeIpTp_Init is called.
  SomeIpTp_Transmit is called.
  State of called TxPduId is SOMEIPTP_IDLE.
  pduInfoPtr length to be &lt; congigured Npdu length for the called TxPduId. (For single segment transmission)

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call SomeIpTp_Transmit with pduId=0, pduInfoPtr with length = configured - 2.
      Call MainFunctionTx
  03: SomeIpTp_Transmit returned with E_OK.
  04: Call SomeIpTp_MainFunctionTx to trigger PduR_SomeIpTpTransmit.
  05: Call SomeIpTp_TriggerTransmit with pduId = 0, pduInfoPtr
      with SduLength &lt; single length at step 02.
  06: VP(SomeIpTp.SWS_SomeIpTp_00055.SINGLE): SomeIpTp_TriggerTransmit returned with E_NOT_OK.


Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00055.SINGLE</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>136</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.PDULENGTHTYPE001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>514</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest04_CheckTriggerTransmitCallWithSmallerBuffer_FirstSegment</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_04_TXPath/source/application/SomeIpTp_ConTest04.c</sourcefile>
      <sourceline>218</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that functionality done when SomeIpTp_TriggerTransmit will return E_NOT_OK,
  if the provided SduLength is less than the actual Npdu Length for First segment.
&lt;/para&gt;

Test Object: 
  SomeIpTp_TriggerTransmit

Test Precondition: 
  SomeIpTp_Init is called.
  SomeIpTp_Transmit is called.
  State of called TxPduId is SOMEIPTP_IDLE.
  pduInfoPtr length to be &gt; congigured Npdu length for the called TxPduId. (For Multi Segment transmission)

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call SomeIpTp_Transmit with pduId=0, pduInfoPtr with length = 2*configured.
      Call MainFunctionTx
  03: SomeIpTp_Transmit returned with E_OK.
  04: Call SomeIpTp_MainFunctionTx to trigger PduR_SomeIpTpTransmit.
  05: Call SomeIpTp_TriggerTransmit with pduId = 0, pduInfoPtr
      with SduLength &lt; congigured Npdu length.
  06: VP(SomeIpTp.SWS_SomeIpTp_00055.All_But_Last): SomeIpTp_TriggerTransmit returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00055.All_But_Last</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>515</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest04_CheckTriggerTransmitCallWithSmallerBuffer_ConsecutiveSegment</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_04_TXPath/source/application/SomeIpTp_ConTest04.c</sourcefile>
      <sourceline>295</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that functionality done when SomeIpTp_TriggerTransmit will return E_NOT_OK,
  if the provided SduLength is less than the actual Npdu Length for Consecutive segment.
&lt;/para&gt;

Test Object: 
  SomeIpTp_TriggerTransmit

Test Precondition: 
  SomeIpTp_Init is called.
  SomeIpTp_Transmit is called.
  State of called TxPduId is SOMEIPTP_IDLE.
  pduInfoPtr length to be &gt; congigured Npdu length for the called TxPduId. (For Multi Segment transmission)

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call SomeIpTp_Transmit with pduId=0, pduInfoPtr with length = 2*configured.
      Call MainFunctionTx
  03: SomeIpTp_Transmit returned with E_OK.
  04: Call SomeIpTp_MainFunctionTx to trigger PduR_SomeIpTpTransmit.
  05: Call SomeIpTp_TriggerTransmit with pduId = 0, pduInfoPtr
      with SduLength &gt; congigured Npdu length.
  06: Check that SomeIpTp_TriggerTransmit returned E_OK
  07: Call SomeIpTp_TxConfirmation to confirm successful transmission of the first segment.
  08: Call SomeIpTp_MainFunctionTx until SeparationTime fires.
  09: Check that PduR_SomeIpTpTransmit has been triggered.
  10: Call SomeIpTp_TriggerTransmit with pduId = 0, pduInfoPtr
      with SduLength &lt; congigured Npdu length.
  11: VP(SomeIpTp.SWS_SomeIpTp_00055.All_But_Last): SomeIpTp_TriggerTransmit returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00055.All_But_Last</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>134</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>516</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest04_CheckTriggerTransmitCallWithSmallerBuffer_LastSegment</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_04_TXPath/source/application/SomeIpTp_ConTest04.c</sourcefile>
      <sourceline>407</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that functionality done when SomeIpTp_TriggerTransmit will return E_NOT_OK,
  if the provided SduLength is less than the expected last segment Length for last segment.
&lt;/para&gt;

Test Object: 
  SomeIpTp_TriggerTransmit

Test Precondition: 
  SomeIpTp_Init is called.
  SomeIpTp_Transmit is called.
  State of called TxPduId is SOMEIPTP_IDLE.
  pduInfoPtr length to be &gt; congigured Npdu length for the called TxPduId. (For Multi Segment transmission)

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call SomeIpTp_Transmit with pduId=0, pduInfoPtr with length = configured + 20U.
      Call MainFunctionTx
  03: SomeIpTp_Transmit returned with E_OK.
  04: Call SomeIpTp_MainFunctionTx to trigger PduR_SomeIpTpTransmit.
  05: Call SomeIpTp_TriggerTransmit with pduId = 0, pduInfoPtr
      with SduLength &gt; congigured Npdu length.
  06: Check that SomeIpTp_TriggerTransmit returned E_OK
  07: Call SomeIpTp_TxConfirmation to confirm successful transmission of the first segment.
  08: Call SomeIpTp_MainFunctionTx until SeparationTime fires.
  09: Check that PduR_SomeIpTpTransmit has been triggered.
  10: Call SomeIpTp_TriggerTransmit with pduId = 0, pduInfoPtr
      with SduLength &lt; expected last segment length (including SomeIpTp header).
  11: VP(SomeIpTp.SWS_SomeIpTp_00055.Last): SomeIpTp_TriggerTransmit returned with E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00055.Last</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>135</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>517</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest04_SingleSegmentRetry</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_04_TXPath/source/application/SomeIpTp_ConTest04.c</sourcefile>
      <sourceline>516</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that retry mechanism is supported for Single segment transmission.
&lt;/para&gt;

Test Object: 
  SomeIpTp_TriggerTransmit

Test Precondition: 
  SomeIpTp_Init is called.
  State of called TxPduId is SOMEIPTP_IDLE.
  pduInfoPtr length to be &lt; congigured Npdu length for the called TxPduId.

Test Execution: 
  01: call SomeIpTp_Init
  02: call SomeIpTp_Transmit with pduId=0, pduInfoPtr with length = configured - 2.
  03: Check that SomeIpTp_Transmit returned E_OK
  04: Call SomeIpTp_MainFunctionTx in order to trigger PduR_SomeIpTpTransmit
  05: Check if PduR_SomeIpTpTransmit is called after
      next Main funcion call with expected NpduId, pduInfoPtr.
  06: Apply a loop in order to get the same single segments 3 times

  07: At First, to Call SomeIpTp_TriggerTransmit() with buffer size equals to the configured Npdu length for (TxPduId = 0)
  08: VP (SomeIpTp.SWS_SomeIpTp_00018.SingleSegment,
          SomeIpTp.SWS_SomeIpTp_00018.SingleSegment_Retry)
      Verify that PduR_SomeIpTpCopyTxData is called with correct parameters for retry each time is called.
      if it is the first time to be called for this segment
        (retryInfo = TP_CONFPENDING, 0U)
      if called again,
        (retryInfo = TP_DATARETRY, Single's segment length)
  09: At last, check that SomeIpTp_TriggerTransmit returned E_OK
  10: Call SomeIpTp_TxConfirmation with result = E_OK, After successful retrials to copy the data
  11: Check that PduR_SomeIpTpTxConfirmation has been called with
      result E_OK.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00009.SDU_Fitting</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>146</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.SingleSegment</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>139</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.SingleSegment_Retry</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>140</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>518</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest04_MultiSegmentsRetry</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_04_TXPath/source/application/SomeIpTp_ConTest04.c</sourcefile>
      <sourceline>650</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that retry mechanism is supported for Multi segments transmission.
&lt;/para&gt;

Test Object: 
  SomeIpTp_TriggerTransmit

Test Precondition: 
  SomeIpTp_Init is called.
  pduInfoPtr length to be &gt; congigured Npdu length for the called TxPduId. not multiple of expected payload.

Test Execution: 
  01: call SomeIpTp_Init
  02: call SomeIpTp_Transmit with pduId=0, pduInfoPtr with length = 155U.
           and SOME/IP header data 50,3,22,4,65,5,44,10.
  03: Check that SomeIpTp_Transmit returned E_OK
  04: Apply a loop for the transmission of the 4 segments.
  05: Call SomeIpTp_MainFunctionTx until triggering next PduR_SomeIpTpTransmit
  06: Check that PduR_SomeIpTpTransmit is called with the expected NpduId, pduInfoPtr for the current segment.
      i.e. First to be 60U
           second to be 60U
           third to be 60U
           last to be 15U
  07: Apply a loop in order to retry copying the same data 3 times for every semgnt
  08: VP(SomeIpTp.SWS_SomeIpTp_00018.FirstSegment_header):
      Verify that PduR_SomeIpTpCopyTxData for header during first segment first triggering,
      is called with the expected parameters
      i.e. retryInfoPtr = NULL_PTR
  09: VP(SomeIpTp.SWS_SomeIpTp_00018.FirstSegment_payload,
         SomeIpTp.SWS_SomeIpTp_00018.FirstSegment_Payload_Retry
         SomeIpTp.SWS_SomeIpTp_00018.Consecutive_or_last_Segment,
         SomeIpTp.SWS_SomeIpTp_00018.Consecutive_or_last_Segment_Retry)
      Verify that PduR_SomeIpTpCopyTxData is called with correct parameters for retry each time is called.
      if it is the first time to be called for a first segment
        (retryInfo = TP_CONFPENDING, 0U)
      if called again for a first segment,
        (retryInfo = TP_DATARETRY, Max Payload length)
      if it is the first time to be called for a consecutive segment
        (retryInfo = TP_DATACONF, 0U)
      if called again for a consecutive segment,
        (retryInfo = TP_DATARETRY, Max Payload length)
      if it is the first time to be called for a last segment
        (retryInfo = TP_DATACONF, 0U)
      if called again for a last segment,
        (retryInfo = TP_DATARETRY, remaining Payload length)
  10: Check that Tp-flag is set inside SOME/IP header and
      the added offset in the SOME/IP TP header are as expected.
      i.e. first segment, offset shall be 0x01
      i.e. second segment, offset shall be 0x31
      i.e. third segment, offset shall be 0x61
      i.e. last segment, offset shall be 0x90
  11: Check that SomeIpTp_TriggerTransmit returned E_OK
  12: Call SomeIpTp_TxConfirmation with result = E_OK, After successful retrials to copy the data
      per every segment but not retrial
  13: After last segment confirmation, Check that PduR_SomeIpTpTxConfirmation has been called with
      result E_OK for the whole transmission.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.FirstSegment_header</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.FirstSegment_payload</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.FirstSegment_Payload_Retry</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>143</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.Consecutive_or_last_Segment</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.Consecutive_or_last_Segment_Retry</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>145</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>519</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest04_ImmediateTriggerTransmit_SingleSegment</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_04_TXPath/source/application/SomeIpTp_ConTest04.c</sourcefile>
      <sourceline>863</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that the call of SomeIpTp_TriggerTransmit from the context of PduR_SomeIpTpTransmit
  is supported for Single segment transmission.
&lt;/para&gt;

Test Object: 
  SomeIpTp_TriggerTransmit

Test Precondition: 
  SomeIpTp_Init is called.
  State of called TxPduId is SOMEIPTP_IDLE.
  SduLength of the pduInfoPtr passed with SomeIpTp_Transmit to be less than the configured Npdu length
    for the called TxPduId.

Test Execution: 
  01: call SomeIpTp_Init
  02: call SomeIpTp_Transmit with pduId=0, pduInfoPtr with length = configured - 2.
  03: Check that SomeIpTp_Transmit returned E_OK
  04: Call SomeIpTp_MainFunctionTx in order to trigger PduR_SomeIpTpTransmit
  05: VP(SomeIpTp.Allow_TriggerTransmit_from_context_of_PduR_SomeIpTpTransmit)
      Verify that PduR_SomeIpTpCopyTxData is called.
      This means that SomeIpTp_TriggerTransmit is called from the context of PduR_SomeIpTpTransmit
  06: Check if PduR_SomeIpTpTransmit is called with expected NpduId, pduInfoPtr.
  07: Call SomeIpTp_TxConfirmation with result = E_OK, After successful retrials to copy the data
  08: Check that PduR_SomeIpTpTxConfirmation has been called with
      result E_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.Allow_TriggerTransmit_from_context_of_PduR_SomeIpTpTransmit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>520</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest04_ImmediateTriggerTransmit_MultiSegments</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_04_TXPath/source/application/SomeIpTp_ConTest04.c</sourcefile>
      <sourceline>965</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that the call of SomeIpTp_TriggerTransmit from the context of PduR_SomeIpTpTransmit
  is supported for Multi segments transmission.
&lt;/para&gt;

Test Object: 
  SomeIpTp_TriggerTransmit

Test Precondition: 
  SomeIpTp_Init is called.
  SduLength of the pduInfoPtr passed with SomeIpTp_Transmit to be greater than the configured Npdu length
    for the called TxPduId. not multiple of expected payload.

Test Execution: 
  01: call SomeIpTp_Init
  02: call SomeIpTp_Transmit with pduId=0, pduInfoPtr with length = 155U.
           and SOME/IP header data 50,3,22,4,65,5,44,10.
  03: Check that SomeIpTp_Transmit returned E_OK
  04: Apply a loop for the transmission of the 4 segments.
  05: Call SomeIpTp_MainFunctionTx until triggering next PduR_SomeIpTpTransmit
  06: VP(SomeIpTp.Allow_TriggerTransmit_from_context_of_PduR_SomeIpTpTransmit):
      Check that PduR_SomeIpTpCopyTxData is called.
      This means that SomeIpTp_TriggerTransmit is called from the context of PduR_SomeIpTpTransmit
  07: Check that PduR_SomeIpTpCopyTxData is called with correct parameters.
  08: Check that Tp-flag is set inside SOME/IP header and
      the added SOME/IP TP header is as expected.
      i.e. first segment, SOME/IP TP header shall be 0x01
      i.e. second segment, SOME/IP TP header shall be 0x31
      i.e. third segment, SOME/IP TP header shall be 0x61
      i.e. last segment, SOME/IP TP header shall be 0x90
  09: Check that PduR_SomeIpTpTransmit is called with the expected NpduId, pduInfoPtr for the current segment.
      i.e. First to be 60U
           second to be 60U
           third to be 60U
           last to be 15U
  10: Call SomeIpTp_TxConfirmation with result = E_OK, After successful retrials to copy the data
      per every segment but not retrial
  11: After last segment confirmation, Check that PduR_SomeIpTpTxConfirmation has been called with
      result E_OK for the whole transmission.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.Allow_TriggerTransmit_from_context_of_PduR_SomeIpTpTransmit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>521</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest04_Transmit_SingleSegment_In_TxConfirmation</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_04_TXPath/source/application/SomeIpTp_ConTest04.c</sourcefile>
      <sourceline>1142</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that transmission is done when SomeIpTp_Transmit called in the context of the
  PduR_SomeIpTpTxConfirmation with result set to E_OK for a single segment.
&lt;/para&gt;

Test Object: 
  SomeIpTp_MainFunctionTx
  SomeIpTp_TriggerTransmit
  SomeIpTp_TxConfirmation
  PduR_SomeIpTpTxConfirmation

Test Precondition: 
  SomeIpTp_Init is called.
  State of called TxPduId is SOMEIPTP_IDLE.
  pduInfoPtr length to be &lt; congigured Npdu length for the called TxPduId.

Test Execution: 
  01: call SomeIpTp_Init
  02: call SomeIpTp_Transmit with pduId=0, pduInfoPtr with length = configured - 2.
  03: SomeIpTp_Transmit returned with E_OK.
  04: check if PduR_SomeIpTpTransmit is called after next Main function call with expected NpduId, pduInfoPtr.
  05: Call SomeIpTp_TriggerTransmit() with buffer size equals to the configured Npdu length for TxPduId = 0
  06: Check that PduR_SomeIpTpCopyTxData is called
  07: Assign values to "TxConfirmationTransmitDataPtr" to allow the call of SomeIpTp_Transmit in the context of the
      PduR_SomeIpTpTxConfirmation.
  08: Call SomeIpTp_TxConfirmation and check that PduR_SomeIpTpTxConfirmation has been called with result E_OK as well.
  09: check if PduR_SomeIpTpTransmit is called after next Main function call with expected NpduId, pduInfoPtr.
  10: Call SomeIpTp_TriggerTransmit() with buffer size equals to the configured Npdu length for TxPduId = 0
  11: Check that PduR_SomeIpTpCopyTxData is called
  12: Assign NULL_PTR to "TxConfirmationTransmitDataPtr" to disable the call of SomeIpTp_Transmit in the context of the
      PduR_SomeIpTpTxConfirmation.
  13: Call SomeIpTp_TxConfirmation and check that PduR_SomeIpTpTxConfirmation has been called with result E_OK as well.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.AcceptTransmit.From.PduR_SomeIpTpTxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>522</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest04_Transmit_MultiSegment_In_TxConfirmation</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_04_TXPath/source/application/SomeIpTp_ConTest04.c</sourcefile>
      <sourceline>1269</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that transmission is done when SomeIpTp_Transmit called in the context of the
  PduR_SomeIpTpTxConfirmation with result set to E_OK for a Multi segment.
&lt;/para&gt;

Test Object: 
  SomeIpTp_MainFunctionTx
  SomeIpTp_TriggerTransmit
  SomeIpTp_TxConfirmation
  PduR_SomeIpTpTxConfirmation

Test Precondition: 
  SomeIpTp_Init is called.
  State of called TxPduId is SOMEIPTP_IDLE.
  pduInfoPtr length to be &lt; congigured Npdu length for the called TxPduId.

Test Execution: 
  01: call SomeIpTp_Init
  02: call SomeIpTp_Transmit with pduId=0, pduInfoPtr with length = 80.
  03: SomeIpTp_Transmit returned with E_OK.
  04: check if PduR_SomeIpTpTransmit is called after next Main function call.
  05: Call SomeIpTp_TriggerTransmit() with buffer size equals to the configured Npdu Max. length for TxPduId = 0
  06: Check that PduR_SomeIpTpCopyTxData is called twice, one for header and the other for the payload
  07: Call SomeIpTp_TxConfirmation to confirm the sending of the first segment.
  08: Apply a loop for the transmission of the second segment(let the Tx time out pass) and check if PduR_SomeIpTpTransmit is called.
  09: Call SomeIpTp_TriggerTransmit() with buffer size equals to the last Npdu length for TxPduId = 0
  10: Check that PduR_SomeIpTpCopyTxData is called.
  11: Assign values to "TxConfirmationTransmitDataPtr" to allow the call of SomeIpTp_Transmit in the context of the
      PduR_SomeIpTpTxConfirmation.
  12: Call SomeIpTp_TxConfirmation and check that PduR_SomeIpTpTxConfirmation has been called with result E_OK as well.
  13: check if PduR_SomeIpTpTransmit is called after next Main function call, which indicate that a transmission request was done in
      the PduR_SomeIpTpTxConfirmation context.
  14: Call SomeIpTp_TriggerTransmit() with buffer size equals to the configured Npdu Max. length for TxPduId = 0.
  15: Check that PduR_SomeIpTpCopyTxData is called twice, one for header and the other for the payload.
  16: Call SomeIpTp_TxConfirmation to confirm the sending of the first segment.
  17: Apply a loop for the transmission of the second segment(let the Tx time out pass) and check if PduR_SomeIpTpTransmit is called.
  18: Call SomeIpTp_TriggerTransmit() with buffer size equals to the last Npdu length for TxPduId = 0.
  19: Check that PduR_SomeIpTpCopyTxData is called.
  20: Assign NULL_PTR to "TxConfirmationTransmitDataPtr" to disable the call of SomeIpTp_Transmit in the context of the
      PduR_SomeIpTpTxConfirmation.
  21: Call SomeIpTp_TxConfirmation and check that PduR_SomeIpTpTxConfirmation has been called with result E_OK as well.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.AcceptTransmit.From.PduR_SomeIpTpTxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>523</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest04_Transmit_MultiSegment_NoSeparationTime</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_04_TXPath/source/application/SomeIpTp_ConTest04.c</sourcefile>
      <sourceline>1455</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that transmission is done for a Multi segment while having SomeIpTpNPduSeparationTime
  set to Zero.
&lt;/para&gt;

Test Object: 
  SomeIpTp_MainFunctionTx
  SomeIpTp_TriggerTransmit
  SomeIpTp_TxConfirmation

Test Precondition: 
  SomeIpTp_Init is called.
  State of called TxPduId is SOMEIPTP_IDLE.
  SomeIpTpNPduSeparationTime is configured to zero

Test Execution: 
  01: call SomeIpTp_Init
  02: call SomeIpTp_Transmit with pduId=0, pduInfoPtr with length = 80.
  03: SomeIpTp_Transmit returned with E_OK.
  04: check if PduR_SomeIpTpTransmit is called after next Main function call.
  05: Call SomeIpTp_TriggerTransmit() with buffer size equals to the configured Npdu Max. length for TxPduId = 0
  06: Check that PduR_SomeIpTpCopyTxData is called twice, one for header and the other for the payload
  07: Call SomeIpTp_TxConfirmation to confirm the sending of the first segment.
  08: Call the mainfunction once and check if PduR_SomeIpTpTransmit is called, this will indicate that there is no separation time.
  09: Call SomeIpTp_TriggerTransmit() with buffer size equals to the last Npdu length for TxPduId = 0
  10: Check that PduR_SomeIpTpCopyTxData is called.
  12: Call SomeIpTp_TxConfirmation and check that PduR_SomeIpTpTxConfirmation has been called with result E_OK as well.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.ECUC_SomeIpTp_00006.Value_Range</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>158</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>524</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest04_TwoMessages_MultiSegments</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_04_TXPath/source/application/SomeIpTp_ConTest04.c</sourcefile>
      <sourceline>1566</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that the simultaneous transmission of two messages from two different channels is done correctly.
&lt;/para&gt;

Test Object: 
  SomeIpTp_TriggerTransmit

Test Precondition: 
  SomeIpTp_Init is called.
  SduLength of the pduInfoPtr passed with SomeIpTp_Transmit to be greater than the configured Npdu length
    for the called TxPduId. not multiple of expected payload.

Test Execution: 
  01: call SomeIpTp_Init
  02: call SomeIpTp_Transmit with pduId=0, pduInfoPtr with length = 155U.
  03: Check that SomeIpTp_Transmit returned E_OK
  04: call SomeIpTp_Transmit with pduId=2, pduInfoPtr with length = 155U.
  05: Check that SomeIpTp_Transmit returned E_OK
  06: Apply a loop for the transmission of the 4 segments of the two PDUs.
  07: Call SomeIpTp_MainFunctionTx until the separation time is gone and PduR_SomeIpTpTransmit is
      Triggered.
  08: Check that PduR_SomeIpTpTransmit is called with the expected NpduId, pduInfoPtr for the current segment.
      i.e. First to be 60U
           second to be 60U
           third to be 60U
           last to be 15U
  09: Call SomeIpTp_TriggerTransmit with pduId=0.
  10: Check that SomeIpTp_TriggerTransmit returned E_OK.
  11: Check that PduR_SomeIpTpCopyTxData is called with correct parameters for the header copy.
  12: Check that PduR_SomeIpTpCopyTxData is called with correct parameters for the payload copy.
  13: Call SomeIpTp_TriggerTransmit with pduId=2.
  14: Check that SomeIpTp_TriggerTransmit returned E_OK.
  15: Check that PduR_SomeIpTpCopyTxData is called with correct parameters for the header copy.
  16: Check that PduR_SomeIpTpCopyTxData is called with correct parameters for the payload copy.
  17: Check that header values is OK for pduId = 0, also check Tp-flag is set inside SOME/IP header and
      the added SOME/IP TP header is as expected.
      i.e. first segment, SOME/IP TP header shall be 0x01
      i.e. second segment, SOME/IP TP header shall be 0x31
      i.e. third segment, SOME/IP TP header shall be 0x61
      i.e. last segment, SOME/IP TP header shall be 0x90
  18: Check that header values is OK for pduId = 0, also check Tp-flag is set inside SOME/IP header and
      the added SOME/IP TP header is as expected.
      i.e. first segment, SOME/IP TP header shall be 0x01
      i.e. second segment, SOME/IP TP header shall be 0x31
      i.e. third segment, SOME/IP TP header shall be 0x61
      i.e. last segment, SOME/IP TP header shall be 0x90
  19: Call SomeIpTp_TxConfirmation for pduId=0 &amp; pduId=2 with result = E_OK.
  20: After last segment confirmation, Check that PduR_SomeIpTpTxConfirmation has been called for pduId=0 with
      result E_OK for the whole transmission.
  21: After last segment confirmation, Check that PduR_SomeIpTpTxConfirmation has been called for pduId=0 with
      result E_OK for the whole transmission.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.Allow_TriggerTransmit_from_context_of_PduR_SomeIpTpTransmit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>176</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>525</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest04_Reception_Without_RxNSdu</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_04_TXPath/source/application/SomeIpTp_ConTest04.c</sourcefile>
      <sourceline>1866</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that reception is not successful when SomeIpTp_RxIndication() is called and no
  SomeIpTpRxNSdu is configured.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  No SomeIpTpRxNSdu is configured

Test Execution: 
  01: Call SomeIpTp_Init()
  02: Call SomeIpTp_RxIndication().
  03 VP(): Reception was not successful (PduR_SomeIpTpStartOfReception() not called)

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.No_SomeIpTpRxNSdu_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>167</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>526</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SomeIpTp_ConTest05_ReceptionOfSingleMsg_WhileOngoingProcess_TPFLAG_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_05_RuntimeErrorsRx/source/application/SomeIpTp_ConTest05.c</sourcefile>
      <sourceline>26</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that when Single message received while ongoing session, the ongoing session shall be interrupted and a call to
  Det_ReportRuntimeError with runtime error: SOMEIPTP_E_INCONSISTENT_SEQUENCE shall be called, In case the PDU have the TP-Flag set to 1,
  More bit = 0, offset = 0.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call RxIndication for First segment to be received with pduId=0U, pduInfo that has offset = 0, M = 1 while Tp-Flag = 1.
  03: Check that PduR_SomeIpTpStartOfReception for first segment is called.
  04: Check that PduR_SomeIpTpCopyRxData for first segment is called twice for SOME/IP header and payload.
  05: Call RxIndication for a single segment to be received.
  06: PduR_SomeIpTpRxIndication is called with result = E_NOT_OK.
  07: Det_ReportRuntimeError is called with ErrorId = SOMEIPTP_E_INCONSISTENT_SEQUENCE.
  08: Single message is received correctly in a new session.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00054.Result_RDUR403</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.00085.Interrupt_Assembly</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>163</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.00085.Report_Det_Error</linksto>
          <dstversion>3</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>164</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00071</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>93</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.SWS.00083.call_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>160</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>527</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest05_ReceptionOfSingleMsg_WhileOngoingProcess_TPFLAG_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_05_RuntimeErrorsRx/source/application/SomeIpTp_ConTest05.c</sourcefile>
      <sourceline>165</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that when Single message received while ongoing session, the ongoing session shall be interrupted and a call to
  Det_ReportRuntimeError with runtime error: SOMEIPTP_E_MESSAGE_TYPE shall be called, In case the PDU have the TP-Flag set to 0.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call RxIndication for First segment to be received with pduId=0U, pduInfo that has offset = 0, M = 1 while Tp-Flag = 1.
  03: Check that PduR_SomeIpTpStartOfReception for first segment is called.
  04: Check that PduR_SomeIpTpCopyRxData for first segment is called twice for SOME/IP header and payload.
  05: Call RxIndication for a single segment to be received.
  06: PduR_SomeIpTpRxIndication is called with result = E_NOT_OK.
  07: Det_ReportRuntimeError is called with ErrorId = SOMEIPTP_E_MESSAGE_TYPE.
  08: Single message is received correctly in a new session.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00045.AllButFirst_ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>106</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00054.Result_RDUR403</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.00085.Interrupt_Assembly</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>163</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.SWS.00083.call_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>160</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>528</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest05_ReceptionOfSingleMsg_StartOfReception_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_05_RuntimeErrorsRx/source/application/SomeIpTp_ConTest05.c</sourcefile>
      <sourceline>298</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  If PduR_SomeIpTpStartOfReception returned something else than BUFREQ_OK while processing Single segment,
  Det_ReportRuntimeError with runtime error: SOMEIPTP_E_ASSEMBLY_INTERRUPT shall be called.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call RxIndication for Single segment to be received with pduId=0U, pduInfo that has offset = 0, M = 0 while Tp-Flag = 0.
  03 : Check that PduR_SomeIpTpStartOfReception for Single segment is called and returned BUFREQ_E_BUSY.
  04: Det_ReportRuntimeError is called with ErrorId = SOMEIPTP_E_ASSEMBLY_INTERRUPT.
  05: Call SomeIpTp_MainFunctionRx 20 times and get sure that no Det_ReportRuntimeError called which indicates that the
      Timeout is cancelled.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00051.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.SWS.00083.Cancel_TimeOut</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>529</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest05_ReceptionOfSingleMsg_StartOfReception_AvailBuff_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_05_RuntimeErrorsRx/source/application/SomeIpTp_ConTest05.c</sourcefile>
      <sourceline>388</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  If PduR_SomeIpTpStartOfReception returned AvailBufLength &lt; (received Payload + SomeIpTp Header)
  while processing Single segment, Det_ReportRuntimeError with runtime error: SOMEIPTP_E_ASSEMBLY_INTERRUPT
  shall be called.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call RxIndication for Single segment to be received with pduId=0U, pduInfo that has offset = 0, M = 0 while Tp-Flag = 0.
  03 Check that PduR_SomeIpTpStartOfReception for first segment returns BUFREQ_OK.
     Check that PduR_SomeIpTpStartOfReception returns AvailBufLength &lt; Received length "60U".
  04: PduR_SomeIpTpRxIndication is called with result = E_NOT_OK.
  05: Det_ReportRuntimeError is called with ErrorId = SOMEIPTP_E_ASSEMBLY_INTERRUPT.
  06: Call SomeIpTp_MainFunctionRx 20 times and get sure that no Det_ReportRuntimeError called which indicates that the
      Timeout is cancelled.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00049.bufferSizePtr_StartOfReception</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>530</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest05_ReceptionOfSingleMsg_Tp_0_CopyRxData_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_05_RuntimeErrorsRx/source/application/SomeIpTp_ConTest05.c</sourcefile>
      <sourceline>486</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  If PduR_SomeIpTpCopyRxData returned something else than BUFREQ_OK
  while processing Single segment with Tp-Flag set to '0',
  Det_ReportRuntimeError with runtime error: SOMEIPTP_E_ASSEMBLY_INTERRUPT shall be called.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call RxIndication for Single segment to be received with pduId=0U, pduInfo that has Tp-Flag = 0.
  03 : Check that PduR_SomeIpTpStartOfReception for Single segment is called and returned BUFREQ_OK.
  04 : Check that PduR_SomeIpTpCopyRxData for the whole single segment is called and returned BUFREQ_E_BUSY.
  05: PduR_SomeIpTpRxIndication is called with result = E_NOT_OK.
  06: Det_ReportRuntimeError is called with ErrorId = SOMEIPTP_E_ASSEMBLY_INTERRUPT.
  07: Call SomeIpTp_MainFunctionRx 20 times and get sure that no Det_ReportRuntimeError called which indicates that the
      Timeout is cancelled.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00050.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.SWS.00083.Cancel_TimeOut</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>531</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest05_ReceptionOfSingleMsg_Tp_1_CopyRxData_Header_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_05_RuntimeErrorsRx/source/application/SomeIpTp_ConTest05.c</sourcefile>
      <sourceline>593</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  If PduR_SomeIpTpCopyRxData for SOME/IP header returned something else than BUFREQ_OK
  while processing Single segment with Tp-Flag set to '1',
  Det_ReportRuntimeError with runtime error: SOMEIPTP_E_ASSEMBLY_INTERRUPT shall be called.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call RxIndication for Single segment to be received with pduId=0U, pduInfo that has offset = 0, M = 0 while Tp-Flag = 1.
  03 : Check that PduR_SomeIpTpStartOfReception for Single segment is called and returned BUFREQ_OK.
  04 : Check that PduR_SomeIpTpCopyRxData for Single segment is called for SOME/IP header and returned BUFREQ_E_BUSY.
  05: PduR_SomeIpTpRxIndication is called with result = E_NOT_OK.
  06: Det_ReportRuntimeError is called with ErrorId = SOMEIPTP_E_ASSEMBLY_INTERRUPT.
  07: Call SomeIpTp_MainFunctionRx 20 times and get sure that no Det_ReportRuntimeError called which indicates that the
      Timeout is cancelled.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00050.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.SWS.00083.Cancel_TimeOut</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>532</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest05_ReceptionOfSingleMsg_Tp_1_CopyRxData_Payload_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_05_RuntimeErrorsRx/source/application/SomeIpTp_ConTest05.c</sourcefile>
      <sourceline>700</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  If PduR_SomeIpTpCopyRxData for received payload returned something else than BUFREQ_OK
  while processing Single segment with Tp-Flag set to '1',
  Det_ReportRuntimeError with runtime error: SOMEIPTP_E_ASSEMBLY_INTERRUPT shall be called.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call RxIndication for Single segment to be received with pduId=0U, pduInfo that has offset = 0, M = 0 while Tp-Flag = 1.
  03 : Check that PduR_SomeIpTpStartOfReception for Single segment is called and returned BUFREQ_OK.
  04 : Check that PduR_SomeIpTpCopyRxData for Single segment's SOME/IP header is called and returned BUFREQ_OK.
  05 : Check that PduR_SomeIpTpCopyRxData for Single segment's payload is called and returned BUFREQ_E_BUSY.
  06: PduR_SomeIpTpRxIndication is called with result = E_NOT_OK.
  07: Det_ReportRuntimeError is called with ErrorId = SOMEIPTP_E_ASSEMBLY_INTERRUPT.
  08: Call SomeIpTp_MainFunctionRx 20 times and get sure that no Det_ReportRuntimeError called which indicates that the
      Timeout is cancelled.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00050.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.SWS.00083.Cancel_TimeOut</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>533</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest05_ReceptionOfFirstSegment_WhileOngoingProcess</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_05_RuntimeErrorsRx/source/application/SomeIpTp_ConTest05.c</sourcefile>
      <sourceline>815</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that when First segment received while ongoing session, the ongoing session shall be interrupted and a call to
  Det_ReportRuntimeError with runtime error: SOMEIPTP_E_INCONSISTENT_SEQUENCE shall be called.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call RxIndication for First segment to be received with pduId=0U, pduInfo that has offset = 0, M = 1 while Tp-Flag = 1.
  03 : Check that PduR_SomeIpTpStartOfReception for first segment is called.
  04 : Check that PduR_SomeIpTpCopyRxData for first segment is called twice for SOME/IP header and payload.
  05 : Call RxIndication for another First segment to be received.
  06: PduR_SomeIpTpRxIndication is called with result = E_NOT_OK.
  07: Det_ReportRuntimeError is called with ErrorId = SOMEIPTP_E_INCONSISTENT_SEQUENCE.
  08: The new first segment is received correctly in a new session.


Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00048.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00054.Result_RDUR403</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.SWS.00083.call_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>160</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>534</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest05_ReceptionOfFirstSegment_StartOfReception_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_05_RuntimeErrorsRx/source/application/SomeIpTp_ConTest05.c</sourcefile>
      <sourceline>949</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  If PduR_SomeIpTpStartOfReception returned something else than BUFREQ_OK while processing the first segment,
  Det_ReportRuntimeError with runtime error: SOMEIPTP_E_ASSEMBLY_INTERRUPT shall be called.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call RxIndication for First segment to be received with pduId=0U, pduInfo that has offset = 0, M = 1 while Tp-Flag = 1.
  03 Check that PduR_SomeIpTpStartOfReception for first segment returns BUFREQ_E_BUSY.
  04: Det_ReportRuntimeError is called with ErrorId = SOMEIPTP_E_ASSEMBLY_INTERRUPT.
  05: Call SomeIpTp_MainFunctionRx 20 times and get sure that no Det_ReportRuntimeError called which indicates that the
      Timeout is cancelled.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00051.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>125</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>535</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest05_ReceptionOfFirstSegment_StartOfReception_AvailBuff_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_05_RuntimeErrorsRx/source/application/SomeIpTp_ConTest05.c</sourcefile>
      <sourceline>1043</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  If PduR_SomeIpTpStartOfReception for first segment returned AvailBufLength &lt; (received Payload + SomeIpTp Header),
  Det_ReportRuntimeError with runtime error: SOMEIPTP_E_ASSEMBLY_INTERRUPT shall be called.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call RxIndication for First segment to be received with pduId=0U, pduInfo that has offset = 0, M = 1 while Tp-Flag = 1.
  03 Check that PduR_SomeIpTpStartOfReception for first segment returns BUFREQ_OK.
     Check that PduR_SomeIpTpStartOfReception returns AvailBufLength &lt; Received length "60U".
  04: PduR_SomeIpTpRxIndication is called with result = E_NOT_OK.
  05: Det_ReportRuntimeError is called with ErrorId = SOMEIPTP_E_ASSEMBLY_INTERRUPT.
  06: Call SomeIpTp_MainFunctionRx 20 times and get sure that no Det_ReportRuntimeError called which indicates that the
      Timeout is cancelled.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00049.bufferSizePtr_StartOfReception</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>122</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>536</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest05_ReceptionOfFirstSegment_CopyRxData_Header_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_05_RuntimeErrorsRx/source/application/SomeIpTp_ConTest05.c</sourcefile>
      <sourceline>1144</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  If PduR_SomeIpTpCopyRxData for SOME/IP header returned something else than BUFREQ_OK while processing the first segment,
  Det_ReportRuntimeError with runtime error: SOMEIPTP_E_ASSEMBLY_INTERRUPT shall be called.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call RxIndication for First segment to be received with pduId=0U, pduInfo that has offset = 0, M = 1 while Tp-Flag = 1.
  03 Check that PduR_SomeIpTpStartOfReception for first segment returns BUFREQ_OK.
  04 Check that PduR_SomeIpTpCopyRxData call for first segment's SOME/IP header returns BUFREQ_OK.
  05 Check that PduR_SomeIpTpCopyRxData call for first segment's received payload returns BUFREQ_E_BUSY.
  06: PduR_SomeIpTpRxIndication is called with result = E_NOT_OK.
  07: Det_ReportRuntimeError is called with ErrorId = SOMEIPTP_E_ASSEMBLY_INTERRUPT.
  08: Call SomeIpTp_MainFunctionRx 20 times and get sure that no Det_ReportRuntimeError called which indicates that the
      Timeout is cancelled.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00050.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>537</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest05_ReceptionOfFirstSegment_CopyRxData_Payload_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_05_RuntimeErrorsRx/source/application/SomeIpTp_ConTest05.c</sourcefile>
      <sourceline>1259</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  If PduR_SomeIpTpCopyRxData for SOME/IP header returned something else than BUFREQ_OK while processing the first segment,
  Det_ReportRuntimeError with runtime error: SOMEIPTP_E_ASSEMBLY_INTERRUPT shall be called.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call RxIndication for First segment to be received with pduId=0U, pduInfo that has offset = 0, M = 1 while Tp-Flag = 1.
  03 Check that PduR_SomeIpTpStartOfReception for first segment returns BUFREQ_OK.
  04 Check that PduR_SomeIpTpCopyRxData call for first segment's SOME/IP header returns BUFREQ_E_BUSY.
  05: PduR_SomeIpTpRxIndication is called with result = E_NOT_OK.
  06: Det_ReportRuntimeError is called with ErrorId = SOMEIPTP_E_ASSEMBLY_INTERRUPT.
  07: Call SomeIpTp_MainFunctionRx 20 times and get sure that no Det_ReportRuntimeError called which indicates that the
      Timeout is cancelled.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00050.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>538</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest05_ReceptionOfFirstSegment_PayloadNotDivisableBy16</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_05_RuntimeErrorsRx/source/application/SomeIpTp_ConTest05.c</sourcefile>
      <sourceline>1366</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  If the recieved Payload is not divisable by 16 in first segment,
  Det_ReportRuntimeError with runtime error: SOMEIPTP_E_ASSEMBLY_INTERRUPT shall be called.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call RxIndication for First segment to be received with pduId=0U, pduInfo.SduLength = 70 (payload = 58 not divisable)
                                                              pduInfo that has offset = 0, M = 1 while Tp-Flag = 1.
  03: Det_ReportRuntimeError is called with ErrorId = SOMEIPTP_E_ASSEMBLY_INTERRUPT.
  04: Call SomeIpTp_MainFunctionRx 20 times and get sure that no Det_ReportRuntimeError called which indicates that the
      Timeout is cancelled.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00063.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>127</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>539</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest05_ReceptionOfFirstSegment_WhileOngoingProcess_PayloadNotDivBy16</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_05_RuntimeErrorsRx/source/application/SomeIpTp_ConTest05.c</sourcefile>
      <sourceline>1456</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that when First segment received while ongoing session, the ongoing session shall be interrupted and a call to
  Det_ReportRuntimeError with runtime error: SOMEIPTP_E_INCONSISTENT_SEQUENCE shall be called.
  the new received first segment have Payload not divisable by 16, Det_ReportRuntimeError with
  runtime error: SOMEIPTP_E_ASSEMBLY_INTERRUPT shall be called.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call RxIndication for First segment to be received with pduId=0U, pduInfo that has offset = 0, M = 1 while Tp-Flag = 1.
  03 : Check that PduR_SomeIpTpStartOfReception for first segment is called.
  04 : Check that PduR_SomeIpTpCopyRxData for first segment is called twice for SOME/IP header and payload.
  05 : Call RxIndication for another First segment to be received with pduId=0U,
                                                                       pduInfo.SduLength = 70 (payload = 58 not divisable)
                                                                       pduInfo that has offset = 0, M = 1 while Tp-Flag = 1.
  06: PduR_SomeIpTpRxIndication is called with result = E_NOT_OK.
  07: Det_ReportRuntimeError is called with ErrorId = SOMEIPTP_E_INCONSISTENT_SEQUENCE.
  08: Det_ReportRuntimeError is called with ErrorId = SOMEIPTP_E_ASSEMBLY_INTERRUPT.
  09: Call SomeIpTp_MainFunctionRx 20 times and get sure that no Det_ReportRuntimeError
     called which indicates that the Timeout is cancelled.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00048.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>121</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00054.Result_RDUR403</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>114</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.SWS.00083.call_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>160</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00063.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>127</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.SWS.00083.Cancel_TimeOut</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>161</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>540</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest05_ReceptionOfConsecutiveSegment_PayloadNotDivisableBy16</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_05_RuntimeErrorsRx/source/application/SomeIpTp_ConTest05.c</sourcefile>
      <sourceline>1608</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  If the recieved Payload is not divisable by 16 in received consecutive segments except the last,
  Det_ReportRuntimeError with runtime error: SOMEIPTP_E_ASSEMBLY_INTERRUPT shall be called.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call RxIndication for First segment to be received with pduId=0U, pduInfo.SduLength = 60U
                                                              pduInfo that has offset = 0, M = 1 while Tp-Flag = 1.
  03 : Check that PduR_SomeIpTpStartOfReception is called with correct parameters.
  04 : Check that PduR_SomeIpTpCopyRxData is called twice with correct parameters for SOME/IP header and payload.
  05: Call RxIndication for Consecutive segment with payload not dividable by 16.
  06: PduR_SomeIpTpRxIndication is called with result = E_NOT_OK.
  07: Det_ReportRuntimeError is called with ErrorId = SOMEIPTP_E_ASSEMBLY_INTERRUPT.
  08: Call SomeIpTp_MainFunctionRx 20 times and get sure that no Det_ReportRuntimeError called which indicates that the
      Timeout is cancelled.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00063.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>127</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>541</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest05_ReceptionOfConsecutiveSegment_NoOngoingSession</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_05_RuntimeErrorsRx/source/application/SomeIpTp_ConTest05.c</sourcefile>
      <sourceline>1748</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  If a consecutive segment is received while there is no ongoing session
  Det_ReportRuntimeError with runtime error: SOMEIPTP_E_INCONSISTENT_SEQUENCE shall be called.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call RxIndication for Consecutive segment to be received with pduId=0U, pduInfo.SduLength = 60U
                                                              pduInfo that has offset = 3, M = 1 while Tp-Flag = 1.
  03: Det_ReportRuntimeError is called with ErrorId = SOMEIPTP_E_INCONSISTENT_SEQUENCE.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00042.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>120</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>542</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest05_ReceptionOfLastSegment_NoOngoingSession</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_05_RuntimeErrorsRx/source/application/SomeIpTp_ConTest05.c</sourcefile>
      <sourceline>1820</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  If a last segment is received while there is no ongoing session
  Det_ReportRuntimeError with runtime error: SOMEIPTP_E_INCONSISTENT_SEQUENCE shall be called.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call RxIndication for Consecutive segment to be received with pduId=0U, pduInfo.SduLength = 60U
                                                              pduInfo that has offset = 3, M = 0 while Tp-Flag = 1.
  03: Det_ReportRuntimeError is called with ErrorId = SOMEIPTP_E_INCONSISTENT_SEQUENCE.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00042.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>120</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>543</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest05_ReceptionOfConsecutiveSegment_InconsistentHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_05_RuntimeErrorsRx/source/application/SomeIpTp_ConTest05.c</sourcefile>
      <sourceline>1892</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  If a consecutive segment is received with header different than that received at first segment,
  Det_ReportRuntimeError with runtime error: SOMEIPTP_E_INCONSISTENT_HEADER shall be called.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call RxIndication for First segment to be received with pduId=0U, pduInfo.SduLength = 60U
                                                              pduInfo that has offset = 0, M = 1 while Tp-Flag = 1.
  03 : Check that PduR_SomeIpTpStartOfReception is called with correct parameters.
  04 : Check that PduR_SomeIpTpCopyRxData is called twice with correct parameters for SOME/IP header and payload.
  05: Call RxIndication for Consecutive segment with Inconsistent Header.
  06: PduR_SomeIpTpRxIndication is called with result = E_NOT_OK.
  07: Det_ReportRuntimeError is called with ErrorId = SOMEIPTP_E_INCONSISTENT_HEADER.
  08: Call SomeIpTp_MainFunctionRx 20 times and get sure that no Det_ReportRuntimeError called which indicates that the
      Timeout is cancelled.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00062.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00030.Buffer_MetaData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>544</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest05_ReceptionOfLastSegment_InconsistentHeader</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_05_RuntimeErrorsRx/source/application/SomeIpTp_ConTest05.c</sourcefile>
      <sourceline>2036</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  If a last segment is received with header different than that received at first segment,
  Det_ReportRuntimeError with runtime error: SOMEIPTP_E_INCONSISTENT_HEADER shall be called.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call RxIndication for First segment to be received with pduId=0U, pduInfo.SduLength = 60U
                                                              pduInfo that has offset = 0, M = 1 while Tp-Flag = 1.
  03 : Check that PduR_SomeIpTpStartOfReception is called with correct parameters.
  04 : Check that PduR_SomeIpTpCopyRxData is called twice with correct parameters for SOME/IP header and payload.
  05: Call RxIndication for last segment with Inconsistent Header.
  06: PduR_SomeIpTpRxIndication is called with result = E_NOT_OK.
  07: Det_ReportRuntimeError is called with ErrorId = SOMEIPTP_E_INCONSISTENT_HEADER.
  08: Call SomeIpTp_MainFunctionRx 20 times and get sure that no Det_ReportRuntimeError called which indicates that the
      Timeout is cancelled.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00062.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>126</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00030.Buffer_MetaData</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>152</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>545</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest05_ReceptionOfConsecutiveSegment_UnexpectedOffset</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_05_RuntimeErrorsRx/source/application/SomeIpTp_ConTest05.c</sourcefile>
      <sourceline>2180</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  If a consecutive segment is received with offset different than expected to be,
  Det_ReportRuntimeError with runtime error: SOMEIPTP_E_INCONSISTENT_SEQUENCE shall be called.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call RxIndication for First segment to be received with pduId=0U, pduInfo.SduLength = 60U
                                                              pduInfo that has offset = 0, M = 1 while Tp-Flag = 1.
  03 : Check that PduR_SomeIpTpStartOfReception is called with correct parameters.
  04 : Check that PduR_SomeIpTpCopyRxData is called twice with correct parameters for SOME/IP header and payload.
  05: Call RxIndication for Consecutive segment with wrong offset.
  06: PduR_SomeIpTpRxIndication is called with result = E_NOT_OK.
  07: Det_ReportRuntimeError is called with ErrorId = SOMEIPTP_E_INCONSISTENT_SEQUENCE.
  08: Call SomeIpTp_MainFunctionRx 20 times and get sure that no Det_ReportRuntimeError called which indicates that the
      Timeout is cancelled.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00064.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>128</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>546</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest05_ReceptionOfLastSegment_UnexpectedOffset</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_05_RuntimeErrorsRx/source/application/SomeIpTp_ConTest05.c</sourcefile>
      <sourceline>2319</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  If a last segment is received with offset different than expected to be,
  Det_ReportRuntimeError with runtime error: SOMEIPTP_E_INCONSISTENT_SEQUENCE shall be called.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call RxIndication for First segment to be received with pduId=0U, pduInfo.SduLength = 60U
                                                              pduInfo that has offset = 0, M = 1 while Tp-Flag = 1.
  03 : Check that PduR_SomeIpTpStartOfReception is called with correct parameters.
  04 : Check that PduR_SomeIpTpCopyRxData is called twice with correct parameters for SOME/IP header and payload.
  05: Call RxIndication for last segment with Inconsistent Sequence.
  06: PduR_SomeIpTpRxIndication is called with result = E_NOT_OK.
  07: Det_ReportRuntimeError is called with ErrorId = SOMEIPTP_E_INCONSISTENT_SEQUENCE.
  08: Call SomeIpTp_MainFunctionRx 20 times and get sure that no Det_ReportRuntimeError called which indicates that the
      Timeout is cancelled.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00064.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>128</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>547</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest05_ReceptionOfConsecutiveSegment_AvailBuffLength_Insufficient</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_05_RuntimeErrorsRx/source/application/SomeIpTp_ConTest05.c</sourcefile>
      <sourceline>2458</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  If a consecutive segment is received with payload &gt; AvailBufLength from previous call of PduR_SomeIpTpCopyRxData,
  Det_ReportRuntimeError with runtime error: SOMEIPTP_E_ASSEMBLY_INTERRUPT shall be called.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR
  Previous call of PduR_SomeIpTpCopyRxData returns lower AvailBufLength than the next Payload lengths.

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call RxIndication for First segment to be received with pduId=0U, pduInfo.SduLength = 60U
                                                              pduInfo that has offset = 0, M = 1 while Tp-Flag = 1.
  03 : Check that PduR_SomeIpTpStartOfReception is called with correct parameters.
  04 : Check that PduR_SomeIpTpCopyRxData is called twice with correct parameters for SOME/IP header and payload.
  05: Call RxIndication for Consecutive segment with Payload length &gt; AvailBufLength.
  06: PduR_SomeIpTpRxIndication is called with result = E_NOT_OK.
  07: Det_ReportRuntimeError is called with ErrorId = SOMEIPTP_E_ASSEMBLY_INTERRUPT.
  08: Call SomeIpTp_MainFunctionRx 20 times and get sure that no Det_ReportRuntimeError called which indicates that the
      Timeout is cancelled.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00049.bufferSizePtr_CopyRxData</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>123</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>548</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest05_ReceptionOfLastSegment_AvailBuffLength_Insufficient</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_05_RuntimeErrorsRx/source/application/SomeIpTp_ConTest05.c</sourcefile>
      <sourceline>2598</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  If a last segment is received with payload &gt; AvailBufLength from previous call of PduR_SomeIpTpCopyRxData,
  Det_ReportRuntimeError with runtime error: SOMEIPTP_E_ASSEMBLY_INTERRUPT shall be called.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR
  Previous call of PduR_SomeIpTpCopyRxData returns lower AvailBufLength than the next Payload lengths.

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call RxIndication for First segment to be received with pduId=0U, pduInfo.SduLength = 60U
                                                              pduInfo that has offset = 0, M = 1 while Tp-Flag = 1.
  03 : Check that PduR_SomeIpTpStartOfReception is called with correct parameters.
  04 : Check that PduR_SomeIpTpCopyRxData is called twice with correct parameters for SOME/IP header and payload.
  05: Call RxIndication for last segment with Payload length &gt; AvailBufLength.
  06: PduR_SomeIpTpRxIndication is called with result = E_NOT_OK.
  07: Det_ReportRuntimeError is called with ErrorId = SOMEIPTP_E_ASSEMBLY_INTERRUPT.
  08: Call SomeIpTp_MainFunctionRx 20 times and get sure that no Det_ReportRuntimeError called which indicates that the
      Timeout is cancelled.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00049.bufferSizePtr_CopyRxData</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>123</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>549</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest05_ReceptionOfConsecutiveSegment_CopyRxData_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_05_RuntimeErrorsRx/source/application/SomeIpTp_ConTest05.c</sourcefile>
      <sourceline>2740</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  If a consecutive segment is received and the call of PduR_SomeIpTpCopyRxData returned value other than BUFREQ_OK for its payload,
  Det_ReportRuntimeError with runtime error: SOMEIPTP_E_ASSEMBLY_INTERRUPT shall be called.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call RxIndication for First segment to be received with pduId=0U, pduInfo.SduLength = 60U
                                                              pduInfo that has offset = 0, M = 1 while Tp-Flag = 1.
  03 : Check that PduR_SomeIpTpStartOfReception is called with correct parameters.
  04 : Check that PduR_SomeIpTpCopyRxData is called twice with correct parameters for SOME/IP header and payload.
  05: Call RxIndication for Consecutive segment.
  06 : Check that PduR_SomeIpTpCopyRxData for payload is called and returned BUFREQ_E_BUSY.
  07: PduR_SomeIpTpRxIndication is called with result = E_NOT_OK.
  08: Det_ReportRuntimeError is called with ErrorId = SOMEIPTP_E_ASSEMBLY_INTERRUPT.
  09: Call SomeIpTp_MainFunctionRx 20 times and get sure that no Det_ReportRuntimeError called which indicates that the
      Timeout is cancelled.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00050.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>550</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest05_ReceptionOfLastSegment_CopyRxData_NOK</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_05_RuntimeErrorsRx/source/application/SomeIpTp_ConTest05.c</sourcefile>
      <sourceline>2888</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  If a last segment is received and the call of PduR_SomeIpTpCopyRxData returned value other than BUFREQ_OK for its payload,
  Det_ReportRuntimeError with runtime error: SOMEIPTP_E_ASSEMBLY_INTERRUPT shall be called.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call RxIndication for First segment to be received with pduId=0U, pduInfo.SduLength = 60U
                                                              pduInfo that has offset = 0, M = 1 while Tp-Flag = 1.
  03 : Check that PduR_SomeIpTpStartOfReception is called with correct parameters.
  04 : Check that PduR_SomeIpTpCopyRxData is called twice with correct parameters for SOME/IP header and payload.
  05: Call RxIndication for last segment with Payload length &gt; AvailBufLength.
  06 : Check that PduR_SomeIpTpCopyRxData is called and returned BUFREQ_E_BUSY.
  07: PduR_SomeIpTpRxIndication is called with result = E_NOT_OK.
  08: Det_ReportRuntimeError is called with ErrorId = SOMEIPTP_E_ASSEMBLY_INTERRUPT.
  09: Call SomeIpTp_MainFunctionRx 20 times and get sure that no Det_ReportRuntimeError called which indicates that the
      Timeout is cancelled.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00050.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>124</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>551</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest05_Fired_RxTimeout</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_05_RuntimeErrorsRx/source/application/SomeIpTp_ConTest05.c</sourcefile>
      <sourceline>3036</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  If Rxtimeout counter has reached to 0 before next successful SomeIpTp_RxIndication for the next segment,
  Det_ReportRuntimeError with runtime error: SOMEIPTP_E_ASSEMBLY_INTERRUPT shall be called.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call RxIndication for First segment to be received with pduId=0U, pduInfo.SduLength = 60U
                                                              pduInfo that has offset = 0, M = 1 while Tp-Flag = 1.
  03 : Check that PduR_SomeIpTpStartOfReception is called.
  04 : Check that PduR_SomeIpTpCopyRxData is called twice for SOME/IP header and payload.
  05: Call SomeIpTp_MainFunctionRx 6 times to fire rxTimeout counter.
  06: PduR_SomeIpTpRxIndication is called with result = E_NOT_OK.
  07: Det_ReportRuntimeError is called with ErrorId = SOMEIPTP_E_ASSEMBLY_INTERRUPT.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00041.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>119</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00033.RxTimeout_Start</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>154</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>552</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest05_ZeroLengthMessage</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_05_RuntimeErrorsRx/source/application/SomeIpTp_ConTest05.c</sourcefile>
      <sourceline>3133</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that when received length is zero i.e no SomeIp header, received segment will be rejected.
  Det_ReportRuntimeError with runtime error: SOMEIPTP_E_INCONSISTENT_HEADER shall be called.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call SomeIpTp_RxIndication with pduId=0U, pdu length is Zero.
  03: VP(SomeIpTp.EB.Check_SomeIp_Header.ReportRuntimeError): message is rejected
        Det_ReportRuntimeError with runtime error: SOMEIPTP_E_INCONSISTENT_HEADER is called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.Check_SomeIp_Header.ReportRuntimeError</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>214</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>553</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest05_ZeroLengthMessage_WhileOngoing</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_05_RuntimeErrorsRx/source/application/SomeIpTp_ConTest05.c</sourcefile>
      <sourceline>3197</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that when received length is zero i.e no SomeIp header, received segment will be rejected
  and the ongoing disassembly process is cancelled also the timeout is cancelled.
  Call the API PduR_SomeIpTpRxIndication() for this PDU ID with E_NOT_OK.
  Det_ReportRuntimeError with runtime error: SOMEIPTP_E_INCONSISTENT_HEADER shall be called.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call SomeIpTp_RxIndication with pduId=0U, pduInfo that has offset = 0, M = 1 while Tp-Flag = 1.
  03: Check that PduR_SomeIpTpStartOfReception is called.
  04: Check that PduR_SomeIpTpCopyRxData is called twice for SOME/IP header and payload
  05: Call SomeIpTp_RxIndication with pduId=0U, pdu length is Zero.
  06: VP(SomeIpTp.EB.Check_SomeIp_Header.call_RxIndication): Check that PduR_SomeIpTpRxIndication is called with E_NOT_OK
  07: VP(SomeIpTp.EB.Check_SomeIp_Header.ReportRuntimeError): message is rejected
        Det_ReportRuntimeError with runtime error: SOMEIPTP_E_INCONSISTENT_HEADER is called.
  08: VP(SomeIpTp.EB.Check_SomeIp_Header.Cancel_TimeOut): Call SomeIpTp_MainFunctionRx 20 times and get sure that no Det_ReportRuntimeError
        called which indicates that the Timeout is already cancelled (was not running).

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.Check_SomeIp_Header.ReportRuntimeError</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>214</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.Check_SomeIp_Header.call_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>215</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.Check_SomeIp_Header.Cancel_TimeOut</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>216</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>554</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest05_NoSomeIpTpHeader_TPFlag1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_05_RuntimeErrorsRx/source/application/SomeIpTp_ConTest05.c</sourcefile>
      <sourceline>3311</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that when received length is 8, i.e no SomeIpTp header and Tp-Flag = 1, received segment
  will be rejected. Det_ReportRuntimeError with runtime error: SOMEIPTP_E_MISSING_SOMEIPTP_HEADER shall
  be called.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR

Test Execution: 
  01: Call SomeIpTp_Init
  02: Set the TP-Flag to 1.
  03: Call SomeIpTp_RxIndication with pduId=0U, pdu length is Zero.
  04: VP(SomeIpTp.EB.Check_SomeIpTp_Header.ReportRuntimeError): message is rejected
        Det_ReportRuntimeError with runtime error: SOMEIPTP_E_MISSING_SOMEIPTP_HEADER
        is called.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.Check_SomeIpTp_Header.ReportRuntimeError</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>555</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest05_NoSomeIpTpHeader_TPFlag1_WhileOngoing</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_05_RuntimeErrorsRx/source/application/SomeIpTp_ConTest05.c</sourcefile>
      <sourceline>3382</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that when received length is 8, i.e no SomeIpTp header and Tp-Flag = 1, received
  segment will be rejected and the ongoing disassembly process is cancelled also the timeout
  is cancelled. Call the API PduR_SomeIpTpRxIndication() for this PDU ID with E_NOT_OK.
  Det_ReportRuntimeError with runtime error: SOMEIPTP_E_MISSING_SOMEIPTP_HEADER shall be called.
&lt;/para&gt;

Test Object: 
  SomeIpTp_RxIndication

Test Precondition: 
  SomeIpTp_Init is called.
  Passed input parameter PduInfoPtr != NULL_PTR

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call SomeIpTp_RxIndication with pduId=0U, pduInfo that has offset = 0, M = 1 while Tp-Flag = 1.
  03: Check that PduR_SomeIpTpStartOfReception is called.
  04: Check that PduR_SomeIpTpCopyRxData is called twice for SOME/IP header and payload
  05: Call SomeIpTp_RxIndication with pduId=0U, pdu length is Zero.
  06: VP(SomeIpTp.EB.Check_SomeIpTp_Header.call_RxIndication): Check that PduR_SomeIpTpRxIndication is called with E_NOT_OK
  07: VP(SomeIpTp.EB.Check_SomeIpTp_Header.ReportRuntimeError): message is rejected
        Det_ReportRuntimeError with runtime error: SOMEIPTP_E_MISSING_SOMEIPTP_HEADER is called.
  08: VP(SomeIpTp.EB.Check_SomeIpTp_Header.Cancel_TimeOut): Call SomeIpTp_MainFunctionRx 20 times and get sure that no Det_ReportRuntimeError
        called which indicates that the Timeout is already cancelled (was not running).

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.Check_SomeIpTp_Header.ReportRuntimeError</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>218</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.Check_SomeIpTp_Header.call_RxIndication</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>219</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.Check_SomeIpTp_Header.Cancel_TimeOut</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>220</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>556</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SomeIpTp_ConTest06_CheckInvalidBufferLength</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_06_RuntimeErrorsTx/source/application/SomeIpTp_ConTest06.c</sourcefile>
      <sourceline>28</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that Interruption of DisAssembly process is happening when expected.
&lt;/para&gt;

Test Object: 
  SomeIpTp_TriggerTransmit

Test Precondition: 
  SomeIpTp_Init is called.

Test Execution: 
  01: call SomeIpTp_Init
  02: Call SomeIpTp_Transmit and check that it returns E_OK
  03: Call SomeIpTp_MainFunctionTx()
  04: Check that PduR_SomeIpTpTransmit has been called for the first segment
  05: Set returned buffer for next CopyTxData to be less than the payload needed to be sent after.
  06: Call SomeIpTp_TriggerTransmit.
  07: VP: SomeIpTp_TriggerTransmit() returned with E_NOT_OK.
  08: Call SomeIpTp_MainFunctionTx()
  09: VP (SomeIpTp.SWS_SomeIpTp_00024.ExpectedForAllButLast_Result_RDUR403_ReportError):
      DisAssembly shall be interrupted, Det_ReportRuntimeError is called with
      ErrorId = SOMEIPTP_E_DISASSEMBLY_INTERRUPT.
      SomeIpTp_TriggerTransmit returned with E_NOT_OK.
  10: VP (SomeIpTp.SWS_SomeIpTp_00024.ExpectedForAllButLast_Result_RDUR403_CallTxConfirmation):
      PduR_SomeIpTpTxConfirmation() is called with result set to E_NOT_OK

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00024.ExpectedForAllButLast_Result_RDUR403_ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00024.ExpectedForAllButLast_Result_RDUR403_CallTxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>557</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest06_CheckSingleSegmentTransmission_TxConfirmationTimeout</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_06_RuntimeErrorsTx/source/application/SomeIpTp_ConTest06.c</sourcefile>
      <sourceline>126</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that Interruption of DisAssembly process is happening when Tx Confirmation Timeout
  expires, for a Single Segment Transmission.
&lt;/para&gt;

Test Object: 
  SomeIpTp_Transmit
  SomeIpTp_MainFunctionTx
  SomeIpTp_TriggerTransmit
  SomeIpTp_TxConfirmation

Test Precondition: 
  SomeIpTp_Init is called.
  pduInfoPtr length to be &lt; configured Npdu length for the called TxPduId.
  TxConfirmation Timeout is configured to 0.2s

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call SomeIpTp_Transmit with pduId=0, pduInfoPtr with length = configured - 2.
  03: Check if PduR_SomeIpTpTransmit is called after next Main function call with
      expected NpduId, pduInfoPtr.
  04: Call SomeIpTp_MainFunctionTx().
  05: Call SomeIpTp_TriggerTransmit() with buffer size equals to the configured Npdu length for TxPduId = 0
  06: Check that PduR_SomeIpTpCopyTxData is called with SduLength = pduInfo.SduLength sent with SomeIpTp_Transmit
  07: Call SomeIpTp_MainFunctionTx() five times so the the Tx Confirmation Timeout expires
  08: VP (SomeIpTp.EB.SomeIpTpTxConfirmationTimeout.Monitor, SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.DET):
      Det_ReportRuntimeError is called with SOMEIPTP_SID_MAINFUNCTIONTX and SOMEIPTP_E_DISASSEMBLY_INTERRUPT
  09: VP (SomeIpTp.EB.SomeIpTpTxConfirmationTimeout.Monitor, SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.Confirmation):
      PduR_SomeIpTpTxConfirmation() is called with E_NOT_OK.


Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.SomeIpTpTxConfirmationTimeout.Monitor</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>173</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.StopAssembly</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.DET</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.Confirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.SomeIpTpTxConfirmationTimeout.ECUC</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>558</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest06_CheckMultiSegmentTransmission_TxConfirmationTimeout_First</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_06_RuntimeErrorsTx/source/application/SomeIpTp_ConTest06.c</sourcefile>
      <sourceline>239</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that Interruption of DisAssembly process is happening when Tx Confirmation Timeout
  expires, for a Multi Segment Transmission - Timeout after first npdu transmission.
&lt;/para&gt;

Test Object: 
  SomeIpTp_Transmit
  SomeIpTp_MainFunctionTx
  SomeIpTp_TriggerTransmit
  SomeIpTp_TxConfirmation

Test Precondition: 
  SomeIpTp_Init is called.
  pduInfoPtr length to be &gt; configured Npdu length for the called TxPduId, multiple of expected payload.
  TxConfirmation Timeout is configured to 0.2s

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call SomeIpTp_Transmit with pduId=0.
  03: Call return E_OK.
  04: Call SomeIpTp_MainFunctionTx(). Check if PduR_SomeIpTpTransmit is called after next Main function call with
      expected NpduId, pduInfoPtr.
  05: Call SomeIpTp_TriggerTransmit().
  06: Check that PduR_SomeIpTpCopyTxData is calledS
  07: Call SomeIpTp_MainFunctionTx() five times so the the Tx Confirmation Timeout expires
  08: VP (SomeIpTp.EB.SomeIpTpTxConfirmationTimeout.Monitor, SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.DET):
      Det_ReportRuntimeError is called with SOMEIPTP_SID_MAINFUNCTIONTX and SOMEIPTP_E_DISASSEMBLY_INTERRUPT
  09: VP (SomeIpTp.EB.SomeIpTpTxConfirmationTimeout.Monitor, SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.Confirmation):
      PduR_SomeIpTpTxConfirmation() is called with E_NOT_OK.


Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.SomeIpTpTxConfirmationTimeout.Monitor</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>173</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.StopAssembly</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.DET</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.Confirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.SomeIpTpTxConfirmationTimeout.ECUC</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>559</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest06_CheckMultiSegmentTransmission_TxConfirmationTimeout_Consecutive</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_06_RuntimeErrorsTx/source/application/SomeIpTp_ConTest06.c</sourcefile>
      <sourceline>351</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that Interruption of DisAssembly process is happening when Tx Confirmation Timeout
  expires, for a Multi Segment Transmission - Timeout after second(consecutive) npdu transmission.
&lt;/para&gt;

Test Object: 
  SomeIpTp_Transmit
  SomeIpTp_MainFunctionTx
  SomeIpTp_TriggerTransmit
  SomeIpTp_TxConfirmation

Test Precondition: 
  SomeIpTp_Init is called.
  pduInfoPtr length to be &gt; configured Npdu length for the called TxPduId, multiple of expected payload.
  TxConfirmation Timeout is configured to 0.2s

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call SomeIpTp_Transmit with pduId=0.
  03: Call return E_OK.
  04: Call SomeIpTp_MainFunctionTx(). Check if PduR_SomeIpTpTransmit is called after next Main function call with
      expected NpduId, pduInfoPtr.
  05: Call SomeIpTp_TriggerTransmit().
  06: Check that PduR_SomeIpTpCopyTxData is called
  07: Call SomeIpTp_TxConfirmation() for first message
  08: Call SomeIpTp_MainFunctionTx() three times so that the Separation time expires
  09: Check that PduR_SomeIpTpTransmit is called
  10: Call SomeIpTp_TriggerTransmit()
  11: Call SomeIpTp_MainFunctionTx() five times so the the Tx Confirmation Timeout expires
  12: VP (SomeIpTp.EB.SomeIpTpTxConfirmationTimeout.Monitor, SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.DET):
      Det_ReportRuntimeError is called with SOMEIPTP_SID_MAINFUNCTIONTX and SOMEIPTP_E_DISASSEMBLY_INTERRUPT
  13: VP (SomeIpTp.EB.SomeIpTpTxConfirmationTimeout.Monitor, SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.Confirmation):
      PduR_SomeIpTpTxConfirmation() is called with E_NOT_OK.


Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.SomeIpTpTxConfirmationTimeout.Monitor</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>173</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.StopAssembly</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.DET</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.Confirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.SomeIpTpTxConfirmationTimeout.ECUC</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>560</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest06_CheckMultiSegmentTransmission_TxConfirmationTimeout_Last</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_06_RuntimeErrorsTx/source/application/SomeIpTp_ConTest06.c</sourcefile>
      <sourceline>490</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that Interruption of DisAssembly process is happening when Tx Confirmation Timeout
  expires, for a Multi Segment Transmission - Timeout after last npdu transmission.
&lt;/para&gt;

Test Object: 
  SomeIpTp_Transmit
  SomeIpTp_MainFunctionTx
  SomeIpTp_TriggerTransmit
  SomeIpTp_TxConfirmation

Test Precondition: 
  SomeIpTp_Init is called.
  pduInfoPtr length to be &gt; configured Npdu length for the called TxPduId, multiple of expected payload.
  TxConfirmation Timeout is configured to 0.2s

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call SomeIpTp_Transmit with pduId=0.
  03: Call return E_OK.
  04: Call SomeIpTp_MainFunctionTx(). Check if PduR_SomeIpTpTransmit is called after next Main function call with
      expected NpduId, pduInfoPtr.
  05: Call SomeIpTp_TriggerTransmit().
  06: Check that PduR_SomeIpTpCopyTxData is called
  07: Call SomeIpTp_TxConfirmation() for first message
  08: Call SomeIpTp_MainFunctionTx() three times so that the Separation time expires
  09: Call SomeIpTp_TriggerTransmit() -&gt; consecutive
  10: Call SomeIpTp_TxConfirmation() for second message
  11: Call SomeIpTp_MainFunctionTx() three times so that the Separation time expires
  12: Call SomeIpTp_TriggerTransmit() -&gt; consecutive
  13: Call SomeIpTp_TxConfirmation() for third message
  14: Call SomeIpTp_MainFunctionTx() three times so that the Separation time expires
  15: Call SomeIpTp_TriggerTransmit() -&gt; last
  16: Call SomeIpTp_MainFunctionTx() five times so the the Tx Confirmation Timeout expires
  17: VP (SomeIpTp.EB.SomeIpTpTxConfirmationTimeout.Monitor, SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.DET):
      Det_ReportRuntimeError is called with SOMEIPTP_SID_MAINFUNCTIONTX and SOMEIPTP_E_DISASSEMBLY_INTERRUPT
  18: VP (SomeIpTp.EB.SomeIpTpTxConfirmationTimeout.Monitor, SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.Confirmation):
      PduR_SomeIpTpTxConfirmation() is called with E_NOT_OK.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.SomeIpTpTxConfirmationTimeout.Monitor</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>173</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.StopAssembly</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.DET</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.Confirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.SomeIpTpTxConfirmationTimeout.ECUC</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>561</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest06_CheckSingleSegmentTransmission_TxConfirmationTimeout_InterDependency</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_06_RuntimeErrorsTx/source/application/SomeIpTp_ConTest06.c</sourcefile>
      <sourceline>669</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that Interruption of DisAssembly process is happening when Tx Confirmation Timeout
  expires, for a Single Segment Transmission, on different channels.
&lt;/para&gt;

Test Object: 
  SomeIpTp_Transmit
  SomeIpTp_MainFunctionTx
  SomeIpTp_TriggerTransmit
  SomeIpTp_TxConfirmation

Test Precondition: 
  SomeIpTp_Init is called.
  pduInfoPtr length to be &lt; configured Npdu length for the called TxPduId.
  TxConfirmation Timeout is configured to 0.2s for channel 0 (NPDU 0 and 1)
  TxConfirmation Timeout is configured to 0.25s for channel 2 (NPDU 2)

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call SomeIpTp_Transmit with pduId=0,1,2, pduInfoPtr with length = configured - 2 for all NPDUs.
  03: Call SomeIpTp_MainFunctionTx(). Check if PduR_SomeIpTpTransmit is called three times after next
      Main function call.
  04: Call SomeIpTp_TriggerTransmit() with buffer size equals to the configured Npdu length for TxPduId = 0
  05: Call SomeIpTp_TxConfirmation() for NPDU with id 1
  06: Call SomeIpTp_MainFunctionTx() 5 times, TxConfirmation Timeout should expire for NPDU with id 0 and 1
      but the one with id 1 will not since TxConfirmation arrived
  07: VP (SomeIpTp.EB.SomeIpTpTxConfirmationTimeout.Monitor, SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.DET)
      Check that only one Runtime Error was reported with expected parameters
  08: VP (SomeIpTp.EB.SomeIpTpTxConfirmationTimeout.Monitor, SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.Confirmation):
      PduR_SomeIpTpTxConfirmation() is called with E_NOT_OK.

  09: Call SomeIpTp_MainFunctionTx() once, TxConfirmation Timeout should expire for NPDU with id 2
  10: VP (SomeIpTp.EB.SomeIpTpTxConfirmationTimeout.Monitor, SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.DET):
      Check that only one Runtime Error was reported with expected parameters
  11: VP (SomeIpTp.EB.SomeIpTpTxConfirmationTimeout.Monitor, SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.Confirmation):
      PduR_SomeIpTpTxConfirmation() is called with E_NOT_OK.


Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.SomeIpTpTxConfirmationTimeout.Monitor</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>173</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.StopAssembly</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.DET</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>132</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.Confirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>133</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.SomeIpTpTxConfirmationTimeout.ECUC</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>172</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>562</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest06_Check_LowerLayerTransmit_Return_NOT_OK_Single</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_06_RuntimeErrorsTx/source/application/SomeIpTp_ConTest06.c</sourcefile>
      <sourceline>827</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that Interruption of DisAssembly process is happening when Lower layer transmit PduR_SomeIpTpTransmit()
  returns E_NOT_OK while sending a single segment.
&lt;/para&gt;

Test Object: 
  SomeIpTp_Transmit
  SomeIpTp_MainFunctionTx
  SomeIpTp_TriggerTransmit
  SomeIpTp_TxConfirmation

Test Precondition: 
  SomeIpTp_Init is called.
  pduInfoPtr length to be &lt; configured Npdu length for the called TxPduId.

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call SomeIpTp_Transmit with pduId=0, pduInfoPtr with length = configured - 2.
  03: Force the next call of PduR_SomeIpTpTransmit to return E_NOT_OK
  04: Call SomeIpTp_MainFunctionTx().
  05: Check if PduR_SomeIpTpTransmit was called
  06: VP (SomeIpTp.EB.LowerLayerTransmit.NOT_OK.ReportRuntimeError)Check that DET was reported with expected parameters
  07: VP (SomeIpTp.EB.LowerLayerTransmit.NOT_OK.TxConfirmation, SomeIpTp.EB.LowerLayerTransmit.NOT_OK.Cancel)PduR_SomeIpTpTxConfirmation() is called with E_NOT_OK since PduR_SomeIpTpTransmit returned E_NOT_OK
  08: VP (SomeIpTp.EB.LowerLayerTransmit.NOT_OK.Cancel)The disassembly process for this Pdu is cancelled and can receive new requests for the same Pdu of ID = 0

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.Cancel</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.ReportRuntimeError</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.TxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>563</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest06_Check_LowerLayerTransmit_Return_NOT_OK_Single_multi_Channel</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_06_RuntimeErrorsTx/source/application/SomeIpTp_ConTest06.c</sourcefile>
      <sourceline>917</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that Interruption of DisAssembly process is happening when Lower layer transmit PduR_SomeIpTpTransmit()
  returns E_NOT_OK while sending a single segment, and get sure that other PDUs are not affected.
&lt;/para&gt;

Test Object: 
  SomeIpTp_Transmit
  SomeIpTp_MainFunctionTx
  SomeIpTp_TriggerTransmit
  SomeIpTp_TxConfirmation

Test Precondition: 
  SomeIpTp_Init is called.
  pduInfoPtr length to be &lt; configured Npdu length for the called TxPduId

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call SomeIpTp_Transmit with pduId=0 &amp; pduId=2, pduInfoPtr with length = configured - 2, also get sure that the request is accepted
  03: Force the next call of PduR_SomeIpTpTransmit for the pduId=0 to return E_NOT_OK, while E_OK for pduId=2.
  04: Call SomeIpTp_MainFunctionTx().
  05: Check if PduR_SomeIpTpTransmit was called for pduId=0
  06: Check that DET was reported with expected parameters
  07: PduR_SomeIpTpTxConfirmation() is called for pduId=0 with E_NOT_OK since PduR_SomeIpTpTransmit returned E_NOT_OK
  08: The disassembly process for this Pdu is cancelled and can receive new requests for the same Pdu of ID = 0
  09: Call SomeIpTp_TriggerTransmit() with buffer size equals to the configured Npdu length for TxPduId = 2
  10: Check that PduR_SomeIpTpCopyTxData is called
  11: Call SomeIpTp_TxConfirmation for pduId=2 and check that PduR_SomeIpTpTxConfirmation has been called with result E_OK as well.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.Cancel</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.ReportRuntimeError</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.TxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>564</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest06_Check_LowerLayerTransmit_Return_NOT_OK_Single_multi_Channel_Reverse</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_06_RuntimeErrorsTx/source/application/SomeIpTp_ConTest06.c</sourcefile>
      <sourceline>1035</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that Interruption of DisAssembly process is happening when Lower layer transmit PduR_SomeIpTpTransmit()
  returns E_NOT_OK while sending a single segment, and get sure that other PDUs are not affected.
&lt;/para&gt;

Test Object: 
  SomeIpTp_Transmit
  SomeIpTp_MainFunctionTx
  SomeIpTp_TriggerTransmit
  SomeIpTp_TxConfirmation

Test Precondition: 
  SomeIpTp_Init is called.
  pduInfoPtr length to be &lt; configured Npdu length for the called TxPduId

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call SomeIpTp_Transmit with pduId=0 &amp; pduId=2, pduInfoPtr with length = configured - 2, also get sure that the request is accepted
  03: Force the next call of PduR_SomeIpTpTransmit for the pduId=2 to return E_NOT_OK, while E_OK for pduId=0.
  04: Call SomeIpTp_MainFunctionTx().
  05: Check if PduR_SomeIpTpTransmit was called for pduId=0
  06: Check if PduR_SomeIpTpTransmit was called for pduId=1
  07: Check that DET was reported with expected parameters
  08: PduR_SomeIpTpTxConfirmation() is called for pduId=0 with E_NOT_OK since PduR_SomeIpTpTransmit returned E_NOT_OK
  09: The disassembly process for this Pdu is cancelled and can receive new requests for the same Pdu of ID = 0
  10: Call SomeIpTp_TriggerTransmit() with buffer size equals to the configured Npdu length for TxPduId = 2
  11: Check that PduR_SomeIpTpCopyTxData is called
  12: Call SomeIpTp_TxConfirmation for pduId=2 and check that PduR_SomeIpTpTxConfirmation has been called with result E_OK as well.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.Cancel</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.ReportRuntimeError</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.TxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>565</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest06_Check_LowerLayerTransmit_Return_NOT_OK_interrupted_Transmit</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_06_RuntimeErrorsTx/source/application/SomeIpTp_ConTest06.c</sourcefile>
      <sourceline>1154</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that Interruption of DisAssembly process is happening when Lower layer transmit PduR_SomeIpTpTransmit()
  returns E_NOT_OK while sending a single segment but was interrupted by SomeIpTp_Transmit().
&lt;/para&gt;

Test Object: 
  SomeIpTp_Transmit
  SomeIpTp_MainFunctionTx
  SomeIpTp_TriggerTransmit
  SomeIpTp_TxConfirmation

Test Precondition: 
  SomeIpTp_Init is called.
  pduInfoPtr length to be &lt; configured Npdu length for the called TxPduId.

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call SomeIpTp_Transmit with pduId=0, pduInfoPtr with length = configured - 2.
  03: Force the next call of PduR_SomeIpTpTransmit to return E_NOT_OK
  04: Assign value to InterruptTransmitDataPtr to allow SomeIpTp_Transmit to interrupt
      PduR_SomeIpTpTransmit().
  05: Call SomeIpTp_MainFunctionTx().
  06: Check if PduR_SomeIpTpTransmit was called.
  07: Check that DET was reported once although SomeIpTp_Transmit() is preempting the process.
  08: PduR_SomeIpTpTxConfirmation() is called once with E_NOT_OK since PduR_SomeIpTpTransmit
      returned E_NOT_OK.
  09: VP (SomeIpTp.EB.LowerLayerTransmit.NOT_OK.Cancel)The disassembly process for this Pdu is
      cancelled and can receive new requests for the same Pdu of ID = 0.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.Cancel</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.TxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>566</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest06_Check_LowerLayerTransmit_Return_NOT_OK_First</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_06_RuntimeErrorsTx/source/application/SomeIpTp_ConTest06.c</sourcefile>
      <sourceline>1253</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that Interruption of DisAssembly process is happening when Lower layer transmit PduR_SomeIpTpTransmit()
  returns E_NOT_OK while sending the first segment.
&lt;/para&gt;

Test Object: 
  SomeIpTp_MainFunctionTx

Test Precondition: 
  SomeIpTp_Init is called.
  pduInfoPtr length to be &gt; configured Npdu length for the called TxPduId, multiple of expected
  payload.

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call SomeIpTp_Transmit with pduId=0.
  03: Call return E_OK.
  04: Force the next call of PduR_SomeIpTpTransmit to return E_NOT_OK
  05: Call SomeIpTp_MainFunctionTx().
  06: Check if PduR_SomeIpTpTransmit was called
  07: VP (SomeIpTp.EB.LowerLayerTransmit.NOT_OK.ReportRuntimeError)Check that DET was reported
         with expected parameters.
  08: VP (SomeIpTp.EB.LowerLayerTransmit.NOT_OK.TxConfirmation,
         SomeIpTp.EB.LowerLayerTransmit.NOT_OK.Cancel) PduR_SomeIpTpTxConfirmation() is called
         with E_NOT_OK since PduR_SomeIpTpTransmit returned E_NOT_OK

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.Cancel</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.ReportRuntimeError</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.TxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>567</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest06_Check_LowerLayerTransmit_Return_NOT_OK_Consecutive</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_06_RuntimeErrorsTx/source/application/SomeIpTp_ConTest06.c</sourcefile>
      <sourceline>1342</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that Interruption of DisAssembly process is happening when Lower layer transmit PduR_SomeIpTpTransmit()
  returns E_NOT_OK while sending a consecutive segment.
&lt;/para&gt;

Test Object: 
  SomeIpTp_MainFunctionTx

Test Precondition: 
  SomeIpTp_Init is called.
  pduInfoPtr length to be &gt; configured Npdu length for the called TxPduId, multiple of expected payload.

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call SomeIpTp_Transmit with pduId=0.
  03: Call return E_OK.
  04: Call SomeIpTp_MainFunctionTx(). Check if PduR_SomeIpTpTransmit is called after next Main function call with
      expected NpduId, pduInfoPtr.
  05: Call SomeIpTp_TriggerTransmit().
  06: Check that PduR_SomeIpTpCopyTxData is called
  07: Call SomeIpTp_TxConfirmation() for first message
  08: Force the next call of PduR_SomeIpTpTransmit to return E_NOT_OK
  09: Call SomeIpTp_MainFunctionTx() three times so that the Separation time expires
  10: Check if PduR_SomeIpTpTransmit was called
  11: VP (SomeIpTp.EB.LowerLayerTransmit.NOT_OK.ReportRuntimeError)Check that DET was reported with expected parameters
  12: VP (SomeIpTp.EB.LowerLayerTransmit.NOT_OK.TxConfirmation, SomeIpTp.EB.LowerLayerTransmit.NOT_OK.Cancel)PduR_SomeIpTpTxConfirmation() is called with E_NOT_OK since PduR_SomeIpTpTransmit returned E_NOT_OK

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.Cancel</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.ReportRuntimeError</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.TxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>568</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest06_Check_LowerLayerTransmit_Return_NOT_OK_Last</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_06_RuntimeErrorsTx/source/application/SomeIpTp_ConTest06.c</sourcefile>
      <sourceline>1457</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that Interruption of DisAssembly process is happening when Lower layer transmit PduR_SomeIpTpTransmit()
  returns E_NOT_OK while sending the last segment.
&lt;/para&gt;

Test Object: 
  SomeIpTp_MainFunctionTx

Test Precondition: 
  SomeIpTp_Init is called.
  pduInfoPtr length to be &gt; configured Npdu length for the called TxPduId, multiple of expected payload.

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call SomeIpTp_Transmit with pduId=0.
  03: Call return E_OK.
  04: Call SomeIpTp_MainFunctionTx(). Check if PduR_SomeIpTpTransmit is called after next Main
      function call with expected NpduId, pduInfoPtr.
  05: Call SomeIpTp_TriggerTransmit().
  06: Check that PduR_SomeIpTpCopyTxData is called
  07: Call SomeIpTp_TxConfirmation() for first message
  08: Call SomeIpTp_MainFunctionTx() three times so that the Separation time expires
  09: Call SomeIpTp_TriggerTransmit() -&gt; consecutive
  10: Call SomeIpTp_TxConfirmation() for second message
  11: Call SomeIpTp_MainFunctionTx() three times so that the Separation time expires
  12: Call SomeIpTp_TriggerTransmit() -&gt; consecutive
  13: Call SomeIpTp_TxConfirmation() for third message
  14: Force the next call of PduR_SomeIpTpTransmit to return E_NOT_OK
  15: Call SomeIpTp_MainFunctionTx() three times so that the Separation time expires
  16: VP (SomeIpTp.EB.LowerLayerTransmit.NOT_OK.ReportRuntimeError) Check that DET was reported with
      expected parameters
  17: VP (SomeIpTp.EB.LowerLayerTransmit.NOT_OK.TxConfirmation,
          SomeIpTp.EB.LowerLayerTransmit.NOT_OK.Cancel) PduR_SomeIpTpTxConfirmation() is called
          with E_NOT_OK since PduR_SomeIpTpTransmit returned E_NOT_OK

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.Cancel</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.ReportRuntimeError</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.TxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>569</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest06_Check_LowerLayerTransmit_TriggerTransmit_Return_NOT_OK_First_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_06_RuntimeErrorsTx/source/application/SomeIpTp_ConTest06.c</sourcefile>
      <sourceline>1619</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that Interruption of DisAssembly process is happening when Lower layer transmit PduR_SomeIpTpTransmit()
  returns E_NOT_OK due to a failure in the SomeIpTp_TriggerTransmit(),while sending the first segment.
  Also get sure that the PduR_SomeIpTpTxConfirmation and Det_ReportRuntimeError were called only once.
&lt;/para&gt;

Test Object: 
  SomeIpTp_MainFunctionTx

Test Precondition: 
  SomeIpTp_Init is called.

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call SomeIpTp_Transmit with pduId=0.
  03: Check if the return is E_OK.
  04: Force the next call of PduR_SomeIpTpTransmit to return E_NOT_OK
  05: Assign the ptr ImmediateTriggerTransmitDataPtr to a value to let the PduR_SomeIpTpTransmit call the SomeIpTp_TriggerTransmit
  06: Indicate no AvailableData to force PduR_SomeIpTpCopyTxData() to return a negative result
  07: Reset the Det_ReportRuntimeError counter to Zero to start counting the Det_ReportRuntimeError count
  08: Call SomeIpTp_MainFunctionTx().
  09: Check if PduR_SomeIpTpCopyTxData was called.
  10: Check if PduR_SomeIpTpTransmit was called .
  11: VP (SomeIpTp.EB.LowerLayerTransmit.NOT_OK.ReportRuntimeError) Check that DET was reported with
      expected parameters.
  12: VP (SomeIpTp.EB.LowerLayerTransmit.NOT_OK.TxConfirmation,
      SomeIpTp.EB.LowerLayerTransmit.NOT_OK.Cancel) PduR_SomeIpTpTxConfirmation()
      is called with E_NOT_OK since SomeIpTp_TriggerTransmit failed to send the segment

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.Cancel</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.ReportRuntimeError</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.TxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>570</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest06_Check_LowerLayerTransmit_TriggerTransmit_Return_NOT_OK_First_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_06_RuntimeErrorsTx/source/application/SomeIpTp_ConTest06.c</sourcefile>
      <sourceline>1727</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that Interruption of DisAssembly process is happening when Lower layer transmit PduR_SomeIpTpTransmit()
  returns E_NOT_OK due to a failure in the SomeIpTp_TriggerTransmit(),while sending the first segment then
  SomeIpTp_Transmit is called to request sending for multi segment PDU.
  Also get sure that the PduR_SomeIpTpTxConfirmation and Det_ReportRuntimeError were called only once.
&lt;/para&gt;

Test Object: 
  SomeIpTp_MainFunctionTx

Test Precondition: 
  SomeIpTp_Init is called.

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call SomeIpTp_Transmit with pduId=0.
  03: Check if the return is E_OK.
  04: Force the next call of PduR_SomeIpTpTransmit to return E_NOT_OK
  05: Assign the ptr ImmediateTriggerTransmitDataPtr to a value to let the PduR_SomeIpTpTransmit call the SomeIpTp_TriggerTransmit
  06: Indicate no AvailableData to force PduR_SomeIpTpCopyTxData() to return a negative result
  07: Reset the Det_ReportRuntimeError counter to Zero to start counting the Det_ReportRuntimeError count
  08: Assign the ptr InterruptTransmitDataPtr to allow the SomeIpTp_Transmit call after the SomeIpTp_TriggerTransmit return
  09: Call SomeIpTp_MainFunctionTx().
  10: Check if PduR_SomeIpTpTransmit was called
  11: Check if PduR_SomeIpTpCopyTxData was called
  12: VP (SomeIpTp.EB.LowerLayerTransmit.NOT_OK.ReportRuntimeError)Check that DET was reported with
      expected parameters.
  13: VP (SomeIpTp.EB.LowerLayerTransmit.NOT_OK.TxConfirmation,
      SomeIpTp.EB.LowerLayerTransmit.NOT_OK.Cancel) PduR_SomeIpTpTxConfirmation()
      is called with E_NOT_OK since SomeIpTp_TriggerTransmit failed to send the segment.

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.Cancel</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.ReportRuntimeError</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.TxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>571</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest06_Check_LowerLayerTransmit_TriggerTransmit_Return_NOT_OK_First_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_06_RuntimeErrorsTx/source/application/SomeIpTp_ConTest06.c</sourcefile>
      <sourceline>1844</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that Interruption of DisAssembly process is happening when Lower layer transmit PduR_SomeIpTpTransmit()
  returns E_NOT_OK due to a failure in the SomeIpTp_TriggerTransmit(),while sending the first segment then
  SomeIpTp_Transmit is called to request sending for single segment PDU.
  Also get sure that the PduR_SomeIpTpTxConfirmation and Det_ReportRuntimeError were called only once.
&lt;/para&gt;

Test Object: 
  SomeIpTp_MainFunctionTx

Test Precondition: 
  SomeIpTp_Init is called.

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call SomeIpTp_Transmit with pduId=0.
  03: Check if the return is E_OK.
  04: Force the next call of PduR_SomeIpTpTransmit to return E_NOT_OK
  05: Assign the ptr ImmediateTriggerTransmitDataPtr to a value to let the PduR_SomeIpTpTransmit call the SomeIpTp_TriggerTransmit
  06: Indicate no AvailableData to force PduR_SomeIpTpCopyTxData() to return a negative result
  07: Reset the Det_ReportRuntimeError counter to Zero to start counting the Det_ReportRuntimeError count
  08: Assign the ptr InterruptTransmitDataPtr to allow the SomeIpTp_Transmit call after the SomeIpTp_TriggerTransmit return
  09: Call SomeIpTp_MainFunctionTx().
  10: Check if PduR_SomeIpTpCopyTxData was called.
  11: Check if PduR_SomeIpTpTransmit was called.
  12: VP (SomeIpTp.EB.LowerLayerTransmit.NOT_OK.ReportRuntimeError) Check that Runtime Error was
      reported with expected parameters.
  13: VP (SomeIpTp.EB.LowerLayerTransmit.NOT_OK.TxConfirmation,
      SomeIpTp.EB.LowerLayerTransmit.NOT_OK.Cancel)PduR_SomeIpTpTxConfirmation()
      is called with E_NOT_OK since SomeIpTp_TriggerTransmit failed to send the segment.


Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.Cancel</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>180</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.ReportRuntimeError</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>181</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.LowerLayerTransmit.NOT_OK.TxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>182</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>572</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest06_Check_TxConfirmation_NOT_OK_Transmission_0</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_06_RuntimeErrorsTx/source/application/SomeIpTp_ConTest06.c</sourcefile>
      <sourceline>1962</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that Interruption of DisAssembly process is happening when Lower layer transmit PduR_SomeIpTpTransmit()
  returns E_NOT_OK while sending a single segment.
  Also check that the transmission request is processed when called in the context of the PduR_SomeIpTpTxConfirmation
  with result set to E_NOT_OK.
&lt;/para&gt;

Test Object: 
  SomeIpTp_Transmit
  SomeIpTp_MainFunctionTx
  SomeIpTp_TriggerTransmit
  SomeIpTp_TxConfirmation

Test Precondition: 
  SomeIpTp_Init is called.
  pduInfoPtr length to be &lt; configured Npdu length for the called TxPduId.

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call SomeIpTp_Transmit with pduId=0, pduInfoPtr with length = configured - 2
  03: Force the next call of PduR_SomeIpTpTransmit to return E_NOT_OK
  04: Assign values to "TxConfirmationTransmitDataPtr" to allow the call of SomeIpTp_Transmit in the context of the
      PduR_SomeIpTpTxConfirmation
  05: Call SomeIpTp_MainFunctionTx()
  06: Check if PduR_SomeIpTpTransmit was called
  07: Check that Runtime Error was reported with expected parameters
  08: PduR_SomeIpTpTxConfirmation() is called with E_NOT_OK since PduR_SomeIpTpTransmit returned E_NOT_OK
  09: Don't force the return of the next call of PduR_SomeIpTpTransmit
  10: check if PduR_SomeIpTpTransmit is called after next Main function call with expected NpduId, pduInfoPtr.
  11: Call SomeIpTp_TriggerTransmit() with buffer size equals to the configured Npdu length for TxPduId = 0
  12: Check that PduR_SomeIpTpCopyTxData is called
  13: Assign NULL_PTR to "TxConfirmationTransmitDataPtr" to disable the call of SomeIpTp_Transmit in the context of the
      PduR_SomeIpTpTxConfirmation
  14: Call SomeIpTp_TxConfirmation and check that PduR_SomeIpTpTxConfirmation has been called with result E_OK as well.


Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.AcceptTransmit.From.PduR_SomeIpTpTxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>573</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest06_Check_TxConfirmation_NOT_OK_Transmission_1</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_06_RuntimeErrorsTx/source/application/SomeIpTp_ConTest06.c</sourcefile>
      <sourceline>2091</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that Interruption of DisAssembly process is happening when SomeIpTp_TriggerTransmit() returns E_NOT_OK while
  sending a single segment.
  Also check that the transmission request is processed when called in the context of the PduR_SomeIpTpTxConfirmation
  with result set to E_NOT_OK.
&lt;/para&gt;

Test Object: 
  SomeIpTp_Transmit
  SomeIpTp_MainFunctionTx
  SomeIpTp_TriggerTransmit
  SomeIpTp_TxConfirmation

Test Precondition: 
  SomeIpTp_Init is called.
  pduInfoPtr length to be &lt; configured Npdu length for the called TxPduId.

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call SomeIpTp_Transmit with pduId=0, pduInfoPtr with length = configured - 2
  03: Call SomeIpTp_MainFunctionTx()
  04: Assign values to "TxConfirmationTransmitDataPtr" to allow the call of SomeIpTp_Transmit in the context of the
      PduR_SomeIpTpTxConfirmation
  05: Check if PduR_SomeIpTpTransmit was called
  06: Indicate no AvailableData to force PduR_SomeIpTpCopyTxData() to return a negative result
  07: Check that PduR_SomeIpTpCopyTxData is called.
  08: Call SomeIpTp_MainFunctionTx().
  09: Check that Runtime Error was reported with expected parameters
  10: PduR_SomeIpTpTxConfirmation() is called with E_NOT_OK since PduR_SomeIpTpTransmit returned E_NOT_OK
  11: check if PduR_SomeIpTpTransmit is called after next Main function call with expected NpduId, pduInfoPtr.
  12: Indicate AvailableData to allow PduR_SomeIpTpCopyTxData() and call SomeIpTp_TriggerTransmit() with buffer size
      equals to the configured Npdu length for TxPduId = 0
  13: Check that PduR_SomeIpTpCopyTxData is called
  14: Assign NULL_PTR to "TxConfirmationTransmitDataPtr" to disable the call of SomeIpTp_Transmit in the context of the
      PduR_SomeIpTpTxConfirmation
  15: Call SomeIpTp_TxConfirmation and check that PduR_SomeIpTpTxConfirmation has been called with result E_OK as well.


Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.AcceptTransmit.From.PduR_SomeIpTpTxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>574</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ConTest06_Check_TxConfirmation_NOT_OK_Transmission_2</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Conformance/IN/SomeIpTp_ConTest_06_RuntimeErrorsTx/source/application/SomeIpTp_ConTest06.c</sourcefile>
      <sourceline>2226</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that termination of DisAssembly process is happening when the ongoing transmission is interrupted by a new transmission
  request via SomeIpTp_Transmit()
  Also check that the transmission request is processed when called in the context of the PduR_SomeIpTpTxConfirmation
  with result set to E_NOT_OK.
&lt;/para&gt;

Test Object: 
  SomeIpTp_Transmit
  SomeIpTp_MainFunctionTx
  SomeIpTp_TriggerTransmit
  SomeIpTp_TxConfirmation

Test Precondition: 
  SomeIpTp_Init is called.
  pduInfoPtr length to be &lt; configured Npdu length for the called TxPduId.

Test Execution: 
  01: Call SomeIpTp_Init
  02: Call SomeIpTp_Transmit with pduId=0, pduInfoPtr with length = configured - 2
  03: Call SomeIpTp_MainFunctionTx().
  04: Check if PduR_SomeIpTpTransmit was called
  05: Assign values to "TxConfirmationTransmitDataPtr" to allow the call of SomeIpTp_Transmit in the context of the
      PduR_SomeIpTpTxConfirmation
  06: Call SomeIpTp_Transmit to interrupt the ongoing disassembly process and check that it return E_NOT_OK.
  07: Call SomeIpTp_MainFunctionTx().
  08: Check that Runtime Error was reported with expected parameters from the context of the SomeIpTp_Transmit()
  09: PduR_SomeIpTpTxConfirmation() is called with E_NOT_OK since PduR_SomeIpTpTransmit returned E_NOT_OK
  10: check if PduR_SomeIpTpTransmit is called after next Main function call with expected NpduId, pduInfoPtr.
  11: Indicate AvailableData to allow PduR_SomeIpTpCopyTxData() and call SomeIpTp_TriggerTransmit() with buffer size
      equals to the configured Npdu length for TxPduId = 0
  12: Check that PduR_SomeIpTpCopyTxData is called
  13: Assign NULL_PTR to "TxConfirmationTransmitDataPtr" to disable the call of SomeIpTp_Transmit in the context of the
      PduR_SomeIpTpTxConfirmation
  14: Call SomeIpTp_TxConfirmation and check that PduR_SomeIpTpTxConfirmation has been called with result E_OK as well.


Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.AcceptTransmit.From.PduR_SomeIpTpTxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>183</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>575</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SomeIpTp_ImplTest01_CheckTriggerTransmitCallAtUnexpectedState</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Implementation/IN/SomeIpTp_Impl_01_TXPath/source/application/SomeIpTp_ImplTest01.c</sourcefile>
      <sourceline>26</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that functionality done when SomeIpTp_TriggerTransmit called, is as expected.
&lt;/para&gt;

Test Object: 
  SomeIpTp_TriggerTransmit

Test Precondition: 
  SomeIpTp_Init is called.
  State of called TxPduId is SOMEIPTP_IDLE.
  pduInfoPtr length to be &lt; congigured Npdu length for the called TxPduId.

Test Execution: 
  01: Call SomeIpTp_Init
  02: Check that the state of pduId = 0 is SOMEIPTP_SINGLE_CONF
  03: Check that SomeIpTp_TriggerTransmit will skip any non expected state and just return E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.PDULENGTHTYPE001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>576</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ImplTest01_CheckTxConfirmationCallAtUnexpectedState</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Implementation/IN/SomeIpTp_Impl_01_TXPath/source/application/SomeIpTp_ImplTest01.c</sourcefile>
      <sourceline>83</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that functionality done when SomeIpTp_TxConfirmation called, is as expected.
&lt;/para&gt;

Test Object: 
  SomeIpTp_TxConfirmation

Test Precondition: 
  SomeIpTp_Init is called.
  State of called TxPduId is SOMEIPTP_IDLE.
  pduInfoPtr length to be &lt; congigured Npdu length for the called TxPduId.

Test Execution: 
  01: Call SomeIpTp_Init
  02: Set state to SOMEIPTP_SINGLE.
      Call SomeIpTp_TxConfirmation with pduId=0, E_OK.
      Nothing will be executed.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_91001.NoResult_RDUR403</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>116</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>577</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_not_eq_Consecutive</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Implementation/IN/SomeIpTp_Impl_01_TXPath/source/application/SomeIpTp_ImplTest01.c</sourcefile>
      <sourceline>137</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that functionality done when SomeIpTp_Transmit called, is as expected.
&lt;/para&gt;

Test Object: 
  SomeIpTp_Transmit
  SomeIpTp_TriggerTransmit
  SomeIpTp_MainFunctionTx
  SomeIpTp_TxConfirmation

Test Precondition: 
  SomeIpTp_Init is called.
  State of called TxPduId is SOMEIPTP_IDLE.
  pduInfoPtr length to be &gt; congigured Npdu length for the called TxPduId. not multiple of expected payload.

Test Execution: 
  01: call SomeIpTp_Init
  02: initialize the metadata with Zeros
  03: call SomeIpTp_Transmit with pduId=0, pduInfoPtr with length = 130U.
           and MetaData equals to the first 8 bytes in DataArraySomeIpTp_Transmit.
  04: VP (SomeIpTp.SWS_SomeIpTp_00001, SomeIpTp.SWS_SomeIpTp_00002, SomeIpTp.SWS_SomeIpTp_00017.Pdu_Length):
      check if length passed is equivalent to its mapped values remSegments, lastSegLength
                                              length = remSegments*MaxPayload + lastSegLength + 8
  05: Check that the state of pduId = 0 is SOMEIPTP_FIRST
  06: SomeIpTp_Transmit returned with E_OK.
  07: check if MetaData passed by SomeIpTp_Transmit has not been stored in the internal buffer of this Nsdu
      and still hold Zeros without being modified since PduR_SomeIpTpCopyTxData is not called yet.
  08: VP (SomeIpTp.SWS_SomeIpTp_00017.call_PduR_SomeIpTpTransmit, SomeIpTp.SWS_SomeIpTp_00017.First_Segment_Size_Calc,
          SomeIpTp.SWS_SomeIpTp_00017.Pdu_ID): check if PduR_SomeIpTpTransmit  is called after next Main funcion call with
          expected NpduId, pduInfoPtr and data length of the first segment.
  09: VP (SomeIpTp.SWS_SomeIpTp_00053): SomeIpTp_TriggerTransmit is called.
  10: VP (SomeIpTp.SWS_SomeIpTp_00018.FirstSegment_header,
          SomeIpTp.SWS_SomeIpTp_00018.FirstSegment_payload,
          SomeIpTp.SWS_SomeIpTp_00024.ExpectedForAllButLast_Result_RDUR403_ReportError,
          SomeIpTp.SWS_SomeIpTp_00025.Result_RDUR403_ReportError): CopyTxData is called twice for First Segment,
          Once for the header in order to be stored in the SomeIpTp module metadata, the other call for the payload.
      VP(SomeIpTp.SWS_SomeIpTp_00006) Generated payload of a segmented SOME/IP message is multiple of 16 bytes
  11: VP(SomeIpTp.SWS_SomeIpTp_00005) generate Segment size &lt; configured Npdu length = 50U.
      VP(SomeIpTp.SWS_SomeIpTp_00003, SomeIpTp.SWS_SomeIpTp_00010,
         SomeIpTp.SWS_SomeIpTp_00009.Message_Type_Set_Tp_Flag) check Tp-Flag has been set.
      VP(SomeIpTp.SWS_SomeIpTp_00007,
         SomeIpTp.SWS_SomeIpTp_00008): Check that the header is stored in the SomeIpTp module metadata.
      VP(SomeIpTp.SWS_SomeIpTp_00011, SomeIpTp.SWS_SomeIpTp_00013,
         SomeIpTp.SWS_SomeIpTp_00014, SomeIpTp.EB.TpHeader.BIGENDIAN)
                                                       check Offset = 0, M = 1, stored as bigendian.
      Check state became SOMEIPTP_FIRST_CONF.
      Check that remSegments has been decremented by one.
      Check that SomeIpTp_TriggerTransmit has been returned with E_OK.
  12: VP(SomeIpTp.SWS_SomeIpTp_00021.PDUR403) Call SomeIpTp_TxConfirmation with result = E_OK.
      Tx separation started.
      state changed to SOMEIPTP_NEXT_TO_BE_CONSECUTIVE.
  13: VP(SomeIpTp.SWS_SomeIpTp_00020) Call SomeIpTp_MainFunctionTx() until separation time ends
                                            while ensuring that there is no PduR_SomeIpTpTransmit is called until then.
  14: Continue from TriggerTransmit while checking that the offset increase according to VP(SomeIpTp.SWS_SomeIpTp_00012).
  15: VP (SomeIpTp.EB.SomeIpTpTxConfirmationTimeout.Monitor, SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.StopAssembly):
      State is SOMEIPTP_IDLE, so the DisAssembly has stopped.

  
Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.EB.SomeIpTpTxConfirmationTimeout.Monitor</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>173</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00023.SomeIpTpTxConfirmationTimeout.StopAssembly</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>131</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00017.Pdu_Length</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00017.Pdu_ID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>149</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00017.First_Segment_Size_Calc</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00017.call_PduR_SomeIpTpTransmit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00053</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>74</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.FirstSegment_header</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.FirstSegment_payload</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.Consecutive_or_last_Segment</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00024.ExpectedForAllButLast_Result_RDUR403_ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00025.Result_RDUR403_ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>112</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00009.Message_Type_Set_Tp_Flag</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>32</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00021.PDUR403</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>130</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.TpHeader.BIGENDIAN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.PDULENGTHTYPE001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>578</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ImplTest01_CheckTransmitCallTpMessage_Last_eq_Consecutive</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Implementation/IN/SomeIpTp_Impl_01_TXPath/source/application/SomeIpTp_ImplTest01.c</sourcefile>
      <sourceline>537</sourceline>
      <version>1</version>
      <description>Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that functionality done when SomeIpTp_Transmit called, is as expected.
&lt;/para&gt;

Test Object: 
  SomeIpTp_Transmit

Test Precondition: 
  SomeIpTp_Init is called.
  State of called TxPduId is SOMEIPTP_IDLE.
  pduInfoPtr length to be &gt; congigured Npdu length for the called TxPduId, multiple of expected payload.

Test Execution: 
  01: call SomeIpTp_Init
  02: call initialize the metadata with Zeros
  03: call SomeIpTp_Transmit with pduId=0, pduInfoPtr with length = 130U.
           and MetaData equals to the first 8 bytes in DataArraySomeIpTp_Transmit.
  04: VP (SomeIpTp.SWS_SomeIpTp_00001, SomeIpTp.SWS_SomeIpTp_00002,
          SomeIpTp.SWS_SomeIpTp_00017.Pdu_Length):
      check if length passed is equivalent to its mapped values remSegments, lastSegLength
                                              length = remSegments*MaxPayload + lastSegLength + 8
  05: Check that the state of pduId = 0 is SOMEIPTP_FIRST
  06: SomeIpTp_Transmit returned with E_OK.
  07: check if MetaData passed by SomeIpTp_Transmit has not been stored in the internal buffer of this Nsdu
      and still hold Zeros without being modified since PduR_SomeIpTpCopyTxData is not called yet.
  08: VP (SomeIpTp.SWS_SomeIpTp_00017.call_PduR_SomeIpTpTransmit, SomeIpTp.SWS_SomeIpTp_00017.First_Segment_Size_Calc,
          SomeIpTp.SWS_SomeIpTp_00017.Pdu_ID): check if PduR_SomeIpTpTransmit  is called after next Main funcion call with
          expected NpduId, pduInfoPtr and data length of the first segment.
  09: VP (SomeIpTp.SWS_SomeIpTp_00053): SomeIpTp_TriggerTransmit is called.
  10: VP (SomeIpTp.SWS_SomeIpTp_00018.FirstSegment_header,
          SomeIpTp.SWS_SomeIpTp_00018.FirstSegment_payload,
          SomeIpTp.SWS_SomeIpTp_00024.ExpectedForAllButLast_Result_RDUR403_ReportError,
          SomeIpTp.SWS_SomeIpTp_00025.Result_RDUR403_ReportError): CopyTxData is called twice for First Segment,
          Once for the header in order to be stored in the SomeIpTp module metadata, the other call for the payload.
      VP(SomeIpTp.SWS_SomeIpTp_00006): Generated payload of a segmented SOME/IP message is multiple of 16 bytes
  11: VP(SomeIpTp.SWS_SomeIpTp_00005): generate Segment size &lt; configured Npdu length = 50U.
      VP(SomeIpTp.SWS_SomeIpTp_00003, SomeIpTp.SWS_SomeIpTp_00010,
         SomeIpTp.SWS_SomeIpTp_00009.Message_Type_Set_Tp_Flag): check Tp-Flag has been set.
      VP(SomeIpTp.SWS_SomeIpTp_00007,
         SomeIpTp.SWS_SomeIpTp_00008):
      VP(SomeIpTp.SWS_SomeIpTp_00011, SomeIpTp.SWS_SomeIpTp_00013,
         SomeIpTp.SWS_SomeIpTp_00014, SomeIpTp.EB.TpHeader.BIGENDIAN):
          check Offset = 0, M = 1, stored as bigendian.
          Check state became SOMEIPTP_FIRST_CONF.
          Check that remSegments has been decremented by one.
          Check that SomeIpTp_TriggerTransmit has been returned with E_OK.
  12: VP(SomeIpTp.SWS_SomeIpTp_00021.PDUR403) Call SomeIpTp_TxConfirmation with result = E_OK.

      Tx separation started.
      state changed to SOMEIPTP_NEXT_TO_BE_LAST.
  13: VP(SomeIpTp.SWS_SomeIpTp_00020) Call SomeIpTp_MainFunctionTx() until separation time ends
                                            while ensuring that there is no PduR_SomeIpTpTransmit is called until then.
  14: Continue from TriggerTransmit while checking that the offset increase according to VP(SomeIpTp.SWS_SomeIpTp_00012).

Test Input: None.
Test Output: None.</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>22</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00002</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>23</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00007</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>28</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00008</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>29</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00017.Pdu_Length</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>148</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00017.First_Segment_Size_Calc</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>150</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00017.Pdu_ID</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>149</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00017.call_PduR_SomeIpTpTransmit</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>151</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00053</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>74</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.FirstSegment_header</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>141</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.FirstSegment_payload</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>142</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00018.Consecutive_or_last_Segment</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>144</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00024.ExpectedForAllButLast_Result_RDUR403_ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00025.Result_RDUR403_ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>112</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00006</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>27</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00003</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>24</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00010</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>31</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00009.Message_Type_Set_Tp_Flag</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>147</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00011</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>32</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00013</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>34</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00014</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>35</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00005</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>26</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00021.PDUR403</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>130</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00012</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>33</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00015</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>36</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00020</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>41</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.TpHeader.BIGENDIAN</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>159</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.EB.PDULENGTHTYPE001</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>222</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>579</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SomeIpTp_ImplTest02_CheckInterruptDisAssembly_Small_BufferSize_Header</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Implementation/IN/SomeIpTp_Impl_02_RuntimeErrorsTx/source/application/SomeIpTp_ImplTest02.c</sourcefile>
      <sourceline>24</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that Interruption of DisAssembly process is happening when PduR_SomeIpTpCopyTxData small
  size than needed for Header copy.
&lt;/para&gt;

Test Object: 
  SomeIpTp_Transmit
  SomeIpTp_TxConfirmation
  SomeIpTp_TriggerTransmit

Test Precondition: 
  SomeIpTp_Init is called.

Test Execution: 
  01: call SomeIpTp_Init
  02: Set state of pduId = 0 to SOMEIPTP_FIRST.
  03: Set the AvailableData to a small buffer size.
  04: Call SomeIpTp_TriggerTransmit.
  05: CopyTxData is called and return BUFREQ_OK.
  06: Call SomeIpTp_MainFunctionTx().
  07: VP(SomeIpTp.SWS_SomeIpTp_00024.ExpectedForAllButLast_Result_RDUR403_ReportError):
      DisAssembly shall be interrupted, Det_ReportRuntimeError is called with
      ErrorId = SOMEIPTP_E_DISASSEMBLY_INTERRUPT.
  08: VP(SomeIpTp.SWS_SomeIpTp_00024.ExpectedForAllButLast_Result_RDUR403_CallTxConfirmation):
      If so, PduR_SomeIpTpTxConfirmation is called with Result = E_NOT_OK.
  09: SomeIpTp_TriggerTransmit returned with E_NOT_OK.
  10: VP(SomeIpTp.SWS_SomeIpTp_00024.ExpectedForAllButLast_Result_RDUR403_CancelDisassembly):
      Check that the state of pduId = 0 is back to SOMEIPTP_IDLE.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00024.ExpectedForAllButLast_Result_RDUR403_ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00024.ExpectedForAllButLast_Result_RDUR403_CallTxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>108</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00024.ExpectedForAllButLast_Result_RDUR403_CancelDisassembly</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>107</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>580</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ImplTest02_CheckInterruptDisAssembly_Small_BufferSize_Payload</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Implementation/IN/SomeIpTp_Impl_02_RuntimeErrorsTx/source/application/SomeIpTp_ImplTest02.c</sourcefile>
      <sourceline>120</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that Interruption of DisAssembly process is happening when PduR_SomeIpTpCopyTxData return
  BUFREQ_E_BUSY while copying the payload of the first segment copy.
&lt;/para&gt;

Test Object: 
  SomeIpTp_Transmit
  SomeIpTp_TxConfirmation
  SomeIpTp_TriggerTransmit

Test Precondition: 
  SomeIpTp_Init is called.

Test Execution: 
  01: call SomeIpTp_Init
  02: Set state of pduId = 0 to SOMEIPTP_FIRST.
  03: Set a suitable AvailableData for header copy but a force it to return BUFREQ_E_BUSY for payload.
  04: Call SomeIpTp_TriggerTransmit.
  05: CopyTxData is called and return BUFREQ_OK for header but BUFREQ_E_BUSY for payload.
  06: Call SomeIpTp_MainFunctionTx().
  07: VP(SomeIpTp.SWS_SomeIpTp_00025.Result_RDUR403_ReportError): DisAssembly shall be interrupted,
      Det_ReportRuntimeError is called with ErrorId = SOMEIPTP_E_DISASSEMBLY_INTERRUPT.
  08: VP (SomeIpTp.SWS_SomeIpTp_00025.Result_RDUR403_ReportError): If so, PduR_SomeIpTpTxConfirmation
      is called with Result = E_NOT_OK.
  09: SomeIpTp_TriggerTransmit returned with E_NOT_OK.
  10: Check that the state of pduId = 0 is back to SOMEIPTP_IDLE

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00024.ExpectedForAllButLast_Result_RDUR403_ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>109</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>581</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ImplTest02_CheckInterruptDisAssembly_Small_BufferSize_Consecutive</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Implementation/IN/SomeIpTp_Impl_02_RuntimeErrorsTx/source/application/SomeIpTp_ImplTest02.c</sourcefile>
      <sourceline>218</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that Interruption of DisAssembly process is happening when PduR_SomeIpTpCopyTxData return
  BUFREQ_E_BUSY while copying a consecutive segment copy.
&lt;/para&gt;

Test Object: 
  SomeIpTp_Transmit
  SomeIpTp_TxConfirmation
  SomeIpTp_TriggerTransmit

Test Precondition: 
  SomeIpTp_Init is called.

Test Execution: 
  01: call SomeIpTp_Init
  02: Set state of pduId = 0 to SOMEIPTP_CONSECUTIVE.
  03: CopyTxData is called and return BUFREQ_E_BUSY.
  04: Call SomeIpTp_TriggerTransmit.
  05: CopyTxData is called and return BUFREQ_E_BUSY.
  06: Call SomeIpTp_MainFunctionTx().
  07: VP(SomeIpTp.SWS_SomeIpTp_00025.Result_RDUR403_ReportError): DisAssembly shall be interrupted,
      Det_ReportRuntimeError() is called with ErrorId = SOMEIPTP_E_DISASSEMBLY_INTERRUPT.
  08: VP (SomeIpTp.SWS_SomeIpTp_00025.Result_RDUR403_CallTxConfirmation): If so,
       PduR_SomeIpTpTxConfirmation() is called with Result = E_NOT_OK.
  09: SomeIpTp_TriggerTransmit returned with E_NOT_OK.
  10: VP (SomeIpTp.SWS_SomeIpTp_00025.Result_RDUR403_CancelDisassembly): Check that the state of
      pduId = 0 is back to SOMEIPTP_IDLE.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00025.Result_RDUR403_ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>112</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00025.Result_RDUR403_CallTxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00025.Result_RDUR403_CancelDisassembly</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>110</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>582</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ImplTest02_CheckInterruptDisAssembly_Small_BufferSize_Last</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Implementation/IN/SomeIpTp_Impl_02_RuntimeErrorsTx/source/application/SomeIpTp_ImplTest02.c</sourcefile>
      <sourceline>312</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that Interruption of DisAssembly process is happening when PduR_SomeIpTpCopyTxData return
  BUFREQ_E_BUSY while copying the last segment copy.
&lt;/para&gt;

Test Object: 
  SomeIpTp_Transmit
  SomeIpTp_TxConfirmation
  SomeIpTp_TriggerTransmit

Test Precondition: 
  SomeIpTp_Init is called.

Test Execution: 
  01: call SomeIpTp_Init
  02: Set state of pduId = 0 to SOMEIPTP_LAST.
  03: CopyTxData is called and return BUFREQ_E_BUSY.
  04: Call SomeIpTp_TriggerTransmit.
  05: CopyTxData is called and return BUFREQ_E_BUSY.
  06: Call SomeIpTp_MainFunctionTx().
  07: VP (SomeIpTp.SWS_SomeIpTp_00025.Result_RDUR403_ReportError): DisAssembly shall be interrupted,
      Det_ReportRuntimeError() is called with ErrorId = SOMEIPTP_E_DISASSEMBLY_INTERRUPT.
  08: VP (SomeIpTp.SWS_SomeIpTp_00025.Result_RDUR403_CallTxConfirmation): If so,
      PduR_SomeIpTpTxConfirmation() is called with Result = E_NOT_OK.
  09: SomeIpTp_TriggerTransmit returned with E_NOT_OK.
  10: VP (SomeIpTp.SWS_SomeIpTp_00025.Result_RDUR403_CancelDisassembly): Check that the state of
      pduId = 0 is back to SOMEIPTP_IDLE.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00025.Result_RDUR403_ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>112</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00025.Result_RDUR403_CallTxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00025.Result_RDUR403_CancelDisassembly</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>110</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>583</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ImplTest02_CheckInterruptDisAssembly_by_SomeIpTp_Transmit_Call</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Implementation/IN/SomeIpTp_Impl_02_RuntimeErrorsTx/source/application/SomeIpTp_ImplTest02.c</sourcefile>
      <sourceline>407</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that Interruption of DisAssembly process by calling SomeIpTp_Transmit while the ongoingState
  is SOMEIPTP_CONSECUTIVE.
&lt;/para&gt;

Test Object: 
  SomeIpTp_Transmit

Test Precondition: 
  SomeIpTp_Init is called.

Test Execution: 
  01: call SomeIpTp_Init
  02: Set state of pduId = 0 to SOMEIPTP_CONSECUTIVE (!SOMEIPTP_IDLE)
  03: VP (SomeIpTp.SWS_SomeIpTp_00016): call SomeIpTp_Transmit while there is an ongoing state
      "SOMEIPTP_CONSECUTIVE".
  04: Call SomeIpTp_MainFunctionTx().
  05: VP (SomeIpTp.SWS_SomeIpTp_00022.ReportError) if so, Det_ReportRuntimeError is called with
      ErrorId = SOMEIPTP_E_DISASSEMBLY_INTERRUPT.
  06: VP(SomeIpTp.SWS_SomeIpTp_00022.Confirmation)  if so, PduR_SomeIpTpTxConfirmation is called with
      Result = E_NOT_OK.
  07: Check that the state of pduId = 0 is back to SOMEIPTP_IDLE
  08: Check that SomeIpTp_Transmit returned E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00016</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>37</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00022.ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>117</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00022.Confirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>118</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>584</internalId></specobject>
    <specobject>
      <id>SomeIpTp_ImplTest02_CheckInterruptDisAssembly_CopyTxData_BUFREQ_E_BUSY</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Implementation/IN/SomeIpTp_Impl_02_RuntimeErrorsTx/source/application/SomeIpTp_ImplTest02.c</sourcefile>
      <sourceline>487</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
&lt;para&gt;
  Check that Interruption of DisAssembly process is happening when PduR_SomeIpTpCopyTxData return
  BUFREQ_E_BUSY.
&lt;/para&gt;

Test Object: 
  SomeIpTp_Transmit
  SomeIpTp_TxConfirmation
  SomeIpTp_TriggerTransmit

Test Precondition: 
  SomeIpTp_Init is called.

Test Execution: 
  01: call SomeIpTp_Init
  02: Set state of pduId = 0 to SOMEIPTP_SINGLE.
  03: Call SomeIpTp_TriggerTransmit.
  04: CopyTxData is called and return BUFREQ_E_BUSY.
  05: Call SomeIpTp_MainFunctionTx().
  06: VP(SomeIpTp.SWS_SomeIpTp_00025.Result_RDUR403_ReportError): DisAssembly shall be interrupted,
      Det_ReportRuntimeError is called with ErrorId = SOMEIPTP_E_DISASSEMBLY_INTERRUPT.
  07: VP (SomeIpTp.SWS_SomeIpTp_00025.Result_RDUR403_CallTxConfirmation): If so,
      PduR_SomeIpTpTxConfirmation() is called with Result = E_NOT_OK.
  08: VP (SomeIpTp.SWS_SomeIpTp_00025.Result_RDUR403_CancelDisassembly): Check that the state of
      pduId = 0 is back to SOMEIPTP_IDLE.
  09: Check that SomeIpTp_TriggerTransmit returned E_NOT_OK.

Test Input: None.
Test Output: None.&lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00025.Result_RDUR403_ReportError</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>112</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00025.Result_RDUR403_CallTxConfirmation</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>111</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00025.Result_RDUR403_CancelDisassembly</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>110</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>585</internalId></specobject>
  </specobjects>
    <specobjects doctype="swuts">
    <specobject>
      <id>SomeIpTp_ComTest_APISyntax</id>
      <status>approved</status>
      <source>EB test case specification (asc_SomeIpTp)</source>
      <sourcefile>/cygdrive/c/work/workspace/LEAD_ACG-9.3.0/asc_SomeIpTp/test/ts5/Include/SomeIpTp_ComTest_CommonSrc/source/application/SomeIpTp_ComTest.c</sourcefile>
      <sourceline>19</sourceline>
      <version>1</version>
      <description>&lt;pre&gt;Test Synopsis: None.
Test Description: 
  &lt;para&gt;
    This test verifies that:
    * The SomeIpTp compiles with the following combinations:
      Permutation  SomeIpTpDevErrorDetect   SomeIpTpVersionInfoApi
      p0           TRUE                     TRUE
      p1           TRUE                     FALSE
      p2           FALSE                    TRUE
      p3           FALSE                    FALSE
      with each one of the following configurations:
      SOMEIPTP_NO_OF_RXNSDUS &gt; 0, SOMEIPTP_NO_OF_TXNSDUS &gt; 0
      SOMEIPTP_NO_OF_RXNSDUS = 0, SOMEIPTP_NO_OF_TXNSDUS &gt; 0
      SOMEIPTP_NO_OF_RXNSDUS &gt; 0, SOMEIPTP_NO_OF_TXNSDUS = 0
      SOMEIPTP_NO_OF_RXNSDUS = 0, SOMEIPTP_NO_OF_TXNSDUS = 0
    * The following general services are supported:
       - SomeIpTp_Init
       - SomeIpTp_GetVersionInfo
       - SomeIpTp_Transmit
       - SomeIpTp_TriggerTransmit
       - SomeIpTp_TxConfirmation
       - SomeIpTp_RxIndication
       - SomeIpTp_MainFunctionRx
       - SomeIpTp_MainFunctionTx
    This test partially verifies that
    * Det_ReportError is an optional API (exists)
  &lt;/para&gt;
  
Test Object: None.
Test Precondition: 
  
Test Execution: 
  
Test Input: 
  
Test Output: 
  &lt;/pre&gt;</description>
      <providescoverage>
        <provcov>
          <linksto>SomeIpTp.ECUC_SomeIpTp_00001.PC_CONFIG_VARIANT</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>101</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00043</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>64</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00044</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>65</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00066</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>86</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00047</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>68</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00053</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>74</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_91001.NoResult_RDUR403</linksto>
          <dstversion>2</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>116</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00056.ASR403</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>129</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00058</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>78</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00069</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>88</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.SWS_SomeIpTp_00046</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>67</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.ECUC_SomeIpTp_00019</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>18</internalId></provcov>
        <provcov>
          <linksto>SomeIpTp.ECUC_SomeIpTp_00004</linksto>
          <dstversion>1</dstversion>
        <linkstatus>linked</linkstatus><linkdestdoctype>swurs</linkdestdoctype><linkerror/><internalId>5</internalId></provcov>
      </providescoverage>
    <violations/><oreqmViolations/><covstatus>covered</covstatus><internalId>586</internalId></specobject>
  </specobjects>
  </specdocument>
  <violations/>
  <oreqmViolations/>
</tracingresults>
